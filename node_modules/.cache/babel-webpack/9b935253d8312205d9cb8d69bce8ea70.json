{"ast":null,"code":"import { Animation, Browser, ChildProperty, Complex, Component, Event, EventHandler, KeyboardEvents, L10n, NotifyPropertyChanges, Property, SanitizeHtmlHelper, addClass, append, attributes, classList, closest, compile, createElement, detach, extend, formatUnit, getComponent, getUniqueID, getValue, isNullOrUndefined, isUndefined, matches, prepend, remove, removeClass, rippleEffect, select, selectAll, setStyleAttribute, setValue } from '@syncfusion/ej2-base';\nimport { DataManager, DataUtil, Predicate, Query } from '@syncfusion/ej2-data';\nimport { ListBase, Sortable, cssClass, moveTo } from '@syncfusion/ej2-lists';\nimport { Popup, createSpinner, getZindexPartial, hideSpinner, isCollide, showSpinner } from '@syncfusion/ej2-popups';\nimport { Input, TextBox } from '@syncfusion/ej2-inputs';\nimport { Button, createCheckBox } from '@syncfusion/ej2-buttons';\nimport { TreeView } from '@syncfusion/ej2-navigations';\n/**\n * IncrementalSearch module file\n */\n\nvar queryString = '';\nvar prevString = '';\nvar matches$1 = [];\nvar activeClass = 'e-active';\nvar prevElementId = '';\n/**\n * Search and focus the list item based on key code matches with list text content\n *\n * @param  { number } keyCode - Specifies the key code which pressed on keyboard events.\n * @param  { HTMLElement[]} items - Specifies an array of HTMLElement, from which matches find has done.\n * @param { number } selectedIndex - Specifies the selected item in list item, so that search will happen\n * after selected item otherwise it will do from initial.\n * @param  { boolean } ignoreCase - Specifies the case consideration when search has done.\n * @param {string} elementId - Specifies the list element ID.\n * @returns {Element} Returns list item based on key code matches with list text content.\n */\n\nfunction incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId) {\n  queryString += String.fromCharCode(keyCode);\n  setTimeout(function () {\n    queryString = '';\n  }, 1000);\n  var index;\n  queryString = ignoreCase ? queryString.toLowerCase() : queryString;\n\n  if (prevElementId === elementId && prevString === queryString) {\n    for (var i = 0; i < matches$1.length; i++) {\n      if (matches$1[i].classList.contains(activeClass)) {\n        index = i;\n        break;\n      }\n    }\n\n    index = index + 1;\n    return matches$1[index] ? matches$1[index] : matches$1[0];\n  } else {\n    var listItems = items;\n    var strLength = queryString.length;\n    var text = void 0;\n    var item = void 0;\n    selectedIndex = selectedIndex ? selectedIndex + 1 : 0;\n    var i = selectedIndex;\n    matches$1 = [];\n\n    do {\n      if (i === listItems.length) {\n        i = -1;\n      }\n\n      if (i === -1) {\n        index = 0;\n      } else {\n        index = i;\n      }\n\n      item = listItems[index];\n      text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;\n\n      if (text.substr(0, strLength) === queryString) {\n        matches$1.push(listItems[index]);\n      }\n\n      i++;\n    } while (i !== selectedIndex);\n\n    prevString = queryString;\n    prevElementId = elementId;\n    return matches$1[0];\n  }\n}\n/**\n * Search the list item based on given input value matches with search type.\n *\n * @param {string} inputVal - Specifies the given input value.\n * @param {HTMLElement[]} items - Specifies the list items.\n * @param {SearchType} searchType - Specifies the filter type.\n * @param {boolean} ignoreCase - Specifies the case sensitive option for search operation.\n * @returns {Element | number} Returns the search matched items.\n */\n\n\nfunction Search(inputVal, items, searchType, ignoreCase, dataSource, fields, type) {\n  var listItems = items;\n  ignoreCase = ignoreCase !== undefined && ignoreCase !== null ? ignoreCase : true;\n  var itemData = {\n    item: null,\n    index: null\n  };\n\n  if (inputVal && inputVal.length) {\n    var strLength = inputVal.length;\n    var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;\n    queryStr = escapeCharRegExp(queryStr);\n\n    var _loop_1 = function (i, itemsData) {\n      var item = itemsData[i];\n      var text = void 0;\n      var filterValue;\n\n      if (items && dataSource) {\n        var checkField_1 = item;\n        var fieldValue_1 = fields.text.split('.');\n        dataSource.filter(function (data) {\n          Array.prototype.slice.call(fieldValue_1).forEach(function (value) {\n            /* eslint-disable security/detect-object-injection */\n            if (type === 'object' && checkField_1.textContent.toString().indexOf(data[value]) !== -1 && checkField_1.getAttribute('data-value') === data[fields.value].toString() || type === 'string' && checkField_1.textContent.toString().indexOf(data) !== -1) {\n              filterValue = type === 'object' ? data[value] : data;\n            }\n          });\n        });\n      }\n\n      text = dataSource && filterValue ? (ignoreCase ? filterValue.toLocaleLowerCase() : filterValue).replace(/^\\s+|\\s+$/g, '') : (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\\s+|\\s+$/g, '');\n      /* eslint-disable security/detect-non-literal-regexp */\n\n      if (searchType === 'Equal' && text === queryStr || searchType === 'StartsWith' && text.substr(0, strLength) === queryStr || searchType === 'EndsWith' && text.substr(text.length - queryStr.length) === queryStr || searchType === 'Contains' && new RegExp(queryStr, \"g\").test(text)) {\n        itemData.item = item;\n        itemData.index = i;\n        return {\n          value: {\n            item: item,\n            index: i\n          }\n        };\n      }\n    };\n\n    for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {\n      var state_1 = _loop_1(i, itemsData);\n\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n\n    return itemData;\n    /* eslint-enable security/detect-non-literal-regexp */\n  }\n\n  return itemData;\n}\n/* eslint-enable security/detect-object-injection */\n\n\nfunction escapeCharRegExp(value) {\n  return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction resetIncrementalSearchValues(elementId) {\n  if (prevElementId === elementId) {\n    prevElementId = '';\n    prevString = '';\n    queryString = '';\n    matches$1 = [];\n  }\n}\n/**\n * Function helps to find which highlightSearch is to call based on your data.\n *\n * @param  {HTMLElement} element - Specifies an li element.\n * @param  {string} query - Specifies the string to be highlighted.\n * @param  {boolean} ignoreCase - Specifies the ignoreCase option.\n * @param  {HightLightType} type - Specifies the type of highlight.\n * @returns {void}\n */\n\n\nfunction highlightSearch(element, query, ignoreCase, type) {\n  if (query === '') {\n    return;\n  } else {\n    var ignoreRegex = ignoreCase ? 'gim' : 'gm'; // eslint-disable-next-line\n\n    query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n    var replaceQuery = type === 'StartsWith' ? '^(' + query + ')' : type === 'EndsWith' ? '(' + query + ')$' : '(' + query + ')'; // eslint-disable-next-line security/detect-non-literal-regexp\n\n    findTextNode(element, new RegExp(replaceQuery, ignoreRegex));\n  }\n}\n/* eslint-enable jsdoc/require-param, valid-jsdoc */\n\n/**\n *\n * @param {HTMLElement} element - Specifies the element.\n * @param {RegExp} pattern - Specifies the regex to match the searched text.\n * @returns {void}\n */\n\n\nfunction findTextNode(element, pattern) {\n  for (var index = 0; element.childNodes && index < element.childNodes.length; index++) {\n    if (element.childNodes[index].nodeType === 3 && element.childNodes[index].textContent.trim() !== '') {\n      var value = element.childNodes[index].nodeValue.trim().replace(pattern, '<span class=\"e-highlight\">$1</span>');\n      element.childNodes[index].nodeValue = '';\n      element.innerHTML = element.innerHTML.trim() + value;\n      break;\n    } else {\n      findTextNode(element.childNodes[index], pattern);\n    }\n  }\n}\n/**\n * Function helps to remove highlighted element based on your data.\n *\n * @param  {HTMLElement} content - Specifies an content element.\n * @returns {void}\n */\n\n\nfunction revertHighlightSearch(content) {\n  var contentElement = content.querySelectorAll('.e-highlight');\n\n  for (var i = contentElement.length - 1; i >= 0; i--) {\n    var parent_1 = contentElement[i].parentNode;\n    var text = document.createTextNode(contentElement[i].textContent);\n    parent_1.replaceChild(text, contentElement[i]);\n  }\n}\n/**\n * Common source\n */\n\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar FieldSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends(FieldSettings, _super);\n\n  function FieldSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property()], FieldSettings.prototype, \"text\", void 0);\n\n  __decorate([Property()], FieldSettings.prototype, \"value\", void 0);\n\n  __decorate([Property()], FieldSettings.prototype, \"iconCss\", void 0);\n\n  __decorate([Property()], FieldSettings.prototype, \"groupBy\", void 0);\n\n  __decorate([Property()], FieldSettings.prototype, \"htmlAttributes\", void 0);\n\n  return FieldSettings;\n}(ChildProperty);\n\nvar dropDownBaseClasses = {\n  root: 'e-dropdownbase',\n  rtl: 'e-rtl',\n  content: 'e-content',\n  selected: 'e-active',\n  hover: 'e-hover',\n  noData: 'e-nodata',\n  fixedHead: 'e-fixed-head',\n  focus: 'e-item-focus',\n  li: 'e-list-item',\n  group: 'e-list-group-item',\n  disabled: 'e-disabled',\n  grouping: 'e-dd-group'\n};\nvar ITEMTEMPLATE_PROPERTY = 'ItemTemplate';\nvar DISPLAYTEMPLATE_PROPERTY = 'DisplayTemplate';\nvar SPINNERTEMPLATE_PROPERTY = 'SpinnerTemplate';\nvar VALUETEMPLATE_PROPERTY = 'ValueTemplate';\nvar GROUPTEMPLATE_PROPERTY = 'GroupTemplate';\nvar HEADERTEMPLATE_PROPERTY = 'HeaderTemplate';\nvar FOOTERTEMPLATE_PROPERTY = 'FooterTemplate';\nvar NORECORDSTEMPLATE_PROPERTY = 'NoRecordsTemplate';\nvar ACTIONFAILURETEMPLATE_PROPERTY = 'ActionFailureTemplate';\nvar HIDE_GROUPLIST = 'e-hide-group-header';\n/**\n * DropDownBase component will generate the list items based on given data and act as base class to drop-down related components\n */\n\nvar DropDownBase =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends(DropDownBase, _super);\n  /**\n   * * Constructor for DropDownBase class\n   *\n   * @param {DropDownBaseModel} options - Specifies the DropDownBase model.\n   * @param {string | HTMLElement} element - Specifies the element to render as component.\n   * @private\n   */\n\n\n  function DropDownBase(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.preventChange = false;\n    _this.isAngular = false;\n    _this.isPreventChange = false;\n    _this.isDynamicDataChange = false;\n    _this.addedNewItem = false;\n    return _this;\n  }\n\n  DropDownBase.prototype.getPropObject = function (prop, newProp, oldProp) {\n    var newProperty = new Object();\n    var oldProperty = new Object();\n\n    var propName = function (prop) {\n      return prop;\n    };\n\n    newProperty[propName(prop)] = newProp[propName(prop)];\n    oldProperty[propName(prop)] = oldProp[propName(prop)];\n    var data = new Object();\n    data.newProperty = newProperty;\n    data.oldProperty = oldProperty;\n    return data;\n  };\n\n  DropDownBase.prototype.getValueByText = function (text, ignoreCase, ignoreAccent) {\n    var value = null;\n\n    if (!isNullOrUndefined(this.listData)) {\n      if (ignoreCase) {\n        value = this.checkValueCase(text, true, ignoreAccent);\n      } else {\n        value = this.checkValueCase(text, false, ignoreAccent);\n      }\n    }\n\n    return value;\n  };\n\n  DropDownBase.prototype.checkValueCase = function (text, ignoreCase, ignoreAccent, isTextByValue) {\n    var _this = this;\n\n    var value = null;\n\n    if (isTextByValue) {\n      value = text;\n    }\n\n    var dataSource = this.listData;\n    var fields = this.fields;\n    var type = this.typeOfData(dataSource).typeof;\n\n    if (type === 'string' || type === 'number' || type === 'boolean') {\n      for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n        var item = dataSource_1[_i];\n\n        if (!isNullOrUndefined(item)) {\n          if (ignoreAccent) {\n            value = this.checkingAccent(String(item), text, ignoreCase);\n          } else {\n            if (ignoreCase) {\n              if (this.checkIgnoreCase(String(item), text)) {\n                value = this.getItemValue(String(item), text, ignoreCase);\n              }\n            } else {\n              if (this.checkNonIgnoreCase(String(item), text)) {\n                value = this.getItemValue(String(item), text, ignoreCase, isTextByValue);\n              }\n            }\n          }\n        }\n      }\n    } else {\n      if (ignoreCase) {\n        dataSource.filter(function (item) {\n          var itemValue = getValue(fields.value, item);\n\n          if (!isNullOrUndefined(itemValue) && _this.checkIgnoreCase(getValue(fields.text, item).toString(), text)) {\n            value = getValue(fields.value, item);\n          }\n        });\n      } else {\n        if (isTextByValue) {\n          var compareValue_1 = null;\n          compareValue_1 = value;\n          dataSource.filter(function (item) {\n            var itemValue = getValue(fields.value, item);\n\n            if (!isNullOrUndefined(itemValue) && !isNullOrUndefined(value) && itemValue.toString() === compareValue_1.toString()) {\n              value = getValue(fields.text, item);\n            }\n          });\n        } else {\n          dataSource.filter(function (item) {\n            if (_this.checkNonIgnoreCase(getValue(fields.text, item), text)) {\n              value = getValue(fields.value, item);\n            }\n          });\n        }\n      }\n    }\n\n    return value;\n  };\n\n  DropDownBase.prototype.checkingAccent = function (item, text, ignoreCase) {\n    var dataItem = DataUtil.ignoreDiacritics(String(item));\n    var textItem = DataUtil.ignoreDiacritics(text.toString());\n    var value = null;\n\n    if (ignoreCase) {\n      if (this.checkIgnoreCase(dataItem, textItem)) {\n        value = this.getItemValue(String(item), text, ignoreCase);\n      }\n    } else {\n      if (this.checkNonIgnoreCase(String(item), text)) {\n        value = this.getItemValue(String(item), text, ignoreCase);\n      }\n    }\n\n    return value;\n  };\n\n  DropDownBase.prototype.checkIgnoreCase = function (item, text) {\n    return String(item).toLowerCase() === text.toString().toLowerCase() ? true : false;\n  };\n\n  DropDownBase.prototype.checkNonIgnoreCase = function (item, text) {\n    return String(item) === text.toString() ? true : false;\n  };\n\n  DropDownBase.prototype.getItemValue = function (dataItem, typedText, ignoreCase, isTextByValue) {\n    var value = null;\n    var dataSource = this.listData;\n    var type = this.typeOfData(dataSource).typeof;\n\n    if (isTextByValue) {\n      value = dataItem.toString();\n    } else {\n      if (ignoreCase) {\n        value = type === 'string' ? String(dataItem) : this.getFormattedValue(String(dataItem));\n      } else {\n        value = type === 'string' ? typedText : this.getFormattedValue(typedText);\n      }\n    }\n\n    return value;\n  };\n\n  DropDownBase.prototype.templateCompiler = function (baseTemplate) {\n    var checkTemplate = false;\n\n    if (baseTemplate) {\n      try {\n        checkTemplate = selectAll(baseTemplate, document).length ? true : false;\n      } catch (exception) {\n        checkTemplate = false;\n      }\n    }\n\n    return checkTemplate;\n  };\n\n  DropDownBase.prototype.l10nUpdate = function (actionFailure) {\n    var ele = this.getModuleName() === 'listbox' ? this.ulElement : this.list;\n\n    if (this.noRecordsTemplate !== 'No records found' || this.actionFailureTemplate !== 'Request failed') {\n      var template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;\n      var compiledString = void 0;\n      var templateId = actionFailure ? this.actionFailureTemplateId : this.noRecordsTemplateId;\n      ele.innerHTML = '';\n      var tempaltecheck = this.templateCompiler(template);\n\n      if (tempaltecheck) {\n        compiledString = compile(select(template, document).innerHTML.trim());\n      } else {\n        compiledString = compile(template);\n      }\n\n      var templateName = actionFailure ? 'actionFailureTemplate' : 'noRecordsTemplate'; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      var noDataCompTemp = compiledString({}, this, templateName, templateId, this.isStringTemplate, null, ele);\n\n      if (noDataCompTemp && noDataCompTemp.length > 0) {\n        for (var i = 0; i < noDataCompTemp.length; i++) {\n          if (this.getModuleName() === 'listbox' && templateName === 'noRecordsTemplate') {\n            noDataCompTemp[i].classList.add('e-list-nr-template');\n          }\n\n          ele.appendChild(noDataCompTemp[i]);\n        }\n      }\n\n      this.renderReactTemplates();\n    } else {\n      var l10nLocale = {\n        noRecordsTemplate: 'No records found',\n        actionFailureTemplate: 'Request failed'\n      };\n      var componentLocale = new L10n(this.getLocaleName(), {}, this.locale);\n\n      if (componentLocale.getConstant('actionFailureTemplate') !== '') {\n        this.l10n = componentLocale;\n      } else {\n        this.l10n = new L10n(this.getModuleName() === 'listbox' ? 'listbox' : this.getModuleName() === 'mention' ? 'mention' : 'dropdowns', l10nLocale, this.locale);\n      }\n\n      var content = actionFailure ? this.l10n.getConstant('actionFailureTemplate') : this.l10n.getConstant('noRecordsTemplate');\n\n      if (this.getModuleName() === 'listbox') {\n        var liElem = this.createElement('li');\n        liElem.textContent = content;\n        ele.appendChild(liElem);\n        liElem.classList.add('e-list-nrt');\n        liElem.setAttribute('role', 'option');\n      } else {\n        if (!isNullOrUndefined(ele)) {\n          ele.innerHTML = content;\n        }\n      }\n    }\n  };\n\n  DropDownBase.prototype.getLocaleName = function () {\n    return 'drop-down-base';\n  };\n\n  DropDownBase.prototype.getTextByValue = function (value) {\n    var text = this.checkValueCase(value, false, false, true);\n    return text;\n  };\n\n  DropDownBase.prototype.getFormattedValue = function (value) {\n    if (this.listData && this.listData.length) {\n      var item = void 0;\n\n      if (this.properties.allowCustomValue && this.properties.value && this.properties.value instanceof Array && this.properties.value.length > 0) {\n        item = this.typeOfData(this.properties.value);\n      } else {\n        item = this.typeOfData(this.listData);\n      }\n\n      if (typeof getValue(this.fields.value ? this.fields.value : 'value', item.item) === 'number' || item.typeof === 'number') {\n        return parseFloat(value);\n      }\n\n      if (typeof getValue(this.fields.value ? this.fields.value : 'value', item.item) === 'boolean' || item.typeof === 'boolean') {\n        return value === 'true' || '' + value === 'true';\n      }\n    }\n\n    return value;\n  };\n  /**\n   * Sets RTL to dropdownbase wrapper\n   *\n   * @returns {void}\n   */\n\n\n  DropDownBase.prototype.setEnableRtl = function () {\n    if (!isNullOrUndefined(this.enableRtlElements)) {\n      if (this.list) {\n        this.enableRtlElements.push(this.list);\n      }\n\n      if (this.enableRtl) {\n        addClass(this.enableRtlElements, dropDownBaseClasses.rtl);\n      } else {\n        removeClass(this.enableRtlElements, dropDownBaseClasses.rtl);\n      }\n    }\n  };\n  /**\n   * Initialize the Component.\n   *\n   * @returns {void}\n   */\n\n\n  DropDownBase.prototype.initialize = function (e) {\n    this.bindEvent = true;\n    this.actionFailureTemplateId = \"\" + this.element.id + ACTIONFAILURETEMPLATE_PROPERTY;\n\n    if (this.element.tagName === 'UL') {\n      var jsonElement = ListBase.createJsonFromElement(this.element);\n      this.setProperties({\n        fields: {\n          text: 'text',\n          value: 'text'\n        }\n      }, true);\n      this.resetList(jsonElement, this.fields);\n    } else if (this.element.tagName === 'SELECT') {\n      var dataSource = this.dataSource instanceof Array ? this.dataSource.length > 0 ? true : false : !isNullOrUndefined(this.dataSource) ? true : false;\n\n      if (!dataSource) {\n        this.renderItemsBySelect();\n      } else if (this.isDynamicDataChange) {\n        this.setListData(this.dataSource, this.fields, this.query);\n      }\n    } else {\n      this.setListData(this.dataSource, this.fields, this.query, e);\n    }\n  };\n  /**\n   * Get the properties to be maintained in persisted state.\n   *\n   * @returns {string} Returns the persisted data of the component.\n   */\n\n\n  DropDownBase.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n  /**\n   * Sets the enabled state to DropDownBase.\n   *\n   * @param {string} value - Specifies the attribute values to add on the input element.\n   * @returns {void}\n   */\n\n\n  DropDownBase.prototype.updateDataAttribute = function (value) {\n    var invalidAttr = ['class', 'style', 'id', 'type', 'aria-expanded', 'aria-autocomplete', 'aria-readonly'];\n    var attr = {};\n\n    for (var a = 0; a < this.element.attributes.length; a++) {\n      if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !(this.getModuleName() === 'dropdownlist' && this.element.attributes[a].name === 'readonly')) {\n        attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);\n      }\n    }\n\n    extend(attr, value, attr);\n    this.setProperties({\n      htmlAttributes: attr\n    }, true);\n  };\n\n  DropDownBase.prototype.renderItemsBySelect = function () {\n    var element = this.element;\n    var fields = {\n      value: 'value',\n      text: 'text'\n    };\n    var jsonElement = [];\n    var group = element.querySelectorAll('select>optgroup');\n    var option = element.querySelectorAll('select>option');\n    this.getJSONfromOption(jsonElement, option, fields);\n\n    if (group.length) {\n      for (var i = 0; i < group.length; i++) {\n        var item = group[i];\n        var optionGroup = {};\n        optionGroup[fields.text] = item.label;\n        optionGroup.isHeader = true;\n        var child = item.querySelectorAll('option');\n        jsonElement.push(optionGroup);\n        this.getJSONfromOption(jsonElement, child, fields);\n      }\n\n      element.querySelectorAll('select>option');\n    }\n\n    this.updateFields(fields.text, fields.value, this.fields.groupBy, this.fields.htmlAttributes, this.fields.iconCss);\n    this.resetList(jsonElement, fields);\n  };\n\n  DropDownBase.prototype.updateFields = function (text, value, groupBy, htmlAttributes, iconCss) {\n    var field = {\n      'fields': {\n        text: text,\n        value: value,\n        groupBy: !isNullOrUndefined(groupBy) ? groupBy : this.fields && this.fields.groupBy,\n        htmlAttributes: !isNullOrUndefined(htmlAttributes) ? htmlAttributes : this.fields && this.fields.htmlAttributes,\n        iconCss: !isNullOrUndefined(iconCss) ? iconCss : this.fields && this.fields.iconCss\n      }\n    };\n    this.setProperties(field, true);\n  };\n\n  DropDownBase.prototype.getJSONfromOption = function (items, options, fields) {\n    for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {\n      var option = options_1[_i];\n      var json = {};\n      json[fields.text] = option.innerText;\n      json[fields.value] = !isNullOrUndefined(option.getAttribute(fields.value)) ? option.getAttribute(fields.value) : option.innerText;\n      items.push(json);\n    }\n  };\n  /**\n   * Execute before render the list items\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  DropDownBase.prototype.preRender = function () {\n    // there is no event handler\n    this.scrollTimer = -1;\n    this.enableRtlElements = [];\n    this.isRequested = false;\n    this.isDataFetched = false;\n    this.itemTemplateId = \"\" + this.element.id + ITEMTEMPLATE_PROPERTY;\n    this.displayTemplateId = \"\" + this.element.id + DISPLAYTEMPLATE_PROPERTY;\n    this.spinnerTemplateId = \"\" + this.element.id + SPINNERTEMPLATE_PROPERTY;\n    this.valueTemplateId = \"\" + this.element.id + VALUETEMPLATE_PROPERTY;\n    this.groupTemplateId = \"\" + this.element.id + GROUPTEMPLATE_PROPERTY;\n    this.headerTemplateId = \"\" + this.element.id + HEADERTEMPLATE_PROPERTY;\n    this.footerTemplateId = \"\" + this.element.id + FOOTERTEMPLATE_PROPERTY;\n    this.noRecordsTemplateId = \"\" + this.element.id + NORECORDSTEMPLATE_PROPERTY;\n  };\n  /**\n   * Creates the list items of DropDownBase component.\n   *\n   * @param {Object[] | string[] | number[] | DataManager | boolean[]} dataSource - Specifies the data to generate the list.\n   * @param {FieldSettingsModel} fields - Maps the columns of the data table and binds the data to the component.\n   * @param {Query} query - Accepts the external Query that execute along with data processing.\n   * @returns {void}\n   */\n\n\n  DropDownBase.prototype.setListData = function (dataSource, fields, query, event) {\n    var _this = this;\n\n    fields = fields ? fields : this.fields;\n    var ulElement;\n    this.isActive = true;\n    var eventArgs = {\n      cancel: false,\n      data: dataSource,\n      query: query\n    };\n    this.isPreventChange = this.isAngular && this.preventChange ? true : this.isPreventChange;\n    this.trigger('actionBegin', eventArgs, function (eventArgs) {\n      if (!eventArgs.cancel) {\n        _this.showSpinner();\n\n        if (dataSource instanceof DataManager) {\n          _this.isRequested = true;\n\n          if (_this.isDataFetched) {\n            _this.emptyDataRequest(fields);\n\n            return;\n          }\n\n          eventArgs.data.executeQuery(_this.getQuery(eventArgs.query)).then(function (e) {\n            _this.isPreventChange = _this.isAngular && _this.preventChange ? true : _this.isPreventChange;\n\n            _this.trigger('actionComplete', e, function (e) {\n              if (!e.cancel) {\n                var listItems = e.result;\n\n                if (listItems.length === 0) {\n                  _this.isDataFetched = true;\n                }\n\n                ulElement = _this.renderItems(listItems, fields);\n\n                _this.onActionComplete(ulElement, listItems, e);\n\n                if (_this.groupTemplate) {\n                  _this.renderGroupTemplate(ulElement);\n                }\n\n                _this.isRequested = false;\n\n                _this.bindChildItems(listItems, ulElement, fields, e);\n              }\n            });\n          }).catch(function (e) {\n            _this.isRequested = false;\n\n            _this.onActionFailure(e);\n\n            _this.hideSpinner();\n          });\n        } else {\n          var dataManager = new DataManager(eventArgs.data);\n\n          var listItems = _this.getQuery(eventArgs.query).executeLocal(dataManager);\n\n          var localDataArgs = {\n            cancel: false,\n            result: listItems\n          };\n          _this.isPreventChange = _this.isAngular && _this.preventChange ? true : _this.isPreventChange;\n\n          _this.trigger('actionComplete', localDataArgs, function (localDataArgs) {\n            if (!localDataArgs.cancel) {\n              ulElement = _this.renderItems(localDataArgs.result, fields);\n\n              _this.onActionComplete(ulElement, localDataArgs.result, event);\n\n              if (_this.groupTemplate) {\n                _this.renderGroupTemplate(ulElement);\n              }\n\n              _this.bindChildItems(localDataArgs.result, ulElement, fields);\n\n              setTimeout(function () {\n                if (_this.getModuleName() === 'multiselect' && _this.itemTemplate != null && ulElement.childElementCount > 0 && (ulElement.children[0].childElementCount > 0 || _this.fields.groupBy && ulElement.children[1] && ulElement.children[1].childElementCount > 0)) {\n                  _this.updateDataList();\n                }\n              });\n            }\n          });\n        }\n      }\n    });\n  };\n\n  DropDownBase.prototype.bindChildItems = function (listItems, ulElement, fields, e) {\n    var _this = this;\n\n    if (listItems.length >= 100 && this.getModuleName() === 'autocomplete') {\n      setTimeout(function () {\n        var childNode = _this.remainingItems(_this.sortedData, fields);\n\n        append(childNode, ulElement);\n        _this.liCollections = _this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n\n        _this.updateListValues();\n\n        _this.raiseDataBound(listItems, e);\n      }, 0);\n    } else {\n      this.raiseDataBound(listItems, e);\n    }\n  };\n\n  DropDownBase.prototype.updateListValues = function () {// Used this method in component side.\n  };\n\n  DropDownBase.prototype.findListElement = function (list, findNode, attribute, value) {\n    var liElement = null;\n\n    if (list) {\n      var listArr = [].slice.call(list.querySelectorAll(findNode));\n\n      for (var index = 0; index < listArr.length; index++) {\n        if (listArr[index].getAttribute(attribute) === value + '') {\n          liElement = listArr[index];\n          break;\n        }\n      }\n    }\n\n    return liElement;\n  };\n\n  DropDownBase.prototype.raiseDataBound = function (listItems, e) {\n    this.hideSpinner();\n    var dataBoundEventArgs = {\n      items: listItems,\n      e: e\n    };\n    this.trigger('dataBound', dataBoundEventArgs);\n  };\n\n  DropDownBase.prototype.remainingItems = function (dataSource, fields) {\n    var spliceData = new DataManager(dataSource).executeLocal(new Query().skip(100));\n\n    if (this.itemTemplate) {\n      var listElements = this.templateListItem(spliceData, fields);\n      return [].slice.call(listElements.childNodes);\n    }\n\n    var type = this.typeOfData(spliceData).typeof;\n\n    if (type === 'string' || type === 'number' || type === 'boolean') {\n      return ListBase.createListItemFromArray(this.createElement, spliceData, true, this.listOption(spliceData, fields), this);\n    }\n\n    return ListBase.createListItemFromJson(this.createElement, spliceData, this.listOption(spliceData, fields), 1, true, this);\n  };\n\n  DropDownBase.prototype.emptyDataRequest = function (fields) {\n    var listItems = [];\n    this.onActionComplete(this.renderItems(listItems, fields), listItems);\n    this.isRequested = false;\n    this.hideSpinner();\n  };\n\n  DropDownBase.prototype.showSpinner = function () {// Used this method in component side.\n  };\n\n  DropDownBase.prototype.hideSpinner = function () {// Used this method in component side.\n  };\n\n  DropDownBase.prototype.onActionFailure = function (e) {\n    this.liCollections = [];\n    this.trigger('actionFailure', e);\n    this.l10nUpdate(true);\n\n    if (!isNullOrUndefined(this.list)) {\n      addClass([this.list], dropDownBaseClasses.noData);\n    }\n  };\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n  DropDownBase.prototype.onActionComplete = function (ulElement, list, e) {\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    this.listData = list; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    if (this.isReact) {\n      this.clearTemplate(['itemTemplate', 'groupTemplate', 'actionFailureTemplate', 'noRecordsTemplate']);\n    }\n\n    this.fixedHeaderElement = isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement : null;\n\n    if (this.getModuleName() === 'multiselect' && this.properties.allowCustomValue && this.fields.groupBy) {\n      for (var i = 0; i < ulElement.childElementCount; i++) {\n        if (ulElement.children[i].classList.contains('e-list-group-item')) {\n          if (isNullOrUndefined(ulElement.children[i].innerHTML) || ulElement.children[i].innerHTML == \"\") {\n            addClass([ulElement.children[i]], HIDE_GROUPLIST);\n          }\n        }\n      }\n    }\n\n    if (!isNullOrUndefined(this.list)) {\n      this.list.innerHTML = '';\n      this.list.appendChild(ulElement);\n      this.liCollections = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n      this.ulElement = this.list.querySelector('ul');\n      this.postRender(this.list, list, this.bindEvent);\n    }\n  };\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n  DropDownBase.prototype.postRender = function (listElement, list, bindEvent) {\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    var focusItem = listElement.querySelector('.' + dropDownBaseClasses.li);\n    var selectedItem = listElement.querySelector('.' + dropDownBaseClasses.selected);\n\n    if (focusItem && !selectedItem) {\n      focusItem.classList.add(dropDownBaseClasses.focus);\n    }\n\n    if (list.length <= 0) {\n      this.l10nUpdate();\n      addClass([listElement], dropDownBaseClasses.noData);\n    } else {\n      listElement.classList.remove(dropDownBaseClasses.noData);\n    }\n  };\n  /**\n   * Get the query to do the data operation before list item generation.\n   *\n   * @param {Query} query - Accepts the external Query that execute along with data processing.\n   * @returns {Query} Returns the query to do the data query operation.\n   */\n\n\n  DropDownBase.prototype.getQuery = function (query) {\n    return query ? query : this.query ? this.query : new Query();\n  };\n  /**\n   * To render the template content for group header element.\n   *\n   * @param {HTMLElement} listEle - Specifies the group list elements.\n   * @returns {void}\n   */\n\n\n  DropDownBase.prototype.renderGroupTemplate = function (listEle) {\n    if (this.fields.groupBy !== null && this.dataSource || this.element.querySelector('.' + dropDownBaseClasses.group)) {\n      var dataSource = this.dataSource;\n      var option = {\n        groupTemplateID: this.groupTemplateId,\n        isStringTemplate: this.isStringTemplate\n      };\n      var headerItems = listEle.querySelectorAll('.' + dropDownBaseClasses.group);\n      var groupcheck = this.templateCompiler(this.groupTemplate);\n\n      if (groupcheck) {\n        var groupValue = select(this.groupTemplate, document).innerHTML.trim(); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n        var tempHeaders = ListBase.renderGroupTemplate(groupValue, dataSource, this.fields.properties, headerItems, option, this); //EJ2-55168- Group checkbox is not working with group template\n\n        if (this.isGroupChecking) {\n          for (var i = 0; i < tempHeaders.length; i++) {\n            this.notify('addItem', {\n              module: 'CheckBoxSelection',\n              item: tempHeaders[i]\n            });\n          }\n        }\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        var tempHeaders = ListBase.renderGroupTemplate(this.groupTemplate, dataSource, this.fields.properties, headerItems, option, this); //EJ2-55168- Group checkbox is not working with group template\n\n        if (this.isGroupChecking) {\n          for (var i = 0; i < tempHeaders.length; i++) {\n            this.notify('addItem', {\n              module: 'CheckBoxSelection',\n              item: tempHeaders[i]\n            });\n          }\n        }\n      }\n\n      this.renderReactTemplates();\n    }\n  };\n  /**\n   * To create the ul li list items\n   *\n   * @param {object []} dataSource - Specifies the data to generate the list.\n   * @param {FieldSettingsModel} fields - Maps the columns of the data table and binds the data to the component.\n   * @returns {HTMLElement} Return the ul li list items.\n   */\n\n\n  DropDownBase.prototype.createListItems = function (dataSource, fields) {\n    if (dataSource && fields.groupBy || this.element.querySelector('optgroup')) {\n      if (fields.groupBy) {\n        if (this.sortOrder !== 'None') {\n          dataSource = this.getSortedDataSource(dataSource);\n        }\n\n        dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);\n      }\n\n      addClass([this.list], dropDownBaseClasses.grouping);\n    } else {\n      dataSource = this.getSortedDataSource(dataSource);\n    }\n\n    var options = this.listOption(dataSource, fields);\n    var spliceData = dataSource.length > 100 ? new DataManager(dataSource).executeLocal(new Query().take(100)) : dataSource;\n    this.sortedData = dataSource;\n    return ListBase.createList(this.createElement, this.getModuleName() === 'autocomplete' ? spliceData : dataSource, options, true, this);\n  };\n\n  DropDownBase.prototype.listOption = function (dataSource, fields) {\n    var iconCss = isNullOrUndefined(fields.iconCss) ? false : true;\n    var fieldValues = !isNullOrUndefined(fields.properties) ? fields.properties : fields;\n    var options = fields.text !== null || fields.value !== null ? {\n      fields: fieldValues,\n      showIcon: iconCss,\n      ariaAttributes: {\n        groupItemRole: 'presentation'\n      }\n    } : {\n      fields: {\n        value: 'text'\n      }\n    };\n    return extend({}, options, fields, true);\n  };\n\n  DropDownBase.prototype.setFloatingHeader = function (e) {\n    if (!isNullOrUndefined(this.list) && !this.list.classList.contains(dropDownBaseClasses.noData)) {\n      if (isNullOrUndefined(this.fixedHeaderElement)) {\n        this.fixedHeaderElement = this.createElement('div', {\n          className: dropDownBaseClasses.fixedHead\n        });\n\n        if (!isNullOrUndefined(this.list) && !this.list.querySelector('li').classList.contains(dropDownBaseClasses.group)) {\n          this.fixedHeaderElement.style.display = 'none';\n        }\n\n        if (!isNullOrUndefined(this.fixedHeaderElement) && !isNullOrUndefined(this.list)) {\n          prepend([this.fixedHeaderElement], this.list);\n        }\n\n        this.setFixedHeader();\n      }\n\n      if (!isNullOrUndefined(this.fixedHeaderElement) && this.fixedHeaderElement.style.zIndex === '0') {\n        this.setFixedHeader();\n      }\n\n      this.scrollStop(e);\n    }\n  };\n\n  DropDownBase.prototype.scrollStop = function (e) {\n    var target = !isNullOrUndefined(e) ? e.target : this.list;\n    var liHeight = parseInt(getComputedStyle(this.getValidLi(), null).getPropertyValue('height'), 10);\n    var topIndex = Math.round(target.scrollTop / liHeight);\n    var liCollections = this.list.querySelectorAll('li' + ':not(.e-hide-listitem)');\n\n    for (var i = topIndex; i > -1; i--) {\n      if (!isNullOrUndefined(liCollections[i]) && liCollections[i].classList.contains(dropDownBaseClasses.group)) {\n        var currentLi = liCollections[i];\n        this.fixedHeaderElement.innerHTML = currentLi.innerHTML;\n        this.fixedHeaderElement.style.top = target.scrollTop + 'px';\n        this.fixedHeaderElement.style.display = 'block';\n        break;\n      } else {\n        this.fixedHeaderElement.style.display = 'none';\n        this.fixedHeaderElement.style.top = 'none';\n      }\n    }\n  };\n\n  DropDownBase.prototype.getValidLi = function () {\n    return this.liCollections[0];\n  };\n  /**\n   * To render the list items\n   *\n   * @param {object[]} listData - Specifies the list of array of data.\n   * @param {FieldSettingsModel} fields - Maps the columns of the data table and binds the data to the component.\n   * @returns {HTMLElement} Return the list items.\n   */\n\n\n  DropDownBase.prototype.renderItems = function (listData, fields) {\n    var ulElement;\n\n    if (this.itemTemplate && listData) {\n      var dataSource = listData;\n\n      if (dataSource && fields.groupBy) {\n        if (this.sortOrder !== 'None') {\n          dataSource = this.getSortedDataSource(dataSource);\n        }\n\n        dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);\n      } else {\n        dataSource = this.getSortedDataSource(dataSource);\n      }\n\n      this.sortedData = dataSource;\n      var spliceData = dataSource.length > 100 ? new DataManager(dataSource).executeLocal(new Query().take(100)) : dataSource;\n      ulElement = this.templateListItem(this.getModuleName() === 'autocomplete' ? spliceData : dataSource, fields);\n    } else {\n      ulElement = this.createListItems(listData, fields);\n    }\n\n    return ulElement;\n  };\n\n  DropDownBase.prototype.templateListItem = function (dataSource, fields) {\n    var option = this.listOption(dataSource, fields);\n    option.templateID = this.itemTemplateId;\n    option.isStringTemplate = this.isStringTemplate;\n    var itemcheck = this.templateCompiler(this.itemTemplate);\n\n    if (itemcheck) {\n      var itemValue = select(this.itemTemplate, document).innerHTML.trim();\n      return ListBase.renderContentTemplate(this.createElement, itemValue, dataSource, fields.properties, option, this);\n    } else {\n      return ListBase.renderContentTemplate(this.createElement, this.itemTemplate, dataSource, fields.properties, option, this);\n    }\n  };\n\n  DropDownBase.prototype.typeOfData = function (items) {\n    var item = {\n      typeof: null,\n      item: null\n    };\n\n    for (var i = 0; !isNullOrUndefined(items) && i < items.length; i++) {\n      if (!isNullOrUndefined(items[i])) {\n        var listDataType = typeof items[i] === 'string' || typeof items[i] === 'number' || typeof items[i] === 'boolean';\n        var isNullData = listDataType ? isNullOrUndefined(items[i]) : isNullOrUndefined(getValue(this.fields.value ? this.fields.value : 'value', items[i]));\n\n        if (!isNullData) {\n          return item = {\n            typeof: typeof items[i],\n            item: items[i]\n          };\n        }\n      }\n    }\n\n    return item;\n  };\n\n  DropDownBase.prototype.setFixedHeader = function () {\n    if (!isNullOrUndefined(this.list)) {\n      this.list.parentElement.style.display = 'block';\n    }\n\n    var borderWidth = 0;\n\n    if (this.list && this.list.parentElement) {\n      borderWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-width'), 10);\n      /*Shorthand property not working in Firefox for getComputedStyle method.\n      Refer bug report https://bugzilla.mozilla.org/show_bug.cgi?id=137688\n      Refer alternate solution https://stackoverflow.com/a/41696234/9133493*/\n\n      if (isNaN(borderWidth)) {\n        var borderTopWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-top-width'), 10);\n        var borderBottomWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-bottom-width'), 10);\n        var borderLeftWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-left-width'), 10);\n        var borderRightWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue('border-right-width'), 10);\n        borderWidth = borderTopWidth + borderBottomWidth + borderLeftWidth + borderRightWidth;\n      }\n    }\n\n    if (!isNullOrUndefined(this.liCollections)) {\n      var liWidth = this.getValidLi().offsetWidth - borderWidth;\n      this.fixedHeaderElement.style.width = liWidth.toString() + 'px';\n    }\n\n    setStyleAttribute(this.fixedHeaderElement, {\n      zIndex: 10\n    });\n    var firstLi = this.ulElement.querySelector('.' + dropDownBaseClasses.group + ':not(.e-hide-listitem)');\n    this.fixedHeaderElement.innerHTML = firstLi.innerHTML;\n  };\n\n  DropDownBase.prototype.getSortedDataSource = function (dataSource) {\n    if (dataSource && this.sortOrder !== 'None') {\n      var textField = this.fields.text ? this.fields.text : 'text';\n\n      if (this.typeOfData(dataSource).typeof === 'string' || this.typeOfData(dataSource).typeof === 'number' || this.typeOfData(dataSource).typeof === 'boolean') {\n        textField = '';\n      }\n\n      dataSource = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, textField));\n    }\n\n    return dataSource;\n  };\n  /**\n   * Return the index of item which matched with given value in data source\n   *\n   * @param {string | number | boolean} value - Specifies given value.\n   * @returns {number} Returns the index of the item.\n   */\n\n\n  DropDownBase.prototype.getIndexByValue = function (value) {\n    var index;\n    var listItems = this.getItems();\n\n    for (var i = 0; i < listItems.length; i++) {\n      if (!isNullOrUndefined(value) && listItems[i].getAttribute('data-value') === value.toString()) {\n        index = i;\n        break;\n      }\n    }\n\n    return index;\n  };\n  /**\n   * To dispatch the event manually\n   *\n   * @param {HTMLElement} element - Specifies the element to dispatch the event.\n   * @param {string} type - Specifies the name of the event.\n   * @returns {void}\n   */\n\n\n  DropDownBase.prototype.dispatchEvent = function (element, type) {\n    var evt = document.createEvent('HTMLEvents');\n    evt.initEvent(type, false, true);\n    element.dispatchEvent(evt);\n  };\n  /**\n   * To set the current fields\n   *\n   * @returns {void}\n   */\n\n\n  DropDownBase.prototype.setFields = function () {\n    if (this.fields.value && !this.fields.text) {\n      this.updateFields(this.fields.value, this.fields.value);\n    } else if (!this.fields.value && this.fields.text) {\n      this.updateFields(this.fields.text, this.fields.text);\n    } else if (!this.fields.value && !this.fields.text) {\n      this.updateFields('text', 'text');\n    }\n  };\n  /**\n   * reset the items list.\n   *\n   * @param {Object[] | string[] | number[] | DataManager | boolean[]} dataSource - Specifies the data to generate the list.\n   * @param {FieldSettingsModel} fields - Maps the columns of the data table and binds the data to the component.\n   * @param {Query} query - Accepts the external Query that execute along with data processing.\n   * @returns {void}\n   */\n\n\n  DropDownBase.prototype.resetList = function (dataSource, fields, query, e) {\n    if (this.list) {\n      if (this.element.tagName === 'SELECT' && this.element.options.length > 0 || this.element.tagName === 'UL' && this.element.childNodes.length > 0) {\n        var data = dataSource instanceof Array ? dataSource.length > 0 : !isNullOrUndefined(dataSource);\n\n        if (!data && this.selectData && this.selectData.length > 0) {\n          dataSource = this.selectData;\n        }\n      }\n\n      dataSource = this.getModuleName() === 'combobox' && this.selectData && dataSource instanceof Array && dataSource.length < this.selectData.length && this.addedNewItem ? this.selectData : dataSource;\n      this.addedNewItem = false;\n      this.setListData(dataSource, fields, query, e);\n    }\n  };\n\n  DropDownBase.prototype.updateSelectElementData = function (isFiltering) {\n    if (isFiltering && isNullOrUndefined(this.selectData) && this.listData && this.listData.length > 0) {\n      this.selectData = this.listData;\n    }\n  };\n\n  DropDownBase.prototype.updateSelection = function () {// This is for after added the item, need to update the selected index values.\n  };\n\n  DropDownBase.prototype.renderList = function () {\n    // This is for render the list items.\n    this.render();\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  DropDownBase.prototype.updateDataSource = function (props) {\n    this.resetList(this.dataSource);\n  };\n\n  DropDownBase.prototype.setUpdateInitial = function (props, newProp) {\n    this.isDataFetched = false;\n    var updateData = {};\n\n    for (var j = 0; props.length > j; j++) {\n      if (newProp[props[j]] && props[j] === 'fields') {\n        this.setFields();\n        updateData[props[j]] = newProp[props[j]];\n      } else if (newProp[props[j]]) {\n        updateData[props[j]] = newProp[props[j]];\n      }\n    }\n\n    if (Object.keys(updateData).length > 0) {\n      if (Object.keys(updateData).indexOf('dataSource') === -1) {\n        updateData.dataSource = this.dataSource;\n      }\n\n      this.updateDataSource(updateData);\n    }\n  };\n  /**\n   * When property value changes happened, then onPropertyChanged method will execute the respective changes in this component.\n   *\n   * @param {DropDownBaseModel} newProp - Returns the dynamic property value of the component.\n   * @param {DropDownBaseModel} oldProp - Returns the previous property value of the component.\n   * @private\n   * @returns {void}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  DropDownBase.prototype.onPropertyChanged = function (newProp, oldProp) {\n    if (this.getModuleName() === 'dropdownbase') {\n      this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n    }\n\n    this.setUpdateInitial(['sortOrder', 'itemTemplate'], newProp);\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'query':\n        case 'sortOrder':\n        case 'dataSource':\n        case 'itemTemplate':\n          break;\n\n        case 'enableRtl':\n          this.setEnableRtl();\n          break;\n\n        case 'groupTemplate':\n          this.renderGroupTemplate(this.list);\n\n          if (this.ulElement && this.fixedHeaderElement) {\n            var firstLi = this.ulElement.querySelector('.' + dropDownBaseClasses.group);\n            this.fixedHeaderElement.innerHTML = firstLi.innerHTML;\n          }\n\n          break;\n\n        case 'locale':\n          if (this.list && !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0) {\n            this.l10nUpdate();\n          }\n\n          break;\n\n        case 'zIndex':\n          this.setProperties({\n            zIndex: newProp.zIndex\n          }, true);\n          this.setZIndex();\n          break;\n      }\n    }\n  };\n  /**\n   * Build and render the component\n   *\n   * @param {boolean} isEmptyData - Specifies the component to initialize with list data or not.\n   * @private\n   * @returns {void}\n   */\n\n\n  DropDownBase.prototype.render = function (e, isEmptyData) {\n    this.list = this.createElement('div', {\n      className: dropDownBaseClasses.content,\n      attrs: {\n        'tabindex': '0'\n      }\n    });\n    this.list.classList.add(dropDownBaseClasses.root);\n    this.setFields();\n    var rippleModel = {\n      duration: 300,\n      selector: '.' + dropDownBaseClasses.li\n    };\n    this.rippleFun = rippleEffect(this.list, rippleModel);\n    var group = this.element.querySelector('select>optgroup');\n\n    if ((this.fields.groupBy || !isNullOrUndefined(group)) && !this.isGroupChecking) {\n      EventHandler.add(this.list, 'scroll', this.setFloatingHeader, this);\n    }\n\n    if (this.getModuleName() === 'dropdownbase') {\n      if (this.element.getAttribute('tabindex')) {\n        this.list.setAttribute('tabindex', this.element.getAttribute('tabindex'));\n      }\n\n      removeClass([this.element], dropDownBaseClasses.root);\n      this.element.style.display = 'none';\n      var wrapperElement = this.createElement('div');\n      this.element.parentElement.insertBefore(wrapperElement, this.element);\n      wrapperElement.appendChild(this.element);\n      wrapperElement.appendChild(this.list);\n    }\n\n    this.setEnableRtl();\n\n    if (!isEmptyData) {\n      this.initialize(e);\n    }\n  };\n  /**\n   * Return the module name of this component.\n   *\n   * @private\n   * @returns {string} Return the module name of this component.\n   */\n\n\n  DropDownBase.prototype.getModuleName = function () {\n    return 'dropdownbase';\n  };\n  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Gets all the list items bound on this component.\n   *\n   * @returns {Element[]}\n   */\n\n\n  DropDownBase.prototype.getItems = function () {\n    return this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li);\n  };\n  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Adds a new item to the popup list. By default, new item appends to the list as the last item,\n   * but you can insert based on the index parameter.\n   *\n   * @param { Object[] } items - Specifies an array of JSON data or a JSON data.\n   * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n   * @returns {void}\n   * @deprecated\n   */\n\n\n  DropDownBase.prototype.addItem = function (items, itemIndex) {\n    if (!this.list || this.list.textContent === this.noRecordsTemplate && this.getModuleName() !== 'listbox') {\n      this.renderList();\n    }\n\n    if (this.sortOrder !== 'None' && isNullOrUndefined(itemIndex)) {\n      var newList = [].slice.call(this.listData);\n      newList.push(items);\n      newList = this.getSortedDataSource(newList);\n\n      if (this.fields.groupBy) {\n        newList = ListBase.groupDataSource(newList, this.fields.properties, this.sortOrder);\n        itemIndex = newList.indexOf(items);\n      } else {\n        itemIndex = newList.indexOf(items);\n      }\n    }\n\n    var itemsCount = this.getItems().length;\n    var selectedItemValue = this.list.querySelector('.' + dropDownBaseClasses.selected);\n    items = items instanceof Array ? items : [items];\n    var index;\n    index = isNullOrUndefined(itemIndex) || itemIndex < 0 || itemIndex > itemsCount - 1 ? itemsCount : itemIndex;\n    var fields = this.fields;\n\n    if (items && fields.groupBy) {\n      items = ListBase.groupDataSource(items, fields.properties);\n    }\n\n    var liCollections = [];\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      var isHeader = item.isHeader;\n      var li = this.createElement('li', {\n        className: isHeader ? dropDownBaseClasses.group : dropDownBaseClasses.li,\n        id: 'option-add-' + i\n      });\n      var itemText = item instanceof Object ? getValue(fields.text, item) : item;\n\n      if (isHeader) {\n        li.innerText = itemText;\n      }\n\n      if (this.itemTemplate && !isHeader) {\n        var itemCheck = this.templateCompiler(this.itemTemplate);\n        var compiledString = itemCheck ? compile(select(this.itemTemplate, document).innerHTML.trim()) : compile(this.itemTemplate); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        var addItemTemplate = compiledString(item, this, 'itemTemplate', this.itemTemplateId, this.isStringTemplate, null, li);\n\n        if (addItemTemplate) {\n          append(addItemTemplate, li);\n        }\n      } else if (!isHeader) {\n        li.appendChild(document.createTextNode(itemText));\n      }\n\n      li.setAttribute('data-value', item instanceof Object ? getValue(fields.value, item) : item);\n      li.setAttribute('role', 'option');\n      this.notify('addItem', {\n        module: 'CheckBoxSelection',\n        item: li\n      });\n      liCollections.push(li);\n      this.listData.push(item);\n\n      if (this.sortOrder === 'None' && isNullOrUndefined(itemIndex) && index === 0) {\n        index = null;\n      }\n\n      this.updateActionCompleteData(li, item, index); //Listbox event\n\n      this.trigger('beforeItemRender', {\n        element: li,\n        item: item\n      });\n    }\n\n    if (itemsCount === 0 && isNullOrUndefined(this.list.querySelector('ul'))) {\n      if (!isNullOrUndefined(this.list)) {\n        this.list.innerHTML = '';\n        this.list.classList.remove(dropDownBaseClasses.noData);\n\n        if (!isNullOrUndefined(this.ulElement)) {\n          this.list.appendChild(this.ulElement);\n        }\n      }\n\n      this.liCollections = liCollections;\n\n      if (!isNullOrUndefined(liCollections) && !isNullOrUndefined(this.ulElement)) {\n        append(liCollections, this.ulElement);\n      }\n\n      this.updateAddItemList(this.list, itemsCount);\n    } else {\n      if (this.getModuleName() === 'listbox' && itemsCount === 0) {\n        this.ulElement.innerHTML = '';\n      }\n\n      var attr = [];\n\n      for (var i = 0; i < items.length; i++) {\n        var listGroupItem = this.ulElement.querySelectorAll('.e-list-group-item');\n\n        for (var j = 0; j < listGroupItem.length; j++) {\n          attr[j] = listGroupItem[j].innerText;\n        }\n\n        if (attr.indexOf(liCollections[i].innerText) > -1 && fields.groupBy) {\n          for (var j = 0; j < listGroupItem.length; j++) {\n            if (attr[j] === liCollections[i].innerText) {\n              if (this.sortOrder === 'None') {\n                this.ulElement.insertBefore(liCollections[i + 1], listGroupItem[j + 1]);\n              } else {\n                this.ulElement.insertBefore(liCollections[i + 1], this.ulElement.childNodes[itemIndex]);\n              }\n\n              i = i + 1;\n              break;\n            }\n          }\n        } else {\n          if (this.liCollections[index]) {\n            this.liCollections[index].parentNode.insertBefore(liCollections[i], this.liCollections[index]);\n          } else {\n            this.ulElement.appendChild(liCollections[i]);\n          }\n        }\n\n        var tempLi = [].slice.call(this.liCollections);\n        tempLi.splice(index, 0, liCollections[i]);\n        this.liCollections = tempLi;\n        index += 1;\n\n        if (this.getModuleName() === 'multiselect') {\n          this.updateDataList();\n        }\n      }\n    }\n\n    if (selectedItemValue || itemIndex === 0) {\n      this.updateSelection();\n    }\n\n    this.addedNewItem = true;\n  };\n\n  DropDownBase.prototype.validationAttribute = function (target, hidden) {\n    var name = target.getAttribute('name') ? target.getAttribute('name') : target.getAttribute('id');\n    hidden.setAttribute('name', name);\n    target.removeAttribute('name');\n    var attributes$$1 = ['required', 'aria-required', 'form'];\n\n    for (var i = 0; i < attributes$$1.length; i++) {\n      if (!target.getAttribute(attributes$$1[i])) {\n        continue;\n      }\n\n      var attr = target.getAttribute(attributes$$1[i]);\n      hidden.setAttribute(attributes$$1[i], attr);\n      target.removeAttribute(attributes$$1[i]);\n    }\n  };\n\n  DropDownBase.prototype.setZIndex = function () {// this is for component wise\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  DropDownBase.prototype.updateActionCompleteData = function (li, item, index) {// this is for ComboBox custom value\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  DropDownBase.prototype.updateAddItemList = function (list, itemCount) {// this is for multiselect add item\n  };\n\n  DropDownBase.prototype.updateDataList = function () {// this is for multiselect update list items\n  };\n  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Gets the data Object that matches the given value.\n   *\n   * @param { string | number } value - Specifies the value of the list item.\n   * @returns {Object}\n   */\n\n\n  DropDownBase.prototype.getDataByValue = function (value) {\n    if (!isNullOrUndefined(this.listData)) {\n      var type = this.typeOfData(this.listData).typeof;\n\n      if (type === 'string' || type === 'number' || type === 'boolean') {\n        for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {\n          var item = _a[_i];\n\n          if (!isNullOrUndefined(item) && item === value) {\n            return item;\n          }\n        }\n      } else {\n        for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {\n          var item = _c[_b];\n\n          if (!isNullOrUndefined(item) && getValue(this.fields.value ? this.fields.value : 'value', item) === value) {\n            return item;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n   *\n   * @method destroy\n   * @returns {void}\n   */\n\n\n  DropDownBase.prototype.destroy = function () {\n    if (document.body.contains(this.list)) {\n      EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n\n      if (!isNullOrUndefined(this.rippleFun)) {\n        this.rippleFun();\n      }\n\n      detach(this.list);\n    }\n\n    this.liCollections = null;\n    this.ulElement = null;\n    this.list = null;\n    this.enableRtlElements = null;\n    this.rippleFun = null;\n\n    _super.prototype.destroy.call(this);\n  };\n\n  __decorate([Complex({\n    text: null,\n    value: null,\n    iconCss: null,\n    groupBy: null\n  }, FieldSettings)], DropDownBase.prototype, \"fields\", void 0);\n\n  __decorate([Property(null)], DropDownBase.prototype, \"itemTemplate\", void 0);\n\n  __decorate([Property(null)], DropDownBase.prototype, \"groupTemplate\", void 0);\n\n  __decorate([Property('No records found')], DropDownBase.prototype, \"noRecordsTemplate\", void 0);\n\n  __decorate([Property('Request failed')], DropDownBase.prototype, \"actionFailureTemplate\", void 0);\n\n  __decorate([Property('None')], DropDownBase.prototype, \"sortOrder\", void 0);\n\n  __decorate([Property([])], DropDownBase.prototype, \"dataSource\", void 0);\n\n  __decorate([Property(null)], DropDownBase.prototype, \"query\", void 0);\n\n  __decorate([Property('StartsWith')], DropDownBase.prototype, \"filterType\", void 0);\n\n  __decorate([Property(true)], DropDownBase.prototype, \"ignoreCase\", void 0);\n\n  __decorate([Property(1000)], DropDownBase.prototype, \"zIndex\", void 0);\n\n  __decorate([Property(false)], DropDownBase.prototype, \"ignoreAccent\", void 0);\n\n  __decorate([Property()], DropDownBase.prototype, \"locale\", void 0);\n\n  __decorate([Event()], DropDownBase.prototype, \"actionBegin\", void 0);\n\n  __decorate([Event()], DropDownBase.prototype, \"actionComplete\", void 0);\n\n  __decorate([Event()], DropDownBase.prototype, \"actionFailure\", void 0);\n\n  __decorate([Event()], DropDownBase.prototype, \"select\", void 0);\n\n  __decorate([Event()], DropDownBase.prototype, \"dataBound\", void 0);\n\n  __decorate([Event()], DropDownBase.prototype, \"created\", void 0);\n\n  __decorate([Event()], DropDownBase.prototype, \"destroyed\", void 0);\n\n  DropDownBase = __decorate([NotifyPropertyChanges], DropDownBase);\n  return DropDownBase;\n}(Component);\n/**\n * export all modules from current location\n */\n\n\nvar __extends$1 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; // eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>\n// don't use space in classnames\n\n\nvar dropDownListClasses = {\n  root: 'e-dropdownlist',\n  hover: dropDownBaseClasses.hover,\n  selected: dropDownBaseClasses.selected,\n  rtl: dropDownBaseClasses.rtl,\n  li: dropDownBaseClasses.li,\n  disable: dropDownBaseClasses.disabled,\n  base: dropDownBaseClasses.root,\n  focus: dropDownBaseClasses.focus,\n  input: 'e-input-group',\n  inputFocus: 'e-input-focus',\n  icon: 'e-input-group-icon e-ddl-icon',\n  iconAnimation: 'e-icon-anim',\n  value: 'e-input-value',\n  device: 'e-ddl-device',\n  backIcon: 'e-input-group-icon e-back-icon e-icons',\n  filterBarClearIcon: 'e-input-group-icon e-clear-icon e-icons',\n  filterInput: 'e-input-filter',\n  filterParent: 'e-filter-parent',\n  mobileFilter: 'e-ddl-device-filter',\n  footer: 'e-ddl-footer',\n  header: 'e-ddl-header',\n  clearIcon: 'e-clear-icon',\n  clearIconHide: 'e-clear-icon-hide',\n  popupFullScreen: 'e-popup-full-page',\n  disableIcon: 'e-ddl-disable-icon',\n  hiddenElement: 'e-ddl-hidden'\n};\nvar inputObject = {\n  container: null,\n  buttons: []\n};\n/**\n * The DropDownList component contains a list of predefined values from which you can\n * choose a single value.\n * ```html\n * <input type=\"text\" tabindex=\"1\" id=\"list\"> </input>\n * ```\n * ```typescript\n *   let dropDownListObj:DropDownList = new DropDownList();\n *   dropDownListObj.appendTo(\"#list\");\n * ```\n */\n\nvar DropDownList =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$1(DropDownList, _super);\n  /**\n   * * Constructor for creating the DropDownList component.\n   *\n   * @param {DropDownListModel} options - Specifies the DropDownList model.\n   * @param {string | HTMLElement} element - Specifies the element to render as component.\n   * @private\n   */\n\n\n  function DropDownList(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.isListSearched = false;\n    _this.preventChange = false;\n    _this.isAngular = false;\n    return _this;\n  }\n  /**\n   * Initialize the event handler.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.preRender = function () {\n    this.valueTempElement = null;\n    this.element.style.opacity = '0';\n    this.initializeData();\n\n    _super.prototype.preRender.call(this);\n\n    this.activeIndex = this.index;\n    this.queryString = '';\n  };\n\n  DropDownList.prototype.initializeData = function () {\n    this.isPopupOpen = false;\n    this.isDocumentClick = false;\n    this.isInteracted = false;\n    this.isFilterFocus = false;\n    this.beforePopupOpen = false;\n    this.initial = true;\n    this.initRemoteRender = false;\n    this.isNotSearchList = false;\n    this.isTyped = false;\n    this.isSelected = false;\n    this.preventFocus = false;\n    this.preventAutoFill = false;\n    this.isValidKey = false;\n    this.typedString = '';\n    this.isEscapeKey = false;\n    this.isPreventBlur = false;\n    this.isTabKey = false;\n    this.actionCompleteData = {\n      isUpdated: false\n    };\n    this.actionData = {\n      isUpdated: false\n    };\n    this.prevSelectPoints = {};\n    this.isSelectCustom = false;\n    this.isDropDownClick = false;\n    this.preventAltUp = false;\n    this.isCustomFilter = false;\n    this.isSecondClick = false;\n    this.previousValue = null;\n    this.keyConfigure = {\n      tab: 'tab',\n      enter: '13',\n      escape: '27',\n      end: '35',\n      home: '36',\n      down: '40',\n      up: '38',\n      pageUp: '33',\n      pageDown: '34',\n      open: 'alt+40',\n      close: 'shift+tab',\n      hide: 'alt+38',\n      space: '32'\n    };\n  };\n\n  DropDownList.prototype.setZIndex = function () {\n    if (this.popupObj) {\n      this.popupObj.setProperties({\n        'zIndex': this.zIndex\n      });\n    }\n  };\n\n  DropDownList.prototype.renderList = function (e, isEmptyData) {\n    _super.prototype.render.call(this, e, isEmptyData);\n\n    this.unWireListEvents();\n    this.wireListEvents();\n  };\n\n  DropDownList.prototype.floatLabelChange = function () {\n    if (this.getModuleName() === 'dropdownlist' && this.floatLabelType === 'Auto') {\n      var floatElement = this.inputWrapper.container.querySelector('.e-float-text');\n\n      if (this.inputElement.value !== '' || this.isInteracted) {\n        classList(floatElement, ['e-label-top'], ['e-label-bottom']);\n      } else {\n        classList(floatElement, ['e-label-bottom'], ['e-label-top']);\n      }\n    }\n  };\n\n  DropDownList.prototype.resetHandler = function (e) {\n    e.preventDefault();\n    this.clearAll(e);\n  };\n\n  DropDownList.prototype.resetFocusElement = function () {\n    this.removeHover();\n    this.removeSelection();\n    this.removeFocus();\n    this.list.scrollTop = 0;\n\n    if (this.getModuleName() !== 'autocomplete' && !isNullOrUndefined(this.ulElement)) {\n      var li = this.ulElement.querySelector('.' + dropDownListClasses.li);\n\n      if (li) {\n        li.classList.add(dropDownListClasses.focus);\n      }\n    }\n  };\n\n  DropDownList.prototype.clearAll = function (e, properties) {\n    this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;\n\n    if (isNullOrUndefined(properties) || !isNullOrUndefined(properties) && (isNullOrUndefined(properties.dataSource) || !(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)) {\n      this.isActive = true;\n      this.resetSelection(properties);\n    }\n\n    var dataItem = this.getItemData();\n\n    if (this.previousValue === dataItem.value) {\n      return;\n    }\n\n    this.onChangeEvent(e);\n  };\n\n  DropDownList.prototype.resetSelection = function (properties) {\n    if (this.list) {\n      if (!isNullOrUndefined(properties) && (isNullOrUndefined(properties.dataSource) || !(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)) {\n        this.selectedLI = null;\n        this.actionCompleteData.isUpdated = false;\n        this.actionCompleteData.ulElement = null;\n        this.actionCompleteData.list = null;\n        this.resetList(properties.dataSource);\n      } else {\n        if (this.allowFiltering && this.getModuleName() !== 'autocomplete' && !isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list) && this.actionCompleteData.list.length > 0) {\n          this.onActionComplete(this.actionCompleteData.ulElement.cloneNode(true), this.actionCompleteData.list);\n        }\n\n        this.resetFocusElement();\n      }\n    }\n\n    if (!isNullOrUndefined(this.hiddenElement)) {\n      this.hiddenElement.innerHTML = '';\n    }\n\n    if (!isNullOrUndefined(this.inputElement)) {\n      this.inputElement.value = '';\n    }\n\n    this.value = null;\n    this.itemData = null;\n    this.text = null;\n    this.index = null;\n    this.activeIndex = null;\n    this.item = null;\n    this.queryString = '';\n\n    if (this.valueTempElement) {\n      detach(this.valueTempElement);\n      this.inputElement.style.display = 'block';\n      this.valueTempElement = null;\n    }\n\n    this.setSelection(null, null);\n    this.isSelectCustom = false;\n    this.updateIconState();\n    this.cloneElements();\n  };\n\n  DropDownList.prototype.setHTMLAttributes = function () {\n    if (Object.keys(this.htmlAttributes).length) {\n      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {\n        var htmlAttr = _a[_i];\n\n        if (htmlAttr === 'class') {\n          var updatedClassValue = this.htmlAttributes[\"\" + htmlAttr].replace(/\\s+/g, ' ').trim();\n\n          if (updatedClassValue !== '') {\n            addClass([this.inputWrapper.container], updatedClassValue.split(' '));\n          }\n        } else if (htmlAttr === 'disabled' && this.htmlAttributes[\"\" + htmlAttr] === 'disabled') {\n          this.enabled = false;\n          this.setEnable();\n        } else if (htmlAttr === 'readonly' && !isNullOrUndefined(this.htmlAttributes[\"\" + htmlAttr])) {\n          this.readonly = true;\n          this.dataBind();\n        } else if (htmlAttr === 'style') {\n          this.inputWrapper.container.setAttribute('style', this.htmlAttributes[\"\" + htmlAttr]);\n        } else if (htmlAttr === 'aria-label') {\n          if (this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') {\n            this.inputElement.setAttribute('aria-label', this.htmlAttributes[\"\" + htmlAttr]);\n          } else {\n            this.inputWrapper.container.setAttribute('aria-label', this.htmlAttributes[\"\" + htmlAttr]);\n          }\n        } else {\n          var defaultAttr = ['title', 'id', 'placeholder', 'role', 'autocomplete', 'autocapitalize', 'spellcheck', 'minlength', 'maxlength'];\n          var validateAttr = ['name', 'required'];\n\n          if (this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') {\n            defaultAttr.push('tabindex');\n          }\n\n          if (validateAttr.indexOf(htmlAttr) > -1 || htmlAttr.indexOf('data') === 0) {\n            this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[\"\" + htmlAttr]);\n          } else if (defaultAttr.indexOf(htmlAttr) > -1) {\n            if (htmlAttr === 'placeholder') {\n              Input.setPlaceholder(this.htmlAttributes[\"\" + htmlAttr], this.inputElement);\n            } else {\n              this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[\"\" + htmlAttr]);\n            }\n          } else {\n            this.inputWrapper.container.setAttribute(htmlAttr, this.htmlAttributes[\"\" + htmlAttr]);\n          }\n        }\n      }\n    }\n\n    if (this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') {\n      this.inputWrapper.container.removeAttribute('tabindex');\n    }\n  };\n\n  DropDownList.prototype.getAriaAttributes = function () {\n    return {\n      'aria-disabled': 'false',\n      'role': 'combobox',\n      'aria-expanded': 'false',\n      'aria-live': 'polite',\n      'aria-labelledby': this.hiddenElement.id\n    };\n  };\n\n  DropDownList.prototype.setEnableRtl = function () {\n    Input.setEnableRtl(this.enableRtl, [this.inputElement.parentElement]);\n\n    if (this.popupObj) {\n      this.popupObj.enableRtl = this.enableRtl;\n      this.popupObj.dataBind();\n    }\n  };\n\n  DropDownList.prototype.setEnable = function () {\n    Input.setEnabled(this.enabled, this.inputElement);\n\n    if (this.enabled) {\n      removeClass([this.inputWrapper.container], dropDownListClasses.disable);\n      this.inputElement.setAttribute('aria-disabled', 'false');\n      this.targetElement().setAttribute('tabindex', this.tabIndex);\n    } else {\n      this.hidePopup();\n      addClass([this.inputWrapper.container], dropDownListClasses.disable);\n      this.inputElement.setAttribute('aria-disabled', 'true');\n      this.targetElement().tabIndex = -1;\n    }\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} Returns the persisted data of the component.\n   */\n\n\n  DropDownList.prototype.getPersistData = function () {\n    return this.addOnPersist(['value']);\n  };\n\n  DropDownList.prototype.getLocaleName = function () {\n    return 'drop-down-list';\n  };\n\n  DropDownList.prototype.preventTabIndex = function (element) {\n    if (this.getModuleName() === 'dropdownlist') {\n      element.tabIndex = -1;\n    }\n  };\n\n  DropDownList.prototype.targetElement = function () {\n    return !isNullOrUndefined(this.inputWrapper) ? this.inputWrapper.container : null;\n  };\n\n  DropDownList.prototype.getNgDirective = function () {\n    return 'EJS-DROPDOWNLIST';\n  };\n\n  DropDownList.prototype.getElementByText = function (text) {\n    return this.getElementByValue(this.getValueByText(text));\n  };\n\n  DropDownList.prototype.getElementByValue = function (value) {\n    var item;\n    var listItems = this.getItems();\n\n    for (var _i = 0, listItems_1 = listItems; _i < listItems_1.length; _i++) {\n      var liItem = listItems_1[_i];\n\n      if (this.getFormattedValue(liItem.getAttribute('data-value')) === value) {\n        item = liItem;\n        break;\n      }\n    }\n\n    return item;\n  };\n\n  DropDownList.prototype.initValue = function () {\n    this.renderList();\n\n    if (this.dataSource instanceof DataManager) {\n      this.initRemoteRender = true;\n    } else {\n      this.updateValues();\n    }\n  };\n\n  DropDownList.prototype.updateValues = function () {\n    if (!isNullOrUndefined(this.value)) {\n      this.setSelection(this.getElementByValue(this.value), null);\n    } else if (this.text && isNullOrUndefined(this.value)) {\n      var element = this.getElementByText(this.text);\n\n      if (isNullOrUndefined(element)) {\n        this.setProperties({\n          text: null\n        });\n        return;\n      } else {\n        this.setSelection(element, null);\n      }\n    } else {\n      this.setSelection(this.liCollections[this.activeIndex], null);\n    }\n\n    this.setHiddenValue();\n    Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n  };\n\n  DropDownList.prototype.onBlurHandler = function (e) {\n    if (!this.enabled) {\n      return;\n    }\n\n    var target = e.relatedTarget;\n    var currentTarget = e.target;\n    var isPreventBlur = this.isPreventBlur;\n    this.isPreventBlur = false; //IE 11 - issue\n\n    if (isPreventBlur && !this.isDocumentClick && this.isPopupOpen && (!isNullOrUndefined(currentTarget) || !this.isFilterLayout() && isNullOrUndefined(target))) {\n      if (this.getModuleName() === 'dropdownlist' && this.allowFiltering && this.isPopupOpen) {\n        this.filterInput.focus();\n      } else {\n        this.targetElement().focus();\n      }\n\n      return;\n    }\n\n    if (this.isDocumentClick || !isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) && this.popupObj.element.classList.contains(dropDownListClasses.mobileFilter)) {\n      if (!this.beforePopupOpen) {\n        this.isDocumentClick = false;\n      }\n\n      return;\n    }\n\n    if (this.getModuleName() === 'dropdownlist' && !this.isFilterFocus && target !== this.inputElement && (document.activeElement !== target || document.activeElement === target && currentTarget.classList.contains(dropDownListClasses.inputFocus)) || isNullOrUndefined(target) && this.getModuleName() === 'dropdownlist' && this.allowFiltering && currentTarget !== this.inputWrapper.container || this.getModuleName() !== 'dropdownlist' && !this.inputWrapper.container.contains(target) || this.isTabKey) {\n      this.isDocumentClick = this.isPopupOpen ? true : false;\n      this.focusOutAction(e);\n      this.isTabKey = false;\n    }\n\n    if (this.isRequested && !this.isPopupOpen && !this.isPreventBlur) {\n      this.isActive = false;\n      this.beforePopupOpen = false;\n    }\n  };\n\n  DropDownList.prototype.focusOutAction = function (e) {\n    this.isInteracted = false;\n    this.focusOut(e);\n    this.onFocusOut();\n  };\n\n  DropDownList.prototype.onFocusOut = function () {\n    if (!this.enabled) {\n      return;\n    }\n\n    if (this.isSelected) {\n      this.isSelectCustom = false;\n      this.onChangeEvent(null);\n    }\n\n    this.floatLabelChange();\n    this.dispatchEvent(this.hiddenElement, 'change');\n\n    if (this.getModuleName() === 'dropdownlist' && this.element.tagName !== 'INPUT') {\n      this.dispatchEvent(this.inputElement, 'blur');\n    }\n\n    if (this.inputWrapper.clearButton) {\n      addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n    }\n\n    this.trigger('blur');\n  };\n\n  DropDownList.prototype.onFocus = function (e) {\n    if (!this.isInteracted) {\n      this.isInteracted = true;\n      var args = {\n        isInteracted: e ? true : false,\n        event: e\n      };\n      this.trigger('focus', args);\n    }\n\n    this.updateIconState();\n  };\n\n  DropDownList.prototype.resetValueHandler = function (e) {\n    var formElement = closest(this.inputElement, 'form');\n\n    if (formElement && e.target === formElement) {\n      var val = this.element.tagName === this.getNgDirective() ? null : this.inputElement.getAttribute('value');\n      this.text = val;\n    }\n  };\n\n  DropDownList.prototype.wireEvent = function () {\n    EventHandler.add(this.inputWrapper.container, 'mousedown', this.dropDownClick, this);\n    EventHandler.add(this.inputWrapper.container, 'focus', this.focusIn, this);\n    EventHandler.add(this.inputWrapper.container, 'keypress', this.onSearch, this);\n    this.bindCommonEvent();\n  };\n\n  DropDownList.prototype.bindCommonEvent = function () {\n    EventHandler.add(this.targetElement(), 'blur', this.onBlurHandler, this);\n    var formElement = closest(this.inputElement, 'form');\n\n    if (formElement) {\n      EventHandler.add(formElement, 'reset', this.resetValueHandler, this);\n    }\n\n    if (!Browser.isDevice) {\n      this.keyboardModule = new KeyboardEvents(this.targetElement(), {\n        keyAction: this.keyActionHandler.bind(this),\n        keyConfigs: this.keyConfigure,\n        eventName: 'keydown'\n      });\n    } else {\n      this.keyboardModule = new KeyboardEvents(this.targetElement(), {\n        keyAction: this.mobileKeyActionHandler.bind(this),\n        keyConfigs: this.keyConfigure,\n        eventName: 'keydown'\n      });\n    }\n\n    this.bindClearEvent();\n  };\n\n  DropDownList.prototype.bindClearEvent = function () {\n    if (this.showClearButton) {\n      EventHandler.add(this.inputWrapper.clearButton, 'mousedown', this.resetHandler, this);\n    }\n  };\n\n  DropDownList.prototype.unBindCommonEvent = function () {\n    if (!isNullOrUndefined(this.inputWrapper) && this.targetElement()) {\n      EventHandler.remove(this.targetElement(), 'blur', this.onBlurHandler);\n    }\n\n    var formElement = this.inputElement && closest(this.inputElement, 'form');\n\n    if (formElement) {\n      EventHandler.remove(formElement, 'reset', this.resetValueHandler);\n    }\n\n    if (!Browser.isDevice) {\n      this.keyboardModule.destroy();\n    }\n\n    if (this.showClearButton) {\n      EventHandler.remove(this.inputWrapper.clearButton, 'mousedown', this.resetHandler);\n    }\n  };\n\n  DropDownList.prototype.updateIconState = function () {\n    if (this.showClearButton) {\n      if (this.inputElement.value !== '' && !this.readonly) {\n        removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n      } else {\n        addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n      }\n    }\n  };\n  /**\n   * Event binding for list\n   *\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.wireListEvents = function () {\n    if (!isNullOrUndefined(this.list)) {\n      EventHandler.add(this.list, 'click', this.onMouseClick, this);\n      EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);\n      EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);\n    }\n  };\n\n  DropDownList.prototype.onSearch = function (e) {\n    if (e.charCode !== 32 && e.charCode !== 13) {\n      if (this.list === undefined) {\n        this.renderList();\n      }\n\n      this.searchKeyEvent = e;\n      this.onServerIncrementalSearch(e);\n    }\n  };\n\n  DropDownList.prototype.onServerIncrementalSearch = function (e) {\n    if (!this.isRequested && !isNullOrUndefined(this.list) && !isNullOrUndefined(this.list.querySelector('li')) && this.enabled && !this.readonly) {\n      this.incrementalSearch(e);\n    }\n  };\n\n  DropDownList.prototype.onMouseClick = function (e) {\n    var target = e.target;\n    var li = closest(target, '.' + dropDownBaseClasses.li);\n\n    if (!this.isValidLI(li)) {\n      return;\n    }\n\n    this.setSelection(li, e);\n\n    if (Browser.isDevice && this.isFilterLayout()) {\n      history.back();\n    } else {\n      var delay = 100;\n      this.closePopup(delay, e);\n    }\n  };\n\n  DropDownList.prototype.onMouseOver = function (e) {\n    var currentLi = closest(e.target, '.' + dropDownBaseClasses.li);\n    this.setHover(currentLi);\n  };\n\n  DropDownList.prototype.setHover = function (li) {\n    if (this.enabled && this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {\n      this.removeHover();\n      addClass([li], dropDownBaseClasses.hover);\n    }\n  };\n\n  DropDownList.prototype.onMouseLeave = function () {\n    this.removeHover();\n  };\n\n  DropDownList.prototype.removeHover = function () {\n    if (this.list) {\n      var hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.hover);\n\n      if (hoveredItem && hoveredItem.length) {\n        removeClass(hoveredItem, dropDownBaseClasses.hover);\n      }\n    }\n  };\n\n  DropDownList.prototype.isValidLI = function (li) {\n    return li && li.hasAttribute('role') && li.getAttribute('role') === 'option';\n  };\n\n  DropDownList.prototype.incrementalSearch = function (e) {\n    if (this.liCollections.length > 0) {\n      var li = incrementalSearch(e.charCode, this.liCollections, this.activeIndex, true, this.element.id);\n\n      if (!isNullOrUndefined(li)) {\n        this.setSelection(li, e);\n        this.setScrollPosition();\n      }\n    }\n  };\n  /**\n   * Hides the spinner loader.\n   *\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.hideSpinner = function () {\n    if (!isNullOrUndefined(this.spinnerElement)) {\n      hideSpinner(this.spinnerElement);\n      removeClass([this.spinnerElement], dropDownListClasses.disableIcon);\n      this.spinnerElement.innerHTML = '';\n      this.spinnerElement = null;\n    }\n  };\n  /**\n   * Shows the spinner loader.\n   *\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.showSpinner = function () {\n    if (isNullOrUndefined(this.spinnerElement)) {\n      this.spinnerElement = Browser.isDevice && !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[1] || !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[0] || this.inputWrapper.buttons[0];\n      addClass([this.spinnerElement], dropDownListClasses.disableIcon);\n      createSpinner({\n        target: this.spinnerElement,\n        width: Browser.isDevice ? '16px' : '14px'\n      }, this.createElement);\n      showSpinner(this.spinnerElement);\n    }\n  };\n\n  DropDownList.prototype.keyActionHandler = function (e) {\n    if (!this.enabled) {\n      return;\n    }\n\n    var preventAction = e.action === 'pageUp' || e.action === 'pageDown';\n    var preventHomeEnd = this.getModuleName() !== 'dropdownlist' && (e.action === 'home' || e.action === 'end');\n    this.isEscapeKey = e.action === 'escape';\n    this.isTabKey = !this.isPopupOpen && e.action === 'tab';\n    var isNavigation = e.action === 'down' || e.action === 'up' || e.action === 'pageUp' || e.action === 'pageDown' || e.action === 'home' || e.action === 'end';\n\n    if ((this.isEditTextBox() || preventAction || preventHomeEnd) && !this.isPopupOpen) {\n      return;\n    }\n\n    if (!this.readonly) {\n      var isTabAction = e.action === 'tab' || e.action === 'close';\n\n      if (isNullOrUndefined(this.list) && !this.isRequested && !isTabAction && e.action !== 'escape') {\n        this.searchKeyEvent = e;\n        this.renderList(e);\n      }\n\n      if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && isNavigation && this.liCollections.length === 0 || this.isRequested) {\n        return;\n      }\n\n      if (isTabAction && this.getModuleName() !== 'autocomplete' && this.isPopupOpen || e.action === 'escape') {\n        e.preventDefault();\n      }\n\n      this.isSelected = e.action === 'escape' ? false : this.isSelected;\n      this.isTyped = isNavigation || e.action === 'escape' ? false : this.isTyped;\n\n      switch (e.action) {\n        case 'down':\n        case 'up':\n          this.updateUpDownAction(e);\n          break;\n\n        case 'pageUp':\n          this.pageUpSelection(this.activeIndex - this.getPageCount(), e);\n          e.preventDefault();\n          break;\n\n        case 'pageDown':\n          this.pageDownSelection(this.activeIndex + this.getPageCount(), e);\n          e.preventDefault();\n          break;\n\n        case 'home':\n          this.updateHomeEndAction(e);\n          break;\n\n        case 'end':\n          this.updateHomeEndAction(e);\n          break;\n\n        case 'space':\n          if (this.getModuleName() === 'dropdownlist') {\n            if (!this.beforePopupOpen) {\n              this.showPopup();\n            }\n          }\n\n          break;\n\n        case 'open':\n          this.showPopup(e);\n          break;\n\n        case 'hide':\n          this.preventAltUp = this.isPopupOpen;\n          this.hidePopup(e);\n          this.focusDropDown(e);\n          break;\n\n        case 'enter':\n          this.selectCurrentItem(e);\n          break;\n\n        case 'tab':\n          this.selectCurrentValueOnTab(e);\n          break;\n\n        case 'escape':\n        case 'close':\n          if (this.isPopupOpen) {\n            this.hidePopup(e);\n            this.focusDropDown(e);\n          }\n\n          break;\n      }\n    }\n  };\n\n  DropDownList.prototype.updateUpDownAction = function (e) {\n    var focusEle = this.list.querySelector('.' + dropDownListClasses.focus);\n\n    if (this.isSelectFocusItem(focusEle)) {\n      this.setSelection(focusEle, e);\n    } else if (!isNullOrUndefined(this.liCollections)) {\n      var index = e.action === 'down' ? this.activeIndex + 1 : this.activeIndex - 1;\n      var startIndex = 0;\n\n      if (this.getModuleName() === 'autocomplete') {\n        startIndex = e.action === 'down' && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1;\n        index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;\n      }\n\n      var nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];\n\n      if (!isNullOrUndefined(nextItem)) {\n        this.setSelection(nextItem, e);\n      }\n    }\n\n    e.preventDefault();\n  };\n\n  DropDownList.prototype.updateHomeEndAction = function (e) {\n    if (this.getModuleName() === 'dropdownlist') {\n      var findLi = 0;\n\n      if (e.action === 'home') {\n        findLi = 0;\n      } else {\n        findLi = this.getItems().length - 1;\n      }\n\n      e.preventDefault();\n\n      if (this.activeIndex === findLi) {\n        return;\n      }\n\n      this.setSelection(this.liCollections[findLi], e);\n    }\n  };\n\n  DropDownList.prototype.selectCurrentValueOnTab = function (e) {\n    if (this.getModuleName() === 'autocomplete') {\n      this.selectCurrentItem(e);\n    } else {\n      if (this.isPopupOpen) {\n        this.hidePopup(e);\n        this.focusDropDown(e);\n      }\n    }\n  };\n\n  DropDownList.prototype.mobileKeyActionHandler = function (e) {\n    if (!this.enabled) {\n      return;\n    }\n\n    if (this.isEditTextBox() && !this.isPopupOpen) {\n      return;\n    }\n\n    if (!this.readonly) {\n      if (this.list === undefined && !this.isRequested) {\n        this.searchKeyEvent = e;\n        this.renderList();\n      }\n\n      if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0 || this.isRequested) {\n        return;\n      }\n\n      if (e.action === 'enter') {\n        this.selectCurrentItem(e);\n      }\n    }\n  };\n\n  DropDownList.prototype.selectCurrentItem = function (e) {\n    if (this.isPopupOpen) {\n      var li = this.list.querySelector('.' + dropDownListClasses.focus);\n\n      if (li) {\n        this.setSelection(li, e);\n        this.isTyped = false;\n      }\n\n      if (this.isSelected) {\n        this.isSelectCustom = false;\n        this.onChangeEvent(e);\n      }\n\n      this.hidePopup(e);\n      this.focusDropDown(e);\n    } else {\n      this.showPopup();\n    }\n  };\n\n  DropDownList.prototype.isSelectFocusItem = function (element) {\n    return !isNullOrUndefined(element);\n  };\n\n  DropDownList.prototype.getPageCount = function () {\n    var liHeight = this.list.classList.contains(dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue('height');\n    return Math.round(this.list.getBoundingClientRect().height / parseInt(liHeight, 10));\n  };\n\n  DropDownList.prototype.pageUpSelection = function (steps, event) {\n    var previousItem = steps >= 0 ? this.liCollections[steps + 1] : this.liCollections[0];\n    this.setSelection(previousItem, event);\n  };\n\n  DropDownList.prototype.pageDownSelection = function (steps, event) {\n    var list = this.getItems();\n    var previousItem = steps <= list.length ? this.liCollections[steps - 1] : this.liCollections[list.length - 1];\n    this.setSelection(previousItem, event);\n  };\n\n  DropDownList.prototype.unWireEvent = function () {\n    if (!isNullOrUndefined(this.inputWrapper)) {\n      EventHandler.remove(this.inputWrapper.container, 'mousedown', this.dropDownClick);\n      EventHandler.remove(this.inputWrapper.container, 'keypress', this.onSearch);\n      EventHandler.remove(this.inputWrapper.container, 'focus', this.focusIn);\n    }\n\n    this.unBindCommonEvent();\n  };\n  /**\n   * Event un binding for list items.\n   *\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.unWireListEvents = function () {\n    if (this.list) {\n      EventHandler.remove(this.list, 'click', this.onMouseClick);\n      EventHandler.remove(this.list, 'mouseover', this.onMouseOver);\n      EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);\n    }\n  };\n\n  DropDownList.prototype.checkSelector = function (id) {\n    return '[id=\"' + id.replace(/(:|\\.|\\[|\\]|,|=|@|\\\\|\\/|#)/g, '\\\\$1') + '\"]';\n  };\n\n  DropDownList.prototype.onDocumentClick = function (e) {\n    var target = e.target;\n\n    if (!(!isNullOrUndefined(this.popupObj) && closest(target, this.checkSelector(this.popupObj.element.id))) && !isNullOrUndefined(this.inputWrapper) && !this.inputWrapper.container.contains(e.target)) {\n      if (this.inputWrapper.container.classList.contains(dropDownListClasses.inputFocus) || this.isPopupOpen) {\n        this.isDocumentClick = true;\n        var isActive = this.isRequested;\n        this.isInteracted = false;\n        this.hidePopup(e);\n\n        if (!isActive) {\n          this.onFocusOut();\n          this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);\n        }\n      }\n    } else if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && !(this.getModuleName() === 'combobox' && !this.allowFiltering && Browser.isDevice && target === this.inputWrapper.buttons[0])) {\n      this.isPreventBlur = (Browser.isIE || Browser.info.name === 'edge') && (document.activeElement === this.targetElement() || document.activeElement === this.filterInput);\n      e.preventDefault();\n    }\n  };\n\n  DropDownList.prototype.activeStateChange = function () {\n    if (this.isDocumentClick) {\n      this.hidePopup();\n      this.onFocusOut();\n      this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);\n    }\n  };\n\n  DropDownList.prototype.focusDropDown = function (e) {\n    if (!this.initial && this.isFilterLayout()) {\n      this.focusIn(e);\n    }\n  };\n\n  DropDownList.prototype.dropDownClick = function (e) {\n    if (e.which === 3 || e.button === 2) {\n      return;\n    }\n\n    if (this.targetElement().classList.contains(dropDownListClasses.disable) || this.inputWrapper.clearButton === e.target) {\n      return;\n    }\n\n    var target = e.target;\n\n    if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && this.getModuleName() !== 'combobox') {\n      e.preventDefault();\n    }\n\n    if (!this.readonly) {\n      if (this.isPopupOpen) {\n        this.hidePopup(e);\n\n        if (this.isFilterLayout()) {\n          this.focusDropDown(e);\n        }\n      } else {\n        this.focusIn(e);\n        this.floatLabelChange();\n        this.queryString = this.inputElement.value.trim() === '' ? null : this.inputElement.value;\n        this.isDropDownClick = true;\n        this.showPopup(e);\n      } // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n\n      var proxy_1 = this; // eslint-disable-next-line max-len\n\n      var duration = this.element.tagName === this.getNgDirective() && this.itemTemplate ? 500 : 100;\n\n      if (!this.isSecondClick) {\n        setTimeout(function () {\n          proxy_1.cloneElements();\n          proxy_1.isSecondClick = true;\n        }, duration);\n      }\n    } else {\n      this.focusIn(e);\n    }\n  };\n\n  DropDownList.prototype.cloneElements = function () {\n    if (this.list) {\n      var ulElement = this.list.querySelector('ul');\n\n      if (ulElement) {\n        ulElement = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;\n        this.actionCompleteData.ulElement = ulElement;\n      }\n    }\n  };\n\n  DropDownList.prototype.updateSelectedItem = function (li, e, preventSelect, isSelection) {\n    var _this = this;\n\n    this.removeSelection();\n    li.classList.add(dropDownBaseClasses.selected);\n    this.removeHover();\n    var value = this.getFormattedValue(li.getAttribute('data-value'));\n    var selectedData = this.getDataByValue(value);\n\n    if (!this.initial && !preventSelect && !isNullOrUndefined(e)) {\n      var items = this.detachChanges(selectedData);\n      this.isSelected = true;\n      var eventArgs = {\n        e: e,\n        item: li,\n        itemData: items,\n        isInteracted: e ? true : false,\n        cancel: false\n      };\n      this.trigger('select', eventArgs, function (eventArgs) {\n        if (eventArgs.cancel) {\n          li.classList.remove(dropDownBaseClasses.selected);\n        } else {\n          _this.selectEventCallback(li, e, preventSelect, selectedData, value);\n\n          if (isSelection) {\n            _this.setSelectOptions(li, e);\n          }\n        }\n      });\n    } else {\n      this.selectEventCallback(li, e, preventSelect, selectedData, value);\n\n      if (isSelection) {\n        this.setSelectOptions(li, e);\n      }\n    }\n  };\n\n  DropDownList.prototype.selectEventCallback = function (li, e, preventSelect, selectedData, value) {\n    this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;\n\n    if (this.itemData != selectedData) {\n      this.previousValue = !isNullOrUndefined(this.itemData) ? typeof this.itemData == \"object\" ? this.checkFieldValue(this.itemData, this.fields.value.split('.')) : this.itemData : null;\n    }\n\n    this.item = li;\n    this.itemData = selectedData;\n    var focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n\n    if (focusedItem) {\n      removeClass([focusedItem], dropDownBaseClasses.focus);\n    }\n\n    li.setAttribute('aria-selected', 'true');\n    this.activeIndex = this.getIndexByValue(value);\n  };\n\n  DropDownList.prototype.activeItem = function (li) {\n    if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.selected)) {\n      this.removeSelection();\n      li.classList.add(dropDownBaseClasses.selected);\n      this.removeHover();\n      li.setAttribute('aria-selected', 'true');\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  DropDownList.prototype.setValue = function (e) {\n    var dataItem = this.getItemData();\n\n    if (dataItem.value === null) {\n      Input.setValue(null, this.inputElement, this.floatLabelType, this.showClearButton);\n    } else {\n      Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);\n    }\n\n    if (this.valueTemplate && this.itemData !== null) {\n      this.setValueTemplate();\n    } else if (!isNullOrUndefined(this.valueTempElement) && this.inputElement.previousSibling === this.valueTempElement) {\n      detach(this.valueTempElement);\n      this.inputElement.style.display = 'block';\n    }\n\n    var clearIcon = dropDownListClasses.clearIcon;\n    var isFilterElement = this.isFiltering() && this.filterInput && this.getModuleName() === 'combobox';\n    var clearElement = isFilterElement && this.filterInput.parentElement.querySelector('.' + clearIcon);\n\n    if (this.isFiltering() && clearElement) {\n      clearElement.style.removeProperty('visibility');\n    }\n\n    if (this.previousValue === dataItem.value) {\n      this.isSelected = false;\n      return true;\n    } else {\n      this.isSelected = !this.initial ? true : false;\n      this.isSelectCustom = false;\n\n      if (this.getModuleName() === 'dropdownlist') {\n        this.updateIconState();\n      }\n\n      return false;\n    }\n  };\n\n  DropDownList.prototype.setSelection = function (li, e) {\n    if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || this.isPopupOpen && this.isSelected && li.classList.contains(dropDownBaseClasses.selected))) {\n      this.updateSelectedItem(li, e, false, true);\n    } else {\n      this.setSelectOptions(li, e);\n    }\n  };\n\n  DropDownList.prototype.setSelectOptions = function (li, e) {\n    if (this.list) {\n      this.removeHover();\n    }\n\n    this.previousSelectedLI = !isNullOrUndefined(this.selectedLI) ? this.selectedLI : null;\n    this.selectedLI = li;\n\n    if (this.setValue(e)) {\n      return;\n    }\n\n    if (!this.isPopupOpen && !isNullOrUndefined(li) || this.isPopupOpen && !isNullOrUndefined(e) && (e.type !== 'keydown' || e.type === 'keydown' && e.action === 'enter')) {\n      this.isSelectCustom = false;\n      this.onChangeEvent(e);\n    }\n\n    if (this.isPopupOpen && !isNullOrUndefined(this.selectedLI) && this.itemData !== null && (!e || e.type !== 'click')) {\n      this.setScrollPosition(e);\n    }\n\n    if (Browser.info.name !== 'mozilla') {\n      if (this.targetElement()) {\n        attributes(this.targetElement(), {\n          'aria-describedby': this.inputElement.id !== '' ? this.inputElement.id : this.element.id\n        });\n        this.targetElement().removeAttribute('aria-live');\n      }\n    }\n\n    if (this.isPopupOpen && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName('e-item-focus')[0])) {\n      attributes(this.targetElement(), {\n        'aria-activedescendant': this.ulElement.getElementsByClassName('e-item-focus')[0].id\n      });\n    } else if (this.isPopupOpen && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName('e-active')[0])) {\n      attributes(this.targetElement(), {\n        'aria-activedescendant': this.ulElement.getElementsByClassName('e-active')[0].id\n      });\n    }\n  };\n\n  DropDownList.prototype.dropdownCompiler = function (dropdownTemplate) {\n    var checkTemplate = false;\n\n    if (dropdownTemplate) {\n      try {\n        checkTemplate = document.querySelectorAll(dropdownTemplate).length ? true : false;\n      } catch (exception) {\n        checkTemplate = false;\n      }\n    }\n\n    return checkTemplate;\n  };\n\n  DropDownList.prototype.setValueTemplate = function () {\n    var compiledString; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    if (this.isReact) {\n      this.clearTemplate(['valueTemplate']);\n\n      if (this.valueTempElement) {\n        detach(this.valueTempElement);\n        this.inputElement.style.display = 'block';\n        this.valueTempElement = null;\n      }\n    }\n\n    if (!this.valueTempElement) {\n      this.valueTempElement = this.createElement('span', {\n        className: dropDownListClasses.value\n      });\n      this.inputElement.parentElement.insertBefore(this.valueTempElement, this.inputElement);\n      this.inputElement.style.display = 'none';\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    if (!this.isReact) {\n      this.valueTempElement.innerHTML = '';\n    }\n\n    var valuecheck = this.dropdownCompiler(this.valueTemplate);\n\n    if (valuecheck) {\n      compiledString = compile(document.querySelector(this.valueTemplate).innerHTML.trim());\n    } else {\n      compiledString = compile(this.valueTemplate);\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    var valueCompTemp = compiledString(this.itemData, this, 'valueTemplate', this.valueTemplateId, this.isStringTemplate, null, this.valueTempElement);\n\n    if (valueCompTemp && valueCompTemp.length > 0) {\n      for (var i = 0; i < valueCompTemp.length; i++) {\n        this.valueTempElement.appendChild(valueCompTemp[i]);\n      }\n    }\n\n    this.renderReactTemplates();\n  };\n\n  DropDownList.prototype.removeSelection = function () {\n    if (this.list) {\n      var selectedItems = this.list.querySelectorAll('.' + dropDownBaseClasses.selected);\n\n      if (selectedItems.length) {\n        removeClass(selectedItems, dropDownBaseClasses.selected);\n        selectedItems[0].removeAttribute('aria-selected');\n      }\n    }\n  };\n\n  DropDownList.prototype.getItemData = function () {\n    var fields = this.fields;\n    var dataItem = null;\n    dataItem = this.itemData;\n    var dataValue;\n    var dataText;\n\n    if (!isNullOrUndefined(dataItem)) {\n      dataValue = getValue(fields.value, dataItem);\n      dataText = getValue(fields.text, dataItem);\n    }\n\n    var value = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataValue : dataItem;\n    var text = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataText : dataItem;\n    return {\n      value: value,\n      text: text\n    };\n  };\n  /**\n   * To trigger the change event for list.\n   *\n   * @param {MouseEvent | KeyboardEvent | TouchEvent} eve - Specifies the event arguments.\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.onChangeEvent = function (eve) {\n    var dataItem = this.getItemData();\n    var index = this.isSelectCustom ? null : this.activeIndex;\n    this.setProperties({\n      'index': index,\n      'text': dataItem.text,\n      'value': dataItem.value\n    }, true);\n    this.detachChangeEvent(eve);\n  };\n\n  DropDownList.prototype.detachChanges = function (value) {\n    var items;\n\n    if (typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number') {\n      items = Object.defineProperties({}, {\n        value: {\n          value: value,\n          enumerable: true\n        },\n        text: {\n          value: value,\n          enumerable: true\n        }\n      });\n    } else {\n      items = value;\n    }\n\n    return items;\n  };\n\n  DropDownList.prototype.detachChangeEvent = function (eve) {\n    this.isSelected = false;\n    this.previousValue = this.value;\n    this.activeIndex = this.index;\n    this.typedString = !isNullOrUndefined(this.text) ? this.text : '';\n\n    if (!this.initial) {\n      var items = this.detachChanges(this.itemData);\n      var preItems = void 0;\n\n      if (typeof this.previousItemData === 'string' || typeof this.previousItemData === 'boolean' || typeof this.previousItemData === 'number') {\n        preItems = Object.defineProperties({}, {\n          value: {\n            value: this.previousItemData,\n            enumerable: true\n          },\n          text: {\n            value: this.previousItemData,\n            enumerable: true\n          }\n        });\n      } else {\n        preItems = this.previousItemData;\n      }\n\n      this.setHiddenValue();\n      var eventArgs = {\n        e: eve,\n        item: this.item,\n        itemData: items,\n        previousItem: this.previousSelectedLI,\n        previousItemData: preItems,\n        isInteracted: eve ? true : false,\n        value: this.value,\n        element: this.element,\n        event: eve\n      };\n\n      if (this.isAngular && this.preventChange) {\n        this.preventChange = false;\n      } else {\n        this.trigger('change', eventArgs);\n      }\n    }\n\n    if ((isNullOrUndefined(this.value) || this.value === '') && this.floatLabelType !== 'Always') {\n      removeClass([this.inputWrapper.container], 'e-valid-input');\n    }\n  };\n\n  DropDownList.prototype.setHiddenValue = function () {\n    if (!isNullOrUndefined(this.value)) {\n      if (this.hiddenElement.querySelector('option')) {\n        var selectedElement = this.hiddenElement.querySelector('option');\n        selectedElement.textContent = this.text;\n        selectedElement.setAttribute('value', this.value.toString());\n      } else {\n        if (!isNullOrUndefined(this.hiddenElement)) {\n          this.hiddenElement.innerHTML = '<option selected>' + this.text + '</option>';\n          var selectedElement = this.hiddenElement.querySelector('option');\n          selectedElement.setAttribute('value', this.value.toString());\n        }\n      }\n    } else {\n      this.hiddenElement.innerHTML = '';\n    }\n  };\n  /**\n   * Filter bar implementation\n   *\n   * @param {KeyboardEventArgs} e - Specifies the event arguments.\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.onFilterUp = function (e) {\n    if (!(e.ctrlKey && e.keyCode === 86) && (this.isValidKey || e.keyCode === 40 || e.keyCode === 38)) {\n      this.isValidKey = false;\n\n      switch (e.keyCode) {\n        case 38: //up arrow\n\n        case 40:\n          //down arrow\n          if (this.getModuleName() === 'autocomplete' && !this.isPopupOpen && !this.preventAltUp && !this.isRequested) {\n            this.preventAutoFill = true;\n            this.searchLists(e);\n          } else {\n            this.preventAutoFill = false;\n          }\n\n          this.preventAltUp = false;\n\n          if (this.getModuleName() === 'autocomplete' && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName('e-item-focus')[0])) {\n            attributes(this.targetElement(), {\n              'aria-activedescendant': this.ulElement.getElementsByClassName('e-item-focus')[0].id\n            });\n          }\n\n          e.preventDefault();\n          break;\n\n        case 46: //delete\n\n        case 8:\n          //backspace\n          this.typedString = this.filterInput.value;\n\n          if (!this.isPopupOpen && this.typedString !== '' || this.isPopupOpen && this.queryString.length > 0) {\n            this.preventAutoFill = true;\n            this.searchLists(e);\n          } else if (this.typedString === '' && this.queryString === '' && this.getModuleName() !== 'autocomplete') {\n            this.preventAutoFill = true;\n            this.searchLists(e);\n          } else if (this.typedString === '') {\n            if (this.list) {\n              this.resetFocusElement();\n            }\n\n            this.activeIndex = null;\n\n            if (this.getModuleName() !== 'dropdownlist') {\n              this.preventAutoFill = true;\n              this.searchLists(e);\n\n              if (this.getModuleName() === 'autocomplete') {\n                this.hidePopup();\n              }\n            }\n          }\n\n          e.preventDefault();\n          break;\n\n        default:\n          this.typedString = this.filterInput.value;\n          this.preventAutoFill = false;\n          this.searchLists(e);\n          break;\n      }\n    } else {\n      this.isValidKey = false;\n    }\n  };\n\n  DropDownList.prototype.onFilterDown = function (e) {\n    switch (e.keyCode) {\n      case 13:\n        //enter\n        break;\n\n      case 40: //down arrow\n\n      case 38:\n        //up arrow\n        this.queryString = this.filterInput.value;\n        e.preventDefault();\n        break;\n\n      case 9:\n        //tab\n        if (this.isPopupOpen && this.getModuleName() !== 'autocomplete') {\n          e.preventDefault();\n        }\n\n        break;\n\n      default:\n        this.prevSelectPoints = this.getSelectionPoints();\n        this.queryString = this.filterInput.value;\n        break;\n    }\n  };\n\n  DropDownList.prototype.removeFillSelection = function () {\n    if (this.isInteracted) {\n      var selection = this.getSelectionPoints();\n      this.inputElement.setSelectionRange(selection.end, selection.end);\n    }\n  };\n\n  DropDownList.prototype.getQuery = function (query) {\n    var filterQuery;\n\n    if (!this.isCustomFilter && this.allowFiltering && this.filterInput) {\n      filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n      var filterType = this.typedString === '' ? 'contains' : this.filterType;\n      var dataType = this.typeOfData(this.dataSource).typeof;\n\n      if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n        filterQuery.where('', filterType, this.typedString, this.ignoreCase, this.ignoreAccent);\n      } else {\n        var fields = this.fields.text ? this.fields.text : '';\n        filterQuery.where(fields, filterType, this.typedString, this.ignoreCase, this.ignoreAccent);\n      }\n    } else {\n      filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n    }\n\n    return filterQuery;\n  };\n\n  DropDownList.prototype.getSelectionPoints = function () {\n    var input = this.inputElement;\n    return {\n      start: Math.abs(input.selectionStart),\n      end: Math.abs(input.selectionEnd)\n    };\n  };\n\n  DropDownList.prototype.searchLists = function (e) {\n    var _this = this;\n\n    this.isTyped = true;\n    this.activeIndex = null;\n    this.isListSearched = true;\n\n    if (this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon)) {\n      var clearElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);\n      clearElement.style.visibility = this.filterInput.value === '' ? 'hidden' : 'visible';\n    }\n\n    this.isDataFetched = false;\n\n    if (this.isFiltering()) {\n      var eventArgs_1 = {\n        preventDefaultAction: false,\n        text: this.filterInput.value,\n        updateData: function (dataSource, query, fields) {\n          if (eventArgs_1.cancel) {\n            return;\n          }\n\n          _this.isCustomFilter = true;\n\n          _this.filteringAction(dataSource, query, fields);\n        },\n        baseEventArgs: e,\n        cancel: false\n      };\n      this.trigger('filtering', eventArgs_1, function (eventArgs) {\n        if (!eventArgs.cancel && !_this.isCustomFilter && !eventArgs.preventDefaultAction) {\n          _this.filteringAction(_this.dataSource, null, _this.fields);\n        }\n      });\n    }\n  };\n  /**\n   * To filter the data from given data source by using query\n   *\n   * @param {Object[] | DataManager } dataSource - Set the data source to filter.\n   * @param {Query} query - Specify the query to filter the data.\n   * @param {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n   * @returns {void}\n   * @deprecated\n   */\n\n\n  DropDownList.prototype.filter = function (dataSource, query, fields) {\n    this.isCustomFilter = true;\n    this.filteringAction(dataSource, query, fields);\n  };\n\n  DropDownList.prototype.filteringAction = function (dataSource, query, fields) {\n    if (!isNullOrUndefined(this.filterInput)) {\n      this.beforePopupOpen = !this.isPopupOpen && this.getModuleName() === 'combobox' && this.filterInput.value === '' ? false : true;\n\n      if (this.filterInput.value.trim() === '' && !this.itemTemplate) {\n        this.actionCompleteData.isUpdated = false;\n        this.isTyped = false;\n\n        if (!isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list)) {\n          this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list);\n        }\n\n        this.isTyped = true;\n\n        if (!isNullOrUndefined(this.itemData) && this.getModuleName() === 'dropdownlist') {\n          this.focusIndexItem();\n          this.setScrollPosition();\n        }\n\n        this.isNotSearchList = true;\n      } else {\n        this.isNotSearchList = false;\n        query = this.filterInput.value.trim() === '' ? null : query;\n        this.resetList(dataSource, fields, query);\n      }\n\n      this.renderReactTemplates();\n    }\n  };\n\n  DropDownList.prototype.setSearchBox = function (popupElement) {\n    if (this.isFiltering()) {\n      var parentElement = popupElement.querySelector('.' + dropDownListClasses.filterParent) ? popupElement.querySelector('.' + dropDownListClasses.filterParent) : this.createElement('span', {\n        className: dropDownListClasses.filterParent\n      });\n      this.filterInput = this.createElement('input', {\n        attrs: {\n          type: 'text'\n        },\n        className: dropDownListClasses.filterInput\n      });\n      this.element.parentNode.insertBefore(this.filterInput, this.element);\n      var backIcon = false;\n\n      if (Browser.isDevice) {\n        backIcon = true;\n      }\n\n      this.filterInputObj = Input.createInput({\n        element: this.filterInput,\n        buttons: backIcon ? [dropDownListClasses.backIcon, dropDownListClasses.filterBarClearIcon] : [dropDownListClasses.filterBarClearIcon],\n        properties: {\n          placeholder: this.filterBarPlaceholder\n        }\n      }, this.createElement);\n\n      if (!isNullOrUndefined(this.cssClass)) {\n        if (this.cssClass.split(' ').indexOf('e-outline') !== -1) {\n          addClass([this.filterInputObj.container], 'e-outline');\n        } else if (this.cssClass.split(' ').indexOf('e-filled') !== -1) {\n          addClass([this.filterInputObj.container], 'e-filled');\n        }\n      }\n\n      append([this.filterInputObj.container], parentElement);\n      prepend([parentElement], popupElement);\n      attributes(this.filterInput, {\n        'aria-disabled': 'false',\n        'role': 'combobox',\n        'autocomplete': 'off',\n        'autocapitalize': 'off',\n        'spellcheck': 'false'\n      });\n      this.clearIconElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);\n\n      if (!Browser.isDevice && this.clearIconElement) {\n        EventHandler.add(this.clearIconElement, 'click', this.clearText, this);\n        this.clearIconElement.style.visibility = 'hidden';\n      }\n\n      if (!Browser.isDevice) {\n        this.searchKeyModule = new KeyboardEvents(this.filterInput, {\n          keyAction: this.keyActionHandler.bind(this),\n          keyConfigs: this.keyConfigure,\n          eventName: 'keydown'\n        });\n      } else {\n        this.searchKeyModule = new KeyboardEvents(this.filterInput, {\n          keyAction: this.mobileKeyActionHandler.bind(this),\n          keyConfigs: this.keyConfigure,\n          eventName: 'keydown'\n        });\n      }\n\n      EventHandler.add(this.filterInput, 'input', this.onInput, this);\n      EventHandler.add(this.filterInput, 'keyup', this.onFilterUp, this);\n      EventHandler.add(this.filterInput, 'keydown', this.onFilterDown, this);\n      EventHandler.add(this.filterInput, 'blur', this.onBlurHandler, this);\n      EventHandler.add(this.filterInput, 'paste', this.pasteHandler, this);\n      return this.filterInputObj;\n    } else {\n      return inputObject;\n    }\n  };\n\n  DropDownList.prototype.onInput = function (e) {\n    this.isValidKey = true; // For filtering works in mobile firefox.\n\n    if (Browser.isDevice && Browser.info.name === 'mozilla') {\n      this.typedString = this.filterInput.value;\n      this.preventAutoFill = true;\n      this.searchLists(e);\n    }\n  };\n\n  DropDownList.prototype.pasteHandler = function (e) {\n    var _this = this;\n\n    setTimeout(function () {\n      _this.typedString = _this.filterInput.value;\n\n      _this.searchLists(e);\n    });\n  };\n\n  DropDownList.prototype.onActionFailure = function (e) {\n    _super.prototype.onActionFailure.call(this, e);\n\n    if (this.beforePopupOpen) {\n      this.renderPopup();\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  DropDownList.prototype.onActionComplete = function (ulElement, list, e, isUpdated) {\n    var _this = this;\n\n    if (this.isNotSearchList) {\n      this.isNotSearchList = false;\n      return;\n    }\n\n    if (this.isActive) {\n      var selectedItem = this.selectedLI ? this.selectedLI.cloneNode(true) : null;\n\n      _super.prototype.onActionComplete.call(this, ulElement, list, e);\n\n      this.updateSelectElementData(this.allowFiltering);\n\n      if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent) && this.searchKeyEvent.type === 'keydown') {\n        this.isRequested = false;\n        this.keyActionHandler(this.searchKeyEvent);\n        this.searchKeyEvent = null;\n      }\n\n      if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent)) {\n        this.incrementalSearch(this.searchKeyEvent);\n        this.searchKeyEvent = null;\n      }\n\n      this.list.scrollTop = 0;\n\n      if (!isNullOrUndefined(ulElement)) {\n        attributes(ulElement, {\n          'id': this.element.id + '_options',\n          'role': 'listbox',\n          'aria-hidden': 'false'\n        });\n      }\n\n      if (this.initRemoteRender) {\n        this.initial = true;\n        this.activeIndex = this.index;\n        this.initRemoteRender = false;\n\n        if (this.value && this.dataSource instanceof DataManager) {\n          var checkField_1 = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;\n          var fieldValue_1 = this.fields.value.split('.');\n          var checkVal = list.some(function (x) {\n            return isNullOrUndefined(x[checkField_1]) && fieldValue_1.length > 1 ? _this.checkFieldValue(x, fieldValue_1) === _this.value : x[checkField_1] === _this.value;\n          });\n\n          if (!checkVal) {\n            this.dataSource.executeQuery(this.getQuery(this.query).where(new Predicate(checkField_1, 'equal', this.value))).then(function (e) {\n              if (e.result.length > 0) {\n                _this.addItem(e.result, list.length);\n\n                _this.updateValues();\n              } else {\n                _this.updateValues();\n              }\n            });\n          } else {\n            this.updateValues();\n          }\n        } else {\n          this.updateValues();\n        }\n\n        this.initial = false;\n      } else if (this.getModuleName() === 'autocomplete' && this.value) {\n        this.setInputValue();\n      }\n\n      if (this.getModuleName() !== 'autocomplete' && this.isFiltering() && !this.isTyped) {\n        if (!this.actionCompleteData.isUpdated || !this.isCustomFilter && !this.isFilterFocus || isNullOrUndefined(this.itemData) && this.allowFiltering && (this.dataSource instanceof DataManager || !isNullOrUndefined(this.dataSource) && !isNullOrUndefined(this.dataSource.length) && this.dataSource.length !== 0)) {\n          if (this.itemTemplate && this.element.tagName === 'EJS-COMBOBOX' && this.allowFiltering) {\n            setTimeout(function () {\n              _this.updateActionCompleteDataValues(ulElement, list);\n            }, 0);\n          } else {\n            this.updateActionCompleteDataValues(ulElement, list);\n          }\n        }\n\n        this.addNewItem(list, selectedItem);\n\n        if (!isNullOrUndefined(this.itemData)) {\n          this.focusIndexItem();\n        }\n      }\n\n      if (this.beforePopupOpen) {\n        this.renderPopup(e);\n      }\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  DropDownList.prototype.checkFieldValue = function (list, fieldValue) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var checkField = list;\n    fieldValue.forEach(function (value) {\n      checkField = checkField[value];\n    });\n    return checkField;\n  };\n\n  DropDownList.prototype.updateActionCompleteDataValues = function (ulElement, list) {\n    this.actionCompleteData = {\n      ulElement: ulElement.cloneNode(true),\n      list: list,\n      isUpdated: true\n    };\n\n    if (this.actionData.list !== this.actionCompleteData.list && this.actionCompleteData.ulElement && this.actionCompleteData.list) {\n      this.actionData = this.actionCompleteData;\n    }\n  };\n\n  DropDownList.prototype.addNewItem = function (listData, newElement) {\n    var _this = this;\n\n    if (!isNullOrUndefined(this.itemData) && !isNullOrUndefined(newElement)) {\n      var value_1 = this.getItemData().value;\n      var isExist = listData.some(function (data) {\n        return (typeof data === 'string' || typeof data === 'number') && data === value_1 || getValue(_this.fields.value, data) === value_1;\n      });\n\n      if (!isExist) {\n        this.addItem(this.itemData);\n      }\n    }\n  };\n\n  DropDownList.prototype.updateActionCompleteData = function (li, item, index) {\n    var _this = this;\n\n    if (this.getModuleName() !== 'autocomplete' && this.actionCompleteData.ulElement) {\n      if (this.itemTemplate && this.element.tagName === 'EJS-COMBOBOX' && this.allowFiltering) {\n        setTimeout(function () {\n          _this.actionCompleteDataUpdate(li, item, index);\n        }, 0);\n      } else {\n        this.actionCompleteDataUpdate(li, item, index);\n      }\n    }\n  };\n\n  DropDownList.prototype.actionCompleteDataUpdate = function (li, item, index) {\n    if (index !== null) {\n      this.actionCompleteData.ulElement.insertBefore(li.cloneNode(true), this.actionCompleteData.ulElement.childNodes[index]);\n    } else {\n      this.actionCompleteData.ulElement.appendChild(li.cloneNode(true));\n    }\n\n    if (this.isFiltering() && this.actionCompleteData.list.indexOf(item) < 0) {\n      this.actionCompleteData.list.push(item);\n    }\n  };\n\n  DropDownList.prototype.focusIndexItem = function () {\n    var value = this.getItemData().value;\n    this.activeIndex = this.getIndexByValue(value);\n    var element = this.findListElement(this.list, 'li', 'data-value', value);\n    this.selectedLI = element;\n    this.activeItem(element);\n    this.removeFocus();\n  };\n\n  DropDownList.prototype.updateSelection = function () {\n    var selectedItem = this.list.querySelector('.' + dropDownBaseClasses.selected);\n\n    if (selectedItem) {\n      this.setProperties({\n        'index': this.getIndexByValue(selectedItem.getAttribute('data-value'))\n      });\n      this.activeIndex = this.index;\n    } else {\n      this.removeFocus();\n      this.list.querySelector('.' + dropDownBaseClasses.li).classList.add(dropDownListClasses.focus);\n    }\n  };\n\n  DropDownList.prototype.removeFocus = function () {\n    var highlightedItem = this.list.querySelectorAll('.' + dropDownListClasses.focus);\n\n    if (highlightedItem && highlightedItem.length) {\n      removeClass(highlightedItem, dropDownListClasses.focus);\n    }\n  };\n\n  DropDownList.prototype.renderPopup = function (e) {\n    var _this = this;\n\n    if (this.popupObj && document.body.contains(this.popupObj.element)) {\n      this.refreshPopup();\n      return;\n    }\n\n    var args = {\n      cancel: false\n    };\n    this.trigger('beforeOpen', args, function (args) {\n      if (!args.cancel) {\n        var popupEle = _this.createElement('div', {\n          id: _this.element.id + '_popup',\n          className: 'e-ddl e-popup ' + (_this.cssClass !== null ? _this.cssClass : '')\n        });\n\n        var searchBox = _this.setSearchBox(popupEle);\n\n        _this.listHeight = formatUnit(_this.popupHeight);\n\n        if (_this.headerTemplate) {\n          _this.setHeaderTemplate(popupEle);\n        }\n\n        append([_this.list], popupEle);\n\n        if (_this.footerTemplate) {\n          _this.setFooterTemplate(popupEle);\n        }\n\n        document.body.appendChild(popupEle);\n        popupEle.style.visibility = 'hidden';\n\n        if (_this.popupHeight !== 'auto') {\n          _this.searchBoxHeight = 0;\n\n          if (!isNullOrUndefined(searchBox.container)) {\n            _this.searchBoxHeight = searchBox.container.parentElement.getBoundingClientRect().height;\n            _this.listHeight = (parseInt(_this.listHeight, 10) - _this.searchBoxHeight).toString() + 'px';\n          }\n\n          if (_this.headerTemplate) {\n            _this.header = _this.header ? _this.header : popupEle.querySelector('.e-ddl-header');\n            var height = Math.round(_this.header.getBoundingClientRect().height);\n            _this.listHeight = (parseInt(_this.listHeight, 10) - (height + _this.searchBoxHeight)).toString() + 'px';\n          }\n\n          if (_this.footerTemplate) {\n            _this.footer = _this.footer ? _this.footer : popupEle.querySelector('.e-ddl-footer');\n            var height = Math.round(_this.footer.getBoundingClientRect().height);\n            _this.listHeight = (parseInt(_this.listHeight, 10) - (height + _this.searchBoxHeight)).toString() + 'px';\n          }\n\n          _this.list.style.maxHeight = (parseInt(_this.listHeight, 10) - 2).toString() + 'px'; // due to box-sizing property\n\n          popupEle.style.maxHeight = formatUnit(_this.popupHeight);\n        } else {\n          popupEle.style.height = 'auto';\n        }\n\n        var offsetValue = 0;\n        var left = void 0;\n\n        if (!isNullOrUndefined(_this.selectedLI) && !isNullOrUndefined(_this.activeIndex) && _this.activeIndex >= 0) {\n          _this.setScrollPosition();\n        } else {\n          _this.list.scrollTop = 0;\n        }\n\n        if (Browser.isDevice && !_this.allowFiltering && (_this.getModuleName() === 'dropdownlist' || _this.isDropDownClick && _this.getModuleName() === 'combobox')) {\n          offsetValue = _this.getOffsetValue(popupEle);\n          var firstItem = _this.isEmptyList() ? _this.list : _this.liCollections[0];\n\n          if (!isNullOrUndefined(_this.inputElement)) {\n            left = -(parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(_this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(_this.inputElement.parentElement).borderLeftWidth, 10));\n          }\n        }\n\n        _this.getFocusElement();\n\n        _this.createPopup(popupEle, offsetValue, left);\n\n        _this.checkCollision(popupEle);\n\n        if (Browser.isDevice) {\n          _this.popupObj.element.classList.add(dropDownListClasses.device);\n\n          if (_this.getModuleName() === 'dropdownlist' || _this.getModuleName() === 'combobox' && !_this.allowFiltering && _this.isDropDownClick) {\n            _this.popupObj.collision = {\n              X: 'fit',\n              Y: 'fit'\n            };\n          }\n\n          if (_this.isFilterLayout()) {\n            _this.popupObj.element.classList.add(dropDownListClasses.mobileFilter);\n\n            _this.popupObj.position = {\n              X: 0,\n              Y: 0\n            };\n\n            _this.popupObj.dataBind();\n\n            attributes(_this.popupObj.element, {\n              style: 'left:0px;right:0px;top:0px;bottom:0px;'\n            });\n            addClass([document.body, _this.popupObj.element], dropDownListClasses.popupFullScreen);\n\n            _this.setSearchBoxPosition();\n\n            _this.backIconElement = searchBox.container.querySelector('.e-back-icon');\n            _this.clearIconElement = searchBox.container.querySelector('.' + dropDownListClasses.clearIcon);\n            EventHandler.add(_this.backIconElement, 'click', _this.clickOnBackIcon, _this);\n            EventHandler.add(_this.clearIconElement, 'click', _this.clearText, _this);\n          }\n        }\n\n        popupEle.style.visibility = 'visible';\n        addClass([popupEle], 'e-popup-close');\n\n        var scrollParentElements = _this.popupObj.getScrollableParent(_this.inputWrapper.container);\n\n        for (var _i = 0, scrollParentElements_1 = scrollParentElements; _i < scrollParentElements_1.length; _i++) {\n          var element = scrollParentElements_1[_i];\n          EventHandler.add(element, 'scroll', _this.scrollHandler, _this);\n        }\n\n        if (!isNullOrUndefined(_this.list)) {\n          _this.unWireListEvents();\n\n          _this.wireListEvents();\n        }\n\n        _this.selectedElementID = _this.selectedLI ? _this.selectedLI.id : null;\n        attributes(_this.targetElement(), {\n          'aria-expanded': 'true',\n          'aria-owns': _this.inputElement.id + '_options'\n        });\n\n        _this.inputElement.setAttribute('aria-expanded', 'true');\n\n        var inputParent = _this.isFiltering() ? _this.filterInput.parentElement : _this.inputWrapper.container;\n        addClass([inputParent], [dropDownListClasses.inputFocus]);\n        var animModel = {\n          name: 'FadeIn',\n          duration: 100\n        };\n        _this.beforePopupOpen = true;\n        var popupInstance = _this.popupObj;\n        var eventArgs = {\n          popup: popupInstance,\n          event: e,\n          cancel: false,\n          animation: animModel\n        };\n\n        _this.trigger('open', eventArgs, function (eventArgs) {\n          if (!eventArgs.cancel) {\n            if (!isNullOrUndefined(_this.inputWrapper)) {\n              addClass([_this.inputWrapper.container], [dropDownListClasses.iconAnimation]);\n            }\n\n            _this.renderReactTemplates();\n\n            if (!isNullOrUndefined(_this.popupObj)) {\n              _this.popupObj.show(new Animation(eventArgs.animation), _this.zIndex === 1000 ? _this.element : null);\n            }\n          } else {\n            _this.beforePopupOpen = false;\n\n            _this.destroyPopup();\n          }\n        });\n      } else {\n        _this.beforePopupOpen = false;\n      }\n    });\n  };\n\n  DropDownList.prototype.checkCollision = function (popupEle) {\n    if (!Browser.isDevice || Browser.isDevice && !(this.getModuleName() === 'dropdownlist' || this.isDropDownClick)) {\n      var collision = isCollide(popupEle);\n\n      if (collision.length > 0) {\n        popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + 'px';\n      }\n\n      this.popupObj.resolveCollision();\n    }\n  };\n\n  DropDownList.prototype.getOffsetValue = function (popupEle) {\n    var popupStyles = getComputedStyle(popupEle);\n    var borderTop = parseInt(popupStyles.borderTopWidth, 10);\n    var borderBottom = parseInt(popupStyles.borderBottomWidth, 10);\n    return this.setPopupPosition(borderTop + borderBottom);\n  };\n\n  DropDownList.prototype.createPopup = function (element, offsetValue, left) {\n    var _this = this;\n\n    this.popupObj = new Popup(element, {\n      width: this.setWidth(),\n      targetType: 'relative',\n      relateTo: this.inputWrapper.container,\n      collision: {\n        X: 'flip',\n        Y: 'flip'\n      },\n      offsetY: offsetValue,\n      enableRtl: this.enableRtl,\n      offsetX: left,\n      position: {\n        X: 'left',\n        Y: 'bottom'\n      },\n      zIndex: this.zIndex,\n      close: function () {\n        if (!_this.isDocumentClick) {\n          _this.focusDropDown();\n        } // eslint-disable-next-line\n\n\n        if (_this.isReact) {\n          _this.clearTemplate(['headerTemplate', 'footerTemplate']);\n        }\n\n        _this.isNotSearchList = false;\n        _this.isDocumentClick = false;\n\n        _this.destroyPopup();\n\n        EventHandler.remove(document, 'mousedown', _this.onDocumentClick);\n\n        if (_this.isFiltering() && _this.actionCompleteData.list && _this.actionCompleteData.list[0]) {\n          _this.isActive = true;\n\n          _this.onActionComplete(_this.actionCompleteData.ulElement, _this.actionCompleteData.list, null, true);\n        }\n      },\n      open: function () {\n        EventHandler.remove(document, 'mousedown', _this.onDocumentClick);\n        EventHandler.add(document, 'mousedown', _this.onDocumentClick, _this);\n        _this.isPopupOpen = true;\n\n        var actionList = _this.actionCompleteData && _this.actionCompleteData.ulElement && _this.actionCompleteData.ulElement.querySelector('li');\n\n        var ulElement = _this.list.querySelector('ul li');\n\n        if (!isNullOrUndefined(_this.ulElement) && !isNullOrUndefined(_this.ulElement.getElementsByClassName('e-item-focus')[0])) {\n          attributes(_this.targetElement(), {\n            'aria-activedescendant': _this.ulElement.getElementsByClassName('e-item-focus')[0].id\n          });\n        } else if (!isNullOrUndefined(_this.ulElement) && !isNullOrUndefined(_this.ulElement.getElementsByClassName('e-active')[0])) {\n          attributes(_this.targetElement(), {\n            'aria-activedescendant': _this.ulElement.getElementsByClassName('e-active')[0].id\n          });\n        }\n\n        if (_this.isFiltering() && _this.itemTemplate && _this.element.tagName === _this.getNgDirective() && actionList && ulElement && actionList.textContent !== ulElement.textContent && _this.element.tagName !== 'EJS-COMBOBOX') {\n          _this.cloneElements();\n        }\n\n        if (_this.isFilterLayout()) {\n          removeClass([_this.inputWrapper.container], [dropDownListClasses.inputFocus]);\n          _this.isFilterFocus = true;\n\n          _this.filterInput.focus();\n\n          if (_this.inputWrapper.clearButton) {\n            addClass([_this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n          }\n        }\n\n        _this.activeStateChange();\n      },\n      targetExitViewport: function () {\n        if (!Browser.isDevice) {\n          _this.hidePopup();\n        }\n      }\n    });\n  };\n\n  DropDownList.prototype.isEmptyList = function () {\n    return !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0;\n  };\n\n  DropDownList.prototype.getFocusElement = function () {// combo-box used this method\n  };\n\n  DropDownList.prototype.isFilterLayout = function () {\n    return this.getModuleName() === 'dropdownlist' && this.allowFiltering;\n  };\n\n  DropDownList.prototype.scrollHandler = function () {\n    if (Browser.isDevice && (this.getModuleName() === 'dropdownlist' && !this.isFilterLayout() || this.getModuleName() === 'combobox' && !this.allowFiltering && this.isDropDownClick)) {\n      this.hidePopup();\n    }\n  };\n\n  DropDownList.prototype.setSearchBoxPosition = function () {\n    var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;\n    this.popupObj.element.style.maxHeight = '100%';\n    this.popupObj.element.style.width = '100%';\n    this.list.style.maxHeight = window.innerHeight - searchBoxHeight + 'px';\n    this.list.style.height = window.innerHeight - searchBoxHeight + 'px';\n    var clearElement = this.filterInput.parentElement.querySelector('.' + dropDownListClasses.clearIcon);\n    detach(this.filterInput);\n    clearElement.parentElement.insertBefore(this.filterInput, clearElement);\n  };\n\n  DropDownList.prototype.setPopupPosition = function (border) {\n    var offsetValue;\n    var popupOffset = border;\n    var selectedLI = this.list.querySelector('.' + dropDownListClasses.focus) || this.selectedLI;\n    var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];\n    var lastItem = this.isEmptyList() ? this.list : this.liCollections[this.getItems().length - 1];\n    var liHeight = firstItem.getBoundingClientRect().height;\n    var listHeight = this.list.offsetHeight / 2;\n    var height = isNullOrUndefined(selectedLI) ? firstItem.offsetTop : selectedLI.offsetTop;\n    var lastItemOffsetValue = lastItem.offsetTop;\n\n    if (lastItemOffsetValue - listHeight < height && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0 && !isNullOrUndefined(selectedLI)) {\n      var count = this.list.offsetHeight / liHeight;\n      var paddingBottom = parseInt(getComputedStyle(this.list).paddingBottom, 10);\n      offsetValue = (count - (this.liCollections.length - this.activeIndex)) * liHeight - popupOffset + paddingBottom;\n      this.list.scrollTop = selectedLI.offsetTop;\n    } else if (height > listHeight) {\n      offsetValue = listHeight - liHeight / 2;\n      this.list.scrollTop = height - listHeight + liHeight / 2;\n    } else {\n      offsetValue = height;\n    }\n\n    var inputHeight = this.inputWrapper.container.offsetHeight;\n    offsetValue = offsetValue + liHeight + popupOffset - (liHeight - inputHeight) / 2;\n    return -offsetValue;\n  };\n\n  DropDownList.prototype.setWidth = function () {\n    var width = formatUnit(this.popupWidth);\n\n    if (width.indexOf('%') > -1) {\n      var inputWidth = this.inputWrapper.container.offsetWidth * parseFloat(width) / 100;\n      width = inputWidth.toString() + 'px';\n    }\n\n    if (Browser.isDevice && !this.allowFiltering && (this.getModuleName() === 'dropdownlist' || this.isDropDownClick && this.getModuleName() === 'combobox')) {\n      var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];\n      width = parseInt(width, 10) + (parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10)) * 2 + 'px';\n    }\n\n    return width;\n  };\n\n  DropDownList.prototype.scrollBottom = function (isInitial) {\n    if (!isNullOrUndefined(this.selectedLI)) {\n      var currentOffset = this.list.offsetHeight;\n      var nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n      var nextOffset = this.list.scrollTop + nextBottom - currentOffset;\n      nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset;\n      var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n      boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;\n\n      if (this.activeIndex === 0) {\n        this.list.scrollTop = 0;\n      } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n        this.list.scrollTop = nextOffset;\n      }\n    }\n  };\n\n  DropDownList.prototype.scrollTop = function () {\n    if (!isNullOrUndefined(this.selectedLI)) {\n      var nextOffset = this.selectedLI.offsetTop - this.list.scrollTop;\n      nextOffset = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;\n      var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n\n      if (this.activeIndex === 0) {\n        this.list.scrollTop = 0;\n      } else if (nextOffset < 0) {\n        this.list.scrollTop = this.list.scrollTop + nextOffset;\n      } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n        this.list.scrollTop = this.selectedLI.offsetTop - (this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);\n      }\n    }\n  };\n\n  DropDownList.prototype.isEditTextBox = function () {\n    return false;\n  };\n\n  DropDownList.prototype.isFiltering = function () {\n    return this.allowFiltering;\n  };\n\n  DropDownList.prototype.isPopupButton = function () {\n    return true;\n  };\n\n  DropDownList.prototype.setScrollPosition = function (e) {\n    if (!isNullOrUndefined(e)) {\n      switch (e.action) {\n        case 'pageDown':\n        case 'down':\n        case 'end':\n          this.scrollBottom();\n          break;\n\n        default:\n          this.scrollTop();\n          break;\n      }\n    } else {\n      this.scrollBottom(true);\n    }\n  };\n\n  DropDownList.prototype.clearText = function () {\n    this.filterInput.value = this.typedString = '';\n    this.searchLists(null);\n  };\n\n  DropDownList.prototype.setEleWidth = function (width) {\n    if (!isNullOrUndefined(width)) {\n      if (typeof width === 'number') {\n        this.inputWrapper.container.style.width = formatUnit(width);\n      } else if (typeof width === 'string') {\n        this.inputWrapper.container.style.width = width.match(/px|%|em/) ? width : formatUnit(width);\n      }\n    }\n  };\n\n  DropDownList.prototype.closePopup = function (delay, e) {\n    var _this = this;\n\n    this.isTyped = false;\n\n    if (!(this.popupObj && document.body.contains(this.popupObj.element) && (this.beforePopupOpen || this.isEventCancel))) {\n      return;\n    }\n\n    this.isActive = false;\n    this.filterInputObj = null;\n    this.isDropDownClick = false;\n    this.preventAutoFill = false;\n    var scrollableParentElements = this.popupObj.getScrollableParent(this.inputWrapper.container);\n\n    for (var _i = 0, scrollableParentElements_1 = scrollableParentElements; _i < scrollableParentElements_1.length; _i++) {\n      var element = scrollableParentElements_1[_i];\n      EventHandler.remove(element, 'scroll', this.scrollHandler);\n    }\n\n    if (Browser.isDevice && this.isFilterLayout()) {\n      removeClass([document.body, this.popupObj.element], dropDownListClasses.popupFullScreen);\n    }\n\n    if (this.isFilterLayout()) {\n      if (!Browser.isDevice) {\n        this.searchKeyModule.destroy();\n\n        if (this.clearIconElement) {\n          EventHandler.remove(this.clearIconElement, 'click', this.clearText);\n        }\n      }\n\n      if (this.backIconElement) {\n        EventHandler.remove(this.backIconElement, 'click', this.clickOnBackIcon);\n        EventHandler.remove(this.clearIconElement, 'click', this.clearText);\n      }\n\n      if (!isNullOrUndefined(this.filterInput)) {\n        EventHandler.remove(this.filterInput, 'input', this.onInput);\n        EventHandler.remove(this.filterInput, 'keyup', this.onFilterUp);\n        EventHandler.remove(this.filterInput, 'keydown', this.onFilterDown);\n        EventHandler.remove(this.filterInput, 'blur', this.onBlurHandler);\n        EventHandler.remove(this.filterInput, 'paste', this.pasteHandler);\n      }\n\n      this.filterInput = null;\n    }\n\n    attributes(this.targetElement(), {\n      'aria-expanded': 'false'\n    });\n    this.inputElement.setAttribute('aria-expanded', 'false');\n    this.targetElement().removeAttribute('aria-owns');\n    this.targetElement().removeAttribute('aria-activedescendant');\n    this.inputWrapper.container.classList.remove(dropDownListClasses.iconAnimation);\n\n    if (this.isFiltering()) {\n      this.actionCompleteData.isUpdated = false;\n    }\n\n    this.beforePopupOpen = false;\n    var animModel = {\n      name: 'FadeOut',\n      duration: 100,\n      delay: delay ? delay : 0\n    };\n    var popupInstance = this.popupObj;\n    var eventArgs = {\n      popup: popupInstance,\n      cancel: false,\n      animation: animModel,\n      event: e || null\n    };\n    this.trigger('close', eventArgs, function (eventArgs) {\n      _this.isEventCancel = eventArgs.cancel;\n\n      if (!isNullOrUndefined(_this.popupObj) && !isNullOrUndefined(_this.popupObj.element.querySelector('.e-fixed-head'))) {\n        var fixedHeader = _this.popupObj.element.querySelector('.e-fixed-head');\n\n        fixedHeader.parentNode.removeChild(fixedHeader);\n        _this.fixedHeaderElement = null;\n      }\n\n      if (!eventArgs.cancel) {\n        if (_this.getModuleName() === 'autocomplete') {\n          _this.rippleFun();\n        }\n\n        if (_this.isPopupOpen) {\n          _this.popupObj.hide(new Animation(eventArgs.animation));\n        } else {\n          _this.destroyPopup();\n        }\n      }\n    });\n  };\n\n  DropDownList.prototype.destroyPopup = function () {\n    this.isPopupOpen = false;\n    this.isFilterFocus = false;\n\n    if (this.popupObj) {\n      this.popupObj.destroy();\n      detach(this.popupObj.element);\n    }\n  };\n\n  DropDownList.prototype.clickOnBackIcon = function () {\n    this.hidePopup();\n    this.focusIn();\n  };\n  /**\n   * To Initialize the control rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.render = function () {\n    if (this.element.tagName === 'INPUT') {\n      this.inputElement = this.element;\n\n      if (isNullOrUndefined(this.inputElement.getAttribute('role'))) {\n        this.inputElement.setAttribute('role', 'combobox');\n      }\n\n      if (isNullOrUndefined(this.inputElement.getAttribute('type'))) {\n        this.inputElement.setAttribute('type', 'text');\n      }\n\n      this.inputElement.setAttribute('aria-expanded', 'false');\n    } else {\n      this.inputElement = this.createElement('input', {\n        attrs: {\n          role: 'combobox',\n          type: 'text'\n        }\n      });\n\n      if (this.element.tagName !== this.getNgDirective()) {\n        this.element.style.display = 'none';\n      }\n\n      this.element.parentElement.insertBefore(this.inputElement, this.element);\n      this.preventTabIndex(this.inputElement);\n    }\n\n    var updatedCssClassValues = this.cssClass;\n\n    if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n      updatedCssClassValues = this.cssClass.replace(/\\s+/g, ' ').trim();\n    }\n\n    if (!isNullOrUndefined(closest(this.element, 'fieldset')) && closest(this.element, 'fieldset').disabled) {\n      this.enabled = false;\n    }\n\n    this.inputWrapper = Input.createInput({\n      element: this.inputElement,\n      buttons: this.isPopupButton() ? [dropDownListClasses.icon] : null,\n      floatLabelType: this.floatLabelType,\n      properties: {\n        readonly: this.getModuleName() === 'dropdownlist' ? true : this.readonly,\n        placeholder: this.placeholder,\n        cssClass: updatedCssClassValues,\n        enabled: this.enabled,\n        enableRtl: this.enableRtl,\n        showClearButton: this.showClearButton\n      }\n    }, this.createElement);\n\n    if (this.element.tagName === this.getNgDirective()) {\n      this.element.appendChild(this.inputWrapper.container);\n    } else {\n      this.inputElement.parentElement.insertBefore(this.element, this.inputElement);\n    }\n\n    this.hiddenElement = this.createElement('select', {\n      attrs: {\n        'aria-hidden': 'true',\n        'tabindex': '-1',\n        'class': dropDownListClasses.hiddenElement\n      }\n    });\n    prepend([this.hiddenElement], this.inputWrapper.container);\n    this.validationAttribute(this.element, this.hiddenElement);\n    this.setReadOnly();\n    this.setFields();\n    this.inputWrapper.container.style.width = formatUnit(this.width);\n    this.inputWrapper.container.classList.add('e-ddl');\n    Input.calculateWidth(this.inputElement, this.inputWrapper.container);\n\n    if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && this.inputWrapper.container.getElementsByClassName('e-float-text-content')[0] && this.floatLabelType !== 'Never') {\n      this.inputWrapper.container.getElementsByClassName('e-float-text-content')[0].classList.add('e-icon');\n    }\n\n    this.wireEvent();\n    this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : '0';\n    this.element.removeAttribute('tabindex');\n    var id = this.element.getAttribute('id') ? this.element.getAttribute('id') : getUniqueID('ej2_dropdownlist');\n    this.element.id = id;\n    this.hiddenElement.id = id + '_hidden';\n    this.targetElement().setAttribute('tabindex', this.tabIndex);\n\n    if (this.getModuleName() === 'autocomplete' || this.getModuleName() === 'combobox') {\n      this.inputElement.setAttribute('aria-label', this.getModuleName());\n    } else {\n      attributes(this.targetElement(), {\n        'aria-label': this.getModuleName()\n      });\n    }\n\n    attributes(this.targetElement(), this.getAriaAttributes());\n    this.updateDataAttribute(this.htmlAttributes);\n    this.setHTMLAttributes();\n\n    if (this.targetElement() === this.inputElement) {\n      this.inputElement.removeAttribute('aria-labelledby');\n    }\n\n    if (this.value !== null || this.activeIndex !== null || this.text !== null) {\n      this.initValue();\n    } else if (this.element.tagName === 'SELECT' && this.element.options[0]) {\n      var selectElement = this.element;\n      this.value = selectElement.options[selectElement.selectedIndex].value;\n      this.text = isNullOrUndefined(this.value) ? null : selectElement.options[selectElement.selectedIndex].textContent;\n      this.initValue();\n    }\n\n    this.setEnabled();\n    this.preventTabIndex(this.element);\n\n    if (!this.enabled) {\n      this.targetElement().tabIndex = -1;\n    }\n\n    this.initial = false;\n    this.element.style.opacity = '';\n\n    this.inputElement.onselect = function (e) {\n      e.stopImmediatePropagation();\n    };\n\n    this.inputElement.onchange = function (e) {\n      e.stopImmediatePropagation();\n    };\n\n    if (this.element.hasAttribute('autofocus')) {\n      this.focusIn();\n    }\n\n    if (!isNullOrUndefined(this.text)) {\n      this.inputElement.setAttribute('value', this.text);\n    }\n\n    if (this.element.hasAttribute('data-val')) {\n      this.element.setAttribute('data-val', 'false');\n    }\n\n    var floatLabelElement = this.inputWrapper.container.getElementsByClassName('e-float-text')[0];\n\n    if (!isNullOrUndefined(this.element.id) && this.element.id !== '' && !isNullOrUndefined(floatLabelElement)) {\n      floatLabelElement.id = 'label_' + this.element.id.replace(/ /g, '_');\n      attributes(this.inputElement, {\n        'aria-labelledby': floatLabelElement.id\n      });\n    }\n\n    this.renderComplete();\n  };\n\n  DropDownList.prototype.setFooterTemplate = function (popupEle) {\n    var compiledString;\n\n    if (this.footer) {\n      if (this.isReact) {\n        this.clearTemplate(['footerTemplate']);\n      } else {\n        this.footer.innerHTML = '';\n      }\n    } else {\n      this.footer = this.createElement('div');\n      addClass([this.footer], dropDownListClasses.footer);\n    }\n\n    var footercheck = this.dropdownCompiler(this.footerTemplate);\n\n    if (footercheck) {\n      compiledString = compile(select(this.footerTemplate, document).innerHTML.trim());\n    } else {\n      compiledString = compile(this.footerTemplate);\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    var footerCompTemp = compiledString({}, this, 'footerTemplate', this.footerTemplateId, this.isStringTemplate, null, this.footer);\n\n    if (footerCompTemp && footerCompTemp.length > 0) {\n      for (var i = 0; i < footerCompTemp.length; i++) {\n        this.footer.appendChild(footerCompTemp[i]);\n      }\n    }\n\n    append([this.footer], popupEle);\n  };\n\n  DropDownList.prototype.setHeaderTemplate = function (popupEle) {\n    var compiledString;\n\n    if (this.header) {\n      this.header.innerHTML = '';\n    } else {\n      this.header = this.createElement('div');\n      addClass([this.header], dropDownListClasses.header);\n    }\n\n    var headercheck = this.dropdownCompiler(this.headerTemplate);\n\n    if (headercheck) {\n      compiledString = compile(select(this.headerTemplate, document).innerHTML.trim());\n    } else {\n      compiledString = compile(this.headerTemplate);\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    var headerCompTemp = compiledString({}, this, 'headerTemplate', this.headerTemplateId, this.isStringTemplate, null, this.header);\n\n    if (headerCompTemp && headerCompTemp.length) {\n      for (var i = 0; i < headerCompTemp.length; i++) {\n        this.header.appendChild(headerCompTemp[i]);\n      }\n    }\n\n    var contentEle = popupEle.querySelector('div.e-content');\n    popupEle.insertBefore(this.header, contentEle);\n  };\n  /**\n   * Sets the enabled state to DropDownBase.\n   *\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.setEnabled = function () {\n    this.element.setAttribute('aria-disabled', this.enabled ? 'false' : 'true');\n  };\n\n  DropDownList.prototype.setOldText = function (text) {\n    this.text = text;\n  };\n\n  DropDownList.prototype.setOldValue = function (value) {\n    this.value = value;\n  };\n\n  DropDownList.prototype.refreshPopup = function () {\n    if (!isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) && (this.allowFiltering && !(Browser.isDevice && this.isFilterLayout()) || this.getModuleName() === 'autocomplete')) {\n      removeClass([this.popupObj.element], 'e-popup-close');\n      this.popupObj.refreshPosition(this.inputWrapper.container);\n      this.popupObj.resolveCollision();\n    }\n  };\n\n  DropDownList.prototype.checkData = function (newProp) {\n    if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) && this.itemTemplate && this.allowFiltering && !(this.isListSearched && newProp.dataSource instanceof DataManager)) {\n      this.list = null;\n      this.actionCompleteData = {\n        ulElement: null,\n        list: null,\n        isUpdated: false\n      };\n    }\n\n    this.isListSearched = false;\n    var isChangeValue = Object.keys(newProp).indexOf('value') !== -1 && isNullOrUndefined(newProp.value);\n    var isChangeText = Object.keys(newProp).indexOf('text') !== -1 && isNullOrUndefined(newProp.text);\n\n    if (this.getModuleName() !== 'autocomplete' && this.allowFiltering && (isChangeValue || isChangeText)) {\n      this.itemData = null;\n    }\n\n    if (this.allowFiltering && newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource))) {\n      this.actionCompleteData = {\n        ulElement: null,\n        list: null,\n        isUpdated: false\n      };\n      this.actionData = this.actionCompleteData;\n    } else if (this.allowFiltering && newProp.query && !isNullOrUndefined(Object.keys(newProp.query))) {\n      this.actionCompleteData = this.getModuleName() === 'combobox' ? {\n        ulElement: null,\n        list: null,\n        isUpdated: false\n      } : this.actionCompleteData;\n      this.actionData = this.actionCompleteData;\n    }\n  };\n\n  DropDownList.prototype.updateDataSource = function (props) {\n    if (this.inputElement.value !== '' || !isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource) || !(props.dataSource instanceof DataManager) && props.dataSource.length === 0)) {\n      this.clearAll(null, props);\n    }\n\n    if (this.fields.groupBy && props.fields && !this.isGroupChecking && this.list) {\n      EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n      EventHandler.add(this.list, 'scroll', this.setFloatingHeader, this);\n    }\n\n    if (!(!isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource) || !(props.dataSource instanceof DataManager) && props.dataSource.length === 0)) || !(props.dataSource === [])) {\n      this.typedString = '';\n      this.resetList(this.dataSource);\n    }\n\n    if (!this.isCustomFilter && !this.isFilterFocus && document.activeElement !== this.filterInput) {\n      this.checkCustomValue();\n    }\n  };\n\n  DropDownList.prototype.checkCustomValue = function () {\n    this.itemData = this.getDataByValue(this.value);\n    var dataItem = this.getItemData();\n    this.setProperties({\n      'text': dataItem.text,\n      'value': dataItem.value\n    });\n  };\n\n  DropDownList.prototype.updateInputFields = function () {\n    if (this.getModuleName() === 'dropdownlist') {\n      Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n    }\n  };\n  /**\n   * Dynamically change the value of properties.\n   *\n   * @private\n   * @param {DropDownListModel} newProp - Returns the dynamic property value of the component.\n   * @param {DropDownListModel} oldProp - Returns the previous previous value of the component.\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var _this = this;\n\n    if (this.getModuleName() === 'dropdownlist') {\n      this.checkData(newProp);\n      this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n    }\n\n    var _loop_1 = function (prop) {\n      switch (prop) {\n        case 'query':\n        case 'dataSource':\n          break;\n\n        case 'htmlAttributes':\n          this_1.setHTMLAttributes();\n          break;\n\n        case 'width':\n          this_1.setEleWidth(newProp.width);\n          Input.calculateWidth(this_1.inputElement, this_1.inputWrapper.container);\n          break;\n\n        case 'placeholder':\n          Input.setPlaceholder(newProp.placeholder, this_1.inputElement);\n          break;\n\n        case 'filterBarPlaceholder':\n          if (this_1.filterInput) {\n            Input.setPlaceholder(newProp.filterBarPlaceholder, this_1.filterInput);\n          }\n\n          break;\n\n        case 'readonly':\n          if (this_1.getModuleName() !== 'dropdownlist') {\n            Input.setReadonly(newProp.readonly, this_1.inputElement);\n          }\n\n          this_1.setReadOnly();\n          break;\n\n        case 'cssClass':\n          this_1.setCssClass(newProp.cssClass, oldProp.cssClass);\n          Input.calculateWidth(this_1.inputElement, this_1.inputWrapper.container);\n          break;\n\n        case 'enableRtl':\n          this_1.setEnableRtl();\n          break;\n\n        case 'enabled':\n          this_1.setEnable();\n          break;\n\n        case 'text':\n          if (newProp.text === null) {\n            this_1.clearAll();\n            break;\n          }\n\n          if (!this_1.list) {\n            if (this_1.dataSource instanceof DataManager) {\n              this_1.initRemoteRender = true;\n            }\n\n            this_1.renderList();\n          }\n\n          if (!this_1.initRemoteRender) {\n            var li = this_1.getElementByText(newProp.text);\n\n            if (!this_1.checkValidLi(li)) {\n              if (this_1.liCollections && this_1.liCollections.length === 100 && this_1.getModuleName() === 'autocomplete' && this_1.listData.length > 100) {\n                this_1.setSelectionData(newProp.text, oldProp.text, 'text');\n              } else if (newProp.text && this_1.dataSource instanceof DataManager) {\n                var listLength_1 = this_1.getItems().length;\n                var checkField = isNullOrUndefined(this_1.fields.text) ? this_1.fields.value : this_1.fields.text;\n                this_1.typedString = '';\n                this_1.dataSource.executeQuery(this_1.getQuery(this_1.query).where(new Predicate(checkField, 'equal', newProp.text))).then(function (e) {\n                  if (e.result.length > 0) {\n                    _this.addItem(e.result, listLength_1);\n\n                    _this.updateValues();\n                  } else {\n                    _this.setOldText(oldProp.text);\n                  }\n                });\n              } else if (this_1.getModuleName() === 'autocomplete') {\n                this_1.setInputValue(newProp, oldProp);\n              } else {\n                this_1.setOldText(oldProp.text);\n              }\n            }\n\n            this_1.updateInputFields();\n          }\n\n          break;\n\n        case 'value':\n          if (newProp.value === null) {\n            this_1.clearAll();\n            break;\n          }\n\n          this_1.notify('beforeValueChange', {\n            newProp: newProp\n          }); // gird component value type change\n\n          if (!this_1.list) {\n            if (this_1.dataSource instanceof DataManager) {\n              this_1.initRemoteRender = true;\n            }\n\n            this_1.renderList();\n          }\n\n          if (!this_1.initRemoteRender) {\n            var item = this_1.getElementByValue(newProp.value);\n\n            if (!this_1.checkValidLi(item)) {\n              if (this_1.liCollections && this_1.liCollections.length === 100 && this_1.getModuleName() === 'autocomplete' && this_1.listData.length > 100) {\n                this_1.setSelectionData(newProp.value, oldProp.value, 'value');\n              } else if (newProp.value && this_1.dataSource instanceof DataManager) {\n                var listLength_2 = this_1.getItems().length;\n                var checkField = isNullOrUndefined(this_1.fields.value) ? this_1.fields.text : this_1.fields.value;\n                this_1.typedString = '';\n                this_1.dataSource.executeQuery(this_1.getQuery(this_1.query).where(new Predicate(checkField, 'equal', newProp.value))).then(function (e) {\n                  if (e.result.length > 0) {\n                    _this.addItem(e.result, listLength_2);\n\n                    _this.updateValues();\n                  } else {\n                    _this.setOldValue(oldProp.value);\n                  }\n                });\n              } else if (this_1.getModuleName() === 'autocomplete') {\n                this_1.setInputValue(newProp, oldProp);\n              } else {\n                this_1.setOldValue(oldProp.value);\n              }\n            }\n\n            this_1.updateInputFields();\n            this_1.preventChange = this_1.isAngular && this_1.preventChange ? !this_1.preventChange : this_1.preventChange;\n          }\n\n          break;\n\n        case 'index':\n          if (newProp.index === null) {\n            this_1.clearAll();\n            break;\n          }\n\n          if (!this_1.list) {\n            if (this_1.dataSource instanceof DataManager) {\n              this_1.initRemoteRender = true;\n            }\n\n            this_1.renderList();\n          }\n\n          if (!this_1.initRemoteRender && this_1.liCollections) {\n            var element = this_1.liCollections[newProp.index];\n\n            if (!this_1.checkValidLi(element)) {\n              if (this_1.liCollections && this_1.liCollections.length === 100 && this_1.getModuleName() === 'autocomplete' && this_1.listData.length > 100) {\n                this_1.setSelectionData(newProp.index, oldProp.index, 'index');\n              } else {\n                this_1.index = oldProp.index;\n              }\n            }\n\n            this_1.updateInputFields();\n          }\n\n          break;\n\n        case 'footerTemplate':\n          if (this_1.popupObj) {\n            this_1.setFooterTemplate(this_1.popupObj.element);\n          }\n\n          break;\n\n        case 'headerTemplate':\n          if (this_1.popupObj) {\n            this_1.setHeaderTemplate(this_1.popupObj.element);\n          }\n\n          break;\n\n        case 'valueTemplate':\n          if (!isNullOrUndefined(this_1.itemData) && this_1.valueTemplate !== null) {\n            this_1.setValueTemplate();\n          }\n\n          break;\n\n        case 'allowFiltering':\n          if (this_1.allowFiltering) {\n            this_1.actionCompleteData = {\n              ulElement: this_1.ulElement,\n              list: this_1.listData,\n              isUpdated: true\n            };\n            this_1.actionData = this_1.actionCompleteData;\n            this_1.updateSelectElementData(this_1.allowFiltering);\n          }\n\n          break;\n\n        case 'floatLabelType':\n          Input.removeFloating(this_1.inputWrapper);\n          Input.addFloating(this_1.inputElement, newProp.floatLabelType, this_1.placeholder, this_1.createElement);\n\n          if (!isNullOrUndefined(this_1.inputWrapper.buttons[0]) && this_1.inputWrapper.container.getElementsByClassName('e-float-text-overflow')[0] && this_1.floatLabelType !== 'Never') {\n            this_1.inputWrapper.container.getElementsByClassName('e-float-text-overflow')[0].classList.add('e-icon');\n          }\n\n          break;\n\n        case 'showClearButton':\n          Input.setClearButton(newProp.showClearButton, this_1.inputElement, this_1.inputWrapper, null, this_1.createElement);\n          this_1.bindClearEvent();\n          break;\n\n        default:\n          {\n            // eslint-disable-next-line max-len\n            var ddlProps = this_1.getPropObject(prop, newProp, oldProp);\n\n            _super.prototype.onPropertyChanged.call(this_1, ddlProps.newProperty, ddlProps.oldProperty);\n          }\n          break;\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      _loop_1(prop);\n    }\n  };\n\n  DropDownList.prototype.checkValidLi = function (element) {\n    if (this.isValidLI(element)) {\n      this.setSelection(element, null);\n      return true;\n    }\n\n    return false;\n  };\n\n  DropDownList.prototype.setSelectionData = function (newProp, oldProp, prop) {\n    var _this = this;\n\n    var li;\n\n    this.updateListValues = function () {\n      if (prop === 'text') {\n        li = _this.getElementByText(newProp);\n\n        if (!_this.checkValidLi(li)) {\n          _this.setOldText(oldProp);\n        }\n      } else if (prop === 'value') {\n        li = _this.getElementByValue(newProp);\n\n        if (!_this.checkValidLi(li)) {\n          _this.setOldValue(oldProp);\n        }\n      } else if (prop === 'index') {\n        li = _this.liCollections[newProp];\n\n        if (!_this.checkValidLi(li)) {\n          _this.index = oldProp;\n        }\n      }\n    };\n  };\n\n  DropDownList.prototype.setReadOnly = function () {\n    if (this.readonly) {\n      addClass([this.inputWrapper.container], ['e-readonly']);\n    } else {\n      removeClass([this.inputWrapper.container], ['e-readonly']);\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  DropDownList.prototype.setInputValue = function (newProp, oldProp) {};\n\n  DropDownList.prototype.setCssClass = function (newClass, oldClass) {\n    if (!isNullOrUndefined(oldClass)) {\n      oldClass = oldClass.replace(/\\s+/g, ' ').trim();\n    }\n\n    if (!isNullOrUndefined(newClass)) {\n      newClass = newClass.replace(/\\s+/g, ' ').trim();\n    }\n\n    Input.setCssClass(newClass, [this.inputWrapper.container], oldClass);\n\n    if (this.popupObj) {\n      Input.setCssClass(newClass, [this.popupObj.element], oldClass);\n    }\n  };\n  /**\n   * Return the module name of this component.\n   *\n   * @private\n   * @returns {string} Return the module name of this component.\n   */\n\n\n  DropDownList.prototype.getModuleName = function () {\n    return 'dropdownlist';\n  };\n  /* eslint-disable valid-jsdoc, jsdoc/require-param */\n\n  /**\n   * Opens the popup that displays the list of items.\n   *\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.showPopup = function (e) {\n    /* eslint-enable valid-jsdoc, jsdoc/require-param */\n    if (!this.enabled) {\n      return;\n    }\n\n    if (this.isFiltering() && this.dataSource instanceof DataManager && this.actionData.list !== this.actionCompleteData.list && this.actionData.list && this.actionData.ulElement) {\n      this.actionCompleteData = this.actionData;\n      this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);\n    }\n\n    if (this.beforePopupOpen) {\n      this.refreshPopup();\n      return;\n    }\n\n    this.beforePopupOpen = true;\n\n    if (this.isFiltering() && !this.isActive && this.actionCompleteData.list && this.actionCompleteData.list[0]) {\n      this.isActive = true;\n      this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);\n    } else if (isNullOrUndefined(this.list) || !isUndefined(this.list) && (this.list.classList.contains(dropDownBaseClasses.noData) || this.list.querySelectorAll('.' + dropDownBaseClasses.li).length <= 0)) {\n      this.renderList(e);\n    }\n\n    this.invokeRenderPopup(e);\n  };\n\n  DropDownList.prototype.invokeRenderPopup = function (e) {\n    if (Browser.isDevice && this.isFilterLayout()) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      var proxy_2 = this;\n\n      window.onpopstate = function () {\n        proxy_2.hidePopup();\n      };\n\n      history.pushState({}, '');\n    }\n\n    if (!isNullOrUndefined(this.list) && (!isNullOrUndefined(this.list.children[0]) || this.list.classList.contains(dropDownBaseClasses.noData))) {\n      this.renderPopup(e);\n    }\n  };\n\n  DropDownList.prototype.renderHightSearch = function () {// update high light search\n  };\n  /* eslint-disable valid-jsdoc, jsdoc/require-param */\n\n  /**\n   * Hides the popup if it is in an open state.\n   *\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.hidePopup = function (e) {\n    /* eslint-enable valid-jsdoc, jsdoc/require-param */\n    if (this.isEscapeKey && this.getModuleName() === 'dropdownlist') {\n      if (!isNullOrUndefined(this.inputElement)) {\n        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n      }\n\n      this.isEscapeKey = false;\n\n      if (!isNullOrUndefined(this.index)) {\n        var element = this.findListElement(this.ulElement, 'li', 'data-value', this.value);\n        this.selectedLI = this.liCollections[this.index] || element;\n\n        if (this.selectedLI) {\n          this.updateSelectedItem(this.selectedLI, null, true);\n\n          if (this.valueTemplate && this.itemData !== null) {\n            this.setValueTemplate();\n          }\n        }\n      } else {\n        this.resetSelection();\n      }\n    }\n\n    this.closePopup(0, e);\n    var dataItem = this.getItemData();\n    var isSelectVal = !isNullOrUndefined(this.selectedLI);\n\n    if (this.inputElement && this.inputElement.value.trim() === '' && !this.isInteracted && (this.isSelectCustom || isSelectVal && this.inputElement.value !== dataItem.text)) {\n      this.isSelectCustom = false;\n      this.clearAll(e);\n    }\n  };\n  /* eslint-disable valid-jsdoc, jsdoc/require-param */\n\n  /**\n   * Sets the focus on the component for interaction.\n   *\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.focusIn = function (e) {\n    if (!this.enabled) {\n      return;\n    }\n\n    if (this.targetElement().classList.contains(dropDownListClasses.disable)) {\n      return;\n    }\n\n    var isFocused = false;\n\n    if (this.preventFocus && Browser.isDevice) {\n      this.inputWrapper.container.tabIndex = 1;\n      this.inputWrapper.container.focus();\n      this.preventFocus = false;\n      isFocused = true;\n    }\n\n    if (!isFocused) {\n      this.targetElement().focus();\n    }\n\n    addClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);\n    this.onFocus(e);\n    Input.calculateWidth(this.inputElement, this.inputWrapper.container);\n  };\n  /**\n   * Moves the focus from the component if the component is already focused.\n   *\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.focusOut = function (e) {\n    /* eslint-enable valid-jsdoc, jsdoc/require-param */\n    if (!this.enabled) {\n      return;\n    }\n\n    this.isTyped = true;\n    this.hidePopup(e);\n\n    if (this.targetElement()) {\n      this.targetElement().blur();\n    }\n\n    removeClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);\n    Input.calculateWidth(this.inputElement, this.inputWrapper.container);\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n   *\n   * @method destroy\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.destroy = function () {\n    this.isActive = false;\n    resetIncrementalSearchValues(this.element.id); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    if (this.isReact) {\n      this.clearTemplate();\n    }\n\n    this.hidePopup();\n    this.unWireEvent();\n\n    if (this.list) {\n      this.unWireListEvents();\n    }\n\n    if (this.element && !this.element.classList.contains('e-' + this.getModuleName())) {\n      return;\n    }\n\n    if (this.inputElement) {\n      var attrArray = ['readonly', 'aria-disabled', 'placeholder', 'aria-labelledby', 'aria-expanded', 'autocomplete', 'aria-readonly', 'autocapitalize', 'spellcheck', 'aria-autocomplete', 'aria-live', 'aria-describedby', 'aria-label'];\n\n      for (var i = 0; i < attrArray.length; i++) {\n        this.inputElement.removeAttribute(attrArray[i]);\n      }\n\n      this.inputElement.setAttribute('tabindex', this.tabIndex);\n      this.inputElement.classList.remove('e-input');\n      Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n    }\n\n    this.element.style.display = 'block';\n\n    if (this.inputWrapper.container.parentElement.tagName === this.getNgDirective()) {\n      detach(this.inputWrapper.container);\n    } else {\n      this.inputWrapper.container.parentElement.insertBefore(this.element, this.inputWrapper.container);\n      detach(this.inputWrapper.container);\n    }\n\n    this.hiddenElement = null;\n    this.inputWrapper = null;\n    this.keyboardModule = null;\n    this.ulElement = null;\n    this.list = null;\n    this.popupObj = null;\n    this.rippleFun = null;\n    this.selectedLI = null;\n    this.liCollections = null;\n    this.item = null;\n    this.inputWrapper = null;\n    this.footer = null;\n    this.header = null;\n    this.previousSelectedLI = null;\n    this.valueTempElement = null;\n\n    _super.prototype.destroy.call(this);\n  };\n  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Gets all the list items bound on this component.\n   *\n   * @returns {Element[]}\n   */\n\n\n  DropDownList.prototype.getItems = function () {\n    if (!this.list) {\n      if (this.dataSource instanceof DataManager) {\n        this.initRemoteRender = true;\n      }\n\n      this.renderList();\n    }\n\n    return this.ulElement ? _super.prototype.getItems.call(this) : [];\n  };\n  /**\n   * Gets the data Object that matches the given value.\n   *\n   * @param { string | number } value - Specifies the value of the list item.\n   * @returns {Object}\n   */\n\n\n  DropDownList.prototype.getDataByValue = function (value) {\n    return _super.prototype.getDataByValue.call(this, value);\n  };\n  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Allows you to clear the selected values from the component.\n   *\n   * @returns {void}\n   */\n\n\n  DropDownList.prototype.clear = function () {\n    this.value = null;\n  };\n\n  __decorate$1([Property(null)], DropDownList.prototype, \"cssClass\", void 0);\n\n  __decorate$1([Property('100%')], DropDownList.prototype, \"width\", void 0);\n\n  __decorate$1([Property(true)], DropDownList.prototype, \"enabled\", void 0);\n\n  __decorate$1([Property(false)], DropDownList.prototype, \"enablePersistence\", void 0);\n\n  __decorate$1([Property('300px')], DropDownList.prototype, \"popupHeight\", void 0);\n\n  __decorate$1([Property('100%')], DropDownList.prototype, \"popupWidth\", void 0);\n\n  __decorate$1([Property(null)], DropDownList.prototype, \"placeholder\", void 0);\n\n  __decorate$1([Property(null)], DropDownList.prototype, \"filterBarPlaceholder\", void 0);\n\n  __decorate$1([Property({})], DropDownList.prototype, \"htmlAttributes\", void 0);\n\n  __decorate$1([Property(null)], DropDownList.prototype, \"query\", void 0);\n\n  __decorate$1([Property(null)], DropDownList.prototype, \"valueTemplate\", void 0);\n\n  __decorate$1([Property(null)], DropDownList.prototype, \"headerTemplate\", void 0);\n\n  __decorate$1([Property(null)], DropDownList.prototype, \"footerTemplate\", void 0);\n\n  __decorate$1([Property(false)], DropDownList.prototype, \"allowFiltering\", void 0);\n\n  __decorate$1([Property(false)], DropDownList.prototype, \"readonly\", void 0);\n\n  __decorate$1([Property(null)], DropDownList.prototype, \"text\", void 0);\n\n  __decorate$1([Property(null)], DropDownList.prototype, \"value\", void 0);\n\n  __decorate$1([Property(null)], DropDownList.prototype, \"index\", void 0);\n\n  __decorate$1([Property('Never')], DropDownList.prototype, \"floatLabelType\", void 0);\n\n  __decorate$1([Property(false)], DropDownList.prototype, \"showClearButton\", void 0);\n\n  __decorate$1([Event()], DropDownList.prototype, \"filtering\", void 0);\n\n  __decorate$1([Event()], DropDownList.prototype, \"change\", void 0);\n\n  __decorate$1([Event()], DropDownList.prototype, \"beforeOpen\", void 0);\n\n  __decorate$1([Event()], DropDownList.prototype, \"open\", void 0);\n\n  __decorate$1([Event()], DropDownList.prototype, \"close\", void 0);\n\n  __decorate$1([Event()], DropDownList.prototype, \"blur\", void 0);\n\n  __decorate$1([Event()], DropDownList.prototype, \"focus\", void 0);\n\n  DropDownList = __decorate$1([NotifyPropertyChanges], DropDownList);\n  return DropDownList;\n}(DropDownBase);\n/**\n * export all modules from current location\n */\n\n\nvar __extends$2 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar RTL = 'e-rtl';\nvar DROPDOWNTREE = 'e-ddt';\nvar HIDDENELEMENT = 'e-ddt-hidden';\nvar DROPDOWNICON = 'e-input-group-icon e-ddt-icon e-icons';\nvar SHOW_CHIP = 'e-show-chip';\nvar SHOW_CLEAR = 'e-show-clear';\nvar SHOW_DD_ICON = 'e-show-dd-icon';\nvar CHIP_INPUT = 'e-chip-input';\nvar INPUTFOCUS = 'e-input-focus';\nvar INPUTGROUP = 'e-input-group';\nvar ICONANIMATION = 'e-icon-anim';\nvar CLOSEICON_CLASS = 'e-clear-icon e-icons';\nvar CHIP_WRAPPER = 'e-chips-wrapper';\nvar CHIP_COLLECTION = 'e-chips-collection';\nvar CHIP = 'e-chips';\nvar CHIP_CONTENT = 'e-chipcontent';\nvar CHIP_CLOSE = 'e-chips-close';\nvar HIDEICON = 'e-icon-hide';\nvar DDTHIDEICON = 'e-ddt-icon-hide';\nvar POPUP_CLASS = 'e-ddt e-popup';\nvar PARENTITEM = 'e-list-parent';\nvar CONTENT = 'e-popup-content';\nvar DROPDOWN = 'e-dropdown';\nvar DISABLED = 'e-disabled';\nvar ICONS = 'e-icons';\nvar CHECKALLPARENT = 'e-selectall-parent';\nvar CHECKALLHIDE = 'e-hide-selectall';\nvar BIGGER = 'e-bigger';\nvar SMALL = 'e-small';\nvar ALLTEXT = 'e-all-text';\nvar CHECKBOXFRAME = 'e-frame';\nvar CHECK = 'e-check';\nvar CHECKBOXWRAP = 'e-checkbox-wrapper';\nvar FILTERWRAP = 'e-filter-wrap';\nvar DDTICON = 'e-ddt-icon';\nvar FOOTER = 'e-ddt-footer';\nvar HEADER = 'e-ddt-header';\nvar NODATACONTAINER = 'e-ddt-nodata';\nvar NODATA = 'e-no-data';\nvar HEADERTEMPLATE = 'HeaderTemplate';\nvar FOOTERTEMPLATE = 'FooterTemplate';\nvar NORECORDSTEMPLATE = 'NoRecordsTemplate';\nvar ACTIONFAILURETEMPLATE = 'ActionFailureTemplate';\nvar CUSTOMTEMPLATE = 'CustomTemplate';\nvar REMAIN_WRAPPER = 'e-remain';\nvar OVERFLOW_VIEW = 'e-overflow';\nvar SHOW_TEXT = 'e-show-text';\nvar TOTAL_COUNT_WRAPPER = 'e-total-count';\nvar REMAIN_COUNT = 'e-wrap-count';\n\nvar Fields =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$2(Fields, _super);\n\n  function Fields() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$2([Property('child')], Fields.prototype, \"child\", void 0);\n\n  __decorate$2([Property([])], Fields.prototype, \"dataSource\", void 0);\n\n  __decorate$2([Property('expanded')], Fields.prototype, \"expanded\", void 0);\n\n  __decorate$2([Property('hasChildren')], Fields.prototype, \"hasChildren\", void 0);\n\n  __decorate$2([Property('htmlAttributes')], Fields.prototype, \"htmlAttributes\", void 0);\n\n  __decorate$2([Property('iconCss')], Fields.prototype, \"iconCss\", void 0);\n\n  __decorate$2([Property('imageUrl')], Fields.prototype, \"imageUrl\", void 0);\n\n  __decorate$2([Property('parentValue')], Fields.prototype, \"parentValue\", void 0);\n\n  __decorate$2([Property(null)], Fields.prototype, \"query\", void 0);\n\n  __decorate$2([Property('selectable')], Fields.prototype, \"selectable\", void 0);\n\n  __decorate$2([Property('selected')], Fields.prototype, \"selected\", void 0);\n\n  __decorate$2([Property(null)], Fields.prototype, \"tableName\", void 0);\n\n  __decorate$2([Property('text')], Fields.prototype, \"text\", void 0);\n\n  __decorate$2([Property('tooltip')], Fields.prototype, \"tooltip\", void 0);\n\n  __decorate$2([Property('value')], Fields.prototype, \"value\", void 0);\n\n  return Fields;\n}(ChildProperty);\n\nvar TreeSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$2(TreeSettings, _super);\n\n  function TreeSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$2([Property(false)], TreeSettings.prototype, \"autoCheck\", void 0);\n\n  __decorate$2([Property('Auto')], TreeSettings.prototype, \"expandOn\", void 0);\n\n  __decorate$2([Property(false)], TreeSettings.prototype, \"loadOnDemand\", void 0);\n\n  return TreeSettings;\n}(ChildProperty);\n/**\n * The Dropdown Tree control allows you to select single or multiple values from hierarchical data in a tree-like structure.\n * It has several out-of-the-box features, such as data binding, check boxes, templates, filter,\n * UI customization, accessibility, and preselected values.\n * ```html\n *  <input type=\"text\" id=\"tree\"></input>\n * ```\n * ```typescript\n *  let ddtObj: DropDownTree = new DropDownTree();\n *  ddtObj.appendTo(\"#tree\");\n * ```\n */\n\n\nvar DropDownTree =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$2(DropDownTree, _super);\n\n  function DropDownTree(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.filterTimer = null;\n    _this.isFilteredData = false;\n    _this.isFilterRestore = false; // eslint-disable-next-line\n\n    _this.selectedData = [];\n    _this.filterDelayTime = 300;\n    _this.isClicked = false; // Specifies if the checkAll method has been called\n\n    _this.isCheckAllCalled = false;\n    _this.isFromFilterChange = false;\n    return _this;\n  }\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string}\n   * @hidden\n   */\n\n\n  DropDownTree.prototype.getPersistData = function () {\n    var keyEntity = ['value'];\n    return this.addOnPersist(keyEntity);\n  };\n\n  DropDownTree.prototype.getLocaleName = function () {\n    return 'drop-down-tree';\n  };\n  /**\n   * Initialize the event handler.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  DropDownTree.prototype.preRender = function () {\n    this.inputFocus = false;\n    this.isPopupOpen = false;\n    this.isFirstRender = true;\n    this.isInitialized = false;\n    this.currentText = null;\n    this.currentValue = null;\n    this.oldValue = null;\n    this.removeValue = false;\n    this.selectedText = [];\n    this.treeItems = [];\n    this.dataValue = null;\n    this.isNodeSelected = false;\n    this.isDynamicChange = false;\n    this.clearIconWidth = 0;\n    this.headerTemplateId = \"\" + this.element.id + HEADERTEMPLATE;\n    this.footerTemplateId = \"\" + this.element.id + FOOTERTEMPLATE;\n    this.actionFailureTemplateId = \"\" + this.element.id + ACTIONFAILURETEMPLATE;\n    this.noRecordsTemplateId = \"\" + this.element.id + NORECORDSTEMPLATE;\n    this.customTemplateId = \"\" + this.element.id + CUSTOMTEMPLATE;\n    this.keyConfigs = {\n      escape: 'escape',\n      altUp: 'alt+uparrow',\n      altDown: 'alt+downarrow',\n      tab: 'tab',\n      shiftTab: 'shift+tab',\n      end: 'end',\n      enter: 'enter',\n      home: 'home',\n      moveDown: 'downarrow',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      ctrlDown: 'ctrl+downarrow',\n      ctrlUp: 'ctrl+uparrow',\n      ctrlEnter: 'ctrl+enter',\n      ctrlHome: 'ctrl+home',\n      ctrlEnd: 'ctrl+end',\n      shiftDown: 'shift+downarrow',\n      shiftUp: 'shift+uparrow',\n      shiftEnter: 'shift+enter',\n      shiftHome: 'shift+home',\n      shiftEnd: 'shift+end',\n      csDown: 'ctrl+shift+downarrow',\n      csUp: 'ctrl+shift+uparrow',\n      csEnter: 'ctrl+shift+enter',\n      csHome: 'ctrl+shift+home',\n      csEnd: 'ctrl+shift+end',\n      space: 'space',\n      ctrlA: 'ctrl+A'\n    };\n  };\n  /**\n   * To Initialize the control rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  DropDownTree.prototype.render = function () {\n    var isTree = select('#' + this.element.id + '_tree', document);\n\n    if (isTree) {\n      var popupDiv = select('#' + this.element.id + '_popup', document);\n      detach(popupDiv ? popupDiv : isTree.parentElement);\n    }\n\n    this.ensureAutoCheck();\n\n    if (this.element.tagName === 'INPUT') {\n      this.inputEle = this.element;\n\n      if (isNullOrUndefined(this.inputEle.getAttribute('role'))) {\n        this.inputEle.setAttribute('role', 'textbox');\n      }\n\n      if (isNullOrUndefined(this.inputEle.getAttribute('type'))) {\n        this.inputEle.setAttribute('type', 'text');\n      }\n    } else {\n      this.inputEle = this.createElement('input', {\n        attrs: {\n          role: 'textbox',\n          type: 'text'\n        }\n      });\n      this.element.parentElement.insertBefore(this.inputEle, this.element);\n    }\n\n    this.inputObj = Input.createInput({\n      element: this.inputEle,\n      floatLabelType: this.floatLabelType,\n      buttons: this.showDropDownIcon ? [DROPDOWNICON] : null,\n      properties: {\n        readonly: true,\n        placeholder: this.placeholder,\n        enabled: this.enabled,\n        cssClass: this.cssClass,\n        enableRtl: this.enableRtl\n      }\n    }, this.createElement);\n    this.inputWrapper = this.inputObj.container;\n\n    if (!this.inputWrapper.classList.contains(INPUTGROUP)) {\n      this.inputWrapper.classList.add(INPUTGROUP);\n    }\n\n    if (this.showDropDownIcon) {\n      this.inputWrapper.classList.add(SHOW_DD_ICON);\n    }\n\n    if (this.element.tagName === this.getDirective()) {\n      this.element.appendChild(this.inputWrapper);\n    }\n\n    this.createHiddenElement();\n    this.createClearIcon();\n    this.inputWrapper.classList.add(DROPDOWNTREE);\n    this.setElementWidth(this.width);\n    this.updateDataAttribute();\n    this.setHTMLAttributes();\n    this.setAttributes();\n    this.popupDiv = this.createElement('div', {\n      className: CONTENT\n    });\n    this.popupDiv.classList.add(DROPDOWN);\n    this.tree = this.createElement('div', {\n      id: this.element.id + '_tree'\n    });\n    this.popupDiv.appendChild(this.tree);\n    document.body.appendChild(this.popupDiv);\n    this.wireTreeEvents();\n    addClass([this.popupDiv], DDTHIDEICON);\n    this.renderTree();\n    this.isRemoteData = this.fields.dataSource instanceof DataManager;\n\n    if (this.allowMultiSelection || this.showCheckBox) {\n      if (this.mode !== 'Delimiter') {\n        this.createChip();\n      }\n\n      if (!this.wrapText && this.mode !== 'Custom') {\n        this.overFlowWrapper = this.createElement('span', {\n          className: OVERFLOW_VIEW + ' ' + HIDEICON\n        });\n        this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);\n\n        if (this.mode !== 'Box') {\n          addClass([this.overFlowWrapper], SHOW_TEXT);\n        }\n      }\n    }\n\n    if (!this.isRemoteData) {\n      this.setTreeValue();\n      this.setTreeText();\n      this.updateHiddenValue();\n      this.setSelectedValue();\n\n      if (!this.wrapText) {\n        this.updateView();\n      }\n    }\n\n    this.wireEvents();\n    var firstUl = select('.' + PARENTITEM, this.treeObj.element);\n\n    if (firstUl && firstUl.getAttribute('aria-multiselectable')) {\n      firstUl.removeAttribute('aria-multiselectable');\n    }\n\n    this.oldValue = this.value;\n    this.isInitialized = true;\n    this.hasTemplate = this.itemTemplate || this.headerTemplate || this.footerTemplate || this.actionFailureTemplate || this.noRecordsTemplate || this.customTemplate;\n    this.renderComplete();\n  };\n\n  DropDownTree.prototype.ensureAutoCheck = function () {\n    if (this.allowFiltering && this.treeSettings.autoCheck) {\n      this.setProperties({\n        treeSettings: {\n          autoCheck: false\n        }\n      }, true);\n    }\n  };\n\n  DropDownTree.prototype.hideCheckAll = function (flag) {\n    var checkAllEle = !isNullOrUndefined(this.popupEle) ? this.popupEle.querySelector('.' + CHECKALLPARENT) : null;\n\n    if (!isNullOrUndefined(checkAllEle)) {\n      if (flag && !checkAllEle.classList.contains(CHECKALLHIDE)) {\n        addClass([checkAllEle], CHECKALLHIDE);\n      } else if (!flag && checkAllEle.classList.contains(CHECKALLHIDE)) {\n        removeClass([checkAllEle], CHECKALLHIDE);\n      }\n    }\n  };\n\n  DropDownTree.prototype.renderFilter = function () {\n    this.filterContainer = this.createElement('div', {\n      id: this.element.id + '_filter_wrap',\n      className: FILTERWRAP\n    });\n    var filterInput = this.createElement('input', {\n      id: this.element.id + '_filter',\n      attrs: {\n        autocomplete: 'off',\n        'aria-label': this.filterBarPlaceholder\n      }\n    });\n    this.filterContainer.appendChild(filterInput);\n    prepend([this.filterContainer], this.popupEle);\n    this.filterObj = new TextBox({\n      value: '',\n      showClearButton: true,\n      placeholder: this.filterBarPlaceholder,\n      input: this.filterChangeHandler.bind(this)\n    });\n    this.filterObj.appendTo('#' + this.element.id + '_filter');\n  };\n\n  DropDownTree.prototype.filterChangeHandler = function (args) {\n    var _this = this;\n\n    if (!isNullOrUndefined(args.value)) {\n      window.clearTimeout(this.filterTimer);\n      this.filterTimer = window.setTimeout(function () {\n        _this.filterHandler(args.value, args.event);\n      }, this.filterDelayTime);\n    }\n  };\n\n  DropDownTree.prototype.filterHandler = function (value, event) {\n    var _this = this;\n\n    this.isFromFilterChange = true;\n\n    if (!this.isFilteredData) {\n      this.treeData = this.treeObj.getTreeData();\n    }\n\n    var filterFields = this.cloneFields(this.fields);\n    var args = {\n      cancel: false,\n      preventDefaultAction: false,\n      event: event,\n      text: value,\n      fields: filterFields\n    };\n    this.trigger('filtering', args, function (args) {\n      if (!args.cancel) {\n        var flag = false;\n        var fields = void 0;\n        _this.isFilteredData = true;\n\n        if (value === '') {\n          _this.isFilteredData = false;\n          _this.isFilterRestore = true;\n          fields = _this.cloneFields(_this.fields);\n        } else if (args.preventDefaultAction) {\n          fields = args.fields;\n        } else {\n          if (_this.treeDataType === 1) {\n            fields = _this.selfReferencefilter(value, args.fields);\n          } else {\n            if (_this.fields.dataSource instanceof DataManager) {\n              flag = true;\n            } else {\n              fields = _this.nestedFilter(value, args.fields);\n            }\n          }\n        }\n\n        _this.hideCheckAll(_this.isFilteredData);\n\n        if (flag) {\n          return;\n        }\n\n        _this.treeObj.fields = _this.getTreeFields(fields);\n\n        _this.treeObj.dataBind();\n      }\n    });\n  };\n\n  DropDownTree.prototype.nestedFilter = function (value, filteredFields) {\n    // eslint-disable-next-line\n    var matchedDataSource = [];\n\n    for (var i = 0; i < this.treeData.length; i++) {\n      // eslint-disable-next-line\n      var filteredChild = this.nestedChildFilter(value, this.treeData[i]);\n\n      if (!isNullOrUndefined(filteredChild)) {\n        matchedDataSource.push(filteredChild);\n      }\n    }\n\n    filteredFields.dataSource = matchedDataSource;\n    return filteredFields;\n  }; // eslint-disable-next-line\n\n\n  DropDownTree.prototype.nestedChildFilter = function (value, node) {\n    // eslint-disable-next-line\n    var children = node[this.fields.child];\n\n    if (isNullOrUndefined(children)) {\n      return this.isMatchedNode(value, node) ? node : null;\n    } else {\n      // eslint-disable-next-line\n      var matchedChildren = [];\n\n      for (var i = 0; i < children.length; i++) {\n        // eslint-disable-next-line\n        var filteredChild = this.nestedChildFilter(value, children[i]);\n\n        if (!isNullOrUndefined(filteredChild)) {\n          matchedChildren.push(filteredChild);\n        }\n      }\n\n      var filteredItems = Object.assign({}, node);\n\n      if (matchedChildren.length !== 0) {\n        filteredItems[this.fields.child] = matchedChildren;\n        return filteredItems;\n      } else {\n        filteredItems[this.fields.child] = null;\n        return this.isMatchedNode(value, filteredItems) ? filteredItems : null;\n      }\n    }\n  };\n\n  DropDownTree.prototype.selfReferencefilter = function (value, filteredFields) {\n    // eslint-disable-next-line\n    var matchedData = []; // eslint-disable-next-line\n\n    var matchedDataSource = [];\n\n    for (var i = 0; i < this.treeData.length; i++) {\n      if (this.isMatchedNode(value, this.treeData[i])) {\n        matchedData.push(this.treeData[i]);\n      }\n    }\n\n    for (var i = 0; i < matchedData.length; i++) {\n      if (matchedDataSource.indexOf(matchedData[i]) === -1) {\n        matchedDataSource.push(matchedData[i]); // eslint-disable-next-line\n\n        var parentId = matchedData[i][this.fields.parentValue];\n\n        while (!isNullOrUndefined(parentId)) {\n          // eslint-disable-next-line\n          var parent_1 = null;\n\n          for (var j = 0; j < this.treeData.length; j++) {\n            // eslint-disable-next-line\n            var value_1 = this.treeData[j][this.fields.value];\n\n            if (!isNullOrUndefined(value_1) && value_1 === parentId) {\n              parent_1 = this.treeData[j];\n              break;\n            }\n          }\n\n          if (!isNullOrUndefined(parent_1) && matchedDataSource.indexOf(parent_1) === -1) {\n            matchedDataSource.push(parent_1);\n            parentId = parent_1[this.fields.parentValue];\n          } else {\n            break;\n          }\n        }\n      }\n    }\n\n    filteredFields.dataSource = matchedDataSource;\n    return filteredFields;\n  }; // eslint-disable-next-line\n\n\n  DropDownTree.prototype.isMatchedNode = function (value, node) {\n    var checkValue = node[this.fields.text];\n\n    if (this.ignoreCase) {\n      checkValue = checkValue.toLowerCase();\n      value = value.toLowerCase();\n    }\n\n    if (this.ignoreAccent) {\n      checkValue = DataUtil.ignoreDiacritics(checkValue);\n      value = DataUtil.ignoreDiacritics(value);\n    }\n\n    if (this.filterType === 'StartsWith') {\n      return checkValue.slice(0, value.length) === value;\n    } else if (this.filterType === 'EndsWith') {\n      return checkValue.slice(-value.length) === value;\n    } else {\n      return checkValue.indexOf(value) !== -1;\n    }\n  };\n  /* To wire events for the dropdown tree */\n\n\n  DropDownTree.prototype.wireEvents = function () {\n    EventHandler.add(this.inputWrapper, 'mouseup', this.dropDownClick, this);\n    EventHandler.add(this.inputWrapper, 'focus', this.focusIn, this);\n    EventHandler.add(this.inputWrapper, 'blur', this.focusOut, this);\n    EventHandler.add(this.inputWrapper, 'mousemove', this.mouseIn, this);\n    EventHandler.add(this.inputWrapper, 'mouseout', this.onMouseLeave, this);\n    EventHandler.add(this.overAllClear, 'mousedown', this.clearAll, this);\n    EventHandler.add(window, 'resize', this.windowResize, this);\n    var formElement = closest(this.inputWrapper, 'form');\n\n    if (formElement) {\n      EventHandler.add(formElement, 'reset', this.resetValueHandler, this);\n    }\n\n    this.keyboardModule = new KeyboardEvents(this.inputWrapper, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n\n  DropDownTree.prototype.wireTreeEvents = function () {\n    this.keyboardModule = new KeyboardEvents(this.tree, {\n      keyAction: this.treeAction.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n\n  DropDownTree.prototype.wireCheckAllWrapperEvents = function () {\n    this.keyboardModule = new KeyboardEvents(this.checkAllParent, {\n      keyAction: this.checkAllAction.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n  /* To unwire events for the dropdown tree */\n\n\n  DropDownTree.prototype.unWireEvents = function () {\n    EventHandler.remove(this.inputWrapper, 'mouseup', this.dropDownClick);\n    EventHandler.remove(this.inputWrapper, 'focus', this.focusIn);\n    EventHandler.remove(this.inputWrapper, 'blur', this.focusOut);\n    EventHandler.remove(this.inputWrapper, 'mousemove', this.mouseIn);\n    EventHandler.remove(this.inputWrapper, 'mouseout', this.onMouseLeave);\n    EventHandler.remove(this.overAllClear, 'mousedown', this.clearAll);\n    EventHandler.remove(window, 'resize', this.windowResize);\n    var formElement = closest(this.inputWrapper, 'form');\n\n    if (formElement) {\n      EventHandler.remove(formElement, 'reset', this.resetValueHandler);\n    }\n  };\n  /* Trigger when the dropdown is clicked */\n\n\n  DropDownTree.prototype.dropDownClick = function (e) {\n    if (!this.enabled || this.readonly) {\n      return;\n    }\n\n    if (this.isClearButtonClick) {\n      this.isClearButtonClick = false;\n      return;\n    }\n\n    if (this.isPopupOpen) {\n      this.hidePopup();\n    } else {\n      this.focusIn(e);\n      this.renderPopup();\n    }\n\n    this.showOverAllClear();\n  };\n\n  DropDownTree.prototype.mouseIn = function () {\n    if (this.enabled || !this.readonly) {\n      this.showOverAllClear();\n    }\n  };\n\n  DropDownTree.prototype.onMouseLeave = function () {\n    if (!this.inputFocus) {\n      addClass([this.overAllClear], HIDEICON);\n      removeClass([this.inputWrapper], SHOW_CLEAR);\n    }\n  };\n\n  DropDownTree.prototype.getDirective = function () {\n    return 'EJS-DROPDOWNTREE';\n  };\n\n  DropDownTree.prototype.focusOut = function (e) {\n    if (!this.enabled || this.readonly || !this.inputFocus) {\n      return;\n    }\n\n    if ((Browser.isIE || Browser.info.name === 'edge') && e.target === this.inputWrapper) {\n      return;\n    }\n\n    var target = e.relatedTarget;\n\n    if (target !== this.inputEle && isNullOrUndefined(target) && (e.target !== this.inputWrapper || !this.isPopupOpen)) {\n      this.onFocusOut(e);\n    }\n  };\n\n  DropDownTree.prototype.onFocusOut = function (event) {\n    this.inputFocus = false;\n\n    if (this.isPopupOpen) {\n      this.hidePopup();\n    }\n\n    if (this.isClearButtonClick) {\n      this.isClearButtonClick = false;\n    }\n\n    if (this.showClearButton) {\n      this.clearIconWidth = select('.e-clear-icon', this.inputWrapper).offsetWidth;\n      addClass([this.overAllClear], HIDEICON);\n      removeClass([this.inputWrapper], SHOW_CLEAR);\n    }\n\n    removeClass([this.inputWrapper], [INPUTFOCUS]);\n\n    if (this.allowMultiSelection || this.showCheckBox) {\n      var isValue = this.value ? this.value.length ? true : false : false;\n\n      if (this.mode !== 'Delimiter' && this.mode !== 'Custom') {\n        if (this.chipWrapper && this.mode === 'Default') {\n          addClass([this.chipWrapper], HIDEICON);\n          removeClass([this.inputWrapper], SHOW_CHIP);\n          removeClass([this.inputEle], CHIP_INPUT);\n        }\n      }\n\n      if (!this.wrapText && isValue) {\n        this.updateView();\n      }\n    }\n\n    if (this.changeOnBlur) {\n      this.triggerChangeEvent(event);\n    }\n\n    this.removeValue = false;\n    this.oldValue = this.value;\n    this.trigger('blur');\n  };\n\n  DropDownTree.prototype.updateView = function () {\n    if (!this.showCheckBox && !this.allowMultiSelection || this.mode === 'Custom' || this.inputFocus) {\n      return;\n    }\n\n    if (this.mode !== 'Box') {\n      addClass([this.inputWrapper, this.overFlowWrapper], SHOW_TEXT);\n    } else {\n      addClass([this.inputWrapper], SHOW_CHIP);\n    }\n\n    if (this.value && this.value.length !== 0) {\n      if (this.inputWrapper.contains(this.chipWrapper)) {\n        addClass([this.chipWrapper], HIDEICON);\n      }\n\n      addClass([this.inputEle], CHIP_INPUT);\n      this.updateOverFlowView();\n      this.ensurePlaceHolder();\n    }\n  };\n\n  DropDownTree.prototype.triggerChangeEvent = function (event) {\n    var isEqual = this.ddtCompareValues(this.oldValue, this.value);\n\n    if ((!isEqual || this.isChipDelete) && !this.removeValue) {\n      var eventArgs = {\n        e: event,\n        oldValue: this.oldValue,\n        value: this.value,\n        isInteracted: event ? true : false,\n        element: this.element\n      };\n      this.trigger('change', eventArgs);\n      this.oldValue = this.value;\n    }\n  };\n\n  DropDownTree.prototype.ddtCompareValues = function (oldValue, newValue) {\n    if (oldValue === null || newValue === null) {\n      var isValid = oldValue === null ? newValue === oldValue ? true : false : oldValue.length === 0 ? newValue === oldValue : false;\n      return isValid;\n    } else if (oldValue.length !== newValue.length) {\n      return false;\n    }\n\n    for (var i = 0; i < oldValue.length; i++) {\n      if (oldValue[i] !== newValue[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  DropDownTree.prototype.focusIn = function (e) {\n    if (!this.enabled || this.readonly || this.inputFocus) {\n      return;\n    }\n\n    this.showOverAllClear();\n    this.inputFocus = true;\n    addClass([this.inputWrapper], [INPUTFOCUS]);\n\n    if (this.allowMultiSelection || this.showCheckBox) {\n      if (this.mode !== 'Delimiter' && this.inputFocus) {\n        if (this.chipWrapper && this.value && this.value.length !== 0) {\n          removeClass([this.chipWrapper], HIDEICON);\n          addClass([this.inputEle], CHIP_INPUT);\n        }\n\n        addClass([this.inputWrapper], SHOW_CHIP);\n\n        if (this.popupObj) {\n          this.popupObj.refreshPosition();\n        }\n      }\n\n      if (!this.wrapText && this.mode !== 'Custom') {\n        if (this.inputWrapper.contains(this.overFlowWrapper)) {\n          addClass([this.overFlowWrapper], HIDEICON);\n        }\n\n        if (this.mode === 'Delimiter') {\n          removeClass([this.inputWrapper], SHOW_CHIP);\n          removeClass([this.inputEle], CHIP_INPUT);\n        } else {\n          addClass([this.inputWrapper], SHOW_CHIP);\n        }\n\n        removeClass([this.inputWrapper], SHOW_TEXT);\n        this.ensurePlaceHolder();\n      }\n    }\n\n    var args = {\n      isInteracted: e ? true : false,\n      event: e\n    };\n    this.trigger('focus', args);\n  };\n\n  DropDownTree.prototype.treeAction = function (e) {\n    var _this = this;\n\n    var eventArgs = {\n      cancel: false,\n      event: e\n    };\n    this.trigger('keyPress', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        switch (e.action) {\n          case 'escape':\n          case 'altUp':\n            _this.inputWrapper.focus();\n\n            e.preventDefault();\n\n            if (_this.isPopupOpen) {\n              _this.hidePopup();\n            }\n\n            break;\n\n          case 'tab':\n          case 'shiftTab':\n            if (_this.isPopupOpen) {\n              _this.hidePopup();\n            }\n\n            break;\n\n          case 'enter':\n          case 'ctrlEnter':\n          case 'shiftEnter':\n          case 'csEnter':\n            if (!_this.showCheckBox) {\n              _this.isValueChange = true;\n              _this.keyEventArgs = e;\n            }\n\n            break;\n\n          case 'space':\n            _this.isValueChange = true;\n            _this.keyEventArgs = e;\n            break;\n\n          case 'ctrlA':\n            if (_this.allowMultiSelection) {\n              _this.selectAll(true);\n            }\n\n            break;\n\n          case 'moveRight':\n          case 'moveLeft':\n          case 'shiftDown':\n          case 'moveDown':\n          case 'ctrlDown':\n          case 'csDown':\n          case 'shiftUp':\n          case 'moveUp':\n          case 'ctrlUp':\n          case 'csUp':\n          case 'home':\n          case 'shiftHome':\n          case 'ctrlHome':\n          case 'csHome':\n          case 'end':\n          case 'shiftEnd':\n          case 'ctrlEnd':\n          case 'csEnd':\n        }\n      } else {\n        e.stopImmediatePropagation();\n      }\n    });\n  };\n\n  DropDownTree.prototype.keyActionHandler = function (e) {\n    var _this = this;\n\n    var eventArgs = {\n      cancel: false,\n      event: e\n    };\n    this.trigger('keyPress', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        switch (e.action) {\n          case 'escape':\n          case 'altUp':\n            if (_this.isPopupOpen) {\n              _this.hidePopup();\n            }\n\n            break;\n\n          case 'shiftTab':\n          case 'tab':\n            if (_this.isPopupOpen) {\n              _this.hidePopup();\n            }\n\n            if (_this.inputFocus) {\n              _this.onFocusOut();\n            }\n\n            break;\n\n          case 'altDown':\n            if (!_this.isPopupOpen) {\n              _this.showPopup();\n\n              e.preventDefault();\n            }\n\n            break;\n\n          case 'moveDown':\n            if (_this.showSelectAll && _this.showCheckBox) {\n              _this.checkAllParent.focus();\n            }\n\n            break;\n        }\n      }\n    });\n  };\n\n  DropDownTree.prototype.checkAllAction = function (e) {\n    var _this = this;\n\n    var eventArgs = {\n      cancel: false,\n      event: e\n    };\n    this.trigger('keyPress', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        switch (e.action) {\n          case 'space':\n            _this.clickHandler(e);\n\n            break;\n\n          case 'moveDown':\n            var focusedElement = _this.treeObj.element.querySelector('li');\n\n            focusedElement.focus();\n            addClass([focusedElement], ['e-hover', 'e-node-focus']);\n        }\n      }\n    });\n  };\n\n  DropDownTree.prototype.windowResize = function () {\n    if (this.popupObj) {\n      this.popupObj.setProperties({\n        width: this.setWidth()\n      });\n      this.popupObj.refreshPosition();\n    }\n  };\n\n  DropDownTree.prototype.resetValueHandler = function (e) {\n    var formElement = closest(this.inputWrapper, 'form');\n\n    if (formElement && e.target === formElement) {\n      this.isDynamicChange = true;\n      this.setProperties({\n        value: null\n      }, true);\n      this.resetValue(true);\n      this.isDynamicChange = false;\n    }\n  };\n\n  DropDownTree.prototype.getAriaAttributes = function () {\n    var disable = this.enabled ? 'false' : 'true';\n    return {\n      'aria-disabled': disable,\n      'aria-owns': this.element.id + '_options',\n      'role': 'listbox',\n      'aria-haspopup': 'true',\n      'aria-expanded': 'false',\n      'aria-activedescendant': 'null',\n      'aria-labelledby': this.hiddenElement.id\n    };\n  };\n\n  DropDownTree.prototype.updateOverFlowView = function () {\n    this.overFlowWrapper.classList.remove(TOTAL_COUNT_WRAPPER);\n    removeClass([this.overFlowWrapper], HIDEICON);\n\n    if (this.value && this.value.length) {\n      var data = '';\n      var overAllContainer = void 0;\n      var temp = void 0;\n      var tempData = void 0;\n      var tempIndex = 1;\n      var wrapperleng = void 0;\n      var remaining = void 0;\n      var downIconWidth = 0;\n      this.overFlowWrapper.innerHTML = ''; // eslint-disable-next-line\n\n      var l10nLocale = {\n        overflowCountTemplate: '+${count} more..',\n        totalCountTemplate: '${count} selected'\n      };\n      this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);\n      var remainContent = this.l10n.getConstant('overflowCountTemplate');\n      var totalContent = this.l10n.getConstant('totalCountTemplate');\n      var remainElement = this.createElement('span', {\n        className: REMAIN_WRAPPER\n      });\n      this.overFlowWrapper.appendChild(remainElement);\n      remainElement.innerText = remainContent.replace('${count}', this.value.length.toString());\n      var remainSize = remainElement.offsetWidth;\n      remove(remainElement);\n\n      if (this.showDropDownIcon) {\n        downIconWidth = select('.' + DDTICON, this.inputWrapper).offsetWidth;\n      }\n\n      if (!isNullOrUndefined(this.value)) {\n        if (this.mode !== 'Box') {\n          for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {\n            data += index === 0 ? '' : this.delimiterChar + ' ';\n            temp = this.getOverflowVal(index);\n            data += temp;\n            temp = this.overFlowWrapper.innerHTML;\n\n            if (this.enableHtmlSanitizer) {\n              this.overFlowWrapper.innerText = data;\n            } else {\n              this.overFlowWrapper.innerHTML = data;\n            }\n\n            wrapperleng = this.overFlowWrapper.offsetWidth;\n            overAllContainer = this.inputWrapper.offsetWidth;\n\n            if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {\n              if (tempData !== undefined && tempData !== '') {\n                temp = tempData;\n                index = tempIndex + 1;\n              }\n\n              this.overFlowWrapper.innerHTML = temp;\n              remaining = this.value.length - index;\n              wrapperleng = this.overFlowWrapper.offsetWidth;\n\n              while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth >= overAllContainer && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== '') {\n                var textArr = this.overFlowWrapper.innerHTML.split(this.delimiterChar);\n                textArr.pop();\n                this.overFlowWrapper.innerHTML = textArr.join(this.delimiterChar);\n                remaining++;\n                wrapperleng = this.overFlowWrapper.offsetWidth;\n              }\n\n              break;\n            } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {\n              tempData = data;\n              tempIndex = index;\n            } else if (index === 0) {\n              tempData = '';\n              tempIndex = -1;\n            }\n          }\n        } else {\n          addClass([this.chipWrapper], HIDEICON);\n          var ele = this.chipWrapper.cloneNode(true);\n          var chips = selectAll('.' + CHIP, ele);\n\n          for (var i = 0; i < chips.length; i++) {\n            temp = this.overFlowWrapper.innerHTML;\n            this.overFlowWrapper.appendChild(chips[i]);\n            data = this.overFlowWrapper.innerHTML;\n            wrapperleng = this.overFlowWrapper.offsetWidth;\n            overAllContainer = this.inputWrapper.offsetWidth;\n\n            if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {\n              if (tempData !== undefined && tempData !== '') {\n                temp = tempData;\n                i = tempIndex + 1;\n              }\n\n              this.overFlowWrapper.innerHTML = temp;\n              remaining = this.value.length - i;\n              wrapperleng = this.overFlowWrapper.offsetWidth;\n\n              while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth >= overAllContainer && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== '') {\n                this.overFlowWrapper.removeChild(this.overFlowWrapper.lastChild);\n                remaining++;\n                wrapperleng = this.overFlowWrapper.offsetWidth;\n              }\n\n              break;\n            } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {\n              tempData = data;\n              tempIndex = i;\n            } else if (i === 0) {\n              tempData = '';\n              tempIndex = -1;\n            }\n          }\n        }\n      }\n\n      if (remaining > 0) {\n        this.overFlowWrapper.appendChild(this.updateRemainTemplate(remainElement, remaining, remainContent, totalContent));\n      }\n\n      if (this.mode === 'Box' && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {\n        addClass([remainElement], REMAIN_COUNT);\n      }\n    } else {\n      this.overFlowWrapper.innerHTML = '';\n      addClass([this.overFlowWrapper], HIDEICON);\n    }\n\n    this.updateDelimMode();\n  };\n\n  DropDownTree.prototype.updateRemainTemplate = function (remainElement, remaining, remainContent, totalContent) {\n    if (this.overFlowWrapper.firstChild && this.overFlowWrapper.firstChild.nodeType === 3 && this.overFlowWrapper.firstChild.nodeValue === '') {\n      this.overFlowWrapper.removeChild(this.overFlowWrapper.firstChild);\n    }\n\n    remainElement.innerHTML = '';\n    remainElement.innerText = this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === 'Box') ? remainContent.replace('${count}', remaining.toString()) : totalContent.replace('${count}', remaining.toString());\n\n    if (this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === 'Box')) {\n      removeClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);\n    } else {\n      addClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);\n      removeClass([this.overFlowWrapper], REMAIN_COUNT);\n    }\n\n    return remainElement;\n  };\n\n  DropDownTree.prototype.getOverflowVal = function (index) {\n    // eslint-disable-next-line\n    var selectedData = this.getSelectedData(this.value[index]);\n    return getValue(this.treeSettings.loadOnDemand ? this.fields.text : 'text', selectedData);\n  };\n\n  DropDownTree.prototype.updateDelimMode = function () {\n    if (this.mode !== 'Box') {\n      if (select('.' + REMAIN_WRAPPER, this.overFlowWrapper) && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {\n        addClass([this.overFlowWrapper], REMAIN_COUNT);\n        addClass([this.overFlowWrapper], SHOW_TEXT);\n      } else {\n        this.overFlowWrapper.classList.remove(REMAIN_COUNT);\n        removeClass([this.overFlowWrapper], REMAIN_COUNT);\n      }\n    } else if (select('.' + REMAIN_WRAPPER, this.overFlowWrapper)) {\n      this.overFlowWrapper.classList.remove(REMAIN_COUNT);\n    }\n  };\n\n  DropDownTree.prototype.createHiddenElement = function () {\n    if (this.allowMultiSelection || this.showCheckBox) {\n      this.hiddenElement = this.createElement('select', {\n        attrs: {\n          'aria-hidden': 'true',\n          'class': HIDDENELEMENT,\n          'tabindex': '-1',\n          'multiple': ''\n        }\n      });\n    } else {\n      this.hiddenElement = this.createElement('select', {\n        attrs: {\n          'aria-hidden': 'true',\n          'tabindex': '-1',\n          'class': HIDDENELEMENT\n        }\n      });\n    }\n\n    prepend([this.hiddenElement], this.inputWrapper);\n    this.validationAttribute();\n  };\n\n  DropDownTree.prototype.createClearIcon = function () {\n    this.overAllClear = this.createElement('span', {\n      className: CLOSEICON_CLASS\n    });\n    addClass([this.overAllClear], HIDEICON);\n    removeClass([this.inputWrapper], SHOW_CLEAR);\n\n    if (this.showClearButton) {\n      this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);\n    }\n  };\n\n  DropDownTree.prototype.validationAttribute = function () {\n    var name = this.inputEle.getAttribute('name') ? this.inputEle.getAttribute('name') : this.inputEle.getAttribute('id');\n    this.hiddenElement.setAttribute('name', name);\n    this.inputEle.removeAttribute('name');\n    var attributes$$1 = ['required', 'aria-required', 'form'];\n\n    for (var i = 0; i < attributes$$1.length; i++) {\n      var attr = this.inputEle.getAttribute(attributes$$1[i]);\n\n      if (attr) {\n        this.hiddenElement.setAttribute(attributes$$1[i], attr);\n        this.inputEle.removeAttribute(attributes$$1[i]);\n      }\n    }\n  };\n\n  DropDownTree.prototype.createChip = function () {\n    if (!this.inputWrapper.contains(this.chipWrapper)) {\n      this.chipWrapper = this.createElement('span', {\n        className: CHIP_WRAPPER\n      });\n      this.chipCollection = this.createElement('span', {\n        className: CHIP_COLLECTION\n      });\n      this.chipWrapper.appendChild(this.chipCollection);\n      this.inputWrapper.insertBefore(this.chipWrapper, this.hiddenElement);\n      addClass([this.inputWrapper], SHOW_CHIP);\n      var isValid = this.getValidMode();\n\n      if (isValid && this.value !== null && this.value && this.value.length !== 0) {\n        addClass([this.inputEle], CHIP_INPUT);\n      } else if (this.value === null || this.value && this.value.length === 0 || this.checkWrapper) {\n        addClass([this.chipWrapper], HIDEICON);\n      }\n    }\n  };\n\n  DropDownTree.prototype.getValidMode = function () {\n    if (this.allowMultiSelection || this.showCheckBox) {\n      return this.mode === 'Box' ? true : this.mode === 'Default' && this.inputFocus ? true : false;\n    } else {\n      return false;\n    }\n  };\n\n  DropDownTree.prototype.createSelectAllWrapper = function () {\n    this.checkAllParent = this.createElement('div', {\n      className: CHECKALLPARENT,\n      attrs: {\n        'tabindex': '0'\n      }\n    });\n    this.selectAllSpan = this.createElement('span', {\n      className: ALLTEXT\n    });\n    this.selectAllSpan.textContent = '';\n    var ele = closest(this.element, '.' + BIGGER);\n    var touchClass = isNullOrUndefined(ele) ? '' : SMALL;\n    this.checkBoxElement = createCheckBox(this.createElement, true, {\n      cssClass: touchClass\n    });\n    this.checkBoxElement.setAttribute('role', 'checkbox');\n    this.checkAllParent.appendChild(this.checkBoxElement);\n    this.checkAllParent.appendChild(this.selectAllSpan);\n    this.setLocale();\n    EventHandler.add(this.checkAllParent, 'mouseup', this.clickHandler, this);\n    this.wireCheckAllWrapperEvents();\n  };\n\n  DropDownTree.prototype.clickHandler = function (e) {\n    var target;\n\n    if (e.currentTarget && e.currentTarget.classList.contains(CHECKALLPARENT)) {\n      target = e.currentTarget.firstElementChild.lastElementChild;\n    } else {\n      target = e.target;\n    }\n\n    this.checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n\n    if (!isNullOrUndefined(this.checkWrapper)) {\n      this.isClicked = true;\n      var checkElement = select('.' + CHECKBOXFRAME, this.checkWrapper);\n      this.changeState(this.checkWrapper, checkElement.classList.contains(CHECK) ? 'uncheck' : 'check', e);\n      this.isClicked = false;\n    }\n\n    e.preventDefault();\n  };\n\n  DropDownTree.prototype.changeState = function (wrapper, state, e) {\n    var ariaState;\n    var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n\n    if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n      frameSpan.classList.add(CHECK);\n      ariaState = 'true';\n\n      if (!this.isReverseUpdate) {\n        this.isCheckAllCalled = true;\n        this.treeObj.checkAll();\n\n        if (!this.changeOnBlur) {\n          this.triggerChangeEvent(e);\n        }\n      }\n\n      this.setLocale(true);\n    } else if (state === 'uncheck' && frameSpan.classList.contains(CHECK)) {\n      frameSpan.classList.remove(CHECK);\n      ariaState = 'false';\n\n      if (!this.isReverseUpdate) {\n        this.treeObj.uncheckAll();\n\n        if (!this.changeOnBlur) {\n          this.triggerChangeEvent(e);\n        }\n      }\n\n      this.setLocale(false);\n    }\n\n    this.setMultiSelect();\n    this.ensurePlaceHolder();\n    ariaState = state === 'check' ? 'true' : 'false';\n\n    if (!isNullOrUndefined(ariaState)) {\n      wrapper.setAttribute('aria-checked', ariaState);\n    }\n  };\n\n  DropDownTree.prototype.setLocale = function (unSelect) {\n    if (!this.selectAllSpan) {\n      return;\n    }\n\n    if (this.selectAllText !== 'Select All' || this.unSelectAllText !== 'Unselect All') {\n      var template = unSelect ? this.unSelectAllText : this.selectAllText;\n      this.selectAllSpan.textContent = ''; // eslint-disable-next-line\n\n      var compiledString = compile(template);\n      var templateName = unSelect ? 'unSelectAllText' : 'selectAllText';\n\n      for (var _i = 0, _a = compiledString({}, this, templateName, null, !this.isStringTemplate); _i < _a.length; _i++) {\n        var item = _a[_i];\n        this.selectAllSpan.textContent = item.textContent;\n      }\n    } else {\n      this.selectAllSpan.textContent = unSelect ? this.unSelectAllText : this.selectAllText;\n    }\n  };\n\n  DropDownTree.prototype.setAttributes = function () {\n    this.inputEle.setAttribute('tabindex', '-1');\n    var id = this.element.getAttribute('id');\n    this.hiddenElement.id = id + '_hidden';\n    this.inputWrapper.setAttribute('tabindex', '0');\n    attributes(this.inputWrapper, this.getAriaAttributes());\n  };\n\n  DropDownTree.prototype.setHTMLAttributes = function () {\n    if (Object.keys(this.htmlAttributes).length) {\n      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {\n        var htmlAttr = _a[_i];\n\n        if (htmlAttr === 'class') {\n          this.inputWrapper.classList.add(this.htmlAttributes[\"\" + htmlAttr]);\n        } else if (htmlAttr === 'disabled' && this.htmlAttributes[\"\" + htmlAttr] === 'disabled') {\n          this.setProperties({\n            enabled: false\n          }, true);\n          this.setEnable();\n        } else if (htmlAttr === 'readonly' && !isNullOrUndefined(this.htmlAttributes[\"\" + htmlAttr])) {\n          this.setProperties({\n            readonly: true\n          }, true);\n          this.dataBind();\n        } else if (htmlAttr === 'style') {\n          this.inputWrapper.setAttribute('style', this.htmlAttributes[\"\" + htmlAttr]);\n        } else {\n          var defaultAttr = ['title', 'id', 'placeholder', 'aria-placeholder', 'role', 'autocorrect', 'autocomplete', 'autocapitalize', 'spellcheck', 'minlength', 'maxlength'];\n          var validateAttr = ['name', 'required'];\n\n          if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {\n            this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[\"\" + htmlAttr]);\n          } else if (defaultAttr.indexOf(htmlAttr) > -1) {\n            if (htmlAttr === 'placeholder') {\n              Input.setPlaceholder(this.htmlAttributes[\"\" + htmlAttr], this.inputEle);\n            } else {\n              this.inputEle.setAttribute(htmlAttr, this.htmlAttributes[\"\" + htmlAttr]);\n            }\n          } else {\n            this.inputWrapper.setAttribute(htmlAttr, this.htmlAttributes[\"\" + htmlAttr]);\n          }\n        }\n      }\n    }\n  };\n\n  DropDownTree.prototype.updateDataAttribute = function () {\n    var value = this.htmlAttributes;\n    var invalidAttr = ['class', 'style', 'id', 'type'];\n    var attr = {};\n\n    for (var a = 0; a < this.element.attributes.length; a++) {\n      if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !(this.element.attributes[a].name === 'readonly')) {\n        attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);\n      }\n    }\n\n    extend(attr, value, attr);\n    this.setProperties({\n      htmlAttributes: attr\n    }, true);\n  };\n\n  DropDownTree.prototype.showOverAllClear = function () {\n    if (!this.enabled || this.readonly) {\n      return;\n    }\n\n    if (this.overAllClear) {\n      var isValue = this.value ? this.value.length ? true : false : false;\n\n      if (isValue && this.showClearButton) {\n        removeClass([this.overAllClear], HIDEICON);\n        addClass([this.inputWrapper], SHOW_CLEAR);\n      } else {\n        addClass([this.overAllClear], HIDEICON);\n        removeClass([this.inputWrapper], SHOW_CLEAR);\n      }\n    }\n  };\n\n  DropDownTree.prototype.setTreeValue = function () {\n    if (this.value !== null && this.value.length !== 0) {\n      // eslint-disable-next-line\n      var data = void 0;\n\n      if (this.showCheckBox || this.allowMultiSelection) {\n        for (var i = 0; i < this.value.length; i++) {\n          data = this.treeObj.getTreeData(this.value[i])[0];\n\n          if (isNullOrUndefined(data)) {\n            this.value.splice(this.value.indexOf(this.value[i]), 1);\n          }\n        }\n\n        if (this.value.length !== 0) {\n          this.setValidValue();\n        }\n      } else {\n        data = this.treeObj.getTreeData(this.value[0])[0];\n\n        if (!isNullOrUndefined(data)) {\n          this.setProperties({\n            text: data[this.fields.text]\n          }, true);\n          this.setValidValue();\n        } else {\n          this.setProperties({\n            value: this.currentValue\n          }, true);\n        }\n      }\n    }\n  };\n\n  DropDownTree.prototype.setTreeText = function () {\n    if (this.value !== null && !this.isInitialized) {\n      return;\n    }\n\n    if (this.text !== null) {\n      // eslint-disable-next-line\n      var data = void 0;\n      var valArr = [];\n\n      if (this.showCheckBox || this.allowMultiSelection) {\n        var textArr = this.text.split(this.delimiterChar);\n\n        for (var i = 0; i < textArr.length; i++) {\n          data = this.getItems(textArr[i]);\n\n          if (!isNullOrUndefined(data)) {\n            valArr.push(data[this.fields.value].toString());\n          }\n        }\n\n        if (valArr.length !== 0) {\n          this.oldValue = this.value;\n          this.setProperties({\n            value: valArr\n          }, true);\n          this.setValidValue();\n        } else {\n          this.setProperties({\n            text: this.currentText\n          }, true);\n        }\n      } else {\n        data = this.getItems(this.text);\n\n        if (!isNullOrUndefined(data)) {\n          this.oldValue = this.value;\n          this.setProperties({\n            value: [data[this.fields.value].toString()]\n          }, true);\n          this.setValidValue();\n        } else {\n          this.setProperties({\n            text: this.currentText\n          }, true);\n        }\n      }\n    }\n  };\n\n  DropDownTree.prototype.setSelectedValue = function () {\n    if (this.value != null) {\n      return;\n    }\n\n    if (!this.isInitialized) {\n      this.oldValue = this.value;\n\n      if (this.treeObj.selectedNodes.length > 0 && !this.showCheckBox) {\n        this.setProperties({\n          value: this.treeObj.selectedNodes\n        }, true);\n\n        if (this.allowMultiSelection) {\n          this.updateMode();\n        }\n      } else if (this.showCheckBox && this.treeObj.checkedNodes) {\n        if (this.treeObj.checkedNodes.length > 0) {\n          this.setProperties({\n            value: this.treeObj.checkedNodes\n          }, true);\n          setValue('selectedNodes', [], this.treeObj);\n          this.treeObj.dataBind();\n          this.updateMode();\n        }\n      }\n\n      this.updateSelectedValues();\n      this.currentText = this.text;\n      this.currentValue = this.value;\n    }\n  };\n\n  DropDownTree.prototype.setValidValue = function () {\n    var _this = this;\n\n    if (!this.showCheckBox && !this.allowMultiSelection) {\n      Input.setValue(this.text, this.inputEle, this.floatLabelType);\n      var id = this.value[0].toString();\n\n      if (this.treeObj.selectedNodes[0] !== id) {\n        setValue('selectedNodes', [id], this.treeObj);\n      }\n    } else {\n      if (this.showCheckBox) {\n        var difference = this.value.filter(function (e) {\n          return _this.treeObj.checkedNodes.indexOf(e) === -1;\n        });\n\n        if (difference.length > 0 || this.treeSettings.autoCheck) {\n          this.treeObj.checkedNodes = this.value.slice();\n          this.treeObj.dataBind();\n          this.setMultiSelect();\n        }\n      } else {\n        this.treeObj.selectedNodes = this.value.slice();\n        this.selectedText = [];\n        this.updateSelectedValues();\n      }\n\n      this.treeObj.dataBind();\n    }\n\n    this.currentText = this.text;\n    this.currentValue = this.value;\n\n    if (this.isInitialized) {\n      this.triggerChangeEvent();\n    }\n  }; // eslint-disable-next-line\n\n\n  DropDownTree.prototype.getItems = function (givenText) {\n    // eslint-disable-next-line\n    var data;\n\n    if (this.treeDataType === 1) {\n      for (var i = 0; i < this.treeItems.length; i++) {\n        // eslint-disable-next-line\n        var text = getValue(this.fields.text, this.treeItems[i]);\n\n        if (!isNullOrUndefined(this.treeItems[i]) && !isNullOrUndefined(text) && text === givenText) {\n          data = this.treeItems[i];\n          break;\n        }\n      }\n    } else {\n      data = this.getNestedItems(this.treeItems, this.fields, givenText);\n    }\n\n    return data;\n  }; // eslint-disable-next-line\n\n\n  DropDownTree.prototype.getNestedItems = function (data, field, givenText) {\n    // eslint-disable-next-line\n    var newData;\n\n    for (var i = 0, objlen = data.length; i < objlen; i++) {\n      // eslint-disable-next-line\n      var dataId = getValue(this.fields.text, data[i]);\n\n      if (data[i] && dataId && dataId.toString() === givenText) {\n        return data[i];\n      } else if (typeof field.child === 'string' && !isNullOrUndefined(getValue(field.child, data[i]))) {\n        // eslint-disable-next-line\n        var childData = getValue(field.child, data[i]); // eslint-disable-next-line\n\n        newData = this.getNestedItems(childData, this.getChildType(field), givenText);\n\n        if (newData !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', data[i]))) {\n        var child = 'child'; // eslint-disable-next-line\n\n        newData = this.getNestedItems(getValue(child, data[i]), this.getChildType(field), givenText);\n\n        if (newData !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return newData;\n  };\n\n  DropDownTree.prototype.getChildType = function (mapper) {\n    return typeof mapper.child === 'string' || isNullOrUndefined(mapper.child) ? mapper : mapper.child;\n  };\n  /* To render the treeview */\n\n\n  DropDownTree.prototype.renderTree = function () {\n    this.treeObj = new TreeView({\n      fields: this.getTreeFields(this.fields),\n      enableRtl: this.enableRtl,\n      nodeSelected: this.onNodeSelected.bind(this),\n      nodeChecked: this.onNodeChecked.bind(this),\n      nodeChecking: this.beforeCheck.bind(this),\n      nodeExpanded: this.onNodeExpanded.bind(this),\n      actionFailure: this.onActionFailure.bind(this),\n      nodeClicked: this.onNodeClicked.bind(this),\n      dataBound: this.OnDataBound.bind(this),\n      allowMultiSelection: this.allowMultiSelection,\n      enableHtmlSanitizer: this.enableHtmlSanitizer,\n      showCheckBox: this.showCheckBox,\n      autoCheck: this.treeSettings.autoCheck,\n      sortOrder: this.sortOrder,\n      expandOn: this.treeSettings.expandOn,\n      loadOnDemand: this.treeSettings.loadOnDemand,\n      nodeSelecting: this.onBeforeSelect.bind(this),\n      nodeTemplate: this.itemTemplate\n    });\n    this.treeObj.root = this.root ? this.root : this;\n    this.treeObj.appendTo('#' + this.tree.id);\n  };\n  /* To render the popup element */\n\n\n  DropDownTree.prototype.renderPopup = function () {\n    var _this = this;\n\n    if (this.isFilteredData) {\n      this.filterObj.value = '';\n      this.treeObj.fields = this.getTreeFields(this.fields);\n      this.isFilterRestore = true;\n      this.isFilteredData = false;\n      this.hideCheckAll(false);\n    }\n\n    var isCancelled = false;\n    var args = {\n      cancel: false\n    };\n    this.trigger('beforeOpen', args, function (args) {\n      if (!args.cancel) {\n        addClass([_this.inputWrapper], [ICONANIMATION]);\n\n        if (_this.isFirstRender) {\n          _this.popupEle = _this.createElement('div', {\n            id: _this.element.id + '_popup',\n            className: POPUP_CLASS + ' ' + (_this.cssClass != null ? _this.cssClass : '')\n          });\n          document.body.appendChild(_this.popupEle);\n\n          _this.createPopup(_this.popupEle);\n        } else {\n          _this.popupEle = _this.popupObj.element;\n        }\n      } else {\n        isCancelled = true;\n      }\n\n      if (_this.isFirstRender && !isCancelled) {\n        prepend([_this.popupDiv], _this.popupEle);\n        removeClass([_this.popupDiv], DDTHIDEICON);\n\n        if (_this.allowFiltering) {\n          _this.renderFilter();\n        }\n\n        if (_this.showCheckBox && _this.showSelectAll && !_this.popupDiv.classList.contains(NODATA)) {\n          _this.createSelectAllWrapper();\n\n          _this.popupEle.insertBefore(_this.checkAllParent, _this.popupDiv);\n        }\n\n        if (_this.headerTemplate) {\n          _this.setHeaderTemplate();\n        }\n\n        if (_this.footerTemplate) {\n          _this.setFooterTemplate();\n        }\n\n        _this.isFirstRender = false;\n        /* eslint-disable */\n\n        if (_this.hasTemplate && _this.portals) {\n          _this.portals = _this.portals.concat(_this.treeObj.portals);\n          /* eslint-enable */\n\n          _this.renderReactTemplates();\n        }\n      }\n\n      if (!isCancelled) {\n        attributes(_this.inputWrapper, {\n          'aria-expanded': 'true'\n        });\n\n        _this.popupObj.show(null, _this.zIndex === 1000 ? _this.inputEle : null);\n\n        removeClass([_this.popupEle], DDTHIDEICON);\n\n        _this.updatePopupHeight();\n\n        _this.popupObj.refreshPosition();\n\n        if (!(_this.showCheckBox && _this.showSelectAll) && !_this.popupDiv.classList.contains(NODATA) && _this.treeItems.length > 0) {\n          var focusedElement = _this.treeObj.element.querySelector('li');\n\n          focusedElement.focus();\n          addClass([focusedElement], ['e-hover', 'e-node-focus']);\n        }\n\n        if (_this.checkSelectAll && _this.checkBoxElement) {\n          var wrap = closest(_this.checkBoxElement, '.' + CHECKBOXWRAP);\n\n          _this.changeState(wrap, 'check');\n\n          _this.checkSelectAll = false;\n        }\n\n        if (_this.allowFiltering) {\n          removeClass([_this.inputWrapper], [INPUTFOCUS]);\n\n          _this.filterObj.element.focus();\n        }\n\n        var eventArgs = {\n          popup: _this.popupObj\n        };\n\n        _this.trigger('open', eventArgs);\n      }\n    });\n  };\n\n  DropDownTree.prototype.updatePopupHeight = function () {\n    if (this.isFirstRender) {\n      return;\n    }\n\n    var popupHeight = this.getHeight();\n    this.popupEle.style.maxHeight = popupHeight;\n\n    if (this.allowFiltering) {\n      var height = Math.round(this.filterContainer.getBoundingClientRect().height);\n      popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n    }\n\n    if (this.headerTemplate) {\n      var height = Math.round(this.header.getBoundingClientRect().height);\n      popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n    }\n\n    if (this.showCheckBox && this.showSelectAll && !this.popupDiv.classList.contains(NODATA)) {\n      var height = Math.round(this.checkAllParent.getBoundingClientRect().height);\n      popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n    }\n\n    if (this.footerTemplate) {\n      var height = Math.round(this.footer.getBoundingClientRect().height);\n      popupHeight = formatUnit(parseInt(popupHeight, 10) - height + 'px');\n    }\n\n    var border = parseInt(window.getComputedStyle(this.popupEle).borderTopWidth, 10);\n    border = border + parseInt(window.getComputedStyle(this.popupEle).borderBottomWidth, 10);\n    popupHeight = formatUnit(parseInt(popupHeight, 10) - border + 'px');\n    this.popupDiv.style.maxHeight = popupHeight;\n  };\n\n  DropDownTree.prototype.createPopup = function (element) {\n    var _this = this;\n\n    if (this.isFirstRender) {\n      this.popupObj = new Popup(element, {\n        width: this.setWidth(),\n        targetType: 'relative',\n        collision: {\n          X: 'flip',\n          Y: 'flip'\n        },\n        relateTo: this.inputWrapper,\n        zIndex: this.zIndex,\n        enableRtl: this.enableRtl,\n        position: {\n          X: 'left',\n          Y: 'bottom'\n        },\n        close: function () {\n          _this.isPopupOpen = false;\n        },\n        open: function () {\n          EventHandler.add(document, 'mousedown', _this.onDocumentClick, _this);\n          _this.isPopupOpen = true;\n        },\n        targetExitViewport: function () {\n          if (!Browser.isDevice) {\n            _this.hidePopup();\n          }\n        }\n      });\n    }\n  };\n  /* To calculate the width when change via set model */\n\n\n  DropDownTree.prototype.setElementWidth = function (inputWidth) {\n    var ddElement = this.inputWrapper;\n\n    if (!isNullOrUndefined(inputWidth)) {\n      if (typeof inputWidth === 'number') {\n        ddElement.style.width = formatUnit(inputWidth);\n      } else if (typeof inputWidth === 'string') {\n        ddElement.style.width = inputWidth.match(/px|%|em/) ? inputWidth : formatUnit(inputWidth);\n      }\n    }\n  };\n  /* To calculate the width of the popup */\n\n\n  DropDownTree.prototype.setWidth = function () {\n    var width = formatUnit(this.popupWidth);\n\n    if (width.indexOf('%') > -1) {\n      width = (this.inputWrapper.offsetWidth * parseFloat(width) / 100).toString() + 'px';\n    } else if (typeof this.popupWidth === 'string') {\n      width = this.popupWidth.match(/px|em/) ? this.popupWidth : width;\n    }\n\n    return width;\n  };\n  /* To calculate the height of the popup */\n\n\n  DropDownTree.prototype.getHeight = function () {\n    var height = formatUnit(this.popupHeight);\n\n    if (height.indexOf('%') > -1) {\n      // Will set the height of the popup according to the view port height\n      height = (document.documentElement.clientHeight * parseFloat(height) / 100).toString() + 'px';\n    } else if (typeof this.popupHeight === 'string') {\n      height = this.popupHeight.match(/px|em/) ? this.popupHeight : height;\n    }\n\n    return height;\n  };\n\n  DropDownTree.prototype.onDocumentClick = function (e) {\n    var target = e.target;\n    var isTree = closest(target, '.' + PARENTITEM);\n    var isFilter = closest(target, '.' + FILTERWRAP);\n    var isHeader = closest(target, '.' + HEADER);\n    var isFooter = closest(target, '.' + FOOTER);\n    var isScroller = target.classList.contains(DROPDOWN) ? true : matches(target, '.e-ddt .e-popup') || matches(target, '.e-ddt .e-treeview');\n\n    if (this.isPopupOpen && (this.inputWrapper.contains(target) || isTree || isScroller || isHeader || isFooter) || (this.allowMultiSelection || this.showCheckBox) && (this.isPopupOpen && target.classList.contains(CHIP_CLOSE) || this.isPopupOpen && (target.classList.contains(CHECKALLPARENT) || target.classList.contains(ALLTEXT) || target.classList.contains(CHECKBOXFRAME)))) {\n      this.isDocumentClick = false;\n      e.preventDefault();\n    } else if (!isNullOrUndefined(this.inputWrapper) && !this.inputWrapper.contains(target) && this.inputFocus && !isFilter) {\n      this.focusOut(e);\n    }\n  };\n\n  DropDownTree.prototype.onActionFailure = function (e) {\n    this.trigger('actionFailure', e);\n    this.l10nUpdate(true);\n    addClass([this.popupDiv], NODATA);\n  };\n\n  DropDownTree.prototype.OnDataBound = function (args) {\n    this.treeItems = args.data;\n\n    if (this.treeItems.length <= 0) {\n      this.l10nUpdate();\n      addClass([this.popupDiv], NODATA);\n      this.hideCheckAll(true);\n    } else if (this.popupDiv.classList.contains(NODATA) && this.treeItems.length >= 1) {\n      removeClass([this.popupDiv], NODATA);\n      this.hideCheckAll(false);\n    }\n\n    this.treeDataType = this.getTreeDataType(this.treeItems, this.fields);\n\n    if (this.isFirstRender && this.isRemoteData) {\n      this.setTreeValue();\n      this.setTreeText();\n      this.updateHiddenValue();\n      this.setSelectedValue();\n\n      if (!this.wrapText) {\n        this.updateView();\n      }\n\n      this.treeObj.element.focus();\n    }\n\n    var eventArgs = {\n      data: args.data\n    };\n    this.trigger('dataBound', eventArgs);\n\n    if (this.filterObj === null) {\n      this.isFilteredData = false;\n    }\n\n    if (this.isFilteredData) {\n      this.treeObj.expandAll();\n    }\n\n    if (this.isFilterRestore) {\n      this.restoreFilterSelection();\n      this.isFilterRestore = false;\n    }\n  };\n\n  DropDownTree.prototype.restoreFilterSelection = function () {\n    if (this.showCheckBox) {\n      this.treeObj.checkedNodes = this.value ? this.value : [];\n    } else {\n      this.treeObj.selectedNodes = this.value ? this.value : [];\n    }\n  };\n  /* To set cssclass for the dropdowntree */\n\n\n  DropDownTree.prototype.setCssClass = function (newClass, oldClass) {\n    var elements = this.popupObj ? [this.inputWrapper, this.popupObj.element] : [this.inputWrapper];\n\n    if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n      removeClass(elements, oldClass.split(' '));\n    }\n\n    if (!isNullOrUndefined(newClass) && newClass !== '') {\n      addClass(elements, newClass.split(' '));\n    }\n  };\n\n  DropDownTree.prototype.setEnableRTL = function (state) {\n    if (state) {\n      this.inputWrapper.classList.add(RTL);\n    } else {\n      this.inputWrapper.classList.remove(RTL);\n    }\n\n    if (this.popupObj) {\n      this.popupObj.enableRtl = state;\n      this.popupObj.dataBind();\n    }\n\n    if (this.treeObj) {\n      this.treeObj.enableRtl = state;\n      this.treeObj.dataBind();\n    }\n  };\n  /* To set enable property */\n\n\n  DropDownTree.prototype.setEnable = function () {\n    Input.setEnabled(this.enabled, this.inputEle);\n\n    if (this.enabled) {\n      removeClass([this.inputWrapper], DISABLED);\n      this.inputEle.setAttribute('aria-disabled', 'false');\n      this.inputWrapper.setAttribute('aria-disabled', 'false');\n    } else {\n      if (this.isPopupOpen) {\n        this.hidePopup();\n      }\n\n      addClass([this.inputWrapper], DISABLED);\n\n      if (this.inputWrapper && this.inputWrapper.classList.contains(INPUTFOCUS)) {\n        removeClass([this.inputWrapper], [INPUTFOCUS]);\n      }\n\n      this.inputEle.setAttribute('aria-disabled', 'true');\n      this.inputWrapper.setAttribute('aria-disabled', 'true');\n    }\n  };\n\n  DropDownTree.prototype.cloneFields = function (fields) {\n    var clonedField = {\n      dataSource: fields.dataSource,\n      value: fields.value,\n      text: fields.text,\n      parentValue: fields.parentValue,\n      child: this.cloneChildField(fields.child),\n      hasChildren: fields.hasChildren,\n      expanded: fields.expanded,\n      iconCss: fields.iconCss,\n      imageUrl: fields.imageUrl,\n      htmlAttributes: fields.htmlAttributes,\n      query: fields.query,\n      selected: fields.selected,\n      selectable: fields.selectable,\n      tableName: fields.tableName,\n      tooltip: fields.tooltip\n    };\n    return clonedField;\n  };\n\n  DropDownTree.prototype.cloneChildField = function (fields) {\n    if (typeof fields === 'string') {\n      return fields;\n    } else {\n      var clonedField = {\n        dataSource: fields.dataSource,\n        value: fields.value,\n        text: fields.text,\n        parentValue: fields.parentValue,\n        child: fields.child ? this.cloneChildField(fields.child) : null,\n        hasChildren: fields.hasChildren,\n        expanded: fields.expanded,\n        iconCss: fields.iconCss,\n        imageUrl: fields.imageUrl,\n        htmlAttributes: fields.htmlAttributes,\n        query: fields.query,\n        selected: fields.selected,\n        selectable: fields.selectable,\n        tableName: fields.tableName,\n        tooltip: fields.tooltip\n      };\n      return clonedField;\n    }\n  };\n\n  DropDownTree.prototype.getTreeFields = function (fields) {\n    var treeFields = {\n      dataSource: fields.dataSource,\n      id: fields.value,\n      text: fields.text,\n      parentID: fields.parentValue,\n      child: this.getTreeChildren(fields.child),\n      hasChildren: fields.hasChildren,\n      expanded: fields.expanded,\n      iconCss: fields.iconCss,\n      imageUrl: fields.imageUrl,\n      isChecked: fields.selected,\n      htmlAttributes: fields.htmlAttributes,\n      query: fields.query,\n      selectable: fields.selectable,\n      selected: fields.selected,\n      tableName: fields.tableName,\n      tooltip: fields.tooltip\n    };\n    return treeFields;\n  };\n\n  DropDownTree.prototype.getTreeChildren = function (mapper) {\n    if (typeof mapper === 'string') {\n      return mapper;\n    } else if (!isNullOrUndefined(mapper)) {\n      mapper = this.getActualProperties(mapper);\n      var childFields = mapper;\n\n      if (mapper.value) {\n        childFields.id = mapper.value;\n      }\n\n      if (mapper.parentValue) {\n        childFields.parentID = mapper.parentValue;\n      }\n\n      if (mapper.child) {\n        childFields.child = this.getTreeChildren(mapper.child);\n      }\n\n      if (mapper.selected && this.showCheckBox) {\n        childFields.isChecked = mapper.selected;\n      }\n\n      return childFields;\n    }\n\n    return null;\n  }; // eslint-disable-next-line\n\n\n  DropDownTree.prototype.getTreeDataType = function (ds, field) {\n    if (this.fields.dataSource instanceof DataManager) {\n      for (var i = 0; i < ds.length; i++) {\n        if (typeof field.child === 'string' && isNullOrUndefined(getValue(field.child, ds[i]))) {\n          return 1;\n        }\n      }\n\n      return 2;\n    }\n\n    if (isNullOrUndefined(this.fields.dataSource)) this.fields.dataSource = [];\n\n    for (var i = 0, len = this.fields.dataSource.length; i < len; i++) {\n      if (typeof field.child === 'string' && !isNullOrUndefined(getValue(field.child, this.fields.dataSource[i]))) {\n        return 2;\n      }\n\n      if (!isNullOrUndefined(getValue(field.parentValue, this.fields.dataSource[i])) || !isNullOrUndefined(getValue(field.hasChildren, this.fields.dataSource[i]))) {\n        return 1;\n      }\n    }\n\n    return 1;\n  };\n  /* Triggers when the tree fields is changed dynamically */\n\n\n  DropDownTree.prototype.setFields = function () {\n    this.resetValue();\n\n    if (this.hasTemplate) {\n      this.updateTemplate();\n    }\n\n    this.treeObj.fields = this.getTreeFields(this.fields);\n    this.treeObj.dataBind();\n  };\n\n  DropDownTree.prototype.getEventArgs = function (args) {\n    // eslint-disable-next-line\n    var checkData = args.data; // eslint-disable-next-line\n\n    var selectData = args.nodeData;\n    var state;\n\n    if (this.showCheckBox) {\n      if (args.action === 'check') {\n        state = 'select';\n      } else if (args.action === 'uncheck') {\n        state = 'un-select';\n      }\n    }\n\n    var eventArgs = {\n      action: this.showCheckBox ? state : args.action,\n      isInteracted: this.isClicked ? true : args.isInteracted,\n      item: args.node,\n      itemData: this.showCheckBox ? checkData[0] : selectData\n    };\n    return eventArgs;\n  };\n\n  DropDownTree.prototype.onBeforeSelect = function (args) {\n    if (args.isInteracted) {\n      this.oldValue = this.value ? this.value.slice() : this.value;\n\n      if (this.value === null) {\n        this.setProperties({\n          value: []\n        }, true);\n      }\n    }\n  };\n\n  DropDownTree.prototype.updateHiddenValue = function () {\n    if (this.allowMultiSelection || this.showCheckBox) {\n      return;\n    }\n\n    if (this.value && this.value.length) {\n      this.hiddenElement.innerHTML = '<option selected value =\"' + this.value[0] + '\">' + this.text + '</option>';\n    } else {\n      this.hiddenElement.innerHTML = '';\n    }\n  };\n  /* Triggers when the tree node is selected */\n\n\n  DropDownTree.prototype.onNodeSelected = function (args) {\n    if (this.showCheckBox) {\n      return;\n    }\n\n    var selectedText;\n\n    if (args.isInteracted) {\n      var id = getValue('id', args.nodeData).toString();\n\n      if (!this.allowMultiSelection) {\n        this.hiddenElement.innerHTML = '';\n        this.setProperties({\n          value: [id]\n        }, true);\n\n        if (this.itemTemplate) {\n          selectedText = getValue('text', this.treeObj.getNode(id));\n        } else {\n          selectedText = getValue('text', args.nodeData).toString();\n        }\n\n        Input.setValue(selectedText, this.inputEle, this.floatLabelType);\n        this.setProperties({\n          text: selectedText\n        }, true);\n        this.currentText = this.text;\n        this.currentValue = this.value;\n        attributes(this.inputWrapper, {\n          'aria-describedby': this.element.id\n        });\n        attributes(this.inputWrapper, {\n          'aria-activedescendant': id.toString()\n        });\n        this.updateHiddenValue();\n        this.showOverAllClear();\n        this.hidePopup();\n        this.isNodeSelected = true;\n      } else if (this.allowMultiSelection) {\n        this.setMultiSelect();\n      }\n    }\n\n    var eventArgs = this.getEventArgs(args);\n    this.trigger('select', eventArgs);\n\n    if (this.isValueChange && !this.changeOnBlur) {\n      this.triggerChangeEvent(this.keyEventArgs);\n      this.isValueChange = false;\n    }\n  };\n\n  DropDownTree.prototype.onNodeClicked = function (args) {\n    if (!this.changeOnBlur && this.isNodeSelected) {\n      this.triggerChangeEvent(args.event);\n      this.isNodeSelected = false;\n    }\n\n    var target = args.event.target;\n\n    if ((target.classList.contains('e-fullrow') || target.classList.contains('e-list-text')) && this.showCheckBox) {\n      this.isClicked = true; // eslint-disable-next-line\n\n      var getNodeDetails = this.treeObj.getNode(args.node);\n\n      if (getNodeDetails.isChecked === 'true') {\n        this.treeObj.uncheckAll([args.node]);\n      } else {\n        this.treeObj.checkAll([args.node]);\n      }\n\n      this.isClicked = false;\n      this.setMultiSelect();\n      this.ensurePlaceHolder();\n    }\n\n    if (!this.changeOnBlur && (this.allowMultiSelection || this.showCheckBox)) {\n      this.triggerChangeEvent(args.event);\n    }\n  };\n\n  DropDownTree.prototype.onNodeChecked = function (args) {\n    var eventArgs = this.getEventArgs(args);\n    this.trigger('select', eventArgs);\n\n    if (this.isFilteredData && args.action === 'uncheck') {\n      var id = getValue('id', args.data[0]).toString();\n      this.removeSelectedData(id, true);\n    }\n\n    if (!this.isChipDelete && args.isInteracted) {\n      this.setMultiSelect();\n      this.ensurePlaceHolder();\n    }\n\n    if (this.showSelectAll && this.checkBoxElement) {\n      var nodes = this.treeObj.element.querySelectorAll('li');\n      var checkedNodes = this.treeObj.element.querySelectorAll('li .e-checkbox-wrapper[aria-checked=true]');\n      var wrap = closest(this.checkBoxElement, '.' + CHECKBOXWRAP);\n\n      if (wrap && args.action === 'uncheck' && (args.isInteracted || checkedNodes.length === 0)) {\n        this.isReverseUpdate = true;\n        this.changeState(wrap, 'uncheck');\n        this.isReverseUpdate = false;\n      } else if (wrap && args.action === 'check' && checkedNodes.length === nodes.length && (args.isInteracted || this.isCheckAllCalled)) {\n        this.isReverseUpdate = true;\n        this.isCheckAllCalled = false;\n        this.changeState(wrap, 'check');\n        this.isReverseUpdate = false;\n      }\n    }\n  };\n\n  DropDownTree.prototype.beforeCheck = function (args) {\n    if (args.isInteracted) {\n      this.oldValue = this.value ? this.value.slice() : this.value;\n    }\n  };\n\n  DropDownTree.prototype.onNodeExpanded = function (args) {\n    if (this.hasTemplate && this.portals) {\n      this.portals = [].concat(this.treeObj.portals);\n      /* eslint-enable */\n\n      this.renderReactTemplates();\n    }\n  };\n\n  DropDownTree.prototype.updateClearButton = function (state) {\n    if (state) {\n      if (!this.inputWrapper.contains(this.overAllClear)) {\n        this.inputEle.parentElement.insertBefore(this.overAllClear, this.inputEle.nextSibling);\n      } else {\n        removeClass([this.overAllClear], HIDEICON);\n        addClass([this.inputWrapper], SHOW_CLEAR);\n      }\n    } else {\n      addClass([this.overAllClear], HIDEICON);\n      removeClass([this.inputWrapper], SHOW_CLEAR);\n    }\n\n    if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {\n      var chipClose = selectAll('.' + CHIP_CLOSE, this.chipWrapper);\n\n      for (var i = 0; i < chipClose.length; i++) {\n        if (!state) {\n          addClass([chipClose[i]], HIDEICON);\n        } else {\n          removeClass([chipClose[i]], HIDEICON);\n        }\n      }\n    }\n  };\n\n  DropDownTree.prototype.updateDropDownIconState = function (state) {\n    var spinIcon = select('.' + DDTICON, this.inputWrapper);\n\n    if (state) {\n      if (!spinIcon) {\n        Input.appendSpan(DROPDOWNICON, this.inputWrapper, this.createElement);\n      } else {\n        removeClass([spinIcon], HIDEICON);\n      }\n\n      addClass([this.inputWrapper], SHOW_DD_ICON);\n    } else {\n      addClass([spinIcon], HIDEICON);\n      removeClass([this.inputWrapper], SHOW_DD_ICON);\n    }\n  };\n\n  DropDownTree.prototype.updateMode = function () {\n    if (this.mode === 'Custom') {\n      return;\n    }\n\n    if (this.mode !== 'Delimiter') {\n      if (!this.inputWrapper.contains(this.chipWrapper)) {\n        this.createChip();\n      }\n\n      var isValid = this.getValidMode();\n\n      if (this.chipWrapper.classList.contains(HIDEICON) && isValid) {\n        removeClass([this.chipWrapper], HIDEICON);\n        addClass([this.inputWrapper], SHOW_CHIP);\n      } else if (!isValid) {\n        addClass([this.chipWrapper], HIDEICON);\n        removeClass([this.inputWrapper], SHOW_CHIP);\n      }\n\n      var isValue = this.value !== null ? this.value.length !== 0 ? true : false : false;\n\n      if (isValid && isValue) {\n        addClass([this.inputEle], CHIP_INPUT);\n      } else {\n        removeClass([this.inputEle], CHIP_INPUT);\n      }\n    } else if (this.inputEle.classList.contains(CHIP_INPUT)) {\n      removeClass([this.inputEle], CHIP_INPUT);\n\n      if (this.chipWrapper) {\n        addClass([this.chipWrapper], HIDEICON);\n        removeClass([this.inputWrapper], SHOW_CHIP);\n      }\n    }\n  };\n\n  DropDownTree.prototype.ensurePlaceHolder = function () {\n    if (isNullOrUndefined(this.value) || this.value && this.value.length === 0) {\n      removeClass([this.inputEle], CHIP_INPUT);\n\n      if (this.chipWrapper) {\n        addClass([this.chipWrapper], HIDEICON);\n      }\n    }\n  };\n\n  DropDownTree.prototype.ensureClearIconPosition = function (floatLabelType) {\n    if (floatLabelType !== 'Never') {\n      this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);\n    }\n  };\n\n  DropDownTree.prototype.setMultiSelectValue = function (newValues) {\n    if (!this.isFilteredData) {\n      this.setProperties({\n        value: this.isFromFilterChange && newValues && newValues.length == 0 ? this.value : newValues\n      }, true);\n      this.isFromFilterChange = false;\n\n      if (newValues && newValues.length !== 0 && !this.showCheckBox) {\n        this.treeObj.selectedNodes = this.value.slice();\n        this.treeObj.dataBind();\n      }\n    } else {\n      var selectedValues = isNullOrUndefined(this.value) ? [] : this.value;\n\n      for (var i = 0; i < newValues.length; i++) {\n        if (isNullOrUndefined(this.value) || this.value.indexOf(newValues[i]) === -1) {\n          selectedValues.push(newValues[i]);\n        }\n      }\n\n      this.setProperties({\n        value: selectedValues\n      }, true);\n    }\n  };\n\n  DropDownTree.prototype.setMultiSelect = function () {\n    if (this.showCheckBox && !this.isDynamicChange) {\n      this.setMultiSelectValue(this.treeObj.checkedNodes.slice());\n    } else {\n      var ddtValue = this.allowMultiSelection ? this.showCheckBox ? this.treeObj.checkedNodes : this.treeObj.selectedNodes : this.value ? this.showCheckBox ? this.value : [this.value[0]] : null;\n      this.setMultiSelectValue(ddtValue);\n\n      if (this.showCheckBox && this.value !== null) {\n        this.treeObj.checkedNodes = this.value;\n        this.treeObj.dataBind();\n      }\n    }\n\n    this.selectedText = [];\n    var checkSelection = this.allowMultiSelection ? true : this.showCheckBox ? true : false;\n\n    if (this.inputWrapper.contains(this.chipWrapper) && !checkSelection) {\n      removeClass([this.inputEle], CHIP_INPUT);\n      detach(this.chipWrapper);\n    }\n\n    var isValid = this.getValidMode();\n\n    if (isValid && this.value !== null) {\n      addClass([this.inputEle], CHIP_INPUT);\n\n      if (this.chipWrapper) {\n        removeClass([this.chipWrapper], HIDEICON);\n      }\n    }\n\n    var isValue = this.value ? this.value.length ? true : false : false;\n\n    if (this.chipWrapper && this.mode === 'Box' && !isValue) {\n      addClass([this.chipWrapper], HIDEICON);\n      removeClass([this.inputEle], CHIP_INPUT);\n    }\n\n    this.updateSelectedValues();\n  }; // eslint-disable-next-line\n\n\n  DropDownTree.prototype.getSelectedData = function (value) {\n    // eslint-disable-next-line\n    var data = null;\n\n    if (this.isFilteredData) {\n      for (var i = 0; i < this.selectedData.length; i++) {\n        if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : 'id', this.selectedData[i]).toString() === value) {\n          data = this.selectedData[i];\n          break;\n        }\n      }\n    }\n\n    if (isNullOrUndefined(data)) {\n      if (this.treeSettings.loadOnDemand) {\n        data = this.getNodeData(value);\n      } else {\n        data = this.treeObj.getNode(value);\n      }\n\n      if (!isNullOrUndefined(data)) {\n        this.selectedData.push(data);\n      }\n    }\n\n    return data;\n  };\n\n  DropDownTree.prototype.getNodeData = function (id) {\n    var childItems;\n\n    if (isNullOrUndefined(id)) {\n      return childItems;\n    } else if (this.treeDataType === 1) {\n      for (var i = 0, objlen = this.treeItems.length; i < objlen; i++) {\n        var dataId = getValue(this.fields.value, this.treeItems[i]);\n\n        if (!isNullOrUndefined(this.treeItems[i]) && !isNullOrUndefined(dataId) && dataId.toString() === id) {\n          return this.treeItems[i];\n        }\n      }\n    } else {\n      return this.getChildNodeData(this.treeItems, this.fields, id);\n    }\n\n    return childItems;\n  };\n\n  DropDownTree.prototype.getChildNodeData = function (obj, mapper, id) {\n    var newChildItems;\n\n    if (isNullOrUndefined(obj)) {\n      return newChildItems;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var dataValue = getValue(mapper.value, obj[i]);\n\n      if (obj[i] && dataValue && dataValue.toString() === id) {\n        return obj[i];\n      } else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n        var childNodeData = getValue(mapper.child, obj[i]);\n        newChildItems = this.getChildNodeData(childNodeData, this.getChildMapperFields(mapper), id);\n\n        if (newChildItems !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', obj[i]))) {\n        var child = 'child';\n        newChildItems = this.getChildNodeData(getValue(child, obj[i]), this.getChildMapperFields(mapper), id);\n\n        if (newChildItems !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return newChildItems;\n  };\n\n  DropDownTree.prototype.getChildMapperFields = function (mapper) {\n    return typeof mapper.child === 'string' || isNullOrUndefined(mapper.child) ? mapper : mapper.child;\n  };\n\n  DropDownTree.prototype.removeSelectedData = function (value, muteOnChange) {\n    var selectedValues = isNullOrUndefined(this.value) ? [] : this.value.slice();\n    selectedValues.splice(selectedValues.indexOf(value), 1);\n    this.setProperties({\n      value: selectedValues\n    }, muteOnChange);\n\n    for (var i = 0; i < this.selectedData.length; i++) {\n      if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : 'id', this.selectedData[i]).toString() === value) {\n        this.selectedData.splice(i, 1);\n        break;\n      }\n    }\n  };\n\n  DropDownTree.prototype.updateSelectedValues = function () {\n    this.dataValue = '';\n    var temp;\n    var text;\n    var textValue = ''; // eslint-disable-next-line\n\n    var selectedData;\n    this.hiddenElement.innerHTML = '';\n    var hiddenInputValue = '';\n\n    if ((!this.isChipDelete || this.treeSettings.autoCheck) && this.inputWrapper.contains(this.chipWrapper)) {\n      this.chipCollection.innerHTML = '';\n    }\n\n    if (!this.isFilteredData) {\n      this.selectedData = [];\n    }\n\n    if (!isNullOrUndefined(this.value)) {\n      for (var i = 0, len = this.value.length; i < len; i++) {\n        selectedData = this.getSelectedData(this.value[i]);\n        text = getValue(this.treeSettings.loadOnDemand ? this.fields.text : 'text', selectedData);\n        this.selectedText.push(text);\n        temp = this.selectedText[this.selectedText.length - 1];\n\n        if (this.selectedText.length > 1) {\n          this.dataValue += this.delimiterChar + ' ' + temp;\n          textValue += ',' + temp;\n        } else {\n          this.dataValue += temp;\n          textValue += temp;\n        }\n\n        if (this.mode !== 'Custom' && this.mode !== 'Delimiter' && (!this.isChipDelete || this.treeSettings.autoCheck) && (this.allowMultiSelection || this.showCheckBox)) {\n          this.setChipValues(temp, this.value[i]);\n        }\n\n        hiddenInputValue += '<option selected value =\"' + this.value[i] + '\">' + this.selectedText[this.selectedText.length - 1] + '</option>';\n      }\n\n      if (this.selectedText.length >= 1) {\n        this.setProperties({\n          text: textValue\n        }, true);\n      }\n\n      this.hiddenElement.innerHTML = hiddenInputValue;\n\n      if (this.mode === 'Custom' && (this.allowMultiSelection || this.showCheckBox)) {\n        this.setTagValues();\n      }\n    }\n\n    var isValid = this.getValidMode();\n\n    if (this.mode !== 'Custom' && this.mode !== 'Box' && (this.allowMultiSelection || this.showCheckBox) && !isValid) {\n      if (this.chipWrapper) {\n        addClass([this.chipWrapper], HIDEICON);\n        removeClass([this.inputWrapper], SHOW_CHIP);\n      }\n    }\n\n    Input.setValue(this.dataValue, this.inputEle, this.floatLabelType);\n\n    if (textValue === '') {\n      this.setProperties({\n        text: null\n      }, true);\n    } else {\n      this.setProperties({\n        text: textValue\n      }, true);\n    }\n\n    if (this.showClearButton && this.inputFocus) {\n      this.showOverAllClear();\n    }\n\n    if ((this.allowMultiSelection || this.showCheckBox) && this.popupObj) {\n      this.popupObj.refreshPosition();\n    }\n\n    this.currentText = this.text;\n    this.currentValue = this.value;\n  };\n\n  DropDownTree.prototype.setChipValues = function (text, value) {\n    if (!this.inputWrapper.contains(this.chipWrapper)) {\n      this.createChip();\n    }\n\n    var chip = this.createElement('span', {\n      className: CHIP,\n      attrs: {\n        'data-value': value\n      }\n    });\n    var chipContent = this.createElement('span', {\n      className: CHIP_CONTENT\n    });\n    var chipClose = this.createElement('span', {\n      className: CHIP_CLOSE + ' ' + ICONS\n    });\n\n    if (this.enableHtmlSanitizer) {\n      chipContent.innerText = text;\n    } else {\n      chipContent.innerHTML = text;\n    }\n\n    chip.appendChild(chipContent);\n    this.chipCollection.appendChild(chip);\n\n    if (this.showClearButton) {\n      chip.appendChild(chipClose);\n      EventHandler.add(chipClose, 'mousedown', this.removeChip, this);\n    }\n  };\n\n  DropDownTree.prototype.setTagValues = function () {\n    if (this.value === null || this.text == null) {\n      return;\n    }\n\n    if (!this.inputWrapper.contains(this.chipWrapper)) {\n      this.createChip();\n    }\n\n    if (!this.inputWrapper.classList.contains(SHOW_CHIP)) {\n      addClass([this.inputWrapper], SHOW_CHIP);\n    }\n\n    var chip = this.createElement('span', {\n      className: CHIP\n    });\n\n    if (!this.inputEle.classList.contains(CHIP_INPUT)) {\n      addClass([this.inputEle], CHIP_INPUT);\n    }\n\n    if (this.chipWrapper.classList.contains(HIDEICON)) {\n      removeClass([this.chipWrapper], HIDEICON);\n    }\n\n    var chipContent = this.createElement('span', {\n      className: CHIP_CONTENT\n    });\n    var template = this.customTemplate;\n    var templateId = this.customTemplateId;\n    var templatestring = 'customTemplate';\n    var compiledString = this.templateComplier(template);\n    var tempArr = compiledString({\n      'value': this.value,\n      'text': this.text\n    }, this, templatestring, templateId, this.isStringTemplate, undefined, chipContent);\n\n    if (tempArr) {\n      tempArr = Array.prototype.slice.call(tempArr);\n      append(tempArr, chipContent);\n    }\n\n    chip.appendChild(chipContent);\n    this.chipCollection.appendChild(chip);\n  };\n\n  DropDownTree.prototype.setSelectAllWrapper = function (state) {\n    if (this.isFirstRender) {\n      return;\n    }\n\n    if (state && !this.popupEle.contains(this.checkAllParent) && this.showCheckBox) {\n      this.createSelectAllWrapper();\n      this.popupEle.insertBefore(this.checkAllParent, this.popupDiv);\n    } else if (this.popupEle.contains(this.checkAllParent)) {\n      detach(this.checkAllParent);\n      this.checkAllParent = null;\n    }\n  };\n\n  DropDownTree.prototype.setHeaderTemplate = function () {\n    if (this.header) {\n      this.header.innerHTML = '';\n    } else {\n      this.header = this.createElement('div');\n      addClass([this.header], HEADER);\n    } // eslint-disable-next-line\n\n\n    var compiledString = this.templateComplier(this.headerTemplate);\n    var tempArr = compiledString({}, this, 'headerTemplate', this.headerTemplateId, this.isStringTemplate, undefined, this.header);\n\n    if (tempArr) {\n      tempArr = Array.prototype.slice.call(tempArr);\n      append(tempArr, this.header);\n    }\n\n    this.popupEle.insertBefore(this.header, this.checkAllParent ? this.checkAllParent : this.popupDiv);\n  }; // eslint-disable-next-line\n\n\n  DropDownTree.prototype.templateComplier = function (template) {\n    if (template) {\n      // eslint-disable-next-line\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        } else {\n          return compile(template);\n        }\n      } catch (e) {\n        return compile(template);\n      }\n    }\n\n    return compile(template);\n  };\n\n  DropDownTree.prototype.setFooterTemplate = function () {\n    if (this.footer) {\n      this.footer.innerHTML = '';\n    } else {\n      this.footer = this.createElement('div');\n      addClass([this.footer], FOOTER);\n    } // eslint-disable-next-line\n\n\n    var compiledString = this.templateComplier(this.footerTemplate);\n    var tempArr = compiledString({}, this, 'footerTemplate', this.footerTemplateId, this.isStringTemplate, undefined, this.footer);\n\n    if (tempArr) {\n      tempArr = Array.prototype.slice.call(tempArr);\n      append(tempArr, this.footer);\n    }\n\n    append([this.footer], this.popupEle);\n  };\n\n  DropDownTree.prototype.clearAll = function (e) {\n    if (!this.enabled || this.readonly) {\n      return;\n    }\n\n    this.resetValue();\n    this.showOverAllClear();\n\n    if (this.allowMultiSelection || this.showCheckBox) {\n      if (this.popupObj) {\n        this.popupObj.refreshPosition();\n      }\n\n      if (!this.wrapText) {\n        this.updateOverflowWrapper(true);\n      }\n    }\n\n    if (e) {\n      this.isClearButtonClick = true;\n    }\n\n    if (!this.changeOnBlur) {\n      this.triggerChangeEvent(e);\n    }\n  };\n\n  DropDownTree.prototype.removeChip = function (e) {\n    if (!this.enabled || this.readonly) {\n      return;\n    }\n\n    var element = e.target.parentElement;\n    var value = element.getAttribute('data-value');\n\n    if (this.chipCollection) {\n      if (element) {\n        remove(element);\n      }\n    }\n\n    this.isChipDelete = true;\n    this.isClearButtonClick = true;\n    this.removeSelectedData(value, true);\n    this.selectedText = [];\n\n    if (this.allowMultiSelection) {\n      this.treeObj.selectedNodes = this.value.slice();\n      this.updateSelectedValues();\n    }\n\n    if (this.showCheckBox) {\n      this.treeObj.uncheckAll([value]);\n      this.clearCheckAll();\n      this.setMultiSelect();\n    }\n\n    this.triggerChangeEvent(e);\n    this.isChipDelete = false;\n    this.ensurePlaceHolder();\n  };\n\n  DropDownTree.prototype.resetValue = function (isDynamicChange) {\n    if (this.value == [] && this.text == null) {\n      return;\n    }\n\n    Input.setValue(null, this.inputEle, this.floatLabelType);\n\n    if (!isDynamicChange) {\n      this.oldValue = this.value;\n      this.setProperties({\n        value: []\n      }, true);\n    }\n\n    this.dataValue = null;\n    this.setProperties({\n      text: null\n    }, true);\n    this.selectedData = [];\n    setValue('selectedNodes', [], this.treeObj);\n    this.hiddenElement.innerHTML = '';\n\n    if (this.showCheckBox) {\n      this.treeObj.uncheckAll();\n      this.setMultiSelect();\n      this.clearCheckAll();\n    }\n\n    if (this.oldValue === null && !isDynamicChange) {\n      this.removeValue = true;\n    } else if (isDynamicChange) {\n      this.triggerChangeEvent();\n    }\n\n    if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {\n      this.chipCollection.innerHTML = '';\n\n      if (!this.wrapText) {\n        this.updateOverflowWrapper(true);\n      }\n\n      this.ensurePlaceHolder();\n    }\n  };\n\n  DropDownTree.prototype.clearCheckAll = function () {\n    if (this.showSelectAll && this.value && this.value.length === 0) {\n      this.setLocale(false);\n    }\n  };\n\n  DropDownTree.prototype.selectAllItems = function (state) {\n    if (this.showCheckBox) {\n      if (state) {\n        this.isCheckAllCalled = true;\n        this.treeObj.checkAll();\n      } else {\n        this.treeObj.uncheckAll();\n      }\n\n      this.checkSelectAll = true;\n    } else if (this.allowMultiSelection) {\n      if (!state) {\n        this.treeObj.selectedNodes = [];\n      } else {\n        var li = selectAll('li', this.treeObj.element);\n        var id = void 0;\n        var arr = [];\n\n        for (var i = 0; i < li.length; i++) {\n          id = li[i].getAttribute('data-uid').toString();\n          arr.push(id);\n        }\n\n        this.treeObj.selectedNodes = arr;\n      }\n    }\n\n    this.updateMode();\n    this.setMultiSelect();\n\n    if (!this.wrapText) {\n      if (state) {\n        this.updateView();\n      } else {\n        this.updateOverflowWrapper(true);\n      }\n    }\n  };\n\n  DropDownTree.prototype.updateTreeSettings = function (prop) {\n    var value = Object.keys(prop.treeSettings)[0];\n\n    if (value === 'autoCheck') {\n      this.ensureAutoCheck();\n      this.treeObj.autoCheck = this.treeSettings.autoCheck;\n    } else if (value === 'loadOnDemand') {\n      this.treeObj.loadOnDemand = this.treeSettings.loadOnDemand;\n    } else if (value === 'expandOn') {\n      this.treeObj.expandOn = this.treeSettings.expandOn;\n      this.treeObj.dataBind();\n      return;\n    }\n\n    this.treeObj.dataBind();\n    this.setMultiSelect();\n    this.updateValue(this.value);\n  };\n\n  DropDownTree.prototype.updateCheckBoxState = function (checkBox) {\n    if (this.hasTemplate) {\n      this.updateTemplate();\n    }\n\n    if (!this.wrapText) {\n      this.updateOverflowWrapper(false);\n    }\n\n    this.treeObj.showCheckBox = checkBox;\n    this.treeObj.dataBind();\n    this.isDynamicChange = true;\n    this.setSelectAllWrapper(this.showSelectAll);\n\n    if (this.showSelectAll) {\n      this.setLocale();\n    }\n\n    if (this.showCheckBox) {\n      this.updateMode();\n    }\n\n    this.setMultiSelect();\n    this.isDynamicChange = false;\n  };\n\n  DropDownTree.prototype.updateTemplate = function () {\n    if (this.popupObj) {\n      this.clearTemplate();\n      /* eslint-disable */\n\n      this.portals = [];\n      /* eslint-enable */\n\n      this.popupObj.destroy();\n\n      if (this.isPopupOpen) {\n        this.hidePopup();\n        this.isFirstRender = true;\n        this.renderPopup();\n      } else {\n        this.isFirstRender = true;\n      }\n    }\n  };\n\n  DropDownTree.prototype.l10nUpdate = function (actionFailure) {\n    if (this.noRecord) {\n      this.noRecord.innerHTML = '';\n    } else {\n      this.noRecord = this.createElement('div');\n    }\n\n    if (this.noRecordsTemplate !== 'No Records Found' || this.actionFailureTemplate !== 'The Request Failed') {\n      var template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;\n      var templateId = actionFailure ? this.actionFailureTemplateId : this.noRecordsTemplateId;\n      var templatestring = actionFailure ? 'actionFailureTemplate' : 'noRecordsTemplate'; // eslint-disable-next-line\n\n      var compiledString = this.templateComplier(template);\n      var tempArr = compiledString({}, this, templatestring, templateId, this.isStringTemplate, undefined, this.noRecord);\n\n      if (tempArr) {\n        tempArr = Array.prototype.slice.call(tempArr);\n        append(tempArr, this.noRecord);\n        addClass([this.noRecord], NODATACONTAINER);\n        prepend([this.noRecord], this.popupDiv);\n      }\n    } else {\n      // eslint-disable-next-line\n      var l10nLocale = {\n        noRecordsTemplate: 'No Records Found',\n        actionFailureTemplate: 'The Request Failed'\n      };\n      this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);\n      this.noRecord.innerHTML = actionFailure ? this.l10n.getConstant('actionFailureTemplate') : this.l10n.getConstant('noRecordsTemplate');\n      addClass([this.noRecord], NODATACONTAINER);\n      prepend([this.noRecord], this.popupDiv);\n    }\n  };\n\n  DropDownTree.prototype.updateRecordTemplate = function (action) {\n    if (this.treeItems && this.treeItems.length <= 0) {\n      this.l10nUpdate(action);\n\n      if (this.hasTemplate) {\n        this.updateTemplate();\n      }\n    }\n  };\n\n  DropDownTree.prototype.updateOverflowWrapper = function (state) {\n    if (!state) {\n      if (!this.inputWrapper.contains(this.overFlowWrapper)) {\n        this.overFlowWrapper = this.createElement('span', {\n          className: OVERFLOW_VIEW + ' ' + HIDEICON\n        });\n        this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);\n      }\n    } else if (this.inputWrapper.contains(this.overFlowWrapper) && state) {\n      this.overFlowWrapper.innerHTML = '';\n    }\n  };\n\n  DropDownTree.prototype.updateMultiSelection = function (state) {\n    if (!this.wrapText) {\n      this.updateOverflowWrapper(false);\n    }\n\n    this.treeObj.allowMultiSelection = state;\n    this.treeObj.dataBind();\n    this.updateOption();\n\n    if (this.allowMultiSelection) {\n      this.updateMode();\n    }\n\n    this.setMultiSelect();\n  };\n\n  DropDownTree.prototype.updateAllowFiltering = function (state) {\n    if (!this.isFirstRender) {\n      if (state) {\n        this.renderFilter();\n      } else {\n        this.destroyFilter();\n      }\n    }\n\n    this.ensureAutoCheck();\n  };\n\n  DropDownTree.prototype.updateFilterPlaceHolder = function () {\n    if (this.filterObj) {\n      this.filterObj.placeholder = this.filterBarPlaceholder;\n      this.filterObj.element.setAttribute('aria-label', this.filterBarPlaceholder);\n    }\n  };\n\n  DropDownTree.prototype.updateValue = function (value) {\n    this.isDynamicChange = true;\n\n    if (isNullOrUndefined(value) || value.length === 0) {\n      this.resetValue(true);\n    } else {\n      this.setTreeValue();\n\n      if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {\n        this.updateOverflowWrapper(false);\n        this.updateView();\n      }\n    }\n\n    this.updateHiddenValue();\n    this.isDynamicChange = false;\n  };\n\n  DropDownTree.prototype.updateText = function (text) {\n    if (isNullOrUndefined(text)) {\n      this.resetValue();\n    } else {\n      this.setTreeText();\n\n      if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {\n        this.updateOverflowWrapper(false);\n        this.updateView();\n      }\n    }\n\n    this.updateHiddenValue();\n  };\n\n  DropDownTree.prototype.updateModelMode = function () {\n    var validMode = this.allowMultiSelection ? true : this.showCheckBox ? true : false;\n\n    if (!validMode) {\n      return;\n    }\n\n    if (!this.wrapText) {\n      var overFlow = select('.' + OVERFLOW_VIEW, this.inputWrapper);\n\n      if (overFlow) {\n        overFlow.innerHTML = '';\n      }\n    }\n\n    this.updateMode();\n    this.setMultiSelect();\n\n    if (!this.wrapText && this.value && this.value.length !== 0) {\n      this.updateOverFlowView();\n      addClass([this.inputEle], CHIP_INPUT);\n\n      if (this.mode === 'Box') {\n        removeClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);\n      } else {\n        addClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);\n      }\n    }\n  };\n\n  DropDownTree.prototype.updateOption = function () {\n    if (!this.hiddenElement.hasAttribute('multiple') && (this.allowMultiSelection || this.showCheckBox)) {\n      this.hiddenElement.setAttribute('multiple', '');\n    } else if (this.hiddenElement.hasAttribute('multiple') && !this.allowMultiSelection && !this.showCheckBox) {\n      this.hiddenElement.removeAttribute('multiple');\n    }\n  };\n  /**\n   * Dynamically change the value of properties.\n   *\n   * @param {DropDownTreeModel} newProp - specifies the newProp value.\n   * @param {DropDownTreeModel} oldProp - specifies the newProp value.\n   * @returns {void}\n   * @private\n   */\n\n\n  DropDownTree.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'width':\n          this.setElementWidth(newProp.width);\n\n          if (this.popupObj) {\n            this.popupObj.element.style.width = this.setWidth();\n          }\n\n          break;\n\n        case 'placeholder':\n          Input.setPlaceholder(newProp.placeholder, this.inputEle);\n          break;\n\n        case 'cssClass':\n          this.setCssClass(newProp.cssClass, oldProp.cssClass);\n          break;\n\n        case 'enableRtl':\n          this.setEnableRTL(this.enableRtl);\n          break;\n\n        case 'fields':\n          this.setFields();\n          break;\n\n        case 'readonly':\n          Input.setReadonly(newProp.readonly, this.inputEle);\n          break;\n\n        case 'enabled':\n          this.setEnable();\n          break;\n\n        case 'floatLabelType':\n          Input.removeFloating(this.inputObj);\n          Input.addFloating(this.inputEle, newProp.floatLabelType, this.placeholder, this.createElement);\n          this.ensureClearIconPosition(newProp.floatLabelType);\n          break;\n\n        case 'showClearButton':\n          this.updateClearButton(newProp.showClearButton);\n          break;\n\n        case 'allowFiltering':\n          this.updateAllowFiltering(newProp.allowFiltering);\n          break;\n\n        case 'filterBarPlaceholder':\n          this.updateFilterPlaceHolder();\n          break;\n\n        case 'value':\n          this.oldValue = oldProp.value;\n          this.updateValue(newProp.value);\n          break;\n\n        case 'text':\n          this.updateText(newProp.text);\n          break;\n\n        case 'allowMultiSelection':\n          this.updateMultiSelection(newProp.allowMultiSelection);\n          break;\n\n        case 'mode':\n          if (!this.showCheckBox && !this.allowMultiSelection) {\n            return;\n          }\n\n          if (this.mode === 'Custom') {\n            if (this.overFlowWrapper) {\n              detach(this.overFlowWrapper);\n            }\n\n            if (this.chipWrapper) {\n              detach(this.chipWrapper);\n            }\n\n            this.setTagValues();\n          } else {\n            if (oldProp.mode === 'Custom') {\n              this.updateOverflowWrapper(this.wrapText);\n            }\n\n            this.updateModelMode();\n          }\n\n          break;\n\n        case 'delimiterChar':\n          if (this.mode === 'Box') {\n            return;\n          }\n\n          if (this.showCheckBox || this.allowMultiSelection) {\n            this.setMultiSelect();\n          }\n\n          break;\n\n        case 'selectAllText':\n          if (this.showCheckBox && this.showSelectAll) {\n            this.setLocale();\n          }\n\n          break;\n\n        case 'unSelectAllText':\n          if (this.showCheckBox && this.showSelectAll) {\n            this.setLocale(false);\n          }\n\n          break;\n\n        case 'showSelectAll':\n          if (this.showCheckBox) {\n            this.setSelectAllWrapper(newProp.showSelectAll);\n            this.updatePopupHeight();\n          }\n\n          break;\n\n        case 'showCheckBox':\n          this.updateCheckBoxState(newProp.showCheckBox);\n\n          if (!this.wrapText) {\n            this.updateOverflowWrapper(true);\n          }\n\n          this.updatePopupHeight();\n          this.updateOption();\n          break;\n\n        case 'treeSettings':\n          this.updateTreeSettings(newProp);\n          break;\n\n        case 'customTemplate':\n          if (this.mode !== \"Custom\") {\n            return;\n          }\n\n          this.chipCollection.innerHTML = \"\";\n          this.setTagValues();\n          break;\n\n        case 'sortOrder':\n          if (this.hasTemplate) {\n            this.updateTemplate();\n          }\n\n          this.treeObj.sortOrder = newProp.sortOrder;\n          this.treeObj.dataBind();\n          this.updateValue(this.value);\n          break;\n\n        case 'showDropDownIcon':\n          this.updateDropDownIconState(newProp.showDropDownIcon);\n          break;\n\n        case 'popupWidth':\n          if (this.popupObj) {\n            this.popupObj.element.style.width = this.setWidth();\n          }\n\n          break;\n\n        case 'popupHeight':\n          if (this.popupObj) {\n            this.updatePopupHeight();\n          }\n\n          break;\n\n        case 'zIndex':\n          if (this.popupObj) {\n            this.popupObj.zIndex = newProp.zIndex;\n            this.popupObj.dataBind();\n          }\n\n          break;\n\n        case 'headerTemplate':\n          this.updateTemplate();\n          break;\n\n        case 'footerTemplate':\n          this.updateTemplate();\n          break;\n\n        case 'itemTemplate':\n          this.updateTemplate();\n          this.treeObj.nodeTemplate = newProp.itemTemplate;\n          this.treeObj.dataBind();\n          break;\n\n        case 'noRecordsTemplate':\n          this.updateRecordTemplate();\n          break;\n\n        case 'actionFailureTemplate':\n          this.updateRecordTemplate(true);\n          break;\n\n        case 'htmlAttributes':\n          this.setHTMLAttributes();\n          break;\n\n        case 'wrapText':\n          this.updateOverflowWrapper(this.wrapText);\n\n          if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {\n            this.updateView();\n          } else {\n            addClass([this.overFlowWrapper], HIDEICON);\n\n            if (this.chipWrapper && this.mode === 'Box') {\n              removeClass([this.chipWrapper], HIDEICON);\n            } else {\n              removeClass([this.inputWrapper], SHOW_CHIP);\n              removeClass([this.inputEle], CHIP_INPUT);\n            }\n\n            this.ensurePlaceHolder();\n          }\n\n          break;\n      }\n    }\n  };\n  /**\n   * Allows you to clear the selected values from the Dropdown Tree component.\n   *\n   * @method clear\n   * @returns {void}\n   */\n\n\n  DropDownTree.prototype.clear = function () {\n    this.clearAll();\n\n    if (this.inputFocus) {\n      this.onFocusOut();\n    } else {\n      if (this.changeOnBlur) {\n        this.triggerChangeEvent();\n      }\n\n      this.removeValue = false;\n    }\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. Also, it removes the attributes and classes.\n   *\n   * @method destroy\n   * @returns {void}\n   */\n\n\n  DropDownTree.prototype.destroy = function () {\n    this.clearTemplate();\n    this.unWireEvents();\n    this.setCssClass(null, this.cssClass);\n    this.setProperties({\n      value: []\n    }, true);\n    this.setProperties({\n      text: null\n    }, true);\n    this.treeObj.destroy();\n    this.destroyFilter();\n\n    if (this.popupObj) {\n      this.popupObj.destroy();\n      detach(this.popupObj.element);\n    }\n\n    if (this.element.tagName !== this.getDirective()) {\n      this.inputWrapper.parentElement.insertBefore(this.element, this.inputWrapper);\n    }\n\n    Input.setValue(null, this.inputEle, this.floatLabelType);\n    detach(this.inputWrapper);\n    detach(this.popupDiv);\n    this.element.classList.remove('e-input');\n\n    if (this.showCheckBox || this.allowMultiSelection) {\n      this.element.classList.remove(CHIP_INPUT);\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n\n  DropDownTree.prototype.destroyFilter = function () {\n    if (this.filterObj) {\n      this.filterObj.destroy();\n      detach(this.filterObj.element);\n      detach(this.filterContainer);\n      this.filterObj = null;\n    }\n  };\n  /**\n   * Ensures visibility of the Dropdown Tree item by using item value or item element.\n   * If many Dropdown Tree items are present, and we are in need to find a particular item, then the `ensureVisible` property\n   * helps you to bring the item to visibility by expanding the Dropdown Tree and scrolling to the specific item.\n   *\n   * @param  {string | Element} item - Specifies the value of Dropdown Tree item/ Dropdown Tree item element.\n   * @returns {void}\n   */\n\n\n  DropDownTree.prototype.ensureVisible = function (item) {\n    this.treeObj.ensureVisible(item);\n  };\n  /**\n   * To get the updated data source of the Dropdown Tree.\n   *\n   * @param  {string | Element} item - Specifies the value of Dropdown Tree item/ Dropdown Tree item element\n   * @returns {'{[key: string]: Object }[]'} - returns the updated data source of the Dropdown Tree.\n   */\n  // eslint-disable-next-line\n\n\n  DropDownTree.prototype.getData = function (item) {\n    return this.treeObj.getTreeData(item);\n  };\n  /**\n   * Close the Dropdown tree pop-up.\n   *\n   * @returns {void}\n   */\n\n\n  DropDownTree.prototype.hidePopup = function () {\n    var eventArgs = {\n      popup: this.popupObj\n    };\n    this.inputWrapper.classList.remove(ICONANIMATION);\n\n    if (this.popupEle) {\n      addClass([this.popupEle], DDTHIDEICON);\n    }\n\n    attributes(this.inputWrapper, {\n      'aria-expanded': 'false'\n    });\n\n    if (this.popupObj && this.isPopupOpen) {\n      this.popupObj.hide();\n\n      if (this.inputFocus) {\n        this.inputWrapper.focus();\n\n        if (this.allowFiltering) {\n          addClass([this.inputWrapper], [INPUTFOCUS]);\n        }\n      }\n\n      this.trigger('close', eventArgs);\n    }\n  };\n  /**\n   * Based on the state parameter, entire list item will be selected or deselected.\n   *\n   * @param {boolean} state - Unselects/Selects entire Dropdown Tree items.\n   * @returns {void}\n   *\n   */\n\n\n  DropDownTree.prototype.selectAll = function (state) {\n    this.selectAllItems(state);\n  };\n  /**\n   * Opens the popup that displays the Dropdown Tree items.\n   *\n   * @returns {void}\n   */\n\n\n  DropDownTree.prototype.showPopup = function () {\n    if (!this.enabled || this.readonly || this.isPopupOpen) {\n      return;\n    }\n\n    this.renderPopup();\n    this.focusIn();\n  };\n  /**\n   * Return the module name.\n   *\n   * @private\n   * @returns {string} - returns the module name.\n   */\n\n\n  DropDownTree.prototype.getModuleName = function () {\n    return 'dropdowntree';\n  };\n\n  __decorate$2([Property('The Request Failed')], DropDownTree.prototype, \"actionFailureTemplate\", void 0);\n\n  __decorate$2([Property(false)], DropDownTree.prototype, \"allowFiltering\", void 0);\n\n  __decorate$2([Property(false)], DropDownTree.prototype, \"allowMultiSelection\", void 0);\n\n  __decorate$2([Property(true)], DropDownTree.prototype, \"changeOnBlur\", void 0);\n\n  __decorate$2([Property('')], DropDownTree.prototype, \"cssClass\", void 0);\n\n  __decorate$2([Property(\"${value.length} item(s) selected\")], DropDownTree.prototype, \"customTemplate\", void 0);\n\n  __decorate$2([Property(',')], DropDownTree.prototype, \"delimiterChar\", void 0);\n\n  __decorate$2([Property(true)], DropDownTree.prototype, \"enabled\", void 0);\n\n  __decorate$2([Complex({}, Fields)], DropDownTree.prototype, \"fields\", void 0);\n\n  __decorate$2([Property(null)], DropDownTree.prototype, \"filterBarPlaceholder\", void 0);\n\n  __decorate$2([Property('StartsWith')], DropDownTree.prototype, \"filterType\", void 0);\n\n  __decorate$2([Property('Never')], DropDownTree.prototype, \"floatLabelType\", void 0);\n\n  __decorate$2([Property(null)], DropDownTree.prototype, \"footerTemplate\", void 0);\n\n  __decorate$2([Property(false)], DropDownTree.prototype, \"ignoreAccent\", void 0);\n\n  __decorate$2([Property(true)], DropDownTree.prototype, \"ignoreCase\", void 0);\n\n  __decorate$2([Property(null)], DropDownTree.prototype, \"headerTemplate\", void 0);\n\n  __decorate$2([Property({})], DropDownTree.prototype, \"htmlAttributes\", void 0);\n\n  __decorate$2([Property(null)], DropDownTree.prototype, \"itemTemplate\", void 0);\n\n  __decorate$2([Property('Default')], DropDownTree.prototype, \"mode\", void 0);\n\n  __decorate$2([Property('No Records Found')], DropDownTree.prototype, \"noRecordsTemplate\", void 0);\n\n  __decorate$2([Property(null)], DropDownTree.prototype, \"placeholder\", void 0);\n\n  __decorate$2([Property('300px')], DropDownTree.prototype, \"popupHeight\", void 0);\n\n  __decorate$2([Property('100%')], DropDownTree.prototype, \"popupWidth\", void 0);\n\n  __decorate$2([Property(false)], DropDownTree.prototype, \"readonly\", void 0);\n\n  __decorate$2([Property(false)], DropDownTree.prototype, \"showSelectAll\", void 0);\n\n  __decorate$2([Property('Select All')], DropDownTree.prototype, \"selectAllText\", void 0);\n\n  __decorate$2([Property(false)], DropDownTree.prototype, \"showCheckBox\", void 0);\n\n  __decorate$2([Property(false)], DropDownTree.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate$2([Property(true)], DropDownTree.prototype, \"showClearButton\", void 0);\n\n  __decorate$2([Property(true)], DropDownTree.prototype, \"showDropDownIcon\", void 0);\n\n  __decorate$2([Property('None')], DropDownTree.prototype, \"sortOrder\", void 0);\n\n  __decorate$2([Property(null)], DropDownTree.prototype, \"text\", void 0);\n\n  __decorate$2([Complex({}, TreeSettings)], DropDownTree.prototype, \"treeSettings\", void 0);\n\n  __decorate$2([Property('Unselect All')], DropDownTree.prototype, \"unSelectAllText\", void 0);\n\n  __decorate$2([Property(null)], DropDownTree.prototype, \"value\", void 0);\n\n  __decorate$2([Property('100%')], DropDownTree.prototype, \"width\", void 0);\n\n  __decorate$2([Property(1000)], DropDownTree.prototype, \"zIndex\", void 0);\n\n  __decorate$2([Property(false)], DropDownTree.prototype, \"wrapText\", void 0);\n\n  __decorate$2([Event()], DropDownTree.prototype, \"actionFailure\", void 0);\n\n  __decorate$2([Event()], DropDownTree.prototype, \"beforeOpen\", void 0);\n\n  __decorate$2([Event()], DropDownTree.prototype, \"change\", void 0);\n\n  __decorate$2([Event()], DropDownTree.prototype, \"close\", void 0);\n\n  __decorate$2([Event()], DropDownTree.prototype, \"blur\", void 0);\n\n  __decorate$2([Event()], DropDownTree.prototype, \"created\", void 0);\n\n  __decorate$2([Event()], DropDownTree.prototype, \"dataBound\", void 0);\n\n  __decorate$2([Event()], DropDownTree.prototype, \"destroyed\", void 0);\n\n  __decorate$2([Event()], DropDownTree.prototype, \"filtering\", void 0);\n\n  __decorate$2([Event()], DropDownTree.prototype, \"focus\", void 0);\n\n  __decorate$2([Event()], DropDownTree.prototype, \"keyPress\", void 0);\n\n  __decorate$2([Event()], DropDownTree.prototype, \"open\", void 0);\n\n  __decorate$2([Event()], DropDownTree.prototype, \"select\", void 0);\n\n  DropDownTree = __decorate$2([NotifyPropertyChanges], DropDownTree);\n  return DropDownTree;\n}(Component);\n/**\n * export all modules from current location\n */\n\n\nvar __extends$3 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; // eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path='../drop-down-list/drop-down-list-model.d.ts'/>\n\n\nvar SPINNER_CLASS = 'e-atc-spinner-icon';\ndropDownListClasses.root = 'e-combobox';\nvar inputObject$1 = {\n  container: null,\n  buttons: []\n};\n/**\n * The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n * ```html\n * <select id=\"list\">\n *      <option value='1'>Badminton</option>\n *      <option value='2'>Basketball</option>\n *      <option value='3'>Cricket</option>\n *      <option value='4'>Football</option>\n *      <option value='5'>Tennis</option>\n * </select>\n * ```\n * ```typescript\n *   let games:ComboBox = new ComboBox();\n *   games.appendTo(\"#list\");\n * ```\n */\n\nvar ComboBox =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$3(ComboBox, _super);\n  /**\n   * *Constructor for creating the component\n   *\n   * @param {ComboBoxModel} options - Specifies the ComboBox model.\n   * @param {string | HTMLElement} element - Specifies the element to render as component.\n   * @private\n   */\n\n\n  function ComboBox(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\n   * Initialize the event handler\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  ComboBox.prototype.preRender = function () {\n    _super.prototype.preRender.call(this);\n  };\n\n  ComboBox.prototype.getLocaleName = function () {\n    return 'combo-box';\n  };\n\n  ComboBox.prototype.wireEvent = function () {\n    if (this.getModuleName() === 'combobox') {\n      EventHandler.add(this.inputWrapper.buttons[0], 'mousedown', this.preventBlur, this);\n      EventHandler.add(this.inputWrapper.container, 'blur', this.onBlurHandler, this);\n    }\n\n    if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {\n      EventHandler.add(this.inputWrapper.buttons[0], 'mousedown', this.dropDownClick, this);\n    }\n\n    EventHandler.add(this.inputElement, 'focus', this.targetFocus, this);\n\n    if (!this.readonly) {\n      EventHandler.add(this.inputElement, 'input', this.onInput, this);\n      EventHandler.add(this.inputElement, 'keyup', this.onFilterUp, this);\n      EventHandler.add(this.inputElement, 'keydown', this.onFilterDown, this);\n      EventHandler.add(this.inputElement, 'paste', this.pasteHandler, this);\n    }\n\n    this.bindCommonEvent();\n  };\n\n  ComboBox.prototype.preventBlur = function (e) {\n    if (!this.allowFiltering && document.activeElement !== this.inputElement && !document.activeElement.classList.contains(dropDownListClasses.input) && Browser.isDevice || !Browser.isDevice) {\n      e.preventDefault();\n    }\n  };\n\n  ComboBox.prototype.onBlurHandler = function (e) {\n    var inputValue = this.inputElement && this.inputElement.value === '' ? null : this.inputElement && this.inputElement.value;\n\n    if (!isNullOrUndefined(this.listData) && !isNullOrUndefined(inputValue) && inputValue !== this.text) {\n      this.customValue(e);\n    }\n\n    _super.prototype.onBlurHandler.call(this, e);\n  };\n\n  ComboBox.prototype.targetElement = function () {\n    return this.inputElement;\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  ComboBox.prototype.setOldText = function (text) {\n    Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n    this.customValue();\n    this.removeSelection();\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  ComboBox.prototype.setOldValue = function (value) {\n    if (this.allowCustom) {\n      this.valueMuteChange(this.value);\n    } else {\n      this.valueMuteChange(null);\n    }\n\n    this.removeSelection();\n    this.setHiddenValue();\n  };\n\n  ComboBox.prototype.valueMuteChange = function (value) {\n    var inputValue = isNullOrUndefined(value) ? null : value.toString();\n    Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);\n    this.setProperties({\n      value: value,\n      text: value,\n      index: null\n    }, true);\n    this.activeIndex = this.index;\n    var fields = this.fields;\n    var dataItem = {};\n    dataItem[fields.text] = isNullOrUndefined(value) ? null : value.toString();\n    dataItem[fields.value] = isNullOrUndefined(value) ? null : value.toString();\n    this.itemData = dataItem;\n    this.item = null;\n\n    if (this.previousValue !== this.value) {\n      this.detachChangeEvent(null);\n    }\n  };\n\n  ComboBox.prototype.updateValues = function () {\n    if (!isNullOrUndefined(this.value)) {\n      var li = this.getElementByValue(this.value);\n\n      if (li) {\n        this.setSelection(li, null);\n      } else if (this.allowCustom) {\n        this.valueMuteChange(this.value);\n      } else {\n        this.valueMuteChange(null);\n      }\n    } else if (this.text && isNullOrUndefined(this.value)) {\n      var li = this.getElementByText(this.text);\n\n      if (li) {\n        this.setSelection(li, null);\n      } else {\n        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n        this.customValue();\n      }\n    } else {\n      this.setSelection(this.liCollections[this.activeIndex], null);\n    }\n\n    this.setHiddenValue();\n    Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);\n  };\n\n  ComboBox.prototype.updateIconState = function () {\n    if (this.showClearButton) {\n      if (this.inputElement && this.inputElement.value !== '' && !this.readonly) {\n        removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n      } else {\n        addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);\n      }\n    }\n  };\n\n  ComboBox.prototype.getAriaAttributes = function () {\n    var ariaAttributes = {\n      'role': 'combobox',\n      'aria-autocomplete': 'both',\n      'aria-labelledby': this.hiddenElement.id,\n      'aria-expanded': 'false',\n      'aria-readonly': this.readonly.toString(),\n      'autocomplete': 'off',\n      'autocapitalize': 'off',\n      'spellcheck': 'false'\n    };\n    return ariaAttributes;\n  };\n\n  ComboBox.prototype.searchLists = function (e) {\n    this.isTyped = true;\n\n    if (this.isFiltering()) {\n      _super.prototype.searchLists.call(this, e);\n\n      if (this.ulElement && this.filterInput.value.trim() === '') {\n        this.setHoverList(this.ulElement.querySelector('.' + dropDownListClasses.li));\n      }\n    } else {\n      if (this.ulElement && this.inputElement.value === '' && this.preventAutoFill) {\n        this.setHoverList(this.ulElement.querySelector('.' + dropDownListClasses.li));\n      }\n\n      this.incrementalSearch(e);\n    }\n  };\n\n  ComboBox.prototype.getNgDirective = function () {\n    return 'EJS-COMBOBOX';\n  };\n\n  ComboBox.prototype.setSearchBox = function () {\n    this.filterInput = this.inputElement;\n    return this.isFiltering() ? this.inputWrapper : inputObject$1;\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  ComboBox.prototype.onActionComplete = function (ulElement, list, e, isUpdated) {\n    var _this = this;\n\n    _super.prototype.onActionComplete.call(this, ulElement, list, e);\n\n    if (this.isSelectCustom) {\n      this.removeSelection();\n    }\n\n    if (!this.preventAutoFill && this.getModuleName() === 'combobox' && this.isTyped) {\n      setTimeout(function () {\n        _this.inlineSearch();\n      });\n    }\n  };\n\n  ComboBox.prototype.getFocusElement = function () {\n    var dataItem = this.isSelectCustom ? {\n      text: ''\n    } : this.getItemData();\n    var selected = !isNullOrUndefined(this.list) ? this.list.querySelector('.' + dropDownListClasses.selected) : this.list;\n    var isSelected = dataItem.text === this.inputElement.value && !isNullOrUndefined(selected);\n\n    if (isSelected) {\n      return selected;\n    }\n\n    if ((Browser.isDevice && !this.isDropDownClick || !Browser.isDevice) && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0) {\n      var inputValue = this.inputElement.value;\n      var dataSource = this.sortedData;\n      var type = this.typeOfData(dataSource).typeof;\n      var activeItem = Search(inputValue, this.liCollections, this.filterType, true, dataSource, this.fields, type);\n      var activeElement = activeItem.item;\n\n      if (!isNullOrUndefined(activeElement)) {\n        var count = this.getIndexByValue(activeElement.getAttribute('data-value')) - 1;\n        var height = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue('height'), 10);\n\n        if (!isNaN(height) && this.getModuleName() !== 'autocomplete') {\n          this.removeFocus();\n          var fixedHead = this.fields.groupBy ? this.liCollections[0].offsetHeight : 0;\n          this.list.scrollTop = count * height + fixedHead;\n          addClass([activeElement], dropDownListClasses.focus);\n        }\n      } else {\n        if (this.isSelectCustom && this.inputElement.value.trim() !== '') {\n          this.removeFocus();\n          this.list.scrollTop = 0;\n        }\n      }\n\n      return activeElement;\n    } else {\n      return null;\n    }\n  };\n\n  ComboBox.prototype.setValue = function (e) {\n    if (e && e.type === 'keydown' && e.action === 'enter') {\n      this.removeFillSelection();\n    }\n\n    if (this.autofill && this.getModuleName() === 'combobox' && e && e.type === 'keydown' && e.action !== 'enter') {\n      this.preventAutoFill = false;\n      this.inlineSearch(e);\n      return false;\n    } else {\n      return _super.prototype.setValue.call(this, e);\n    }\n  };\n\n  ComboBox.prototype.checkCustomValue = function () {\n    this.itemData = this.getDataByValue(this.value);\n    var dataItem = this.getItemData();\n\n    if (!(this.allowCustom && isNullOrUndefined(dataItem.value) && isNullOrUndefined(dataItem.text))) {\n      this.setProperties({\n        'value': dataItem.value\n      }, !this.allowCustom);\n    }\n  };\n  /**\n   * Shows the spinner loader.\n   *\n   * @returns {void}\n   * @deprecated\n   */\n\n\n  ComboBox.prototype.showSpinner = function () {\n    if (isNullOrUndefined(this.spinnerElement)) {\n      this.spinnerElement = this.getModuleName() === 'autocomplete' ? this.inputWrapper.buttons[0] || this.inputWrapper.clearButton || Input.appendSpan('e-input-group-icon ' + SPINNER_CLASS, this.inputWrapper.container, this.createElement) : this.inputWrapper.buttons[0] || this.inputWrapper.clearButton;\n      addClass([this.spinnerElement], dropDownListClasses.disableIcon);\n      createSpinner({\n        target: this.spinnerElement,\n        width: Browser.isDevice ? '16px' : '14px'\n      }, this.createElement);\n      showSpinner(this.spinnerElement);\n    }\n  };\n  /**\n   * Hides the spinner loader.\n   *\n   * @returns {void}\n   * @deprecated\n   */\n\n\n  ComboBox.prototype.hideSpinner = function () {\n    if (!isNullOrUndefined(this.spinnerElement)) {\n      hideSpinner(this.spinnerElement);\n      removeClass([this.spinnerElement], dropDownListClasses.disableIcon);\n\n      if (this.spinnerElement.classList.contains(SPINNER_CLASS)) {\n        detach(this.spinnerElement);\n      } else {\n        this.spinnerElement.innerHTML = '';\n      }\n\n      this.spinnerElement = null;\n    }\n  };\n\n  ComboBox.prototype.setAutoFill = function (activeElement, isHover) {\n    if (!isHover) {\n      this.setHoverList(activeElement);\n    }\n\n    if (this.autofill && !this.preventAutoFill) {\n      var currentValue = this.getTextByValue(activeElement.getAttribute('data-value')).toString();\n      var currentFillValue = this.getFormattedValue(activeElement.getAttribute('data-value'));\n\n      if (this.getModuleName() === 'combobox') {\n        if (!this.isSelected && this.previousValue !== currentFillValue) {\n          this.updateSelectedItem(activeElement, null);\n          this.isSelected = true;\n          this.previousValue = this.getFormattedValue(activeElement.getAttribute('data-value'));\n        } else {\n          this.updateSelectedItem(activeElement, null, true);\n        }\n      }\n\n      if (!this.isAndroidAutoFill(currentValue)) {\n        this.setAutoFillSelection(currentValue, isHover);\n      }\n    }\n  };\n\n  ComboBox.prototype.isAndroidAutoFill = function (value) {\n    if (Browser.isAndroid) {\n      var currentPoints = this.getSelectionPoints();\n      var prevEnd = this.prevSelectPoints.end;\n      var curEnd = currentPoints.end;\n      var prevStart = this.prevSelectPoints.start;\n      var curStart = currentPoints.start;\n\n      if (prevEnd !== 0 && (prevEnd === value.length && prevStart === value.length || prevStart > curStart && prevEnd > curEnd || prevEnd === curEnd && prevStart === curStart)) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  };\n\n  ComboBox.prototype.clearAll = function (e, property) {\n    if (isNullOrUndefined(property) || !isNullOrUndefined(property) && isNullOrUndefined(property.dataSource)) {\n      _super.prototype.clearAll.call(this, e);\n    }\n\n    if (this.isFiltering() && !isNullOrUndefined(e) && e.target === this.inputWrapper.clearButton) {\n      this.searchLists(e);\n    }\n  };\n\n  ComboBox.prototype.isSelectFocusItem = function (element) {\n    return !isNullOrUndefined(element);\n  };\n\n  ComboBox.prototype.inlineSearch = function (e) {\n    var isKeyNavigate = e && (e.action === 'down' || e.action === 'up' || e.action === 'home' || e.action === 'end' || e.action === 'pageUp' || e.action === 'pageDown');\n    var activeElement = isKeyNavigate ? this.liCollections[this.activeIndex] : this.getFocusElement();\n\n    if (!isNullOrUndefined(activeElement)) {\n      if (!isKeyNavigate) {\n        var value = this.getFormattedValue(activeElement.getAttribute('data-value'));\n        this.activeIndex = this.getIndexByValue(value);\n        this.activeIndex = !isNullOrUndefined(this.activeIndex) ? this.activeIndex : null;\n      }\n\n      this.preventAutoFill = this.inputElement.value === '' ? false : this.preventAutoFill;\n      this.setAutoFill(activeElement, isKeyNavigate);\n    } else if (this.inputElement.value === '') {\n      this.activeIndex = null;\n\n      if (!isNullOrUndefined(this.list)) {\n        this.list.scrollTop = 0;\n        var focusItem = this.list.querySelector('.' + dropDownListClasses.li);\n        this.setHoverList(focusItem);\n      }\n    } else {\n      this.activeIndex = null;\n      this.removeSelection();\n\n      if (this.liCollections && this.liCollections.length > 0 && !this.isCustomFilter) {\n        this.removeFocus();\n      }\n    }\n  };\n\n  ComboBox.prototype.incrementalSearch = function (e) {\n    this.showPopup(e);\n\n    if (!isNullOrUndefined(this.listData)) {\n      this.inlineSearch(e);\n      e.preventDefault();\n    }\n  };\n\n  ComboBox.prototype.setAutoFillSelection = function (currentValue, isKeyNavigate) {\n    if (isKeyNavigate === void 0) {\n      isKeyNavigate = false;\n    }\n\n    var selection = this.getSelectionPoints();\n    var value = this.inputElement.value.substr(0, selection.start);\n\n    if (value && value.toLowerCase() === currentValue.substr(0, selection.start).toLowerCase()) {\n      var inputValue = value + currentValue.substr(value.length, currentValue.length);\n      Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);\n      this.inputElement.setSelectionRange(selection.start, this.inputElement.value.length);\n    } else if (isKeyNavigate) {\n      Input.setValue(currentValue, this.inputElement, this.floatLabelType, this.showClearButton);\n      this.inputElement.setSelectionRange(0, this.inputElement.value.length);\n    }\n  };\n\n  ComboBox.prototype.getValueByText = function (text) {\n    return _super.prototype.getValueByText.call(this, text, true, this.ignoreAccent);\n  };\n\n  ComboBox.prototype.unWireEvent = function () {\n    if (this.getModuleName() === 'combobox') {\n      EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown', this.preventBlur);\n      EventHandler.remove(this.inputWrapper.container, 'blur', this.onBlurHandler);\n    }\n\n    if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {\n      EventHandler.remove(this.inputWrapper.buttons[0], 'mousedown', this.dropDownClick);\n    }\n\n    if (this.inputElement) {\n      EventHandler.remove(this.inputElement, 'focus', this.targetFocus);\n\n      if (!this.readonly) {\n        EventHandler.remove(this.inputElement, 'input', this.onInput);\n        EventHandler.remove(this.inputElement, 'keyup', this.onFilterUp);\n        EventHandler.remove(this.inputElement, 'keydown', this.onFilterDown);\n        EventHandler.remove(this.inputElement, 'paste', this.pasteHandler);\n      }\n    }\n\n    this.unBindCommonEvent();\n  };\n\n  ComboBox.prototype.setSelection = function (li, e) {\n    _super.prototype.setSelection.call(this, li, e);\n\n    if (!isNullOrUndefined(li) && !this.autofill && !this.isDropDownClick) {\n      this.removeFocus();\n    }\n  };\n\n  ComboBox.prototype.selectCurrentItem = function (e) {\n    var li;\n\n    if (this.isPopupOpen) {\n      if (this.isSelected) {\n        li = this.list.querySelector('.' + dropDownListClasses.selected);\n      } else {\n        li = this.list.querySelector('.' + dropDownListClasses.focus);\n      }\n\n      if (li) {\n        this.setSelection(li, e);\n        this.isTyped = false;\n      }\n\n      if (this.isSelected) {\n        this.isSelectCustom = false;\n        this.onChangeEvent(e);\n      }\n    }\n\n    if (e.action === 'enter' && this.inputElement.value.trim() === '') {\n      this.clearAll(e);\n    } else if (this.isTyped && !this.isSelected && isNullOrUndefined(li)) {\n      this.customValue(e);\n    }\n\n    this.hidePopup(e);\n  };\n\n  ComboBox.prototype.setHoverList = function (li) {\n    this.removeSelection();\n\n    if (this.isValidLI(li) && !li.classList.contains(dropDownListClasses.selected)) {\n      this.removeFocus();\n      li.classList.add(dropDownListClasses.focus);\n    }\n  };\n\n  ComboBox.prototype.targetFocus = function (e) {\n    if (Browser.isDevice && !this.allowFiltering) {\n      this.preventFocus = false;\n    }\n\n    this.onFocus(e);\n    Input.calculateWidth(this.inputElement, this.inputWrapper.container);\n  };\n\n  ComboBox.prototype.dropDownClick = function (e) {\n    e.preventDefault();\n\n    if (Browser.isDevice && !this.isFiltering()) {\n      this.preventFocus = true;\n    }\n\n    _super.prototype.dropDownClick.call(this, e);\n  };\n\n  ComboBox.prototype.customValue = function (e) {\n    var _this = this;\n\n    var value = this.getValueByText(this.inputElement.value);\n\n    if (!this.allowCustom && this.inputElement.value !== '') {\n      var previousValue = this.previousValue;\n      var currentValue = this.value;\n      this.setProperties({\n        value: value\n      });\n\n      if (isNullOrUndefined(this.value)) {\n        Input.setValue('', this.inputElement, this.floatLabelType, this.showClearButton);\n      }\n\n      if (this.autofill && previousValue === this.value && currentValue !== this.value) {\n        this.onChangeEvent(null);\n      }\n    } else if (this.inputElement.value.trim() !== '') {\n      var previousValue_1 = this.value;\n\n      if (isNullOrUndefined(value)) {\n        var value_1 = this.inputElement.value === '' ? null : this.inputElement.value; // eslint-disable-next-line max-len\n\n        var eventArgs = {\n          text: value_1,\n          item: {}\n        };\n\n        if (!this.initial) {\n          this.trigger('customValueSpecifier', eventArgs, function (eventArgs) {\n            _this.updateCustomValueCallback(value_1, eventArgs, previousValue_1, e);\n          });\n        } else {\n          this.updateCustomValueCallback(value_1, eventArgs, previousValue_1);\n        }\n      } else {\n        this.isSelectCustom = false;\n        this.setProperties({\n          value: value\n        });\n\n        if (previousValue_1 !== this.value) {\n          this.onChangeEvent(e);\n        }\n      }\n    } else if (this.allowCustom) {\n      this.isSelectCustom = true;\n    }\n  };\n\n  ComboBox.prototype.updateCustomValueCallback = function (value, eventArgs, previousValue, e) {\n    var fields = this.fields;\n    var item = eventArgs.item;\n    var dataItem = {};\n\n    if (item && getValue(fields.text, item) && getValue(fields.value, item)) {\n      dataItem = item;\n    } else {\n      setValue(fields.text, value, dataItem);\n      setValue(fields.value, value, dataItem);\n    }\n\n    this.itemData = dataItem;\n    var changeData = {\n      text: getValue(fields.text, this.itemData),\n      value: getValue(fields.value, this.itemData),\n      index: null\n    };\n    this.setProperties(changeData, true);\n    this.setSelection(null, null);\n    this.isSelectCustom = true;\n\n    if (previousValue !== this.value) {\n      this.onChangeEvent(e);\n    }\n  };\n  /**\n   * Dynamically change the value of properties.\n   *\n   * @param {ComboBoxModel} newProp - Returns the dynamic property value of the component.\n   * @param {ComboBoxModel} oldProp - Returns the previous property value of the component.\n   * @private\n   * @returns {void}\n   */\n\n\n  ComboBox.prototype.onPropertyChanged = function (newProp, oldProp) {\n    if (this.getModuleName() === 'combobox') {\n      this.checkData(newProp);\n      this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n    }\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'readonly':\n          Input.setReadonly(this.readonly, this.inputElement);\n\n          if (this.readonly) {\n            EventHandler.remove(this.inputElement, 'input', this.onInput);\n            EventHandler.remove(this.inputElement, 'keyup', this.onFilterUp);\n            EventHandler.remove(this.inputElement, 'keydown', this.onFilterDown);\n          } else {\n            EventHandler.add(this.inputElement, 'input', this.onInput, this);\n            EventHandler.add(this.inputElement, 'keyup', this.onFilterUp, this);\n            EventHandler.add(this.inputElement, 'keydown', this.onFilterDown, this);\n          }\n\n          this.setReadOnly();\n          break;\n\n        case 'allowFiltering':\n          this.setSearchBox();\n\n          if (this.isFiltering() && this.getModuleName() === 'combobox' && isNullOrUndefined(this.list)) {\n            _super.prototype.renderList.call(this);\n          }\n\n          break;\n\n        case 'allowCustom':\n          break;\n\n        default:\n          {\n            // eslint-disable-next-line max-len\n            var comboProps = this.getPropObject(prop, newProp, oldProp);\n\n            _super.prototype.onPropertyChanged.call(this, comboProps.newProperty, comboProps.oldProperty);\n\n            if (this.isFiltering() && prop === 'dataSource' && isNullOrUndefined(this.list) && this.itemTemplate && this.getModuleName() === 'combobox') {\n              _super.prototype.renderList.call(this);\n            }\n\n            break;\n          }\n      }\n    }\n  };\n  /**\n   * To initialize the control rendering.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  ComboBox.prototype.render = function () {\n    _super.prototype.render.call(this);\n\n    this.setSearchBox();\n\n    if (this.isFiltering() && this.getModuleName() === 'combobox' && isNullOrUndefined(this.list)) {\n      _super.prototype.renderList.call(this);\n    }\n\n    this.renderComplete();\n  };\n  /**\n   * Return the module name of this component.\n   *\n   * @private\n   * @returns {string} Return the module name of this component.\n   */\n\n\n  ComboBox.prototype.getModuleName = function () {\n    return 'combobox';\n  };\n  /**\n   * Adds a new item to the combobox popup list. By default, new item appends to the list as the last item,\n   * but you can insert based on the index parameter.\n   *\n   * @param { Object[] } items - Specifies an array of JSON data or a JSON data.\n   * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n   * @returns {void}\n   * @deprecated\n   */\n\n\n  ComboBox.prototype.addItem = function (items, itemIndex) {\n    _super.prototype.addItem.call(this, items, itemIndex);\n  };\n  /**\n   * To filter the data from given data source by using query\n   *\n   * @param {Object[] | DataManager } dataSource - Set the data source to filter.\n   * @param {Query} query - Specify the query to filter the data.\n   * @param {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n   * @returns {void}\n   * @deprecated\n   */\n\n\n  ComboBox.prototype.filter = function (dataSource, query, fields) {\n    _super.prototype.filter.call(this, dataSource, query, fields);\n  };\n  /* eslint-disable valid-jsdoc, jsdoc/require-param */\n\n  /**\n   * Opens the popup that displays the list of items.\n   *\n   * @returns {void}\n   * @deprecated\n   */\n\n\n  ComboBox.prototype.showPopup = function (e) {\n    /* eslint-enable valid-jsdoc, jsdoc/require-param */\n    _super.prototype.showPopup.call(this, e);\n  };\n  /* eslint-disable valid-jsdoc, jsdoc/require-param */\n\n  /**\n   * Hides the popup if it is in open state.\n   *\n   * @returns {void}\n   * @deprecated\n   */\n\n\n  ComboBox.prototype.hidePopup = function (e) {\n    /* eslint-enable valid-jsdoc, jsdoc/require-param */\n    var inputValue = this.inputElement && this.inputElement.value === '' ? null : this.inputElement && this.inputElement.value;\n\n    if (!isNullOrUndefined(this.listData)) {\n      var isEscape = this.isEscapeKey;\n\n      if (this.isEscapeKey) {\n        Input.setValue(this.typedString, this.inputElement, this.floatLabelType, this.showClearButton);\n        this.isEscapeKey = false;\n      }\n\n      if (this.autofill) {\n        this.removeFillSelection();\n      }\n\n      var dataItem = this.isSelectCustom ? {\n        text: ''\n      } : this.getItemData();\n      var selected = !isNullOrUndefined(this.list) ? this.list.querySelector('.' + dropDownListClasses.selected) : null;\n\n      if (this.inputElement && dataItem.text === this.inputElement.value && !isNullOrUndefined(selected)) {\n        if (this.isSelected) {\n          this.onChangeEvent(e);\n          this.isSelectCustom = false;\n        }\n\n        _super.prototype.hidePopup.call(this, e);\n\n        return;\n      }\n\n      if (this.getModuleName() === 'combobox' && this.inputElement.value.trim() !== '') {\n        var dataSource = this.sortedData;\n        var type = this.typeOfData(dataSource).typeof;\n        var searchItem = Search(this.inputElement.value, this.liCollections, 'Equal', true, dataSource, this.fields, type);\n        this.selectedLI = searchItem.item;\n\n        if (isNullOrUndefined(searchItem.index)) {\n          searchItem.index = Search(this.inputElement.value, this.liCollections, 'StartsWith', true, dataSource, this.fields, type).index;\n        }\n\n        this.activeIndex = searchItem.index;\n\n        if (!isNullOrUndefined(this.selectedLI)) {\n          this.updateSelectedItem(this.selectedLI, null, true);\n        } else if (isEscape) {\n          this.isSelectCustom = true;\n          this.removeSelection();\n        }\n      }\n\n      if (!this.isEscapeKey && this.isTyped && !this.isInteracted) {\n        this.customValue(e);\n      }\n    }\n\n    if (isNullOrUndefined(this.listData) && this.allowCustom && !isNullOrUndefined(inputValue) && inputValue !== this.value) {\n      this.customValue();\n    }\n\n    _super.prototype.hidePopup.call(this, e);\n  };\n  /**\n   * Sets the focus to the component for interaction.\n   *\n   * @returns {void}\n   */\n\n\n  ComboBox.prototype.focusIn = function () {\n    if (!this.enabled) {\n      return;\n    }\n\n    if (Browser.isDevice && !this.isFiltering()) {\n      this.preventFocus = true;\n    }\n\n    _super.prototype.focusIn.call(this);\n  };\n  /**\n   * Allows you to clear the selected values from the component.\n   *\n   * @returns {void}\n   * @deprecated\n   */\n\n\n  ComboBox.prototype.clear = function () {\n    this.value = null;\n  };\n  /* eslint-disable valid-jsdoc, jsdoc/require-param */\n\n  /**\n   * Moves the focus from the component if the component is already focused.\n   *\n   * @returns {void}\n   * @deprecated\n   */\n\n\n  ComboBox.prototype.focusOut = function (e) {\n    /* eslint-enable valid-jsdoc, jsdoc/require-param */\n    _super.prototype.focusOut.call(this, e);\n  };\n  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Gets all the list items bound on this component.\n   *\n   * @returns {Element[]}\n   * @deprecated\n   */\n\n\n  ComboBox.prototype.getItems = function () {\n    return _super.prototype.getItems.call(this);\n  };\n  /**\n   * Gets the data Object that matches the given value.\n   *\n   * @param { string | number } value - Specifies the value of the list item.\n   * @returns {Object}\n   * @deprecated\n   */\n\n\n  ComboBox.prototype.getDataByValue = function (value) {\n    return _super.prototype.getDataByValue.call(this, value);\n  };\n  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n\n\n  ComboBox.prototype.renderHightSearch = function () {// update high light search\n  };\n\n  __decorate$3([Property(false)], ComboBox.prototype, \"autofill\", void 0);\n\n  __decorate$3([Property(true)], ComboBox.prototype, \"allowCustom\", void 0);\n\n  __decorate$3([Property({})], ComboBox.prototype, \"htmlAttributes\", void 0);\n\n  __decorate$3([Property(false)], ComboBox.prototype, \"allowFiltering\", void 0);\n\n  __decorate$3([Property(null)], ComboBox.prototype, \"query\", void 0);\n\n  __decorate$3([Property(null)], ComboBox.prototype, \"index\", void 0);\n\n  __decorate$3([Property(true)], ComboBox.prototype, \"showClearButton\", void 0);\n\n  __decorate$3([Property(false)], ComboBox.prototype, \"enableRtl\", void 0);\n\n  __decorate$3([Event()], ComboBox.prototype, \"customValueSpecifier\", void 0);\n\n  __decorate$3([Event()], ComboBox.prototype, \"filtering\", void 0);\n\n  __decorate$3([Property(null)], ComboBox.prototype, \"valueTemplate\", void 0);\n\n  __decorate$3([Property('Never')], ComboBox.prototype, \"floatLabelType\", void 0);\n\n  __decorate$3([Property(null)], ComboBox.prototype, \"filterBarPlaceholder\", void 0);\n\n  __decorate$3([Property(null)], ComboBox.prototype, \"cssClass\", void 0);\n\n  __decorate$3([Property(null)], ComboBox.prototype, \"headerTemplate\", void 0);\n\n  __decorate$3([Property(null)], ComboBox.prototype, \"footerTemplate\", void 0);\n\n  __decorate$3([Property(null)], ComboBox.prototype, \"placeholder\", void 0);\n\n  __decorate$3([Property('100%')], ComboBox.prototype, \"width\", void 0);\n\n  __decorate$3([Property('300px')], ComboBox.prototype, \"popupHeight\", void 0);\n\n  __decorate$3([Property('100%')], ComboBox.prototype, \"popupWidth\", void 0);\n\n  __decorate$3([Property(false)], ComboBox.prototype, \"readonly\", void 0);\n\n  __decorate$3([Property(null)], ComboBox.prototype, \"text\", void 0);\n\n  __decorate$3([Property(null)], ComboBox.prototype, \"value\", void 0);\n\n  ComboBox = __decorate$3([NotifyPropertyChanges], ComboBox);\n  return ComboBox;\n}(DropDownList);\n/**\n * export all modules from current location\n */\n\n\nvar __extends$4 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$4 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; // eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path='../combo-box/combo-box-model.d.ts'/>\n\n\ndropDownListClasses.root = 'e-autocomplete';\ndropDownListClasses.icon = 'e-input-group-icon e-ddl-icon e-search-icon';\n/**\n * The AutoComplete component provides the matched suggestion list when type into the input,\n * from which the user can select one.\n * ```html\n * <input id=\"list\" type=\"text\"/>\n * ```\n * ```typescript\n *   let atcObj:AutoComplete = new AutoComplete();\n *   atcObj.appendTo(\"#list\");\n * ```\n */\n\nvar AutoComplete =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$4(AutoComplete, _super);\n  /**\n   * * Constructor for creating the widget\n   *\n   * @param {AutoCompleteModel} options - Specifies the AutoComplete model.\n   * @param {string | HTMLElement} element - Specifies the element to render as component.\n   * @private\n   */\n\n\n  function AutoComplete(options, element) {\n    var _this_1 = _super.call(this, options, element) || this;\n\n    _this_1.isFiltered = false;\n    _this_1.searchList = false;\n    return _this_1;\n  }\n  /**\n   * Initialize the event handler\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  AutoComplete.prototype.preRender = function () {\n    _super.prototype.preRender.call(this);\n  };\n\n  AutoComplete.prototype.getLocaleName = function () {\n    return 'auto-complete';\n  };\n\n  AutoComplete.prototype.getNgDirective = function () {\n    return 'EJS-AUTOCOMPLETE';\n  };\n\n  AutoComplete.prototype.getQuery = function (query) {\n    var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n    var filterType = this.queryString === '' && !isNullOrUndefined(this.value) ? 'equal' : this.filterType;\n    var queryString = this.queryString === '' && !isNullOrUndefined(this.value) ? this.value : this.queryString;\n\n    if (this.isFiltered) {\n      return filterQuery;\n    }\n\n    if (this.queryString !== null && this.queryString !== '') {\n      var dataType = this.typeOfData(this.dataSource).typeof;\n\n      if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n        filterQuery.where('', filterType, queryString, this.ignoreCase, this.ignoreAccent);\n      } else {\n        var mapping = !isNullOrUndefined(this.fields.value) ? this.fields.value : '';\n        filterQuery.where(mapping, filterType, queryString, this.ignoreCase, this.ignoreAccent);\n      }\n    }\n\n    if (!isNullOrUndefined(this.suggestionCount)) {\n      // Since defualt value of suggestioncount is 20, checked the condition\n      if (this.suggestionCount !== 20) {\n        for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {\n          if (filterQuery.queries[queryElements].fn === 'onTake') {\n            filterQuery.queries.splice(queryElements, 1);\n          }\n        }\n      }\n\n      filterQuery.take(this.suggestionCount);\n    }\n\n    return filterQuery;\n  };\n\n  AutoComplete.prototype.searchLists = function (e) {\n    var _this_1 = this;\n\n    this.isTyped = true;\n    this.isDataFetched = this.isSelectCustom = false;\n\n    if (isNullOrUndefined(this.list)) {\n      _super.prototype.renderList.call(this, e, true);\n    }\n\n    this.queryString = this.filterInput.value;\n\n    if (e.type !== 'mousedown' && (e.keyCode === 40 || e.keyCode === 38)) {\n      this.queryString = this.queryString === '' ? null : this.queryString;\n      this.beforePopupOpen = true;\n      this.resetList(this.dataSource, this.fields, null, e);\n      return;\n    }\n\n    this.isSelected = false;\n    this.activeIndex = null;\n    var eventArgs = {\n      preventDefaultAction: false,\n      text: this.filterInput.value,\n      updateData: function (dataSource, query, fields) {\n        if (eventArgs.cancel) {\n          return;\n        }\n\n        _this_1.isFiltered = true;\n\n        _this_1.filterAction(dataSource, query, fields);\n      },\n      cancel: false\n    };\n    this.trigger('filtering', eventArgs, function (eventArgs) {\n      if (!eventArgs.cancel && !_this_1.isFiltered && !eventArgs.preventDefaultAction) {\n        _this_1.searchList = true;\n\n        _this_1.filterAction(_this_1.dataSource, null, _this_1.fields, e);\n      }\n    });\n  };\n  /**\n   * To filter the data from given data source by using query\n   *\n   * @param {Object[] | DataManager } dataSource - Set the data source to filter.\n   * @param {Query} query - Specify the query to filter the data.\n   * @param {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n   * @returns {void}\n   * @deprecated\n   */\n\n\n  AutoComplete.prototype.filter = function (dataSource, query, fields) {\n    this.isFiltered = true;\n    this.filterAction(dataSource, query, fields);\n  };\n\n  AutoComplete.prototype.filterAction = function (dataSource, query, fields, e) {\n    this.beforePopupOpen = true;\n\n    if (this.queryString !== '' && this.queryString.length >= this.minLength) {\n      this.resetList(dataSource, fields, query, e);\n    } else {\n      this.hidePopup(e);\n      this.beforePopupOpen = false;\n    }\n\n    this.renderReactTemplates();\n  };\n\n  AutoComplete.prototype.clearAll = function (e, property) {\n    if (isNullOrUndefined(property) || !isNullOrUndefined(property) && isNullOrUndefined(property.dataSource)) {\n      _super.prototype.clearAll.call(this, e);\n    }\n\n    if (this.beforePopupOpen) {\n      this.hidePopup();\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  AutoComplete.prototype.onActionComplete = function (ulElement, list, e, isUpdated) {\n    this.fixedHeaderElement = null;\n\n    _super.prototype.onActionComplete.call(this, ulElement, list, e);\n\n    var item = this.list.querySelector('.' + dropDownListClasses.li);\n\n    if (!isNullOrUndefined(item)) {\n      removeClass([item], dropDownListClasses.focus);\n    }\n\n    this.postBackAction();\n  };\n\n  AutoComplete.prototype.postBackAction = function () {\n    if (this.autofill && !isNullOrUndefined(this.liCollections[0]) && this.searchList) {\n      var items = [this.liCollections[0]];\n      var dataSource = this.listData;\n      var type = this.typeOfData(dataSource).typeof;\n      var searchItem = Search(this.inputElement.value, items, 'StartsWith', this.ignoreCase, dataSource, this.fields, type);\n      this.searchList = false;\n\n      if (!isNullOrUndefined(searchItem.item)) {\n        _super.prototype.setAutoFill.call(this, this.liCollections[0], true);\n      }\n    }\n  };\n\n  AutoComplete.prototype.setSelection = function (li, e) {\n    if (!this.isValidLI(li)) {\n      this.selectedLI = li;\n      return;\n    }\n\n    if (!isNullOrUndefined(e) && e.type === 'keydown' && e.action !== 'enter' && e.action !== 'tab' && this.isValidLI(li)) {\n      var value = this.getFormattedValue(li.getAttribute('data-value'));\n      this.activeIndex = this.getIndexByValue(value);\n      this.setHoverList(li);\n      this.selectedLI = li;\n      this.setScrollPosition(e);\n\n      if (this.autofill && this.isPopupOpen) {\n        this.preventAutoFill = false;\n        var isKeyNavigate = e && e.action === 'down' || e.action === 'up' || e.action === 'home' || e.action === 'end' || e.action === 'pageUp' || e.action === 'pageDown';\n\n        _super.prototype.setAutoFill.call(this, li, isKeyNavigate);\n      }\n    } else {\n      _super.prototype.setSelection.call(this, li, e);\n    }\n  };\n\n  AutoComplete.prototype.listOption = function (dataSource, fieldsSettings) {\n    var _this_1 = this;\n\n    var fields = _super.prototype.listOption.call(this, dataSource, fieldsSettings);\n\n    if (isNullOrUndefined(fields.itemCreated)) {\n      fields.itemCreated = function (e) {\n        if (_this_1.highlight) {\n          if (_this_1.element.tagName === _this_1.getNgDirective() && _this_1.itemTemplate) {\n            setTimeout(function () {\n              highlightSearch(e.item, _this_1.queryString, _this_1.ignoreCase, _this_1.filterType);\n            }, 0);\n          } else {\n            highlightSearch(e.item, _this_1.queryString, _this_1.ignoreCase, _this_1.filterType);\n          }\n        }\n      };\n    } else {\n      var itemCreated_1 = fields.itemCreated;\n\n      fields.itemCreated = function (e) {\n        if (_this_1.highlight) {\n          highlightSearch(e.item, _this_1.queryString, _this_1.ignoreCase, _this_1.filterType);\n        }\n\n        itemCreated_1.apply(_this_1, [e]);\n      };\n    }\n\n    return fields;\n  };\n\n  AutoComplete.prototype.isFiltering = function () {\n    return true;\n  };\n\n  AutoComplete.prototype.renderPopup = function (e) {\n    this.list.scrollTop = 0;\n\n    _super.prototype.renderPopup.call(this, e);\n  };\n\n  AutoComplete.prototype.isEditTextBox = function () {\n    return true && this.inputElement.value.trim() !== '';\n  };\n\n  AutoComplete.prototype.isPopupButton = function () {\n    return this.showPopupButton;\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  AutoComplete.prototype.isSelectFocusItem = function (element) {\n    return false;\n  };\n\n  AutoComplete.prototype.setInputValue = function (newProp, oldProp) {\n    var oldValue = oldProp && oldProp.text ? oldProp.text : oldProp ? oldProp.value : oldProp;\n    var value = newProp && newProp.text ? newProp.text : newProp && newProp.value ? newProp.value : this.value;\n\n    if (value && this.typedString === '' && !this.allowCustom && !(this.dataSource instanceof DataManager)) {\n      var checkFields_1_1 = this.typeOfData(this.dataSource).typeof === 'string' ? '' : this.fields.value;\n      var listLength_1 = this.getItems().length;\n      var query = new Query();\n\n      var _this_2 = this;\n\n      new DataManager(this.dataSource).executeQuery(query.where(new Predicate(checkFields_1_1, 'equal', value))).then(function (e) {\n        if (e.result.length > 0) {\n          _this_2.value = checkFields_1_1 !== '' ? e.result[0][_this_2.fields.value].toString() : e.result[0].toString();\n\n          _this_2.addItem(e.result, listLength_1);\n\n          _this_2.updateValues();\n        } else {\n          newProp && newProp.text ? _this_2.setOldText(oldValue) : newProp && newProp.value ? _this_2.setOldValue(oldValue) : _this_2.updateValues();\n        }\n      });\n    } else if (newProp) {\n      newProp.text ? this.setOldText(oldValue) : this.setOldValue(oldValue);\n    }\n  };\n  /**\n   * Search the entered text and show it in the suggestion list if available.\n   *\n   * @returns {void}\n   * @deprecated\n   */\n\n\n  AutoComplete.prototype.showPopup = function (e) {\n    if (!this.enabled) {\n      return;\n    }\n\n    if (this.beforePopupOpen) {\n      this.refreshPopup();\n      return;\n    }\n\n    this.beforePopupOpen = true;\n    this.preventAutoFill = true;\n\n    if (isNullOrUndefined(this.list)) {\n      this.renderList(e);\n    } else {\n      this.resetList(this.dataSource, this.fields, null, e);\n    }\n  };\n  /**\n   * Hides the popup if it is in open state.\n   *\n   * @returns {void}\n   */\n\n\n  AutoComplete.prototype.hidePopup = function (e) {\n    _super.prototype.hidePopup.call(this, e);\n\n    this.activeIndex = -1;\n  };\n  /**\n   * Dynamically change the value of properties.\n   *\n   * @param {AutoCompleteModel} newProp - Returns the dynamic property value of the component.\n   * @param {AutoCompleteModel} oldProp - Returns the previous property value of the component.\n   * @private\n   * @returns {void}\n   */\n\n\n  AutoComplete.prototype.onPropertyChanged = function (newProp, oldProp) {\n    if (this.getModuleName() === 'autocomplete') {\n      this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n    }\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'showPopupButton':\n          if (this.showPopupButton) {\n            var button = Input.appendSpan(dropDownListClasses.icon, this.inputWrapper.container, this.createElement);\n            this.inputWrapper.buttons[0] = button;\n            Input.calculateWidth(this.inputElement, this.inputWrapper.container);\n\n            if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName('e-float-text-overflow')[0]) && this.floatLabelType !== 'Never') {\n              this.inputWrapper.container.getElementsByClassName('e-float-text-overflow')[0].classList.add('e-icon');\n            }\n\n            if (this.inputWrapper && this.inputWrapper.buttons && this.inputWrapper.buttons[0]) {\n              EventHandler.add(this.inputWrapper.buttons[0], 'click', this.dropDownClick, this);\n            }\n          } else {\n            detach(this.inputWrapper.buttons[0]);\n            this.inputWrapper.buttons[0] = null;\n          }\n\n          break;\n\n        default:\n          {\n            // eslint-disable-next-line max-len\n            var atcProps = this.getPropObject(prop, newProp, oldProp);\n\n            _super.prototype.onPropertyChanged.call(this, atcProps.newProperty, atcProps.oldProperty);\n\n            break;\n          }\n      }\n    }\n  };\n\n  AutoComplete.prototype.renderHightSearch = function () {\n    if (this.highlight) {\n      for (var i = 0; i < this.liCollections.length; i++) {\n        var isHighlight = this.ulElement.querySelector('.e-active');\n\n        if (!isHighlight) {\n          revertHighlightSearch(this.liCollections[i]);\n          highlightSearch(this.liCollections[i], this.queryString, this.ignoreCase, this.filterType);\n        }\n      }\n    }\n  };\n  /**\n   * Return the module name of this component.\n   *\n   * @private\n   * @returns {string} Return the module name of this component.\n   */\n\n\n  AutoComplete.prototype.getModuleName = function () {\n    return 'autocomplete';\n  };\n  /**\n   * To initialize the control rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  AutoComplete.prototype.render = function () {\n    _super.prototype.render.call(this);\n  };\n\n  __decorate$4([Complex({\n    value: null,\n    iconCss: null,\n    groupBy: null\n  }, FieldSettings)], AutoComplete.prototype, \"fields\", void 0);\n\n  __decorate$4([Property(true)], AutoComplete.prototype, \"ignoreCase\", void 0);\n\n  __decorate$4([Property(false)], AutoComplete.prototype, \"showPopupButton\", void 0);\n\n  __decorate$4([Property(false)], AutoComplete.prototype, \"highlight\", void 0);\n\n  __decorate$4([Property(20)], AutoComplete.prototype, \"suggestionCount\", void 0);\n\n  __decorate$4([Property({})], AutoComplete.prototype, \"htmlAttributes\", void 0);\n\n  __decorate$4([Property(null)], AutoComplete.prototype, \"query\", void 0);\n\n  __decorate$4([Property(1)], AutoComplete.prototype, \"minLength\", void 0);\n\n  __decorate$4([Property('Contains')], AutoComplete.prototype, \"filterType\", void 0);\n\n  __decorate$4([Event()], AutoComplete.prototype, \"filtering\", void 0);\n\n  __decorate$4([Property(null)], AutoComplete.prototype, \"index\", void 0);\n\n  __decorate$4([Property('Never')], AutoComplete.prototype, \"floatLabelType\", void 0);\n\n  __decorate$4([Property(null)], AutoComplete.prototype, \"valueTemplate\", void 0);\n\n  __decorate$4([Property(null)], AutoComplete.prototype, \"filterBarPlaceholder\", void 0);\n\n  __decorate$4([Property(false)], AutoComplete.prototype, \"allowFiltering\", void 0);\n\n  __decorate$4([Property(null)], AutoComplete.prototype, \"text\", void 0);\n\n  AutoComplete = __decorate$4([NotifyPropertyChanges], AutoComplete);\n  return AutoComplete;\n}(ComboBox);\n/**\n * export all modules from current location\n */\n\n/**\n * FloatLable Moduel\n * Specifies whether to display the floating label above the input element.\n */\n\n\nvar FLOATLINE = 'e-float-line';\nvar FLOATTEXT = 'e-float-text';\nvar LABELTOP = 'e-label-top';\nvar LABELBOTTOM = 'e-label-bottom';\n/* eslint-disable valid-jsdoc */\n\n/**\n * Function to create Float Label element.\n *\n * @param {HTMLDivElement} overAllWrapper - Overall wrapper of multiselect.\n * @param {HTMLElement} searchWrapper - Search wrapper of multiselect.\n * @param {HTMLElement} element - The given html element.\n * @param {HTMLInputElement} inputElement - Specify the input wrapper.\n * @param {number[] | string[] | boolean[]} value - Value of the MultiSelect.\n * @param {FloatLabelType} floatLabelType - Specify the FloatLabel Type.\n * @param {string} placeholder - Specify the PlaceHolder text.\n */\n\nfunction createFloatLabel(overAllWrapper, searchWrapper, element, inputElement, value, floatLabelType, placeholder) {\n  var floatLinelement = createElement('span', {\n    className: FLOATLINE\n  });\n  var floatLabelElement = createElement('label', {\n    className: FLOATTEXT\n  });\n  var id = element.getAttribute('id') ? element.getAttribute('id') : getUniqueID('ej2_multiselect');\n  element.id = id;\n\n  if (!isNullOrUndefined(element.id) && element.id !== '') {\n    floatLabelElement.id = 'label_' + element.id.replace(/ /g, '_');\n    attributes(inputElement, {\n      'aria-labelledby': floatLabelElement.id\n    });\n  }\n\n  if (!isNullOrUndefined(inputElement.placeholder) && inputElement.placeholder !== '') {\n    floatLabelElement.innerText = encodePlaceholder(inputElement.placeholder);\n    inputElement.removeAttribute('placeholder');\n  }\n\n  floatLabelElement.innerText = encodePlaceholder(placeholder);\n  searchWrapper.appendChild(floatLinelement);\n  searchWrapper.appendChild(floatLabelElement);\n  overAllWrapper.classList.add('e-float-input');\n  updateFloatLabelState(value, floatLabelElement);\n\n  if (floatLabelType === 'Always') {\n    if (floatLabelElement.classList.contains(LABELBOTTOM)) {\n      removeClass([floatLabelElement], LABELBOTTOM);\n    }\n\n    addClass([floatLabelElement], LABELTOP);\n  }\n}\n/**\n * Function to update status of the Float Label element.\n *\n * @param {string[] | number[] | boolean[]} value - Value of the MultiSelect.\n * @param {HTMLElement} label - Float label element.\n */\n\n\nfunction updateFloatLabelState(value, label) {\n  if (value && value.length > 0) {\n    addClass([label], LABELTOP);\n    removeClass([label], LABELBOTTOM);\n  } else {\n    removeClass([label], LABELTOP);\n    addClass([label], LABELBOTTOM);\n  }\n}\n/**\n * Function to remove Float Label element.\n *\n * @param {HTMLDivElement} overAllWrapper - Overall wrapper of multiselect.\n * @param {HTMLDivElement} componentWrapper - Wrapper element of multiselect.\n * @param {HTMLElement} searchWrapper - Search wrapper of multiselect.\n * @param {HTMLInputElement} inputElement - Specify the input wrapper.\n * @param {number[] | string[] | boolean[]} value - Value of the MultiSelect.\n * @param {FloatLabelType} floatLabelType - Specify the FloatLabel Type.\n * @param {string} placeholder - Specify the PlaceHolder text.\n */\n\n\nfunction removeFloating(overAllWrapper, componentWrapper, searchWrapper, inputElement, value, floatLabelType, placeholder) {\n  var placeholderElement = componentWrapper.querySelector('.' + FLOATTEXT);\n  var floatLine = componentWrapper.querySelector('.' + FLOATLINE);\n  var placeholderText;\n\n  if (!isNullOrUndefined(placeholderElement)) {\n    placeholderText = placeholderElement.innerText;\n    detach(searchWrapper.querySelector('.' + FLOATTEXT));\n    setPlaceHolder(value, inputElement, placeholderText);\n\n    if (!isNullOrUndefined(floatLine)) {\n      detach(searchWrapper.querySelector('.' + FLOATLINE));\n    }\n  } else {\n    placeholderText = placeholder !== null ? placeholder : '';\n    setPlaceHolder(value, inputElement, placeholderText);\n  }\n\n  overAllWrapper.classList.remove('e-float-input');\n}\n/**\n * Function to set the placeholder to the element.\n *\n * @param {number[] | string[] | boolean[]} value - Value of the MultiSelect.\n * @param {HTMLInputElement} inputElement - Specify the input wrapper.\n * @param {string} placeholder - Specify the PlaceHolder text.\n */\n\n\nfunction setPlaceHolder(value, inputElement, placeholder) {\n  if (value && value.length) {\n    inputElement.placeholder = '';\n  } else {\n    inputElement.placeholder = placeholder;\n  }\n}\n/**\n * Function for focusing the Float Element.\n *\n * @param {HTMLDivElement} overAllWrapper - Overall wrapper of multiselect.\n * @param {HTMLDivElement} componentWrapper - Wrapper element of multiselect.\n */\n\n\nfunction floatLabelFocus(overAllWrapper, componentWrapper) {\n  overAllWrapper.classList.add('e-input-focus');\n  var label = componentWrapper.querySelector('.' + FLOATTEXT);\n\n  if (!isNullOrUndefined(label)) {\n    addClass([label], LABELTOP);\n\n    if (label.classList.contains(LABELBOTTOM)) {\n      removeClass([label], LABELBOTTOM);\n    }\n  }\n}\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/**\n * Function to focus the Float Label element.\n *\n * @param {HTMLDivElement} overAllWrapper - Overall wrapper of multiselect.\n * @param {HTMLDivElement} componentWrapper - Wrapper element of multiselect.\n * @param {number[] | string[] | boolean[]} value - Value of the MultiSelect.\n * @param {FloatLabelType} floatLabelType - Specify the FloatLabel Type.\n * @param {string} placeholder - Specify the PlaceHolder text.\n */\n\n\nfunction floatLabelBlur(overAllWrapper, componentWrapper, value, floatLabelType, placeholder) {\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n  overAllWrapper.classList.remove('e-input-focus');\n  var label = componentWrapper.querySelector('.' + FLOATTEXT);\n\n  if (value && value.length <= 0 && floatLabelType === 'Auto' && !isNullOrUndefined(label)) {\n    if (label.classList.contains(LABELTOP)) {\n      removeClass([label], LABELTOP);\n    }\n\n    addClass([label], LABELBOTTOM);\n  }\n}\n\nfunction encodePlaceholder(placeholder) {\n  var result = '';\n\n  if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n    var spanElement = document.createElement('span');\n    spanElement.innerHTML = '<input  placeholder=\"' + placeholder + '\"/>';\n    var hiddenInput = spanElement.children[0];\n    result = hiddenInput.placeholder;\n  }\n\n  return result;\n}\n/* eslint-enable valid-jsdoc */\n\n\nvar __extends$5 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$5 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; // eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>\n\n\nvar FOCUS = 'e-input-focus';\nvar DISABLED$1 = 'e-disabled';\nvar OVER_ALL_WRAPPER = 'e-multiselect e-input-group e-control-wrapper';\nvar ELEMENT_WRAPPER = 'e-multi-select-wrapper';\nvar ELEMENT_MOBILE_WRAPPER = 'e-mob-wrapper';\nvar HIDE_LIST = 'e-hide-listitem';\nvar DELIMITER_VIEW = 'e-delim-view';\nvar CHIP_WRAPPER$1 = 'e-chips-collection';\nvar CHIP$1 = 'e-chips';\nvar CHIP_CONTENT$1 = 'e-chipcontent';\nvar CHIP_CLOSE$1 = 'e-chips-close';\nvar CHIP_SELECTED = 'e-chip-selected';\nvar SEARCHBOX_WRAPPER = 'e-searcher';\nvar DELIMITER_VIEW_WRAPPER = 'e-delimiter';\nvar ZERO_SIZE = 'e-zero-size';\nvar REMAIN_WRAPPER$1 = 'e-remain';\nvar CLOSEICON_CLASS$1 = 'e-chips-close e-close-hooker';\nvar DELIMITER_WRAPPER = 'e-delim-values';\nvar POPUP_WRAPPER = 'e-ddl e-popup e-multi-select-list-wrapper';\nvar INPUT_ELEMENT = 'e-dropdownbase';\nvar RTL_CLASS = 'e-rtl';\nvar CLOSE_ICON_HIDE = 'e-close-icon-hide';\nvar MOBILE_CHIP = 'e-mob-chip';\nvar FOOTER$1 = 'e-ddl-footer';\nvar HEADER$1 = 'e-ddl-header';\nvar DISABLE_ICON = 'e-ddl-disable-icon';\nvar SPINNER_CLASS$1 = 'e-ms-spinner-icon';\nvar HIDDEN_ELEMENT = 'e-multi-hidden';\nvar destroy = 'destroy';\nvar dropdownIcon = 'e-input-group-icon e-ddl-icon';\nvar iconAnimation = 'e-icon-anim';\nvar TOTAL_COUNT_WRAPPER$1 = 'e-delim-total';\nvar BOX_ELEMENT = 'e-multiselect-box';\nvar FILTERPARENT = 'e-filter-parent';\nvar CUSTOM_WIDTH = 'e-search-custom-width';\nvar FILTERINPUT = 'e-input-filter';\n/**\n * The Multiselect allows the user to pick a more than one value from list of predefined values.\n * ```html\n * <select id=\"list\">\n *      <option value='1'>Badminton</option>\n *      <option value='2'>Basketball</option>\n *      <option value='3'>Cricket</option>\n *      <option value='4'>Football</option>\n *      <option value='5'>Tennis</option>\n * </select>\n * ```\n * ```typescript\n * <script>\n *   var multiselectObj = new Multiselect();\n *   multiselectObj.appendTo(\"#list\");\n * </script>\n * ```\n */\n\nvar MultiSelect =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$5(MultiSelect, _super);\n  /**\n   * Constructor for creating the DropDownList widget.\n   *\n   * @param {MultiSelectModel} option - Specifies the MultiSelect model.\n   * @param {string | HTMLElement} element - Specifies the element to render as component.\n   * @private\n   */\n\n\n  function MultiSelect(option, element) {\n    var _this = _super.call(this, option, element) || this;\n\n    _this.clearIconWidth = 0;\n    _this.previousFilterText = '';\n    _this.isValidKey = false;\n    _this.selectAllEventData = [];\n    _this.selectAllEventEle = [];\n    _this.resetMainList = null;\n    _this.resetFilteredData = false;\n    _this.scrollFocusStatus = false;\n    _this.keyDownStatus = false;\n    return _this;\n  }\n\n  MultiSelect.prototype.enableRTL = function (state) {\n    if (state) {\n      this.overAllWrapper.classList.add(RTL_CLASS);\n    } else {\n      this.overAllWrapper.classList.remove(RTL_CLASS);\n    }\n\n    if (this.popupObj) {\n      this.popupObj.enableRtl = state;\n      this.popupObj.dataBind();\n    }\n  };\n\n  MultiSelect.prototype.requiredModules = function () {\n    var modules = [];\n\n    if (this.mode === 'CheckBox') {\n      this.isGroupChecking = this.enableGroupCheckBox;\n\n      if (this.enableGroupCheckBox) {\n        var prevOnChange = this.isProtectedOnChange;\n        this.isProtectedOnChange = true;\n        this.enableSelectionOrder = false;\n        this.isProtectedOnChange = prevOnChange;\n      }\n\n      this.allowCustomValue = false;\n      this.hideSelectedItem = false;\n      this.closePopupOnSelect = false;\n      modules.push({\n        member: 'CheckBoxSelection',\n        args: [this]\n      });\n    }\n\n    return modules;\n  };\n\n  MultiSelect.prototype.updateHTMLAttribute = function () {\n    if (Object.keys(this.htmlAttributes).length) {\n      for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {\n        var htmlAttr = _a[_i];\n\n        switch (htmlAttr) {\n          case 'class':\n            {\n              var updatedClassValue = this.htmlAttributes[\"\" + htmlAttr].replace(/\\s+/g, ' ').trim();\n\n              if (updatedClassValue !== '') {\n                addClass([this.overAllWrapper], updatedClassValue.split(' '));\n                addClass([this.popupWrapper], updatedClassValue.split(' '));\n              }\n\n              break;\n            }\n\n          case 'disabled':\n            this.enable(false);\n            break;\n\n          case 'placeholder':\n            if (!this.placeholder) {\n              this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[\"\" + htmlAttr]);\n              this.setProperties({\n                placeholder: this.inputElement.placeholder\n              }, true);\n              this.refreshPlaceHolder();\n            }\n\n            break;\n\n          default:\n            {\n              var defaultAttr = ['id'];\n              var validateAttr = ['name', 'required', 'aria-required', 'form'];\n              var containerAttr = ['title', 'role', 'style', 'class'];\n\n              if (defaultAttr.indexOf(htmlAttr) > -1) {\n                this.element.setAttribute(htmlAttr, this.htmlAttributes[\"\" + htmlAttr]);\n              } else if (htmlAttr.indexOf('data') === 0 || validateAttr.indexOf(htmlAttr) > -1) {\n                this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes[\"\" + htmlAttr]);\n              } else if (containerAttr.indexOf(htmlAttr) > -1) {\n                this.overAllWrapper.setAttribute(htmlAttr, this.htmlAttributes[\"\" + htmlAttr]);\n              } else if (htmlAttr !== 'size' && !isNullOrUndefined(this.inputElement)) {\n                this.inputElement.setAttribute(htmlAttr, this.htmlAttributes[\"\" + htmlAttr]);\n              }\n\n              break;\n            }\n        }\n      }\n    }\n  };\n\n  MultiSelect.prototype.updateReadonly = function (state) {\n    if (!isNullOrUndefined(this.inputElement)) {\n      if (state || this.mode === 'CheckBox') {\n        this.inputElement.setAttribute('readonly', 'true');\n      } else {\n        this.inputElement.removeAttribute('readonly');\n      }\n    }\n  };\n\n  MultiSelect.prototype.updateClearButton = function (state) {\n    if (state) {\n      if (this.overAllClear.parentNode) {\n        this.overAllClear.style.display = '';\n      } else {\n        this.componentWrapper.appendChild(this.overAllClear);\n      }\n\n      this.componentWrapper.classList.remove(CLOSE_ICON_HIDE);\n    } else {\n      this.overAllClear.style.display = 'none';\n      this.componentWrapper.classList.add(CLOSE_ICON_HIDE);\n    }\n  };\n\n  MultiSelect.prototype.updateCssClass = function () {\n    if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n      var updatedCssClassValues = this.cssClass;\n      updatedCssClassValues = this.cssClass.replace(/\\s+/g, ' ').trim();\n\n      if (updatedCssClassValues !== '') {\n        addClass([this.overAllWrapper], updatedCssClassValues.split(' '));\n        addClass([this.popupWrapper], updatedCssClassValues.split(' '));\n      }\n    }\n  };\n\n  MultiSelect.prototype.updateOldPropCssClass = function (oldClass) {\n    if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n      oldClass = oldClass.replace(/\\s+/g, ' ').trim();\n\n      if (oldClass !== '') {\n        removeClass([this.overAllWrapper], oldClass.split(' '));\n        removeClass([this.popupWrapper], oldClass.split(' '));\n      }\n    }\n  };\n\n  MultiSelect.prototype.onPopupShown = function (e) {\n    var _this = this;\n\n    if (Browser.isDevice && this.mode === 'CheckBox' && this.allowFiltering) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      var proxy_1 = this;\n\n      window.onpopstate = function () {\n        proxy_1.hidePopup();\n        proxy_1.inputElement.focus();\n      };\n\n      history.pushState({}, '');\n    }\n\n    var animModel = {\n      name: 'FadeIn',\n      duration: 100\n    };\n    var eventArgs = {\n      popup: this.popupObj,\n      event: e,\n      cancel: false,\n      animation: animModel\n    };\n    this.trigger('open', eventArgs, function (eventArgs) {\n      if (!eventArgs.cancel) {\n        _this.focusAtFirstListItem();\n\n        if (_this.popupObj) {\n          document.body.appendChild(_this.popupObj.element);\n        }\n\n        if (_this.mode === 'CheckBox' && _this.enableGroupCheckBox && !isNullOrUndefined(_this.fields.groupBy)) {\n          _this.updateListItems(_this.list.querySelectorAll('li.e-list-item'), _this.mainList.querySelectorAll('li.e-list-item'));\n        }\n\n        if (_this.mode === 'CheckBox' || _this.showDropDownIcon) {\n          addClass([_this.overAllWrapper], [iconAnimation]);\n        }\n\n        _this.refreshPopup();\n\n        _this.renderReactTemplates();\n\n        if (_this.popupObj) {\n          _this.popupObj.show(eventArgs.animation, _this.zIndex === 1000 ? _this.element : null);\n        }\n\n        attributes(_this.inputElement, {\n          'aria-expanded': 'true',\n          'aria-owns': _this.inputElement.id + '_options'\n        });\n\n        _this.updateAriaActiveDescendant();\n\n        if (_this.isFirstClick) {\n          _this.loadTemplate();\n        }\n      }\n    });\n  };\n\n  MultiSelect.prototype.updateListItems = function (listItems, mainListItems) {\n    for (var i = 0; i < listItems.length; i++) {\n      this.findGroupStart(listItems[i]);\n      this.findGroupStart(mainListItems[i]);\n    }\n\n    this.deselectHeader();\n  };\n\n  MultiSelect.prototype.loadTemplate = function () {\n    this.refreshListItems(null);\n\n    if (this.mode === 'CheckBox') {\n      this.removeFocus();\n    }\n\n    this.notify('reOrder', {\n      module: 'CheckBoxSelection',\n      enable: this.mode === 'CheckBox',\n      e: this\n    });\n  };\n\n  MultiSelect.prototype.setScrollPosition = function () {\n    if ((!this.hideSelectedItem && this.mode !== 'CheckBox' || this.mode === 'CheckBox' && !this.enableSelectionOrder) && !isNullOrUndefined(this.value) && this.value.length > 0) {\n      var valueEle = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, 'li', 'data-value', this.value[this.value.length - 1]);\n\n      if (!isNullOrUndefined(valueEle)) {\n        this.scrollBottom(valueEle);\n      }\n    }\n  };\n\n  MultiSelect.prototype.focusAtFirstListItem = function () {\n    if (this.ulElement && this.ulElement.querySelector('li.' + dropDownBaseClasses.li)) {\n      var element = void 0;\n\n      if (this.mode === 'CheckBox') {\n        this.removeFocus();\n        return;\n      } else {\n        element = this.ulElement.querySelector('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')');\n      }\n\n      if (element !== null) {\n        this.removeFocus();\n        this.addListFocus(element);\n      }\n    }\n  };\n\n  MultiSelect.prototype.focusAtLastListItem = function (data) {\n    var activeElement;\n\n    if (data) {\n      activeElement = Search(data, this.liCollections, 'StartsWith', this.ignoreCase);\n    } else {\n      if (this.value && this.value.length) {\n        Search(this.value[this.value.length - 1], this.liCollections, 'StartsWith', this.ignoreCase);\n      } else {\n        activeElement = null;\n      }\n    }\n\n    if (activeElement && activeElement.item !== null) {\n      this.addListFocus(activeElement.item);\n      this.scrollBottom(activeElement.item, activeElement.index);\n    }\n  };\n\n  MultiSelect.prototype.getAriaAttributes = function () {\n    var ariaAttributes = {\n      'aria-disabled': 'false',\n      'role': 'combobox',\n      'aria-expanded': 'false'\n    };\n    return ariaAttributes;\n  };\n\n  MultiSelect.prototype.updateListARIA = function () {\n    if (!isNullOrUndefined(this.ulElement)) {\n      attributes(this.ulElement, {\n        'id': this.element.id + '_options',\n        'role': 'listbox',\n        'aria-hidden': 'false'\n      });\n    }\n\n    var disableStatus = !isNullOrUndefined(this.inputElement) && this.inputElement.disabled ? true : false;\n\n    if (!this.isPopupOpen() && !isNullOrUndefined(this.inputElement)) {\n      attributes(this.inputElement, this.getAriaAttributes());\n    }\n\n    if (disableStatus) {\n      attributes(this.inputElement, {\n        'aria-disabled': 'true'\n      });\n    }\n\n    this.ensureAriaDisabled(disableStatus ? 'true' : 'false');\n  };\n\n  MultiSelect.prototype.ensureAriaDisabled = function (status) {\n    if (this.htmlAttributes && this.htmlAttributes['aria-disabled']) {\n      var attr = this.htmlAttributes;\n      extend(attr, {\n        'aria-disabled': status\n      }, attr);\n      this.setProperties({\n        htmlAttributes: attr\n      }, true);\n    }\n  };\n\n  MultiSelect.prototype.removelastSelection = function (e) {\n    var elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP$1);\n    var value = elements[elements.length - 1].getAttribute('data-value');\n\n    if (!isNullOrUndefined(this.value)) {\n      this.tempValues = this.value.slice();\n    }\n\n    var customValue = this.getFormattedValue(value);\n\n    if (this.allowCustomValue && (value !== 'false' && customValue === false || !isNullOrUndefined(customValue) && customValue.toString() === 'NaN')) {\n      customValue = value;\n    }\n\n    this.removeValue(customValue, e);\n    this.removeChipSelection();\n    this.updateDelimeter(this.delimiterChar, e);\n    this.makeTextBoxEmpty();\n\n    if (this.mainList && this.listData) {\n      this.refreshSelection();\n    }\n\n    this.checkPlaceholderSize();\n  };\n\n  MultiSelect.prototype.onActionFailure = function (e) {\n    _super.prototype.onActionFailure.call(this, e);\n\n    this.renderPopup();\n    this.onPopupShown();\n  };\n\n  MultiSelect.prototype.targetElement = function () {\n    this.targetInputElement = this.inputElement;\n\n    if (this.mode === 'CheckBox' && this.allowFiltering) {\n      this.notify('targetElement', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox'\n      });\n    }\n\n    return this.targetInputElement.value;\n  };\n\n  MultiSelect.prototype.getForQuery = function (valuecheck) {\n    var predicate;\n    var field = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;\n\n    for (var i = 0; i < valuecheck.length; i++) {\n      if (i === 0) {\n        predicate = new Predicate(field, 'equal', valuecheck[i]);\n      } else {\n        predicate = predicate.or(field, 'equal', valuecheck[i]);\n      }\n    }\n\n    return this.getQuery(this.query).where(predicate);\n  };\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n  MultiSelect.prototype.onActionComplete = function (ulElement, list, e, isUpdated) {\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    _super.prototype.onActionComplete.call(this, ulElement, list, e);\n\n    this.updateSelectElementData(this.allowFiltering); // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n    var proxy = this;\n\n    if (!isNullOrUndefined(this.value) && !this.allowCustomValue) {\n      for (var i = 0; i < this.value.length; i++) {\n        var checkEle = this.findListElement(this.allowFiltering && !isNullOrUndefined(this.mainList) ? this.mainList : ulElement, 'li', 'data-value', proxy.value[i]);\n\n        if (!checkEle && !(this.dataSource instanceof DataManager)) {\n          this.value.splice(i, 1);\n          i -= 1;\n        }\n      }\n    }\n\n    var valuecheck = [];\n\n    if (!isNullOrUndefined(this.value) && !this.allowCustomValue) {\n      valuecheck = this.presentItemValue(this.ulElement);\n    }\n\n    if (valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value) && this.listData != null) {\n      this.addNonPresentItems(valuecheck, this.ulElement, this.listData);\n    } else {\n      this.updateActionList(ulElement, list, e);\n    }\n\n    if (this.dataSource instanceof DataManager && this.mode === 'CheckBox' && this.allowFiltering) {\n      this.removeFocus();\n    }\n  };\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n  MultiSelect.prototype.updateActionList = function (ulElement, list, e, isUpdated) {\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    if (this.mode === 'CheckBox' && this.showSelectAll) {\n      this.notify('selectAll', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox'\n      });\n    }\n\n    if (!this.mainList && !this.mainData) {\n      this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;\n      this.mainData = list;\n      this.mainListCollection = this.liCollections;\n    } else if (isNullOrUndefined(this.mainData) || this.mainData.length === 0) {\n      this.mainData = list;\n    }\n\n    if ((this.remoteCustomValue || list.length <= 0) && this.allowCustomValue && this.inputFocus && this.allowFiltering && this.inputElement.value && this.inputElement.value !== '') {\n      this.checkForCustomValue(this.tempQuery, this.fields);\n      return;\n    }\n\n    if (this.value && this.value.length && (this.mode !== 'CheckBox' && !isNullOrUndefined(this.inputElement) && this.inputElement.value.trim() !== '' || this.mode === 'CheckBox' || (this.keyCode === 8 || this.keyCode === 46) && this.allowFiltering && this.allowCustomValue && this.dataSource instanceof DataManager && this.inputElement.value === '')) {\n      this.refreshSelection();\n    }\n\n    this.updateListARIA();\n    this.unwireListEvents();\n    this.wireListEvents();\n\n    if (!isNullOrUndefined(this.setInitialValue)) {\n      this.setInitialValue();\n    }\n\n    if (!isNullOrUndefined(this.selectAllAction)) {\n      this.selectAllAction();\n    }\n\n    if (this.setDynValue) {\n      if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n        this.initialTextUpdate();\n      }\n\n      this.initialValueUpdate();\n      this.initialUpdate();\n      this.refreshPlaceHolder();\n\n      if (this.mode !== 'CheckBox' && this.changeOnBlur) {\n        this.updateValueState(null, this.value, null);\n      }\n    }\n\n    this.renderPopup();\n\n    if (this.beforePopupOpen) {\n      this.beforePopupOpen = false;\n      this.onPopupShown(e);\n    }\n  };\n\n  MultiSelect.prototype.refreshSelection = function () {\n    var value;\n    var element;\n    var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;\n\n    if (!isNullOrUndefined(this.value)) {\n      for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {\n        value = this.value[index];\n        element = this.findListElement(this.list, 'li', 'data-value', value);\n\n        if (element) {\n          addClass([element], className);\n\n          if (this.hideSelectedItem && element.previousSibling && element.previousElementSibling.classList.contains(dropDownBaseClasses.group) && (!element.nextElementSibling || element.nextElementSibling.classList.contains(dropDownBaseClasses.group))) {\n            addClass([element.previousElementSibling], className);\n          }\n\n          if (this.hideSelectedItem && this.fields.groupBy && !element.previousElementSibling.classList.contains(HIDE_LIST)) {\n            this.hideGroupItem(value);\n          }\n\n          if (this.hideSelectedItem && element.classList.contains(dropDownBaseClasses.focus)) {\n            removeClass([element], dropDownBaseClasses.focus);\n            var listEle = element.parentElement.querySelectorAll('.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')');\n\n            if (listEle.length > 0) {\n              addClass([listEle[0]], dropDownBaseClasses.focus);\n              this.updateAriaActiveDescendant();\n            } else {\n              //EJ2-57588 - for this task, we prevent the ul element cloning ( this.ulElement = this.ulElement.cloneNode ? <HTMLElement>this.ulElement.cloneNode(true) : this.ulElement;)\n              if (!(this.list && this.list.querySelectorAll('.' + dropDownBaseClasses.li).length > 0)) {\n                this.l10nUpdate();\n                addClass([this.list], dropDownBaseClasses.noData);\n              }\n            }\n          }\n\n          element.setAttribute('aria-selected', 'true');\n\n          if (this.mode === 'CheckBox' && element.classList.contains('e-active')) {\n            var ariaValue = element.getElementsByClassName('e-check').length;\n\n            if (ariaValue === 0) {\n              var args = {\n                module: 'CheckBoxSelection',\n                enable: this.mode === 'CheckBox',\n                li: element,\n                e: null\n              };\n              this.notify('updatelist', args);\n            }\n          }\n        }\n      }\n    }\n\n    this.checkSelectAll();\n    this.checkMaxSelection();\n  };\n\n  MultiSelect.prototype.hideGroupItem = function (value) {\n    var element;\n    var element1;\n    var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;\n    element1 = element = this.findListElement(this.ulElement, 'li', 'data-value', value);\n    var i = 0;\n    var j = 0;\n    var temp = true;\n    var temp1 = true;\n\n    do {\n      if (element && element.previousElementSibling && !element.previousElementSibling.classList.contains(HIDE_LIST) && element.previousElementSibling.classList.contains(dropDownBaseClasses.li)) {\n        temp = false;\n      }\n\n      if (!temp || !element || element.previousElementSibling && element.previousElementSibling.classList.contains(dropDownBaseClasses.group)) {\n        i = 10;\n      } else {\n        element = element.previousElementSibling;\n      }\n\n      if (element1 && element1.nextElementSibling && !element1.nextElementSibling.classList.contains(HIDE_LIST) && element1.nextElementSibling.classList.contains(dropDownBaseClasses.li)) {\n        temp1 = false;\n      }\n\n      if (!temp1 || !element1 || element1.nextElementSibling && element1.nextElementSibling.classList.contains(dropDownBaseClasses.group)) {\n        j = 10;\n      } else {\n        element1 = element1.nextElementSibling;\n      }\n    } while (i < 10 || j < 10);\n\n    if (temp && temp1 && !element.previousElementSibling.classList.contains(HIDE_LIST)) {\n      addClass([element.previousElementSibling], className);\n    } else if (temp && temp1 && element.previousElementSibling.classList.contains(HIDE_LIST)) {\n      removeClass([element.previousElementSibling], className);\n    }\n  };\n\n  MultiSelect.prototype.getValidLi = function () {\n    var liElement = this.ulElement.querySelector('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')');\n    return !isNullOrUndefined(liElement) ? liElement : this.liCollections[0];\n  };\n\n  MultiSelect.prototype.checkSelectAll = function () {\n    var groupItemLength = this.list.querySelectorAll('li.e-list-group-item.e-active').length;\n    var listItem = this.list.querySelectorAll('li.e-list-item');\n    var searchCount = this.list.querySelectorAll('li.' + dropDownBaseClasses.li).length;\n    var searchActiveCount = this.list.querySelectorAll('li.' + dropDownBaseClasses.selected).length;\n\n    if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n      searchActiveCount = searchActiveCount - groupItemLength;\n    }\n\n    if ((searchCount === searchActiveCount || searchActiveCount === this.maximumSelectionLength) && this.mode === 'CheckBox' && this.showSelectAll) {\n      this.notify('checkSelectAll', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox',\n        value: 'check'\n      });\n    } else if (searchCount !== searchActiveCount && this.mode === 'CheckBox' && this.showSelectAll) {\n      this.notify('checkSelectAll', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox',\n        value: 'uncheck'\n      });\n    }\n\n    if (this.enableGroupCheckBox && this.fields.groupBy && !this.enableSelectionOrder) {\n      for (var i = 0; i < listItem.length; i++) {\n        this.findGroupStart(listItem[i]);\n      }\n\n      this.deselectHeader();\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  MultiSelect.prototype.openClick = function (e) {\n    if (!this.openOnClick && this.mode !== 'CheckBox') {\n      if (this.targetElement() !== '') {\n        this.showPopup();\n      } else {\n        this.hidePopup(e);\n      }\n    } else if (!this.openOnClick && this.mode === 'CheckBox' && !this.isPopupOpen()) {\n      this.showPopup();\n    }\n  };\n\n  MultiSelect.prototype.keyUp = function (e) {\n    if (this.mode === 'CheckBox' && !this.openOnClick) {\n      var char = String.fromCharCode(e.keyCode);\n      var isWordCharacter = char.match(/\\w/);\n\n      if (!isNullOrUndefined(isWordCharacter)) {\n        this.isValidKey = true;\n      }\n    }\n\n    this.isValidKey = this.isPopupOpen() && e.keyCode === 8 || this.isValidKey;\n    this.isValidKey = e.ctrlKey && e.keyCode === 86 ? false : this.isValidKey;\n\n    if (this.isValidKey) {\n      this.isValidKey = false;\n      this.expandTextbox();\n      this.showOverAllClear();\n\n      switch (e.keyCode) {\n        default:\n          // For filtering works in mobile firefox\n          this.search(e);\n      }\n    }\n  };\n  /**\n   * To filter the multiselect data from given data source by using query\n   *\n   * @param {Object[] | DataManager } dataSource - Set the data source to filter.\n   * @param {Query} query - Specify the query to filter the data.\n   * @param {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n   * @returns {void}\n   */\n\n\n  MultiSelect.prototype.filter = function (dataSource, query, fields) {\n    this.isFiltered = true;\n    this.remoteFilterAction = true;\n    this.dataUpdater(dataSource, query, fields);\n  };\n\n  MultiSelect.prototype.getQuery = function (query) {\n    var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n\n    if (this.isFiltered) {\n      return filterQuery;\n    }\n\n    if (this.filterAction) {\n      if (this.targetElement() !== null) {\n        var dataType = this.typeOfData(this.dataSource).typeof;\n\n        if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n          filterQuery.where('', this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);\n        } else {\n          var fields = this.fields;\n          filterQuery.where(!isNullOrUndefined(fields.text) ? fields.text : '', this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);\n        }\n      }\n\n      return filterQuery;\n    } else {\n      return query ? query : this.query ? this.query : new Query();\n    }\n  };\n\n  MultiSelect.prototype.dataUpdater = function (dataSource, query, fields) {\n    this.isDataFetched = false;\n\n    if (this.targetElement().trim() === '') {\n      var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n\n      if (this.backCommand) {\n        this.remoteCustomValue = false;\n\n        if (this.allowCustomValue && list.querySelectorAll('li').length == 0 && this.mainData.length > 0) {\n          this.mainData = [];\n        }\n\n        this.onActionComplete(list, this.mainData);\n\n        if (this.value && this.value.length) {\n          this.refreshSelection();\n        }\n\n        if (this.keyCode !== 8) {\n          this.focusAtFirstListItem();\n        }\n\n        this.notify('reOrder', {\n          module: 'CheckBoxSelection',\n          enable: this.mode === 'CheckBox',\n          e: this\n        });\n      }\n    } else {\n      this.resetList(dataSource, fields, query);\n\n      if (this.allowCustomValue) {\n        if (!(dataSource instanceof DataManager)) {\n          this.checkForCustomValue(query, fields);\n        } else {\n          this.remoteCustomValue = true;\n          this.tempQuery = query;\n        }\n      }\n    }\n\n    this.refreshPopup();\n\n    if (this.mode === 'CheckBox') {\n      this.removeFocus();\n    }\n  };\n\n  MultiSelect.prototype.checkForCustomValue = function (query, fields) {\n    var dataChecks = !this.getValueByText(this.inputElement.value, this.ignoreCase);\n\n    if (this.allowCustomValue && dataChecks) {\n      var value = this.inputElement.value;\n      var field = fields ? fields : this.fields;\n      var customData = !isNullOrUndefined(this.mainData) && this.mainData.length > 0 ? this.mainData[0] : this.mainData;\n\n      if (typeof customData !== 'string' && typeof customData !== 'number' && typeof customData !== 'boolean') {\n        var dataItem = {};\n        setValue(field.text, value, dataItem);\n\n        if (typeof getValue(this.fields.value ? this.fields.value : 'value', customData) === 'number') {\n          setValue(field.value, Math.random(), dataItem);\n        } else {\n          setValue(field.value, value, dataItem);\n        }\n\n        var tempData = JSON.parse(JSON.stringify(this.listData));\n        tempData.splice(0, 0, dataItem);\n        this.resetList(tempData, field, query);\n      } else {\n        var tempData = JSON.parse(JSON.stringify(this.listData));\n        tempData.splice(0, 0, this.inputElement.value);\n        tempData[0] = typeof customData === 'number' && !isNaN(parseFloat(tempData[0])) ? parseFloat(tempData[0]) : tempData[0];\n        tempData[0] = typeof customData === 'boolean' ? tempData[0] === 'true' ? true : tempData[0] === 'false' ? false : tempData[0] : tempData[0];\n        this.resetList(tempData, field);\n      }\n    }\n\n    if (this.value && this.value.length) {\n      this.refreshSelection();\n    }\n  };\n\n  MultiSelect.prototype.getNgDirective = function () {\n    return 'EJS-MULTISELECT';\n  };\n\n  MultiSelect.prototype.wrapperClick = function (e) {\n    this.setDynValue = false;\n\n    if (!this.enabled) {\n      return;\n    }\n\n    if (e.target === this.overAllClear) {\n      e.preventDefault();\n      return;\n    }\n\n    if (!this.inputFocus) {\n      this.inputElement.focus();\n    }\n\n    if (!this.readonly) {\n      if (e.target && e.target.classList.toString().indexOf(CHIP_CLOSE$1) !== -1) {\n        if (this.isPopupOpen()) {\n          this.refreshPopup();\n        }\n\n        return;\n      }\n\n      if (!this.isPopupOpen() && (this.openOnClick || this.showDropDownIcon && e.target && e.target.className === dropdownIcon)) {\n        this.showPopup(e);\n      } else {\n        this.hidePopup(e);\n\n        if (this.mode === 'CheckBox') {\n          this.showOverAllClear();\n          this.inputFocus = true;\n\n          if (!this.overAllWrapper.classList.contains(FOCUS)) {\n            this.overAllWrapper.classList.add(FOCUS);\n          }\n        }\n      }\n    }\n\n    if (!(this.targetElement() && this.targetElement() !== '')) {\n      e.preventDefault();\n    }\n  };\n\n  MultiSelect.prototype.enable = function (state) {\n    if (state) {\n      this.overAllWrapper.classList.remove(DISABLED$1);\n      this.inputElement.removeAttribute('disabled');\n      attributes(this.inputElement, {\n        'aria-disabled': 'false'\n      });\n      this.ensureAriaDisabled('false');\n    } else {\n      this.overAllWrapper.classList.add(DISABLED$1);\n      this.inputElement.setAttribute('disabled', 'true');\n      attributes(this.inputElement, {\n        'aria-disabled': 'true'\n      });\n      this.ensureAriaDisabled('true');\n    }\n\n    if (this.enabled !== state) {\n      this.enabled = state;\n    }\n\n    this.hidePopup();\n  };\n\n  MultiSelect.prototype.onBlurHandler = function (eve, isDocClickFromCheck) {\n    var target;\n\n    if (!isNullOrUndefined(eve)) {\n      target = eve.relatedTarget;\n    }\n\n    if (this.popupObj && document.body.contains(this.popupObj.element) && this.popupObj.element.contains(target)) {\n      if (this.mode !== 'CheckBox') {\n        this.inputElement.focus();\n      } else if (this.floatLabelType === 'Auto' && (this.overAllWrapper.classList.contains('e-outline') || this.overAllWrapper.classList.contains('e-filled'))) {\n        addClass([this.overAllWrapper], 'e-valid-input');\n      }\n\n      return;\n    }\n\n    if (this.floatLabelType === 'Auto' && this.overAllWrapper.classList.contains('e-outline') && this.mode === 'CheckBox' && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n      removeClass([this.overAllWrapper], 'e-valid-input');\n    }\n\n    if (this.mode === 'CheckBox' && Browser.isIE && !isNullOrUndefined(eve) && !isDocClickFromCheck) {\n      this.inputFocus = false;\n      this.overAllWrapper.classList.remove(FOCUS);\n      return;\n    }\n\n    if (this.scrollFocusStatus) {\n      if (!isNullOrUndefined(eve)) {\n        eve.preventDefault();\n      }\n\n      this.inputElement.focus();\n      this.scrollFocusStatus = false;\n      return;\n    }\n\n    this.inputFocus = false;\n    this.overAllWrapper.classList.remove(FOCUS);\n\n    if (this.addTagOnBlur) {\n      var dataChecks = this.getValueByText(this.inputElement.value, this.ignoreCase, this.ignoreAccent);\n      var listLiElement = this.findListElement(this.list, 'li', 'data-value', dataChecks);\n      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;\n      var allowChipAddition = listLiElement && !listLiElement.classList.contains(className) ? true : false;\n\n      if (allowChipAddition) {\n        this.updateListSelection(listLiElement, eve);\n\n        if (this.mode === 'Delimiter') {\n          this.updateDelimeter(this.delimiterChar);\n        }\n      }\n    }\n\n    this.updateDataList();\n\n    if (this.resetMainList) {\n      this.mainList = this.resetMainList;\n      this.resetMainList = null;\n    }\n\n    this.refreshListItems(null);\n\n    if (this.mode !== 'Box' && this.mode !== 'CheckBox') {\n      this.updateDelimView();\n    }\n\n    if (this.changeOnBlur) {\n      this.updateValueState(eve, this.value, this.tempValues);\n      this.dispatchEvent(this.hiddenElement, 'change');\n    }\n\n    this.overAllClear.style.display = 'none';\n\n    if (this.isPopupOpen()) {\n      this.hidePopup(eve);\n    }\n\n    this.makeTextBoxEmpty();\n    this.trigger('blur');\n    this.focused = true;\n\n    if (Browser.isDevice && this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n      this.removeChipFocus();\n    }\n\n    this.removeChipSelection();\n    this.refreshInputHight();\n    floatLabelBlur(this.overAllWrapper, this.componentWrapper, this.value, this.floatLabelType, this.placeholder);\n    this.refreshPlaceHolder();\n\n    if ((this.allowFiltering || this.enableSelectionOrder === true && this.mode === 'CheckBox') && !isNullOrUndefined(this.mainList)) {\n      this.ulElement = this.mainList;\n    }\n\n    this.checkPlaceholderSize();\n    Input.createSpanElement(this.overAllWrapper, this.createElement);\n    this.calculateWidth();\n\n    if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName('e-ddl-icon')[0] && this.overAllWrapper.getElementsByClassName('e-float-text-content')[0] && this.floatLabelType !== 'Never')) {\n      this.overAllWrapper.getElementsByClassName('e-float-text-content')[0].classList.add('e-icon');\n    }\n  };\n\n  MultiSelect.prototype.calculateWidth = function () {\n    var elementWidth;\n\n    if (this.overAllWrapper) {\n      if (!this.showDropDownIcon || this.overAllWrapper.querySelector('.' + 'e-label-top')) {\n        elementWidth = this.overAllWrapper.clientWidth - 2 * parseInt(getComputedStyle(this.inputElement).paddingRight);\n      } else {\n        var downIconWidth = this.dropIcon.offsetWidth + parseInt(getComputedStyle(this.dropIcon).marginRight);\n        elementWidth = this.overAllWrapper.clientWidth - (downIconWidth + 2 * parseInt(getComputedStyle(this.inputElement).paddingRight));\n      }\n\n      Input.calculateWidth(elementWidth, this.overAllWrapper, this.getModuleName());\n    }\n  };\n\n  MultiSelect.prototype.checkPlaceholderSize = function () {\n    if (this.showDropDownIcon) {\n      var downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);\n      this.setPlaceholderSize(downIconWidth);\n    } else {\n      if (!isNullOrUndefined(this.dropIcon)) {\n        this.setPlaceholderSize(this.showDropDownIcon ? this.dropIcon.offsetWidth : 0);\n      }\n    }\n  };\n\n  MultiSelect.prototype.setPlaceholderSize = function (downIconWidth) {\n    if (isNullOrUndefined(this.value) || this.value.length === 0) {\n      if (this.dropIcon.offsetWidth !== 0) {\n        this.searchWrapper.style.width = 'calc(100% - ' + (downIconWidth + 10) + 'px';\n      } else {\n        addClass([this.searchWrapper], CUSTOM_WIDTH);\n      }\n    } else if (!isNullOrUndefined(this.value)) {\n      this.searchWrapper.removeAttribute('style');\n      removeClass([this.searchWrapper], CUSTOM_WIDTH);\n    }\n  };\n\n  MultiSelect.prototype.refreshInputHight = function () {\n    if (!isNullOrUndefined(this.searchWrapper)) {\n      if ((!this.value || !this.value.length) && (isNullOrUndefined(this.text) || this.text === '')) {\n        this.searchWrapper.classList.remove(ZERO_SIZE);\n      } else {\n        this.searchWrapper.classList.add(ZERO_SIZE);\n      }\n    }\n  };\n\n  MultiSelect.prototype.validateValues = function (newValue, oldValue) {\n    return JSON.stringify(newValue.slice().sort()) !== JSON.stringify(oldValue.slice().sort());\n  };\n\n  MultiSelect.prototype.updateValueState = function (event, newVal, oldVal) {\n    var newValue = newVal ? newVal : [];\n    var oldValue = oldVal ? oldVal : [];\n\n    if (this.initStatus && this.validateValues(newValue, oldValue)) {\n      var eventArgs = {\n        e: event,\n        oldValue: oldVal,\n        value: newVal,\n        isInteracted: event ? true : false,\n        element: this.element,\n        event: event\n      };\n\n      if (this.isAngular && this.preventChange) {\n        this.preventChange = false;\n      } else {\n        this.trigger('change', eventArgs);\n      }\n\n      this.updateTempValue();\n\n      if (!this.changeOnBlur) {\n        this.dispatchEvent(this.hiddenElement, 'change');\n      }\n    }\n  };\n\n  MultiSelect.prototype.updateTempValue = function () {\n    if (!this.value) {\n      this.tempValues = this.value;\n    } else {\n      this.tempValues = this.value.slice();\n    }\n  };\n\n  MultiSelect.prototype.updateAriaActiveDescendant = function () {\n    if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName('e-item-focus')[0])) {\n      attributes(this.inputElement, {\n        'aria-activedescendant': this.ulElement.getElementsByClassName('e-item-focus')[0].id\n      });\n    }\n  };\n\n  MultiSelect.prototype.getPagingCount = function () {\n    var height = this.list.classList.contains(dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue('height');\n    return Math.round(this.list.offsetHeight / parseInt(height, 10));\n  };\n\n  MultiSelect.prototype.pageUpSelection = function (steps) {\n    var collection = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n    var previousItem = steps >= 0 ? collection[steps + 1] : collection[0];\n    this.addListFocus(previousItem);\n    this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute('data-value')));\n  };\n\n  MultiSelect.prototype.pageDownSelection = function (steps) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    var list = this.getItems();\n    var collection = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n    var previousItem = steps <= collection.length ? collection[steps - 1] : collection[collection.length - 1];\n    this.addListFocus(previousItem);\n    this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute('data-value')));\n  };\n\n  MultiSelect.prototype.getItems = function () {\n    if (!this.list) {\n      _super.prototype.render.call(this);\n    }\n\n    return this.ulElement && this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li).length > 0 ? this.ulElement.querySelectorAll('.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')') : [];\n  };\n\n  MultiSelect.prototype.focusInHandler = function (e) {\n    var _this = this;\n\n    if (this.enabled) {\n      this.showOverAllClear();\n      this.inputFocus = true;\n\n      if (this.value && this.value.length) {\n        if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n          this.chipCollectionWrapper.style.display = '';\n        } else {\n          this.showDelimWrapper();\n        }\n\n        if (this.mode !== 'CheckBox') {\n          this.viewWrapper.style.display = 'none';\n        }\n      }\n\n      if (this.mode !== 'CheckBox') {\n        this.searchWrapper.classList.remove(ZERO_SIZE);\n      }\n\n      this.checkPlaceholderSize();\n\n      if (this.focused) {\n        var args = {\n          isInteracted: e ? true : false,\n          event: e\n        };\n        this.trigger('focus', args);\n        this.focused = false;\n      }\n\n      if (!this.overAllWrapper.classList.contains(FOCUS)) {\n        this.overAllWrapper.classList.add(FOCUS);\n      }\n\n      floatLabelFocus(this.overAllWrapper, this.componentWrapper);\n\n      if (this.isPopupOpen()) {\n        this.refreshPopup();\n      }\n\n      setTimeout(function () {\n        _this.calculateWidth();\n      }, 150);\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  MultiSelect.prototype.showDelimWrapper = function () {\n    if (this.mode === 'CheckBox') {\n      this.viewWrapper.style.display = '';\n    } else {\n      this.delimiterWrapper.style.display = '';\n    }\n\n    this.componentWrapper.classList.add(DELIMITER_VIEW_WRAPPER);\n  };\n\n  MultiSelect.prototype.hideDelimWrapper = function () {\n    this.delimiterWrapper.style.display = 'none';\n    this.componentWrapper.classList.remove(DELIMITER_VIEW_WRAPPER);\n  };\n\n  MultiSelect.prototype.expandTextbox = function () {\n    var size = 5;\n\n    if (this.placeholder) {\n      size = size > this.inputElement.placeholder.length ? size : this.inputElement.placeholder.length;\n    }\n\n    if (this.inputElement.value.length > size) {\n      this.inputElement.size = this.inputElement.value.length;\n    } else {\n      this.inputElement.size = size;\n    }\n  };\n\n  MultiSelect.prototype.isPopupOpen = function () {\n    return this.popupWrapper !== null && this.popupWrapper.parentElement !== null;\n  };\n\n  MultiSelect.prototype.refreshPopup = function () {\n    if (this.popupObj && this.mobFilter) {\n      this.popupObj.setProperties({\n        width: this.calcPopupWidth()\n      });\n      this.popupObj.refreshPosition(this.overAllWrapper);\n      this.popupObj.resolveCollision();\n    }\n  };\n\n  MultiSelect.prototype.checkTextLength = function () {\n    return this.targetElement().length < 1;\n  };\n\n  MultiSelect.prototype.popupKeyActions = function (e) {\n    switch (e.keyCode) {\n      case 38:\n        this.hidePopup(e);\n\n        if (this.mode === 'CheckBox') {\n          this.inputElement.focus();\n        }\n\n        e.preventDefault();\n        break;\n\n      case 40:\n        if (!this.isPopupOpen()) {\n          this.showPopup(e);\n          e.preventDefault();\n        }\n\n        break;\n    }\n  };\n\n  MultiSelect.prototype.updateAriaAttribute = function () {\n    var focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n\n    if (!isNullOrUndefined(focusedItem)) {\n      this.inputElement.setAttribute('aria-activedescendant', focusedItem.id);\n\n      if (this.allowFiltering) {\n        var filterInput = this.popupWrapper.querySelector('.' + FILTERINPUT);\n        filterInput && filterInput.setAttribute('aria-activedescendant', focusedItem.id);\n      } else if (this.mode == \"CheckBox\") {\n        this.overAllWrapper.setAttribute('aria-activedescendant', focusedItem.id);\n      }\n    }\n  };\n\n  MultiSelect.prototype.homeNavigation = function (isHome) {\n    this.removeFocus();\n    var scrollEle = this.ulElement.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n\n    if (scrollEle.length > 0) {\n      var element = scrollEle[isHome ? 0 : scrollEle.length - 1];\n      element.classList.add(dropDownBaseClasses.focus);\n      this.scrollBottom(element);\n      this.updateAriaActiveDescendant();\n    }\n  };\n\n  MultiSelect.prototype.onKeyDown = function (e) {\n    if (this.readonly || !this.enabled && this.mode !== 'CheckBox') {\n      return;\n    }\n\n    this.keyCode = e.keyCode;\n    this.keyDownStatus = true;\n\n    if (e.keyCode > 111 && e.keyCode < 124) {\n      return;\n    }\n\n    if (e.altKey) {\n      this.popupKeyActions(e);\n      return;\n    } else if (this.isPopupOpen()) {\n      var focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n      var activeIndex = void 0;\n\n      switch (e.keyCode) {\n        case 36:\n        case 35:\n          this.homeNavigation(e.keyCode === 36 ? true : false);\n          break;\n\n        case 33:\n          e.preventDefault();\n\n          if (focusedItem) {\n            this.getIndexByValue(focusedItem.getAttribute('data-value'));\n            this.pageUpSelection(activeIndex - this.getPagingCount());\n            this.updateAriaAttribute();\n          }\n\n          return;\n\n        case 34:\n          e.preventDefault();\n\n          if (focusedItem) {\n            this.getIndexByValue(focusedItem.getAttribute('data-value'));\n            this.pageDownSelection(activeIndex + this.getPagingCount());\n            this.updateAriaAttribute();\n          }\n\n          return;\n\n        case 38:\n          this.arrowUp(e);\n          break;\n\n        case 40:\n          this.arrowDown(e);\n          break;\n\n        case 27:\n          e.preventDefault();\n          this.hidePopup(e);\n\n          if (this.mode === 'CheckBox') {\n            this.inputElement.focus();\n          }\n\n          return;\n\n        case 13:\n          e.preventDefault();\n\n          if (this.mode !== 'CheckBox') {\n            this.selectByKey(e);\n          }\n\n          this.checkPlaceholderSize();\n          return;\n\n        case 32:\n          this.spaceKeySelection(e);\n          return;\n\n        case 9:\n          e.preventDefault();\n          this.hidePopup(e);\n          this.inputElement.focus();\n          this.overAllWrapper.classList.add(FOCUS);\n      }\n    } else {\n      switch (e.keyCode) {\n        case 13:\n        case 9:\n        case 16:\n        case 17:\n        case 20:\n          return;\n\n        case 40:\n          if (this.openOnClick) {\n            this.showPopup();\n          }\n\n          break;\n\n        case 27:\n          e.preventDefault();\n          this.escapeAction();\n          return;\n      }\n    }\n\n    if (this.checkTextLength()) {\n      this.keyNavigation(e);\n    }\n\n    if (this.mode === 'CheckBox' && this.enableSelectionOrder) {\n      if (this.allowFiltering) {\n        this.previousFilterText = this.targetElement();\n      }\n\n      this.checkBackCommand(e);\n    }\n\n    this.expandTextbox();\n\n    if (!(this.mode === 'CheckBox' && this.showSelectAll)) {\n      this.refreshPopup();\n    }\n  };\n\n  MultiSelect.prototype.arrowDown = function (e) {\n    e.preventDefault();\n    this.moveByList(1);\n    this.keyAction = true;\n\n    if (document.activeElement.classList.contains(FILTERINPUT) || this.mode === 'CheckBox' && !this.allowFiltering && document.activeElement !== this.list) {\n      EventHandler.add(this.list, 'keydown', this.onKeyDown, this);\n    }\n\n    this.updateAriaAttribute();\n  };\n\n  MultiSelect.prototype.arrowUp = function (e) {\n    e.preventDefault();\n    this.keyAction = true;\n    var list = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n\n    if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n      list = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ',li.' + dropDownBaseClasses.group + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n    }\n\n    var focuseElem = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n    var index = Array.prototype.slice.call(list).indexOf(focuseElem);\n\n    if (index <= 0 && this.mode === 'CheckBox' && this.allowFiltering) {\n      this.keyAction = false;\n      this.notify('inputFocus', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox',\n        value: 'focus'\n      });\n    }\n\n    this.moveByList(-1);\n    this.updateAriaAttribute();\n  };\n\n  MultiSelect.prototype.spaceKeySelection = function (e) {\n    if (this.mode === 'CheckBox') {\n      if (!document.activeElement.classList.contains(FILTERINPUT)) {\n        e.preventDefault();\n        this.keyAction = true;\n      }\n\n      this.selectByKey(e);\n    }\n\n    this.checkPlaceholderSize();\n  };\n\n  MultiSelect.prototype.checkBackCommand = function (e) {\n    if (e.keyCode === 8 && this.allowFiltering ? this.targetElement() !== this.previousFilterText : this.targetElement() === '') {\n      this.backCommand = false;\n    } else {\n      this.backCommand = true;\n    }\n  };\n\n  MultiSelect.prototype.keyNavigation = function (e) {\n    if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox' && this.value && this.value.length) {\n      switch (e.keyCode) {\n        case 37:\n          //left arrow\n          e.preventDefault();\n          this.moveBy(-1, e);\n          break;\n\n        case 39:\n          //right arrow\n          e.preventDefault();\n          this.moveBy(1, e);\n          break;\n\n        case 8:\n          this.removelastSelection(e);\n          break;\n\n        case 46:\n          //del\n          this.removeSelectedChip(e);\n          break;\n      }\n    } else if (e.keyCode === 8 && this.mode === 'Delimiter') {\n      if (this.value && this.value.length) {\n        e.preventDefault();\n        var temp = this.value[this.value.length - 1];\n        this.removeValue(temp, e);\n        this.updateDelimeter(this.delimiterChar, e);\n        this.focusAtLastListItem(temp);\n      }\n    }\n  };\n\n  MultiSelect.prototype.selectByKey = function (e) {\n    this.removeChipSelection();\n    this.selectListByKey(e);\n\n    if (this.hideSelectedItem) {\n      this.focusAtFirstListItem();\n    }\n  };\n\n  MultiSelect.prototype.escapeAction = function () {\n    var temp = this.tempValues ? this.tempValues.slice() : [];\n\n    if (this.value && this.validateValues(this.value, temp)) {\n      if (this.mode !== 'CheckBox') {\n        this.value = temp;\n        this.initialValueUpdate();\n      }\n\n      if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n        this.chipCollectionWrapper.style.display = '';\n      } else {\n        this.showDelimWrapper();\n      }\n\n      this.refreshPlaceHolder();\n\n      if (this.value.length) {\n        this.showOverAllClear();\n      } else {\n        this.hideOverAllClear();\n      }\n    }\n\n    this.makeTextBoxEmpty();\n  };\n\n  MultiSelect.prototype.scrollBottom = function (selectedLI, activeIndex) {\n    var currentOffset = this.list.offsetHeight;\n    var nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;\n    var nextOffset = this.list.scrollTop + nextBottom - currentOffset;\n    var boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;\n    boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;\n\n    if (activeIndex === 0) {\n      this.list.scrollTop = 0;\n    } else if (nextBottom > currentOffset) {\n      this.list.scrollTop = nextOffset;\n    } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n      this.list.scrollTop = nextOffset;\n    }\n  };\n\n  MultiSelect.prototype.scrollTop = function (selectedLI, activeIndex) {\n    var nextOffset = selectedLI.offsetTop - this.list.scrollTop;\n    nextOffset = this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;\n    var boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;\n\n    if (activeIndex === 0) {\n      this.list.scrollTop = 0;\n    } else if (nextOffset < 0) {\n      this.list.scrollTop = this.list.scrollTop + nextOffset;\n    } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n      this.list.scrollTop = selectedLI.offsetTop - (this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);\n    }\n  };\n\n  MultiSelect.prototype.selectListByKey = function (e) {\n    var li = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n    var limit = this.value && this.value.length ? this.value.length : 0;\n    var target;\n\n    if (li !== null) {\n      if (li.classList.contains('e-active')) {\n        limit = limit - 1;\n      }\n\n      if (this.isValidLI(li) && limit < this.maximumSelectionLength) {\n        this.updateListSelection(li, e);\n        this.addListFocus(li);\n\n        if (this.mode === 'CheckBox') {\n          this.updateDelimView();\n          this.updateDelimeter(this.delimiterChar, e);\n          this.refreshInputHight();\n          this.checkPlaceholderSize();\n\n          if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n            target = li.firstElementChild.lastElementChild;\n            this.findGroupStart(target);\n            this.deselectHeader();\n          }\n        } else {\n          this.updateDelimeter(this.delimiterChar, e);\n        }\n\n        this.makeTextBoxEmpty();\n\n        if (this.mode !== 'CheckBox') {\n          this.refreshListItems(li.textContent);\n        }\n\n        if (!this.changeOnBlur) {\n          this.updateValueState(e, this.value, this.tempValues);\n        }\n\n        this.refreshPopup();\n      } else {\n        if (!this.isValidLI(li) && limit < this.maximumSelectionLength) {\n          target = li.firstElementChild.lastElementChild;\n\n          if (target.classList.contains('e-check')) {\n            this.selectAllItem(false, e, li);\n          } else {\n            this.selectAllItem(true, e, li);\n          }\n        }\n      }\n\n      this.refreshSelection();\n\n      if (this.closePopupOnSelect) {\n        this.hidePopup(e);\n      }\n    }\n\n    this.refreshPlaceHolder();\n  };\n\n  MultiSelect.prototype.refreshListItems = function (data) {\n    if ((this.allowFiltering || this.mode === 'CheckBox' && this.enableSelectionOrder === true || this.allowCustomValue) && this.mainList && this.listData) {\n      var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n      this.onActionComplete(list, this.mainData);\n      this.focusAtLastListItem(data);\n\n      if (this.value && this.value.length) {\n        this.refreshSelection();\n      }\n    } else if (!isNullOrUndefined(this.fields.groupBy) && this.value && this.value.length) {\n      this.refreshSelection();\n    }\n  };\n\n  MultiSelect.prototype.removeSelectedChip = function (e) {\n    var selectedElem = this.chipCollectionWrapper.querySelector('span.' + CHIP_SELECTED);\n    var temp;\n\n    if (selectedElem !== null) {\n      if (!isNullOrUndefined(this.value)) {\n        this.tempValues = this.value.slice();\n      }\n\n      temp = selectedElem.nextElementSibling;\n\n      if (temp !== null) {\n        this.removeChipSelection();\n        this.addChipSelection(temp, e);\n      }\n\n      this.removeValue(selectedElem.getAttribute('data-value'), e);\n      this.makeTextBoxEmpty();\n    }\n\n    if (this.closePopupOnSelect) {\n      this.hidePopup(e);\n    }\n\n    this.checkPlaceholderSize();\n  };\n\n  MultiSelect.prototype.moveByTop = function (state) {\n    var elements = this.list.querySelectorAll('li.' + dropDownBaseClasses.li);\n    var index;\n\n    if (elements.length > 1) {\n      this.removeFocus();\n      index = state ? 0 : elements.length - 1;\n      this.addListFocus(elements[index]);\n      this.scrollBottom(elements[index], index);\n    }\n\n    this.updateAriaAttribute();\n  };\n\n  MultiSelect.prototype.moveByList = function (position) {\n    if (this.list) {\n      var elements = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n\n      if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n        elements = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ',li.' + dropDownBaseClasses.group + ':not(.' + HIDE_LIST + ')' + ':not(.e-reorder-hide)');\n      }\n\n      var selectedElem = this.list.querySelector('li.' + dropDownBaseClasses.focus);\n      var temp = -1;\n\n      if (elements.length) {\n        for (var index = 0; index < elements.length; index++) {\n          if (elements[index] === selectedElem) {\n            temp = index;\n            break;\n          }\n        }\n\n        if (position > 0) {\n          if (temp < elements.length - 1) {\n            this.removeFocus();\n            this.addListFocus(elements[++temp]);\n            this.updateCheck(elements[temp]);\n            this.scrollBottom(elements[temp], temp);\n          }\n        } else {\n          if (temp > 0) {\n            this.removeFocus();\n            this.addListFocus(elements[--temp]);\n            this.updateCheck(elements[temp]);\n            this.scrollTop(elements[temp], temp);\n          }\n        }\n      }\n    }\n  };\n\n  MultiSelect.prototype.updateCheck = function (element) {\n    if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n      var checkElement = element.firstElementChild.lastElementChild;\n\n      if (checkElement.classList.contains('e-check')) {\n        element.classList.add('e-active');\n      } else {\n        element.classList.remove('e-active');\n      }\n    }\n  };\n\n  MultiSelect.prototype.moveBy = function (position, e) {\n    var temp;\n    var elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP$1);\n    var selectedElem = this.chipCollectionWrapper.querySelector('span.' + CHIP_SELECTED);\n\n    if (selectedElem === null) {\n      if (position < 0) {\n        this.addChipSelection(elements[elements.length - 1], e);\n      }\n    } else {\n      if (position < 0) {\n        temp = selectedElem.previousElementSibling;\n\n        if (temp !== null) {\n          this.removeChipSelection();\n          this.addChipSelection(temp, e);\n        }\n      } else {\n        temp = selectedElem.nextElementSibling;\n        this.removeChipSelection();\n\n        if (temp !== null) {\n          this.addChipSelection(temp, e);\n        }\n      }\n    }\n  };\n\n  MultiSelect.prototype.chipClick = function (e) {\n    if (this.enabled) {\n      var elem = closest(e.target, '.' + CHIP$1);\n      this.removeChipSelection();\n      this.addChipSelection(elem, e);\n    }\n  };\n\n  MultiSelect.prototype.removeChipSelection = function () {\n    if (this.chipCollectionWrapper) {\n      this.removeChipFocus();\n    }\n  };\n\n  MultiSelect.prototype.addChipSelection = function (element, e) {\n    addClass([element], CHIP_SELECTED);\n    this.trigger('chipSelection', e);\n  };\n\n  MultiSelect.prototype.onChipRemove = function (e) {\n    if (e.which === 3 || e.button === 2) {\n      return;\n    }\n\n    if (this.enabled && !this.readonly) {\n      var element = e.target.parentElement;\n      var customVal = element.getAttribute('data-value');\n      var value = this.getFormattedValue(customVal);\n\n      if (this.allowCustomValue && (customVal !== 'false' && value === false || !isNullOrUndefined(value) && value.toString() === 'NaN')) {\n        value = customVal;\n      }\n\n      if (this.isPopupOpen() && this.mode !== 'CheckBox') {\n        this.hidePopup(e);\n      }\n\n      if (!this.inputFocus) {\n        this.inputElement.focus();\n      }\n\n      this.removeValue(value, e);\n\n      if (isNullOrUndefined(this.findListElement(this.list, 'li', 'data-value', value)) && this.mainList && this.listData) {\n        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n        this.onActionComplete(list, this.mainData);\n      }\n\n      this.updateDelimeter(this.delimiterChar, e);\n\n      if (this.placeholder && this.floatLabelType === 'Never') {\n        this.makeTextBoxEmpty();\n        this.checkPlaceholderSize();\n      } else {\n        this.inputElement.value = '';\n      }\n\n      e.preventDefault();\n    }\n  };\n\n  MultiSelect.prototype.makeTextBoxEmpty = function () {\n    this.inputElement.value = '';\n    this.refreshPlaceHolder();\n  };\n\n  MultiSelect.prototype.refreshPlaceHolder = function () {\n    if (this.placeholder && this.floatLabelType === 'Never') {\n      if (this.value && this.value.length || !isNullOrUndefined(this.text) && this.text !== '') {\n        this.inputElement.placeholder = '';\n      } else {\n        this.inputElement.placeholder = encodePlaceholder(this.placeholder);\n      }\n    } else {\n      this.setFloatLabelType();\n    }\n\n    this.expandTextbox();\n  };\n\n  MultiSelect.prototype.removeAllItems = function (value, eve, isClearAll, element, mainElement) {\n    var index = this.value.indexOf(value);\n    var removeVal = this.value.slice(0);\n    removeVal.splice(index, 1);\n    this.setProperties({\n      value: [].concat([], removeVal)\n    }, true);\n    element.setAttribute('aria-selected', 'false');\n    var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;\n    removeClass([element], className);\n    this.notify('activeList', {\n      module: 'CheckBoxSelection',\n      enable: this.mode === 'CheckBox',\n      li: element,\n      e: this,\n      index: index\n    });\n    this.invokeCheckboxSelection(element, eve, isClearAll);\n    this.updateMainList(true, value, mainElement);\n    this.updateChipStatus();\n  };\n\n  MultiSelect.prototype.invokeCheckboxSelection = function (element, eve, isClearAll) {\n    this.notify('updatelist', {\n      module: 'CheckBoxSelection',\n      enable: this.mode === 'CheckBox',\n      li: element,\n      e: eve\n    });\n    this.updateAriaActiveDescendant();\n\n    if (this.value && this.value.length !== this.mainData.length && this.mode === 'CheckBox' && this.showSelectAll && !(this.isSelectAll || isClearAll)) {\n      this.notify('checkSelectAll', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox',\n        value: 'uncheck'\n      });\n    }\n  };\n\n  MultiSelect.prototype.removeValue = function (value, eve, length, isClearAll) {\n    var _this = this;\n\n    var index = this.value.indexOf(this.getFormattedValue(value));\n\n    if (index === -1 && this.allowCustomValue && !isNullOrUndefined(value)) {\n      index = this.value.indexOf(value.toString());\n    }\n\n    var targetEle = eve && eve.target;\n    isClearAll = isClearAll || targetEle && targetEle.classList.contains('e-close-hooker') ? true : null;\n    var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;\n\n    if (index !== -1) {\n      var element_1 = this.findListElement(this.list, 'li', 'data-value', value);\n      var val_1 = this.getDataByValue(value);\n      var eventArgs = {\n        e: eve,\n        item: element_1,\n        itemData: val_1,\n        isInteracted: eve ? true : false,\n        cancel: false\n      };\n      this.trigger('removing', eventArgs, function (eventArgs) {\n        if (eventArgs.cancel) {\n          _this.removeIndex++;\n        } else {\n          var removeVal = _this.value.slice(0);\n\n          removeVal.splice(index, 1);\n\n          _this.setProperties({\n            value: [].concat([], removeVal)\n          }, true);\n\n          if (element_1 !== null) {\n            var hideElement = _this.findListElement(_this.mainList, 'li', 'data-value', value);\n\n            element_1.setAttribute('aria-selected', 'false');\n            removeClass([element_1], className);\n\n            if (hideElement) {\n              hideElement.setAttribute('aria-selected', 'false');\n              removeClass([element_1, hideElement], className);\n            }\n\n            _this.notify('activeList', {\n              module: 'CheckBoxSelection',\n              enable: _this.mode === 'CheckBox',\n              li: element_1,\n              e: _this,\n              index: index\n            });\n\n            _this.invokeCheckboxSelection(element_1, eve, isClearAll);\n          }\n\n          if (_this.hideSelectedItem && _this.fields.groupBy && element_1) {\n            _this.hideGroupItem(value);\n          }\n\n          if (_this.hideSelectedItem && _this.fixedHeaderElement && _this.fields.groupBy && _this.mode !== 'CheckBox' && _this.isPopupOpen()) {\n            _super.prototype.scrollStop.call(_this);\n          }\n\n          _this.updateMainList(true, value);\n\n          _this.removeChip(value);\n\n          _this.updateChipStatus();\n\n          var limit = _this.value && _this.value.length ? _this.value.length : 0;\n\n          if (limit < _this.maximumSelectionLength) {\n            var collection = _this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.e-active)');\n\n            removeClass(collection, 'e-disable');\n          }\n\n          _this.trigger('removed', eventArgs);\n\n          var targetEle_1 = eve && eve.currentTarget;\n          var isSelectAll = targetEle_1 && targetEle_1.classList.contains('e-selectall-parent') ? true : null;\n\n          if (!_this.changeOnBlur && !isClearAll && eve && length && !isSelectAll) {\n            _this.updateValueState(eve, _this.value, _this.tempValues);\n          }\n\n          if (length) {\n            _this.selectAllEventData.push(val_1);\n\n            _this.selectAllEventEle.push(element_1);\n          }\n\n          if (length === 1) {\n            if (!_this.changeOnBlur) {\n              _this.updateValueState(eve, _this.value, _this.tempValues);\n            }\n\n            var args = {\n              event: eve,\n              items: _this.selectAllEventEle,\n              itemData: _this.selectAllEventData,\n              isInteracted: eve ? true : false,\n              isChecked: false\n            };\n\n            _this.trigger('selectedAll', args);\n\n            _this.selectAllEventData = [];\n            _this.selectAllEventEle = [];\n          }\n\n          if (isClearAll && (length === 1 || length === null)) {\n            _this.clearAllCallback(eve, isClearAll);\n          }\n        }\n      });\n    }\n  };\n\n  MultiSelect.prototype.updateMainList = function (state, value, mainElement) {\n    if (this.allowFiltering || this.mode === 'CheckBox') {\n      var element2 = mainElement ? mainElement : this.findListElement(this.mainList, 'li', 'data-value', value);\n\n      if (element2) {\n        if (state) {\n          element2.setAttribute('aria-selected', 'false');\n          removeClass([element2], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected);\n\n          if (this.mode === 'CheckBox') {\n            removeClass([element2.firstElementChild.lastElementChild], 'e-check');\n          }\n        } else {\n          element2.setAttribute('aria-selected', 'true');\n          addClass([element2], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected);\n\n          if (this.mode === 'CheckBox') {\n            addClass([element2.firstElementChild.lastElementChild], 'e-check');\n          }\n        }\n      }\n    }\n  };\n\n  MultiSelect.prototype.removeChip = function (value) {\n    if (this.chipCollectionWrapper) {\n      var element = this.findListElement(this.chipCollectionWrapper, 'span', 'data-value', value);\n\n      if (element) {\n        remove(element);\n      }\n    }\n  };\n\n  MultiSelect.prototype.setWidth = function (width) {\n    if (!isNullOrUndefined(width)) {\n      if (typeof width === 'number') {\n        this.overAllWrapper.style.width = formatUnit(width);\n      } else if (typeof width === 'string') {\n        this.overAllWrapper.style.width = width.match(/px|%|em/) ? width : formatUnit(width);\n      }\n    }\n  };\n\n  MultiSelect.prototype.updateChipStatus = function () {\n    if (this.value && this.value.length) {\n      if (!isNullOrUndefined(this.chipCollectionWrapper)) {\n        this.chipCollectionWrapper.style.display = '';\n      }\n\n      if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {\n        this.showDelimWrapper();\n      }\n\n      this.showOverAllClear();\n    } else {\n      if (!isNullOrUndefined(this.chipCollectionWrapper)) {\n        this.chipCollectionWrapper.style.display = 'none';\n      }\n\n      if (!isNullOrUndefined(this.delimiterWrapper)) {\n        this.delimiterWrapper.style.display = 'none';\n      }\n\n      this.hideOverAllClear();\n    }\n  };\n\n  MultiSelect.prototype.addValue = function (value, text, eve) {\n    if (!this.value) {\n      this.value = [];\n    }\n\n    if (this.value.indexOf(value) < 0) {\n      this.setProperties({\n        value: [].concat([], this.value, [value])\n      }, true);\n    }\n\n    var element = this.findListElement(this.list, 'li', 'data-value', value);\n    this.removeFocus();\n\n    if (element) {\n      this.addListFocus(element);\n      this.addListSelection(element);\n    }\n\n    if (this.mode !== 'Delimiter' && this.mode !== 'CheckBox') {\n      this.addChip(text, value, eve);\n    }\n\n    if (this.hideSelectedItem && this.fields.groupBy) {\n      this.hideGroupItem(value);\n    }\n\n    this.updateChipStatus();\n    this.checkMaxSelection();\n  };\n\n  MultiSelect.prototype.checkMaxSelection = function () {\n    var limit = this.value && this.value.length ? this.value.length : 0;\n\n    if (limit === this.maximumSelectionLength) {\n      var collection = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.e-active)');\n      addClass(collection, 'e-disable');\n    }\n  };\n\n  MultiSelect.prototype.dispatchSelect = function (value, eve, element, isNotTrigger, length) {\n    var _this = this;\n\n    var list = this.listData;\n\n    if (this.initStatus && !isNotTrigger) {\n      var val_2 = this.getDataByValue(value);\n      var eventArgs = {\n        e: eve,\n        item: element,\n        itemData: val_2,\n        isInteracted: eve ? true : false,\n        cancel: false\n      };\n      this.trigger('select', eventArgs, function (eventArgs) {\n        if (!eventArgs.cancel) {\n          if (length) {\n            _this.selectAllEventData.push(val_2);\n\n            _this.selectAllEventEle.push(element);\n          }\n\n          if (length === 1) {\n            var args = {\n              event: eve,\n              items: _this.selectAllEventEle,\n              itemData: _this.selectAllEventData,\n              isInteracted: eve ? true : false,\n              isChecked: true\n            };\n\n            _this.trigger('selectedAll', args);\n\n            _this.selectAllEventData = [];\n          }\n\n          if (_this.allowCustomValue && _this.isServerRendered && _this.listData !== list) {\n            _this.listData = list;\n          }\n\n          _this.updateListSelectEventCallback(value, element, eve);\n\n          if (_this.hideSelectedItem && _this.fixedHeaderElement && _this.fields.groupBy && _this.mode !== 'CheckBox') {\n            _super.prototype.scrollStop.call(_this);\n          }\n        }\n      });\n    }\n  };\n\n  MultiSelect.prototype.addChip = function (text, value, e) {\n    if (this.chipCollectionWrapper) {\n      this.getChip(text, value, e);\n    }\n  };\n\n  MultiSelect.prototype.removeChipFocus = function () {\n    var elements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP$1);\n    var closeElements = this.chipCollectionWrapper.querySelectorAll('span.' + CHIP_CLOSE$1.split(' ')[0]);\n    removeClass(elements, CHIP_SELECTED);\n\n    if (Browser.isDevice) {\n      for (var index = 0; index < closeElements.length; index++) {\n        closeElements[index].style.display = 'none';\n      }\n    }\n  };\n\n  MultiSelect.prototype.onMobileChipInteraction = function (e) {\n    var chipElem = closest(e.target, '.' + CHIP$1);\n    var chipClose = chipElem.querySelector('span.' + CHIP_CLOSE$1.split(' ')[0]);\n\n    if (this.enabled && !this.readonly) {\n      if (!chipElem.classList.contains(CHIP_SELECTED)) {\n        this.removeChipFocus();\n        chipClose.style.display = '';\n        chipElem.classList.add(CHIP_SELECTED);\n      }\n\n      this.refreshPopup();\n      e.preventDefault();\n    }\n  };\n\n  MultiSelect.prototype.multiCompiler = function (multiselectTemplate) {\n    var checkTemplate = false;\n\n    if (multiselectTemplate) {\n      try {\n        checkTemplate = selectAll(multiselectTemplate, document).length ? true : false;\n      } catch (exception) {\n        checkTemplate = false;\n      }\n    }\n\n    return checkTemplate;\n  };\n\n  MultiSelect.prototype.getChip = function (data, value, e) {\n    var _this = this;\n\n    var itemData = {\n      text: value,\n      value: value\n    };\n    var chip = this.createElement('span', {\n      className: CHIP$1,\n      attrs: {\n        'data-value': value,\n        'title': data\n      }\n    });\n    var compiledString;\n    var chipContent = this.createElement('span', {\n      className: CHIP_CONTENT$1\n    });\n    var chipClose = this.createElement('span', {\n      className: CHIP_CLOSE$1\n    });\n\n    if (this.mainData) {\n      itemData = this.getDataByValue(value);\n    }\n\n    if (this.valueTemplate && !isNullOrUndefined(itemData)) {\n      var valuecheck = this.multiCompiler(this.valueTemplate);\n\n      if (valuecheck) {\n        compiledString = compile(select(this.valueTemplate, document).innerHTML.trim());\n      } else {\n        compiledString = compile(this.valueTemplate);\n      } // eslint-disable-next-line\n\n\n      var valueCompTemp = compiledString(itemData, this, 'valueTemplate', this.valueTemplateId, this.isStringTemplate, null, chipContent);\n\n      if (valueCompTemp && valueCompTemp.length > 0) {\n        for (var i = 0; i < valueCompTemp.length; i++) {\n          chipContent.appendChild(valueCompTemp[i]);\n        }\n      }\n\n      this.renderReactTemplates();\n    } else if (this.enableHtmlSanitizer) {\n      chipContent.innerText = data;\n    } else {\n      chipContent.innerHTML = data;\n    }\n\n    chip.appendChild(chipContent);\n    var eventArgs = {\n      isInteracted: e ? true : false,\n      itemData: itemData,\n      e: e,\n      setClass: function (classes) {\n        addClass([chip], classes);\n      },\n      cancel: false\n    };\n    this.isPreventChange = this.isAngular && this.preventChange;\n    this.trigger('tagging', eventArgs, function (eventArgs) {\n      if (!eventArgs.cancel) {\n        if (Browser.isDevice) {\n          chip.classList.add(MOBILE_CHIP);\n          append([chipClose], chip);\n          chipClose.style.display = 'none';\n          EventHandler.add(chip, 'click', _this.onMobileChipInteraction, _this);\n        } else {\n          EventHandler.add(chip, 'mousedown', _this.chipClick, _this);\n\n          if (_this.showClearButton) {\n            chip.appendChild(chipClose);\n          }\n        }\n\n        EventHandler.add(chipClose, 'mousedown', _this.onChipRemove, _this);\n\n        _this.chipCollectionWrapper.appendChild(chip);\n\n        if (!_this.changeOnBlur && e) {\n          _this.updateValueState(e, _this.value, _this.tempValues);\n        }\n      }\n    });\n  };\n\n  MultiSelect.prototype.calcPopupWidth = function () {\n    var width = formatUnit(this.popupWidth);\n\n    if (width.indexOf('%') > -1) {\n      var inputWidth = this.componentWrapper.offsetWidth * parseFloat(width) / 100;\n      width = inputWidth.toString() + 'px';\n    }\n\n    return width;\n  };\n\n  MultiSelect.prototype.mouseIn = function () {\n    if (this.enabled && !this.readonly) {\n      this.showOverAllClear();\n    }\n  };\n\n  MultiSelect.prototype.mouseOut = function () {\n    if (!this.inputFocus) {\n      this.overAllClear.style.display = 'none';\n    }\n  };\n\n  MultiSelect.prototype.listOption = function (dataSource, fields) {\n    var iconCss = isNullOrUndefined(fields.iconCss) ? false : true;\n    var fieldProperty = isNullOrUndefined(fields.properties) ? fields : fields.properties;\n    this.listCurrentOptions = fields.text !== null || fields.value !== null ? {\n      fields: fieldProperty,\n      showIcon: iconCss,\n      ariaAttributes: {\n        groupItemRole: 'presentation'\n      }\n    } : {\n      fields: {\n        value: 'text'\n      }\n    };\n    extend(this.listCurrentOptions, this.listCurrentOptions, fields, true);\n\n    if (this.mode === 'CheckBox') {\n      this.notify('listoption', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox',\n        dataSource: dataSource,\n        fieldProperty: fieldProperty\n      });\n    }\n\n    return this.listCurrentOptions;\n  };\n\n  MultiSelect.prototype.renderPopup = function () {\n    var _this = this;\n\n    if (!this.list) {\n      _super.prototype.render.call(this);\n    }\n\n    if (!this.popupObj) {\n      if (!isNullOrUndefined(this.popupWrapper)) {\n        document.body.appendChild(this.popupWrapper);\n        var checkboxFilter = this.popupWrapper.querySelector('.' + FILTERPARENT);\n\n        if (this.mode === 'CheckBox' && !this.allowFiltering && checkboxFilter && this.filterParent) {\n          checkboxFilter.remove();\n          this.filterParent = null;\n        }\n\n        var overAllHeight = parseInt(this.popupHeight, 10);\n        this.popupWrapper.style.visibility = 'hidden';\n\n        if (this.headerTemplate) {\n          this.setHeaderTemplate();\n          overAllHeight -= this.header.offsetHeight;\n        }\n\n        append([this.list], this.popupWrapper);\n\n        if (this.footerTemplate) {\n          this.setFooterTemplate();\n          overAllHeight -= this.footer.offsetHeight;\n        }\n\n        if (this.mode === 'CheckBox' && this.showSelectAll) {\n          this.notify('selectAll', {\n            module: 'CheckBoxSelection',\n            enable: this.mode === 'CheckBox'\n          });\n          overAllHeight -= this.selectAllHeight;\n        } else if (this.mode === 'CheckBox' && !this.showSelectAll && !this.headerTemplate && !this.footerTemplate) {\n          this.notify('selectAll', {\n            module: 'CheckBoxSelection',\n            enable: this.mode === 'CheckBox'\n          });\n          overAllHeight = parseInt(this.popupHeight, 10);\n        } else if (this.mode === 'CheckBox' && !this.showSelectAll) {\n          this.notify('selectAll', {\n            module: 'CheckBoxSelection',\n            enable: this.mode === 'CheckBox'\n          });\n          overAllHeight = parseInt(this.popupHeight, 10);\n\n          if (this.headerTemplate && this.header) {\n            overAllHeight -= this.header.offsetHeight;\n          }\n\n          if (this.footerTemplate && this.footer) {\n            overAllHeight -= this.footer.offsetHeight;\n          }\n        }\n\n        if (this.mode === 'CheckBox') {\n          var args = {\n            module: 'CheckBoxSelection',\n            enable: this.mode === 'CheckBox',\n            popupElement: this.popupWrapper\n          };\n\n          if (this.allowFiltering) {\n            this.notify('searchBox', args);\n            overAllHeight -= this.searchBoxHeight;\n          }\n\n          addClass([this.popupWrapper], 'e-checkbox');\n        }\n\n        if (this.popupHeight !== 'auto') {\n          this.list.style.maxHeight = formatUnit(overAllHeight);\n          this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight);\n        } else {\n          this.list.style.maxHeight = formatUnit(this.popupHeight);\n        }\n\n        this.popupObj = new Popup(this.popupWrapper, {\n          width: this.calcPopupWidth(),\n          targetType: 'relative',\n          position: {\n            X: 'left',\n            Y: 'bottom'\n          },\n          relateTo: this.overAllWrapper,\n          collision: {\n            X: 'flip',\n            Y: 'flip'\n          },\n          offsetY: 1,\n          enableRtl: this.enableRtl,\n          zIndex: this.zIndex,\n          close: function () {\n            if (_this.popupObj.element.parentElement) {\n              _this.popupObj.unwireScrollEvents(); // For restrict the page scrolling in safari browser\n\n\n              var checkboxFilterInput = _this.popupWrapper.querySelector('.' + FILTERINPUT);\n\n              if (_this.mode === 'CheckBox' && checkboxFilterInput && document.activeElement === checkboxFilterInput) {\n                checkboxFilterInput.blur();\n              }\n\n              detach(_this.popupObj.element);\n            }\n          },\n          open: function () {\n            _this.popupObj.resolveCollision();\n\n            if (!_this.isFirstClick) {\n              var ulElement = _this.list.querySelector('ul');\n\n              if (ulElement) {\n                if (!(_this.mode !== 'CheckBox' && (_this.allowFiltering || _this.allowCustomValue) && _this.targetElement().trim() !== '')) {\n                  _this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;\n                }\n              }\n\n              _this.isFirstClick = true;\n            }\n\n            _this.popupObj.wireScrollEvents();\n\n            if (!(_this.mode !== 'CheckBox' && (_this.allowFiltering || _this.allowCustomValue) && _this.targetElement().trim() !== '')) {\n              _this.loadTemplate();\n            }\n\n            _this.setScrollPosition();\n\n            if (_this.allowFiltering) {\n              _this.notify('inputFocus', {\n                module: 'CheckBoxSelection',\n                enable: _this.mode === 'CheckBox',\n                value: 'focus'\n              });\n            }\n          },\n          targetExitViewport: function () {\n            if (!Browser.isDevice) {\n              _this.hidePopup();\n            }\n          }\n        });\n\n        if (this.mode === 'CheckBox' && Browser.isDevice && this.allowFiltering) {\n          this.notify('deviceSearchBox', {\n            module: 'CheckBoxSelection',\n            enable: this.mode === 'CheckBox'\n          });\n        }\n\n        this.popupObj.close();\n        this.popupWrapper.style.visibility = '';\n      }\n    }\n  };\n\n  MultiSelect.prototype.setHeaderTemplate = function () {\n    var compiledString;\n\n    if (this.header) {\n      this.header.remove();\n    }\n\n    this.header = this.createElement('div');\n    addClass([this.header], HEADER$1);\n    var headercheck = this.multiCompiler(this.headerTemplate);\n\n    if (headercheck) {\n      compiledString = compile(select(this.headerTemplate, document).innerHTML.trim());\n    } else {\n      compiledString = compile(this.headerTemplate);\n    } // eslint-disable-next-line\n\n\n    var elements = compiledString({}, this, 'headerTemplate', this.headerTemplateId, this.isStringTemplate, null, this.header);\n\n    if (elements && elements.length > 0) {\n      for (var temp = 0; temp < elements.length; temp++) {\n        this.header.appendChild(elements[temp]);\n      }\n    }\n\n    if (this.mode === 'CheckBox' && this.showSelectAll) {\n      prepend([this.header], this.popupWrapper);\n    } else {\n      append([this.header], this.popupWrapper);\n    }\n\n    EventHandler.add(this.header, 'mousedown', this.onListMouseDown, this);\n  };\n\n  MultiSelect.prototype.setFooterTemplate = function () {\n    var compiledString;\n\n    if (this.footer) {\n      this.footer.remove();\n    }\n\n    this.footer = this.createElement('div');\n    addClass([this.footer], FOOTER$1);\n    var footercheck = this.multiCompiler(this.footerTemplate);\n\n    if (footercheck) {\n      compiledString = compile(select(this.footerTemplate, document).innerHTML.trim());\n    } else {\n      compiledString = compile(this.footerTemplate);\n    } // eslint-disable-next-line\n\n\n    var elements = compiledString({}, this, 'footerTemplate', this.footerTemplateId, this.isStringTemplate, null, this.footer);\n\n    if (elements && elements.length > 0) {\n      for (var temp = 0; temp < elements.length; temp++) {\n        this.footer.appendChild(elements[temp]);\n      }\n    }\n\n    append([this.footer], this.popupWrapper);\n    EventHandler.add(this.footer, 'mousedown', this.onListMouseDown, this);\n  };\n\n  MultiSelect.prototype.clearAll = function (e) {\n    if (this.enabled && !this.readonly) {\n      var temp = void 0;\n\n      if (this.value && this.value.length > 0) {\n        var liElement = this.list && this.list.querySelectorAll('li.e-list-item');\n\n        if (liElement && liElement.length > 0) {\n          this.selectAllItems(false, e);\n        } else {\n          this.removeIndex = 0;\n\n          for (temp = this.value[this.removeIndex]; this.removeIndex < this.value.length; temp = this.value[this.removeIndex]) {\n            this.removeValue(temp, e, null, true);\n          }\n        }\n\n        this.selectedElementID = null;\n        this.inputElement.removeAttribute('aria-activedescendant');\n      } else {\n        this.clearAllCallback(e);\n      }\n    }\n  };\n\n  MultiSelect.prototype.clearAllCallback = function (e, isClearAll) {\n    var tempValues = this.value ? this.value.slice() : [];\n\n    if (this.mainList && this.listData && (this.allowFiltering && this.mode !== 'CheckBox' || this.allowCustomValue)) {\n      var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n      this.onActionComplete(list, this.mainData);\n    }\n\n    this.focusAtFirstListItem();\n    this.updateDelimeter(this.delimiterChar, e);\n\n    if (this.mode !== 'Box' && (!this.inputFocus || this.mode === 'CheckBox')) {\n      this.updateDelimView();\n    }\n\n    if (this.inputElement.value !== '') {\n      this.makeTextBoxEmpty();\n      this.search(null);\n    }\n\n    this.checkPlaceholderSize();\n\n    if (this.isPopupOpen()) {\n      this.refreshPopup();\n    }\n\n    if (!this.inputFocus) {\n      if (this.changeOnBlur) {\n        this.updateValueState(e, this.value, tempValues);\n      }\n\n      if (this.mode !== 'CheckBox') {\n        this.inputElement.focus();\n      }\n    }\n\n    if (this.mode === 'CheckBox') {\n      this.refreshPlaceHolder();\n      this.refreshInputHight();\n\n      if (this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n        this.updateValueState(e, this.value, this.tempValues);\n      }\n    }\n\n    if (!this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n      this.updateValueState(e, this.value, this.tempValues);\n    }\n\n    if (this.mode === 'CheckBox' && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {\n      this.updateListItems(this.list.querySelectorAll('li.e-list-item'), this.mainList.querySelectorAll('li.e-list-item'));\n    }\n\n    e.preventDefault();\n  };\n\n  MultiSelect.prototype.windowResize = function () {\n    this.refreshPopup();\n\n    if ((!this.inputFocus || this.mode === 'CheckBox') && this.viewWrapper && this.viewWrapper.parentElement) {\n      this.updateDelimView();\n    }\n  };\n\n  MultiSelect.prototype.resetValueHandler = function (e) {\n    var formElement = closest(this.inputElement, 'form');\n\n    if (formElement && e.target === formElement) {\n      var textVal = this.element.tagName === this.getNgDirective() ? null : this.element.getAttribute('data-initial-value');\n      this.text = textVal;\n    }\n  };\n\n  MultiSelect.prototype.wireEvent = function () {\n    EventHandler.add(this.componentWrapper, 'mousedown', this.wrapperClick, this);\n    EventHandler.add(window, 'resize', this.windowResize, this);\n    EventHandler.add(this.inputElement, 'focus', this.focusInHandler, this);\n    EventHandler.add(this.inputElement, 'keydown', this.onKeyDown, this);\n    EventHandler.add(this.inputElement, 'keyup', this.keyUp, this);\n\n    if (this.mode !== 'CheckBox') {\n      EventHandler.add(this.inputElement, 'input', this.onInput, this);\n    }\n\n    EventHandler.add(this.inputElement, 'blur', this.onBlurHandler, this);\n    EventHandler.add(this.componentWrapper, 'mouseover', this.mouseIn, this);\n    var formElement = closest(this.inputElement, 'form');\n\n    if (formElement) {\n      EventHandler.add(formElement, 'reset', this.resetValueHandler, this);\n    }\n\n    EventHandler.add(this.componentWrapper, 'mouseout', this.mouseOut, this);\n    EventHandler.add(this.overAllClear, 'mouseup', this.clearAll, this);\n    EventHandler.add(this.inputElement, 'paste', this.pasteHandler, this);\n  };\n\n  MultiSelect.prototype.onInput = function (e) {\n    if (this.keyDownStatus) {\n      this.isValidKey = true;\n    } else {\n      this.isValidKey = false;\n    }\n\n    this.keyDownStatus = false; // For Filtering works in mobile firefox\n\n    if (Browser.isDevice && Browser.info.name === 'mozilla') {\n      this.search(e);\n    }\n  };\n\n  MultiSelect.prototype.pasteHandler = function (event) {\n    var _this = this;\n\n    setTimeout(function () {\n      _this.expandTextbox();\n\n      _this.search(event);\n    });\n  };\n\n  MultiSelect.prototype.search = function (e) {\n    var _this = this;\n\n    this.resetFilteredData = true;\n\n    if (!isNullOrUndefined(e)) {\n      this.keyCode = e.keyCode;\n    }\n\n    if (!this.isPopupOpen() && this.openOnClick) {\n      this.showPopup(e);\n    }\n\n    this.openClick(e);\n\n    if (this.checkTextLength() && !this.allowFiltering && !isNullOrUndefined(e) && e.keyCode !== 8) {\n      this.focusAtFirstListItem();\n    } else {\n      var text = this.targetElement();\n\n      if (this.allowFiltering) {\n        var eventArgs_1 = {\n          preventDefaultAction: false,\n          text: this.targetElement(),\n          updateData: function (dataSource, query, fields) {\n            if (eventArgs_1.cancel) {\n              return;\n            }\n\n            _this.isFiltered = true;\n            _this.remoteFilterAction = true;\n\n            _this.dataUpdater(dataSource, query, fields);\n          },\n          event: e,\n          cancel: false\n        };\n        this.trigger('filtering', eventArgs_1, function (eventArgs) {\n          if (!eventArgs.cancel) {\n            if (!_this.isFiltered && !eventArgs.preventDefaultAction) {\n              _this.filterAction = true;\n\n              _this.dataUpdater(_this.dataSource, null, _this.fields);\n            }\n          }\n        });\n      } else if (this.allowCustomValue) {\n        var query = new Query();\n        query = text !== '' ? query.where(this.fields.text, 'startswith', text, this.ignoreCase, this.ignoreAccent) : query;\n        this.dataUpdater(this.mainData, query, this.fields);\n      } else {\n        var liCollections = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.e-hide-listitem)');\n        var activeElement = Search(this.targetElement(), liCollections, 'StartsWith', this.ignoreCase);\n\n        if (activeElement && activeElement.item !== null) {\n          this.addListFocus(activeElement.item);\n          this.list.scrollTop = activeElement.item.offsetHeight * activeElement.index;\n        } else if (this.targetElement() !== '') {\n          this.removeFocus();\n        } else {\n          this.focusAtFirstListItem();\n        }\n      }\n    }\n  };\n\n  MultiSelect.prototype.preRender = function () {\n    if (this.allowFiltering === null) {\n      this.allowFiltering = this.mode === 'CheckBox' ? true : false;\n    }\n\n    this.initializeData();\n    this.updateDataAttribute(this.htmlAttributes);\n\n    _super.prototype.preRender.call(this);\n  };\n\n  MultiSelect.prototype.getLocaleName = function () {\n    return 'multi-select';\n  };\n\n  MultiSelect.prototype.initializeData = function () {\n    this.mainListCollection = [];\n    this.beforePopupOpen = false;\n    this.filterAction = false;\n    this.remoteFilterAction = false;\n    this.isFirstClick = false;\n    this.mobFilter = true;\n    this.isFiltered = false;\n    this.focused = true;\n    this.initial = true;\n    this.backCommand = true;\n  };\n\n  MultiSelect.prototype.updateData = function (delimiterChar, e) {\n    var data = '';\n    var delim = this.mode === 'Delimiter' || this.mode === 'CheckBox';\n    var text = [];\n    var temp;\n    var tempData = this.listData;\n    this.listData = this.mainData;\n\n    if (!isNullOrUndefined(this.hiddenElement)) {\n      this.hiddenElement.innerHTML = '';\n    }\n\n    if (!isNullOrUndefined(this.value)) {\n      for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {\n        var listValue = this.findListElement(!isNullOrUndefined(this.mainList) ? this.mainList : this.ulElement, 'li', 'data-value', this.value[index]);\n\n        if (isNullOrUndefined(listValue) && !this.allowCustomValue) {\n          this.value.splice(index, 1);\n          index -= 1;\n        } else {\n          if (this.listData) {\n            temp = this.getTextByValue(this.value[index]);\n          } else {\n            temp = this.value[index];\n          }\n\n          data += temp + delimiterChar + ' ';\n          text.push(temp);\n        }\n\n        if (!isNullOrUndefined(this.hiddenElement)) {\n          this.hiddenElement.innerHTML += '<option selected value =\"' + this.value[index] + '\">' + index + '</option>';\n        }\n      }\n    }\n\n    this.setProperties({\n      text: text.toString()\n    }, true);\n\n    if (delim) {\n      this.updateWrapperText(this.delimiterWrapper, data);\n      this.delimiterWrapper.setAttribute('id', getUniqueID('delim_val'));\n      this.inputElement.setAttribute('aria-describedby', this.delimiterWrapper.id);\n      this.inputElement.setAttribute('aria-labelledby', this.delimiterWrapper.id);\n    }\n\n    var targetEle = e && e.target;\n    var isClearAll = targetEle && targetEle.classList.contains('e-close-hooker') ? true : null;\n\n    if (!this.changeOnBlur && e && !isClearAll || this.isSelectAll) {\n      this.isSelectAll = false;\n      this.updateValueState(e, this.value, this.tempValues);\n    }\n\n    this.listData = tempData;\n    this.addValidInputClass();\n  };\n\n  MultiSelect.prototype.initialTextUpdate = function () {\n    if (!isNullOrUndefined(this.text)) {\n      var textArr = this.text.split(this.delimiterChar);\n      var textVal = [];\n\n      for (var index = 0; textArr.length > index; index++) {\n        var val = this.getValueByText(textArr[index]);\n\n        if (!isNullOrUndefined(val)) {\n          textVal.push(val);\n        } else if (this.allowCustomValue) {\n          textVal.push(textArr[index]);\n        }\n      }\n\n      if (textVal && textVal.length) {\n        this.setProperties({\n          value: textVal\n        }, true);\n      }\n    } else {\n      this.setProperties({\n        value: null\n      }, true);\n    }\n  };\n\n  MultiSelect.prototype.renderList = function (isEmptyData) {\n    if (!isEmptyData && this.allowCustomValue && this.list && (this.list.textContent === this.noRecordsTemplate || this.list.querySelector('.e-ul') && this.list.querySelector('.e-ul').childElementCount === 0)) {\n      isEmptyData = true;\n    }\n\n    _super.prototype.render.call(this, null, isEmptyData);\n\n    this.unwireListEvents();\n    this.wireListEvents();\n  };\n\n  MultiSelect.prototype.initialValueUpdate = function () {\n    if (this.list) {\n      var text = void 0;\n      var element = void 0;\n      var value = void 0;\n\n      if (this.chipCollectionWrapper) {\n        this.chipCollectionWrapper.innerHTML = '';\n      }\n\n      this.removeListSelection();\n\n      if (!isNullOrUndefined(this.value)) {\n        for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {\n          value = this.value[index];\n          element = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, 'li', 'data-value', value);\n          text = this.getTextByValue(value);\n\n          if (element && element.getAttribute('aria-selected') !== 'true' || element && element.getAttribute('aria-selected') === 'true' && this.hideSelectedItem && (this.mode === 'Box' || this.mode === 'Default')) {\n            this.addChip(text, value);\n            this.addListSelection(element);\n          } else if (value && this.allowCustomValue) {\n            var indexItem = this.listData.length;\n            var newValue = {};\n            setValue(this.fields.text, value, newValue);\n            setValue(this.fields.value, value, newValue);\n            var noDataEle = this.popupWrapper.querySelector('.' + dropDownBaseClasses.noData);\n            this.addItem(newValue, indexItem);\n            element = element ? element : this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, 'li', 'data-value', value);\n\n            if (this.popupWrapper.contains(noDataEle)) {\n              this.list.setAttribute('style', noDataEle.getAttribute('style'));\n              this.popupWrapper.replaceChild(this.list, noDataEle);\n              this.wireListEvents();\n            }\n\n            this.addChip(text, value);\n            this.addListSelection(element);\n          }\n        }\n      }\n\n      if (this.mode === 'CheckBox') {\n        this.updateDelimView();\n\n        if (this.changeOnBlur) {\n          this.updateValueState(null, this.value, this.tempValues);\n        }\n\n        this.updateDelimeter(this.delimiterChar);\n        this.refreshInputHight();\n      } else {\n        this.updateDelimeter(this.delimiterChar);\n      }\n\n      if (this.mode === 'CheckBox' && this.showSelectAll && (isNullOrUndefined(this.value) || !this.value.length)) {\n        this.notify('checkSelectAll', {\n          module: 'CheckBoxSelection',\n          enable: this.mode === 'CheckBox',\n          value: 'uncheck'\n        });\n      }\n\n      if (this.mode === 'Box' || this.mode === 'Default' && this.inputFocus) {\n        this.chipCollectionWrapper.style.display = '';\n      } else if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {\n        this.showDelimWrapper();\n      }\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  MultiSelect.prototype.updateActionCompleteData = function (li, item) {\n    if (this.value && this.value.indexOf(li.getAttribute('data-value')) > -1) {\n      this.mainList = this.ulElement;\n\n      if (this.hideSelectedItem) {\n        addClass([li], HIDE_LIST);\n      }\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  MultiSelect.prototype.updateAddItemList = function (list, itemCount) {\n    if (this.popupObj && this.popupObj.element && this.popupObj.element.querySelector('.' + dropDownBaseClasses.noData) && list) {\n      this.list = list;\n      this.mainList = this.ulElement = list.querySelector('ul');\n      remove(this.popupWrapper.querySelector('.e-content'));\n      this.popupObj = null;\n      this.renderPopup();\n    } else if (this.allowCustomValue) {\n      this.list = list;\n      this.mainList = this.ulElement = list.querySelector('ul');\n    }\n  };\n\n  MultiSelect.prototype.updateDataList = function () {\n    if (this.mainList && this.ulElement && !(this.isFiltered || this.filterAction || this.targetElement().trim())) {\n      var isDynamicGroupItemUpdate = this.mainList.childElementCount < this.ulElement.childElementCount;\n      var isReactTemplateUpdate = this.ulElement.childElementCount > 0 && this.ulElement.children[0].childElementCount > 0 && this.mainList.children[0].childElementCount < this.ulElement.children[0].childElementCount;\n      var isAngularTemplateUpdate = this.itemTemplate && this.ulElement.childElementCount > 0 && !(this.ulElement.childElementCount < this.mainList.childElementCount) && (this.ulElement.children[0].childElementCount > 0 || this.fields.groupBy && this.ulElement.children[1] && this.ulElement.children[1].childElementCount > 0);\n\n      if (isDynamicGroupItemUpdate || isReactTemplateUpdate || isAngularTemplateUpdate) {\n        //EJ2-57748 - for this task, we prevent the ul element cloning ( this.mainList = this.ulElement.cloneNode ? <HTMLElement>this.ulElement.cloneNode(true) : this.ulElement;)\n        this.mainList = this.ulElement;\n      }\n    }\n  };\n\n  MultiSelect.prototype.isValidLI = function (li) {\n    return li && !li.classList.contains(dropDownBaseClasses.disabled) && !li.classList.contains(dropDownBaseClasses.group) && li.classList.contains(dropDownBaseClasses.li);\n  };\n\n  MultiSelect.prototype.updateListSelection = function (li, e, length) {\n    var customVal = li.getAttribute('data-value');\n    var value = this.getFormattedValue(customVal);\n\n    if (this.allowCustomValue && (customVal !== 'false' && value === false || !isNullOrUndefined(value) && value.toString() === 'NaN')) {\n      value = customVal;\n    }\n\n    this.removeHover();\n\n    if (!this.value || this.value.indexOf(value) === -1) {\n      this.dispatchSelect(value, e, li, li.getAttribute('aria-selected') === 'true', length);\n    } else {\n      this.removeValue(value, e, length);\n    }\n  };\n\n  MultiSelect.prototype.updateListSelectEventCallback = function (value, li, e) {\n    var _this = this;\n\n    var text = this.getTextByValue(value);\n\n    if ((this.allowCustomValue || this.allowFiltering) && !this.findListElement(this.mainList, 'li', 'data-value', value)) {\n      var temp_1 = li.cloneNode(true);\n      var fieldValue = this.fields.value ? this.fields.value : 'value';\n\n      if (this.allowCustomValue && this.mainData.length && typeof getValue(fieldValue, this.mainData[0]) === 'number') {\n        value = !isNaN(parseFloat(value.toString())) ? parseFloat(value.toString()) : value;\n      }\n\n      var data_1 = this.getDataByValue(value);\n      var eventArgs = {\n        newData: data_1,\n        cancel: false\n      };\n      this.trigger('customValueSelection', eventArgs, function (eventArgs) {\n        if (!eventArgs.cancel) {\n          append([temp_1], _this.mainList);\n\n          _this.mainData.push(data_1);\n\n          _this.remoteCustomValue = false;\n\n          _this.addValue(value, text, e);\n        }\n      });\n    } else {\n      this.remoteCustomValue = false;\n      this.addValue(value, text, e);\n    }\n  };\n\n  MultiSelect.prototype.removeListSelection = function () {\n    var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;\n    var selectedItems = this.list.querySelectorAll('.' + className);\n    var temp = selectedItems.length;\n\n    if (selectedItems && selectedItems.length) {\n      removeClass(selectedItems, className);\n\n      while (temp > 0) {\n        selectedItems[temp - 1].setAttribute('aria-selected', 'false');\n        temp--;\n      }\n    }\n\n    if (!isNullOrUndefined(this.mainList)) {\n      var selectItems = this.mainList.querySelectorAll('.' + className);\n      var temp1 = selectItems.length;\n\n      if (selectItems && selectItems.length) {\n        removeClass(selectItems, className);\n\n        while (temp1 > 0) {\n          selectItems[temp1 - 1].setAttribute('aria-selected', 'false');\n\n          if (this.mode === 'CheckBox') {\n            if (selectedItems && selectedItems.length > temp1 - 1) {\n              removeClass([selectedItems[temp1 - 1].firstElementChild.lastElementChild], 'e-check');\n            }\n\n            removeClass([selectItems[temp1 - 1].firstElementChild.lastElementChild], 'e-check');\n          }\n\n          temp1--;\n        }\n      }\n    }\n  };\n\n  MultiSelect.prototype.removeHover = function () {\n    var hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.hover);\n\n    if (hoveredItem && hoveredItem.length) {\n      removeClass(hoveredItem, dropDownBaseClasses.hover);\n    }\n  };\n\n  MultiSelect.prototype.removeFocus = function () {\n    if (this.list && this.mainList) {\n      var hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.focus);\n      var mainlist = this.mainList.querySelectorAll('.' + dropDownBaseClasses.focus);\n\n      if (hoveredItem && hoveredItem.length) {\n        removeClass(hoveredItem, dropDownBaseClasses.focus);\n        removeClass(mainlist, dropDownBaseClasses.focus);\n      }\n    }\n  };\n\n  MultiSelect.prototype.addListHover = function (li) {\n    if (this.enabled && this.isValidLI(li)) {\n      this.removeHover();\n      addClass([li], dropDownBaseClasses.hover);\n    } else {\n      if (li !== null && li.classList.contains('e-list-group-item') && this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n        this.removeHover();\n        addClass([li], dropDownBaseClasses.hover);\n      }\n    }\n  };\n\n  MultiSelect.prototype.addListFocus = function (element) {\n    if (this.enabled && this.isValidLI(element)) {\n      this.removeFocus();\n      addClass([element], dropDownBaseClasses.focus);\n      this.updateAriaActiveDescendant();\n    } else {\n      if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n        addClass([element], dropDownBaseClasses.focus);\n        this.updateAriaActiveDescendant();\n      }\n    }\n  };\n\n  MultiSelect.prototype.addListSelection = function (element, mainElement) {\n    var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;\n\n    if (this.isValidLI(element) && !element.classList.contains(dropDownBaseClasses.hover)) {\n      addClass([element], className);\n      this.updateMainList(false, element.getAttribute('data-value'), mainElement);\n      element.setAttribute('aria-selected', 'true');\n\n      if (this.mode === 'CheckBox' && element.classList.contains('e-active')) {\n        var ariaCheck = element.getElementsByClassName('e-check').length;\n\n        if (ariaCheck === 0) {\n          this.notify('updatelist', {\n            module: 'CheckBoxSelection',\n            enable: this.mode === 'CheckBox',\n            li: element,\n            e: this\n          });\n        }\n      }\n\n      this.notify('activeList', {\n        module: 'CheckBoxSelection',\n        enable: this.mode === 'CheckBox',\n        li: element,\n        e: this\n      });\n\n      if (this.chipCollectionWrapper) {\n        this.removeChipSelection();\n      }\n\n      this.selectedElementID = element.id;\n    }\n  };\n\n  MultiSelect.prototype.updateDelimeter = function (delimChar, e) {\n    this.updateData(delimChar, e);\n  };\n\n  MultiSelect.prototype.onMouseClick = function (e) {\n    var _this = this;\n\n    this.keyCode = null;\n    this.scrollFocusStatus = false;\n    var target = e.target;\n    var li = closest(target, '.' + dropDownBaseClasses.li);\n    var headerLi = closest(target, '.' + dropDownBaseClasses.group);\n\n    if (headerLi && this.enableGroupCheckBox && this.mode === 'CheckBox' && this.fields.groupBy) {\n      target = target.classList.contains('e-list-group-item') ? target.firstElementChild.lastElementChild : e.target;\n\n      if (target.classList.contains('e-check')) {\n        this.selectAllItem(false, e);\n        target.classList.remove('e-check');\n        target.classList.remove('e-stop');\n        closest(target, '.' + 'e-list-group-item').classList.remove('e-active');\n        target.setAttribute('aria-selected', 'false');\n      } else {\n        this.selectAllItem(true, e);\n        target.classList.remove('e-stop');\n        target.classList.add('e-check');\n        closest(target, '.' + 'e-list-group-item').classList.add('e-active');\n        target.setAttribute('aria-selected', 'true');\n      }\n\n      this.refreshSelection();\n      this.checkSelectAll();\n    } else {\n      if (this.isValidLI(li)) {\n        var limit = this.value && this.value.length ? this.value.length : 0;\n\n        if (li.classList.contains('e-active')) {\n          limit = limit - 1;\n        }\n\n        if (limit < this.maximumSelectionLength) {\n          this.updateListSelection(li, e);\n          this.checkPlaceholderSize();\n          this.addListFocus(li);\n\n          if ((this.allowCustomValue || this.allowFiltering) && this.mainList && this.listData) {\n            if (this.mode !== 'CheckBox') {\n              this.focusAtLastListItem(li.getAttribute('data-value'));\n              this.refreshSelection();\n            }\n          } else {\n            this.makeTextBoxEmpty();\n          }\n        }\n\n        if (this.mode === 'CheckBox') {\n          this.updateDelimView();\n\n          if (this.value && this.value.length > 50) {\n            setTimeout(function () {\n              _this.updateDelimeter(_this.delimiterChar, e);\n            }, 0);\n          } else {\n            this.updateDelimeter(this.delimiterChar, e);\n          }\n\n          this.refreshInputHight();\n        } else {\n          this.updateDelimeter(this.delimiterChar, e);\n        }\n\n        this.checkSelectAll();\n        this.refreshPopup();\n\n        if (this.hideSelectedItem) {\n          this.focusAtFirstListItem();\n        }\n\n        if (this.closePopupOnSelect) {\n          this.hidePopup(e);\n        } else {\n          e.preventDefault();\n        }\n\n        this.makeTextBoxEmpty();\n        this.findGroupStart(target);\n\n        if (this.mode !== 'CheckBox') {\n          this.refreshListItems(isNullOrUndefined(li) ? null : li.textContent);\n        }\n      } else {\n        e.preventDefault();\n      }\n\n      this.refreshPlaceHolder();\n      this.deselectHeader();\n    }\n  };\n\n  MultiSelect.prototype.findGroupStart = function (target) {\n    if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n      var count = 0;\n      var liChecked = 0;\n      var liUnchecked = 0;\n      var groupValues = void 0;\n\n      if (this.itemTemplate && !target.getElementsByClassName('e-frame').length) {\n        while (!target.getElementsByClassName('e-frame').length) {\n          target = target.parentElement;\n        }\n      }\n\n      if (target.classList.contains('e-frame')) {\n        target = target.parentElement.parentElement;\n      }\n\n      groupValues = this.findGroupAttrtibutes(target, liChecked, liUnchecked, count, 0);\n      groupValues = this.findGroupAttrtibutes(target, groupValues[0], groupValues[1], groupValues[2], 1);\n\n      while (!target.classList.contains('e-list-group-item')) {\n        if (target.classList.contains('e-list-icon')) {\n          target = target.parentElement;\n        }\n\n        target = target.previousElementSibling;\n\n        if (target == null) {\n          break;\n        }\n      }\n\n      this.updateCheckBox(target, groupValues[0], groupValues[1], groupValues[2]);\n    }\n  };\n\n  MultiSelect.prototype.findGroupAttrtibutes = function (listElement, checked, unChecked, count, position) {\n    while (!listElement.classList.contains('e-list-group-item')) {\n      if (listElement.classList.contains('e-list-icon')) {\n        listElement = listElement.parentElement;\n      }\n\n      if (listElement.getElementsByClassName('e-frame')[0].classList.contains('e-check') && listElement.classList.contains('e-list-item')) {\n        checked++;\n      } else if (listElement.classList.contains('e-list-item')) {\n        unChecked++;\n      }\n\n      count++;\n      listElement = position ? listElement.nextElementSibling : listElement.previousElementSibling;\n\n      if (listElement == null) {\n        break;\n      }\n    }\n\n    return [checked, unChecked, count];\n  };\n\n  MultiSelect.prototype.updateCheckBox = function (groupHeader, checked, unChecked, count) {\n    if (groupHeader === null) {\n      return;\n    }\n\n    var checkBoxElement = groupHeader.getElementsByClassName('e-frame')[0];\n\n    if (count === checked) {\n      checkBoxElement.classList.remove('e-stop');\n      checkBoxElement.classList.add('e-check');\n      closest(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');\n      groupHeader.setAttribute('aria-selected', 'true');\n    } else if (count === unChecked) {\n      checkBoxElement.classList.remove('e-check');\n      checkBoxElement.classList.remove('e-stop');\n      closest(checkBoxElement, '.' + 'e-list-group-item').classList.remove('e-active');\n      groupHeader.setAttribute('aria-selected', 'false');\n    } else if (this.maximumSelectionLength === checked - 1) {\n      checkBoxElement.classList.remove('e-stop');\n      groupHeader.setAttribute('aria-selected', 'true');\n      closest(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');\n      checkBoxElement.classList.add('e-check');\n    } else {\n      checkBoxElement.classList.remove('e-check');\n      checkBoxElement.classList.add('e-stop');\n      closest(checkBoxElement, '.' + 'e-list-group-item').classList.add('e-active');\n      groupHeader.setAttribute('aria-selected', 'false');\n    }\n  };\n\n  MultiSelect.prototype.deselectHeader = function () {\n    var limit = this.value && this.value.length ? this.value.length : 0;\n    var collection = this.list.querySelectorAll('li.e-list-group-item:not(.e-active)');\n\n    if (limit < this.maximumSelectionLength) {\n      removeClass(collection, 'e-disable');\n    }\n\n    if (limit === this.maximumSelectionLength) {\n      addClass(collection, 'e-disable');\n    }\n  };\n\n  MultiSelect.prototype.onMouseOver = function (e) {\n    var currentLi = closest(e.target, '.' + dropDownBaseClasses.li);\n\n    if (currentLi === null && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy) && this.enableGroupCheckBox) {\n      currentLi = closest(e.target, '.' + dropDownBaseClasses.group);\n    }\n\n    this.addListHover(currentLi);\n  };\n\n  MultiSelect.prototype.onMouseLeave = function () {\n    this.removeHover();\n  };\n\n  MultiSelect.prototype.onListMouseDown = function (e) {\n    e.preventDefault();\n    this.scrollFocusStatus = true;\n  };\n\n  MultiSelect.prototype.onDocumentClick = function (e) {\n    if (this.mode !== 'CheckBox') {\n      var target = e.target;\n\n      if (!(!isNullOrUndefined(this.popupObj) && closest(target, '[id=\"' + this.popupObj.element.id + '\"]')) && !this.overAllWrapper.contains(e.target)) {\n        this.scrollFocusStatus = false;\n      } else {\n        this.scrollFocusStatus = (Browser.isIE || Browser.info.name === 'edge') && document.activeElement === this.inputElement;\n      }\n    }\n  };\n\n  MultiSelect.prototype.wireListEvents = function () {\n    if (!isNullOrUndefined(this.list)) {\n      EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n      EventHandler.add(this.list, 'mousedown', this.onListMouseDown, this);\n      EventHandler.add(this.list, 'mouseup', this.onMouseClick, this);\n      EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);\n      EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);\n    }\n  };\n\n  MultiSelect.prototype.unwireListEvents = function () {\n    EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n\n    if (this.list) {\n      EventHandler.remove(this.list, 'mousedown', this.onListMouseDown);\n      EventHandler.remove(this.list, 'mouseup', this.onMouseClick);\n      EventHandler.remove(this.list, 'mouseover', this.onMouseOver);\n      EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);\n    }\n  };\n\n  MultiSelect.prototype.hideOverAllClear = function () {\n    if (!this.value || !this.value.length || this.inputElement.value === '') {\n      this.overAllClear.style.display = 'none';\n    }\n  };\n\n  MultiSelect.prototype.showOverAllClear = function () {\n    if ((this.value && this.value.length || this.inputElement.value !== '') && this.showClearButton && this.readonly !== true) {\n      this.overAllClear.style.display = '';\n    } else {\n      this.overAllClear.style.display = 'none';\n    }\n  };\n  /**\n   * Sets the focus to widget for interaction.\n   *\n   * @returns {void}\n   */\n\n\n  MultiSelect.prototype.focusIn = function () {\n    if (document.activeElement !== this.inputElement && this.enabled) {\n      this.inputElement.focus();\n    }\n  };\n  /**\n   * Remove the focus from widget, if the widget is in focus state.\n   *\n   * @returns {void}\n   */\n\n\n  MultiSelect.prototype.focusOut = function () {\n    if (document.activeElement === this.inputElement && this.enabled) {\n      this.inputElement.blur();\n    }\n  };\n  /**\n   * Shows the spinner loader.\n   *\n   * @returns {void}\n   */\n\n\n  MultiSelect.prototype.showSpinner = function () {\n    if (isNullOrUndefined(this.spinnerElement)) {\n      var filterClear = this.filterParent && this.filterParent.querySelector('.e-clear-icon.e-icons');\n\n      if (this.overAllClear.style.display !== 'none' || filterClear) {\n        this.spinnerElement = filterClear ? filterClear : this.overAllClear;\n      } else {\n        this.spinnerElement = this.createElement('span', {\n          className: CLOSEICON_CLASS$1 + ' ' + SPINNER_CLASS$1\n        });\n        this.componentWrapper.appendChild(this.spinnerElement);\n      }\n\n      createSpinner({\n        target: this.spinnerElement,\n        width: Browser.isDevice ? '16px' : '14px'\n      }, this.createElement);\n      addClass([this.spinnerElement], DISABLE_ICON);\n      showSpinner(this.spinnerElement);\n    }\n  };\n  /**\n   * Hides the spinner loader.\n   *\n   * @returns {void}\n   */\n\n\n  MultiSelect.prototype.hideSpinner = function () {\n    if (!isNullOrUndefined(this.spinnerElement)) {\n      hideSpinner(this.spinnerElement);\n      removeClass([this.spinnerElement], DISABLE_ICON);\n\n      if (this.spinnerElement.classList.contains(SPINNER_CLASS$1)) {\n        detach(this.spinnerElement);\n      } else {\n        this.spinnerElement.innerHTML = '';\n      }\n\n      this.spinnerElement = null;\n    }\n  };\n\n  MultiSelect.prototype.updateWrapperText = function (wrapperType, wrapperData) {\n    if (this.valueTemplate || !this.enableHtmlSanitizer) {\n      wrapperType.innerHTML = wrapperData;\n    } else {\n      wrapperType.innerText = SanitizeHtmlHelper.sanitize(wrapperData);\n    }\n  };\n\n  MultiSelect.prototype.updateDelimView = function () {\n    if (this.delimiterWrapper) {\n      this.hideDelimWrapper();\n    }\n\n    if (this.chipCollectionWrapper) {\n      this.chipCollectionWrapper.style.display = 'none';\n    }\n\n    if (!isNullOrUndefined(this.viewWrapper)) {\n      this.viewWrapper.style.display = '';\n      this.viewWrapper.style.width = '';\n      this.viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER$1);\n    }\n\n    if (this.value && this.value.length) {\n      var data = '';\n      var temp = void 0;\n      var tempData = void 0;\n      var tempIndex = 1;\n      var wrapperleng = void 0;\n      var remaining = void 0;\n      var downIconWidth = 0;\n      var overAllContainer = void 0;\n      this.updateWrapperText(this.viewWrapper, data);\n      var l10nLocale = {\n        noRecordsTemplate: 'No records found',\n        actionFailureTemplate: 'Request failed',\n        overflowCountTemplate: '+${count} more..',\n        totalCountTemplate: '${count} selected'\n      };\n      var l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);\n\n      if (l10n.getConstant('actionFailureTemplate') === '') {\n        l10n = new L10n('dropdowns', l10nLocale, this.locale);\n      }\n\n      if (l10n.getConstant('noRecordsTemplate') === '') {\n        l10n = new L10n('dropdowns', l10nLocale, this.locale);\n      }\n\n      var remainContent = l10n.getConstant('overflowCountTemplate');\n      var totalContent = l10n.getConstant('totalCountTemplate');\n      var raminElement = this.createElement('span', {\n        className: REMAIN_WRAPPER$1\n      });\n      var remainCompildTemp = remainContent.replace('${count}', this.value.length.toString());\n      raminElement.innerText = remainCompildTemp;\n      this.viewWrapper.appendChild(raminElement);\n      this.renderReactTemplates();\n      var remainSize = raminElement.offsetWidth;\n      remove(raminElement);\n\n      if (this.showDropDownIcon) {\n        downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);\n      }\n\n      this.checkClearIconWidth();\n\n      if (!isNullOrUndefined(this.value)) {\n        for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {\n          data += index === 0 ? '' : this.delimiterChar + ' ';\n          temp = this.getOverflowVal(index);\n          data += temp;\n          temp = this.viewWrapper.innerHTML;\n          this.updateWrapperText(this.viewWrapper, data);\n          wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);\n          overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);\n\n          if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {\n            if (tempData !== undefined && tempData !== '') {\n              temp = tempData;\n              index = tempIndex + 1;\n            }\n\n            this.updateWrapperText(this.viewWrapper, temp);\n            remaining = this.value.length - index;\n            wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);\n\n            while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.innerHTML !== '') {\n              var textArr = [];\n              this.viewWrapper.innerHTML = textArr.join(this.delimiterChar);\n              remaining = this.value.length;\n              wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);\n            }\n\n            break;\n          } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {\n            tempData = data;\n            tempIndex = index;\n          } else if (index === 0) {\n            tempData = '';\n            tempIndex = -1;\n          }\n        }\n      }\n\n      if (remaining > 0) {\n        var totalWidth = overAllContainer - downIconWidth - this.clearIconWidth;\n        this.viewWrapper.appendChild(this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, remainContent, totalContent, totalWidth));\n        this.updateRemainWidth(this.viewWrapper, totalWidth);\n        this.updateRemainingText(raminElement, downIconWidth, remaining, remainContent, totalContent);\n      }\n    } else {\n      if (!isNullOrUndefined(this.viewWrapper)) {\n        this.viewWrapper.innerHTML = '';\n        this.viewWrapper.style.display = 'none';\n      }\n    }\n  };\n\n  MultiSelect.prototype.checkClearIconWidth = function () {\n    if (this.showClearButton) {\n      this.clearIconWidth = this.overAllClear.offsetWidth;\n    }\n  };\n\n  MultiSelect.prototype.updateRemainWidth = function (viewWrapper, totalWidth) {\n    if (viewWrapper.classList.contains(TOTAL_COUNT_WRAPPER$1) && totalWidth < viewWrapper.offsetWidth + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10) + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10)) {\n      viewWrapper.style.width = totalWidth + 'px';\n    }\n  };\n\n  MultiSelect.prototype.updateRemainTemplate = function (raminElement, viewWrapper, remaining, remainContent, totalContent, totalWidth) {\n    if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 && viewWrapper.firstChild.nodeValue === '') {\n      viewWrapper.removeChild(viewWrapper.firstChild);\n    }\n\n    raminElement.innerHTML = '';\n    var remainTemp = remainContent.replace('${count}', remaining.toString());\n    var totalTemp = totalContent.replace('${count}', remaining.toString());\n    raminElement.innerText = viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 ? remainTemp : totalTemp;\n\n    if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3) {\n      viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER$1);\n    } else {\n      viewWrapper.classList.add(TOTAL_COUNT_WRAPPER$1);\n      this.updateRemainWidth(viewWrapper, totalWidth);\n    }\n\n    return raminElement;\n  };\n\n  MultiSelect.prototype.updateRemainingText = function (raminElement, downIconWidth, remaining, remainContent, totalContent) {\n    var overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);\n    var wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);\n\n    if (wrapperleng + downIconWidth >= overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {\n      while (wrapperleng + downIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {\n        var textArr = this.viewWrapper.firstChild.nodeValue.split(this.delimiterChar);\n        textArr.pop();\n        this.viewWrapper.firstChild.nodeValue = textArr.join(this.delimiterChar);\n\n        if (this.viewWrapper.firstChild.nodeValue === '') {\n          this.viewWrapper.removeChild(this.viewWrapper.firstChild);\n        }\n\n        remaining++;\n        wrapperleng = this.viewWrapper.offsetWidth;\n      }\n\n      var totalWidth = overAllContainer - downIconWidth;\n      this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, remainContent, totalContent, totalWidth);\n    }\n  };\n\n  MultiSelect.prototype.getOverflowVal = function (index) {\n    var temp;\n\n    if (this.mainData && this.mainData.length) {\n      if (this.mode === 'CheckBox') {\n        var newTemp = this.listData;\n        this.listData = this.mainData;\n        temp = this.getTextByValue(this.value[index]);\n        this.listData = newTemp;\n      } else {\n        temp = this.getTextByValue(this.value[index]);\n      }\n    } else {\n      temp = this.value[index];\n    }\n\n    return temp;\n  };\n\n  MultiSelect.prototype.unWireEvent = function () {\n    if (!isNullOrUndefined(this.componentWrapper)) {\n      EventHandler.remove(this.componentWrapper, 'mousedown', this.wrapperClick);\n    }\n\n    EventHandler.remove(window, 'resize', this.windowResize);\n\n    if (!isNullOrUndefined(this.inputElement)) {\n      EventHandler.remove(this.inputElement, 'focus', this.focusInHandler);\n      EventHandler.remove(this.inputElement, 'keydown', this.onKeyDown);\n\n      if (this.mode !== 'CheckBox') {\n        EventHandler.remove(this.inputElement, 'input', this.onInput);\n      }\n\n      EventHandler.remove(this.inputElement, 'keyup', this.keyUp);\n      var formElement = closest(this.inputElement, 'form');\n\n      if (formElement) {\n        EventHandler.remove(formElement, 'reset', this.resetValueHandler);\n      }\n\n      EventHandler.remove(this.inputElement, 'blur', this.onBlurHandler);\n    }\n\n    if (!isNullOrUndefined(this.componentWrapper)) {\n      EventHandler.remove(this.componentWrapper, 'mouseover', this.mouseIn);\n      EventHandler.remove(this.componentWrapper, 'mouseout', this.mouseOut);\n    }\n\n    if (!isNullOrUndefined(this.overAllClear)) {\n      EventHandler.remove(this.overAllClear, 'mousedown', this.clearAll);\n    }\n\n    if (!isNullOrUndefined(this.inputElement)) {\n      EventHandler.remove(this.inputElement, 'paste', this.pasteHandler);\n    }\n  };\n\n  MultiSelect.prototype.selectAllItem = function (state, event, list) {\n    var li;\n\n    if (!isNullOrUndefined(this.list)) {\n      li = this.list.querySelectorAll(state ? 'li.e-list-item:not([aria-selected=\"true\"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected=\"true\"]:not(.e-reorder-hide)');\n    }\n\n    if (this.value && this.value.length && event && event.target && closest(event.target, '.e-close-hooker') && this.allowFiltering) {\n      li = this.mainList.querySelectorAll(state ? 'li.e-list-item:not([aria-selected=\"true\"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected=\"true\"]:not(.e-reorder-hide)');\n    }\n\n    if (this.enableGroupCheckBox && this.mode === 'CheckBox' && !isNullOrUndefined(this.fields.groupBy)) {\n      var target = event ? this.groupTemplate ? closest(event.target, '.e-list-group-item') : event.target : null;\n      target = event && event.keyCode === 32 ? list : target;\n      target = target && target.classList.contains('e-frame') ? target.parentElement.parentElement : target;\n\n      if (target && target.classList.contains('e-list-group-item')) {\n        var listElement = target.nextElementSibling;\n\n        if (isNullOrUndefined(listElement)) {\n          return;\n        }\n\n        while (listElement.classList.contains('e-list-item')) {\n          if (state) {\n            if (!listElement.firstElementChild.lastElementChild.classList.contains('e-check')) {\n              var selectionLimit = this.value && this.value.length ? this.value.length : 0;\n\n              if (listElement.classList.contains('e-active')) {\n                selectionLimit -= 1;\n              }\n\n              if (selectionLimit < this.maximumSelectionLength) {\n                this.updateListSelection(listElement, event);\n              }\n            }\n          } else {\n            if (listElement.firstElementChild.lastElementChild.classList.contains('e-check')) {\n              this.updateListSelection(listElement, event);\n            }\n          }\n\n          listElement = listElement.nextElementSibling;\n\n          if (listElement == null) {\n            break;\n          }\n        }\n\n        if (target.classList.contains('e-list-group-item')) {\n          var focusedElement = this.list.getElementsByClassName('e-item-focus')[0];\n\n          if (focusedElement) {\n            focusedElement.classList.remove('e-item-focus');\n          }\n\n          if (state) {\n            target.classList.add('e-active');\n          } else {\n            target.classList.remove('e-active');\n          }\n\n          target.classList.add('e-item-focus');\n          this.updateAriaActiveDescendant();\n        }\n\n        this.textboxValueUpdate();\n        this.checkPlaceholderSize();\n\n        if (!this.changeOnBlur && event) {\n          this.updateValueState(event, this.value, this.tempValues);\n        }\n      } else {\n        this.updateValue(event, li, state);\n      }\n    } else {\n      this.updateValue(event, li, state);\n    }\n\n    this.addValidInputClass();\n  };\n\n  MultiSelect.prototype.updateValue = function (event, li, state) {\n    var _this = this;\n\n    var length = li.length;\n    var beforeSelectArgs = {\n      event: event,\n      items: state ? li : [],\n      itemData: state ? this.listData : [],\n      isInteracted: event ? true : false,\n      isChecked: state,\n      preventSelectEvent: false\n    };\n    this.trigger('beforeSelectAll', beforeSelectArgs);\n\n    if (li && li.length) {\n      var index_1 = 0;\n      var count_1 = 0;\n\n      if (this.enableGroupCheckBox) {\n        count_1 = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : li.length;\n      } else {\n        count_1 = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : this.maximumSelectionLength;\n      }\n\n      if (!beforeSelectArgs.preventSelectEvent) {\n        while (index_1 < length && index_1 <= 50 && index_1 < count_1) {\n          this.updateListSelection(li[index_1], event, length - index_1);\n\n          if (this.enableGroupCheckBox) {\n            this.findGroupStart(li[index_1]);\n          }\n\n          index_1++;\n        }\n\n        if (length > 50) {\n          setTimeout(function () {\n            while (index_1 < length && index_1 < count_1) {\n              _this.updateListSelection(li[index_1], event, length - index_1);\n\n              if (_this.enableGroupCheckBox) {\n                _this.findGroupStart(li[index_1]);\n              }\n\n              index_1++;\n            }\n\n            _this.updatedataValueItems(event);\n\n            if (!_this.changeOnBlur) {\n              _this.updateValueState(event, _this.value, _this.tempValues);\n\n              _this.isSelectAll = _this.isSelectAll ? !_this.isSelectAll : _this.isSelectAll;\n            }\n\n            _this.updateHiddenElement();\n          }, 0);\n        }\n      } else {\n        for (var i = 0; i < li.length && i < count_1; i++) {\n          this.removeHover();\n          var customVal = li[i].getAttribute('data-value');\n          var value = this.getFormattedValue(customVal);\n          var mainElement = this.mainList ? this.mainList.querySelectorAll(state ? 'li.e-list-item:not([aria-selected=\"true\"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected=\"true\"]:not(.e-reorder-hide)')[i] : null;\n\n          if (state) {\n            this.value = !this.value ? [] : this.value;\n\n            if (this.value.indexOf(value) < 0) {\n              this.setProperties({\n                value: [].concat([], this.value, [value])\n              }, true);\n            }\n\n            this.removeFocus();\n            this.addListSelection(li[i], mainElement);\n            this.updateChipStatus();\n            this.checkMaxSelection();\n          } else {\n            this.removeAllItems(value, event, false, li[i], mainElement);\n          }\n\n          if (this.enableGroupCheckBox) {\n            this.findGroupStart(li[i]);\n          }\n        }\n\n        if (!state) {\n          var limit = this.value && this.value.length ? this.value.length : 0;\n\n          if (limit < this.maximumSelectionLength) {\n            var collection = this.list.querySelectorAll('li.' + dropDownBaseClasses.li + ':not(.e-active)');\n            removeClass(collection, 'e-disable');\n          }\n        }\n\n        var args = {\n          event: event,\n          items: state ? li : [],\n          itemData: state ? this.listData : [],\n          isInteracted: event ? true : false,\n          isChecked: state\n        };\n        this.trigger('selectedAll', args);\n      }\n    }\n\n    this.updatedataValueItems(event);\n    this.checkPlaceholderSize();\n\n    if (length <= 50 && !beforeSelectArgs.preventSelectEvent) {\n      if (!this.changeOnBlur) {\n        this.updateValueState(event, this.value, this.tempValues);\n        this.isSelectAll = this.isSelectAll ? !this.isSelectAll : this.isSelectAll;\n      }\n\n      this.updateHiddenElement();\n    }\n  };\n\n  MultiSelect.prototype.updateHiddenElement = function () {\n    var _this = this;\n\n    var hiddenValue = '';\n    var wrapperText = '';\n    var data = '';\n    var text = [];\n\n    if (this.mode === 'CheckBox') {\n      this.value.map(function (value, index) {\n        hiddenValue += '<option selected value =\"' + value + '\">' + index + '</option>';\n\n        if (_this.listData) {\n          data = _this.getTextByValue(value);\n        } else {\n          data = value;\n        }\n\n        wrapperText += data + _this.delimiterChar + ' ';\n        text.push(data);\n      });\n      this.hiddenElement.innerHTML = hiddenValue;\n      this.updateWrapperText(this.delimiterWrapper, wrapperText);\n      this.delimiterWrapper.setAttribute('id', getUniqueID('delim_val'));\n      this.inputElement.setAttribute('aria-describedby', this.delimiterWrapper.id);\n      this.inputElement.setAttribute('aria-labelledby', this.delimiterWrapper.id);\n      this.setProperties({\n        text: text.toString()\n      }, true);\n      this.refreshInputHight();\n      this.refreshPlaceHolder();\n    }\n  };\n\n  MultiSelect.prototype.updatedataValueItems = function (event) {\n    this.deselectHeader();\n    this.textboxValueUpdate(event);\n  };\n\n  MultiSelect.prototype.textboxValueUpdate = function (event) {\n    var isRemoveAll = event && event.target && (closest(event.target, '.e-selectall-parent') || closest(event.target, '.e-close-hooker'));\n\n    if (this.mode !== 'Box' && !this.isPopupOpen() && !(this.mode === 'CheckBox' && (this.isSelectAll || isRemoveAll))) {\n      this.updateDelimView();\n    } else {\n      this.searchWrapper.classList.remove(ZERO_SIZE);\n    }\n\n    if (this.mode === 'CheckBox') {\n      this.updateDelimView();\n\n      if (!(isRemoveAll || this.isSelectAll)) {\n        this.updateDelimeter(this.delimiterChar, event);\n      }\n\n      this.refreshInputHight();\n    } else {\n      this.updateDelimeter(this.delimiterChar, event);\n    }\n\n    this.refreshPlaceHolder();\n  };\n\n  MultiSelect.prototype.setZIndex = function () {\n    if (this.popupObj) {\n      this.popupObj.setProperties({\n        'zIndex': this.zIndex\n      });\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  MultiSelect.prototype.updateDataSource = function (prop) {\n    if (isNullOrUndefined(this.list)) {\n      this.renderPopup();\n    } else {\n      this.resetList(this.dataSource);\n    }\n\n    if (this.value && this.value.length) {\n      this.setProperties({\n        'value': this.value\n      });\n      this.refreshSelection();\n    }\n  };\n\n  MultiSelect.prototype.onLoadSelect = function () {\n    this.setDynValue = true;\n    this.renderPopup();\n  };\n\n  MultiSelect.prototype.selectAllItems = function (state, event) {\n    var _this = this;\n\n    if (isNullOrUndefined(this.list)) {\n      this.selectAllAction = function () {\n        if (_this.mode === 'CheckBox' && _this.showSelectAll) {\n          var args = {\n            module: 'CheckBoxSelection',\n            enable: _this.mode === 'CheckBox',\n            value: state ? 'check' : 'uncheck'\n          };\n\n          _this.notify('checkSelectAll', args);\n        }\n\n        _this.selectAllItem(state, event);\n\n        _this.selectAllAction = null;\n      };\n\n      _super.prototype.render.call(this);\n    } else {\n      this.selectAllAction = null;\n\n      if (this.mode === 'CheckBox' && this.showSelectAll) {\n        var args = {\n          value: state ? 'check' : 'uncheck',\n          enable: this.mode === 'CheckBox',\n          module: 'CheckBoxSelection'\n        };\n        this.notify('checkSelectAll', args);\n      }\n\n      this.selectAllItem(state, event);\n    }\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} Returns the persisted data of the component.\n   */\n\n\n  MultiSelect.prototype.getPersistData = function () {\n    return this.addOnPersist(['value']);\n  };\n  /**\n   * Dynamically change the value of properties.\n   *\n   * @param {MultiSelectModel} newProp - Returns the dynamic property value of the component.\n   * @param {MultiSelectModel} oldProp - Returns the previous property value of the component.\n   * @private\n   * @returns {void}\n   */\n\n\n  MultiSelect.prototype.onPropertyChanged = function (newProp, oldProp) {\n    if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) || newProp.query && !isNullOrUndefined(Object.keys(newProp.query))) {\n      if (this.resetFilteredData) {\n        // The filtered data is not being reset in the component after the user focuses out.\n        this.resetMainList = !this.resetMainList ? this.mainList : this.resetMainList;\n        this.resetFilteredData = false;\n      }\n\n      this.mainList = null;\n      this.mainData = null;\n      this.isFirstClick = false;\n      this.isDynamicDataChange = true;\n    }\n\n    if (this.getModuleName() === 'multiselect') {\n      this.filterAction = false;\n      this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n    }\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'query':\n        case 'dataSource':\n          if (this.mode === 'CheckBox' && this.showSelectAll) {\n            if (!isNullOrUndefined(this.popupObj)) {\n              this.popupObj.destroy();\n              this.popupObj = null;\n            }\n\n            this.renderPopup();\n          }\n\n          break;\n\n        case 'htmlAttributes':\n          this.updateHTMLAttribute();\n          break;\n\n        case 'showClearButton':\n          this.updateClearButton(newProp.showClearButton);\n          break;\n\n        case 'text':\n          this.updateVal(this.value, this.value, 'text');\n          break;\n\n        case 'value':\n          this.updateVal(this.value, oldProp.value, 'value');\n          this.addValidInputClass();\n\n          if (!this.closePopupOnSelect && this.isPopupOpen()) {\n            this.refreshPopup();\n          }\n\n          this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;\n          break;\n\n        case 'width':\n          this.setWidth(newProp.width);\n          this.popupObj.setProperties({\n            width: this.calcPopupWidth()\n          });\n          break;\n\n        case 'placeholder':\n          this.refreshPlaceHolder();\n          break;\n\n        case 'filterBarPlaceholder':\n          if (this.allowFiltering) {\n            this.notify('filterBarPlaceholder', {\n              filterBarPlaceholder: newProp.filterBarPlaceholder\n            });\n          }\n\n          break;\n\n        case 'delimiterChar':\n          if (this.mode !== 'Box') {\n            this.updateDelimView();\n          }\n\n          this.updateData(newProp.delimiterChar);\n          break;\n\n        case 'cssClass':\n          this.updateOldPropCssClass(oldProp.cssClass);\n          this.updateCssClass();\n          this.calculateWidth();\n          break;\n\n        case 'enableRtl':\n          this.enableRTL(newProp.enableRtl);\n\n          _super.prototype.onPropertyChanged.call(this, newProp, oldProp);\n\n          break;\n\n        case 'readonly':\n          this.updateReadonly(newProp.readonly);\n          this.hidePopup();\n          break;\n\n        case 'enabled':\n          this.hidePopup();\n          this.enable(newProp.enabled);\n          break;\n\n        case 'showSelectAll':\n          if (this.popupObj) {\n            this.popupObj.destroy();\n            this.popupObj = null;\n          }\n\n          this.renderPopup();\n          break;\n\n        case 'showDropDownIcon':\n          this.dropDownIcon();\n          break;\n\n        case 'floatLabelType':\n          this.setFloatLabelType();\n          this.addValidInputClass();\n          Input.createSpanElement(this.overAllWrapper, this.createElement);\n          this.calculateWidth();\n\n          if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName('e-ddl-icon')[0] && this.overAllWrapper.getElementsByClassName('e-float-text-content')[0] && this.floatLabelType !== 'Never')) {\n            this.overAllWrapper.getElementsByClassName('e-float-text-content')[0].classList.add('e-icon');\n          }\n\n          break;\n\n        case 'enableSelectionOrder':\n          break;\n\n        case 'selectAllText':\n          this.notify('selectAllText', false);\n          break;\n\n        case 'popupHeight':\n          if (this.popupObj) {\n            var overAllHeight = parseInt(this.popupHeight, 10);\n\n            if (this.popupHeight !== 'auto') {\n              this.list.style.maxHeight = formatUnit(overAllHeight);\n              this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight);\n            } else {\n              this.list.style.maxHeight = formatUnit(this.popupHeight);\n            }\n          }\n\n          break;\n\n        case 'headerTemplate':\n        case 'footerTemplate':\n          this.reInitializePoup();\n          break;\n\n        case 'allowFiltering':\n          if (this.mode === 'CheckBox' && this.popupObj) {\n            this.reInitializePoup();\n          }\n\n          this.updateSelectElementData(this.allowFiltering);\n          break;\n\n        default:\n          {\n            // eslint-disable-next-line max-len\n            var msProps = this.getPropObject(prop, newProp, oldProp);\n\n            _super.prototype.onPropertyChanged.call(this, msProps.newProperty, msProps.oldProperty);\n          }\n          break;\n      }\n    }\n  };\n\n  MultiSelect.prototype.reInitializePoup = function () {\n    if (this.popupObj) {\n      this.popupObj.destroy();\n      this.popupObj = null;\n    }\n\n    this.renderPopup();\n  };\n\n  MultiSelect.prototype.presentItemValue = function (ulElement) {\n    var valuecheck = [];\n\n    for (var i = 0; i < this.value.length; i++) {\n      var checkEle = this.findListElement(this.allowFiltering && !isNullOrUndefined(this.mainList) ? this.mainList : ulElement, 'li', 'data-value', this.value[i]);\n\n      if (!checkEle) {\n        valuecheck.push(this.value[i]);\n      }\n    }\n\n    return valuecheck;\n  };\n\n  MultiSelect.prototype.addNonPresentItems = function (valuecheck, ulElement, list, event) {\n    var _this = this;\n\n    this.dataSource.executeQuery(this.getForQuery(valuecheck)).then(function (e) {\n      if (e.result.length > 0) {\n        _this.addItem(e.result, list.length);\n      }\n\n      _this.updateActionList(ulElement, list, event);\n    });\n  };\n\n  MultiSelect.prototype.updateVal = function (newProp, oldProp, prop) {\n    if (!this.list) {\n      this.onLoadSelect();\n    } else if (this.dataSource instanceof DataManager && (!this.listData || !(this.mainList && this.mainData))) {\n      this.onLoadSelect();\n    } else {\n      var valuecheck = [];\n\n      if (!isNullOrUndefined(this.value) && !this.allowCustomValue) {\n        valuecheck = this.presentItemValue(this.ulElement);\n      }\n\n      if (prop == 'value' && valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value) && this.listData != null) {\n        this.mainData = null;\n        this.setDynValue = true;\n        this.addNonPresentItems(valuecheck, this.ulElement, this.listData);\n      } else {\n        if (prop === 'text') {\n          this.initialTextUpdate();\n          newProp = this.value;\n        }\n\n        if (isNullOrUndefined(this.value) || this.value.length === 0) {\n          this.tempValues = oldProp;\n        } // eslint-disable-next-line\n\n\n        if (this.allowCustomValue && (this.mode === 'Default' || this.mode === 'Box') && this.isReact && this.inputFocus && this.isPopupOpen() && this.mainData !== this.listData) {\n          var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n          this.onActionComplete(list, this.mainData);\n        }\n\n        this.initialValueUpdate();\n\n        if (this.mode !== 'Box' && !this.inputFocus) {\n          this.updateDelimView();\n        }\n\n        if (!this.inputFocus) {\n          this.refreshInputHight();\n        }\n\n        this.refreshPlaceHolder();\n\n        if (this.mode !== 'CheckBox' && this.changeOnBlur) {\n          this.updateValueState(null, newProp, oldProp);\n        }\n\n        this.checkPlaceholderSize();\n      }\n    }\n\n    if (!this.changeOnBlur) {\n      this.updateValueState(null, newProp, oldProp);\n    }\n  };\n  /**\n   * Adds a new item to the multiselect popup list. By default, new item appends to the list as the last item,\n   * but you can insert based on the index parameter.\n   *\n   * @param { Object[] } items - Specifies an array of JSON data or a JSON data.\n   * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n   * @returns {void}\n   */\n\n\n  MultiSelect.prototype.addItem = function (items, itemIndex) {\n    _super.prototype.addItem.call(this, items, itemIndex);\n  };\n  /**\n   * Hides the popup, if the popup in a open state.\n   *\n   * @returns {void}\n   */\n\n\n  MultiSelect.prototype.hidePopup = function (e) {\n    var _this = this;\n\n    var delay = 100;\n\n    if (this.isPopupOpen()) {\n      var animModel = {\n        name: 'FadeOut',\n        duration: 100,\n        delay: delay ? delay : 0\n      };\n      var eventArgs = {\n        popup: this.popupObj,\n        cancel: false,\n        animation: animModel,\n        event: e || null\n      };\n      this.trigger('close', eventArgs, function (eventArgs) {\n        if (!eventArgs.cancel) {\n          if (_this.fields.groupBy && _this.mode !== 'CheckBox' && _this.fixedHeaderElement) {\n            remove(_this.fixedHeaderElement);\n            _this.fixedHeaderElement = null;\n          }\n\n          _this.beforePopupOpen = false;\n\n          _this.overAllWrapper.classList.remove(iconAnimation);\n\n          _this.popupObj.hide(new Animation(eventArgs.animation));\n\n          attributes(_this.inputElement, {\n            'aria-expanded': 'false'\n          });\n\n          _this.inputElement.removeAttribute('aria-owns');\n\n          _this.inputElement.removeAttribute('aria-activedescendant');\n\n          if (_this.allowFiltering) {\n            _this.notify('inputFocus', {\n              module: 'CheckBoxSelection',\n              enable: _this.mode === 'CheckBox',\n              value: 'clear'\n            });\n          }\n\n          _this.popupObj.hide();\n\n          removeClass([document.body, _this.popupObj.element], 'e-popup-full-page');\n          EventHandler.remove(_this.list, 'keydown', _this.onKeyDown);\n        }\n      });\n    }\n  };\n  /**\n   * Shows the popup, if the popup in a closed state.\n   *\n   * @returns {void}\n   */\n\n\n  MultiSelect.prototype.showPopup = function (e) {\n    var _this = this;\n\n    if (!this.enabled) {\n      return;\n    }\n\n    var args = {\n      cancel: false\n    };\n    this.trigger('beforeOpen', args, function (args) {\n      if (!args.cancel) {\n        if (!_this.ulElement) {\n          _this.beforePopupOpen = true;\n\n          _super.prototype.render.call(_this, e);\n\n          if (_this.mode === 'CheckBox' && Browser.isDevice && _this.allowFiltering) {\n            _this.notify('popupFullScreen', {\n              module: 'CheckBoxSelection',\n              enable: _this.mode === 'CheckBox'\n            });\n          }\n\n          return;\n        }\n\n        if (_this.mode === 'CheckBox' && Browser.isDevice && _this.allowFiltering) {\n          _this.notify('popupFullScreen', {\n            module: 'CheckBoxSelection',\n            enable: _this.mode === 'CheckBox'\n          });\n        }\n\n        var mainLiLength = _this.ulElement.querySelectorAll('li.' + 'e-list-item').length;\n\n        var liLength = _this.ulElement.querySelectorAll('li.' + dropDownBaseClasses.li + '.' + HIDE_LIST).length;\n\n        if (mainLiLength > 0 && mainLiLength === liLength && liLength === _this.mainData.length && !(_this.targetElement() !== '' && _this.allowCustomValue)) {\n          _this.beforePopupOpen = false;\n          return;\n        }\n\n        _this.onPopupShown(e);\n      }\n    });\n  };\n  /**\n   * Based on the state parameter, entire list item will be selected/deselected.\n   * parameter\n   * `true`   - Selects entire list items.\n   * `false`  - Un Selects entire list items.\n   *\n   * @param {boolean} state - if it’s true then Selects the entire list items. If it’s false the Unselects entire list items.\n   * @returns {void}\n   */\n\n\n  MultiSelect.prototype.selectAll = function (state) {\n    this.isSelectAll = true;\n    this.selectAllItems(state);\n  };\n  /**\n   * Return the module name of this component.\n   *\n   * @private\n   * @returns {string} Return the module name of this component.\n   */\n\n\n  MultiSelect.prototype.getModuleName = function () {\n    return 'multiselect';\n  };\n  /**\n   * Allows you to clear the selected values from the Multiselect component.\n   *\n   * @returns {void}\n   */\n\n\n  MultiSelect.prototype.clear = function () {\n    var _this = this;\n\n    this.selectAll(false);\n\n    if (this.value && this.value.length) {\n      setTimeout(function () {\n        _this.setProperties({\n          value: null\n        }, true);\n      }, 0);\n    } else {\n      this.setProperties({\n        value: null\n      }, true);\n    }\n  };\n  /**\n   * To Initialize the control rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  MultiSelect.prototype.render = function () {\n    this.setDynValue = this.initStatus = false;\n    this.isSelectAll = false;\n    this.selectAllEventEle = [];\n    this.searchWrapper = this.createElement('span', {\n      className: SEARCHBOX_WRAPPER + ' ' + (this.mode === 'Box' ? BOX_ELEMENT : '')\n    });\n    this.viewWrapper = this.createElement('span', {\n      className: DELIMITER_VIEW + ' ' + DELIMITER_WRAPPER,\n      styles: 'display:none;'\n    });\n    this.overAllClear = this.createElement('span', {\n      className: CLOSEICON_CLASS$1,\n      styles: 'display:none;'\n    });\n    this.componentWrapper = this.createElement('div', {\n      className: ELEMENT_WRAPPER\n    });\n    this.overAllWrapper = this.createElement('div', {\n      className: OVER_ALL_WRAPPER\n    });\n\n    if (this.mode === 'CheckBox') {\n      addClass([this.overAllWrapper], 'e-checkbox');\n    }\n\n    if (Browser.isDevice) {\n      this.componentWrapper.classList.add(ELEMENT_MOBILE_WRAPPER);\n    }\n\n    this.setWidth(this.width);\n    this.overAllWrapper.appendChild(this.componentWrapper);\n    this.popupWrapper = this.createElement('div', {\n      id: this.element.id + '_popup',\n      className: POPUP_WRAPPER\n    });\n\n    if (this.mode === 'Delimiter' || this.mode === 'CheckBox') {\n      this.delimiterWrapper = this.createElement('span', {\n        className: DELIMITER_WRAPPER,\n        styles: 'display:none'\n      });\n      this.componentWrapper.appendChild(this.delimiterWrapper);\n    } else {\n      this.chipCollectionWrapper = this.createElement('span', {\n        className: CHIP_WRAPPER$1,\n        styles: 'display:none'\n      });\n\n      if (this.mode === 'Default') {\n        this.chipCollectionWrapper.setAttribute('id', getUniqueID('chip_default'));\n      } else if (this.mode === 'Box') {\n        this.chipCollectionWrapper.setAttribute('id', getUniqueID('chip_box'));\n      }\n\n      this.componentWrapper.appendChild(this.chipCollectionWrapper);\n    }\n\n    if (this.mode !== 'Box') {\n      this.componentWrapper.appendChild(this.viewWrapper);\n    }\n\n    this.componentWrapper.appendChild(this.searchWrapper);\n\n    if (this.showClearButton && !Browser.isDevice) {\n      this.componentWrapper.appendChild(this.overAllClear);\n    } else {\n      this.componentWrapper.classList.add(CLOSE_ICON_HIDE);\n    }\n\n    this.dropDownIcon();\n    this.inputElement = this.createElement('input', {\n      className: INPUT_ELEMENT,\n      attrs: {\n        spellcheck: 'false',\n        type: 'text',\n        autocomplete: 'off',\n        tabindex: '0',\n        role: 'combobox'\n      }\n    });\n\n    if (this.mode === 'Default' || this.mode === 'Box') {\n      this.inputElement.setAttribute('aria-describedby', this.chipCollectionWrapper.id);\n    }\n\n    if (this.element.tagName !== this.getNgDirective()) {\n      this.element.style.display = 'none';\n    }\n\n    if (this.element.tagName === this.getNgDirective()) {\n      this.element.appendChild(this.overAllWrapper);\n      this.searchWrapper.appendChild(this.inputElement);\n    } else {\n      this.element.parentElement.insertBefore(this.overAllWrapper, this.element);\n      this.searchWrapper.appendChild(this.inputElement);\n      this.searchWrapper.appendChild(this.element);\n      this.element.removeAttribute('tabindex');\n    }\n\n    if (this.floatLabelType !== 'Never') {\n      createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);\n    } else if (this.floatLabelType === 'Never') {\n      this.refreshPlaceHolder();\n    }\n\n    this.addValidInputClass();\n    this.element.style.opacity = '';\n    var id = this.element.getAttribute('id') ? this.element.getAttribute('id') : getUniqueID('ej2_dropdownlist');\n    this.element.id = id;\n    this.hiddenElement = this.createElement('select', {\n      attrs: {\n        'aria-hidden': 'true',\n        'class': HIDDEN_ELEMENT,\n        'tabindex': '-1',\n        'multiple': ''\n      }\n    });\n    this.componentWrapper.appendChild(this.hiddenElement);\n    this.validationAttribute(this.element, this.hiddenElement);\n\n    if (this.mode !== 'CheckBox') {\n      this.hideOverAllClear();\n    }\n\n    if (!isNullOrUndefined(closest(this.element, \"fieldset\")) && closest(this.element, \"fieldset\").disabled) {\n      this.enabled = false;\n    }\n\n    this.wireEvent();\n    this.enable(this.enabled);\n    this.enableRTL(this.enableRtl);\n    this.checkInitialValue();\n\n    if (this.element.hasAttribute('data-val')) {\n      this.element.setAttribute('data-val', 'false');\n    }\n\n    Input.createSpanElement(this.overAllWrapper, this.createElement);\n    this.calculateWidth();\n\n    if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName('e-ddl-icon')[0] && this.overAllWrapper.getElementsByClassName('e-float-text-content')[0] && this.floatLabelType !== 'Never')) {\n      this.overAllWrapper.getElementsByClassName('e-float-text-content')[0].classList.add('e-icon');\n    }\n\n    this.renderComplete();\n  };\n\n  MultiSelect.prototype.checkInitialValue = function () {\n    var _this = this;\n\n    var isData = this.dataSource instanceof Array ? this.dataSource.length > 0 : !isNullOrUndefined(this.dataSource);\n\n    if (!(this.value && this.value.length) && isNullOrUndefined(this.text) && !isData && this.element.tagName === 'SELECT' && this.element.options.length > 0) {\n      var optionsElement = this.element.options;\n      var valueCol = [];\n      var textCol = '';\n\n      for (var index = 0, optionsLen = optionsElement.length; index < optionsLen; index++) {\n        var opt = optionsElement[index];\n\n        if (!isNullOrUndefined(opt.getAttribute('selected'))) {\n          if (opt.getAttribute('value')) {\n            valueCol.push(opt.getAttribute('value'));\n          } else {\n            textCol += opt.text + this.delimiterChar;\n          }\n        }\n      }\n\n      if (valueCol.length > 0) {\n        this.setProperties({\n          value: valueCol\n        }, true);\n      } else if (textCol !== '') {\n        this.setProperties({\n          text: textCol\n        }, true);\n      }\n\n      if (valueCol.length > 0 || textCol !== '') {\n        this.refreshInputHight();\n        this.refreshPlaceHolder();\n      }\n    }\n\n    if (this.value && this.value.length || !isNullOrUndefined(this.text)) {\n      if (!this.list) {\n        _super.prototype.render.call(this);\n      }\n    }\n\n    if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {\n      this.initialTextUpdate();\n    }\n\n    if (this.value && this.value.length) {\n      if (!(this.dataSource instanceof DataManager)) {\n        this.initialValueUpdate();\n        this.initialUpdate();\n      } else {\n        this.setInitialValue = function () {\n          _this.initStatus = false;\n\n          _this.initialValueUpdate();\n\n          _this.initialUpdate();\n\n          _this.setInitialValue = null;\n          _this.initStatus = true;\n        };\n      }\n\n      this.updateTempValue();\n    } else {\n      this.initialUpdate();\n    }\n\n    this.initStatus = true;\n    this.checkAutoFocus();\n\n    if (!isNullOrUndefined(this.text)) {\n      this.element.setAttribute('data-initial-value', this.text);\n    }\n  };\n\n  MultiSelect.prototype.checkAutoFocus = function () {\n    if (this.element.hasAttribute('autofocus')) {\n      this.inputElement.focus();\n    }\n  };\n\n  MultiSelect.prototype.setFloatLabelType = function () {\n    removeFloating(this.overAllWrapper, this.componentWrapper, this.searchWrapper, this.inputElement, this.value, this.floatLabelType, this.placeholder);\n\n    if (this.floatLabelType !== 'Never') {\n      createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);\n    }\n  };\n\n  MultiSelect.prototype.addValidInputClass = function () {\n    if (!isNullOrUndefined(this.overAllWrapper)) {\n      if (!isNullOrUndefined(this.value) && this.value.length || this.floatLabelType === 'Always') {\n        addClass([this.overAllWrapper], 'e-valid-input');\n      } else {\n        removeClass([this.overAllWrapper], 'e-valid-input');\n      }\n    }\n  };\n\n  MultiSelect.prototype.dropDownIcon = function () {\n    if (this.showDropDownIcon) {\n      this.dropIcon = this.createElement('span', {\n        className: dropdownIcon\n      });\n      this.componentWrapper.appendChild(this.dropIcon);\n      addClass([this.componentWrapper], ['e-down-icon']);\n    } else {\n      if (!isNullOrUndefined(this.dropIcon)) {\n        this.dropIcon.parentElement.removeChild(this.dropIcon);\n        removeClass([this.componentWrapper], ['e-down-icon']);\n      }\n    }\n  };\n\n  MultiSelect.prototype.initialUpdate = function () {\n    if (this.mode !== 'Box' && !(this.setDynValue && this.mode === 'Default' && this.inputFocus)) {\n      this.updateDelimView();\n    }\n\n    this.updateCssClass();\n    this.updateHTMLAttribute();\n    this.updateReadonly(this.readonly);\n    this.refreshInputHight();\n    this.checkPlaceholderSize();\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n   *\n   * @method destroy\n   * @returns {void}\n   */\n\n\n  MultiSelect.prototype.destroy = function () {\n    // eslint-disable-next-line\n    if (this.isReact) {\n      this.clearTemplate();\n    }\n\n    if (this.popupObj) {\n      this.popupObj.hide();\n    }\n\n    this.notify(destroy, {});\n    this.unwireListEvents();\n    this.unWireEvent();\n    this.list = null;\n    this.popupObj = null;\n    this.mainList = null;\n    this.mainData = null;\n    this.filterParent = null;\n    this.ulElement = null;\n    this.mainListCollection = null;\n\n    _super.prototype.destroy.call(this);\n\n    var temp = ['readonly', 'aria-disabled', 'placeholder'];\n    var length = temp.length;\n\n    if (!isNullOrUndefined(this.inputElement)) {\n      while (length > 0) {\n        this.inputElement.removeAttribute(temp[length - 1]);\n        length--;\n      }\n    }\n\n    if (!isNullOrUndefined(this.element)) {\n      this.element.removeAttribute('data-initial-value');\n      this.element.style.display = 'block';\n    }\n\n    if (this.overAllWrapper && this.overAllWrapper.parentElement) {\n      if (this.overAllWrapper.parentElement.tagName === this.getNgDirective()) {\n        remove(this.overAllWrapper);\n      } else {\n        this.overAllWrapper.parentElement.insertBefore(this.element, this.overAllWrapper);\n        remove(this.overAllWrapper);\n      }\n    }\n\n    this.componentWrapper = null;\n    this.overAllClear = null;\n    this.overAllWrapper = null;\n    this.hiddenElement = null;\n    this.searchWrapper = null;\n    this.viewWrapper = null;\n    this.chipCollectionWrapper = null;\n    this.targetInputElement = null;\n    this.popupWrapper = null;\n    this.inputElement = null;\n    this.delimiterWrapper = null;\n    this.popupObj = null;\n    this.popupWrapper = null;\n    this.liCollections = null;\n    this.header = null;\n    this.mainList = null;\n    this.mainListCollection = null;\n    this.footer = null;\n    this.selectAllEventEle = null;\n  };\n\n  __decorate$5([Complex({\n    text: null,\n    value: null,\n    iconCss: null,\n    groupBy: null\n  }, FieldSettings)], MultiSelect.prototype, \"fields\", void 0);\n\n  __decorate$5([Property(false)], MultiSelect.prototype, \"enablePersistence\", void 0);\n\n  __decorate$5([Property(null)], MultiSelect.prototype, \"groupTemplate\", void 0);\n\n  __decorate$5([Property('No records found')], MultiSelect.prototype, \"noRecordsTemplate\", void 0);\n\n  __decorate$5([Property('Request failed')], MultiSelect.prototype, \"actionFailureTemplate\", void 0);\n\n  __decorate$5([Property('None')], MultiSelect.prototype, \"sortOrder\", void 0);\n\n  __decorate$5([Property(true)], MultiSelect.prototype, \"enabled\", void 0);\n\n  __decorate$5([Property(false)], MultiSelect.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate$5([Property([])], MultiSelect.prototype, \"dataSource\", void 0);\n\n  __decorate$5([Property(null)], MultiSelect.prototype, \"query\", void 0);\n\n  __decorate$5([Property('StartsWith')], MultiSelect.prototype, \"filterType\", void 0);\n\n  __decorate$5([Property(1000)], MultiSelect.prototype, \"zIndex\", void 0);\n\n  __decorate$5([Property(false)], MultiSelect.prototype, \"ignoreAccent\", void 0);\n\n  __decorate$5([Property()], MultiSelect.prototype, \"locale\", void 0);\n\n  __decorate$5([Property(false)], MultiSelect.prototype, \"enableGroupCheckBox\", void 0);\n\n  __decorate$5([Property(null)], MultiSelect.prototype, \"cssClass\", void 0);\n\n  __decorate$5([Property('100%')], MultiSelect.prototype, \"width\", void 0);\n\n  __decorate$5([Property('300px')], MultiSelect.prototype, \"popupHeight\", void 0);\n\n  __decorate$5([Property('100%')], MultiSelect.prototype, \"popupWidth\", void 0);\n\n  __decorate$5([Property(null)], MultiSelect.prototype, \"placeholder\", void 0);\n\n  __decorate$5([Property(null)], MultiSelect.prototype, \"filterBarPlaceholder\", void 0);\n\n  __decorate$5([Property({})], MultiSelect.prototype, \"htmlAttributes\", void 0);\n\n  __decorate$5([Property(null)], MultiSelect.prototype, \"valueTemplate\", void 0);\n\n  __decorate$5([Property(null)], MultiSelect.prototype, \"headerTemplate\", void 0);\n\n  __decorate$5([Property(null)], MultiSelect.prototype, \"footerTemplate\", void 0);\n\n  __decorate$5([Property(null)], MultiSelect.prototype, \"itemTemplate\", void 0);\n\n  __decorate$5([Property(null)], MultiSelect.prototype, \"allowFiltering\", void 0);\n\n  __decorate$5([Property(true)], MultiSelect.prototype, \"changeOnBlur\", void 0);\n\n  __decorate$5([Property(false)], MultiSelect.prototype, \"allowCustomValue\", void 0);\n\n  __decorate$5([Property(true)], MultiSelect.prototype, \"showClearButton\", void 0);\n\n  __decorate$5([Property(1000)], MultiSelect.prototype, \"maximumSelectionLength\", void 0);\n\n  __decorate$5([Property(false)], MultiSelect.prototype, \"readonly\", void 0);\n\n  __decorate$5([Property(null)], MultiSelect.prototype, \"text\", void 0);\n\n  __decorate$5([Property(null)], MultiSelect.prototype, \"value\", void 0);\n\n  __decorate$5([Property(true)], MultiSelect.prototype, \"hideSelectedItem\", void 0);\n\n  __decorate$5([Property(true)], MultiSelect.prototype, \"closePopupOnSelect\", void 0);\n\n  __decorate$5([Property('Default')], MultiSelect.prototype, \"mode\", void 0);\n\n  __decorate$5([Property(',')], MultiSelect.prototype, \"delimiterChar\", void 0);\n\n  __decorate$5([Property(true)], MultiSelect.prototype, \"ignoreCase\", void 0);\n\n  __decorate$5([Property(false)], MultiSelect.prototype, \"showDropDownIcon\", void 0);\n\n  __decorate$5([Property('Never')], MultiSelect.prototype, \"floatLabelType\", void 0);\n\n  __decorate$5([Property(false)], MultiSelect.prototype, \"showSelectAll\", void 0);\n\n  __decorate$5([Property('Select All')], MultiSelect.prototype, \"selectAllText\", void 0);\n\n  __decorate$5([Property('Unselect All')], MultiSelect.prototype, \"unSelectAllText\", void 0);\n\n  __decorate$5([Property(true)], MultiSelect.prototype, \"enableSelectionOrder\", void 0);\n\n  __decorate$5([Property(true)], MultiSelect.prototype, \"openOnClick\", void 0);\n\n  __decorate$5([Property(false)], MultiSelect.prototype, \"addTagOnBlur\", void 0);\n\n  __decorate$5([Event()], MultiSelect.prototype, \"change\", void 0);\n\n  __decorate$5([Event()], MultiSelect.prototype, \"removing\", void 0);\n\n  __decorate$5([Event()], MultiSelect.prototype, \"removed\", void 0);\n\n  __decorate$5([Event()], MultiSelect.prototype, \"beforeSelectAll\", void 0);\n\n  __decorate$5([Event()], MultiSelect.prototype, \"selectedAll\", void 0);\n\n  __decorate$5([Event()], MultiSelect.prototype, \"beforeOpen\", void 0);\n\n  __decorate$5([Event()], MultiSelect.prototype, \"open\", void 0);\n\n  __decorate$5([Event()], MultiSelect.prototype, \"close\", void 0);\n\n  __decorate$5([Event()], MultiSelect.prototype, \"blur\", void 0);\n\n  __decorate$5([Event()], MultiSelect.prototype, \"focus\", void 0);\n\n  __decorate$5([Event()], MultiSelect.prototype, \"chipSelection\", void 0);\n\n  __decorate$5([Event()], MultiSelect.prototype, \"filtering\", void 0);\n\n  __decorate$5([Event()], MultiSelect.prototype, \"tagging\", void 0);\n\n  __decorate$5([Event()], MultiSelect.prototype, \"customValueSelection\", void 0);\n\n  MultiSelect = __decorate$5([NotifyPropertyChanges], MultiSelect);\n  return MultiSelect;\n}(DropDownBase);\n\nvar ICON = 'e-icons';\nvar CHECKBOXFRAME$1 = 'e-frame';\nvar CHECK$1 = 'e-check';\nvar CHECKBOXWRAP$1 = 'e-checkbox-wrapper';\nvar INDETERMINATE = 'e-stop';\nvar checkAllParent = 'e-selectall-parent';\nvar searchBackIcon = 'e-input-group-icon e-back-icon e-icons';\nvar filterBarClearIcon = 'e-input-group-icon e-clear-icon e-icons';\nvar filterInput = 'e-input-filter';\nvar filterParent = 'e-filter-parent';\nvar mobileFilter = 'e-ddl-device-filter';\nvar clearIcon = 'e-clear-icon';\nvar popupFullScreen = 'e-popup-full-page';\nvar device = 'e-ddl-device';\nvar FOCUS$1 = 'e-input-focus';\n/**\n * The Multiselect enable CheckBoxSelection call this inject module.\n */\n\nvar CheckBoxSelection =\n/** @__PURE__ @class */\nfunction () {\n  function CheckBoxSelection(parent) {\n    this.activeLi = [];\n    this.activeEle = [];\n    this.parent = parent;\n    this.removeEventListener();\n    this.addEventListener();\n  }\n\n  CheckBoxSelection.prototype.getModuleName = function () {\n    return 'CheckBoxSelection';\n  };\n\n  CheckBoxSelection.prototype.addEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on('updatelist', this.listSelection, this);\n    this.parent.on('listoption', this.listOption, this);\n    this.parent.on('selectAll', this.setSelectAll, this);\n    this.parent.on('checkSelectAll', this.checkSelectAll, this);\n    this.parent.on('searchBox', this.setSearchBox, this);\n    this.parent.on('blur', this.onBlurHandler, this);\n    this.parent.on('targetElement', this.targetElement, this);\n    this.parent.on('deviceSearchBox', this.setDeviceSearchBox, this);\n    this.parent.on('inputFocus', this.getFocus, this);\n    this.parent.on('reOrder', this.setReorder, this);\n    this.parent.on('activeList', this.getActiveList, this);\n    this.parent.on('selectAllText', this.setLocale, this);\n    this.parent.on('filterBarPlaceholder', this.setPlaceholder, this);\n    EventHandler.add(document, 'mousedown', this.onDocumentClick, this);\n    this.parent.on('addItem', this.checboxCreate, this);\n    this.parent.on('popupFullScreen', this.setPopupFullScreen, this);\n  };\n\n  CheckBoxSelection.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off('updatelist', this.listSelection);\n    this.parent.off('listoption', this.listOption);\n    this.parent.off('selectAll', this.setSelectAll);\n    this.parent.off('checkSelectAll', this.checkSelectAll);\n    this.parent.off('searchBox', this.setSearchBox);\n    this.parent.off('blur', this.onBlurHandler);\n    this.parent.off('targetElement', this.targetElement);\n    this.parent.off('deviceSearchBox', this.setDeviceSearchBox);\n    this.parent.off('inputFocus', this.getFocus);\n    this.parent.off('reOrder', this.setReorder);\n    this.parent.off('activeList', this.getActiveList);\n    this.parent.off('selectAllText', this.setLocale);\n    this.parent.off('filterBarPlaceholder', this.setPlaceholder);\n    this.parent.off('addItem', this.checboxCreate);\n    this.parent.off('popupFullScreen', this.setPopupFullScreen);\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  CheckBoxSelection.prototype.listOption = function (args) {\n    var _this = this;\n\n    if (isNullOrUndefined(this.parent.listCurrentOptions.itemCreated)) {\n      this.parent.listCurrentOptions.itemCreated = function (e) {\n        _this.checboxCreate(e);\n      };\n    } else {\n      var itemCreated_1 = this.parent.listCurrentOptions.itemCreated;\n\n      this.parent.listCurrentOptions.itemCreated = function (e) {\n        _this.checboxCreate(e);\n\n        itemCreated_1.apply(_this, [e]);\n      };\n    }\n  };\n\n  CheckBoxSelection.prototype.setPlaceholder = function (props) {\n    Input.setPlaceholder(props.filterBarPlaceholder, this.filterInput);\n  };\n\n  CheckBoxSelection.prototype.checboxCreate = function (e) {\n    var item;\n\n    if (!isNullOrUndefined(e.item)) {\n      item = e.item;\n    } else {\n      item = e;\n    }\n\n    if (this.parent.enableGroupCheckBox || item.className !== 'e-list-group-item ' && item.className !== 'e-list-group-item') {\n      var checkboxEle = createCheckBox(this.parent.createElement, true);\n      var icon = select('div.' + ICON, item);\n      item.insertBefore(checkboxEle, item.childNodes[isNullOrUndefined(icon) ? 0 : 1]);\n      select('.' + CHECKBOXFRAME$1, checkboxEle);\n\n      if (this.parent.enableGroupCheckBox) {\n        this.parent.popupWrapper.classList.add('e-multiselect-group');\n      }\n\n      return item;\n    } else {\n      return item;\n    }\n  };\n\n  CheckBoxSelection.prototype.setSelectAll = function () {\n    if (this.parent.showSelectAll) {\n      if (isNullOrUndefined(this.checkAllParent)) {\n        this.checkAllParent = this.parent.createElement('div', {\n          className: checkAllParent\n        });\n        this.selectAllSpan = this.parent.createElement('span', {\n          className: 'e-all-text'\n        });\n        this.selectAllSpan.textContent = '';\n        this.checkAllParent.appendChild(this.selectAllSpan);\n        this.setLocale();\n        this.checboxCreate(this.checkAllParent);\n\n        if (this.parent.headerTemplate) {\n          if (!isNullOrUndefined(this.parent.filterParent)) {\n            append([this.checkAllParent], this.parent.filterParent);\n          } else {\n            append([this.checkAllParent], this.parent.popupWrapper);\n          }\n        }\n\n        if (!this.parent.headerTemplate) {\n          if (!isNullOrUndefined(this.parent.filterParent)) {\n            this.parent.filterParent.parentNode.insertBefore(this.checkAllParent, this.parent.filterParent.nextSibling);\n          } else {\n            prepend([this.checkAllParent], this.parent.popupWrapper);\n          }\n        }\n\n        EventHandler.add(this.checkAllParent, 'mousedown', this.clickHandler, this);\n      }\n\n      if (this.parent.list.classList.contains('e-nodata') || this.parent.listData && this.parent.listData.length <= 1 && !this.parent.isDynamicDataChange || this.parent.isDynamicDataChange && this.parent.listData && this.parent.listData.length <= 1) {\n        this.checkAllParent.style.display = 'none';\n      } else {\n        this.checkAllParent.style.display = 'block';\n      }\n\n      this.parent.selectAllHeight = this.checkAllParent.getBoundingClientRect().height;\n    } else if (!isNullOrUndefined(this.checkAllParent)) {\n      this.checkAllParent.parentElement.removeChild(this.checkAllParent);\n      this.checkAllParent = null;\n    }\n  };\n\n  CheckBoxSelection.prototype.destroy = function () {\n    this.removeEventListener();\n    EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n    this.checkAllParent = null;\n    this.clearIconElement = null;\n    this.filterInput = null;\n    this.filterInputObj = null;\n    this.checkWrapper = null;\n    this.selectAllSpan = null;\n  };\n\n  CheckBoxSelection.prototype.listSelection = function (args) {\n    var target;\n\n    if (!isNullOrUndefined(args.e)) {\n      var frameElm = args.li.querySelector('.e-checkbox-wrapper .e-frame');\n      target = !isNullOrUndefined(args.e.target) ? args.e.target.classList.contains('e-frame') && (!this.parent.showSelectAll || this.checkAllParent && !this.checkAllParent.contains(args.e.target)) ? args.e.target : args.li.querySelector('.e-checkbox-wrapper').childNodes[1] : args.li.querySelector('.e-checkbox-wrapper').childNodes[1];\n    } else {\n      var checkboxWrapper = args.li.querySelector('.e-checkbox-wrapper');\n      target = checkboxWrapper ? checkboxWrapper.childNodes[1] : args.li.lastElementChild.childNodes[1];\n    }\n\n    if (this.parent.itemTemplate || this.parent.enableGroupCheckBox) {\n      target = args.li.firstElementChild.childNodes[1];\n    }\n\n    if (!isNullOrUndefined(target)) {\n      this.checkWrapper = closest(target, '.' + CHECKBOXWRAP$1);\n    }\n\n    if (!isNullOrUndefined(this.checkWrapper)) {\n      var checkElement = select('.' + CHECKBOXFRAME$1, this.checkWrapper);\n      var selectAll$$1 = false;\n      this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK$1), args.li, args.e, selectAll$$1);\n    }\n  };\n\n  CheckBoxSelection.prototype.validateCheckNode = function (checkWrap, isCheck, li, e, selectAll$$1) {\n    this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true, selectAll$$1);\n  };\n\n  CheckBoxSelection.prototype.clickHandler = function (e) {\n    var target;\n\n    if (e.currentTarget.classList.contains(this.checkAllParent.className)) {\n      target = e.currentTarget.firstElementChild.lastElementChild;\n    } else {\n      target = e.currentTarget;\n    }\n\n    this.checkWrapper = closest(target, '.' + CHECKBOXWRAP$1);\n    var selectAll$$1 = true;\n\n    if (!isNullOrUndefined(this.checkWrapper)) {\n      var checkElement = select('.' + CHECKBOXFRAME$1, this.checkWrapper);\n      this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK$1), null, e, selectAll$$1);\n    }\n\n    e.preventDefault();\n  };\n\n  CheckBoxSelection.prototype.changeState = function (wrapper, state, e, isPrevent, selectAll$$1) {\n    var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME$1)[0];\n\n    if (state === 'check' && !frameSpan.classList.contains(CHECK$1)) {\n      frameSpan.classList.remove(INDETERMINATE);\n      frameSpan.classList.add(CHECK$1);\n\n      if (selectAll$$1) {\n        this.parent.selectAllItems(true, e);\n        this.setLocale(true);\n      }\n    } else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK$1) || frameSpan.classList.contains(INDETERMINATE))) {\n      removeClass([frameSpan], [CHECK$1, INDETERMINATE]);\n\n      if (selectAll$$1) {\n        this.parent.selectAllItems(false, e);\n        this.setLocale();\n      }\n    } else if (state === 'indeterminate' && !frameSpan.classList.contains(INDETERMINATE)) {\n      removeClass([frameSpan], [CHECK$1]);\n      frameSpan.classList.add(INDETERMINATE);\n\n      if (selectAll$$1) {\n        this.parent.selectAllItems(false, e);\n        this.setLocale();\n      }\n    }\n  };\n\n  CheckBoxSelection.prototype.setSearchBox = function (args) {\n    if (isNullOrUndefined(this.parent.filterParent)) {\n      this.parent.filterParent = this.parent.createElement('span', {\n        className: filterParent\n      });\n      this.filterInput = this.parent.createElement('input', {\n        attrs: {\n          type: 'text'\n        },\n        className: filterInput\n      });\n      this.parent.element.parentNode.insertBefore(this.filterInput, this.parent.element);\n      var backIcon = false;\n\n      if (Browser.isDevice) {\n        backIcon = true;\n        this.parent.mobFilter = false;\n      }\n\n      this.filterInputObj = Input.createInput({\n        element: this.filterInput,\n        buttons: backIcon ? [searchBackIcon, filterBarClearIcon] : [filterBarClearIcon],\n        properties: {\n          placeholder: this.parent.filterBarPlaceholder\n        }\n      }, this.parent.createElement);\n\n      if (!isNullOrUndefined(this.parent.cssClass)) {\n        if (this.parent.cssClass.split(' ').indexOf('e-outline') !== -1) {\n          addClass([this.filterInputObj.container], 'e-outline');\n        } else if (this.parent.cssClass.split(' ').indexOf('e-filled') !== -1) {\n          addClass([this.filterInputObj.container], 'e-filled');\n        }\n      }\n\n      append([this.filterInputObj.container], this.parent.filterParent);\n      prepend([this.parent.filterParent], args.popupElement);\n      attributes(this.filterInput, {\n        'aria-disabled': 'false',\n        'role': 'combobox',\n        'autocomplete': 'off',\n        'autocapitalize': 'off',\n        'spellcheck': 'false'\n      });\n      this.clearIconElement = this.filterInput.parentElement.querySelector('.' + clearIcon);\n\n      if (!Browser.isDevice && this.clearIconElement) {\n        EventHandler.add(this.clearIconElement, 'mousedown', this.clearText, this);\n        this.clearIconElement.style.visibility = 'hidden';\n      }\n\n      EventHandler.add(this.filterInput, 'input', this.parent.onInput, this.parent);\n      EventHandler.add(this.filterInput, 'keyup', this.parent.keyUp, this.parent);\n      EventHandler.add(this.filterInput, 'keydown', this.parent.onKeyDown, this.parent);\n      EventHandler.add(this.filterInput, 'blur', this.onBlurHandler, this);\n      EventHandler.add(this.filterInput, 'paste', this.parent.pasteHandler, this.parent);\n      this.parent.searchBoxHeight = this.filterInputObj.container.parentElement.getBoundingClientRect().height;\n      return this.filterInputObj;\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  CheckBoxSelection.prototype.clickOnBackIcon = function (e) {\n    this.parent.hidePopup();\n    removeClass([document.body, this.parent.popupObj.element], popupFullScreen);\n    this.parent.inputElement.focus();\n  };\n\n  CheckBoxSelection.prototype.clearText = function (e) {\n    this.parent.targetInputElement.value = '';\n\n    if (this.parent.allowFiltering && this.parent.targetInputElement.value === '') {\n      this.parent.search(null);\n    }\n\n    this.parent.refreshPopup();\n    this.parent.refreshListItems(null);\n    this.clearIconElement.style.visibility = 'hidden';\n    this.filterInput.focus();\n    this.setReorder(e);\n    e.preventDefault();\n  };\n\n  CheckBoxSelection.prototype.setDeviceSearchBox = function () {\n    this.parent.popupObj.element.classList.add(device);\n    this.parent.popupObj.element.classList.add(mobileFilter);\n    this.parent.popupObj.position = {\n      X: 0,\n      Y: 0\n    };\n    this.parent.popupObj.dataBind();\n    this.setSearchBoxPosition();\n    this.backIconElement = this.filterInputObj.container.querySelector('.e-back-icon');\n    this.clearIconElement = this.filterInputObj.container.querySelector('.' + clearIcon);\n    this.clearIconElement.style.visibility = 'hidden';\n    EventHandler.add(this.backIconElement, 'click', this.clickOnBackIcon, this);\n    EventHandler.add(this.clearIconElement, 'click', this.clearText, this);\n  };\n\n  CheckBoxSelection.prototype.setSearchBoxPosition = function () {\n    var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;\n    var selectAllHeight = 0;\n\n    if (this.checkAllParent) {\n      selectAllHeight = this.checkAllParent.getBoundingClientRect().height;\n    }\n\n    this.parent.popupObj.element.style.maxHeight = '100%';\n    this.parent.popupObj.element.style.width = '100%';\n    this.parent.list.style.maxHeight = window.innerHeight - searchBoxHeight - selectAllHeight + 'px';\n    this.parent.list.style.height = window.innerHeight - searchBoxHeight - selectAllHeight + 'px';\n    var clearElement = this.filterInput.parentElement.querySelector('.' + clearIcon);\n    detach(this.filterInput);\n    clearElement.parentElement.insertBefore(this.filterInput, clearElement);\n  };\n\n  CheckBoxSelection.prototype.setPopupFullScreen = function () {\n    attributes(this.parent.popupObj.element, {\n      style: 'left:0px;right:0px;top:0px;bottom:0px;'\n    });\n    addClass([document.body, this.parent.popupObj.element], popupFullScreen);\n    this.parent.popupObj.element.style.maxHeight = '100%';\n    this.parent.popupObj.element.style.width = '100%';\n  };\n\n  CheckBoxSelection.prototype.targetElement = function () {\n    if (!isNullOrUndefined(this.clearIconElement)) {\n      this.parent.targetInputElement = this.filterInput;\n      this.clearIconElement.style.visibility = this.parent.targetInputElement.value === '' ? 'hidden' : 'visible';\n    }\n\n    return this.parent.targetInputElement.value;\n  };\n\n  CheckBoxSelection.prototype.onBlurHandler = function (e) {\n    if (!this.parent.element.classList.contains('e-listbox')) {\n      var target = void 0;\n\n      if (this.parent.keyAction) {\n        return;\n      }\n\n      if (Browser.isIE) {\n        target = !isNullOrUndefined(e) && e.target;\n      }\n\n      if (!Browser.isIE) {\n        target = !isNullOrUndefined(e) && e.relatedTarget;\n      } // eslint-disable-next-line max-len\n\n\n      if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && this.parent.popupObj.element.contains(target) && !Browser.isIE && this.filterInput) {\n        this.filterInput.focus();\n        return;\n      }\n\n      if (this.parent.scrollFocusStatus && this.filterInput) {\n        e.preventDefault();\n        this.filterInput.focus();\n        this.parent.scrollFocusStatus = false;\n        return;\n      }\n\n      if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains('e-popup-close')) {\n        this.parent.inputFocus = false;\n        this.parent.updateValueState(e, this.parent.value, this.parent.tempValues);\n        this.parent.dispatchEvent(this.parent.hiddenElement, 'change');\n      }\n\n      if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains('e-popup-close')) {\n        this.parent.inputFocus = false;\n        this.parent.overAllWrapper.classList.remove(FOCUS$1);\n        this.parent.trigger('blur');\n        this.parent.focused = true;\n      }\n\n      if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains('e-popup-close') && !Browser.isDevice) {\n        this.parent.hidePopup();\n      }\n    }\n  };\n\n  CheckBoxSelection.prototype.onDocumentClick = function (e) {\n    if (this.parent.getLocaleName() !== 'listbox') {\n      var target = e.target;\n\n      if (!isNullOrUndefined(this.parent.popupObj) && closest(target, '[id=\"' + this.parent.popupObj.element.id + '\"]')) {\n        if (!(this.filterInput && this.filterInput.value !== '')) {\n          e.preventDefault();\n        }\n      }\n\n      if (!(!isNullOrUndefined(this.parent.popupObj) && closest(target, '[id=\"' + this.parent.popupObj.element.id + '\"]')) && !isNullOrUndefined(this.parent.overAllWrapper) && !this.parent.overAllWrapper.contains(e.target)) {\n        if (this.parent.overAllWrapper.classList.contains(dropDownBaseClasses.focus) || this.parent.isPopupOpen()) {\n          this.parent.inputFocus = false;\n          this.parent.scrollFocusStatus = false;\n          this.parent.hidePopup();\n          this.parent.onBlurHandler(e, true);\n          this.parent.focused = true;\n        }\n      } else {\n        this.parent.scrollFocusStatus = (Browser.isIE || Browser.info.name === 'edge') && document.activeElement === this.filterInput;\n      }\n\n      if (!isNullOrUndefined(this.parent.overAllWrapper) && !this.parent.overAllWrapper.contains(e.target) && this.parent.overAllWrapper.classList.contains('e-input-focus') && !this.parent.isPopupOpen()) {\n        if (Browser.isIE) {\n          this.parent.onBlurHandler();\n        } else {\n          this.parent.onBlurHandler(e);\n        }\n      }\n\n      if (this.filterInput === target) {\n        this.filterInput.focus();\n      }\n    }\n  };\n\n  CheckBoxSelection.prototype.getFocus = function (e) {\n    this.parent.overAllWrapper.classList.remove(FOCUS$1);\n\n    if (this.parent.keyAction && e.value !== 'clear' && e.value !== 'focus') {\n      this.parent.keyAction = false;\n      return;\n    }\n\n    if (e.value === 'focus') {\n      this.filterInput.focus();\n      this.parent.removeFocus();\n      EventHandler.remove(this.parent.list, 'keydown', this.parent.onKeyDown);\n    }\n\n    if (e.value === 'clear') {\n      this.filterInput.value = '';\n      this.clearIconElement.style.visibility = 'hidden';\n    }\n  };\n\n  CheckBoxSelection.prototype.checkSelectAll = function (e) {\n    if (e.value === 'check') {\n      this.changeState(this.checkAllParent, e.value, null, null, false);\n      this.setLocale(true);\n    }\n\n    if (e.value === 'uncheck') {\n      this.changeState(this.checkAllParent, e.value, null, null, false);\n      this.setLocale();\n    }\n\n    if (e.value === 'indeterminate') {\n      this.changeState(this.checkAllParent, e.value, null, null, false);\n      this.setLocale();\n    }\n  };\n\n  CheckBoxSelection.prototype.setLocale = function (unSelect) {\n    if (this.parent.selectAllText !== 'Select All' || this.parent.unSelectAllText !== 'Unselect All') {\n      var template = unSelect ? this.parent.unSelectAllText : this.parent.selectAllText;\n      this.selectAllSpan.textContent = '';\n      var compiledString = compile(template);\n      var templateName = unSelect ? 'unSelectAllText' : 'selectAllText';\n\n      for (var _i = 0, _a = compiledString({}, this.parent, templateName, null, !this.parent.isStringTemplate); _i < _a.length; _i++) {\n        var item = _a[_i];\n        this.selectAllSpan.textContent = item.textContent;\n      }\n    } else {\n      var l10nLocale = {\n        selectAllText: 'Select All',\n        unSelectAllText: 'Unselect All'\n      };\n      var l10n = new L10n(this.parent.getLocaleName(), {}, this.parent.locale);\n\n      if (l10n.getConstant('selectAllText') === '') {\n        l10n = new L10n('dropdowns', l10nLocale, this.parent.locale);\n      }\n\n      this.selectAllSpan.textContent = unSelect ? l10n.getConstant('unSelectAllText') : l10n.getConstant('selectAllText');\n    }\n  };\n\n  CheckBoxSelection.prototype.getActiveList = function (args) {\n    if (args.li.classList.contains('e-active')) {\n      this.activeLi.push(args.li.cloneNode(true));\n    } else {\n      this.activeLi.splice(args.index, 1);\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  CheckBoxSelection.prototype.setReorder = function (args) {\n    if (this.parent.enableSelectionOrder && !isNullOrUndefined(this.parent.value)) {\n      var activeLiCount = this.parent.ulElement.querySelectorAll('li.e-active').length;\n      var remLi = void 0;\n      var ulEle_1 = this.parent.createElement('ul', {\n        className: 'e-list-parent e-ul e-reorder'\n      });\n\n      if (activeLiCount > 0) {\n        var activeListItems = this.parent.ulElement.querySelectorAll('li.e-active');\n        activeListItems.forEach(function (item) {\n          ulEle_1.appendChild(item);\n        });\n        remLi = this.parent.ulElement.querySelectorAll('li.e-active');\n        addClass(remLi, 'e-reorder-hide');\n        prepend([ulEle_1], this.parent.list);\n      }\n\n      this.parent.focusAtFirstListItem();\n    }\n  };\n\n  return CheckBoxSelection;\n}();\n/**\n * export all modules from current location\n */\n\n\nvar __extends$6 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$6 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; // eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path='../drop-down-base/drop-down-base-model.d.ts'/>\n\n/**\n * Defines the Selection settings of List Box.\n */\n\n\nvar SelectionSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$6(SelectionSettings, _super);\n\n  function SelectionSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$6([Property('Multiple')], SelectionSettings.prototype, \"mode\", void 0);\n\n  __decorate$6([Property(false)], SelectionSettings.prototype, \"showCheckbox\", void 0);\n\n  __decorate$6([Property(false)], SelectionSettings.prototype, \"showSelectAll\", void 0);\n\n  __decorate$6([Property('Left')], SelectionSettings.prototype, \"checkboxPosition\", void 0);\n\n  return SelectionSettings;\n}(ChildProperty);\n/**\n * Defines the toolbar settings of List Box.\n */\n\n\nvar ToolbarSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$6(ToolbarSettings, _super);\n\n  function ToolbarSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$6([Property([])], ToolbarSettings.prototype, \"items\", void 0);\n\n  __decorate$6([Property('Right')], ToolbarSettings.prototype, \"position\", void 0);\n\n  return ToolbarSettings;\n}(ChildProperty);\n/**\n * The ListBox is a graphical user interface component used to display a list of items.\n * Users can select one or more items in the list using a checkbox or by keyboard selection.\n * It supports sorting, grouping, reordering and drag and drop of items.\n * ```html\n * <select id=\"listbox\">\n *      <option value='1'>Badminton</option>\n *      <option value='2'>Basketball</option>\n *      <option value='3'>Cricket</option>\n *      <option value='4'>Football</option>\n *      <option value='5'>Tennis</option>\n * </select>\n * ```\n * ```typescript\n * <script>\n *   var listObj = new ListBox();\n *   listObj.appendTo(\"#listbox\");\n * </script>\n * ```\n */\n\n\nvar ListBox =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$6(ListBox, _super);\n  /**\n   * Constructor for creating the ListBox component.\n   *\n   * @param {ListBoxModel} options - Specifies ListBox model\n   * @param {string | HTMLElement} element - Specifies the element.\n   */\n\n\n  function ListBox(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.isValidKey = false;\n    _this.isDataSourceUpdate = false;\n    _this.keyDownStatus = false;\n    return _this;\n  }\n\n  ListBox_1 = ListBox;\n  /**\n   * Adds a new item to the popup list. By default, new item appends to the list as the last item,\n   * but you can insert based on the index parameter.\n   *\n   * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n   * @param { number } itemIndex - Specifies the index to place the newly added item in the popup list.\n   * @returns {void}.\n   * @private\n   */\n\n  ListBox.prototype.addItem = function (items, itemIndex) {\n    _super.prototype.addItem.call(this, items, itemIndex);\n  };\n  /**\n   * Build and render the component.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  ListBox.prototype.render = function () {\n    this.inputString = '';\n    this.initLoad = true;\n    this.isCustomFiltering = false;\n    this.initialSelectedOptions = this.value;\n\n    _super.prototype.render.call(this);\n\n    this.setEnabled();\n    this.renderComplete();\n  };\n\n  ListBox.prototype.initWrapper = function () {\n    var hiddenSelect = this.createElement('select', {\n      className: 'e-hidden-select',\n      attrs: {\n        'multiple': ''\n      }\n    });\n    hiddenSelect.style.visibility = 'hidden';\n    this.list.classList.add('e-listbox-wrapper');\n\n    if (this.itemTemplate) {\n      this.list.classList.add('e-list-template');\n    }\n\n    this.list.classList.add('e-wrapper');\n    this.list.classList.add('e-lib');\n\n    if (this.element.tagName === 'EJS-LISTBOX') {\n      this.element.setAttribute('tabindex', '0');\n\n      if (this.initLoad) {\n        this.element.appendChild(this.list);\n      }\n    } else {\n      if (this.initLoad) {\n        this.element.parentElement.insertBefore(this.list, this.element);\n      }\n\n      this.list.insertBefore(this.element, this.list.firstChild);\n      this.element.style.display = 'none';\n    }\n\n    this.list.insertBefore(hiddenSelect, this.list.firstChild);\n\n    if (this.list.getElementsByClassName('e-list-item')[0]) {\n      this.list.getElementsByClassName('e-list-item')[0].classList.remove(dropDownBaseClasses.focus);\n    }\n\n    if (this.itemTemplate) {\n      this.renderReactTemplates();\n    }\n\n    removeClass([this.list], [dropDownBaseClasses.content, dropDownBaseClasses.root]);\n    this.validationAttribute(this.element, hiddenSelect);\n    this.list.setAttribute('role', 'listbox');\n    attributes(this.list, {\n      'role': 'listbox',\n      'aria-label': 'listbox',\n      'aria-multiselectable': this.selectionSettings.mode === 'Multiple' ? 'true' : 'false'\n    });\n    this.updateSelectionSettings();\n  };\n\n  ListBox.prototype.updateSelectionSettings = function () {\n    if (this.selectionSettings.showCheckbox && this.selectionSettings.showSelectAll && this.liCollections.length) {\n      var l10nSelect = new L10n(this.getModuleName(), {\n        selectAllText: 'Select All',\n        unSelectAllText: 'Unselect All'\n      }, this.locale);\n      this.showSelectAll = true;\n      this.selectAllText = l10nSelect.getConstant('selectAllText');\n      this.unSelectAllText = l10nSelect.getConstant('unSelectAllText');\n      this.popupWrapper = this.list;\n      this.checkBoxSelectionModule.checkAllParent = null;\n      this.notify('selectAll', {});\n    }\n  };\n\n  ListBox.prototype.initDraggable = function () {\n    var _this = this;\n\n    if (this.ulElement) {\n      this.ulElement.id = this.element.id + '_parent';\n    }\n\n    if (this.allowDragAndDrop) {\n      new Sortable(this.ulElement, {\n        scope: this.scope,\n        itemClass: 'e-list-item',\n        dragStart: this.triggerDragStart.bind(this),\n        drag: this.triggerDrag.bind(this),\n        beforeDrop: this.beforeDragEnd.bind(this),\n        drop: this.dragEnd.bind(this),\n        placeHolder: function () {\n          return _this.createElement('span', {\n            className: 'e-placeholder'\n          });\n        },\n        helper: function (e) {\n          var wrapper = _this.list.cloneNode();\n\n          var ele = e.sender.cloneNode(true);\n          wrapper.appendChild(ele);\n\n          var refEle = _this.getItems()[0];\n\n          wrapper.style.width = refEle.offsetWidth + 'px';\n          wrapper.style.height = refEle.offsetHeight + 'px';\n\n          if ((_this.value && _this.value.length) > 1 && _this.isSelected(ele)) {\n            ele.appendChild(_this.createElement('span', {\n              className: 'e-list-badge',\n              innerHTML: _this.value.length + ''\n            }));\n          }\n\n          wrapper.style.zIndex = getZindexPartial(_this.element) + '';\n          return wrapper;\n        }\n      });\n    }\n  };\n\n  ListBox.prototype.updateActionCompleteData = function (li, item, index) {\n    this.jsonData.splice(index, 0, item);\n  };\n\n  ListBox.prototype.initToolbar = function () {\n    var pos = this.toolbarSettings.position;\n    var prevScope = this.element.getAttribute('data-value');\n\n    if (this.toolbarSettings.items.length) {\n      var toolElem = this.createElement('div', {\n        className: 'e-listbox-tool',\n        attrs: {\n          'role': 'toolbar'\n        }\n      });\n      var wrapper = this.createElement('div', {\n        className: 'e-listboxtool-wrapper e-lib e-' + pos.toLowerCase()\n      });\n      this.list.parentElement.insertBefore(wrapper, this.list);\n      wrapper.appendChild(pos === 'Right' ? this.list : toolElem);\n      wrapper.appendChild(pos === 'Right' ? toolElem : this.list);\n      this.createButtons(toolElem);\n\n      if (!this.element.id) {\n        this.element.id = getUniqueID('e-' + this.getModuleName());\n      }\n\n      if (this.scope) {\n        document.querySelector(this.scope).setAttribute('data-value', this.element.id);\n      } else {\n        this.updateToolBarState();\n      }\n    }\n\n    var scope = this.element.getAttribute('data-value');\n\n    if (prevScope && scope && prevScope !== scope) {\n      this.tBListBox = getComponent(document.getElementById(prevScope), this.getModuleName());\n      this.tBListBox.updateToolBarState();\n    } else if (scope) {\n      this.tBListBox = getComponent(document.getElementById(scope), this.getModuleName());\n      this.tBListBox.updateToolBarState();\n    }\n  };\n\n  ListBox.prototype.createButtons = function (toolElem) {\n    var _this = this;\n\n    var btn;\n    var ele;\n    var title;\n    var l10n = new L10n(this.getModuleName(), {\n      moveUp: 'Move Up',\n      moveDown: 'Move Down',\n      moveTo: 'Move To',\n      moveFrom: 'Move From',\n      moveAllTo: 'Move All To',\n      moveAllFrom: 'Move All From'\n    }, this.locale);\n    this.toolbarSettings.items.forEach(function (value) {\n      title = l10n.getConstant(value);\n      ele = _this.createElement('button', {\n        attrs: {\n          'type': 'button',\n          'data-value': value,\n          'title': title,\n          'aria-label': title\n        }\n      });\n      toolElem.appendChild(ele);\n      btn = new Button({\n        iconCss: 'e-icons e-' + value.toLowerCase()\n      }, ele);\n      btn.createElement = _this.createElement;\n    });\n  };\n\n  ListBox.prototype.validationAttribute = function (input, hiddenSelect) {\n    _super.prototype.validationAttribute.call(this, input, hiddenSelect);\n\n    hiddenSelect.required = input.required;\n    input.required = false;\n  };\n\n  ListBox.prototype.setHeight = function () {\n    var ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n    ele.style.height = formatUnit(this.height);\n\n    if (this.allowFiltering && this.height.toString().indexOf('%') < 0) {\n      addClass([this.list], 'e-filter-list');\n    } else {\n      removeClass([this.list], 'e-filter-list');\n    }\n  };\n\n  ListBox.prototype.setCssClass = function () {\n    var wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n\n    if (this.cssClass) {\n      addClass([wrap], this.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n    }\n\n    if (this.enableRtl) {\n      addClass([this.list], 'e-rtl');\n    }\n  };\n\n  ListBox.prototype.setEnable = function () {\n    var ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n\n    if (this.enabled) {\n      removeClass([ele], cssClass.disabled);\n    } else {\n      addClass([ele], cssClass.disabled);\n    }\n  };\n\n  ListBox.prototype.showSpinner = function () {\n    if (!this.spinner) {\n      this.spinner = this.createElement('div', {\n        className: 'e-listbox-wrapper'\n      });\n    }\n\n    this.spinner.style.height = formatUnit(this.height);\n    this.element.parentElement.insertBefore(this.spinner, this.element.nextSibling);\n    createSpinner({\n      target: this.spinner\n    }, this.createElement);\n    showSpinner(this.spinner);\n  };\n\n  ListBox.prototype.hideSpinner = function () {\n    if (this.spinner.querySelector('.e-spinner-pane')) {\n      hideSpinner(this.spinner);\n    }\n\n    if (this.spinner.parentElement) {\n      detach(this.spinner);\n    }\n  };\n\n  ListBox.prototype.onInput = function () {\n    this.isDataSourceUpdate = false;\n\n    if (this.keyDownStatus) {\n      this.isValidKey = true;\n    } else {\n      this.isValidKey = false;\n    }\n\n    this.keyDownStatus = false;\n    this.refreshClearIcon();\n  };\n\n  ListBox.prototype.clearText = function () {\n    this.filterInput.value = '';\n    this.refreshClearIcon();\n    var event = document.createEvent('KeyboardEvent');\n    this.isValidKey = true;\n    this.KeyUp(event);\n  };\n\n  ListBox.prototype.refreshClearIcon = function () {\n    if (this.filterInput.parentElement.querySelector('.' + listBoxClasses.clearIcon)) {\n      var clearElement = this.filterInput.parentElement.querySelector('.' + listBoxClasses.clearIcon);\n      clearElement.style.visibility = this.filterInput.value === '' ? 'hidden' : 'visible';\n    }\n  };\n\n  ListBox.prototype.onActionComplete = function (ulElement, list, e) {\n    var searchEle;\n\n    if (this.allowFiltering && this.list.getElementsByClassName('e-filter-parent')[0]) {\n      searchEle = this.list.getElementsByClassName('e-filter-parent')[0].cloneNode(true);\n    }\n\n    if (list.length === 0) {\n      var noRecElem = ulElement.childNodes[0];\n\n      if (noRecElem) {\n        ulElement.removeChild(noRecElem);\n      }\n    }\n\n    _super.prototype.onActionComplete.call(this, ulElement, list, e);\n\n    if (this.allowFiltering && !isNullOrUndefined(searchEle)) {\n      this.list.insertBefore(searchEle, this.list.firstElementChild);\n      this.filterParent = this.list.getElementsByClassName('e-filter-parent')[0];\n      this.filterWireEvents(searchEle);\n    }\n\n    this.initWrapper();\n    this.setSelection();\n    this.initDraggable();\n    this.mainList = this.ulElement;\n\n    if (this.initLoad) {\n      this.jsonData = [];\n      extend(this.jsonData, list, []);\n      this.initToolbarAndStyles();\n      this.wireEvents();\n\n      if (this.showCheckbox) {\n        this.setCheckboxPosition();\n      }\n\n      if (this.allowFiltering) {\n        this.setFiltering();\n      }\n    } else {\n      if (this.isDataSourceUpdate) {\n        this.jsonData = [];\n        extend(this.jsonData, list, []);\n        this.isDataSourceUpdate = false;\n      }\n\n      if (this.allowFiltering) {\n        var filterElem = this.list.getElementsByClassName('e-input-filter')[0];\n        var txtLength = this.filterInput.value.length;\n        filterElem.selectionStart = txtLength;\n        filterElem.selectionEnd = txtLength;\n        filterElem.focus();\n      }\n    }\n\n    if (this.toolbarSettings.items.length && this.scope && this.scope.indexOf('#') > -1 && !isNullOrUndefined(e)) {\n      var scope = this.scope.replace('#', '');\n      var scopedLB = getComponent(document.getElementById(scope), this.getModuleName());\n      scopedLB.initToolbar();\n    }\n\n    this.initLoad = false;\n  };\n\n  ListBox.prototype.initToolbarAndStyles = function () {\n    this.initToolbar();\n    this.setCssClass();\n    this.setEnable();\n    this.setHeight();\n  };\n\n  ListBox.prototype.triggerDragStart = function (args) {\n    var _this = this;\n\n    var badge;\n    args = extend(this.getDragArgs(args), {\n      dragSelected: true\n    });\n\n    if (Browser.isIos) {\n      this.list.style.overflow = 'hidden';\n    }\n\n    this.trigger('dragStart', args, function (dragEventArgs) {\n      _this.allowDragAll = dragEventArgs.dragSelected;\n\n      if (!_this.allowDragAll) {\n        badge = _this.ulElement.getElementsByClassName('e-list-badge')[0];\n\n        if (badge) {\n          detach(badge);\n        }\n      }\n    });\n  };\n\n  ListBox.prototype.triggerDrag = function (args) {\n    var scrollParent;\n    var boundRect;\n    var scrollMoved = 36;\n    var scrollHeight = 10;\n\n    if (this.itemTemplate && args.target) {\n      if (args.target && args.target.closest('.e-list-item')) {\n        scrollHeight = args.target.closest('.e-list-item').scrollHeight;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var listItem = args.element.querySelector('.e-list-item');\n\n        if (listItem) {\n          scrollHeight = listItem.scrollHeight;\n        }\n      }\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    var event = args.event;\n    var wrapper;\n\n    if (args.target && (args.target.classList.contains('e-listbox-wrapper') || args.target.classList.contains('e-list-item') || args.target.classList.contains('e-filter-parent') || args.target.classList.contains('e-input-group') || args.target.closest('.e-list-item'))) {\n      if (args.target.classList.contains('e-list-item') || args.target.classList.contains('e-filter-parent') || args.target.classList.contains('e-input-group') || args.target.closest('.e-list-item')) {\n        wrapper = args.target.closest('.e-listbox-wrapper');\n      } else {\n        wrapper = args.target;\n      }\n\n      if (this.allowFiltering) {\n        scrollParent = wrapper.querySelector('.e-list-parent');\n      } else {\n        scrollParent = wrapper;\n      }\n\n      boundRect = scrollParent.getBoundingClientRect();\n\n      if (boundRect.y + scrollParent.offsetHeight - (event.pageY + scrollMoved) < 1) {\n        scrollParent.scrollTop = scrollParent.scrollTop + scrollHeight;\n      } else if (event.pageY - scrollMoved - boundRect.y < 1) {\n        scrollParent.scrollTop = scrollParent.scrollTop - scrollHeight;\n      }\n    }\n\n    if (args.target === null) {\n      return;\n    }\n\n    this.trigger('drag', this.getDragArgs(args));\n  };\n\n  ListBox.prototype.beforeDragEnd = function (args) {\n    this.dragValue = this.getFormattedValue(args.droppedElement.getAttribute('data-value'));\n\n    if (this.value.indexOf(this.dragValue) > -1) {\n      args.items = this.getDataByValues(this.value);\n    } else {\n      args.items = this.getDataByValues([this.dragValue]);\n    }\n\n    this.trigger('beforeDrop', args);\n  };\n\n  ListBox.prototype.dragEnd = function (args) {\n    var _this = this;\n\n    var listData;\n    var liColl;\n    var jsonData;\n    var droppedData;\n    var selectedOptions;\n    var sortedData;\n    var dropValue = this.getFormattedValue(args.droppedElement.getAttribute('data-value'));\n    var listObj = this.getComponent(args.droppedElement);\n    var getArgs = this.getDragArgs({\n      target: args.droppedElement\n    }, true);\n    var sourceArgs = {\n      previousData: this.dataSource\n    };\n    var destArgs = {\n      previousData: listObj.dataSource\n    };\n    var dragArgs = extend({}, getArgs, {\n      target: args.target,\n      source: {\n        previousData: this.dataSource\n      },\n      previousIndex: args.previousIndex,\n      currentIndex: args.currentIndex\n    });\n\n    if (listObj !== this) {\n      var sourceArgs1 = extend(sourceArgs, {\n        currentData: this.listData\n      });\n      dragArgs = extend(dragArgs, {\n        source: sourceArgs1,\n        destination: destArgs\n      });\n    }\n\n    if (Browser.isIos) {\n      this.list.style.overflow = '';\n    }\n\n    var targetListObj = this.getComponent(args.target);\n\n    if (targetListObj && targetListObj.listData.length === 0) {\n      var noRecElem = targetListObj.ulElement.childNodes[0];\n\n      if (noRecElem) {\n        targetListObj.ulElement.removeChild(noRecElem);\n      }\n    }\n\n    if (listObj === this) {\n      var ul_1 = this.ulElement;\n      listData = [].slice.call(this.listData);\n      liColl = [].slice.call(this.liCollections);\n      jsonData = [].slice.call(this.jsonData);\n      sortedData = [].slice.call(this.sortedData);\n      var toSortIdx_1 = args.currentIndex;\n      var toIdx_1 = args.currentIndex = this.getCurIdx(this, args.currentIndex);\n      var rIdx = listData.indexOf(this.getDataByValue(dropValue));\n      var jsonIdx = jsonData.indexOf(this.getDataByValue(dropValue));\n      var sIdx = sortedData.indexOf(this.getDataByValue(dropValue));\n      listData.splice(toIdx_1, 0, listData.splice(rIdx, 1)[0]);\n      sortedData.splice(toSortIdx_1, 0, sortedData.splice(sIdx, 1)[0]);\n      jsonData.splice(toIdx_1, 0, jsonData.splice(jsonIdx, 1)[0]);\n      liColl.splice(toIdx_1, 0, liColl.splice(rIdx, 1)[0]);\n\n      if (this.allowDragAll) {\n        selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 ? this.value : [dropValue];\n        selectedOptions.forEach(function (value) {\n          if (value !== dropValue) {\n            var idx = listData.indexOf(_this.getDataByValue(value));\n            var jsonIdx_1 = jsonData.indexOf(_this.getDataByValue(value));\n            var sIdx_1 = sortedData.indexOf(_this.getDataByValue(value));\n\n            if (idx > toIdx_1) {\n              toIdx_1++;\n            }\n\n            jsonData.splice(toIdx_1, 0, jsonData.splice(jsonIdx_1, 1)[0]);\n            listData.splice(toIdx_1, 0, listData.splice(idx, 1)[0]);\n            sortedData.splice(toSortIdx_1, 0, sortedData.splice(sIdx_1, 1)[0]);\n            liColl.splice(toIdx_1, 0, liColl.splice(idx, 1)[0]);\n            ul_1.insertBefore(_this.getItems()[_this.getIndexByValue(value)], ul_1.getElementsByClassName('e-placeholder')[0]);\n          }\n        });\n      }\n\n      this.listData = listData;\n      this.jsonData = jsonData;\n      this.sortedData = sortedData;\n      this.liCollections = liColl;\n    } else {\n      var li_1;\n      var fLiColl_1 = [].slice.call(this.liCollections);\n      var currIdx_1 = args.currentIndex = this.getCurIdx(listObj, args.currentIndex);\n      var ul_2 = listObj.ulElement;\n      listData = [].slice.call(listObj.listData);\n      liColl = [].slice.call(listObj.liCollections);\n      jsonData = [].slice.call(listObj.jsonData);\n      sortedData = [].slice.call(listObj.sortedData);\n      selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 && this.allowDragAll ? this.value : [dropValue];\n      var fListData_1 = [].slice.call(this.listData);\n      var fSortData_1 = [].slice.call(this.sortedData);\n      selectedOptions.forEach(function (value, index) {\n        droppedData = _this.getDataByValue(value);\n\n        var srcIdx = _this.listData.indexOf(droppedData);\n\n        var jsonSrcIdx = _this.jsonData.indexOf(droppedData);\n\n        var sortIdx = _this.sortedData.indexOf(droppedData);\n\n        fListData_1.splice(srcIdx, 1);\n\n        _this.jsonData.splice(jsonSrcIdx, 1);\n\n        fSortData_1.splice(sortIdx, 1);\n        _this.listData = fListData_1;\n        _this.sortedData = fSortData_1;\n        var destIdx = value === dropValue ? args.currentIndex : currIdx_1;\n        listData.splice(destIdx, 0, droppedData);\n        jsonData.splice(destIdx, 0, droppedData);\n        sortedData.splice(destIdx, 0, droppedData);\n        liColl.splice(destIdx, 0, fLiColl_1.splice(srcIdx, 1)[0]);\n\n        if (!value) {\n          var liCollElem_1 = _this.getItems();\n\n          for (var i = 0; i < liCollElem_1.length; i++) {\n            if (liCollElem_1[i].getAttribute('data-value') === null && liCollElem_1[i].classList.contains('e-list-item')) {\n              li_1 = liCollElem_1[i];\n              break;\n            }\n          }\n        } else {\n          li_1 = _this.getItems()[_this.getIndexByValue(value)];\n        }\n\n        if (!li_1) {\n          li_1 = args.helper;\n        }\n\n        _this.removeSelected(_this, value === dropValue ? [args.droppedElement] : [li_1]);\n\n        ul_2.insertBefore(li_1, ul_2.getElementsByClassName('e-placeholder')[0]);\n        currIdx_1++;\n      });\n\n      if (this.fields.groupBy) {\n        var sourceElem = this.renderItems(this.listData, this.fields);\n        this.updateListItems(sourceElem, this.ulElement);\n        this.setSelection();\n      }\n\n      if (listObj.sortOrder !== 'None' || this.selectionSettings.showCheckbox !== listObj.selectionSettings.showCheckbox || listObj.fields.groupBy || listObj.itemTemplate || this.itemTemplate) {\n        var sortable = getComponent(ul_2, 'sortable');\n        var sourceElem = listObj.renderItems(listData, listObj.fields);\n        listObj.updateListItems(sourceElem, ul_2);\n        this.setSelection();\n\n        if (sortable.placeHolderElement) {\n          ul_2.appendChild(sortable.placeHolderElement);\n        }\n\n        ul_2.appendChild(args.helper);\n        listObj.setSelection();\n      }\n\n      this.liCollections = fLiColl_1;\n      listObj.liCollections = liColl;\n      listObj.jsonData = extend([], [], jsonData, false);\n      listObj.listData = extend([], [], listData, false);\n      listObj.sortedData = extend([], [], sortedData, false);\n\n      if (this.listData.length === 0) {\n        this.l10nUpdate();\n      }\n    }\n\n    if (this === listObj) {\n      var sourceArgs1 = extend(sourceArgs, {\n        currentData: listData\n      });\n      dragArgs = extend(dragArgs, {\n        source: sourceArgs1\n      });\n    } else {\n      var dragArgs1 = extend(destArgs, {\n        currentData: listData\n      });\n      dragArgs = extend(dragArgs, {\n        destination: dragArgs1\n      });\n    }\n\n    this.trigger('drop', dragArgs); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var liCollElem = dragArgs.elements;\n\n    if (liCollElem.length) {\n      for (var i = 0; i < liCollElem.length; i++) {\n        liCollElem[i].classList.remove('e-grabbed');\n      }\n    }\n  };\n\n  ListBox.prototype.updateListItems = function (sourceElem, destElem) {\n    var i = 0;\n    destElem.innerHTML = '';\n\n    while (i < sourceElem.childNodes.length) {\n      destElem.appendChild(sourceElem.childNodes[i]);\n    }\n  };\n\n  ListBox.prototype.removeSelected = function (listObj, elems) {\n    if (listObj.selectionSettings.showCheckbox) {\n      elems.forEach(function (ele) {\n        ele.getElementsByClassName('e-frame')[0].classList.remove('e-check');\n      });\n    } else {\n      removeClass(elems, cssClass.selected);\n    }\n  };\n\n  ListBox.prototype.getCurIdx = function (listObj, idx) {\n    if (listObj.fields.groupBy) {\n      idx -= [].slice.call(listObj.ulElement.children).slice(0, idx).filter(function (ele) {\n        return ele.classList.contains(cssClass.group);\n      }).length;\n    }\n\n    return idx;\n  };\n\n  ListBox.prototype.getComponent = function (li) {\n    var listObj;\n    var ele = this.element.tagName === 'EJS-LISTBOX' ? closest(li, '.e-listbox') : closest(li, '.e-listbox-wrapper') && closest(li, '.e-listbox-wrapper').querySelector('.e-listbox');\n\n    if (ele) {\n      listObj = getComponent(ele, this.getModuleName());\n    }\n\n    return listObj;\n  };\n  /**\n   * Sets the enabled state to DropDownBase.\n   *\n   * @returns {void}\n   */\n\n\n  ListBox.prototype.setEnabled = function () {\n    this.element.setAttribute('aria-disabled', this.enabled ? 'false' : 'true');\n  };\n\n  ListBox.prototype.listOption = function (dataSource, fields) {\n    this.listCurrentOptions = _super.prototype.listOption.call(this, dataSource, fields);\n    this.listCurrentOptions = extend({}, this.listCurrentOptions, {\n      itemCreated: this.triggerBeforeItemRender.bind(this)\n    }, true);\n    this.notify('listoption', {\n      module: 'CheckBoxSelection'\n    });\n    return this.listCurrentOptions;\n  };\n\n  ListBox.prototype.triggerBeforeItemRender = function (e) {\n    e.item.setAttribute('tabindex', '-1');\n    this.trigger('beforeItemRender', {\n      element: e.item,\n      item: e.curData\n    });\n  };\n\n  ListBox.prototype.requiredModules = function () {\n    var modules = [];\n\n    if (this.selectionSettings.showCheckbox) {\n      modules.push({\n        member: 'CheckBoxSelection',\n        args: [this]\n      });\n    }\n\n    return modules;\n  };\n  /**\n   * This method is used to enable or disable the items in the ListBox based on the items and enable argument.\n   *\n   * @param {string[]} items - Text items that needs to be enabled/disabled.\n   * @param {boolean} enable - Set `true`/`false` to enable/disable the list items.\n   * @param {boolean} isValue - Set `true` if `items` parameter is a array of unique values.\n   * @returns {void}\n   */\n\n\n  ListBox.prototype.enableItems = function (items, enable, isValue) {\n    var _this = this;\n\n    if (enable === void 0) {\n      enable = true;\n    }\n\n    var li;\n    items.forEach(function (item) {\n      var text = item;\n      li = _this.findListElement(_this.list, 'li', 'data-value', isValue ? text : _this.getValueByText(text));\n\n      if (!li) {\n        return;\n      }\n\n      if (enable) {\n        removeClass([li], cssClass.disabled);\n        li.removeAttribute('aria-disabled');\n      } else {\n        addClass([li], cssClass.disabled);\n        li.setAttribute('aria-disabled', 'true');\n      }\n    });\n  };\n  /**\n   * Based on the state parameter, specified list item will be selected/deselected.\n   *\n   * @param {string[]} items - Array of text value of the item.\n   * @param {boolean} state - Set `true`/`false` to select/un select the list items.\n   * @param {boolean} isValue - Set `true` if `items` parameter is a array of unique values.\n   * @returns {void}\n   */\n\n\n  ListBox.prototype.selectItems = function (items, state, isValue) {\n    if (state === void 0) {\n      state = true;\n    }\n\n    this.setSelection(items, state, !isValue);\n    this.updateSelectedOptions();\n  };\n  /**\n   * Based on the state parameter, entire list item will be selected/deselected.\n   *\n   * @param {boolean} state - Set `true`/`false` to select/un select the entire list items.\n   * @returns {void}\n   */\n\n\n  ListBox.prototype.selectAll = function (state) {\n    if (state === void 0) {\n      state = true;\n    }\n\n    this.selectAllItems(state);\n  };\n  /**\n   * Adds a new item to the list. By default, new item appends to the list as the last item,\n   * but you can insert based on the index parameter.\n   *\n   * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n   * @param { number } itemIndex - Specifies the index to place the newly added item in the list.\n   * @returns {void}.\n   */\n\n\n  ListBox.prototype.addItems = function (items, itemIndex) {\n    _super.prototype.addItem.call(this, items, itemIndex);\n  };\n  /**\n   * Removes a item from the list. By default, removed the last item in the list,\n   * but you can remove based on the index parameter.\n   *\n   * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n   * @param { number } itemIndex - Specifies the index to remove the item from the list.\n   * @returns {void}.\n   */\n\n\n  ListBox.prototype.removeItems = function (items, itemIndex) {\n    this.removeItem(items, itemIndex);\n  };\n  /**\n   * Removes a item from the list. By default, removed the last item in the list,\n   * but you can remove based on the index parameter.\n   *\n   * @param  { Object[] } items - Specifies an array of JSON data or a JSON data.\n   * @param { number } itemIndex - Specifies the index to remove the item from the list.\n   * @returns {void}.\n   */\n\n\n  ListBox.prototype.removeItem = function (items, itemIndex) {\n    var liCollections = [];\n    var liElement = this.list.querySelectorAll('.' + dropDownBaseClasses.li);\n\n    if (items) {\n      items = items instanceof Array ? items : [items];\n      var fields = this.fields;\n      var dataValue = void 0;\n      var objValue = void 0;\n      var dupData = [];\n      var itemIdx = void 0;\n      extend(dupData, [], this.jsonData);\n      var removeIdxes = [];\n      var removeLiIdxes = [];\n\n      for (var j = 0; j < items.length; j++) {\n        if (items[j] instanceof Object) {\n          dataValue = getValue(fields.value, items[j]);\n        } else {\n          dataValue = items[j].toString();\n        }\n\n        for (var i = 0, len = dupData.length; i < len; i++) {\n          if (dupData[i] instanceof Object) {\n            objValue = getValue(fields.value, dupData[i]);\n          } else {\n            objValue = dupData[i].toString();\n          }\n\n          if (objValue === dataValue) {\n            itemIdx = this.getIndexByValue(dataValue);\n            var idx = itemIdx === i ? itemIdx : i;\n            liCollections.push(liElement[idx]);\n            removeIdxes.push(idx);\n            removeLiIdxes.push(idx);\n          }\n        }\n      }\n\n      for (var k = removeIdxes.length - 1; k >= 0; k--) {\n        this.listData.splice(removeIdxes[k], 1);\n      }\n\n      for (var k = removeIdxes.length - 1; k >= 0; k--) {\n        this.jsonData.splice(removeIdxes[k], 1);\n      }\n\n      for (var k = removeLiIdxes.length - 1; k >= 0; k--) {\n        this.updateLiCollection(removeLiIdxes[k]);\n      }\n    } else {\n      itemIndex = itemIndex ? itemIndex : 0;\n      liCollections.push(liElement[itemIndex]);\n      this.listData.splice(itemIndex, 1);\n      this.jsonData.splice(itemIndex, 1);\n      this.updateLiCollection(itemIndex);\n    }\n\n    for (var i = 0; i < liCollections.length; i++) {\n      this.ulElement.removeChild(liCollections[i]);\n    }\n\n    if (this.listData.length === 0) {\n      this.l10nUpdate();\n    }\n\n    this.value = [];\n    this.updateToolBarState();\n  };\n  /**\n   * Gets the array of data Object that matches the given array of values.\n   *\n   * @param  { string[] | number[] | boolean[] } value - Specifies the array value of the list item.\n   * @returns {object[]}.\n   */\n\n\n  ListBox.prototype.getDataByValues = function (value) {\n    var data = [];\n\n    for (var i = 0; i < value.length; i++) {\n      data.push(this.getDataByValue(value[i]));\n    }\n\n    return data;\n  };\n  /**\n   * Moves the given value(s) / selected value(s) upwards.\n   *\n   * @param  { string[] | number[] | boolean[] } value - Specifies the value(s).\n   * @returns {void}\n   */\n\n\n  ListBox.prototype.moveUp = function (value) {\n    var elem = value ? this.getElemByValue(value) : this.getSelectedItems();\n    this.moveUpDown(true, false, elem);\n  };\n  /**\n   * Moves the given value(s) / selected value(s) downwards.\n   *\n   * @param  { string[] | number[] | boolean[] } value - Specifies the value(s).\n   * @returns {void}\n   */\n\n\n  ListBox.prototype.moveDown = function (value) {\n    var elem = value ? this.getElemByValue(value) : this.getSelectedItems();\n    this.moveUpDown(false, false, elem);\n  };\n  /**\n   * Moves the given value(s) / selected value(s) to the given / default scoped ListBox.\n   *\n   * @param  { string[] | number[] | boolean[] } value - Specifies the value or array value of the list item.\n   * @param {number} index - Specifies the index.\n   * @param {string} targetId - Specifies the target id.\n   * @returns {void}\n   */\n\n\n  ListBox.prototype.moveTo = function (value, index, targetId) {\n    var elem = value ? this.getElemByValue(value) : this.getSelectedItems();\n    var tlistbox = targetId ? getComponent(targetId, ListBox_1) : this.getScopedListBox();\n    this.moveData(this, tlistbox, false, elem, index);\n  };\n  /**\n   * Moves all the values from one ListBox to the scoped ListBox.\n   *\n   * @param  { string } targetId - Specifies the scoped ListBox ID.\n   * @param  { string } index - Specifies the index to where the items moved.\n   * @returns {void}\n   */\n\n\n  ListBox.prototype.moveAllTo = function (targetId, index) {\n    if (this.listData.length > 0) {\n      var tlistbox = targetId ? getComponent(targetId, ListBox_1) : this.getScopedListBox();\n      this.moveAllData(this, tlistbox, false, index);\n    }\n  };\n  /* eslint-disable */\n\n  /**\n   * Gets the updated dataSource in ListBox.\n   *\n   * @returns {{ [key: string]: Object }[] | string[] | boolean[] | number[]} - Updated DataSource.\n   */\n\n  /* eslint-enable */\n\n\n  ListBox.prototype.getDataList = function () {\n    return this.jsonData;\n  };\n  /* eslint-disable */\n\n  /**\n   * Returns the sorted Data in ListBox.\n   *\n   * @returns {{ [key: string]: Object }[] | string[] | boolean[] | number[]} - Sorted data\n   */\n\n  /* eslint-enable */\n\n\n  ListBox.prototype.getSortedList = function () {\n    var sortData;\n    var tempData;\n    sortData = tempData = this.sortedData;\n\n    if (this.fields.groupBy) {\n      sortData = [];\n\n      for (var i = 0; i < tempData.length; i++) {\n        if (tempData[i].isHeader) {\n          continue;\n        }\n\n        sortData.push(tempData[i]);\n      }\n    }\n\n    return sortData;\n  };\n\n  ListBox.prototype.getElemByValue = function (value) {\n    var elem = [];\n\n    for (var i = 0; i < value.length; i++) {\n      elem.push(this.ulElement.querySelector('[data-value =\"' + value[i] + '\"]'));\n    }\n\n    return elem;\n  };\n\n  ListBox.prototype.updateLiCollection = function (index) {\n    var tempLi = [].slice.call(this.liCollections);\n    tempLi.splice(index, 1);\n    this.liCollections = tempLi;\n  };\n\n  ListBox.prototype.selectAllItems = function (state, event) {\n    var _this = this;\n\n    [].slice.call(this.getItems()).forEach(function (li) {\n      if (!li.classList.contains(cssClass.disabled)) {\n        if (_this.selectionSettings.showCheckbox) {\n          var ele = li.getElementsByClassName('e-check')[0];\n\n          if (!ele && state || ele && !state) {\n            _this.notify('updatelist', {\n              li: li,\n              module: 'listbox'\n            });\n\n            if (_this.maximumSelectionLength >= _this.list.querySelectorAll('.e-list-item span.e-check').length) {\n              _this.checkMaxSelection();\n            }\n          }\n        } else {\n          if (state) {\n            li.classList.add(cssClass.selected);\n          } else {\n            li.classList.remove(cssClass.selected);\n          }\n        }\n      }\n    });\n    this.updateSelectedOptions();\n\n    if (this.allowFiltering && this.selectionSettings.showCheckbox) {\n      var liEle = this.list.getElementsByTagName('li');\n      var index = 0;\n\n      if (state) {\n        var _loop_1 = function () {\n          var dataValue1 = this_1.getFormattedValue(liEle[index].getAttribute('data-value'));\n\n          if (!this_1.value.some(function (e) {\n            return e === dataValue1;\n          })) {\n            this_1.value.push(this_1.getFormattedValue(liEle[index].getAttribute('data-value')));\n          }\n        };\n\n        var this_1 = this;\n\n        for (index = 0; index < liEle.length; index++) {\n          _loop_1();\n        }\n      } else {\n        var _loop_2 = function () {\n          var dataValue2 = this_2.getFormattedValue(liEle[index].getAttribute('data-value'));\n          this_2.value = this_2.value.filter(function (e) {\n            return e !== dataValue2;\n          });\n        };\n\n        var this_2 = this;\n\n        for (index = 0; index < liEle.length; index++) {\n          _loop_2();\n        }\n      }\n\n      if (document.querySelectorAll('ul').length < 2) {\n        this.updateMainList();\n      }\n    }\n\n    this.triggerChange(this.getSelectedItems(), event);\n  };\n\n  ListBox.prototype.updateMainList = function () {\n    var mainList = this.mainList.querySelectorAll('.e-list-item');\n    var ulList = this.ulElement.querySelectorAll('.e-list-item');\n    var mainCount = mainList.length;\n    var ulEleCount = ulList.length;\n\n    if (this.selectionSettings.showCheckbox || document.querySelectorAll('ul').length > 1 || mainCount !== ulEleCount) {\n      var listindex = 0;\n      var valueindex = 0;\n      var count = 0;\n\n      for (listindex; listindex < mainCount;) {\n        if (this.value) {\n          for (valueindex; valueindex < this.value.length; valueindex++) {\n            if (mainList[listindex].getAttribute('data-value') === this.value[valueindex]) {\n              count++;\n            }\n          }\n        }\n\n        if (!count && this.selectionSettings.showCheckbox) {\n          mainList[listindex].getElementsByClassName('e-frame')[0].classList.remove('e-check');\n        }\n\n        if (document.querySelectorAll('ul').length > 1 && count && mainCount !== ulEleCount) {\n          this.mainList.removeChild(this.mainList.getElementsByTagName('li')[listindex]);\n          listindex = 0;\n        } else {\n          listindex++;\n        }\n\n        count = 0;\n        valueindex = 0;\n      }\n    }\n  };\n\n  ListBox.prototype.wireEvents = function () {\n    var form = closest(this.element, 'form');\n    var wrapper = this.element.tagName === 'EJS-LISTBOX' ? this.element : this.list;\n    EventHandler.add(this.list, 'click', this.clickHandler, this);\n    EventHandler.add(wrapper, 'keydown', this.keyDownHandler, this);\n    EventHandler.add(wrapper, 'focusout', this.focusOutHandler, this);\n    this.wireToolbarEvent();\n\n    if (this.selectionSettings.showCheckbox) {\n      EventHandler.remove(document, 'mousedown', this.checkBoxSelectionModule.onDocumentClick);\n    }\n\n    if (this.fields.groupBy || this.element.querySelector('select>optgroup')) {\n      EventHandler.remove(this.list, 'scroll', this.setFloatingHeader);\n    }\n\n    if (form) {\n      EventHandler.add(form, 'reset', this.formResetHandler, this);\n    }\n  };\n\n  ListBox.prototype.wireToolbarEvent = function () {\n    if (this.toolbarSettings.items.length) {\n      EventHandler.add(this.getToolElem(), 'click', this.toolbarClickHandler, this);\n    }\n  };\n\n  ListBox.prototype.unwireEvents = function () {\n    var form = closest(this.element, 'form');\n    var wrapper = this.element.tagName === 'EJS-LISTBOX' ? this.element : this.list;\n    EventHandler.remove(this.list, 'click', this.clickHandler);\n    EventHandler.remove(wrapper, 'keydown', this.keyDownHandler);\n    EventHandler.remove(wrapper, 'focusout', this.focusOutHandler);\n\n    if (this.allowFiltering && this.clearFilterIconElem) {\n      EventHandler.remove(this.clearFilterIconElem, 'click', this.clearText);\n    }\n\n    if (this.toolbarSettings.items.length) {\n      EventHandler.remove(this.getToolElem(), 'click', this.toolbarClickHandler);\n    }\n\n    if (form) {\n      EventHandler.remove(form, 'reset', this.formResetHandler);\n    }\n  };\n\n  ListBox.prototype.clickHandler = function (e) {\n    this.selectHandler(e);\n  };\n\n  ListBox.prototype.checkSelectAll = function () {\n    var searchCount = 0;\n    var liItems = this.list.querySelectorAll('li.' + dropDownBaseClasses.li);\n\n    for (var i = 0; i < liItems.length; i++) {\n      if (!liItems[i].classList.contains('e-disabled')) {\n        searchCount++;\n      }\n    }\n\n    var len = this.getSelectedItems().length;\n\n    if (this.showSelectAll && searchCount) {\n      this.notify('checkSelectAll', {\n        module: 'CheckBoxSelection',\n        value: searchCount === len ? 'check' : len === 0 ? 'uncheck' : 'indeterminate'\n      });\n    }\n  };\n\n  ListBox.prototype.getQuery = function (query) {\n    var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n\n    if (this.allowFiltering) {\n      var filterType = this.inputString === '' ? 'contains' : this.filterType;\n      var dataType = this.typeOfData(this.dataSource).typeof;\n\n      if (dataType === null) {\n        dataType = this.typeOfData(this.jsonData).typeof;\n      }\n\n      if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n        filterQuery.where('', filterType, this.inputString, this.ignoreCase, this.ignoreAccent);\n      } else {\n        var fields = this.fields.text ? this.fields.text : '';\n        filterQuery.where(fields, filterType, this.inputString, this.ignoreCase, this.ignoreAccent);\n      }\n    } else {\n      filterQuery = query ? query : this.query ? this.query : new Query();\n    }\n\n    return filterQuery;\n  };\n\n  ListBox.prototype.setFiltering = function () {\n    var filterInputObj;\n\n    if (this.initLoad || isNullOrUndefined(this.filterParent)) {\n      this.filterParent = this.createElement('span', {\n        className: listBoxClasses.filterParent\n      });\n      this.filterInput = this.createElement('input', {\n        attrs: {\n          type: 'text'\n        },\n        className: listBoxClasses.filterInput\n      });\n      this.element.parentNode.insertBefore(this.filterInput, this.element);\n      filterInputObj = Input.createInput({\n        element: this.filterInput,\n        buttons: [listBoxClasses.filterBarClearIcon],\n        properties: {\n          placeholder: this.filterBarPlaceholder\n        }\n      }, this.createElement);\n      append([filterInputObj.container], this.filterParent);\n      prepend([this.filterParent], this.list);\n      attributes(this.filterInput, {\n        'aria-disabled': 'false',\n        'aria-label': 'search list item',\n        'autocomplete': 'off',\n        'autocorrect': 'off',\n        'autocapitalize': 'off',\n        'spellcheck': 'false'\n      });\n\n      if (this.height.toString().indexOf('%') < 0) {\n        addClass([this.list], 'e-filter-list');\n      }\n\n      this.inputString = this.filterInput.value;\n      this.filterWireEvents();\n      return filterInputObj;\n    }\n  };\n\n  ListBox.prototype.filterWireEvents = function (filterElem) {\n    if (filterElem) {\n      this.filterInput = filterElem.querySelector('.e-input-filter');\n    }\n\n    this.clearFilterIconElem = this.filterInput.parentElement.querySelector('.' + listBoxClasses.clearIcon);\n\n    if (this.clearFilterIconElem) {\n      EventHandler.add(this.clearFilterIconElem, 'click', this.clearText, this);\n\n      if (!filterElem) {\n        this.clearFilterIconElem.style.visibility = 'hidden';\n      }\n    }\n\n    EventHandler.add(this.filterInput, 'input', this.onInput, this);\n    EventHandler.add(this.filterInput, 'keyup', this.KeyUp, this);\n    EventHandler.add(this.filterInput, 'keydown', this.onKeyDown, this);\n  };\n\n  ListBox.prototype.selectHandler = function (e, isKey) {\n    var isSelect = true;\n    var currSelIdx;\n    var li = closest(e.target, '.' + 'e-list-item');\n    var selectedLi = [li];\n\n    if (li && li.parentElement) {\n      currSelIdx = [].slice.call(li.parentElement.children).indexOf(li);\n\n      if (!this.selectionSettings.showCheckbox) {\n        if ((e.ctrlKey || e.metaKey || Browser.isDevice) && this.isSelected(li)) {\n          li.classList.remove(cssClass.selected);\n          li.removeAttribute('aria-selected');\n          isSelect = false;\n        } else if (!(this.selectionSettings.mode === 'Multiple' && (e.ctrlKey || e.metaKey || Browser.isDevice))) {\n          this.getSelectedItems().forEach(function (ele) {\n            ele.removeAttribute('aria-selected');\n          });\n          removeClass(this.getSelectedItems(), cssClass.selected);\n        }\n      } else {\n        isSelect = !li.getElementsByClassName('e-frame')[0].classList.contains('e-check');\n      }\n\n      if (e.shiftKey && !this.selectionSettings.showCheckbox && this.selectionSettings.mode !== 'Single') {\n        selectedLi = [].slice.call(li.parentElement.children).slice(Math.min(currSelIdx, this.prevSelIdx), Math.max(currSelIdx, this.prevSelIdx) + 1).filter(function (ele) {\n          return ele.classList.contains('e-list-item');\n        });\n      } else {\n        this.prevSelIdx = [].slice.call(li.parentElement.children).indexOf(li);\n      }\n\n      if (isSelect) {\n        if (!this.selectionSettings.showCheckbox) {\n          addClass(selectedLi, cssClass.selected);\n        }\n\n        selectedLi.forEach(function (ele) {\n          ele.setAttribute('aria-selected', 'true');\n        });\n        this.list.setAttribute('aria-activedescendant', li.id);\n      } else {\n        selectedLi.forEach(function (ele) {\n          ele.setAttribute('aria-selected', 'false');\n        });\n      }\n\n      if (!isKey && (this.maximumSelectionLength > (this.value && this.value.length) || !isSelect) && (this.maximumSelectionLength >= (this.value && this.value.length) || !isSelect) && !(this.maximumSelectionLength < (this.value && this.value.length))) {\n        this.notify('updatelist', {\n          li: li,\n          e: e,\n          module: 'listbox'\n        });\n      }\n\n      if (this.allowFiltering && !isKey) {\n        var liDataValue_1 = this.getFormattedValue(li.getAttribute('data-value'));\n\n        if (!isSelect) {\n          this.value = this.value.filter(function (value1) {\n            return value1 !== liDataValue_1;\n          });\n        } else {\n          var values = [];\n          extend(values, this.value);\n          values.push(liDataValue_1);\n          this.value = values;\n        }\n\n        if (document.querySelectorAll('ul').length < 2) {\n          this.updateMainList();\n        }\n      }\n\n      this.updateSelectedOptions();\n      this.triggerChange(this.getSelectedItems(), e);\n\n      if (this.list) {\n        this.checkMaxSelection();\n      }\n    }\n  };\n\n  ListBox.prototype.triggerChange = function (selectedLis, event) {\n    this.trigger('change', {\n      elements: selectedLis,\n      items: this.getDataByElements(selectedLis),\n      value: this.value,\n      event: event\n    });\n  };\n\n  ListBox.prototype.getDataByElems = function (elems) {\n    var data = [];\n\n    for (var i = 0, len = elems.length; i < len; i++) {\n      data.push(this.getDataByValue(this.getFormattedValue(elems[i].getAttribute('data-value'))));\n    }\n\n    return data;\n  };\n\n  ListBox.prototype.getDataByElements = function (elems) {\n    var data = [];\n    var value;\n    var sIdx = 0;\n\n    if (!isNullOrUndefined(this.listData)) {\n      var type = this.typeOfData(this.listData).typeof;\n\n      if (type === 'string' || type === 'number' || type === 'boolean') {\n        for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {\n          var item = _a[_i];\n\n          for (var i = sIdx, len = elems.length; i < len; i++) {\n            value = this.getFormattedValue(elems[i].getAttribute('data-value'));\n\n            if (!isNullOrUndefined(item) && item === value) {\n              sIdx = i;\n              data.push(item);\n              break;\n            }\n          }\n\n          if (elems.length === data.length) {\n            break;\n          }\n        }\n      } else {\n        for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {\n          var item = _c[_b];\n\n          for (var i = sIdx, len = elems.length; i < len; i++) {\n            value = this.getFormattedValue(elems[i].getAttribute('data-value'));\n\n            if (!isNullOrUndefined(item) && getValue(this.fields.value ? this.fields.value : 'value', item) === value) {\n              sIdx = i;\n              data.push(item);\n              break;\n            }\n          }\n\n          if (elems.length === data.length) {\n            break;\n          }\n        }\n      }\n\n      return data;\n    }\n\n    return null;\n  };\n\n  ListBox.prototype.checkMaxSelection = function () {\n    var limit = this.list.querySelectorAll('.e-list-item span.e-check').length;\n\n    if (this.selectionSettings.showCheckbox) {\n      var index = 0;\n      var liCollElem = this.list.getElementsByClassName('e-list-item');\n\n      for (index; index < liCollElem.length; index++) {\n        if (!liCollElem[index].querySelector('.e-frame.e-check')) {\n          if (limit === this.maximumSelectionLength) {\n            liCollElem[index].classList.add('e-disable');\n          } else if (liCollElem[index].classList.contains('e-disable')) {\n            liCollElem[index].classList.remove('e-disable');\n          }\n        }\n      }\n    }\n  };\n\n  ListBox.prototype.toolbarClickHandler = function (e) {\n    var btn = closest(e.target, 'button');\n\n    if (btn) {\n      this.toolbarAction = btn.getAttribute('data-value');\n\n      if (btn.disabled) {\n        return;\n      }\n\n      switch (this.toolbarAction) {\n        case 'moveUp':\n          this.moveUpDown(true);\n          break;\n\n        case 'moveDown':\n          this.moveUpDown();\n          break;\n\n        case 'moveTo':\n          this.moveItemTo();\n          break;\n\n        case 'moveFrom':\n          this.moveItemFrom();\n          break;\n\n        case 'moveAllTo':\n          this.moveAllItemTo();\n          break;\n\n        case 'moveAllFrom':\n          this.moveAllItemFrom();\n          break;\n\n        default:\n          this.trigger('actionBegin', {\n            cancel: false,\n            items: this.getDataByElems(this.getSelectedItems()),\n            eventName: this.toolbarAction\n          });\n          break;\n      }\n    }\n  };\n\n  ListBox.prototype.moveUpDown = function (isUp, isKey, value) {\n    var _this = this;\n\n    var elems = this.getSelectedItems();\n\n    if (value) {\n      elems = value;\n    }\n\n    if ((isUp && this.isSelected(this.ulElement.firstElementChild) || !isUp && this.isSelected(this.ulElement.lastElementChild)) && !value) {\n      return;\n    }\n\n    var tempItems = this.getDataByElems(elems);\n    var localDataArgs = {\n      cancel: false,\n      items: tempItems,\n      eventName: this.toolbarAction\n    };\n    this.trigger('actionBegin', localDataArgs);\n\n    if (localDataArgs.cancel) {\n      return;\n    }\n\n    (isUp ? elems : elems.reverse()).forEach(function (ele) {\n      var jsonToIdx = Array.prototype.indexOf.call(_this.ulElement.querySelectorAll('.e-list-item'), ele);\n      var idx = Array.prototype.indexOf.call(_this.ulElement.children, ele);\n      moveTo(_this.ulElement, _this.ulElement, [idx], isUp ? idx - 1 : idx + 2);\n\n      _this.changeData(idx, isUp ? idx - 1 : idx + 1, isUp ? jsonToIdx - 1 : jsonToIdx + 1, ele);\n    });\n    this.trigger('actionComplete', {\n      items: tempItems,\n      eventName: this.toolbarAction\n    });\n    elems[0].focus();\n\n    if (!isKey && this.toolbarSettings.items.length) {\n      this.getToolElem().querySelector('[data-value=' + (isUp ? 'moveUp' : 'moveDown') + ']').focus();\n    }\n\n    this.updateToolBarState();\n  };\n\n  ListBox.prototype.moveItemTo = function () {\n    this.moveData(this, this.getScopedListBox());\n  };\n\n  ListBox.prototype.moveItemFrom = function () {\n    this.moveData(this.getScopedListBox(), this);\n  };\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param {ListBox} fListBox - Specifies the from listbox.\n   * @param {ListBox} tListBox - Specifies the to listbox.\n   * @param {boolean} isKey - Specifies the key.\n   * @param {Element[]} value - Specifies the value.\n   * @param {number} index - Specifies the index.\n   * @returns {void}\n   * @private\n   */\n\n\n  ListBox.prototype.moveData = function (fListBox, tListBox, isKey, value, index) {\n    var idx = [];\n    var dataIdx = [];\n    var jsonIdx = [];\n    var sortIdx = [];\n    var listData = [].slice.call(fListBox.listData);\n    var tListData = [].slice.call(tListBox.listData);\n    var sortData = [].slice.call(fListBox.sortedData);\n    var tSortData = [].slice.call(tListBox.sortedData);\n    var fliCollections = [].slice.call(fListBox.liCollections);\n    var dataLiIdx = [];\n    var tliCollections = [].slice.call(tListBox.liCollections);\n    var tempItems = [];\n    var data = [];\n    var elems = fListBox.getSelectedItems();\n\n    if (value) {\n      elems = value;\n    }\n\n    var isRefresh = tListBox.sortOrder !== 'None' || tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox || tListBox.fields.groupBy || tListBox.itemTemplate || fListBox.itemTemplate;\n    fListBox.value = [];\n\n    if (elems.length) {\n      this.removeSelected(fListBox, elems);\n      elems.forEach(function (ele) {\n        idx.push(Array.prototype.indexOf.call(fListBox.ulElement.children, ele)); // update sortable elem\n        // To update lb view data\n\n        dataLiIdx.push(Array.prototype.indexOf.call(fListBox.ulElement.querySelectorAll('.e-list-item'), ele)); // To update lb listdata data\n\n        dataIdx.push(Array.prototype.indexOf.call(fListBox.listData, fListBox.getDataByElems([ele])[0])); // To update lb sorted data\n\n        sortIdx.push(Array.prototype.indexOf.call(fListBox.sortedData, fListBox.getDataByElems([ele])[0])); // To update lb original data\n\n        jsonIdx.push(Array.prototype.indexOf.call(fListBox.jsonData, fListBox.getDataByElems([ele])[0]));\n      });\n\n      if (this.sortOrder !== 'None') {\n        sortIdx.forEach(function (i) {\n          tempItems.push(fListBox.sortedData[i]);\n        });\n      } else {\n        jsonIdx.forEach(function (i) {\n          tempItems.push(fListBox.jsonData[i]);\n        });\n      }\n\n      var localDataArgs = {\n        cancel: false,\n        items: tempItems,\n        eventName: this.toolbarAction\n      };\n      fListBox.trigger('actionBegin', localDataArgs);\n\n      if (localDataArgs.cancel) {\n        return;\n      }\n\n      var rLiCollection_1 = [];\n      dataLiIdx.sort(function (n1, n2) {\n        return n1 - n2;\n      }).reverse().forEach(function (i) {\n        rLiCollection_1.push(fliCollections.splice(i, 1)[0]);\n      });\n      fListBox.liCollections = fliCollections;\n\n      if (index) {\n        var toColl = tliCollections.splice(0, index);\n        tListBox.liCollections = toColl.concat(rLiCollection_1.reverse()).concat(tliCollections);\n      } else {\n        tListBox.liCollections = tliCollections.concat(rLiCollection_1.reverse());\n      }\n\n      if (tListBox.listData.length === 0) {\n        var noRecElem = tListBox.ulElement.childNodes[0];\n\n        if (noRecElem) {\n          tListBox.ulElement.removeChild(noRecElem);\n        }\n      }\n\n      dataIdx.sort(function (n1, n2) {\n        return n2 - n1;\n      }).forEach(function (i) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        listData.splice(i, 1)[0];\n      });\n      sortIdx.sort(function (n1, n2) {\n        return n2 - n1;\n      }).forEach(function (i) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        sortData.splice(i, 1)[0];\n      });\n      jsonIdx.slice().reverse().forEach(function (i) {\n        data.push(fListBox.jsonData.splice(i, 1)[0]);\n      });\n\n      if (isRefresh) {\n        if (fListBox.fields.groupBy) {\n          var sourceElem = fListBox.renderItems(listData, fListBox.fields);\n          fListBox.updateListItems(sourceElem, fListBox.ulElement);\n        } else {\n          elems.forEach(function (ele) {\n            detach(ele);\n          });\n        }\n      } else {\n        moveTo(fListBox.ulElement, tListBox.ulElement, idx, index);\n        fListBox.trigger('actionComplete', {\n          items: tempItems,\n          eventName: this.toolbarAction\n        });\n      }\n\n      if (tListBox.mainList.childElementCount !== tListBox.jsonData.length) {\n        tListBox.mainList = tListBox.ulElement;\n      }\n\n      fListBox.updateMainList();\n      var tJsonData = [].slice.call(tListBox.jsonData);\n      tSortData = [].slice.call(tListBox.sortedData);\n      this.selectNextList(elems, dataLiIdx, dataIdx, fListBox);\n\n      if (isKey) {\n        this.list.focus();\n      }\n\n      fListBox.listData = listData;\n      fListBox.sortedData = sortData;\n      index = index ? index : tListData.length;\n\n      for (var i = tempItems.length - 1; i >= 0; i--) {\n        tListData.splice(index, 0, tempItems[i]);\n        tJsonData.splice(index, 0, tempItems[i]);\n        tSortData.splice(index, 0, tempItems[i]);\n      }\n\n      tListBox.listData = tListData;\n      tListBox.jsonData = tJsonData;\n      tListBox.sortedData = tSortData;\n\n      if (isRefresh) {\n        var sourceElem = tListBox.renderItems(tListData, tListBox.fields);\n        tListBox.updateListItems(sourceElem, tListBox.ulElement);\n        tListBox.setSelection();\n        fListBox.trigger('actionComplete', {\n          items: tempItems,\n          eventName: this.toolbarAction\n        });\n      }\n\n      fListBox.updateSelectedOptions();\n\n      if (fListBox.listData.length === 0) {\n        fListBox.l10nUpdate();\n      }\n    }\n\n    if (fListBox.value.length === 1 && fListBox.getSelectedItems().length) {\n      fListBox.value[0] = fListBox.getFormattedValue(fListBox.getSelectedItems()[0].getAttribute('data-value'));\n    }\n  };\n\n  ListBox.prototype.selectNextList = function (elems, dataLiIdx, dataIdx, inst) {\n    var childCnt = inst.ulElement.querySelectorAll('.e-list-item').length;\n    var ele;\n    var liIdx;\n    var validIdx = -1;\n\n    if (elems.length === 1 && childCnt && !inst.selectionSettings.showCheckbox) {\n      liIdx = childCnt <= dataLiIdx[0] ? childCnt - 1 : dataLiIdx[0];\n      ele = inst.ulElement.querySelectorAll('.e-list-item')[liIdx];\n      validIdx = inst.getValidIndex(ele, liIdx, childCnt === dataIdx[0] ? 38 : 40);\n\n      if (validIdx > -1) {\n        inst.ulElement.querySelectorAll('.e-list-item')[validIdx].classList.add(cssClass.selected);\n      }\n    }\n  };\n\n  ListBox.prototype.moveAllItemTo = function () {\n    this.moveAllData(this, this.getScopedListBox());\n  };\n\n  ListBox.prototype.moveAllItemFrom = function () {\n    this.moveAllData(this.getScopedListBox(), this);\n  };\n\n  ListBox.prototype.moveAllData = function (fListBox, tListBox, isKey, index) {\n    var listData = [].slice.call(tListBox.listData);\n    var jsonData = [].slice.call(tListBox.jsonData);\n    var isRefresh = tListBox.sortOrder !== 'None' || tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox || tListBox.fields.groupBy || tListBox.itemTemplate || fListBox.itemTemplate;\n    this.removeSelected(fListBox, fListBox.getSelectedItems());\n    var tempItems = [].slice.call(fListBox.listData);\n    var localDataArgs = {\n      cancel: false,\n      items: tempItems,\n      eventName: this.toolbarAction\n    };\n    fListBox.trigger('actionBegin', localDataArgs);\n\n    if (localDataArgs.cancel) {\n      return;\n    }\n\n    if (tListBox.listData.length === 0) {\n      var noRecElem = tListBox.ulElement.childNodes[0];\n\n      if (noRecElem) {\n        tListBox.ulElement.removeChild(noRecElem);\n      }\n    }\n\n    if (isRefresh) {\n      var noRecElem = fListBox.ulElement.childNodes[0];\n\n      if (noRecElem) {\n        fListBox.ulElement.removeChild(noRecElem);\n      }\n    }\n\n    moveTo(fListBox.ulElement, tListBox.ulElement, // eslint-disable-next-line prefer-spread\n    Array.apply(null, {\n      length: fListBox.ulElement.childElementCount\n    }).map(Number.call, Number), index);\n    this.trigger('actionComplete', {\n      items: tempItems,\n      eventName: this.toolbarAction\n    });\n\n    if (isKey) {\n      this.list.focus();\n    }\n\n    index = index ? index : listData.length;\n\n    for (var i = 0; i < fListBox.listData.length; i++) {\n      listData.splice(index + i, 0, fListBox.listData[i]);\n    }\n\n    for (var i = 0; i < fListBox.jsonData.length; i++) {\n      jsonData.splice(index + i, 0, fListBox.jsonData[i]);\n    }\n\n    var fliCollections = [].slice.call(fListBox.liCollections);\n    var tliCollections = [].slice.call(tListBox.liCollections);\n    fListBox.liCollections = [];\n\n    if (index) {\n      var toColl = tliCollections.splice(0, index);\n      tListBox.liCollections = toColl.concat(fliCollections).concat(tliCollections);\n    } else {\n      tListBox.liCollections = tliCollections.concat(fliCollections);\n    }\n\n    fListBox.value = [];\n    listData = listData.filter(function (data) {\n      return data.isHeader !== true;\n    });\n    var sortedData = listData.filter(function (val) {\n      return tListBox.jsonData.indexOf(val) === -1;\n    });\n\n    for (var i = 0; i < sortedData.length; i++) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      tListBox.jsonData.splice(index + i, 0, sortedData[i]);\n    }\n\n    tListBox.listData = listData;\n\n    if (fListBox.listData.length === fListBox.jsonData.length) {\n      fListBox.listData = fListBox.sortedData = fListBox.jsonData = [];\n    } else if (fListBox.allowFiltering) {\n      for (var i = 0; i < fListBox.listData.length; i++) {\n        for (var j = 0; j < fListBox.jsonData.length; j++) {\n          if (fListBox.listData[i] === fListBox.jsonData[j]) {\n            fListBox.jsonData.splice(j, 1);\n          }\n        }\n      }\n\n      fListBox.listData = fListBox.sortedData = [];\n    }\n\n    if (isRefresh) {\n      var sourceElem = tListBox.renderItems(listData, tListBox.fields);\n      tListBox.updateListItems(sourceElem, tListBox.ulElement);\n      this.trigger('actionComplete', {\n        items: tempItems,\n        eventName: this.toolbarAction\n      });\n    } else {\n      tListBox.sortedData = listData;\n    }\n\n    fListBox.updateSelectedOptions();\n\n    if (fListBox.listData.length === 0) {\n      fListBox.l10nUpdate();\n    }\n  };\n\n  ListBox.prototype.changeData = function (fromIdx, toIdx, jsonToIdx, ele) {\n    var listData = [].slice.call(this.listData);\n    var jsonData = [].slice.call(this.jsonData);\n    var sortData = [].slice.call(this.sortedData);\n    var jsonIdx = Array.prototype.indexOf.call(this.jsonData, this.getDataByElems([ele])[0]);\n    var sortIdx = Array.prototype.indexOf.call(this.sortedData, this.getDataByElems([ele])[0]);\n    var liColl = [].slice.call(this.liCollections);\n    listData.splice(toIdx, 0, listData.splice(fromIdx, 1)[0]);\n    jsonData.splice(jsonToIdx, 0, jsonData.splice(jsonIdx, 1)[0]);\n    sortData.splice(toIdx, 0, sortData.splice(sortIdx, 1)[0]);\n    liColl.splice(toIdx, 0, liColl.splice(fromIdx, 1)[0]);\n    this.listData = listData;\n    this.jsonData = jsonData;\n    this.liCollections = liColl;\n    this.sortedData = sortData;\n  };\n\n  ListBox.prototype.getSelectedItems = function () {\n    var ele = [];\n\n    if (this.selectionSettings.showCheckbox) {\n      [].slice.call(this.ulElement.getElementsByClassName('e-check')).forEach(function (cbox) {\n        ele.push(closest(cbox, '.' + 'e-list-item'));\n      });\n    } else {\n      ele = [].slice.call(this.ulElement.getElementsByClassName(cssClass.selected));\n    }\n\n    return ele;\n  };\n\n  ListBox.prototype.getScopedListBox = function () {\n    var _this = this;\n\n    var listObj;\n\n    if (this.scope) {\n      [].slice.call(document.querySelectorAll(this.scope)).forEach(function (ele) {\n        if (getComponent(ele, _this.getModuleName())) {\n          listObj = getComponent(ele, _this.getModuleName());\n        }\n      });\n    }\n\n    return listObj;\n  };\n\n  ListBox.prototype.getGrabbedItems = function (args) {\n    var grabbItems = false;\n\n    for (var i = 0; i < this.value.length; i++) {\n      if (this.value[i] === this.getFormattedValue(args.target.getAttribute('data-value'))) {\n        grabbItems = true;\n        break;\n      }\n    }\n\n    if (grabbItems) {\n      for (var i = 0; i < this.value.length; i++) {\n        var liColl = this.list.querySelectorAll('[aria-selected=\"true\"]');\n\n        for (var j = 0; j < liColl.length; j++) {\n          if (this.value[i] === this.getFormattedValue(liColl[j].getAttribute('data-value'))) {\n            liColl[j].classList.add('e-grabbed');\n          }\n        }\n      }\n    }\n\n    var elems;\n\n    if (this.isAngular) {\n      elems = Array.prototype.slice.call(this.element.getElementsByClassName('e-list-parent')[0].querySelectorAll('.e-grabbed'));\n    } else {\n      elems = Array.prototype.slice.call(this.element.nextElementSibling.querySelectorAll('.e-grabbed'));\n    }\n\n    return elems;\n  };\n\n  ListBox.prototype.getDragArgs = function (args, isDragEnd) {\n    var elems = this.getGrabbedItems(args);\n\n    if (elems.length) {\n      if (isDragEnd) {\n        elems.push(args.target);\n      }\n    } else {\n      elems = [args.target];\n    }\n\n    return {\n      elements: elems,\n      items: this.getDataByElems(elems)\n    };\n  };\n\n  ListBox.prototype.onKeyDown = function (e) {\n    this.keyDownHandler(e);\n    e.stopPropagation();\n  };\n\n  ListBox.prototype.keyDownHandler = function (e) {\n    if ([32, 35, 36, 37, 38, 39, 40, 65].indexOf(e.keyCode) > -1 && !this.allowFiltering) {\n      if (e.target && e.target.className.indexOf('e-edit-template') > -1) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (e.keyCode === 32 && this.ulElement.children.length) {\n        this.selectHandler({\n          target: this.ulElement.getElementsByClassName('e-focused')[0],\n          ctrlKey: e.ctrlKey,\n          shiftKey: e.shiftKey\n        });\n      } else if (e.keyCode === 65 && e.ctrlKey) {\n        this.selectAll();\n      } else if ((e.keyCode === 38 || e.keyCode === 40) && e.ctrlKey && e.shiftKey) {\n        this.moveUpDown(e.keyCode === 38 ? true : false, true);\n      } else if ((this.toolbarSettings.items.length || this.tBListBox) && (e.keyCode === 39 || e.keyCode === 37) && e.ctrlKey) {\n        var listObj = this.tBListBox || this.getScopedListBox();\n\n        if (e.keyCode === 39) {\n          if (e.shiftKey) {\n            this.moveAllData(this, listObj, true);\n          } else {\n            this.moveData(this, listObj, true);\n          }\n        } else {\n          if (e.shiftKey) {\n            this.moveAllData(listObj, this, true);\n          } else {\n            this.moveData(listObj, this, true);\n          }\n        }\n      } else if (e.keyCode !== 37 && e.keyCode !== 39 && e.code !== 'KeyA') {\n        this.upDownKeyHandler(e);\n      }\n    } else if (this.allowFiltering) {\n      if (e.keyCode === 40 || e.keyCode === 38) {\n        this.upDownKeyHandler(e);\n      }\n    }\n  };\n\n  ListBox.prototype.upDownKeyHandler = function (e) {\n    var ul = this.ulElement;\n    var defaultIdx = e.keyCode === 40 || e.keyCode === 36 ? 0 : ul.childElementCount - 1;\n    var fliIdx = defaultIdx;\n    var fli = ul.getElementsByClassName('e-focused')[0] || ul.getElementsByClassName(cssClass.selected)[0];\n\n    if (fli) {\n      if (e.keyCode !== 35 && e.keyCode !== 36) {\n        fliIdx = Array.prototype.indexOf.call(ul.children, fli);\n\n        if (e.keyCode === 40) {\n          fliIdx++;\n        } else {\n          fliIdx--;\n        }\n\n        if (fliIdx < 0 || fliIdx > ul.childElementCount - 1) {\n          return;\n        }\n      }\n\n      removeClass([fli], 'e-focused');\n    }\n\n    var cli = ul.children[fliIdx];\n\n    if (cli) {\n      fliIdx = this.getValidIndex(cli, fliIdx, e.keyCode);\n\n      if (fliIdx === -1) {\n        addClass([fli], 'e-focused');\n        return;\n      }\n\n      ul.children[fliIdx].focus();\n      ul.children[fliIdx].classList.add('e-focused');\n\n      if (!e.ctrlKey || !this.selectionSettings.showCheckbox && e.shiftKey && (e.keyCode === 36 || e.keyCode === 35)) {\n        this.selectHandler({\n          target: ul.children[fliIdx],\n          ctrlKey: e.ctrlKey,\n          shiftKey: e.shiftKey\n        }, true);\n      }\n\n      if (this.selectionSettings.showCheckbox && e.ctrlKey && e.shiftKey && (e.keyCode === 36 || e.keyCode === 35)) {\n        var selectedidx = Array.prototype.indexOf.call(ul.children, fli);\n        var sidx = e.code === 'Home' ? 0 : selectedidx;\n        var eidx = e.code === 'Home' ? selectedidx : ul.children.length - 1;\n\n        for (var i = sidx; i <= eidx; i++) {\n          var item = ul.children[i];\n          this.notify('updatelist', {\n            li: item,\n            e: {\n              target: this.ulElement.getElementsByClassName('e-focused')[0],\n              ctrlKey: e.ctrlKey,\n              shiftKey: e.shiftKey\n            },\n            module: 'listbox'\n          });\n        }\n      }\n    }\n  };\n\n  ListBox.prototype.KeyUp = function (e) {\n    var _this = this;\n\n    var char = String.fromCharCode(e.keyCode);\n    var isWordCharacter = char.match(/\\w/);\n\n    if (!isNullOrUndefined(isWordCharacter)) {\n      this.isValidKey = true;\n    }\n\n    this.isValidKey = e.keyCode === 8 || e.keyCode === 46 || this.isValidKey;\n\n    if (this.isValidKey) {\n      this.isValidKey = false;\n\n      switch (e.keyCode) {\n        default:\n          if (this.allowFiltering) {\n            var eventArgsData_1 = {\n              preventDefaultAction: false,\n              text: this.targetElement(),\n              updateData: function (dataSource, query, fields) {\n                if (eventArgsData_1.cancel) {\n                  return;\n                }\n\n                _this.isFiltered = true;\n                _this.remoteFilterAction = true;\n\n                _this.dataUpdater(dataSource, query, fields);\n              },\n              event: e,\n              cancel: false\n            };\n            this.trigger('filtering', eventArgsData_1, function (args) {\n              _this.isDataFetched = false;\n\n              if (args.cancel || _this.filterInput.value !== '' && _this.isFiltered) {\n                return;\n              }\n\n              if (!args.cancel && !_this.isCustomFiltering && !args.preventDefaultAction) {\n                _this.inputString = _this.filterInput.value;\n\n                _this.filteringAction(_this.jsonData, new Query(), _this.fields);\n              }\n\n              if (!_this.isFiltered && !_this.isCustomFiltering && !args.preventDefaultAction) {\n                _this.dataUpdater(_this.jsonData, new Query(), _this.fields);\n              }\n            });\n          }\n\n      }\n    }\n  };\n  /**\n   * To filter the data from given data source by using query.\n   *\n   * @param  {Object[] | DataManager } dataSource - Set the data source to filter.\n   * @param  {Query} query - Specify the query to filter the data.\n   * @param  {FieldSettingsModel} fields - Specify the fields to map the column in the data table.\n   * @returns {void}.\n   */\n\n\n  ListBox.prototype.filter = function (dataSource, query, fields) {\n    this.isCustomFiltering = true;\n    this.filteringAction(dataSource, query, fields);\n  };\n\n  ListBox.prototype.filteringAction = function (dataSource, query, fields) {\n    this.resetList(dataSource, fields, query);\n  };\n\n  ListBox.prototype.targetElement = function () {\n    this.targetInputElement = this.list.getElementsByClassName('e-input-filter')[0];\n    return this.targetInputElement.value;\n  };\n\n  ListBox.prototype.dataUpdater = function (dataSource, query, fields) {\n    this.isDataFetched = false;\n    var backCommand = true;\n\n    if (this.targetElement().trim() === '') {\n      var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;\n\n      if (backCommand) {\n        this.remoteCustomValue = false;\n        this.onActionComplete(list, this.jsonData);\n        this.notify('reOrder', {\n          module: 'CheckBoxSelection',\n          enable: this.selectionSettings.showCheckbox,\n          e: this\n        });\n      }\n    } else {\n      this.resetList(dataSource, fields, query);\n    }\n  };\n\n  ListBox.prototype.focusOutHandler = function () {\n    var ele = this.list.getElementsByClassName('e-focused')[0];\n\n    if (ele) {\n      ele.classList.remove('e-focused');\n    }\n\n    if (this.allowFiltering) {\n      this.refreshClearIcon();\n    }\n  };\n\n  ListBox.prototype.getValidIndex = function (cli, index, keyCode) {\n    var cul = this.ulElement;\n\n    if (cli.classList.contains('e-disabled') || cli.classList.contains(cssClass.group)) {\n      if (keyCode === 40 || keyCode === 36) {\n        index++;\n      } else {\n        index--;\n      }\n    }\n\n    if (index < 0 || index === cul.childElementCount) {\n      return -1;\n    }\n\n    cli = cul.childNodes[index];\n\n    if (cli.classList.contains('e-disabled') || cli.classList.contains(cssClass.group)) {\n      index = this.getValidIndex(cli, index, keyCode);\n    }\n\n    return index;\n  };\n\n  ListBox.prototype.updateSelectedOptions = function () {\n    var _this = this;\n\n    var selectedOptions = [];\n    var values = [];\n    extend(values, this.value);\n    this.getSelectedItems().forEach(function (ele) {\n      if (!ele.classList.contains('e-grabbed')) {\n        selectedOptions.push(_this.getFormattedValue(ele.getAttribute('data-value')));\n      }\n    });\n\n    if (this.mainList.childElementCount === this.ulElement.childElementCount) {\n      if (this.allowFiltering && this.selectionSettings.showCheckbox) {\n        for (var i = 0; i < selectedOptions.length; i++) {\n          if (values.indexOf(selectedOptions[i]) > -1) {\n            continue;\n          } else {\n            values.push(selectedOptions[i]);\n          }\n        }\n\n        this.setProperties({\n          value: values\n        }, true);\n      } else {\n        this.setProperties({\n          value: selectedOptions\n        }, true);\n      }\n    }\n\n    this.updateSelectTag();\n    this.updateToolBarState();\n\n    if (this.tBListBox) {\n      this.tBListBox.updateToolBarState();\n    }\n  };\n\n  ListBox.prototype.clearSelection = function (values) {\n    var _this = this;\n\n    if (values === void 0) {\n      values = this.value;\n    }\n\n    if (this.selectionSettings.showCheckbox) {\n      var dvalue_1;\n      this.getSelectedItems().forEach(function (li) {\n        dvalue_1 = _this.getFormattedValue(li.getAttribute('data-value'));\n\n        if (values.indexOf(dvalue_1) < 0) {\n          li.getElementsByClassName('e-check')[0].classList.remove('e-check');\n          li.removeAttribute('aria-selected');\n        }\n      });\n    }\n  };\n\n  ListBox.prototype.setSelection = function (values, isSelect, isText) {\n    var _this = this;\n\n    if (values === void 0) {\n      values = this.value;\n    }\n\n    if (isSelect === void 0) {\n      isSelect = true;\n    }\n\n    if (isText === void 0) {\n      isText = false;\n    }\n\n    var li;\n    var liselect;\n\n    if (values) {\n      values.forEach(function (value) {\n        var text;\n\n        if (isText) {\n          text = _this.getValueByText(value);\n        } else {\n          text = value;\n        }\n\n        if (typeof text === 'string') {\n          text = text.split('\\\\').join('\\\\\\\\');\n        }\n\n        li = _this.list.querySelector('[data-value=\"' + text + '\"]');\n\n        if (li) {\n          if (_this.selectionSettings.showCheckbox) {\n            liselect = li.getElementsByClassName('e-frame')[0].classList.contains('e-check');\n          } else {\n            liselect = li.classList.contains('e-selected');\n          }\n\n          if (!isSelect && liselect || isSelect && !liselect && li) {\n            if (_this.selectionSettings.showCheckbox) {\n              _this.notify('updatelist', {\n                li: li,\n                module: 'listbox'\n              });\n            } else {\n              if (isSelect) {\n                li.classList.add(cssClass.selected);\n                li.setAttribute('aria-selected', 'true');\n              } else {\n                li.classList.remove(cssClass.selected);\n                li.removeAttribute('aria-selected');\n              }\n            }\n          }\n        }\n      });\n    }\n\n    this.updateSelectTag();\n  };\n\n  ListBox.prototype.updateSelectTag = function () {\n    var ele = this.getSelectTag();\n    var innerHTML = '';\n    ele.innerHTML = '';\n\n    if (this.value) {\n      for (var i = 0, len = this.value.length; i < len; i++) {\n        innerHTML += '<option selected value=\"' + this.value[i] + '\"></option>';\n      }\n\n      ele.innerHTML += innerHTML;\n    }\n\n    this.checkSelectAll();\n  };\n\n  ListBox.prototype.checkDisabledState = function (inst) {\n    return inst.ulElement.querySelectorAll('.' + cssClass.li).length === 0;\n  };\n\n  ListBox.prototype.updateToolBarState = function () {\n    var _this = this;\n\n    if (this.toolbarSettings.items.length) {\n      var listObj_1 = this.getScopedListBox();\n      var wrap_1 = this.list.parentElement.getElementsByClassName('e-listbox-tool')[0];\n      this.toolbarSettings.items.forEach(function (value) {\n        var btn = wrap_1.querySelector('[data-value=\"' + value + '\"]');\n\n        switch (value) {\n          case 'moveAllTo':\n            btn.disabled = _this.checkDisabledState(_this);\n            break;\n\n          case 'moveAllFrom':\n            btn.disabled = _this.checkDisabledState(listObj_1);\n            break;\n\n          case 'moveFrom':\n            btn.disabled = listObj_1.value && listObj_1.value.length ? false : true;\n            break;\n\n          case 'moveUp':\n            btn.disabled = _this.value && _this.value.length && !_this.isSelected(_this.ulElement.children[0]) ? false : true;\n            break;\n\n          case 'moveDown':\n            btn.disabled = _this.value && _this.value.length && !_this.isSelected(_this.ulElement.children[_this.ulElement.childElementCount - 1]) ? false : true;\n            break;\n\n          default:\n            btn.disabled = _this.value && _this.value.length ? false : true;\n            break;\n        }\n      });\n    }\n  };\n\n  ListBox.prototype.setCheckboxPosition = function () {\n    var listWrap = this.list;\n\n    if (!this.initLoad && this.selectionSettings.checkboxPosition === 'Left') {\n      listWrap.classList.remove('e-right');\n    }\n\n    if (this.selectionSettings.checkboxPosition === 'Right') {\n      listWrap.classList.add('e-right');\n    }\n  };\n\n  ListBox.prototype.showCheckbox = function (showCheckbox) {\n    var index = 0;\n    var liColl = this.list.lastElementChild.querySelectorAll('li');\n    var liCollLen = this.list.lastElementChild.getElementsByClassName('e-list-item').length;\n\n    if (showCheckbox) {\n      this.ulElement = this.renderItems(this.listData, this.fields);\n      this.mainList = this.ulElement;\n      this.list.removeChild(this.list.getElementsByTagName('ul')[0]);\n      this.list.appendChild(this.ulElement);\n\n      if (this.selectionSettings.showSelectAll && !this.list.getElementsByClassName('e-selectall-parent')[0]) {\n        var l10nShow = new L10n(this.getModuleName(), {\n          selectAllText: 'Select All',\n          unSelectAllText: 'Unselect All'\n        }, this.locale);\n        this.showSelectAll = true;\n        this.selectAllText = l10nShow.getConstant('selectAllText');\n        this.unSelectAllText = l10nShow.getConstant('unSelectAllText');\n        this.popupWrapper = this.list;\n        this.checkBoxSelectionModule.checkAllParent = null;\n        this.notify('selectAll', {});\n        this.checkSelectAll();\n      }\n    } else {\n      if (this.list.getElementsByClassName('e-selectall-parent')[0]) {\n        this.list.removeChild(this.list.getElementsByClassName('e-selectall-parent')[0]);\n      }\n\n      for (index; index < liCollLen; index++) {\n        if (liColl[index].classList.contains('e-list-item')) {\n          liColl[index].removeChild(liColl[index].getElementsByClassName('e-checkbox-wrapper')[0]);\n        }\n\n        if (liColl[index].hasAttribute('aria-selected')) {\n          liColl[index].removeAttribute('aria-selected');\n        }\n      }\n\n      this.mainList = this.ulElement;\n    }\n\n    this.value = [];\n  };\n\n  ListBox.prototype.isSelected = function (ele) {\n    if (!isNullOrUndefined(ele)) {\n      return ele.classList.contains(cssClass.selected) || ele.querySelector('.e-check') !== null;\n    } else {\n      return false;\n    }\n  };\n\n  ListBox.prototype.getSelectTag = function () {\n    return this.list.getElementsByClassName('e-hidden-select')[0];\n  };\n\n  ListBox.prototype.getToolElem = function () {\n    return this.list.parentElement.getElementsByClassName('e-listbox-tool')[0];\n  };\n\n  ListBox.prototype.formResetHandler = function () {\n    this.value = this.initialSelectedOptions;\n  };\n  /**\n   * Return the module name.\n   *\n   * @private\n   * @returns {string} - Module name\n   */\n\n\n  ListBox.prototype.getModuleName = function () {\n    return 'listbox';\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - Persist data\n   */\n\n\n  ListBox.prototype.getPersistData = function () {\n    return this.addOnPersist(['value']);\n  };\n\n  ListBox.prototype.getLocaleName = function () {\n    return 'listbox';\n  };\n\n  ListBox.prototype.destroy = function () {\n    this.unwireEvents();\n\n    if (this.element.tagName === 'EJS-LISTBOX') {\n      this.element.innerHTML = '';\n    } else {\n      this.element.style.display = 'inline-block';\n\n      if (this.toolbarSettings.items.length) {\n        this.list.parentElement.parentElement.insertBefore(this.list, this.list.parentElement);\n        detach(this.list.nextElementSibling);\n      }\n\n      this.list.parentElement.insertBefore(this.element, this.list);\n    }\n\n    _super.prototype.destroy.call(this);\n\n    this.enableRtlElements = [];\n    this.liCollections = null;\n    this.list = null;\n    this.ulElement = null;\n    this.mainList = null;\n    this.spinner = null;\n    this.rippleFun = null;\n\n    if (this.itemTemplate) {\n      this.clearTemplate();\n    }\n  };\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param {ListBoxModel} newProp - Specifies the new properties.\n   * @param {ListBoxModel} oldProp - Specifies the old properties.\n   * @returns {void}\n   * @private\n   */\n\n\n  ListBox.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;\n\n    _super.prototype.onPropertyChanged.call(this, newProp, oldProp);\n\n    this.setUpdateInitial(['fields', 'query', 'dataSource'], newProp);\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([wrap], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([wrap], newProp.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n          }\n\n          break;\n\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            this.list.classList.add('e-rtl');\n          } else {\n            this.list.classList.remove('e-rtl');\n          }\n\n          break;\n\n        case 'value':\n          removeClass(this.list.querySelectorAll('.' + cssClass.selected), cssClass.selected);\n          this.clearSelection(this.value);\n          this.setSelection();\n          break;\n\n        case 'height':\n          this.setHeight();\n          break;\n\n        case 'enabled':\n          this.setEnable();\n          break;\n\n        case 'allowDragAndDrop':\n          if (newProp.allowDragAndDrop) {\n            this.initDraggable();\n          } else {\n            getComponent(this.ulElement, 'sortable').destroy();\n          }\n\n          break;\n\n        case 'allowFiltering':\n          if (this.allowFiltering) {\n            this.setFiltering();\n          } else {\n            this.list.removeChild(this.list.getElementsByClassName('e-filter-parent')[0]);\n            this.filterParent = null;\n            removeClass([this.list], 'e-filter-list');\n          }\n\n          break;\n\n        case 'filterBarPlaceholder':\n          if (this.allowFiltering) {\n            if (this.filterInput) {\n              Input.setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);\n            }\n          }\n\n          break;\n\n        case 'scope':\n          if (this.allowDragAndDrop) {\n            getComponent(this.ulElement, 'sortable').scope = newProp.scope;\n          }\n\n          if (this.toolbarSettings.items.length) {\n            if (oldProp.scope) {\n              getComponent(document.querySelector(oldProp.scope), this.getModuleName()).tBListBox = null;\n            }\n\n            if (newProp.scope) {\n              getComponent(document.querySelector(newProp.scope), this.getModuleName()).tBListBox = this;\n            }\n          }\n\n          break;\n\n        case 'toolbarSettings':\n          {\n            var ele = void 0;\n            var pos = newProp.toolbarSettings.position;\n            var toolElem = this.getToolElem();\n\n            if (pos) {\n              removeClass([wrap], ['e-right', 'e-left']);\n              wrap.classList.add('e-' + pos.toLowerCase());\n\n              if (pos === 'Left') {\n                wrap.insertBefore(toolElem, this.list);\n              } else {\n                wrap.appendChild(toolElem);\n              }\n            }\n\n            if (newProp.toolbarSettings.items) {\n              if (oldProp.toolbarSettings && oldProp.toolbarSettings.items.length) {\n                ele = this.list.parentElement;\n                ele.parentElement.insertBefore(this.list, ele);\n                detach(ele);\n              }\n\n              this.initToolbarAndStyles();\n              this.wireToolbarEvent();\n            }\n\n            break;\n          }\n\n        case 'selectionSettings':\n          {\n            var showSelectAll = newProp.selectionSettings.showSelectAll;\n            var showCheckbox = newProp.selectionSettings.showCheckbox;\n\n            if (!isNullOrUndefined(showSelectAll)) {\n              this.showSelectAll = showSelectAll;\n\n              if (this.showSelectAll) {\n                var l10nSel = new L10n(this.getModuleName(), {\n                  selectAllText: 'Select All',\n                  unSelectAllText: 'Unselect All'\n                }, this.locale);\n                this.checkBoxSelectionModule.checkAllParent = null;\n                this.showSelectAll = true;\n                this.selectAllText = l10nSel.getConstant('selectAllText');\n                this.unSelectAllText = l10nSel.getConstant('selectAllText');\n                this.popupWrapper = this.list;\n              }\n\n              this.notify('selectAll', {});\n              this.checkSelectAll();\n            }\n\n            if (!isNullOrUndefined(showCheckbox)) {\n              this.showCheckbox(showCheckbox);\n            }\n\n            if (this.selectionSettings.showCheckbox) {\n              this.setCheckboxPosition();\n            }\n\n            break;\n          }\n\n        case 'dataSource':\n          this.isDataSourceUpdate = true;\n          this.jsonData = [].slice.call(this.dataSource);\n          break;\n      }\n    }\n  };\n\n  var ListBox_1;\n\n  __decorate$6([Property('')], ListBox.prototype, \"cssClass\", void 0);\n\n  __decorate$6([Property([])], ListBox.prototype, \"value\", void 0);\n\n  __decorate$6([Property('')], ListBox.prototype, \"height\", void 0);\n\n  __decorate$6([Property(true)], ListBox.prototype, \"enabled\", void 0);\n\n  __decorate$6([Property(false)], ListBox.prototype, \"enablePersistence\", void 0);\n\n  __decorate$6([Property(false)], ListBox.prototype, \"allowDragAndDrop\", void 0);\n\n  __decorate$6([Property(1000)], ListBox.prototype, \"maximumSelectionLength\", void 0);\n\n  __decorate$6([Property(false)], ListBox.prototype, \"allowFiltering\", void 0);\n\n  __decorate$6([Property('')], ListBox.prototype, \"scope\", void 0);\n\n  __decorate$6([Property(true)], ListBox.prototype, \"ignoreCase\", void 0);\n\n  __decorate$6([Property(null)], ListBox.prototype, \"filterBarPlaceholder\", void 0);\n\n  __decorate$6([Event()], ListBox.prototype, \"beforeItemRender\", void 0);\n\n  __decorate$6([Event()], ListBox.prototype, \"filtering\", void 0);\n\n  __decorate$6([Event()], ListBox.prototype, \"select\", void 0);\n\n  __decorate$6([Event()], ListBox.prototype, \"change\", void 0);\n\n  __decorate$6([Event()], ListBox.prototype, \"beforeDrop\", void 0);\n\n  __decorate$6([Event()], ListBox.prototype, \"dragStart\", void 0);\n\n  __decorate$6([Event()], ListBox.prototype, \"drag\", void 0);\n\n  __decorate$6([Event()], ListBox.prototype, \"drop\", void 0);\n\n  __decorate$6([Event()], ListBox.prototype, \"dataBound\", void 0);\n\n  __decorate$6([Property(null)], ListBox.prototype, \"groupTemplate\", void 0);\n\n  __decorate$6([Property('Request failed')], ListBox.prototype, \"actionFailureTemplate\", void 0);\n\n  __decorate$6([Property(1000)], ListBox.prototype, \"zIndex\", void 0);\n\n  __decorate$6([Property(false)], ListBox.prototype, \"ignoreAccent\", void 0);\n\n  __decorate$6([Complex({}, ToolbarSettings)], ListBox.prototype, \"toolbarSettings\", void 0);\n\n  __decorate$6([Complex({}, SelectionSettings)], ListBox.prototype, \"selectionSettings\", void 0);\n\n  ListBox = ListBox_1 = __decorate$6([NotifyPropertyChanges], ListBox);\n  return ListBox;\n}(DropDownBase);\n\nvar listBoxClasses = {\n  backIcon: 'e-input-group-icon e-back-icon e-icons',\n  filterBarClearIcon: 'e-input-group-icon e-clear-icon e-icons',\n  filterInput: 'e-input-filter',\n  filterParent: 'e-filter-parent',\n  clearIcon: 'e-clear-icon'\n};\n/**\n * export all modules from current location\n */\n\nvar __extends$7 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$7 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * The Mention component is used to list someone or something based on user input in textarea, input,\n * or any other editable element from which the user can select.\n */\n\n\nvar Mention =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$7(Mention, _super);\n  /**\n   * * Constructor for creating the widget\n   *\n   * @param {MentionModel} options - Specifies the MentionComponent model.\n   * @param {string | HTMLElement} element - Specifies the element to render as component.\n   * @private\n   */\n\n\n  function Mention(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\n   * When property value changes happened, then onPropertyChanged method will execute the respective changes in this component.\n   *\n   * @param {MentionModel} newProp - Returns the dynamic property value of the component.\n   * @param {MentionModel} oldProp - Returns the previous property value of the component.\n   * @private\n   * @returns {void}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Mention.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'minLength':\n          this.minLength = newProp.minLength;\n          break;\n\n        case 'suffixText':\n          this.suffixText = newProp.suffixText;\n          break;\n\n        case 'allowSpaces':\n          this.allowSpaces = newProp.allowSpaces;\n          break;\n\n        case 'mentionChar':\n          this.mentionChar = newProp.mentionChar;\n          break;\n\n        case 'showMentionChar':\n          this.showMentionChar = newProp.showMentionChar;\n          break;\n\n        case 'cssClass':\n          this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n          break;\n      }\n    }\n  };\n\n  Mention.prototype.updateCssClass = function (newClass, oldClass) {\n    if (!isNullOrUndefined(oldClass)) {\n      oldClass = oldClass.replace(/\\s+/g, ' ').trim();\n    }\n\n    if (!isNullOrUndefined(newClass)) {\n      newClass = newClass.replace(/\\s+/g, ' ').trim();\n    }\n\n    this.setCssClass(newClass, [this.inputElement], oldClass);\n\n    if (this.popupObj) {\n      this.setCssClass(newClass, [this.popupObj.element], oldClass);\n    }\n  };\n\n  Mention.prototype.setCssClass = function (cssClass$$1, elements, oldClass) {\n    if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n      removeClass(elements, oldClass.split(' '));\n    }\n\n    if (!isNullOrUndefined(cssClass$$1) && cssClass$$1 !== '') {\n      addClass(elements, cssClass$$1.split(' '));\n    }\n  };\n\n  Mention.prototype.initializeData = function () {\n    this.isSelected = false;\n    this.isFiltered = false;\n    this.beforePopupOpen = false;\n    this.initRemoteRender = false;\n    this.isListResetted = false;\n    this.isPopupOpen = false;\n    this.isCollided = false;\n    this.lineBreak = false;\n    this.keyConfigure = {\n      tab: 'tab',\n      enter: '13',\n      escape: '27',\n      end: '35',\n      home: '36',\n      down: '40',\n      up: '38',\n      pageUp: '33',\n      pageDown: '34',\n      open: 'alt+40',\n      close: 'shift+tab',\n      hide: 'alt+38',\n      space: '32'\n    };\n  };\n  /**\n   * Execute before render the list items\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  Mention.prototype.preRender = function () {\n    this.initializeData();\n\n    _super.prototype.preRender.call(this);\n  };\n  /**\n   * To Initialize the control rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  Mention.prototype.render = function () {\n    var isSelector = typeof this.target === 'string';\n    this.inputElement = !isNullOrUndefined(this.target) ? this.checkAndUpdateInternalComponent(isSelector ? document.querySelector(this.target) : this.target) : this.element;\n\n    if (this.isContentEditable(this.inputElement)) {\n      this.inputElement.setAttribute('contenteditable', 'true');\n      addClass([this.inputElement], ['e-mention']);\n\n      if (isNullOrUndefined(this.target)) {\n        addClass([this.inputElement], ['e-editable-element']);\n      }\n    }\n\n    this.inputElement.setAttribute('role', 'textbox');\n    this.queryString = this.elementValue();\n    this.wireEvent();\n  };\n\n  Mention.prototype.wireEvent = function () {\n    EventHandler.add(this.inputElement, 'keyup', this.onKeyUp, this);\n    this.bindCommonEvent();\n  };\n\n  Mention.prototype.unWireEvent = function () {\n    EventHandler.remove(this.inputElement, 'keyup', this.onKeyUp);\n    this.unBindCommonEvent();\n  };\n\n  Mention.prototype.bindCommonEvent = function () {\n    if (!Browser.isDevice) {\n      this.keyboardModule = new KeyboardEvents(this.inputElement, {\n        keyAction: this.keyActionHandler.bind(this),\n        keyConfigs: this.keyConfigure,\n        eventName: 'keydown'\n      });\n    }\n  };\n  /**\n   * Hides the spinner loader.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  Mention.prototype.hideSpinner = function () {\n    this.hideWaitingSpinner();\n  };\n\n  Mention.prototype.hideWaitingSpinner = function () {\n    if (!isNullOrUndefined(this.spinnerElement)) {\n      hideSpinner(this.spinnerElement);\n    }\n\n    if (!isNullOrUndefined(this.spinnerTemplate) && !isNullOrUndefined(this.spinnerTemplateElement)) {\n      detach(this.spinnerTemplateElement);\n    }\n  };\n\n  Mention.prototype.checkAndUpdateInternalComponent = function (targetElement) {\n    if (!this.isVue && targetElement.classList.contains('e-richtexteditor')) {\n      return targetElement.querySelector('.e-content');\n    }\n\n    if (this.isVue && targetElement.nodeName === 'TEXTAREA' && targetElement.classList.contains('e-rte-hidden')) {\n      var parentElement = targetElement.parentElement;\n\n      if (parentElement && parentElement.classList.contains('e-richtexteditor')) {\n        return parentElement.querySelector('.e-content');\n      }\n    }\n\n    return targetElement;\n  };\n  /**\n   * Shows the spinner loader.\n   *\n   * @returns {void}\n   */\n\n\n  Mention.prototype.showWaitingSpinner = function () {\n    if (!isNullOrUndefined(this.popupObj)) {\n      if (isNullOrUndefined(this.spinnerTemplate) && isNullOrUndefined(this.spinnerElement)) {\n        this.spinnerElement = this.popupObj.element;\n        createSpinner({\n          target: this.spinnerElement,\n          width: Browser.isDevice ? '16px' : '14px'\n        }, this.createElement);\n        showSpinner(this.spinnerElement);\n      }\n\n      if (!isNullOrUndefined(this.spinnerTemplate)) {\n        this.setSpinnerTemplate();\n      }\n    }\n  };\n\n  Mention.prototype.keyActionHandler = function (e) {\n    var isNavigation = e.action === 'down' || e.action === 'up' || e.action === 'pageUp' || e.action === 'pageDown' || e.action === 'home' || e.action === 'end';\n    var isTabAction = e.action === 'tab' || e.action === 'close';\n\n    if (this.list === undefined && !this.isRequested && !isTabAction && e.action !== 'escape' && e.action !== 'space') {\n      this.renderList();\n    }\n\n    if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && isNavigation && this.liCollections.length === 0 || this.isRequested) {\n      return;\n    }\n\n    if (e.action === 'escape') {\n      e.preventDefault();\n    }\n\n    this.isSelected = e.action === 'escape' ? false : this.isSelected;\n\n    switch (e.action) {\n      case 'down':\n      case 'up':\n        this.updateUpDownAction(e);\n        break;\n\n      case 'tab':\n        if (this.isPopupOpen) {\n          e.preventDefault();\n          var li = this.list.querySelector('.' + dropDownBaseClasses.selected);\n\n          if (li) {\n            this.setSelection(li, e);\n          }\n\n          if (this.isPopupOpen) {\n            this.hidePopup(e);\n          }\n        }\n\n        break;\n\n      case 'enter':\n        if (this.isPopupOpen) {\n          e.preventDefault();\n\n          if (this.popupObj && this.popupObj.element.contains(this.selectedLI)) {\n            this.updateSelectedItem(this.selectedLI, e, false, true);\n          }\n        }\n\n        break;\n\n      case 'escape':\n        if (this.isPopupOpen) {\n          this.hidePopup(e);\n        }\n\n        break;\n    }\n  };\n\n  Mention.prototype.updateUpDownAction = function (e) {\n    var focusEle = this.list.querySelector('.' + dropDownBaseClasses.focus);\n\n    if (this.isSelectFocusItem(focusEle)) {\n      this.setSelection(focusEle, e);\n    } else if (!isNullOrUndefined(this.liCollections)) {\n      var li = this.list.querySelector('.' + dropDownBaseClasses.selected);\n\n      if (!isNullOrUndefined(li)) {\n        var value = this.getFormattedValue(li.getAttribute('data-value'));\n        this.activeIndex = this.getIndexByValue(value);\n      }\n\n      var index = e.action === 'down' ? this.activeIndex + 1 : this.activeIndex - 1;\n      var startIndex = 0;\n      startIndex = e.action === 'down' && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1;\n      index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;\n      var nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];\n\n      if (!isNullOrUndefined(nextItem)) {\n        this.setSelection(nextItem, e);\n      }\n    }\n\n    if (this.isPopupOpen) {\n      e.preventDefault();\n    }\n  };\n\n  Mention.prototype.isSelectFocusItem = function (element) {\n    return !isNullOrUndefined(element);\n  };\n\n  Mention.prototype.unBindCommonEvent = function () {\n    if (!Browser.isDevice) {\n      this.keyboardModule.destroy();\n    }\n  };\n\n  Mention.prototype.onKeyUp = function (e) {\n    var rangetextContent;\n    this.isTyped = e.code !== 'Enter' && e.code !== 'Space' && e.code !== 'ArrowDown' && e.code !== 'ArrowUp' ? true : false;\n\n    if (document.activeElement != this.inputElement) {\n      this.inputElement.focus();\n    }\n\n    if (this.isContentEditable(this.inputElement)) {\n      this.range = this.getCurrentRange();\n      rangetextContent = this.range.startContainer.textContent.split('');\n    }\n\n    var currentRange = this.getTextRange();\n    var lastWordRange = this.getLastLetter(currentRange); // eslint-disable-next-line security/detect-non-literal-regexp\n\n    var Regex = new RegExp(this.mentionChar, 'g');\n    var charRegex = new RegExp('[a-zA-Z]', 'g');\n\n    if (e.key === 'Shift' || e.keyCode === 37 || e.keyCode === 39) {\n      return;\n    }\n\n    if (!currentRange || !lastWordRange || e.code === 'Enter' || e.keyCode === 27 || lastWordRange.match(Regex) && lastWordRange.match(Regex).length > 1 || this.isContentEditable(this.inputElement) && this.range.startContainer && this.range.startContainer.previousElementSibling && this.range.startContainer.textContent.split('').length > 0 && (rangetextContent.length === 1 || rangetextContent[rangetextContent.length - 2].indexOf('') === -1 || this.range.startContainer.nodeType === 1)) {\n      if (this.allowSpaces && currentRange && currentRange.trim() !== '' && charRegex.test(currentRange) && currentRange.indexOf(this.mentionChar) !== -1 && !this.isMatchedText() && currentRange.length > 1 && currentRange.replace(/\\u00A0/g, ' ').charAt(currentRange.length - 2) !== ' ' && this.list && this.list.querySelectorAll('ul').length > 0) {\n        this.queryString = currentRange.substring(currentRange.lastIndexOf(this.mentionChar) + 1).replace('\\u00a0', ' ');\n        this.searchLists(e);\n      } else if (this.isPopupOpen && (!this.allowSpaces || !lastWordRange) && e.code !== 'ArrowDown' && e.code !== 'ArrowUp') {\n        this.hidePopup();\n        this.lineBreak = true;\n      }\n\n      return;\n    }\n\n    this.queryString = lastWordRange.replace(this.mentionChar, '');\n\n    if (this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0) && this.queryString !== '' && e.keyCode !== 38 && e.keyCode !== 40 && !this.lineBreak) {\n      this.searchLists(e);\n\n      if (!this.isPopupOpen && this.queryString.length >= this.minLength) {\n        if (!this.isContentEditable(this.inputElement)) {\n          this.showPopup();\n        } else if (this.isContentEditable(this.inputElement) && this.range && this.range.startContainer !== this.inputElement && e.keyCode !== 9) {\n          this.showPopup();\n        }\n      }\n    } else if (lastWordRange.indexOf(this.mentionChar) === 0 && !this.isPopupOpen && e.keyCode !== 8 && (!this.popupObj || isNullOrUndefined(this.target) && !document.body.contains(this.popupObj.element) || !isNullOrUndefined(this.target) && document.body.contains(this.popupObj.element))) {\n      if (this.initRemoteRender && this.list && this.list.classList.contains('e-nodata')) {\n        this.searchLists(e);\n      }\n\n      this.resetList(this.dataSource, this.fields);\n\n      if (isNullOrUndefined(this.list)) {\n        this.initValue();\n      }\n\n      if (!this.isPopupOpen && e.keyCode !== 38 && e.keyCode !== 40) {\n        this.didPopupOpenByTypingInitialChar = true;\n        this.showPopup();\n\n        if (this.initRemoteRender && this.list.querySelectorAll('li').length === 0) {\n          this.showWaitingSpinner();\n        }\n\n        this.lineBreak = false;\n      }\n    } else if (this.allowSpaces && this.queryString !== '' && currentRange && currentRange.trim() !== '' && currentRange.replace('\\u00a0', ' ').lastIndexOf(' ') < currentRange.length - 1 && e.keyCode !== 38 && e.keyCode !== 40 && e.keyCode !== 8 && this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0)) {\n      this.queryString = currentRange.substring(currentRange.lastIndexOf(this.mentionChar) + 1).replace('\\u00a0', ' ');\n      this.searchLists(e);\n    } else if (this.queryString === '' && this.isPopupOpen && e.keyCode !== 38 && e.keyCode !== 40 && this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0)) {\n      this.searchLists(e);\n\n      if (!this.isListResetted) {\n        this.resetList(this.dataSource, this.fields);\n      }\n    }\n\n    this.isListResetted = false;\n  };\n\n  Mention.prototype.isMatchedText = function () {\n    var isMatched = false;\n\n    for (var i = 0; i < (this.liCollections && this.liCollections.length); i++) {\n      if (this.getTextRange() && this.getTextRange().substring(this.getTextRange().lastIndexOf(this.mentionChar) + 1).replace('\\u00a0', ' ').trim() === this.liCollections[i].getAttribute('data-value').toLowerCase()) {\n        isMatched = true;\n      }\n    }\n\n    return isMatched;\n  };\n\n  Mention.prototype.getCurrentRange = function () {\n    this.range = this.inputElement.ownerDocument.getSelection().getRangeAt(0);\n    return this.range;\n  };\n\n  Mention.prototype.searchLists = function (e) {\n    var _this = this;\n\n    this.isDataFetched = false;\n\n    if (isNullOrUndefined(this.list)) {\n      _super.prototype.render.call(this);\n\n      this.unWireListEvents();\n      this.wireListEvents();\n    }\n\n    if (e.type !== 'mousedown' && (e.keyCode === 40 || e.keyCode === 38)) {\n      this.queryString = this.queryString === '' ? null : this.queryString;\n      this.beforePopupOpen = true;\n      this.resetList(this.dataSource, this.fields);\n      return;\n    }\n\n    this.isSelected = false;\n    this.activeIndex = null;\n    var eventArgs = {\n      preventDefaultAction: false,\n      text: this.queryString,\n      updateData: function (dataSource, query, fields) {\n        if (eventArgs.cancel) {\n          return;\n        }\n\n        _this.isFiltered = true;\n\n        _this.filterAction(dataSource, query, fields);\n      },\n      cancel: false\n    };\n    this.trigger('filtering', eventArgs, function (eventArgs) {\n      if (!eventArgs.cancel && !_this.isFiltered && !eventArgs.preventDefaultAction) {\n        _this.filterAction(_this.dataSource, null, _this.fields);\n      }\n    });\n  };\n\n  Mention.prototype.filterAction = function (dataSource, query, fields) {\n    this.beforePopupOpen = true;\n\n    if (this.queryString.length >= this.minLength) {\n      this.resetList(dataSource, fields, query);\n      this.isListResetted = true;\n    } else {\n      if (this.isPopupOpen) {\n        this.hidePopup();\n      }\n\n      this.beforePopupOpen = false;\n    }\n\n    this.setDataIndex();\n    this.renderReactTemplates();\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Mention.prototype.onActionComplete = function (ulElement, list, e, isUpdated) {\n    _super.prototype.onActionComplete.call(this, ulElement, list, e);\n\n    if (this.isActive) {\n      if (!isNullOrUndefined(ulElement)) {\n        attributes(ulElement, {\n          'id': this.inputElement.id + '_options',\n          'role': 'listbox',\n          'aria-hidden': 'false'\n        });\n      }\n\n      var focusItem = ulElement.querySelector('.' + dropDownBaseClasses.li);\n\n      if (focusItem) {\n        focusItem.classList.add(dropDownBaseClasses.selected);\n        this.selectedLI = focusItem;\n        var value = this.getFormattedValue(focusItem.getAttribute('data-value'));\n        this.selectEventCallback(focusItem, this.getDataByValue(value), value, true);\n      }\n    }\n  };\n\n  Mention.prototype.setDataIndex = function () {\n    for (var i = 0; this.liCollections && i < this.liCollections.length; i++) {\n      this.liCollections[i].setAttribute('data-index', i.toString());\n    }\n  };\n\n  Mention.prototype.listOption = function (dataSource, fieldsSettings) {\n    var _this = this;\n\n    var fields = _super.prototype.listOption.call(this, dataSource, fieldsSettings);\n\n    if (isNullOrUndefined(fields.itemCreated)) {\n      fields.itemCreated = function (e) {\n        if (_this.highlight) {\n          if (_this.inputElement.tagName === _this.getNgDirective() && _this.itemTemplate) {\n            setTimeout(function () {\n              highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);\n            }, 0);\n          } else {\n            highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);\n          }\n        }\n      };\n    } else {\n      var itemCreated_1 = fields.itemCreated;\n\n      fields.itemCreated = function (e) {\n        if (_this.highlight) {\n          highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);\n        }\n\n        itemCreated_1.apply(_this, [e]);\n      };\n    }\n\n    return fields;\n  };\n\n  Mention.prototype.elementValue = function () {\n    if (!this.isContentEditable(this.inputElement)) {\n      return this.inputElement.value.replace(this.mentionChar, '');\n    } else {\n      return this.inputElement.textContent.replace(this.mentionChar, '');\n    }\n  };\n\n  Mention.prototype.getQuery = function (query) {\n    var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();\n    var filterType = this.queryString === '' && !isNullOrUndefined(this.elementValue()) ? 'equal' : this.filterType;\n    var queryString = this.queryString === '' && !isNullOrUndefined(this.elementValue()) ? this.elementValue() : this.queryString;\n\n    if (this.isFiltered) {\n      return filterQuery;\n    }\n\n    if (this.queryString !== null && this.queryString !== '') {\n      var dataType = this.typeOfData(this.dataSource).typeof;\n\n      if (!(this.dataSource instanceof DataManager) && dataType === 'string' || dataType === 'number') {\n        filterQuery.where('', filterType, queryString, this.ignoreCase, this.ignoreAccent);\n      } else {\n        var mapping = !isNullOrUndefined(this.fields.text) ? this.fields.text : '';\n        filterQuery.where(mapping, filterType, queryString, this.ignoreCase, this.ignoreAccent);\n      }\n    }\n\n    if (!isNullOrUndefined(this.suggestionCount)) {\n      // Since defualt value of suggestioncount is 25, checked the condition\n      if (this.suggestionCount !== 25) {\n        for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {\n          if (filterQuery.queries[queryElements].fn === 'onTake') {\n            filterQuery.queries.splice(queryElements, 1);\n          }\n        }\n      }\n\n      filterQuery.take(this.suggestionCount);\n    }\n\n    return filterQuery;\n  };\n\n  Mention.prototype.renderHightSearch = function () {\n    if (this.highlight) {\n      for (var i = 0; i < this.liCollections.length; i++) {\n        var isHighlight = this.ulElement.querySelector('.e-active');\n\n        if (!isHighlight) {\n          revertHighlightSearch(this.liCollections[i]);\n          highlightSearch(this.liCollections[i], this.queryString, this.ignoreCase, this.filterType);\n        }\n      }\n    }\n  };\n\n  Mention.prototype.getTextRange = function () {\n    var text;\n\n    if (!this.isContentEditable(this.inputElement)) {\n      var component = this.inputElement;\n\n      if (!isNullOrUndefined(component)) {\n        var startPos = component.selectionStart;\n\n        if (component.value && startPos >= 0) {\n          text = component.value.substring(0, startPos);\n        }\n      }\n    } else {\n      if (this.range) {\n        var selectedElem = this.range.startContainer;\n\n        if (!isNullOrUndefined(selectedElem)) {\n          var workingNodeContent = selectedElem.textContent;\n          var selectStartOffset = this.range.startOffset;\n\n          if (workingNodeContent && selectStartOffset >= 0) {\n            text = workingNodeContent.substring(0, selectStartOffset);\n          }\n        }\n      }\n    }\n\n    return text;\n  };\n\n  Mention.prototype.getLastLetter = function (text) {\n    if (isNullOrUndefined(text)) {\n      return '';\n    }\n\n    var textValue = text.replace(/\\u00A0/g, ' ');\n    var words = textValue.split(/\\s+/);\n    var wordCnt = words.length - 1;\n    return words[wordCnt].trim();\n  };\n\n  Mention.prototype.isContentEditable = function (element) {\n    return element && element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA';\n  };\n  /**\n   * Opens the popup that displays the list of items.\n   *\n   * @returns {void}\n   */\n\n\n  Mention.prototype.showPopup = function () {\n    this.beforePopupOpen = true;\n\n    if (document.activeElement != this.inputElement) {\n      this.inputElement.focus();\n    }\n\n    this.queryString = this.didPopupOpenByTypingInitialChar ? this.queryString : '';\n    this.didPopupOpenByTypingInitialChar = false;\n\n    if (this.isContentEditable(this.inputElement)) {\n      this.range = this.getCurrentRange();\n    }\n\n    if (!this.isTyped) {\n      this.resetList(this.dataSource, this.fields);\n    }\n\n    if (isNullOrUndefined(this.list)) {\n      this.initValue();\n    }\n\n    this.renderPopup();\n    attributes(this.inputElement, {\n      'aria-activedescendant': this.selectedElementID\n    });\n\n    if (this.selectedElementID == null) {\n      this.inputElement.removeAttribute('aria-activedescendant');\n    }\n  };\n  /* eslint-disable valid-jsdoc, jsdoc/require-param */\n\n  /**\n   * Hides the popup if it is in an open state.\n   *\n   * @returns {void}\n   */\n\n\n  Mention.prototype.hidePopup = function (e) {\n    this.removeSelection();\n    this.closePopup(0, e);\n  };\n\n  Mention.prototype.closePopup = function (delay, e) {\n    var _this = this;\n\n    if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {\n      return;\n    }\n\n    EventHandler.remove(document, 'mousedown', this.onDocumentClick);\n    this.inputElement.removeAttribute('aria-owns');\n    this.inputElement.removeAttribute('aria-activedescendant');\n    this.beforePopupOpen = false;\n    var animModel = {\n      name: 'FadeOut',\n      duration: 100,\n      delay: delay ? delay : 0\n    };\n    var popupInstance = this.popupObj;\n    var eventArgs = {\n      popup: popupInstance,\n      cancel: false,\n      animation: animModel,\n      event: e || null\n    };\n    this.trigger('closed', eventArgs, function (eventArgs) {\n      if (!eventArgs.cancel && _this.popupObj) {\n        if (_this.isPopupOpen) {\n          _this.popupObj.hide(new Animation(eventArgs.animation));\n        } else {\n          _this.destroyPopup();\n        }\n      }\n    });\n  };\n\n  Mention.prototype.renderPopup = function () {\n    var _this = this;\n\n    var args = {\n      cancel: false\n    };\n    this.trigger('beforeOpen', args, function (args) {\n      if (!args.cancel) {\n        var popupEle_1;\n\n        if (isNullOrUndefined(_this.target)) {\n          popupEle_1 = _this.createElement('div', {\n            id: _this.inputElement.id + '_popup',\n            className: 'e-mention e-popup ' + (_this.cssClass != null ? _this.cssClass : '')\n          });\n        } else {\n          popupEle_1 = _this.element;\n\n          if (_this.cssClass != null) {\n            addClass([popupEle_1], _this.cssClass.split(' '));\n          }\n        }\n\n        if (!isNullOrUndefined(_this.target)) {\n          popupEle_1.id = _this.inputElement.id + '_popup';\n        }\n\n        _this.listHeight = formatUnit(_this.popupHeight);\n\n        if (!isNullOrUndefined(_this.list.querySelector('li')) && !_this.initRemoteRender) {\n          var li = _this.list.querySelector('.' + dropDownBaseClasses.focus);\n\n          if (!isNullOrUndefined(li)) {\n            _this.selectedLI = li;\n\n            var value = _this.getFormattedValue(li.getAttribute('data-value'));\n\n            _this.selectEventCallback(li, _this.getDataByValue(value), value, true);\n          }\n        }\n\n        append([_this.list], popupEle_1);\n\n        if (_this.inputElement.parentElement && _this.inputElement.parentElement.parentElement && _this.inputElement.parentElement.parentElement.classList.contains('e-richtexteditor')) {\n          if (popupEle_1.firstElementChild && popupEle_1.firstElementChild.childElementCount > 0) {\n            popupEle_1.firstElementChild.setAttribute('aria-owns', _this.inputElement.parentElement.parentElement.id);\n          }\n        }\n\n        if (!_this.popupObj || !document.body.contains(_this.popupObj.element) || !document.contains(popupEle_1) && isNullOrUndefined(_this.target)) {\n          document.body.appendChild(popupEle_1);\n        }\n\n        var coordinates_1;\n        popupEle_1.style.visibility = 'hidden';\n\n        _this.setHeight(popupEle_1);\n\n        var offsetValue = 0;\n        var left = 0;\n\n        _this.initializePopup(popupEle_1, offsetValue, left);\n\n        _this.checkCollision(popupEle_1);\n\n        popupEle_1.style.visibility = 'visible';\n        addClass([popupEle_1], ['e-mention', 'e-popup', 'e-popup-close']);\n\n        if (!isNullOrUndefined(_this.list)) {\n          _this.unWireListEvents();\n\n          _this.wireListEvents();\n        }\n\n        _this.selectedElementID = _this.selectedLI ? _this.selectedLI.id : null;\n        attributes(_this.inputElement, {\n          'aria-owns': _this.inputElement.id + '_options',\n          'aria-activedescendant': _this.selectedElementID\n        });\n\n        if (_this.selectedElementID == null) {\n          _this.inputElement.removeAttribute('aria-activedescendant');\n        }\n\n        var animModel = {\n          name: 'FadeIn',\n          duration: 100\n        };\n        _this.beforePopupOpen = true;\n        var popupInstance = _this.popupObj;\n        var eventArgs = {\n          popup: popupInstance,\n          cancel: false,\n          animation: animModel\n        };\n\n        _this.trigger('opened', eventArgs, function (eventArgs) {\n          if (!eventArgs.cancel) {\n            _this.renderReactTemplates();\n\n            _this.popupObj.show(new Animation(eventArgs.animation), _this.zIndex === 1000 ? _this.inputElement : null);\n\n            if (isNullOrUndefined(_this.getTriggerCharPosition())) {\n              return;\n            }\n\n            coordinates_1 = _this.getCoordinates(_this.inputElement, _this.getTriggerCharPosition());\n\n            if (!_this.isCollided) {\n              popupEle_1.style.cssText = 'top: '.concat(coordinates_1.top.toString(), 'px;\\n left: ').concat(coordinates_1.left.toString(), 'px;\\nposition: absolute;\\n display: block;');\n            } else {\n              popupEle_1.style.left = formatUnit(coordinates_1.left);\n              popupEle_1.style.top = formatUnit(coordinates_1.top - parseInt(_this.popupHeight.toString()));\n              _this.isCollided = false;\n            }\n\n            popupEle_1.style.width = _this.popupWidth !== '100%' && !isNullOrUndefined(_this.popupWidth) ? formatUnit(_this.popupWidth) : 'auto';\n\n            _this.setHeight(popupEle_1);\n\n            popupEle_1.style.zIndex = _this.zIndex === 1000 ? getZindexPartial(popupEle_1).toString() : _this.zIndex.toString();\n          } else {\n            _this.beforePopupOpen = false;\n\n            _this.destroyPopup();\n          }\n        });\n      } else {\n        _this.beforePopupOpen = false;\n      }\n    });\n  };\n\n  Mention.prototype.setHeight = function (popupEle) {\n    if (this.popupHeight !== 'auto' && this.list) {\n      this.list.style.maxHeight = (parseInt(this.listHeight, 10) - 2).toString() + 'px'; // due to box-sizing property\n\n      popupEle.style.maxHeight = formatUnit(this.popupHeight);\n    } else {\n      popupEle.style.height = 'auto';\n    }\n  };\n\n  Mention.prototype.checkCollision = function (popupEle) {\n    if (!Browser.isDevice || Browser.isDevice && !(this.getModuleName() === 'mention')) {\n      var coordinates = this.getCoordinates(this.inputElement, this.getTriggerCharPosition());\n      var collision = isCollide(popupEle, null, coordinates.left, coordinates.top);\n\n      if (collision.length > 0) {\n        popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + 'px';\n        this.isCollided = true;\n      }\n\n      this.popupObj.resolveCollision();\n    }\n  };\n\n  Mention.prototype.getTriggerCharPosition = function () {\n    var mostRecentTriggerCharPos;\n    var currentRange = this.getTextRange();\n\n    if (currentRange !== undefined && currentRange !== null) {\n      mostRecentTriggerCharPos = 0;\n      var idx = currentRange.lastIndexOf(this.mentionChar);\n\n      if (idx >= mostRecentTriggerCharPos) {\n        mostRecentTriggerCharPos = idx;\n      }\n    }\n\n    return mostRecentTriggerCharPos ? mostRecentTriggerCharPos : 0;\n  };\n\n  Mention.prototype.initializePopup = function (element, offsetValue, left) {\n    var _this = this;\n\n    this.popupObj = new Popup(element, {\n      width: this.setWidth(),\n      targetType: 'relative',\n      relateTo: this.inputElement,\n      collision: {\n        X: 'flip',\n        Y: 'flip'\n      },\n      offsetY: offsetValue,\n      enableRtl: this.enableRtl,\n      offsetX: left,\n      position: {\n        X: 'left',\n        Y: 'bottom'\n      },\n      actionOnScroll: 'hide',\n      zIndex: this.zIndex,\n      close: function () {\n        _this.destroyPopup();\n      },\n      open: function () {\n        EventHandler.add(document, 'mousedown', _this.onDocumentClick, _this);\n        _this.isPopupOpen = true;\n\n        _this.setDataIndex();\n      }\n    });\n  };\n\n  Mention.prototype.setWidth = function () {\n    var width = formatUnit(this.popupWidth);\n\n    if (width.indexOf('%') > -1) {\n      var inputWidth = this.inputElement.offsetWidth * parseFloat(width) / 100;\n      width = inputWidth.toString() + 'px';\n    }\n\n    return width;\n  };\n\n  Mention.prototype.destroyPopup = function () {\n    this.isPopupOpen = false;\n    this.popupObj.destroy();\n\n    if (isNullOrUndefined(this.target)) {\n      detach(this.popupObj.element);\n    } else {\n      this.popupObj.element.innerHTML = '';\n      this.popupObj.element.removeAttribute('style');\n      this.popupObj.element.removeAttribute('aria-disabled');\n    }\n  };\n\n  Mention.prototype.onDocumentClick = function (e) {\n    var target = e.target;\n\n    if (!(!isNullOrUndefined(this.popupObj) && closest(target, '#' + this.popupObj.element.id))) {\n      this.hidePopup(e);\n    }\n  };\n\n  Mention.prototype.getCoordinates = function (element, position) {\n    var properties = ['direction', 'boxSizing', 'width', 'height', 'overflowX', 'overflowY', 'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'fontStyle', 'fontVariant', 'fontWeight', 'fontStretch', 'fontSize', 'fontSizeAdjust', 'lineHeight', 'fontFamily', 'textAlign', 'textTransform', 'textIndent', 'textDecoration', 'letterSpacing', 'wordSpacing'];\n    var div;\n    var span;\n    var range;\n    var globalRange;\n    var coordinates;\n    var computed;\n    var rect;\n\n    if (!this.isContentEditable(this.inputElement)) {\n      div = this.createElement('div', {\n        className: 'e-form-mirror-div'\n      });\n      document.body.appendChild(div);\n      computed = getComputedStyle(element);\n      div.style.position = 'absolute';\n      div.style.visibility = 'hidden'; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      properties.forEach(function (prop) {\n        // eslint-disable-next-line security/detect-object-injection\n        div.style[prop] = computed[prop];\n      });\n      div.textContent = element.value.substring(0, position);\n\n      if (this.inputElement.nodeName === 'INPUT') {\n        div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n      }\n\n      span = this.createElement('span');\n      span.textContent = element.value.substring(position) || '.';\n      div.appendChild(span);\n      rect = element.getBoundingClientRect();\n    } else {\n      var selectedNodePosition = this.getTriggerCharPosition();\n      globalRange = this.range;\n      range = document.createRange();\n\n      if (this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1 && this.isTyped) {\n        range.setStart(globalRange.startContainer, selectedNodePosition);\n        range.setEnd(globalRange.startContainer, selectedNodePosition);\n      } else {\n        range.setStart(globalRange.startContainer, globalRange.startOffset);\n        range.setEnd(globalRange.startContainer, globalRange.endOffset);\n      }\n\n      this.isTyped = false;\n      range.collapse(false);\n      rect = range.getBoundingClientRect().top === 0 ? range.startContainer.getClientRects()[0] : range.getBoundingClientRect();\n    }\n\n    var doc = document.documentElement;\n    var windowLeft = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n    var windowTop = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n    var width = 0;\n\n    if (!isNullOrUndefined(range) && range.getBoundingClientRect().top === 0) {\n      for (var i = 0; i < this.range.startContainer.childNodes.length; i++) {\n        if (this.range.startContainer.childNodes[i].nodeType !== Node.TEXT_NODE && this.range.startContainer.childNodes[i].textContent.trim() !== '') {\n          width += this.range.startContainer.childNodes[i].getClientRects()[0].width;\n        } else if (this.range.startContainer.childNodes[i].textContent !== '') {\n          var span_1 = document.createElement(\"span\");\n          span_1.innerHTML = this.range.startContainer.childNodes[i].nodeValue;\n          document.body.appendChild(span_1);\n          var textNodeWidth = span_1.offsetWidth;\n          document.body.removeChild(span_1);\n          width += textNodeWidth;\n        }\n      }\n    }\n\n    if (!this.isContentEditable(this.inputElement)) {\n      coordinates = {\n        top: rect.top + windowTop + span.offsetTop + parseInt(computed.borderTopWidth, 10) + parseInt(computed.fontSize, 10) + 3 - element.scrollTop - (this.isCollided ? 10 : 0),\n        left: rect.left + windowLeft + span.offsetLeft + parseInt(computed.borderLeftWidth, 10)\n      };\n      document.body.removeChild(div);\n    } else {\n      coordinates = {\n        top: rect.top + windowTop + parseInt(getComputedStyle(this.inputElement).fontSize, 10) - (this.isCollided ? 10 : 0),\n        left: rect.left + windowLeft + width\n      };\n    }\n\n    return coordinates;\n  };\n\n  Mention.prototype.initValue = function () {\n    this.renderList();\n\n    if (this.dataSource instanceof DataManager) {\n      this.initRemoteRender = true;\n    } else {\n      this.updateValues();\n    }\n  };\n\n  Mention.prototype.updateValues = function () {\n    var li = this.list.querySelector('.' + dropDownBaseClasses.focus);\n\n    if (!isNullOrUndefined(li)) {\n      this.setSelection(li, null);\n    }\n  };\n\n  Mention.prototype.renderList = function () {\n    _super.prototype.render.call(this);\n\n    this.unWireListEvents();\n    this.wireListEvents();\n  };\n  /**\n   * Event binding for list\n   *\n   * @returns {void}\n   */\n\n\n  Mention.prototype.wireListEvents = function () {\n    EventHandler.add(this.list, 'click', this.onMouseClick, this);\n    EventHandler.add(this.list, 'mouseover', this.onMouseOver, this);\n    EventHandler.add(this.list, 'mouseout', this.onMouseLeave, this);\n  };\n  /**\n   * Event un binding for list items.\n   *\n   * @returns {void}\n   */\n\n\n  Mention.prototype.unWireListEvents = function () {\n    EventHandler.remove(this.list, 'click', this.onMouseClick);\n    EventHandler.remove(this.list, 'mouseover', this.onMouseOver);\n    EventHandler.remove(this.list, 'mouseout', this.onMouseLeave);\n  };\n\n  Mention.prototype.onMouseClick = function (e) {\n    var target = e.target;\n    var li = closest(target, '.' + dropDownBaseClasses.li);\n\n    if (!this.isValidLI(li)) {\n      return;\n    }\n\n    this.isSelected = true;\n    this.setSelection(li, e);\n    var delay = 100;\n    this.closePopup(delay, e);\n    this.inputElement.focus();\n  };\n\n  Mention.prototype.updateSelectedItem = function (li, e, preventSelect, isSelection) {\n    var _this = this;\n\n    this.removeSelection();\n    li.classList.add(dropDownBaseClasses.selected);\n    this.removeHover();\n    var value = this.getFormattedValue(li.getAttribute('data-value'));\n    var selectedData = this.getDataByValue(value);\n\n    if (!preventSelect && !isNullOrUndefined(e) && !(e.action === \"down\" || e.action === \"up\")) {\n      var items = this.detachChanges(selectedData);\n      this.isSelected = true;\n      var eventArgs = {\n        e: e,\n        item: li,\n        itemData: items,\n        isInteracted: e ? true : false,\n        cancel: false\n      };\n      this.trigger('select', eventArgs, function (eventArgs) {\n        if (eventArgs.cancel) {\n          li.classList.remove(dropDownBaseClasses.selected);\n          _this.isSelected = false;\n          _this.isSelectCancel = true;\n        } else {\n          _this.selectEventCallback(li, selectedData, value);\n\n          if (isSelection) {\n            _this.setSelectOptions(li, e);\n          }\n        }\n      });\n    } else {\n      this.selectEventCallback(li, selectedData, value);\n\n      if (isSelection) {\n        this.setSelectOptions(li, e);\n      }\n    }\n  };\n\n  Mention.prototype.setSelection = function (li, e) {\n    if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || this.isPopupOpen && this.isSelected && li.classList.contains(dropDownBaseClasses.selected))) {\n      this.updateSelectedItem(li, e, false, true);\n    } else {\n      this.setSelectOptions(li, e);\n    }\n  };\n\n  Mention.prototype.setSelectOptions = function (li, e) {\n    if (this.list) {\n      this.removeHover();\n    }\n\n    this.previousSelectedLI = !isNullOrUndefined(this.selectedLI) ? this.selectedLI : null;\n    this.selectedLI = li;\n\n    if (this.isPopupOpen && !isNullOrUndefined(this.selectedLI)) {\n      this.setScrollPosition(e);\n    }\n\n    if (e && (e.keyCode === 38 || e.keyCode === 40)) {\n      return;\n    }\n\n    if (isNullOrUndefined(e) || this.setValue(e)) {\n      return;\n    }\n  };\n\n  Mention.prototype.setScrollPosition = function (e) {\n    if (!isNullOrUndefined(e)) {\n      switch (e.action) {\n        case 'pageDown':\n        case 'down':\n        case 'end':\n          this.scrollBottom();\n          break;\n\n        default:\n          this.scrollTop();\n          break;\n      }\n    } else {\n      this.scrollBottom(true);\n    }\n  };\n\n  Mention.prototype.scrollBottom = function (isInitial) {\n    if (!isNullOrUndefined(this.selectedLI)) {\n      var currentOffset = this.list.offsetHeight;\n      var nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n      var nextOffset = this.list.scrollTop + nextBottom - currentOffset;\n      nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset;\n      var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n\n      if (this.activeIndex === 0) {\n        this.list.scrollTop = 0;\n      } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n        this.list.scrollTop = nextOffset;\n      }\n    }\n  };\n\n  Mention.prototype.scrollTop = function () {\n    if (!isNullOrUndefined(this.selectedLI)) {\n      var nextOffset = this.selectedLI.offsetTop - this.list.scrollTop;\n      nextOffset = this.fields.groupBy && nextOffset;\n      var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;\n\n      if (this.activeIndex === 0) {\n        this.list.scrollTop = 0;\n      } else if (nextOffset < 0) {\n        this.list.scrollTop = this.list.scrollTop + nextOffset;\n      } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {\n        this.list.scrollTop = this.selectedLI.offsetTop;\n      }\n    }\n  };\n\n  Mention.prototype.selectEventCallback = function (li, selectedData, value, selectLi) {\n    this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;\n    this.item = li;\n    this.itemData = selectedData;\n    var focusedItem = this.list.querySelector('.' + dropDownBaseClasses.focus);\n\n    if (focusedItem) {\n      removeClass([focusedItem], dropDownBaseClasses.focus);\n    }\n\n    if (selectLi) {\n      addClass([li], dropDownBaseClasses.selected);\n    }\n\n    li.setAttribute('aria-selected', 'true');\n    this.activeIndex = this.getIndexByValue(value);\n  };\n\n  Mention.prototype.detachChanges = function (value) {\n    var items;\n\n    if (typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number') {\n      items = Object.defineProperties({}, {\n        value: {\n          value: value,\n          enumerable: true\n        },\n        text: {\n          value: value,\n          enumerable: true\n        }\n      });\n    } else {\n      items = value;\n    }\n\n    return items;\n  };\n\n  Mention.prototype.setValue = function (e) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (!this.isReact) {\n      if (!isNullOrUndefined(this.displayTemplate)) {\n        this.setDisplayTemplate();\n      }\n\n      this.updateMentionValue(e);\n      return true;\n    } else {\n      if (!isNullOrUndefined(this.displayTemplate)) {\n        this.setDisplayTemplate(e);\n      } else {\n        this.updateMentionValue(e);\n      }\n\n      return true;\n    }\n  };\n\n  Mention.prototype.updateMentionValue = function (e) {\n    var dataItem = this.getItemData();\n    var textSuffix;\n    var value;\n    var endPos;\n    var range;\n    var globalRange;\n    var selection = this.inputElement.ownerDocument.getSelection();\n    var startPos = this.getTriggerCharPosition();\n    textSuffix = typeof this.suffixText === 'string' ? this.suffixText : '';\n\n    if (this.isSelectCancel) {\n      this.isSelectCancel = false;\n      return;\n    }\n\n    if (dataItem.text !== null) {\n      value = this.mentionVal(dataItem.text);\n    }\n\n    if (!this.isContentEditable(this.inputElement)) {\n      var myField = this.inputElement;\n      var currentTriggerSnippet = this.getTextRange().substring(startPos + this.mentionChar.length, this.getTextRange().length);\n      value += textSuffix;\n      endPos = startPos + this.mentionChar.length;\n      endPos += currentTriggerSnippet.length;\n      myField.value = myField.value.substring(0, startPos) + value + myField.value.substring(endPos, myField.value.length);\n      myField.selectionStart = startPos + value.length;\n      myField.selectionEnd = startPos + value.length;\n\n      if (this.isPopupOpen) {\n        this.hidePopup();\n      }\n\n      this.onChangeEvent(e);\n    } else {\n      endPos = this.getTriggerCharPosition() + this.mentionChar.length;\n\n      if (this.range && this.range.startContainer.textContent.trim() !== this.mentionChar) {\n        endPos = this.range.endOffset;\n      }\n\n      globalRange = this.range;\n      range = document.createRange();\n\n      if (this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1 || this.getTextRange() && this.getTextRange().trim() === this.mentionChar) {\n        range.setStart(globalRange.startContainer, startPos);\n        range.setEnd(globalRange.startContainer, endPos);\n      } else {\n        if (globalRange.commonAncestorContainer.textContent.trim() !== '' && !isNullOrUndefined(globalRange.commonAncestorContainer.textContent.trim()) && this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1) {\n          range.setStart(globalRange.startContainer, globalRange.startOffset - 1);\n          range.setEnd(globalRange.startContainer, globalRange.endOffset - 1);\n        } else {\n          range.setStart(globalRange.startContainer, globalRange.startOffset);\n          range.setEnd(globalRange.startContainer, globalRange.endOffset);\n        }\n      }\n\n      this.isTyped = false;\n      range.deleteContents();\n      var element = this.createElement('div');\n      element.innerHTML = value;\n      var frag = document.createDocumentFragment();\n      var node = void 0;\n      var lastNode = void 0; // eslint-disable-next-line no-cond-assign\n\n      while (node = element.firstChild) {\n        lastNode = frag.appendChild(node);\n      }\n\n      range.insertNode(frag);\n\n      if (lastNode) {\n        range = range.cloneRange();\n        range.setStartAfter(lastNode);\n        range.collapse(true);\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n\n      if (this.isPopupOpen) {\n        this.hidePopup();\n      }\n\n      this.onChangeEvent(e);\n    }\n  };\n\n  Mention.prototype.mentionVal = function (value) {\n    var showChar = this.showMentionChar ? this.mentionChar : '';\n\n    if (!isNullOrUndefined(this.displayTemplate) && !isNullOrUndefined(this.displayTempElement)) {\n      value = this.displayTempElement.innerHTML;\n    }\n\n    if (this.isContentEditable(this.inputElement)) {\n      return '<span contenteditable=\"false\" class=\"e-mention-chip\">' + showChar + value + '</span>'.concat(typeof this.suffixText === 'string' ? this.suffixText : ' ');\n    } else {\n      return showChar + value;\n    }\n  };\n\n  Mention.prototype.setDisplayTemplate = function (e) {\n    var _this = this;\n\n    var compiledString; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    if (this.isReact) {\n      this.clearTemplate(['displayTemplate']);\n\n      if (this.displayTempElement) {\n        detach(this.displayTempElement);\n        this.displayTempElement = null;\n      }\n    }\n\n    if (!this.displayTempElement) {\n      this.displayTempElement = this.createElement('div');\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    if (!this.isReact) {\n      this.displayTempElement.innerHTML = '';\n    }\n\n    compiledString = compile(this.displayTemplate); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var displayCompTemp = compiledString(this.itemData, this, 'displayTemplate', this.displayTemplateId, this.isStringTemplate, null, this.displayTempElement);\n\n    if (displayCompTemp && displayCompTemp.length > 0) {\n      append(displayCompTemp, this.displayTempElement);\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    if (!this.isReact) {\n      this.renderTemplates();\n    } else {\n      this.renderTemplates(function () {\n        _this.updateMentionValue(e);\n      });\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  Mention.prototype.renderTemplates = function (callBack) {\n    this.renderReactTemplates(callBack);\n  };\n\n  Mention.prototype.setSpinnerTemplate = function () {\n    var _this = this;\n\n    var compiledString; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    if (this.isReact) {\n      this.clearTemplate(['spinnerTemplate']);\n\n      if (this.spinnerTemplateElement) {\n        detach(this.spinnerTemplateElement);\n        this.spinnerTemplateElement = null;\n      }\n    }\n\n    if (!this.spinnerTemplateElement) {\n      this.spinnerTemplateElement = this.createElement('div');\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    if (!this.isReact) {\n      this.spinnerTemplateElement.innerHTML = '';\n    }\n\n    compiledString = compile(this.spinnerTemplate); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    var spinnerCompTemp = compiledString(null, this, 'spinnerTemplate', this.spinnerTemplateId, this.isStringTemplate, null, this.spinnerTemplateElement);\n\n    if (spinnerCompTemp && spinnerCompTemp.length > 0) {\n      for (var i = 0; i < spinnerCompTemp.length; i++) {\n        this.spinnerTemplateElement.appendChild(spinnerCompTemp[i]);\n      }\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    if (!this.isReact) {\n      this.renderTemplates();\n      this.popupObj.element.appendChild(this.spinnerTemplateElement);\n    } else {\n      this.renderTemplates(function () {\n        _this.popupObj.element.appendChild(_this.spinnerTemplateElement);\n      });\n    }\n  };\n\n  Mention.prototype.onChangeEvent = function (eve) {\n    this.isSelected = false;\n    var items = this.detachMentionChanges(this.itemData);\n    var preItems;\n\n    if (typeof this.previousItemData === 'string' || typeof this.previousItemData === 'boolean' || typeof this.previousItemData === 'number') {\n      preItems = Object.defineProperties({}, {\n        value: {\n          value: this.previousItemData,\n          enumerable: true\n        },\n        text: {\n          value: this.previousItemData,\n          enumerable: true\n        }\n      });\n    } else {\n      preItems = this.previousItemData;\n    }\n\n    var eventArgs = {\n      e: eve,\n      item: this.item,\n      itemData: items,\n      previousItem: this.previousSelectedLI,\n      previousItemData: preItems,\n      isInteracted: eve ? true : false,\n      value: this.item.innerHTML,\n      element: this.inputElement\n    };\n    this.trigger('change', eventArgs);\n  };\n\n  Mention.prototype.detachMentionChanges = function (value) {\n    var items;\n\n    if (typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number') {\n      items = Object.defineProperties({}, {\n        value: {\n          value: value,\n          enumerable: true\n        },\n        text: {\n          value: value,\n          enumerable: true\n        }\n      });\n    } else {\n      items = value;\n    }\n\n    return items;\n  };\n\n  Mention.prototype.getItemData = function () {\n    var fields = this.fields;\n    var dataItem = null;\n    dataItem = this.itemData;\n    var dataValue;\n    var dataText;\n\n    if (!isNullOrUndefined(dataItem)) {\n      dataValue = getValue(fields.value, dataItem);\n      dataText = getValue(fields.text, dataItem);\n    }\n\n    var value = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataValue : dataItem;\n    var text = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataText : dataItem;\n    return {\n      value: value,\n      text: text\n    };\n  };\n\n  Mention.prototype.removeSelection = function () {\n    if (this.list) {\n      var selectedItems = this.list.querySelectorAll('.' + dropDownBaseClasses.selected);\n\n      if (selectedItems.length) {\n        removeClass(selectedItems, dropDownBaseClasses.selected);\n        selectedItems[0].removeAttribute('aria-selected');\n      }\n    }\n  };\n\n  Mention.prototype.onMouseOver = function (e) {\n    var currentLi = closest(e.target, '.' + dropDownBaseClasses.li);\n    this.setHover(currentLi);\n  };\n\n  Mention.prototype.setHover = function (li) {\n    if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {\n      this.removeHover();\n      addClass([li], dropDownBaseClasses.hover);\n    }\n  };\n\n  Mention.prototype.removeHover = function () {\n    if (this.list) {\n      var hoveredItem = this.list.querySelectorAll('.' + dropDownBaseClasses.hover);\n\n      if (hoveredItem && hoveredItem.length) {\n        removeClass(hoveredItem, dropDownBaseClasses.hover);\n      }\n    }\n  };\n\n  Mention.prototype.isValidLI = function (li) {\n    return li && li.hasAttribute('role') && li.getAttribute('role') === 'option';\n  };\n\n  Mention.prototype.onMouseLeave = function () {\n    this.removeHover();\n  };\n  /**\n   * Search the entered text and show it in the suggestion list if available.\n   *\n   * @returns {void}\n   */\n\n\n  Mention.prototype.search = function (text, positionX, positionY) {\n    if (this.isContentEditable(this.inputElement)) {\n      this.range = this.getCurrentRange();\n    }\n\n    var currentRange = this.getTextRange();\n    var lastWordRange = this.getLastLetter(currentRange);\n\n    if (this.ignoreCase && (text === lastWordRange || text === lastWordRange.toLowerCase()) || !this.ignoreCase && text === lastWordRange) {\n      this.resetList(this.dataSource, this.fields);\n    } else {\n      if (this.isPopupOpen) {\n        this.hidePopup();\n      }\n\n      return;\n    }\n\n    if (isNullOrUndefined(this.list)) {\n      this.renderList();\n      this.renderPopup();\n    } else {\n      this.showPopup();\n    }\n\n    this.popupObj.element.style.left = formatUnit(positionX);\n    this.popupObj.element.style.top = formatUnit(positionY);\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n   *\n   * @method destroy\n   * @returns {void}\n   */\n\n\n  Mention.prototype.destroy = function () {\n    this.hidePopup();\n    this.unWireEvent();\n\n    if (this.list) {\n      this.unWireListEvents();\n    }\n\n    if (this.inputElement && !this.inputElement.classList.contains('e-' + this.getModuleName())) {\n      return;\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n\n  Mention.prototype.getLocaleName = function () {\n    return 'mention';\n  };\n\n  Mention.prototype.getNgDirective = function () {\n    return 'EJS-MENTION';\n  };\n  /**\n   * Return the module name of this component.\n   *\n   * @private\n   * @returns {string} Return the module name of this component.\n   */\n\n\n  Mention.prototype.getModuleName = function () {\n    return 'mention';\n  };\n\n  __decorate$7([Property(null)], Mention.prototype, \"cssClass\", void 0);\n\n  __decorate$7([Property('@')], Mention.prototype, \"mentionChar\", void 0);\n\n  __decorate$7([Property(false)], Mention.prototype, \"showMentionChar\", void 0);\n\n  __decorate$7([Property(false)], Mention.prototype, \"allowSpaces\", void 0);\n\n  __decorate$7([Property(null)], Mention.prototype, \"suffixText\", void 0);\n\n  __decorate$7([Property(25)], Mention.prototype, \"suggestionCount\", void 0);\n\n  __decorate$7([Property(0)], Mention.prototype, \"minLength\", void 0);\n\n  __decorate$7([Property('None')], Mention.prototype, \"sortOrder\", void 0);\n\n  __decorate$7([Property(true)], Mention.prototype, \"ignoreCase\", void 0);\n\n  __decorate$7([Property(false)], Mention.prototype, \"highlight\", void 0);\n\n  __decorate$7([Property()], Mention.prototype, \"locale\", void 0);\n\n  __decorate$7([Property('auto')], Mention.prototype, \"popupWidth\", void 0);\n\n  __decorate$7([Property('300px')], Mention.prototype, \"popupHeight\", void 0);\n\n  __decorate$7([Property(null)], Mention.prototype, \"displayTemplate\", void 0);\n\n  __decorate$7([Property(null)], Mention.prototype, \"itemTemplate\", void 0);\n\n  __decorate$7([Property('No records found')], Mention.prototype, \"noRecordsTemplate\", void 0);\n\n  __decorate$7([Property(null)], Mention.prototype, \"spinnerTemplate\", void 0);\n\n  __decorate$7([Property()], Mention.prototype, \"target\", void 0);\n\n  __decorate$7([Property([])], Mention.prototype, \"dataSource\", void 0);\n\n  __decorate$7([Property(null)], Mention.prototype, \"query\", void 0);\n\n  __decorate$7([Property('Contains')], Mention.prototype, \"filterType\", void 0);\n\n  __decorate$7([Complex({\n    text: null,\n    value: null,\n    iconCss: null,\n    groupBy: null\n  }, FieldSettings)], Mention.prototype, \"fields\", void 0);\n\n  __decorate$7([Event()], Mention.prototype, \"actionBegin\", void 0);\n\n  __decorate$7([Event()], Mention.prototype, \"actionComplete\", void 0);\n\n  __decorate$7([Event()], Mention.prototype, \"actionFailure\", void 0);\n\n  __decorate$7([Event()], Mention.prototype, \"change\", void 0);\n\n  __decorate$7([Event()], Mention.prototype, \"beforeOpen\", void 0);\n\n  __decorate$7([Event()], Mention.prototype, \"opened\", void 0);\n\n  __decorate$7([Event()], Mention.prototype, \"closed\", void 0);\n\n  __decorate$7([Event()], Mention.prototype, \"select\", void 0);\n\n  __decorate$7([Event()], Mention.prototype, \"filtering\", void 0);\n\n  __decorate$7([Event()], Mention.prototype, \"created\", void 0);\n\n  __decorate$7([Event()], Mention.prototype, \"destroyed\", void 0);\n\n  Mention = __decorate$7([NotifyPropertyChanges], Mention);\n  return Mention;\n}(DropDownBase);\n/**\n * export all modules from current location\n */\n\n/**\n * export all modules from current location\n */\n\n\nexport { incrementalSearch, Search, escapeCharRegExp, resetIncrementalSearchValues, highlightSearch, revertHighlightSearch, FieldSettings, dropDownBaseClasses, DropDownBase, dropDownListClasses, DropDownList, Fields, TreeSettings, DropDownTree, ComboBox, AutoComplete, MultiSelect, CheckBoxSelection, createFloatLabel, updateFloatLabelState, removeFloating, setPlaceHolder, floatLabelFocus, floatLabelBlur, encodePlaceholder, SelectionSettings, ToolbarSettings, ListBox, Mention }; //# sourceMappingURL=ej2-dropdowns.es5.js.map","map":null,"metadata":{},"sourceType":"module"}