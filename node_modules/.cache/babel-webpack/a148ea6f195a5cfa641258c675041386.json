{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * Angular Utility Module\n */\n\n/* tslint:disable */\n\nexport function applyMixins(derivedClass, baseClass) {\n  baseClass.forEach(function (baseClass) {\n    Object.getOwnPropertyNames(baseClass.prototype).forEach(function (name) {\n      if (!derivedClass.prototype.hasOwnProperty(name) || baseClass.isFormBase && name !== 'constructor') {\n        derivedClass.prototype[name] = baseClass.prototype[name];\n      }\n    });\n  });\n}\n/* tslint:disable */\n\nexport function ComponentMixins(baseClass) {\n  return function (derivedClass) {\n    applyMixins(derivedClass, baseClass);\n  };\n}\n/**\n * @private\n */\n\nexport function registerEvents(eventList, obj, direct) {\n  var ngEventsEmitter = {};\n\n  if (eventList && eventList.length) {\n    for (var _i = 0, eventList_1 = eventList; _i < eventList_1.length; _i++) {\n      var event_1 = eventList_1[_i];\n\n      if (direct === true) {\n        obj.propCollection[event_1] = new EventEmitter(false);\n        obj[event_1] = obj.propCollection[event_1];\n      } else {\n        ngEventsEmitter[event_1] = new EventEmitter(false);\n      }\n    }\n\n    if (direct !== true) {\n      obj.setProperties(ngEventsEmitter, true);\n    }\n  }\n}\n/**\n * @private\n */\n\nexport function clearTemplate(_this, templateNames, index) {\n  var regTemplates = Object.keys(_this.registeredTemplate);\n\n  if (regTemplates.length) {\n    /* istanbul ignore next */\n    var regProperties = templateNames && templateNames.filter(function (val) {\n      return /\\./g.test(val) ? false : true;\n    });\n    var tabTemp = _this.getModuleName() === 'tab';\n\n    for (var _i = 0, _a = regProperties && regProperties || regTemplates; _i < _a.length; _i++) {\n      var registeredTemplate = _a[_i];\n      /* istanbul ignore next */\n\n      if (index && index.length) {\n        for (var e = 0; e < index.length; e++) {\n          if (tabTemp) {\n            for (var m = 0; m < _this.registeredTemplate[registeredTemplate].length; m++) {\n              var value = _this.registeredTemplate[registeredTemplate][m];\n\n              if (value && value === index[e]) {\n                value.destroy();\n\n                _this.registeredTemplate[registeredTemplate].splice(m, 1);\n              }\n            }\n          } else {\n            for (var m = 0; m < _this.registeredTemplate.template.length; m++) {\n              var value = _this.registeredTemplate.template[m].rootNodes[0];\n\n              if (value === index[e]) {\n                var rt = _this.registeredTemplate[registeredTemplate];\n                rt[m].destroy();\n              }\n            }\n          }\n        }\n      } else {\n        if (_this.registeredTemplate[registeredTemplate]) {\n          for (var _b = 0, _c = _this.registeredTemplate[registeredTemplate]; _b < _c.length; _b++) {\n            var rt = _c[_b];\n\n            if (!rt.destroyed) {\n              if (rt._view) {\n                var pNode = rt._view.renderer.parentNode(rt.rootNodes[0]);\n\n                if (!isNullOrUndefined(pNode)) {\n                  for (var m = 0; m < rt.rootNodes.length; m++) {\n                    pNode.appendChild(rt.rootNodes[m]);\n                  }\n                }\n              }\n\n              rt.destroy();\n            }\n          }\n        }\n      }\n\n      if (!tabTemp || !index) {\n        delete _this.registeredTemplate[registeredTemplate];\n      }\n    }\n  }\n\n  var _loop_1 = function (tagObject) {\n    if (tagObject.instance) {\n      /* istanbul ignore next */\n      tagObject.instance.clearTemplate(templateNames && templateNames.filter(function (val) {\n        return new RegExp(tagObject.name).test(val) ? true : false;\n      }));\n    }\n  };\n\n  for (var _d = 0, _e = _this.tagObjects; _d < _e.length; _d++) {\n    var tagObject = _e[_d];\n\n    _loop_1(tagObject);\n  }\n}\n/**\n * To set value for the nameSpace in desired object.\n * @param {string} nameSpace - String value to the get the inner object\n * @param {any} value - Value that you need to set.\n * @param {any} obj - Object to get the inner object value.\n * @return {void}\n * @private\n */\n\nexport function setValue(nameSpace, value, object) {\n  var keys = nameSpace.replace(/\\[/g, '.').replace(/\\]/g, '').split('.');\n  /* istanbul ignore next */\n\n  var fromObj = object || {};\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n\n    if (i + 1 === keys.length) {\n      fromObj[key] = value === undefined ? {} : value;\n    } else if (fromObj[key] === undefined) {\n      fromObj[key] = {};\n    }\n\n    fromObj = fromObj[key];\n  }\n\n  return fromObj;\n}","map":null,"metadata":{},"sourceType":"module"}