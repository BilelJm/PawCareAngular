{"ast":null,"code":"import { Animation, Browser, ChildProperty, Collection, Complex, Component, Draggable, Event, EventHandler, HijriParser, Internationalization, KeyboardEvents, L10n, NotifyPropertyChanges, Property, SanitizeHtmlHelper, Touch, addClass, append, classList, cldrData, closest, compile, createElement, detach, extend, formatUnit, getDefaultDateObject, getElement, getValue, isNullOrUndefined, prepend, print, remove, removeClass, setStyleAttribute } from '@syncfusion/ej2-base';\nimport { Dialog, Popup, Tooltip, createSpinner, hideSpinner, isCollide, showSpinner } from '@syncfusion/ej2-popups';\nimport { Toolbar, TreeView } from '@syncfusion/ej2-navigations';\nimport { Calendar, DatePicker, DateTimePicker } from '@syncfusion/ej2-calendars';\nimport { DataManager, Deferred, Predicate, Query } from '@syncfusion/ej2-data';\nimport { Button, CheckBox, RadioButton } from '@syncfusion/ej2-buttons';\nimport { FormValidator, Input, NumericTextBox } from '@syncfusion/ej2-inputs';\nimport { DropDownList, MultiSelect } from '@syncfusion/ej2-dropdowns';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\n/**\n * Constants\n */\n\n/** @private */\n\nvar cellClick = 'cellClick';\n/** @private */\n\nvar cellDoubleClick = 'cellDoubleClick';\n/** @private */\n\nvar moreEventsClick = 'moreEventsClick';\n/** @private */\n\nvar select = 'select';\n/** @private */\n\nvar hover = 'hover';\n/** @private */\n\nvar actionBegin = 'actionBegin';\n/** @private */\n\nvar actionComplete = 'actionComplete';\n/** @private */\n\nvar actionFailure = 'actionFailure';\n/** @private */\n\nvar navigating = 'navigating';\n/** @private */\n\nvar renderCell = 'renderCell';\n/** @private */\n\nvar eventClick = 'eventClick';\n/** @private */\n\nvar eventRendered = 'eventRendered';\n/** @private */\n\nvar dataBinding = 'dataBinding';\n/** @private */\n\nvar dataBound = 'dataBound';\n/** @private */\n\nvar popupOpen = 'popupOpen';\n/** @private */\n\nvar popupClose = 'popupClose';\n/** @private */\n\nvar dragStart = 'dragStart';\n/** @private */\n\nvar drag = 'drag';\n/** @private */\n\nvar dragStop = 'dragStop';\n/** @private */\n\nvar resizeStart = 'resizeStart';\n/** @private */\n\nvar resizing = 'resizing';\n/** @private */\n\nvar resizeStop = 'resizeStop';\n/** @private */\n\nvar inlineClick = 'inlineClick';\n/** @private */\n\nvar cellSelect = 'cellSelect';\n/**\n * Specifies schedule internal events\n */\n\n/** @private */\n\nvar initialLoad = 'initial-load';\n/** @private */\n\nvar initialEnd = 'initial-end';\n/** @private */\n\nvar print$1 = 'print';\n/** @private */\n\nvar dataReady = 'data-ready';\n/** @private */\n\nvar eventsLoaded = 'events-loaded';\n/** @private */\n\nvar contentReady = 'content-ready';\n/** @private */\n\nvar scroll = 'scroll';\n/** @private */\n\nvar virtualScroll = 'virtual-scroll';\n/** @private */\n\nvar scrollUiUpdate = 'scroll-ui-update';\n/** @private */\n\nvar uiUpdate = 'ui-update';\n/** @private */\n\nvar documentClick = 'document-click';\n/** @private */\n\nvar cellMouseDown = 'cell-mouse-down';\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Schedule common utilities\n */\n\nvar WEEK_LENGTH = 7;\nvar DEFAULT_WEEKS = 6;\nvar MS_PER_DAY = 86400000;\nvar MS_PER_MINUTE = 60000;\n/**\n * Method to get height from element\n *\n * @param {Element} container Accepts the DOM element\n * @param {string} elementClass Accepts the element class\n * @returns {number} Returns the height of the element\n */\n\nfunction getElementHeightFromClass(container, elementClass) {\n  var height = 0;\n  var el = createElement('div', {\n    className: elementClass\n  }).cloneNode();\n  el.style.visibility = 'hidden';\n  el.style.position = 'absolute';\n  container.appendChild(el);\n  height = el.getBoundingClientRect().height;\n  remove(el);\n  return height;\n}\n/**\n * Method to get width from element\n *\n * @param {Element} container Accepts the DOM element\n * @param {string} elementClass Accepts the element class\n * @returns {number} Returns the width of the element\n */\n\n\nfunction getElementWidthFromClass(container, elementClass) {\n  var width = 0;\n  var el = createElement('div', {\n    className: elementClass\n  }).cloneNode();\n  el.style.visibility = 'hidden';\n  el.style.position = 'absolute';\n  container.appendChild(el);\n  width = el.getBoundingClientRect().width;\n  remove(el);\n  return width;\n}\n/**\n * Method to get translateY value\n *\n * @param {HTMLElement | Element} element Accepts the DOM element\n * @returns {number} Returns the translateY value of given element\n */\n\n\nfunction getTranslateY(element) {\n  var style = getComputedStyle(element);\n  return window.WebKitCSSMatrix ? new WebKitCSSMatrix(style.webkitTransform).m42 : 0;\n}\n/**\n * Method to get translateX value\n *\n * @param {HTMLElement | Element} element Accepts the DOM element\n * @returns {number} Returns the translateX value of given element\n */\n\n\nfunction getTranslateX(element) {\n  var style = getComputedStyle(element);\n  return window.WebKitCSSMatrix ? new WebKitCSSMatrix(style.webkitTransform).m41 : 0;\n}\n/**\n * Method to get week first date\n *\n * @param {Date} date Accepts the date object\n * @param {number} firstDayOfWeek Accepts the first day of week number\n * @returns {Date} Returns the date object\n */\n\n\nfunction getWeekFirstDate(date, firstDayOfWeek) {\n  var date1 = new Date(date.getTime());\n  firstDayOfWeek = (firstDayOfWeek - date1.getDay() + 7 * -1) % 7;\n  return new Date(date1.setDate(date1.getDate() + firstDayOfWeek));\n}\n/**\n * Method to get week last date\n *\n * @param {Date} date Accepts the date object\n * @param {number} firstDayOfWeek Accepts the first day of week number\n * @returns {Date} Returns the date object\n */\n\n\nfunction getWeekLastDate(date, firstDayOfWeek) {\n  var weekFirst = getWeekFirstDate(date, firstDayOfWeek);\n  var weekLast = new Date(weekFirst.getFullYear(), weekFirst.getMonth(), weekFirst.getDate() + 6);\n  return new Date(weekLast.getTime());\n}\n/**\n * Method to get first date of month\n *\n * @param {Date} date Accepts the date object\n * @returns {Date} Returns the date object\n */\n\n\nfunction firstDateOfMonth(date) {\n  return new Date(date.getFullYear(), date.getMonth(), 1);\n}\n/**\n * Method to get last date of month\n *\n * @param {Date} date Accepts the date object\n * @returns {Date} Returns the date object\n */\n\n\nfunction lastDateOfMonth(date) {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\n/**\n * Method to get week number\n *\n * @param {Date} date Accepts the date object\n * @returns {number} Returns the week number\n */\n\n\nfunction getWeekNumber(date) {\n  var date1 = new Date(date.getFullYear(), 0, 1).valueOf();\n  var currentDate = new Date(date.getFullYear(), date.getMonth(), date.getDate()).valueOf();\n  var dayOfYear = (currentDate - date1 + MS_PER_DAY) / MS_PER_DAY;\n  return Math.ceil(dayOfYear / 7);\n}\n/**\n * Method to get week middle date\n *\n * @param {Date} weekFirst Accepts the week first date object\n * @param {Date} weekLast Accepts the week last date object\n * @returns {Date} Returns the date object\n */\n\n\nfunction getWeekMiddleDate(weekFirst, weekLast) {\n  return new Date(weekLast.valueOf() - (weekLast.valueOf() - weekFirst.valueOf()) / 2);\n}\n/**\n * Method to set time to date object\n *\n * @param {Date} date Accepts the date object\n * @param {number} time Accepts the milliseconds\n * @returns {Date} Returns the date object\n */\n\n\nfunction setTime(date, time) {\n  var tzOffsetBefore = date.getTimezoneOffset();\n  var d = new Date(date.getTime() + time);\n  var tzOffsetDiff = d.getTimezoneOffset() - tzOffsetBefore;\n  date.setTime(d.getTime() + tzOffsetDiff * MS_PER_MINUTE);\n  return date;\n}\n/**\n * Method the reset hours in date object\n *\n * @param {Date} date Accepts the date object\n * @returns {Date} Returns the date object\n */\n\n\nfunction resetTime(date) {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n/**\n * Method to get milliseconds from date object\n *\n * @param {Date} date Accepts the date object\n * @returns {number} Returns the milliseconds from date object\n */\n\n\nfunction getDateInMs(date) {\n  var localOffset = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0).getTimezoneOffset();\n  var dateOffset = date.getTimezoneOffset();\n  var timezoneOffset = dateOffset - localOffset;\n  return date.getTime() - new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0).getTime() - timezoneOffset * 60 * 1000;\n}\n/**\n * Method to get date count between two dates\n *\n * @param {Date} startDate Accepts the date object\n * @param {Date} endDate Accepts the date object\n * @returns {number} Returns the date count\n */\n\n\nfunction getDateCount(startDate, endDate) {\n  return Math.ceil((endDate.getTime() - startDate.getTime()) / MS_PER_DAY);\n}\n/**\n * Method to add no of days in date object\n *\n * @param {Date} date Accepts the date object\n * @param {number} noOfDays Accepts the number of days count\n * @returns {Date} Returns the date object\n */\n\n\nfunction addDays(date, noOfDays) {\n  date = new Date('' + date);\n  return new Date(date.setDate(date.getDate() + noOfDays));\n}\n/**\n * Method to add no of months in date object\n *\n * @param {Date} date Accepts the date object\n * @param {number} noOfMonths Accepts the number of month count\n * @returns {Date} Returns the date object\n */\n\n\nfunction addMonths(date, noOfMonths) {\n  date = new Date('' + date);\n  var day = date.getDate();\n  date.setDate(1);\n  date.setMonth(date.getMonth() + noOfMonths);\n  date.setDate(Math.min(day, getMaxDays(date)));\n  return date;\n}\n/**\n * Method to add no of years in date object\n *\n * @param {Date} date Accepts the date object\n * @param {number} noOfYears Accepts the number of month count\n * @returns {Date} Returns the date object\n */\n\n\nfunction addYears(date, noOfYears) {\n  date = new Date('' + date);\n  var day = date.getDate();\n  date.setDate(1);\n  date.setFullYear(date.getFullYear() + noOfYears);\n  date.setDate(Math.min(day, getMaxDays(date)));\n  return date;\n}\n/**\n * Method to get start and end hours\n *\n * @param {Date} date Accepts the date object\n * @param {Date} startHour Accepts the start hour date object\n * @param {Date} endHour Accepts the end hour date object\n * @returns {Object} Returns the start and end hour date objects\n */\n\n\nfunction getStartEndHours(date, startHour, endHour) {\n  var date1 = new Date(date.getTime());\n  date1.setHours(startHour.getHours());\n  date1.setMinutes(startHour.getMinutes());\n  date1.setSeconds(startHour.getSeconds());\n  var date2 = new Date(date.getTime());\n\n  if (endHour.getHours() === 0) {\n    date2 = addDays(date2, 1);\n  } else {\n    date2.setHours(endHour.getHours());\n    date2.setMinutes(endHour.getMinutes());\n    date2.setSeconds(endHour.getSeconds());\n  }\n\n  return {\n    startHour: date1,\n    endHour: date2\n  };\n}\n/**\n * Method to get month last date\n *\n * @param {Date} date Accepts the date object\n * @returns {number} Returns the month last date\n */\n\n\nfunction getMaxDays(date) {\n  return lastDateOfMonth(date).getDate();\n}\n/**\n * Method to get days count between two dates\n *\n * @param {Date} startDate Accepts the date object\n * @param {Date} endDate Accepts the date object\n * @returns {number} Returns the days count\n */\n\n\nfunction getDaysCount(startDate, endDate) {\n  var strTime = resetTime(new Date(startDate));\n  var endTime = resetTime(new Date(endDate));\n  return Math.round((endTime.getTime() - strTime.getTime()) / MS_PER_DAY);\n}\n/**\n * Method to get date object from date string\n *\n * @param {string} date Accepts the date string\n * @returns {Date} Returns the date object\n */\n\n\nfunction getDateFromString(date) {\n  return date.indexOf('Date') !== -1 ? new Date(parseInt(date.match(/\\d+/g).toString(), 10)) : date.indexOf('T') !== -1 ? new Date(date) : new Date(date.replace(/-/g, '/'));\n}\n/**\n * Method to get scrollbar width\n *\n * @returns {number} Returns the scrollbar width\n * @private\n */\n\n\nfunction getScrollBarWidth() {\n  var divNode = createElement('div');\n  var value = 0;\n  divNode.style.cssText = 'width:100px;height: 100px;overflow: scroll;position: absolute;top: -9999px;';\n  document.body.appendChild(divNode);\n  var ratio = devicePixelRatio ? devicePixelRatio.toFixed(2) === '1.10' || devicePixelRatio <= 1 ? Math.ceil(devicePixelRatio % 1) : Math.floor(devicePixelRatio % 1) : 0;\n  value = divNode.offsetWidth - divNode.clientWidth - ratio | 0;\n  document.body.removeChild(divNode);\n  return value;\n}\n/**\n * Method to find the index from data collection\n *\n * @param {Object} data Accepts the data as object\n * @param {string} field Accepts the field name\n * @param {string} value Accepts the value name\n * @param {Object} event Accepts the data as object\n * @param {Object[]} resourceCollection Accepts the data collections\n * @returns {number} Returns the index number\n */\n// eslint-disable-next-line max-len\n\n\nfunction findIndexInData(data, field, value, event, resourceCollection) {\n  for (var i = 0, length_1 = data.length; i < length_1; i++) {\n    if (data[parseInt(i.toString(), 10)][\"\" + field] === value) {\n      if (event) {\n        var field_1 = resourceCollection.slice(-2)[0].field;\n        var res = event[\"\" + field_1] instanceof Array ? event[\"\" + field_1] : [event[\"\" + field_1]];\n        var resData = res.join(',');\n\n        if (resData.includes(data[parseInt(i.toString(), 10)][resourceCollection.slice(-1)[0].groupIDField])) {\n          return i;\n        }\n      } else {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n/**\n * Method to get element outer height\n *\n * @param {HTMLElement} element Accepts the DOM element\n * @returns {number} Returns the outer height of the given element\n */\n\n\nfunction getOuterHeight(element) {\n  var style = getComputedStyle(element);\n  return element.offsetHeight + (parseInt(style.marginTop, 10) || 0) + (parseInt(style.marginBottom, 10) || 0);\n}\n/**\n * Method to remove child elements\n *\n * @param {HTMLElement | Element} element Accepts the DOM element\n * @returns {void}\n */\n\n\nfunction removeChildren(element) {\n  var elementChildren = [].slice.call(element.children);\n\n  for (var _i = 0, elementChildren_1 = elementChildren; _i < elementChildren_1.length; _i++) {\n    var elementChild = elementChildren_1[_i];\n    element.removeChild(elementChild);\n  }\n}\n/**\n * Method to check DST is present or not in date object\n *\n * @param {Date} date Accepts the date object\n * @returns {boolean} Returns the boolean value for either DST is present or not\n */\n\n\nfunction isDaylightSavingTime(date) {\n  var jan = new Date(date.getFullYear(), 0, 1);\n  var jul = new Date(date.getFullYear(), 6, 1);\n  return date.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n}\n/**\n * Method to get UTC time value from date\n *\n * @param {Date} date Accepts the date\n * @returns {number} Returns the UTC time value\n */\n\n\nfunction getUniversalTime(date) {\n  var year = date.getFullYear();\n  var month = date.getMonth();\n  var day = date.getDate();\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var seconds = date.getSeconds();\n  var milliseconds = date.getMilliseconds();\n  return Date.UTC(year, month, day, hours, minutes, seconds, milliseconds);\n}\n/**\n * Method to check the device\n *\n * @returns {boolean} Returns the boolean value for either device is present or not.\n */\n\n\nfunction isMobile() {\n  return window.navigator.userAgent.toLowerCase().indexOf('mobi') > -1;\n}\n/**\n * Method to check the IPad device\n *\n * @returns {boolean} Returns the boolean value for either IPad device is present or not.\n */\n\n\nfunction isIPadDevice() {\n  return window.navigator.userAgent.toLowerCase().indexOf('ipad') > -1;\n}\n/**\n * Method to capitalize the first word in string\n *\n * @param {string} inputString Accepts the string value\n * @param {string} type Accepts the string type\n * @returns {string} Returns the output string\n */\n\n\nfunction capitalizeFirstWord(inputString, type) {\n  if (type === 'multiple') {\n    inputString = inputString.split(' ').map(function (e) {\n      return e.charAt(0).toLocaleUpperCase() + e.substring(1);\n    }).join(' ');\n  } else if (type === 'single') {\n    if (inputString[0] >= '0' && inputString[0] <= '9') {\n      var array = inputString.match(/[a-zA-Z]/);\n      inputString = isNullOrUndefined(array) ? inputString : inputString.slice(0, array.index) + inputString[array.index].toLocaleUpperCase() + inputString.slice(array.index + 1);\n    }\n\n    inputString = inputString[0].toLocaleUpperCase() + inputString.slice(1);\n  }\n\n  return inputString;\n}\n/**\n * CSS Constants\n */\n\n/** @private */\n\n\nvar ROOT = 'e-schedule';\n/** @private */\n\nvar RTL = 'e-rtl';\n/** @private */\n\nvar DEVICE_CLASS = 'e-device';\n/** @private */\n\nvar MULTI_DRAG = 'e-multi-drag';\n/** @private */\n\nvar ICON = 'e-icons';\n/** @private */\n\nvar ENABLE_CLASS = 'e-enable';\n/** @private */\n\nvar DISABLE_CLASS = 'e-disable';\n/** @private */\n\nvar TABLE_CONTAINER_CLASS = 'e-table-container';\n/** @private */\n\nvar SCHEDULE_TABLE_CLASS = 'e-schedule-table';\n/** @private */\n\nvar ALLDAY_CELLS_CLASS = 'e-all-day-cells';\n/** @private */\n\nvar HEADER_POPUP_CLASS = 'e-header-popup';\n/** @private */\n\nvar HEADER_CALENDAR_CLASS = 'e-header-calendar';\n/** @private */\n\nvar ALLDAY_ROW_CLASS = 'e-all-day-row';\n/** @private */\n\nvar CONTENT_TABLE_CLASS = 'e-content-table';\n/** @private */\n\nvar WORK_CELLS_CLASS = 'e-work-cells';\n/** @private */\n\nvar WORK_HOURS_CLASS = 'e-work-hours';\n/** @private */\n\nvar POPUP_OPEN = 'e-popup-open';\n/** @private */\n\n/** @private */\n\nvar DATE_HEADER_WRAP_CLASS = 'e-date-header-wrap';\n/** @private */\n\nvar DATE_HEADER_CONTAINER_CLASS = 'e-date-header-container';\n/** @private */\n\nvar HEADER_CELLS_CLASS = 'e-header-cells';\n/** @private */\n\nvar HEADER_WEEK_CELLS_CLASS = 'e-header-week-cell';\n/** @private */\n\nvar HEADER_MONTH_CELLS_CLASS = 'e-header-month-cell';\n/** @private */\n\nvar HEADER_YEAR_CELLS_CLASS = 'e-header-year-cell';\n/** @private */\n\nvar WORKDAY_CLASS = 'e-work-days';\n/** @private */\n\nvar OTHERMONTH_CLASS = 'e-other-month';\n/** @private */\n\nvar CURRENT_DAY_CLASS = 'e-current-day';\n/** @private */\n\nvar CURRENTDATE_CLASS = 'e-current-date';\n/** @private */\n\nvar CURRENT_PANEL_CLASS = 'e-current-panel';\n/** @private */\n\nvar PREVIOUS_PANEL_CLASS = 'e-previous-panel';\n/** @private */\n\nvar NEXT_PANEL_CLASS = 'e-next-panel';\n/** @private */\n\nvar PREVIOUS_DATE_CLASS = 'e-prev';\n/** @private */\n\nvar NEXT_DATE_CLASS = 'e-next';\n/** @private */\n\nvar TRANSLATE_CLASS = 'e-translate';\n/** @private */\n\nvar LEFT_INDENT_CLASS = 'e-left-indent';\n/** @private */\n\nvar LEFT_INDENT_WRAP_CLASS = 'e-left-indent-wrap';\n/** @private */\n\nvar EVENT_TABLE_CLASS = 'e-event-table';\n/** @private */\n\nvar RESOURCE_LEFT_TD_CLASS = 'e-resource-left-td';\n/** @private */\n\nvar RESOURCE_GROUP_CELLS_CLASS = 'e-resource-group-cells';\n/** @private */\n\nvar RESOURCE_TEXT_CLASS = 'e-resource-text';\n/** @private */\n\nvar RESOURCE_COLUMN_WRAP_CLASS = 'e-resource-column-wrap';\n/** @private */\n\nvar RESOURCE_COLUMN_TABLE_CLASS = 'e-resource-column-table';\n/** @private */\n\nvar RESOURCE_CHILD_CLASS = 'e-child-node';\n/** @private */\n\nvar RESOURCE_PARENT_CLASS = 'e-parent-node';\n/** @private */\n\nvar RESOURCE_EXPAND_CLASS = 'e-resource-expand';\n/** @private */\n\nvar RESOURCE_COLLAPSE_CLASS = 'e-resource-collapse';\n/** @private */\n\nvar RESOURCE_TREE_ICON_CLASS = 'e-resource-tree-icon';\n/** @private */\n\nvar RESOURCE_CELLS_CLASS = 'e-resource-cells';\n/** @private */\n\nvar TIME_CELLS_WRAP_CLASS = 'e-time-cells-wrap';\n/** @private */\n\nvar TIME_CELLS_CLASS = 'e-time-cells';\n/** @private */\n\nvar TIME_SLOT_CLASS = 'e-time-slots';\n/** @private */\n\nvar ALTERNATE_CELLS_CLASS = 'e-alternate-cells';\n/** @private */\n\nvar CURRENT_TIME_CLASS = 'e-current-time';\n/** @private */\n\nvar CURRENT_TIMELINE_CLASS = 'e-current-timeline';\n/** @private */\n\nvar PREVIOUS_TIMELINE_CLASS = 'e-previous-timeline';\n/** @private */\n\nvar HIDE_CHILDS_CLASS = 'e-hide-childs';\n/** @private */\n\nvar SCROLL_CONTAINER_CLASS = 'e-scroll-container';\n/** @private */\n\n/** @private */\n\nvar TIMELINE_WRAPPER_CLASS = 'e-timeline-wrapper';\n/** @private */\n\nvar APPOINTMENT_WRAPPER_CLASS = 'e-appointment-wrapper';\n/** @private */\n\nvar DAY_WRAPPER_CLASS = 'e-day-wrapper';\n/** @private */\n\nvar TOOLBAR_CONTAINER = 'e-schedule-toolbar-container';\n/** @private */\n\nvar RESOURCE_TOOLBAR_CONTAINER = 'e-schedule-resource-toolbar-container';\n/** @private */\n\nvar HEADER_TOOLBAR = 'e-schedule-toolbar';\n/** @private */\n\nvar RESOURCE_HEADER_TOOLBAR = 'e-schedule-resource-toolbar';\n/** @private */\n\nvar SELECTED_CELL_CLASS = 'e-selected-cell';\n/** @private */\n\nvar WEEK_NUMBER_WRAPPER_CLASS = 'e-week-number-wrapper';\n/** @private */\n\nvar WEEK_NUMBER_CLASS = 'e-week-number';\n/** @private */\n\nvar APPOINTMENT_WRAP_CLASS = 'e-appointment-wrap';\n/** @private */\n\nvar WRAPPER_CONTAINER_CLASS = 'e-wrapper-container';\n/** @private */\n\nvar APPOINTMENT_CONTAINER_CLASS = 'e-appointment-container';\n/** @private */\n\nvar APPOINTMENT_CLASS = 'e-appointment';\n/** @private */\n\nvar BLOCK_APPOINTMENT_CLASS = 'e-block-appointment';\n/** @private */\n\nvar BLOCK_INDICATOR_CLASS = 'e-block-indicator';\n/** @private */\n\nvar APPOINTMENT_BORDER = 'e-appointment-border';\n/** @private */\n\nvar APPOINTMENT_DETAILS = 'e-appointment-details';\n/** @private */\n\nvar SUBJECT_WRAP = 'e-subject-wrap';\n/** @private */\n\nvar RESOURCE_NAME = 'e-resource-name';\n/** @private */\n\nvar APPOINTMENT_TIME = 'e-time';\n/** @private */\n\nvar TABLE_WRAP_CLASS = 'e-table-wrap';\n/** @private */\n\nvar OUTER_TABLE_CLASS = 'e-outer-table';\n/** @private */\n\nvar CONTENT_WRAP_CLASS = 'e-content-wrap';\n/** @private */\n\nvar VIRTUAL_TRACK_CLASS = 'e-virtual-track';\n/** @private */\n\nvar AGENDA_CELLS_CLASS = 'e-agenda-cells';\n/** @private */\n\nvar AGENDA_CURRENT_DAY_CLASS = 'e-current-day';\n/** @private */\n\nvar AGENDA_SELECTED_CELL = 'e-active-appointment-agenda';\n/** @private */\n\nvar MONTH_HEADER_CLASS = 'e-month-header';\n/** @private */\n\nvar AGENDA_HEADER_CLASS = 'e-day-date-header';\n/** @private */\n\nvar AGENDA_RESOURCE_CLASS = 'e-resource-column';\n/** @private */\n\nvar AGENDA_DATE_CLASS = 'e-date-column';\n/** @private */\n\nvar NAVIGATE_CLASS = 'e-navigate';\n/** @private */\n\nvar DATE_HEADER_CLASS = 'e-date-header';\n/** @private */\n\nvar AGENDA_DAY_BORDER_CLASS = 'e-day-border';\n/** @private */\n\nvar DATE_BORDER_CLASS = 'e-date-border';\n/** @private */\n\nvar AGENDA_DAY_PADDING_CLASS = 'e-day-padding';\n/** @private */\n\nvar DATE_TIME_CLASS = 'e-date-time';\n/** @private */\n\nvar DATE_TIME_WRAPPER_CLASS = 'e-date-time-wrapper';\n/** @private */\n\nvar AGENDA_EMPTY_EVENT_CLASS = 'e-empty-event';\n/** @private */\n\nvar AGENDA_NO_EVENT_CLASS = 'e-no-event';\n/** @private */\n\nvar APPOINTMENT_INDICATOR_CLASS = 'e-appointment-indicator';\n/** @private */\n\nvar EVENT_INDICATOR_CLASS = 'e-indicator';\n/** @private */\n\nvar EVENT_ICON_UP_CLASS = 'e-up-icon';\n/** @private */\n\nvar EVENT_ICON_DOWN_CLASS = 'e-down-icon';\n/** @private */\n\nvar EVENT_ICON_LEFT_CLASS = 'e-left-icon';\n/** @private */\n\nvar EVENT_ICON_RIGHT_CLASS = 'e-right-icon';\n/** @private */\n\nvar EVENT_ACTION_CLASS = 'e-event-action';\n/** @private */\n\nvar NEW_EVENT_CLASS = 'e-new-event';\n/** @private */\n\nvar CLONE_ELEMENT_CLASS = 'e-schedule-event-clone';\n/** @private */\n\nvar MONTH_CLONE_ELEMENT_CLASS = 'e-month-event';\n/** @private */\n\nvar CLONE_TIME_INDICATOR_CLASS = 'e-clone-time-indicator';\n/** @private */\n\nvar DRAG_CLONE_CLASS = 'e-drag-clone';\n/** @private */\n\nvar EVENT_RESIZE_CLASS = 'e-event-resize';\n/** @private */\n\nvar RESIZE_CLONE_CLASS = 'e-resize-clone';\n/** @private */\n\nvar LEFT_RESIZE_HANDLER = 'e-left-handler';\n/** @private */\n\nvar RIGHT_RESIZE_HANDLER = 'e-right-handler';\n/** @private */\n\nvar TOP_RESIZE_HANDLER = 'e-top-handler';\n/** @private */\n\nvar BOTTOM_RESIZE_HANDLER = 'e-bottom-handler';\n/** @private */\n\nvar EVENT_RECURRENCE_ICON_CLASS = 'e-recurrence-icon';\n/** @private */\n\nvar EVENT_RECURRENCE_EDIT_ICON_CLASS = 'e-recurrence-edit-icon';\n/** @private */\n\nvar HEADER_ROW_CLASS = 'e-header-row';\n/** @private */\n\nvar ALLDAY_APPOINTMENT_WRAPPER_CLASS = 'e-all-day-appointment-wrapper';\n/** @private */\n\nvar ALLDAY_APPOINTMENT_CLASS = 'e-all-day-appointment';\n/** @private */\n\nvar EVENT_COUNT_CLASS = 'e-appointment-hide';\n/** @private */\n\nvar ROW_COUNT_WRAPPER_CLASS = 'e-row-count-wrapper';\n/** @private */\n\nvar ALLDAY_APPOINTMENT_SECTION_CLASS = 'e-all-day-appointment-section';\n/** @private */\n\nvar APPOINTMENT_ROW_EXPAND_CLASS = 'e-appointment-expand';\n/** @private */\n\nvar APPOINTMENT_ROW_COLLAPSE_CLASS = 'e-appointment-collapse';\n/** @private */\n\nvar MORE_INDICATOR_CLASS = 'e-more-indicator';\n/** @private */\n\nvar CELL_POPUP_CLASS = 'e-cell-popup';\n/** @private */\n\nvar EVENT_POPUP_CLASS = 'e-event-popup';\n/** @private */\n\nvar MULTIPLE_EVENT_POPUP_CLASS = 'e-multiple-event-popup';\n/** @private */\n\nvar POPUP_HEADER_CLASS = 'e-popup-header';\n/** @private */\n\nvar POPUP_HEADER_ICON_WRAPPER = 'e-header-icon-wrapper';\n/** @private */\n\nvar POPUP_CONTENT_CLASS = 'e-popup-content';\n/** @private */\n\nvar POPUP_FOOTER_CLASS = 'e-popup-footer';\n/** @private */\n\nvar DATE_TIME_DETAILS_CLASS = 'e-date-time-details';\n/** @private */\n\nvar RECURRENCE_SUMMARY_CLASS = 'e-recurrence-summary';\n/** @private */\n\nvar QUICK_POPUP_EVENT_DETAILS_CLASS = 'e-event-details';\n/** @private */\n\nvar EVENT_CREATE_CLASS = 'e-event-create';\n/** @private */\n\nvar EDIT_EVENT_CLASS = 'e-event-edit';\n/** @private */\n\nvar DELETE_EVENT_CLASS = 'e-event-delete';\n/** @private */\n\nvar TEXT_ELLIPSIS = 'e-text-ellipsis';\n/** @private */\n\nvar MORE_POPUP_WRAPPER_CLASS = 'e-more-popup-wrapper';\n/** @private */\n\nvar MORE_EVENT_POPUP_CLASS = 'e-more-event-popup';\n/** @private */\n\nvar MORE_EVENT_HEADER_CLASS = 'e-more-event-header';\n/** @private */\n\nvar MORE_EVENT_DATE_HEADER_CLASS = 'e-more-event-date-header';\n/** @private */\n\nvar MORE_EVENT_HEADER_DAY_CLASS = 'e-header-day';\n/** @private */\n\nvar MORE_EVENT_HEADER_DATE_CLASS = 'e-header-date';\n/** @private */\n\nvar MORE_EVENT_CLOSE_CLASS = 'e-more-event-close';\n/** @private */\n\nvar MORE_EVENT_CONTENT_CLASS = 'e-more-event-content';\n/** @private */\n\nvar MORE_EVENT_WRAPPER_CLASS = 'e-more-appointment-wrapper';\n/** @private */\n\nvar QUICK_DIALOG_CLASS = 'e-quick-dialog';\n/** @private */\n\nvar QUICK_DIALOG_OCCURRENCE_CLASS = 'e-quick-dialog-occurrence-event';\n/** @private */\n\nvar QUICK_DIALOG_SERIES_CLASS = 'e-quick-dialog-series-event';\n/** @private */\n\nvar QUICK_DIALOG_FOLLOWING_EVENTS_CLASS = 'e-quick-dialog-following-events';\n/** @private */\n\nvar FOLLOWING_EVENTS_DIALOG = 'e-following-events-dialog';\n/** @private */\n\nvar QUICK_DIALOG_DELETE_CLASS = 'e-quick-dialog-delete';\n/** @private */\n\nvar QUICK_DIALOG_CANCEL_CLASS = 'e-quick-dialog-cancel';\n/** @private */\n\nvar QUICK_DIALOG_ALERT_OK = 'e-quick-alertok';\n/** @private */\n\nvar QUICK_DIALOG_ALERT_CANCEL = 'e-quick-alertcancel';\n/** @private */\n\nvar QUICK_DIALOG_ALERT_FOLLOWING = 'e-quick-alertfollowing';\n/** @private */\n\nvar QUICK_DIALOG_ALERT_BTN_CLASS = 'e-quick-dialog-alert-btn';\n/** @private */\n\nvar EVENT_WINDOW_DIALOG_CLASS = 'e-schedule-dialog';\n/** @private */\n\nvar FORM_CONTAINER_CLASS = 'e-form-container';\n/** @private */\n\nvar FORM_CLASS = 'e-schedule-form';\n/** @private */\n\nvar EVENT_WINDOW_ALLDAY_TZ_DIV_CLASS = 'e-all-day-time-zone-row';\n/** @private */\n\nvar EVENT_WINDOW_ALL_DAY_CLASS = 'e-all-day';\n/** @private */\n\nvar TIME_ZONE_CLASS = 'e-time-zone';\n/** @private */\n\nvar TIME_ZONE_ICON_CLASS = 'e-time-zone-icon';\n/** @private */\n\nvar TIME_ZONE_DETAILS_CLASS = 'e-time-zone-details';\n/** @private */\n\nvar EVENT_WINDOW_REPEAT_DIV_CLASS = 'e-repeat-parent-row';\n/** @private */\n\nvar EVENT_WINDOW_REPEAT_CLASS = 'e-repeat';\n/** @private */\n\nvar EVENT_WINDOW_TITLE_LOCATION_DIV_CLASS = 'e-title-location-row';\n/** @private */\n\nvar SUBJECT_CLASS = 'e-subject';\n/** @private */\n\nvar LOCATION_CLASS = 'e-location';\n/** @private */\n\nvar LOCATION_ICON_CLASS = 'e-location-icon';\n/** @private */\n\nvar LOCATION_DETAILS_CLASS = 'e-location-details';\n/** @private */\n\nvar EVENT_WINDOW_START_END_DIV_CLASS = 'e-start-end-row';\n/** @private */\n\nvar EVENT_WINDOW_START_CLASS = 'e-start';\n/** @private */\n\nvar EVENT_WINDOW_END_CLASS = 'e-end';\n/** @private */\n\nvar EVENT_WINDOW_RESOURCES_DIV_CLASS = 'e-resources-row';\n/** @private */\n\nvar DESCRIPTION_CLASS = 'e-description';\n/** @private */\n\nvar DESCRIPTION_ICON_CLASS = 'e-description-icon';\n/** @private */\n\nvar DESCRIPTION_DETAILS_CLASS = 'e-description-details';\n/** @private */\n\nvar EVENT_WINDOW_TIME_ZONE_DIV_CLASS = 'e-time-zone-row';\n/** @private */\n\nvar EVENT_WINDOW_START_TZ_CLASS = 'e-start-time-zone';\n/** @private */\n\nvar EVENT_WINDOW_END_TZ_CLASS = 'e-end-time-zone';\n/** @private */\n\nvar EVENT_WINDOW_BACK_ICON_CLASS = 'e-back-icon';\n/** @private */\n\nvar EVENT_WINDOW_SAVE_ICON_CLASS = 'e-save-icon';\n/** @private */\n\nvar EVENT_WINDOW_CANCEL_BUTTON_CLASS = 'e-event-cancel';\n/** @private */\n\nvar EVENT_WINDOW_SAVE_BUTTON_CLASS = 'e-event-save';\n/** @private */\n\nvar EVENT_WINDOW_DIALOG_PARENT_CLASS = 'e-dialog-parent';\n/** @private */\n\nvar EVENT_WINDOW_TITLE_TEXT_CLASS = 'e-title-text';\n/** @private */\n\nvar EVENT_WINDOW_ICON_DISABLE_CLASS = 'e-icon-disable';\n/** @private */\n\nvar EDIT_CLASS = 'e-edit';\n/** @private */\n\nvar EDIT_ICON_CLASS = 'e-edit-icon';\n/** @private */\n\nvar DELETE_CLASS = 'e-delete';\n/** @private */\n\nvar DELETE_ICON_CLASS = 'e-delete-icon';\n/** @private */\n\nvar CLOSE_CLASS = 'e-close';\n/** @private */\n\nvar CLOSE_ICON_CLASS = 'e-close-icon';\n/** @private */\n\nvar ERROR_VALIDATION_CLASS = 'e-schedule-error';\n/** @private */\n\nvar EVENT_TOOLTIP_ROOT_CLASS = 'e-schedule-event-tooltip';\n/** @private */\n\nvar ALLDAY_ROW_ANIMATE_CLASS = 'e-animate';\n/** @private */\n\nvar TIMESCALE_DISABLE = 'e-timescale-disable';\n/** @private */\n\nvar DISABLE_DATE = 'e-disable-date';\n/** @private */\n\nvar HIDDEN_CLASS = 'e-hidden';\n/** @private */\n\nvar DISABLE_DATES = 'e-disable-dates';\n/** @private */\n\nvar POPUP_WRAPPER_CLASS = 'e-quick-popup-wrapper';\n/** @private */\n\nvar POPUP_TABLE_CLASS = 'e-popup-table';\n/** @private */\n\nvar RESOURCE_MENU = 'e-resource-menu';\n/** @private */\n\nvar RESOURCE_MENU_ICON = 'e-icon-menu';\n/** @private */\n\nvar RESOURCE_LEVEL_TITLE = 'e-resource-level-title';\n/** @private */\n\nvar RESOURCE_TREE = 'e-resource-tree';\n/** @private */\n\nvar RESOURCE_TREE_POPUP_OVERLAY = 'e-resource-tree-popup-overlay';\n/** @private */\n\nvar RESOURCE_TREE_POPUP = 'e-resource-tree-popup';\n/** @private */\n\nvar RESOURCE_CLASS = 'e-resource';\n/** @private */\n\nvar RESOURCE_ICON_CLASS = 'e-resource-icon';\n/** @private */\n\nvar RESOURCE_DETAILS_CLASS = 'e-resource-details';\n/** @private */\n\nvar DATE_TIME_ICON_CLASS = 'e-date-time-icon';\n/** @private */\n\nvar VIRTUAL_SCROLL_CLASS = 'e-virtual-scroll';\n/** @private */\n\nvar ICON_DISABLE_CLASS = 'e-icon-disable';\n/** @private */\n\nvar AUTO_HEIGHT = 'e-auto-height';\n/** @private */\n\nvar IGNORE_WHITESPACE = 'e-ignore-whitespace';\n/** @private */\n\nvar EVENT_TEMPLATE = 'e-template';\n/** @private */\n\nvar READ_ONLY = 'e-read-only';\n/** @private */\n\nvar MONTH_HEADER_WRAPPER = 'e-month-header-wrapper';\n/** @private */\n\nvar INLINE_SUBJECT_CLASS = 'e-inline-subject';\n/** @private */\n\nvar INLINE_APPOINTMENT_CLASS = 'e-inline-appointment';\n/** @hidden */\n\nvar SCROLL_HIDDEN = 'e-scroll-hidden';\n/** @private */\n\nvar ALLDAY_APPOINTMENT_SCROLL = 'e-all-day-scroll';\n/** @private */\n\nvar ALLDAY_APPOINTMENT_AUTO = 'e-all-day-auto';\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Header module\n */\n\nvar HeaderRenderer =\n/** @__PURE__ @class */\nfunction () {\n  function HeaderRenderer(parent) {\n    this.parent = parent;\n    this.l10n = this.parent.localeObj;\n    this.renderHeader();\n    this.addEventListener();\n  }\n\n  HeaderRenderer.prototype.addEventListener = function () {\n    this.parent.on(documentClick, this.closeHeaderPopup, this);\n  };\n\n  HeaderRenderer.prototype.removeEventListener = function () {\n    this.parent.off(documentClick, this.closeHeaderPopup);\n  };\n\n  HeaderRenderer.prototype.closeHeaderPopup = function (e) {\n    var closestEle = closest(e.event.target, '.e-date-range,.e-header-popup,.e-day,.e-selected');\n    var closestPop = closest(e.event.target, '.e-hor-nav,.e-toolbar-pop');\n    var contentWrap = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n\n    if (this.parent.isAdaptive) {\n      if (!isNullOrUndefined(closestPop) && (closestPop.classList.contains('e-toolbar-pop') || closestPop.classList.contains('e-hor-nav')) && !(closestPop.classList.contains('e-hor-nav') && this.element.querySelector('.e-toolbar-pop').classList.contains(POPUP_OPEN))) {\n        addClass([contentWrap], SCROLL_HIDDEN);\n      } else {\n        removeClass([contentWrap], SCROLL_HIDDEN);\n        var popupEle = this.element.querySelector('.e-toolbar-pop');\n\n        if (!isNullOrUndefined(popupEle)) {\n          var popupObj = popupEle.ej2_instances[0];\n\n          if (popupObj && !(!isNullOrUndefined(closestPop) && closestPop.classList.contains('e-hor-nav') && popupEle.classList.contains(POPUP_OPEN))) {\n            popupObj.hide();\n          }\n        }\n      }\n    }\n\n    if (!isNullOrUndefined(closestEle)) {\n      return;\n    }\n\n    this.hideHeaderPopup();\n  };\n\n  HeaderRenderer.prototype.hideHeaderPopup = function () {\n    if (this.headerPopup) {\n      this.headerPopup.hide();\n    }\n  };\n\n  HeaderRenderer.prototype.renderHeader = function () {\n    this.element = createElement('div', {\n      className: TOOLBAR_CONTAINER\n    });\n    var toolbarEle = createElement('div', {\n      className: HEADER_TOOLBAR\n    });\n    this.element.appendChild(toolbarEle);\n    this.parent.element.insertBefore(this.element, this.parent.element.firstElementChild);\n    this.renderToolbar();\n  };\n\n  HeaderRenderer.prototype.renderToolbar = function () {\n    var _this = this;\n\n    var items = this.getItems();\n    this.parent.trigger(actionBegin, {\n      requestType: 'toolbarItemRendering',\n      items: items\n    }, function (args) {\n      _this.toolbarObj = new Toolbar({\n        items: args.items,\n        overflowMode: 'Popup',\n        clicked: _this.toolbarClickHandler.bind(_this),\n        enableRtl: _this.parent.enableRtl,\n        enableHtmlSanitizer: _this.parent.enableHtmlSanitizer,\n        locale: _this.parent.locale\n      });\n\n      _this.toolbarObj.appendTo(_this.parent.element.querySelector('.' + HEADER_TOOLBAR));\n\n      var prevNavEle = _this.toolbarObj.element.querySelector('.e-prev');\n\n      if (prevNavEle) {\n        prevNavEle.firstElementChild.setAttribute('title', _this.l10n.getConstant('previous'));\n      }\n\n      var nextNavEle = _this.toolbarObj.element.querySelector('.e-next');\n\n      if (nextNavEle) {\n        nextNavEle.firstElementChild.setAttribute('title', _this.l10n.getConstant('next'));\n      }\n\n      _this.updateAddIcon();\n\n      _this.updateActiveView();\n\n      _this.parent.trigger(actionComplete, {\n        requestType: 'toolBarItemRendered',\n        items: _this.toolbarObj.items\n      });\n    });\n  };\n\n  HeaderRenderer.prototype.updateItems = function () {\n    var _this = this;\n\n    if (this.toolbarObj) {\n      var items = this.getItems();\n      this.parent.trigger(actionBegin, {\n        requestType: 'toolbarItemRendering',\n        items: items\n      }, function (args) {\n        _this.toolbarObj.items = args.items;\n\n        _this.toolbarObj.dataBind();\n\n        _this.parent.trigger(actionComplete, {\n          requestType: 'toolBarItemRendered',\n          items: _this.toolbarObj.items\n        });\n      });\n    }\n  };\n\n  HeaderRenderer.prototype.getPopUpRelativeElement = function () {\n    if (this.parent.isAdaptive) {\n      return this.toolbarObj.element;\n    }\n\n    return this.element.querySelector('.e-date-range');\n  };\n\n  HeaderRenderer.prototype.setDayOfWeek = function (index) {\n    if (this.headerCalendar) {\n      this.headerCalendar.firstDayOfWeek = index;\n      this.headerCalendar.dataBind();\n    }\n  };\n\n  HeaderRenderer.prototype.setCalendarDate = function (date) {\n    if (this.headerCalendar) {\n      this.headerCalendar.value = date;\n      this.headerCalendar.dataBind();\n    }\n  };\n\n  HeaderRenderer.prototype.setCalendarMinMaxDate = function () {\n    if (this.headerCalendar) {\n      this.headerCalendar.min = this.parent.minDate;\n      this.headerCalendar.max = this.parent.maxDate;\n      this.headerCalendar.dataBind();\n    }\n  };\n\n  HeaderRenderer.prototype.getCalendarView = function () {\n    if (['Month', 'MonthAgenda', 'TimelineMonth'].indexOf(this.parent.currentView) > -1) {\n      return 'Year';\n    } else if (['Year', 'TimelineYear'].indexOf(this.parent.currentView) > -1) {\n      return 'Decade';\n    } else {\n      return 'Month';\n    }\n  };\n\n  HeaderRenderer.prototype.setCalendarView = function () {\n    if (this.headerCalendar) {\n      var calendarView = this.getCalendarView();\n      this.headerCalendar.depth = calendarView;\n      this.headerCalendar.start = calendarView;\n      this.headerCalendar.refresh();\n    }\n  };\n\n  HeaderRenderer.prototype.updateActiveView = function () {\n    var selEle = [].slice.call(this.toolbarObj.element.querySelectorAll('.e-views'));\n    removeClass(selEle, ['e-active-view']);\n\n    if (selEle.length > 0 && selEle[this.parent.viewIndex]) {\n      addClass([selEle[this.parent.viewIndex]], ['e-active-view']);\n    }\n  };\n\n  HeaderRenderer.prototype.updateDateRange = function (date) {\n    var selEle = this.toolbarObj.element.querySelector('.e-date-range');\n\n    if (!selEle) {\n      return;\n    }\n\n    var textEle = selEle.querySelector('.e-tbar-btn-text');\n\n    if (this.parent.activeViewOptions.dateRangeTemplate) {\n      textEle.textContent = '';\n      var args = {\n        startDate: this.parent.activeView.getStartDate(),\n        endDate: this.parent.activeView.getEndDate(),\n        currentView: this.parent.currentView\n      };\n      var viewName = this.parent.activeViewOptions.dateRangeTemplateName;\n      var templateId = this.parent.element.id + '_' + viewName + 'dateRangeTemplate';\n      var dateTemplate = [].slice.call(this.parent.getDateRangeTemplate()(args, this.parent, 'dateRangeTemplate', templateId, false));\n      append(dateTemplate, textEle);\n    } else {\n      var text = this.parent.activeView.getDateRangeText(date);\n      selEle.setAttribute('aria-label', text);\n      textEle.textContent = text;\n    }\n\n    this.refresh();\n  };\n\n  HeaderRenderer.prototype.refresh = function () {\n    if (this.toolbarObj) {\n      this.toolbarObj.refreshOverflow();\n    }\n  };\n\n  HeaderRenderer.prototype.updateAddIcon = function () {\n    var addEle = this.toolbarObj.element.querySelector('.e-add');\n\n    if (addEle) {\n      if (!this.parent.eventSettings.allowAdding) {\n        addClass([addEle], HIDDEN_CLASS);\n      } else {\n        removeClass([addEle], HIDDEN_CLASS);\n      }\n    }\n  };\n\n  HeaderRenderer.prototype.getDateRangeText = function () {\n    var dateString = this.parent.globalize.formatDate(this.parent.selectedDate, {\n      format: 'MMMM y',\n      calendar: this.parent.getCalendarMode()\n    });\n    return capitalizeFirstWord(dateString, 'single');\n  };\n\n  HeaderRenderer.prototype.getItems = function () {\n    var items = [];\n    items.push({\n      align: 'Left',\n      prefixIcon: 'e-icon-prev',\n      tooltipText: 'Previous',\n      overflow: 'Show',\n      cssClass: 'e-prev',\n      htmlAttributes: {\n        'aria-label': 'previous period',\n        'role': 'navigation'\n      }\n    });\n    items.push({\n      align: 'Left',\n      prefixIcon: 'e-icon-next',\n      tooltipText: 'Next',\n      overflow: 'Show',\n      cssClass: 'e-next',\n      htmlAttributes: {\n        'aria-label': 'next period',\n        'role': 'navigation'\n      }\n    });\n    items.push({\n      align: 'Left',\n      text: this.getDateRangeText(),\n      suffixIcon: 'e-icon-down-arrow',\n      cssClass: 'e-date-range',\n      overflow: 'Show',\n      htmlAttributes: {\n        'aria-atomic': 'true',\n        'aria-live': 'assertive',\n        'aria-label': 'title',\n        'role': 'navigation'\n      }\n    });\n\n    if (this.parent.isAdaptive || this.parent.enableAdaptiveUI) {\n      items.push({\n        align: 'Right',\n        showAlwaysInPopup: this.parent.isAdaptive || this.parent.enableAdaptiveUI,\n        prefixIcon: 'e-icon-add',\n        text: this.l10n.getConstant('newEvent'),\n        cssClass: 'e-add',\n        overflow: 'Show'\n      });\n      items.push({\n        align: 'Right',\n        showAlwaysInPopup: this.parent.isAdaptive || this.parent.enableAdaptiveUI,\n        prefixIcon: 'e-icon-today',\n        text: this.l10n.getConstant('today'),\n        cssClass: 'e-today',\n        overflow: 'Show'\n      });\n    } else {\n      items.push({\n        align: 'Right',\n        showAlwaysInPopup: this.parent.isAdaptive || this.parent.enableAdaptiveUI,\n        prefixIcon: 'e-icon-day',\n        text: this.l10n.getConstant('today'),\n        cssClass: 'e-today',\n        overflow: 'Show'\n      });\n\n      if (this.parent.views.length > 1) {\n        items.push({\n          align: 'Right',\n          type: 'Separator',\n          cssClass: 'e-schedule-seperator'\n        });\n      }\n    }\n\n    if (this.parent.views.length > 1) {\n      for (var _i = 0, _a = this.parent.views; _i < _a.length; _i++) {\n        var item = _a[_i];\n        items.push(this.getItemObject(item));\n      }\n    }\n\n    return items;\n  };\n\n  HeaderRenderer.prototype.getItemObject = function (item) {\n    var viewName;\n    var displayName;\n\n    if (typeof item === 'string') {\n      viewName = item.toLowerCase();\n      displayName = null;\n    } else {\n      viewName = item.option.toLowerCase();\n      displayName = item.displayName;\n    }\n\n    var view;\n    var orientationClass;\n    var isItemInsidePopup = this.parent.isAdaptive || this.parent.enableAdaptiveUI;\n\n    switch (viewName) {\n      case 'day':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: isItemInsidePopup,\n          prefixIcon: 'e-icon-day',\n          text: displayName || this.l10n.getConstant('day'),\n          cssClass: 'e-views e-day'\n        };\n        break;\n\n      case 'week':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: isItemInsidePopup,\n          prefixIcon: 'e-icon-week',\n          text: displayName || this.l10n.getConstant('week'),\n          cssClass: 'e-views e-week'\n        };\n        break;\n\n      case 'workweek':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: isItemInsidePopup,\n          prefixIcon: 'e-icon-workweek',\n          text: displayName || this.l10n.getConstant('workWeek'),\n          cssClass: 'e-views e-work-week'\n        };\n        break;\n\n      case 'month':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: isItemInsidePopup,\n          prefixIcon: 'e-icon-month',\n          text: displayName || this.l10n.getConstant('month'),\n          cssClass: 'e-views e-month'\n        };\n        break;\n\n      case 'year':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: isItemInsidePopup,\n          prefixIcon: 'e-icon-year',\n          text: displayName || this.l10n.getConstant('year'),\n          cssClass: 'e-views e-year'\n        };\n        break;\n\n      case 'agenda':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: isItemInsidePopup,\n          prefixIcon: 'e-icon-agenda',\n          text: displayName || this.l10n.getConstant('agenda'),\n          cssClass: 'e-views e-agenda'\n        };\n        break;\n\n      case 'monthagenda':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: isItemInsidePopup,\n          prefixIcon: 'e-icon-month-agenda',\n          text: displayName || this.l10n.getConstant('monthAgenda'),\n          cssClass: 'e-views e-month-agenda'\n        };\n        break;\n\n      case 'timelineday':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: isItemInsidePopup,\n          prefixIcon: 'e-icon-timeline-day',\n          text: displayName || this.l10n.getConstant('timelineDay'),\n          cssClass: 'e-views e-timeline-day'\n        };\n        break;\n\n      case 'timelineweek':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: isItemInsidePopup,\n          prefixIcon: 'e-icon-timeline-week',\n          text: displayName || this.l10n.getConstant('timelineWeek'),\n          cssClass: 'e-views e-timeline-week'\n        };\n        break;\n\n      case 'timelineworkweek':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: isItemInsidePopup,\n          prefixIcon: 'e-icon-timeline-workweek',\n          text: displayName || this.l10n.getConstant('timelineWorkWeek'),\n          cssClass: 'e-views e-timeline-work-week'\n        };\n        break;\n\n      case 'timelinemonth':\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: isItemInsidePopup,\n          prefixIcon: 'e-icon-timeline-month',\n          text: displayName || this.l10n.getConstant('timelineMonth'),\n          cssClass: 'e-views e-timeline-month'\n        };\n        break;\n\n      case 'timelineyear':\n        orientationClass = item.orientation === 'Vertical' ? 'vertical' : 'horizontal';\n        view = {\n          align: 'Right',\n          showAlwaysInPopup: isItemInsidePopup,\n          prefixIcon: 'e-icon-timeline-year-' + orientationClass,\n          text: displayName || this.l10n.getConstant('timelineYear'),\n          cssClass: 'e-views e-timeline-year'\n        };\n        break;\n    }\n\n    return view;\n  };\n\n  HeaderRenderer.prototype.renderHeaderPopup = function () {\n    var headerPopupEle = createElement('div', {\n      className: HEADER_POPUP_CLASS\n    });\n    var headerCalendarEle = createElement('div', {\n      className: HEADER_CALENDAR_CLASS\n    });\n    headerPopupEle.appendChild(headerCalendarEle);\n    this.element.appendChild(headerPopupEle);\n    this.headerPopup = new Popup(headerPopupEle, {\n      actionOnScroll: 'hide',\n      targetType: 'relative',\n      relateTo: this.getPopUpRelativeElement(),\n      position: {\n        X: 'left',\n        Y: 'bottom'\n      },\n      enableRtl: this.parent.enableRtl\n    });\n    var calendarView = this.getCalendarView();\n    var isDisplayDate = this.parent.currentView === 'Month' && !isNullOrUndefined(this.parent.activeViewOptions.displayDate) && !this.hasSelectedDate();\n    this.headerCalendar = new Calendar({\n      value: isDisplayDate ? this.parent.activeViewOptions.displayDate : this.parent.selectedDate,\n      min: this.parent.minDate,\n      max: this.parent.maxDate,\n      firstDayOfWeek: this.parent.activeViewOptions.firstDayOfWeek,\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale,\n      depth: calendarView,\n      start: calendarView,\n      calendarMode: this.parent.calendarMode,\n      change: this.calendarChange.bind(this)\n    });\n    this.setCalendarTimezone();\n    this.headerCalendar.appendTo(headerCalendarEle);\n    this.headerPopup.hide();\n  };\n\n  HeaderRenderer.prototype.calendarChange = function (args) {\n    if (args.value.getTime() !== this.parent.selectedDate.getTime()) {\n      var calendarDate = resetTime(new Date(args.value));\n      this.parent.changeDate(calendarDate);\n    }\n\n    this.headerPopup.hide();\n  };\n\n  HeaderRenderer.prototype.setCalendarTimezone = function () {\n    if (this.headerCalendar) {\n      this.headerCalendar.timezone = this.parent.timezone || this.parent.tzModule.getLocalTimezoneName();\n    }\n  };\n\n  HeaderRenderer.prototype.calculateViewIndex = function (args) {\n    var target = closest(args.originalEvent.target, '.e-views');\n    var views = [].slice.call(this.element.querySelectorAll('.e-views'));\n    return views.indexOf(target);\n  };\n\n  HeaderRenderer.prototype.toolbarClickHandler = function (args) {\n    if (!args.item) {\n      return;\n    }\n\n    var strClass = args.item.cssClass.replace('e-views ', '');\n    var data;\n    var isSameTime;\n    var currentTime;\n\n    switch (strClass) {\n      case 'e-date-range':\n        if (!this.headerPopup) {\n          this.renderHeaderPopup();\n        }\n\n        if (this.headerPopup.element.classList.contains(POPUP_OPEN)) {\n          this.headerPopup.hide();\n        } else {\n          this.headerPopup.show();\n        }\n\n        break;\n\n      case 'e-day':\n        this.parent.changeView('Day', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-week':\n        this.parent.changeView('Week', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-work-week':\n        this.parent.changeView('WorkWeek', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-month':\n        this.parent.changeView('Month', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-year':\n        this.parent.changeView('Year', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-agenda':\n        this.parent.changeView('Agenda', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-month-agenda':\n        this.parent.changeView('MonthAgenda', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-timeline-day':\n        this.parent.changeView('TimelineDay', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-timeline-week':\n        this.parent.changeView('TimelineWeek', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-timeline-work-week':\n        this.parent.changeView('TimelineWorkWeek', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-timeline-month':\n        this.parent.changeView('TimelineMonth', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-timeline-year':\n        this.parent.changeView('TimelineYear', args.originalEvent, undefined, this.calculateViewIndex(args));\n        break;\n\n      case 'e-today':\n        currentTime = resetTime(this.parent.getCurrentTime());\n\n        if (this.parent.currentView === 'Agenda' || this.parent.currentView === 'MonthAgenda' || !this.parent.isSelectedDate(currentTime) || this.parent.currentView === 'Month' && this.parent.activeViewOptions.displayDate && !this.hasSelectedDate() && resetTime(this.parent.activeViewOptions.displayDate) !== currentTime || this.parent.currentView === 'Month' && this.parent.activeViewOptions.numberOfWeeks > 0 && !this.hasSelectedDate() && resetTime(firstDateOfMonth(this.parent.selectedDate)) !== currentTime) {\n          this.parent.changeDate(currentTime, args.originalEvent);\n        }\n\n        break;\n\n      case 'e-prev':\n        this.parent.changeDate(this.parent.activeView.getNextPreviousDate('previous'), args.originalEvent);\n        break;\n\n      case 'e-next':\n        this.parent.changeDate(this.parent.activeView.getNextPreviousDate('next'), args.originalEvent);\n        break;\n\n      case 'e-add':\n        isSameTime = this.parent.activeCellsData.startTime.getTime() === this.parent.activeCellsData.endTime.getTime();\n\n        if (this.parent.activeCellsData && !isSameTime) {\n          data = this.parent.activeCellsData;\n        } else {\n          var interval = this.parent.activeViewOptions.timeScale.interval;\n          var slotCount = this.parent.activeViewOptions.timeScale.slotCount;\n          var msInterval = interval * MS_PER_MINUTE / slotCount;\n          var startTime = new Date(this.parent.selectedDate.getTime());\n          var currentTime_1 = this.parent.getCurrentTime();\n          startTime.setHours(currentTime_1.getHours(), Math.round(startTime.getMinutes() / msInterval) * msInterval, 0);\n          var endTime = new Date(new Date(startTime.getTime()).setMilliseconds(startTime.getMilliseconds() + msInterval));\n          data = {\n            startTime: startTime,\n            endTime: endTime,\n            isAllDay: false\n          };\n        }\n\n        this.parent.eventWindow.openEditor(extend(data, {\n          cancel: false,\n          event: args.originalEvent\n        }), 'Add');\n        break;\n    }\n\n    if (isNullOrUndefined(this.toolbarObj)) {\n      return;\n    }\n\n    var toolbarPopUp = this.toolbarObj.element.querySelector('.e-toolbar-pop');\n\n    if (toolbarPopUp && args.item.type !== 'Input') {\n      toolbarPopUp.ej2_instances[0].hide({\n        name: 'SlideUp',\n        duration: 100\n      });\n    }\n  };\n\n  HeaderRenderer.prototype.hasSelectedDate = function () {\n    var selectedTime = resetTime(this.parent.selectedDate).getTime();\n    return selectedTime >= this.parent.activeView.getStartDate().getTime() && selectedTime <= this.parent.activeView.getEndDate().getTime();\n  };\n\n  HeaderRenderer.prototype.getHeaderElement = function () {\n    return this.toolbarObj.element;\n  };\n\n  HeaderRenderer.prototype.updateHeaderItems = function (classType) {\n    var prevNavEle = this.toolbarObj.element.querySelector('.e-prev');\n    var nextNavEle = this.toolbarObj.element.querySelector('.e-next');\n    var dateRangeEle = this.toolbarObj.element.querySelector('.e-date-range');\n\n    if (prevNavEle) {\n      if (classType === 'add') {\n        addClass([prevNavEle], HIDDEN_CLASS);\n      } else {\n        removeClass([prevNavEle], HIDDEN_CLASS);\n      }\n    }\n\n    if (nextNavEle) {\n      if (classType === 'add') {\n        addClass([nextNavEle], HIDDEN_CLASS);\n      } else {\n        removeClass([nextNavEle], HIDDEN_CLASS);\n      }\n    }\n\n    if (dateRangeEle) {\n      if (classType === 'add') {\n        addClass([dateRangeEle], TEXT_ELLIPSIS);\n      } else {\n        removeClass([dateRangeEle], TEXT_ELLIPSIS);\n      }\n    }\n  };\n\n  HeaderRenderer.prototype.previousNextIconHandler = function () {\n    var dates = this.parent.currentView === 'Agenda' ? [this.parent.getCurrentViewDates()[0]] : this.parent.getCurrentViewDates();\n    var prevNavEle = this.toolbarObj.element.querySelector('.' + PREVIOUS_DATE_CLASS);\n    var nextNavEle = this.toolbarObj.element.querySelector('.' + NEXT_DATE_CLASS);\n    var firstDate = new Date(dates[0].getTime());\n    var lastDate = new Date(dates[dates.length - 1].getTime());\n\n    if (this.parent.currentView === 'WorkWeek' || this.parent.currentView === 'TimelineWorkWeek') {\n      firstDate = getWeekFirstDate(resetTime(this.parent.selectedDate), this.parent.firstDayOfWeek);\n      lastDate = addDays(firstDate, 7 * this.parent.activeViewOptions.interval);\n    } else if (this.parent.currentView === 'Month') {\n      var isCustomMonth = !isNullOrUndefined(this.parent.activeViewOptions.displayDate) || this.parent.activeViewOptions.numberOfWeeks > 0;\n      firstDate = isCustomMonth ? this.parent.activeView.getStartDate() : firstDateOfMonth(this.parent.selectedDate);\n      lastDate = isCustomMonth ? this.parent.activeView.getEndDate() : lastDateOfMonth(addMonths(firstDate, this.parent.activeViewOptions.interval - 1));\n    }\n\n    if (!isNullOrUndefined(prevNavEle)) {\n      this.toolbarObj.enableItems(prevNavEle, firstDate > resetTime(this.parent.minDate));\n    }\n\n    if (!isNullOrUndefined(nextNavEle)) {\n      this.toolbarObj.enableItems(nextNavEle, lastDate < resetTime(this.parent.maxDate));\n    }\n\n    this.setCalendarMinMaxDate();\n  };\n\n  HeaderRenderer.prototype.getModuleName = function () {\n    return 'headerbar';\n  };\n\n  HeaderRenderer.prototype.destroy = function () {\n    if (this.headerPopup && !this.headerPopup.isDestroyed) {\n      this.headerPopup.destroy();\n      this.headerPopup = null;\n    }\n\n    if (this.headerCalendar && !this.headerCalendar.isDestroyed) {\n      this.headerCalendar.destroy();\n      this.headerCalendar = null;\n    }\n\n    if (this.toolbarObj && !this.toolbarObj.isDestroyed) {\n      this.toolbarObj.destroy();\n      this.removeEventListener();\n      remove(this.element);\n      this.toolbarObj = null;\n    }\n\n    this.element = null;\n    this.parent = null;\n    this.l10n = null;\n  };\n\n  return HeaderRenderer;\n}();\n/**\n * `Scroll` module\n */\n\n\nvar Scroll =\n/** @__PURE__ @class */\nfunction () {\n  /**\n   * Constructor for the scrolling.\n   *\n   * @param {Schedule} parent Accepts the Schedule instance\n   */\n  function Scroll(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n  /**\n   * For internal use only - Get the module name.\n   *\n   * @returns {string} Returns the module name.\n   * @private\n   */\n\n\n  Scroll.prototype.getModuleName = function () {\n    return 'scroll';\n  };\n  /**\n   * Internal method to set the element width\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Scroll.prototype.setWidth = function () {\n    this.parent.element.style.width = formatUnit(this.parent.width);\n  };\n  /**\n   * Internal method to set the element height\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Scroll.prototype.setHeight = function () {\n    this.parent.element.style.height = formatUnit(this.parent.height);\n  };\n  /**\n   * Internal method to bind events\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Scroll.prototype.addEventListener = function () {\n    this.parent.on(contentReady, this.setDimensions, this);\n    this.parent.on(uiUpdate, this.onPropertyChanged, this);\n  };\n  /**\n   * Internal method to unbind events\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Scroll.prototype.removeEventListener = function () {\n    this.parent.off(contentReady, this.setDimensions);\n    this.parent.off(uiUpdate, this.onPropertyChanged);\n  };\n  /**\n   * Internal method to set the dimensions\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Scroll.prototype.setDimensions = function () {\n    this.setWidth();\n    this.setHeight();\n    var data = {\n      cssProperties: this.parent.getCssProperties(),\n      module: this.getModuleName()\n    };\n    this.parent.notify(scrollUiUpdate, data);\n  };\n  /**\n   * Internal method to set the dimensions dynamically\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Scroll.prototype.onPropertyChanged = function () {\n    this.setDimensions();\n  };\n  /**\n   * Destroy the scroll module\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Scroll.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  return Scroll;\n}();\n/**\n * `touch` module is used to handle touch interactions.\n */\n\n\nvar ScheduleTouch =\n/** @__PURE__ @class */\nfunction () {\n  function ScheduleTouch(parent) {\n    this.parent = parent;\n    this.element = this.parent.element.querySelector('.' + TABLE_CONTAINER_CLASS);\n    this.touchObj = new Touch(this.element, {\n      scroll: this.scrollHandler.bind(this),\n      swipe: this.swipeHandler.bind(this),\n      tapHold: this.tapHoldHandler.bind(this),\n      swipeSettings: {\n        swipeThresholdDistance: 1\n      }\n    });\n    EventHandler.add(this.element, 'transitionend', this.onTransitionEnd, this);\n    this.touchLeftDirection = this.parent.enableRtl ? 'Right' : 'Left';\n    this.touchRightDirection = this.parent.enableRtl ? 'Left' : 'Right';\n  }\n\n  ScheduleTouch.prototype.scrollHandler = function (e) {\n    if (this.parent.currentView === 'Agenda' || this.parent.uiStateValues.action || !this.parent.allowSwiping || e.originalEvent && e.originalEvent.target && (e.originalEvent.target.classList.contains(APPOINTMENT_CLASS) || closest(e.originalEvent.target, '.' + APPOINTMENT_CLASS)) && !this.parent.isAdaptive) {\n      return;\n    }\n\n    if (!this.timeStampStart) {\n      this.timeStampStart = Date.now();\n    }\n\n    if (this.element.classList.contains(TRANSLATE_CLASS)) {\n      this.onTransitionEnd();\n    }\n\n    if (e.scrollDirection === 'Left' || e.scrollDirection === 'Right') {\n      var args = {\n        requestType: 'dateNavigate',\n        cancel: false,\n        event: e.originalEvent\n      };\n      this.parent.trigger(actionBegin, args);\n\n      if (args.cancel) {\n        return;\n      }\n\n      var scrollDiv = this.element.querySelector('.' + CONTENT_WRAP_CLASS);\n\n      if (scrollDiv && scrollDiv.scrollWidth > scrollDiv.clientWidth) {\n        return;\n      } else {\n        this.isScrollTriggered = true;\n        e.originalEvent.preventDefault();\n        e.originalEvent.stopPropagation();\n      }\n    }\n\n    if (e.scrollDirection === this.touchLeftDirection) {\n      if (!this.nextPanel) {\n        this.renderPanel(NEXT_PANEL_CLASS, 'next');\n        this.nextPanel = {\n          element: this.parent.activeView.getPanel(),\n          selectedDate: new Date(this.parent.selectedDate.getTime()),\n          renderDates: this.parent.activeView.renderDates,\n          colLevels: this.parent.activeView.colLevels\n        };\n        this.setDimensions(this.nextPanel.element);\n      }\n\n      var x = this.parent.enableRtl ? e.distanceX : -e.distanceX;\n      this.element.style.transform = 'translatex(' + (this.getTranslateX(this.element) + x) + 'px)';\n    } else if (e.scrollDirection === this.touchRightDirection) {\n      var prevWidth = 0;\n\n      if (!this.previousPanel) {\n        this.renderPanel(PREVIOUS_PANEL_CLASS, 'previous');\n        this.previousPanel = {\n          element: this.parent.activeView.getPanel(),\n          selectedDate: new Date(this.parent.selectedDate.getTime()),\n          renderDates: this.parent.activeView.renderDates,\n          colLevels: this.parent.activeView.colLevels\n        };\n        this.setDimensions(this.previousPanel.element);\n        prevWidth = this.previousPanel.element.offsetWidth;\n      }\n\n      var x = this.parent.enableRtl ? prevWidth - e.distanceX : -prevWidth + e.distanceX;\n      this.element.style.transform = 'translatex(' + (this.getTranslateX(this.element) + x) + 'px)';\n    }\n  };\n\n  ScheduleTouch.prototype.swipeHandler = function (e) {\n    if (!this.isScrollTriggered || this.parent.uiStateValues.action || !this.parent.allowSwiping) {\n      return;\n    }\n\n    this.isScrollTriggered = false;\n    var swipeDate = e.swipeDirection === 'Left' ? this.parent.activeView.renderDates[0] : this.parent.activeView.renderDates.slice(-1)[0];\n\n    if (e.swipeDirection === 'Left' && swipeDate < this.parent.maxDate || e.swipeDirection === 'Right' && swipeDate >= this.parent.minDate) {\n      var time = Date.now() - this.timeStampStart;\n      var offsetDist = e.distanceX * (Browser.isDevice ? 6 : 1.66);\n\n      if (offsetDist > time || e.distanceX > this.parent.element.offsetWidth / 2) {\n        this.swapPanels(e.swipeDirection);\n\n        if (offsetDist > time && e.distanceX > this.parent.element.offsetWidth / 2) {\n          this.element.style.transitionDuration = (Browser.isDevice ? e.distanceX : offsetDist) / time / 10 + 's';\n        }\n\n        this.confirmSwipe(e.swipeDirection);\n      } else {\n        this.cancelSwipe();\n      }\n\n      var args = {\n        requestType: 'dateNavigate',\n        cancel: false,\n        event: e.originalEvent\n      };\n      this.parent.trigger(actionComplete, args);\n    } else {\n      this.cancelSwipe();\n    }\n\n    this.timeStampStart = null;\n  };\n\n  ScheduleTouch.prototype.tapHoldHandler = function (e) {\n    var target = closest(e.originalEvent.target, '.' + APPOINTMENT_CLASS);\n\n    if (!isNullOrUndefined(target) && this.parent.isAdaptive) {\n      this.parent.quickPopup.tapHoldEventPopup(e.originalEvent);\n      return;\n    }\n  };\n\n  ScheduleTouch.prototype.renderPanel = function (clsName, nextPrevType) {\n    if (!this.currentPanel) {\n      this.currentPanel = {\n        element: this.parent.activeView.getPanel(),\n        selectedDate: new Date(this.parent.selectedDate.getTime()),\n        renderDates: this.parent.activeView.renderDates,\n        colLevels: this.parent.activeView.colLevels\n      };\n      this.setDimensions(this.currentPanel.element);\n    } else {\n      this.parent.setProperties({\n        selectedDate: this.currentPanel.selectedDate\n      }, true);\n    }\n\n    this.parent.setProperties({\n      selectedDate: this.parent.activeView.getNextPreviousDate(nextPrevType)\n    }, true);\n\n    if (this.parent.headerModule) {\n      this.parent.headerModule.setCalendarDate(this.parent.selectedDate);\n    }\n\n    this.parent.activeView.getRenderDates();\n    this.parent.activeView.renderLayout(clsName);\n  };\n\n  ScheduleTouch.prototype.swapPanels = function (direction) {\n    if (direction === this.touchLeftDirection) {\n      var temp = this.nextPanel;\n      this.nextPanel = this.currentPanel;\n      this.currentPanel = temp;\n    } else {\n      var temp = this.previousPanel;\n      this.previousPanel = this.currentPanel;\n      this.currentPanel = temp;\n    }\n  };\n\n  ScheduleTouch.prototype.confirmSwipe = function (swipeDirection) {\n    var _this = this;\n\n    var previousDate = swipeDirection === this.touchLeftDirection ? this.nextPanel.selectedDate : this.previousPanel.selectedDate;\n    var args = {\n      action: 'date',\n      cancel: false,\n      previousDate: previousDate,\n      currentDate: this.currentPanel.selectedDate\n    };\n    this.parent.trigger(navigating, args, function (navArgs) {\n      if (navArgs.cancel) {\n        _this.swapPanels(swipeDirection);\n\n        _this.cancelSwipe();\n      } else {\n        _this.parent.activeView.setPanel(_this.currentPanel.element);\n\n        _this.parent.setProperties({\n          selectedDate: _this.currentPanel.selectedDate\n        }, true);\n\n        var translateX = void 0;\n\n        if (_this.parent.enableRtl) {\n          translateX = swipeDirection === _this.touchLeftDirection ? _this.previousPanel ? _this.previousPanel.element.offsetLeft : _this.currentPanel.element.offsetWidth : 0;\n        } else {\n          translateX = swipeDirection === _this.touchLeftDirection ? -_this.currentPanel.element.offsetLeft : 0;\n        }\n\n        _this.parent.activeView.renderDates = _this.currentPanel.renderDates;\n        _this.parent.activeView.colLevels = _this.currentPanel.colLevels;\n        addClass([_this.element], TRANSLATE_CLASS);\n        _this.element.style.transform = 'translatex(' + translateX + 'px)';\n\n        if (_this.parent.headerModule) {\n          _this.parent.headerModule.updateDateRange();\n        }\n\n        _this.parent.renderTemplates();\n\n        _this.parent.crudModule.refreshDataManager();\n      }\n    });\n  };\n\n  ScheduleTouch.prototype.cancelSwipe = function () {\n    this.parent.activeView.setPanel(this.currentPanel.element);\n    this.parent.setProperties({\n      selectedDate: this.currentPanel.selectedDate\n    }, true);\n    this.parent.activeView.renderDates = this.currentPanel.renderDates;\n    this.parent.activeView.colLevels = this.currentPanel.colLevels;\n    addClass([this.element], TRANSLATE_CLASS);\n    var prevWidth = this.previousPanel ? this.previousPanel.element.offsetWidth : 0;\n    this.element.style.transform = 'translatex(' + (this.parent.enableRtl ? prevWidth : -this.currentPanel.element.offsetLeft) + 'px)';\n  };\n\n  ScheduleTouch.prototype.onTransitionEnd = function () {\n    removeClass([this.element], TRANSLATE_CLASS);\n    this.element.style.transitionDuration = '';\n    this.element.style.transform = '';\n\n    if (this.previousPanel) {\n      remove(this.previousPanel.element);\n      this.previousPanel = null;\n      removeClass([this.currentPanel.element], PREVIOUS_PANEL_CLASS);\n      addClass([this.currentPanel.element], CURRENT_PANEL_CLASS);\n    }\n\n    if (this.nextPanel) {\n      remove(this.nextPanel.element);\n      this.nextPanel = null;\n      removeClass([this.currentPanel.element], NEXT_PANEL_CLASS);\n      addClass([this.currentPanel.element], CURRENT_PANEL_CLASS);\n    }\n\n    this.currentPanel = null;\n    this.parent.activeView.getPanel().style.width = '';\n  };\n\n  ScheduleTouch.prototype.getTranslateX = function (element) {\n    var style = window.getComputedStyle(element);\n    return new WebKitCSSMatrix(style.webkitTransform).m41;\n  };\n\n  ScheduleTouch.prototype.setDimensions = function (element) {\n    element.style.width = this.parent.element.clientWidth + 'px';\n  };\n\n  ScheduleTouch.prototype.resetValues = function () {\n    this.currentPanel = null;\n    this.previousPanel = null;\n    this.nextPanel = null;\n    this.timeStampStart = null;\n    this.element.style.transform = '';\n    this.element.style.transitionDuration = '';\n    removeChildren(this.element);\n    removeClass([this.element], TRANSLATE_CLASS);\n  };\n\n  ScheduleTouch.prototype.destroy = function () {\n    if (this.touchObj) {\n      this.touchObj.destroy();\n      this.touchObj = null;\n    }\n\n    EventHandler.remove(this.element, 'transitionend', this.onTransitionEnd);\n    this.resetValues();\n  };\n\n  return ScheduleTouch;\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Keyboard interaction\n */\n\n\nvar KeyboardInteraction =\n/** @__PURE__ @class */\nfunction () {\n  function KeyboardInteraction(parent) {\n    this.selectedCells = [];\n    this.keyConfigs = {\n      downArrow: 'downarrow',\n      upArrow: 'uparrow',\n      rightArrow: 'rightarrow',\n      leftArrow: 'leftarrow',\n      shiftDownArrow: 'shift+downarrow',\n      shiftUpArrow: 'shift+uparrow',\n      shiftRightArrow: 'shift+rightarrow',\n      shiftLeftArrow: 'shift+leftarrow',\n      ctrlLeftArrow: 'ctrl+leftarrow',\n      ctrlRightArrow: 'ctrl+rightarrow',\n      altOne: 'alt+1',\n      altTwo: 'alt+2',\n      altThree: 'alt+3',\n      altFour: 'alt+4',\n      altFive: 'alt+5',\n      altSix: 'alt+6',\n      altSeven: 'alt+7',\n      altEight: 'alt+8',\n      altNine: 'alt+9',\n      enter: 'enter',\n      escape: 'escape',\n      delete: 'delete',\n      backspace: 'backspace',\n      home: 'home',\n      pageUp: 'pageup',\n      pageDown: 'pagedown',\n      tab: 'tab',\n      shiftTab: 'shift+tab',\n      ctrlShiftUpArrow: 'ctrl+shift+uparrow',\n      ctrlShiftDownArrow: 'ctrl+shift+downarrow',\n      ctrlShiftLeftArrow: 'ctrl+shift+leftarrow',\n      ctrlShiftRightArrow: 'ctrl+shift+rightarrow'\n    };\n    this.parent = parent;\n    this.parent.element.tabIndex = this.parent.element.tabIndex === -1 ? 0 : this.parent.element.tabIndex;\n    this.keyboardModule = new KeyboardEvents(this.parent.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n    this.addEventListener();\n  }\n\n  KeyboardInteraction.prototype.keyActionHandler = function (e) {\n    switch (e.action) {\n      case 'downArrow':\n      case 'shiftDownArrow':\n        this.processDown(e, e.shiftKey);\n        break;\n\n      case 'upArrow':\n      case 'shiftUpArrow':\n        this.processUp(e, e.shiftKey);\n        break;\n\n      case 'leftArrow':\n      case 'shiftLeftArrow':\n        this.processLeft(e, e.shiftKey);\n        break;\n\n      case 'rightArrow':\n      case 'shiftRightArrow':\n        this.processRight(e, e.shiftKey);\n        break;\n\n      case 'ctrlLeftArrow':\n        this.parent.changeDate(this.parent.activeView.getNextPreviousDate('previous'), e);\n\n        if (this.parent.headerModule) {\n          this.parent.headerModule.element.querySelector('.e-prev button').focus();\n        }\n\n        break;\n\n      case 'ctrlRightArrow':\n        this.parent.changeDate(this.parent.activeView.getNextPreviousDate('next'), e);\n\n        if (this.parent.headerModule) {\n          this.parent.headerModule.element.querySelector('.e-next button').focus();\n        }\n\n        break;\n\n      case 'altOne':\n      case 'altTwo':\n      case 'altThree':\n      case 'altFour':\n      case 'altFive':\n      case 'altSix':\n      case 'altSeven':\n      case 'altEight':\n      case 'altNine':\n        this.processViewNavigation(e);\n        break;\n\n      case 'enter':\n        this.processEnter(e);\n        break;\n\n      case 'home':\n        this.focusFirstCell();\n        break;\n\n      case 'tab':\n      case 'shiftTab':\n        this.processTab(e, e.shiftKey);\n        break;\n\n      case 'delete':\n      case 'backspace':\n        this.processDelete(e);\n        break;\n\n      case 'ctrlShiftUpArrow':\n      case 'ctrlShiftDownArrow':\n      case 'ctrlShiftLeftArrow':\n      case 'ctrlShiftRightArrow':\n        this.processCtrlShiftNavigationArrows(e);\n        break;\n\n      case 'escape':\n        this.processEscape(e);\n        break;\n\n      case 'fTwelve':\n        if (this.parent.allowInline && this.parent.inlineModule) {\n          e.preventDefault();\n          this.processFTwelve(e);\n        }\n\n        break;\n    }\n  };\n\n  KeyboardInteraction.prototype.processFTwelve = function (e) {\n    var target = e.target;\n\n    if (target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(ALLDAY_CELLS_CLASS)) {\n      this.parent.activeCellsData = this.getSelectedElements(target);\n      var args = extend(this.parent.activeCellsData, {\n        cancel: false,\n        event: e\n      });\n      var inlineArgs = {\n        element: args.element,\n        groupIndex: args.groupIndex,\n        type: 'Cell'\n      };\n      this.parent.notify(inlineClick, inlineArgs);\n    }\n\n    if (target.classList.contains(APPOINTMENT_CLASS)) {\n      target.click();\n      return;\n    }\n  };\n\n  KeyboardInteraction.prototype.addEventListener = function () {\n    this.parent.on(cellMouseDown, this.onCellMouseDown, this);\n  };\n\n  KeyboardInteraction.prototype.removeEventListener = function () {\n    this.parent.off(cellMouseDown, this.onCellMouseDown);\n  };\n\n  KeyboardInteraction.prototype.onCellMouseDown = function (e) {\n    if (e.event.shiftKey) {\n      return;\n    }\n\n    this.initialTarget = this.getClosestCell(e.event);\n\n    if (this.parent.activeViewOptions.readonly || this.parent.currentView === 'MonthAgenda' || !this.initialTarget) {\n      return;\n    }\n\n    if (e.event.target.classList.contains(WORK_CELLS_CLASS) && e.event.which !== 3) {\n      this.parent.removeSelectedClass();\n      EventHandler.add(this.parent.getContentTable(), 'mousemove', this.onMouseSelection, this);\n      EventHandler.add(this.parent.getContentTable(), 'mouseup', this.onMoveUp, this);\n    }\n\n    if (e.event.target.classList.contains(ALLDAY_CELLS_CLASS) && e.event.which !== 3) {\n      this.parent.removeSelectedClass();\n      var allDayRow = this.parent.getAllDayRow();\n      EventHandler.add(allDayRow, 'mousemove', this.onMouseSelection, this);\n      EventHandler.add(allDayRow, 'mouseup', this.onMoveUp, this);\n    }\n  };\n\n  KeyboardInteraction.prototype.onMouseSelection = function (e) {\n    var appointments = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CLASS));\n    addClass(appointments, 'e-allow-select');\n    var selectionEdges = this.parent.boundaryValidation(e.pageY, e.pageX);\n\n    if (selectionEdges.bottom || selectionEdges.top || selectionEdges.left || selectionEdges.right) {\n      var parent_1 = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n      var yInBounds = parent_1.offsetHeight <= parent_1.scrollHeight && parent_1.scrollTop >= 0 && parent_1.scrollTop + parent_1.offsetHeight <= parent_1.scrollHeight;\n      var xInBounds = parent_1.offsetWidth <= parent_1.scrollWidth && parent_1.scrollLeft >= 0 && parent_1.scrollLeft + parent_1.offsetWidth <= parent_1.scrollWidth;\n\n      if (yInBounds && (selectionEdges.top || selectionEdges.bottom)) {\n        parent_1.scrollTop += selectionEdges.top ? -e.target.offsetHeight : e.target.offsetHeight;\n      }\n\n      if (xInBounds && (selectionEdges.left || selectionEdges.right)) {\n        parent_1.scrollLeft += selectionEdges.left ? -e.target.offsetWidth : e.target.offsetWidth;\n      }\n    }\n\n    var target = this.getClosestCell(e);\n\n    if (target) {\n      this.selectCells(true, target);\n    }\n  };\n\n  KeyboardInteraction.prototype.getClosestCell = function (e) {\n    return closest(e.target, '.' + WORK_CELLS_CLASS + ',.' + ALLDAY_CELLS_CLASS);\n  };\n\n  KeyboardInteraction.prototype.onMoveUp = function (e) {\n    var _this = this;\n\n    var appointments = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CLASS));\n    removeClass(appointments, 'e-allow-select');\n\n    if (e.target.classList.contains(WORK_CELLS_CLASS)) {\n      EventHandler.remove(this.parent.getContentTable(), 'mousemove', this.onMouseSelection);\n      EventHandler.remove(this.parent.getContentTable(), 'mouseup', this.onMoveUp);\n    }\n\n    if (e.target.classList.contains(ALLDAY_CELLS_CLASS)) {\n      var allDayRow = this.parent.getAllDayRow();\n      EventHandler.remove(allDayRow, 'mousemove', this.onMouseSelection);\n      EventHandler.remove(allDayRow, 'mouseup', this.onMoveUp);\n    }\n\n    if (this.isPreventAction(e)) {\n      return;\n    }\n\n    var queryStr = '.' + WORK_CELLS_CLASS + ',.' + ALLDAY_CELLS_CLASS + ',.' + HEADER_CELLS_CLASS;\n    var target = closest(e.target, queryStr);\n\n    if (this.parent.currentView === 'TimelineYear' && target.classList.contains(OTHERMONTH_CLASS)) {\n      return;\n    }\n\n    this.parent.activeCellsData = this.getSelectedElements(target);\n    var cellData = {};\n\n    if (this.parent.eventWindow) {\n      this.parent.eventWindow.convertToEventData(this.parent.activeCellsData, cellData);\n    }\n\n    var selectedCells = this.parent.getSelectedCells();\n    var args = {\n      data: cellData,\n      element: this.parent.activeCellsData.element,\n      event: e,\n      requestType: cellSelect,\n      showQuickPopup: false\n    };\n    this.parent.trigger(select, args, function (selectArgs) {\n      var isPopupShow = selectArgs.showQuickPopup || _this.parent.quickInfoOnSelectionEnd;\n\n      if (isPopupShow && selectedCells.length > 1) {\n        var cellArgs = extend(_this.parent.activeCellsData, {\n          cancel: false,\n          event: e,\n          name: 'cellClick'\n        });\n\n        _this.parent.notify(cellClick, cellArgs);\n      }\n    });\n  };\n\n  KeyboardInteraction.prototype.processEnter = function (e) {\n    if (this.parent.activeViewOptions.readonly && !e.target.classList.contains(APPOINTMENT_CLASS) || this.isPreventAction(e)) {\n      return;\n    }\n\n    if (this.parent.currentView === 'TimelineYear' && e.target.classList.contains(OTHERMONTH_CLASS)) {\n      return;\n    }\n\n    var target = e.target;\n\n    if (closest(target, '.' + POPUP_WRAPPER_CLASS)) {\n      if (target.classList.contains(QUICK_POPUP_EVENT_DETAILS_CLASS) || target.classList.contains(EVENT_CREATE_CLASS) || target.classList.contains(EDIT_EVENT_CLASS) || target.classList.contains(DELETE_EVENT_CLASS) || target.classList.contains(CLOSE_CLASS)) {\n        target.click();\n        e.preventDefault();\n      } else if (target.classList.contains(SUBJECT_CLASS)) {\n        this.parent.element.querySelector('.' + EVENT_CREATE_CLASS).click();\n        e.preventDefault();\n      }\n\n      return;\n    }\n\n    if (target.classList.contains(RESOURCE_CELLS_CLASS) && target.classList.contains(RESOURCE_PARENT_CLASS)) {\n      var resourceIcon = target.querySelector('.' + RESOURCE_TREE_ICON_CLASS);\n\n      if (resourceIcon) {\n        resourceIcon.click();\n      }\n\n      return;\n    }\n\n    if (target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(ALLDAY_CELLS_CLASS)) {\n      this.parent.activeCellsData = this.getSelectedElements(target);\n      var args = extend(this.parent.activeCellsData, {\n        cancel: false,\n        event: e\n      });\n\n      if (this.parent.allowInline) {\n        var inlineArgs = {\n          element: args.element,\n          groupIndex: args.groupIndex,\n          type: 'Cell'\n        };\n        this.parent.notify(inlineClick, inlineArgs);\n      } else {\n        if (this.parent.currentView === 'Year') {\n          target.click();\n        } else {\n          this.parent.notify(cellClick, args);\n        }\n      }\n\n      return;\n    }\n\n    if (target.classList.contains(INLINE_SUBJECT_CLASS) && this.parent.inlineModule) {\n      this.parent.inlineModule.inlineCrudActions(target);\n      return;\n    }\n\n    if (target.classList.contains(APPOINTMENT_CLASS) || target.classList.contains(MORE_EVENT_CLOSE_CLASS) || target.classList.contains(ALLDAY_APPOINTMENT_SECTION_CLASS) || target.classList.contains(MORE_INDICATOR_CLASS)) {\n      target.click();\n      return;\n    }\n\n    if (target.classList.contains(MORE_EVENT_HEADER_DATE_CLASS)) {\n      this.parent.setProperties({\n        selectedDate: this.parent.getDateFromElement(target)\n      }, true);\n      this.parent.changeView(this.parent.getNavigateView(), e);\n      this.processEscape(e);\n      return;\n    }\n  };\n\n  KeyboardInteraction.prototype.getSelectedElements = function (target) {\n    var cellDetails;\n\n    if (this.selectedCells.length > 1 && target.classList.contains(SELECTED_CELL_CLASS)) {\n      var start = this.parent.getCellDetails(this.selectedCells[0]);\n      var end = this.parent.getCellDetails(this.selectedCells.slice(-1)[0]);\n      start.endTime = end.endTime;\n      start.element = target;\n      cellDetails = start;\n    } else {\n      cellDetails = this.parent.getCellDetails(target);\n    }\n\n    return cellDetails;\n  };\n\n  KeyboardInteraction.prototype.getCells = function (isInverseTable, start, end) {\n    var tableEle = this.parent.getContentTable();\n    var isTimelineYear = this.parent.currentView === 'TimelineYear';\n    var query = isTimelineYear && !isInverseTable ? '.' + WORK_CELLS_CLASS + ':not(.' + OTHERMONTH_CLASS + ')' : 'td';\n    var cells = [].slice.call(tableEle.querySelectorAll(query));\n    var maxRow = tableEle.rows.length;\n    var maxColumn = tableEle.rows[0].cells.length;\n\n    if (start && start.classList.contains(ALLDAY_CELLS_CLASS)) {\n      var allDayRow = this.parent.getAllDayRow();\n      cells = [].slice.call(allDayRow.cells);\n      maxRow = 1;\n      maxColumn = allDayRow.cells.length;\n    }\n\n    var startIndex = cells.indexOf(start);\n    var endIndex = cells.indexOf(end);\n    var inverseCells = [];\n\n    if (isInverseTable) {\n      for (var i = 0; i < maxColumn; i++) {\n        for (var j = 0; j < maxRow; j++) {\n          var cell = cells[maxColumn * j + i];\n\n          if (isTimelineYear && cell.classList.contains(OTHERMONTH_CLASS)) {\n            continue;\n          }\n\n          inverseCells.push(cell);\n        }\n      }\n\n      startIndex = inverseCells.indexOf(start);\n      endIndex = inverseCells.indexOf(end);\n    }\n\n    if (startIndex > endIndex) {\n      var temp = startIndex;\n      startIndex = endIndex;\n      endIndex = temp;\n    }\n\n    var sCells = isInverseTable ? inverseCells : cells;\n    return sCells.slice(startIndex, endIndex + 1);\n  };\n\n  KeyboardInteraction.prototype.focusFirstCell = function () {\n    if (this.parent.currentView === 'Agenda') {\n      var focusCell = this.parent.getContentTable().querySelector('.' + AGENDA_CELLS_CLASS);\n      focusCell.setAttribute('tabindex', '0');\n      focusCell.focus();\n      return;\n    }\n\n    this.parent.eventBase.removeSelectedAppointmentClass();\n\n    if (this.parent.activeView.isTimelineView() && this.parent.currentView !== 'TimelineYear') {\n      var cell = this.parent.element.querySelector('.' + CONTENT_TABLE_CLASS + ' tr:not(.' + HIDDEN_CLASS + ') .' + WORK_CELLS_CLASS + ':not(.' + RESOURCE_GROUP_CELLS_CLASS + ')');\n      this.selectCells(false, cell);\n    } else if (this.parent.currentView.indexOf('Year') > -1) {\n      var query = '.' + WORK_CELLS_CLASS + ':not(.' + OTHERMONTH_CLASS + ')' + ':not(.' + RESOURCE_GROUP_CELLS_CLASS + ')';\n      var isVerticalYear = this.parent.currentView === 'TimelineYear' && this.parent.activeViewOptions.orientation === 'Vertical';\n      query += isVerticalYear ? '[data-date=\"' + this.parent.activeView.startDate().getTime() + '\"]' : '';\n      this.selectCells(false, this.parent.element.querySelector(query));\n    } else {\n      this.selectCells(false, this.parent.getWorkCellElements()[0]);\n    }\n  };\n\n  KeyboardInteraction.prototype.isInverseTableSelect = function () {\n    return this.parent.activeView.isInverseTableSelect;\n  };\n  /**\n   * Internal method to select cells\n   *\n   * @param {boolean} isMultiple Accepts to select multiple cells or not\n   * @param {HTMLTableCellElement} targetCell Accepts the target cells\n   * @returns {void}\n   * @private\n   */\n\n\n  KeyboardInteraction.prototype.selectCells = function (isMultiple, targetCell) {\n    var _this = this;\n\n    this.parent.removeSelectedClass();\n    var target = targetCell instanceof Array ? targetCell.slice(-1)[0] : targetCell;\n\n    if (isMultiple) {\n      var initialId_1;\n      var views_1 = ['Day', 'Week', 'WorkWeek', 'TimelineDay', 'TimelineWeek', 'TimelineWorkWeek', 'TimelineMonth', 'TimelineYear'];\n      var args = {\n        element: targetCell,\n        requestType: 'mousemove',\n        allowMultipleRow: true\n      };\n      this.parent.inlineModule.removeInlineAppointmentElement();\n      this.parent.trigger(select, args, function (selectArgs) {\n        var allowMultipleRow = !selectArgs.allowMultipleRow || !_this.parent.allowMultiRowSelection;\n\n        if (allowMultipleRow) {\n          var isTimelineYear = _this.parent.currentView === 'TimelineYear';\n\n          if (isTimelineYear && _this.parent.activeViewOptions.orientation === 'Horizontal' || _this.parent.currentView === 'Month') {\n            var isGroupYear = isTimelineYear && _this.parent.activeViewOptions.group.resources.length > 0;\n            target = isGroupYear ? _this.initialTarget : _this.initialTarget.parentElement.children[target.cellIndex];\n          } else if (views_1.indexOf(_this.parent.currentView) > -1) {\n            target = target.parentElement.children[_this.initialTarget.cellIndex];\n          }\n        }\n\n        var selectedCells = _this.getCells(_this.isInverseTableSelect(), _this.initialTarget, target);\n\n        if (_this.parent.activeViewOptions.group.resources.length > 0) {\n          initialId_1 = _this.initialTarget.getAttribute('data-group-index');\n          var resourceSelectedCells = [];\n\n          for (var _i = 0, selectedCells_1 = selectedCells; _i < selectedCells_1.length; _i++) {\n            var cell = selectedCells_1[_i];\n\n            if (cell.getAttribute('data-group-index') === initialId_1) {\n              resourceSelectedCells.push(cell);\n            }\n          }\n\n          selectedCells = resourceSelectedCells;\n        }\n\n        if (!_this.parent.allowMultiCellSelection) {\n          selectedCells = [_this.initialTarget];\n        }\n\n        _this.selectedCells = selectedCells;\n\n        if (selectedCells.length > 2 && !target.classList.contains(ALLDAY_CELLS_CLASS)) {\n          var allDayCells = _this.getAllDayCells(selectedCells);\n\n          if (_this.parent.activeViewOptions.group.resources.length > 0) {\n            var resourceAllDayCells = [];\n\n            for (var _a = 0, allDayCells_1 = allDayCells; _a < allDayCells_1.length; _a++) {\n              var cell = allDayCells_1[_a];\n\n              if (cell.getAttribute('data-group-index') === initialId_1) {\n                resourceAllDayCells.push(cell);\n              }\n            }\n\n            allDayCells = resourceAllDayCells;\n          }\n\n          selectedCells = selectedCells.concat(allDayCells);\n        }\n\n        if (target.getAttribute('data-group-index') !== initialId_1 && _this.parent.activeViewOptions.group.resources.length > 0) {\n          target = _this.selectedCells[_this.selectedCells.length - 1];\n        }\n\n        _this.parent.addSelectedClass(selectedCells, target);\n      });\n    } else {\n      var args = {\n        element: target,\n        requestType: cellSelect\n      }; // activeCellsData is not reset on schedule property changed(group properties)\n      // const cellData: Record<string, any> = {};\n      // const cellDetails: CellClickEventArgs = this.parent.getCellDetails(target);\n      // if (this.parent.eventWindow && cellDetails) {\n      //     if (this.parent.activeCellsData.element !== cellDetails.element) {\n      //         this.parent.activeCellsData = cellDetails;\n      //     }\n      //     this.parent.eventWindow.convertToEventData(this.parent.activeCellsData as unknown as Record<string, any>, cellData);\n      //     args.data = cellData;\n      // }\n\n      this.parent.trigger(select, args, function () {\n        _this.initialTarget = target;\n        _this.selectedCells = [target];\n\n        _this.parent.addSelectedClass([target], target);\n      });\n    }\n  };\n\n  KeyboardInteraction.prototype.selectAppointment = function (isReverse, target) {\n    var appointments = this.getAppointmentElements();\n\n    if (appointments.length < 0) {\n      return;\n    }\n\n    this.parent.eventBase.removeSelectedAppointmentClass();\n    var nextAppEle;\n\n    if (target.classList.contains(APPOINTMENT_CLASS)) {\n      var targetIndex = appointments.indexOf(target);\n      nextAppEle = appointments[isReverse ? targetIndex - 1 : targetIndex + 1];\n    } else {\n      nextAppEle = isReverse ? appointments[appointments.length - 1] : appointments[0];\n    }\n\n    if (nextAppEle) {\n      this.parent.eventBase.addSelectedAppointments([nextAppEle], true);\n      nextAppEle.focus();\n      addClass([nextAppEle], AGENDA_SELECTED_CELL);\n    }\n  };\n\n  KeyboardInteraction.prototype.selectAppointmentElementFromWorkCell = function (isReverse, target) {\n    var _this = this;\n\n    this.parent.eventBase.removeSelectedAppointmentClass();\n    this.parent.removeSelectedClass();\n\n    if (target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(ALLDAY_CELLS_CLASS)) {\n      var appointmentElements_1 = this.getUniqueAppointmentElements();\n      var filteredElements_1 = [];\n      var selectedDate_1 = this.parent.getDateFromElement(target).getTime();\n      var selectedSeriesEvents = this.parent.eventsProcessed.filter(function (eventObject) {\n        return !isReverse ? eventObject[_this.parent.eventFields.startTime].getTime() >= selectedDate_1 : eventObject[_this.parent.eventFields.startTime].getTime() <= selectedDate_1;\n      });\n      selectedSeriesEvents.filter(function (event) {\n        appointmentElements_1.filter(function (element) {\n          if (JSON.stringify(event.Guid) === JSON.stringify(element.getAttribute('data-guid'))) {\n            filteredElements_1.push(element);\n          }\n        });\n      });\n\n      if (filteredElements_1.length > 0) {\n        var selectedElement = isReverse ? filteredElements_1[filteredElements_1.length - 1] : filteredElements_1[0];\n        var focusElements = this.getAppointmentElementsByGuid(selectedElement.getAttribute('data-guid'));\n        this.parent.eventBase.addSelectedAppointments(focusElements, true);\n        focusElements[focusElements.length - 1].focus();\n      }\n    }\n  };\n\n  KeyboardInteraction.prototype.getAllDayCells = function (cells) {\n    var allDayRow = this.parent.getAllDayRow();\n\n    if (!allDayRow) {\n      return [];\n    }\n\n    var startCell = cells[0];\n    var endCell = cells[cells.length - 1];\n    var start = this.parent.getCellDetails(startCell);\n    var end = this.parent.getCellDetails(endCell);\n\n    if (end.endTime.getTime() - start.startTime.getTime() >= MS_PER_DAY) {\n      var allDayCells = [].slice.call(allDayRow.cells);\n      return allDayCells.slice(startCell.cellIndex, endCell.cellIndex + 1);\n    }\n\n    return [];\n  };\n\n  KeyboardInteraction.prototype.getAppointmentElements = function () {\n    return [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CLASS));\n  };\n\n  KeyboardInteraction.prototype.getAppointmentElementsByGuid = function (guid) {\n    return [].slice.call(this.parent.element.querySelectorAll('div[data-guid=\"' + guid + '\"]'));\n  };\n\n  KeyboardInteraction.prototype.getUniqueAppointmentElements = function () {\n    var appointments = this.getAppointmentElements();\n    var appointmentElements = [];\n    appointments.map(function (value) {\n      return value.getAttribute('data-guid');\n    }).filter(function (value, index, self) {\n      if (self.indexOf(value) === index) {\n        appointmentElements.push(appointments[parseInt(index.toString(), 10)]);\n      }\n    });\n    return appointmentElements;\n  };\n\n  KeyboardInteraction.prototype.getWorkCellFromAppointmentElement = function (target) {\n    var selectedObject = this.parent.eventBase.getEventByGuid(target.getAttribute('data-guid'));\n    return this.parent.eventBase.selectWorkCellByTime([selectedObject]);\n  };\n\n  KeyboardInteraction.prototype.processViewNavigation = function (e) {\n    var index = parseInt(e.key, 10) - 1;\n\n    if (index < this.parent.views.length) {\n      var view = this.parent.viewCollections[parseInt(index.toString(), 10)].option;\n      this.parent.changeView(view, e, undefined, index);\n\n      if (this.parent.headerModule) {\n        this.parent.headerModule.element.querySelector('.e-active-view button').focus();\n      }\n    }\n  };\n\n  KeyboardInteraction.prototype.cancelUpDownAction = function (isTimelineYear) {\n    var isVerticalYear = isTimelineYear && this.parent.activeViewOptions.orientation === 'Vertical';\n    var isGroup = this.parent.activeViewOptions.group.resources.length > 0;\n\n    if (isVerticalYear && isGroup || isTimelineYear && this.initialTarget.classList.contains(OTHERMONTH_CLASS)) {\n      return true;\n    }\n\n    if (this.parent.activeView.isTimelineView() && !isTimelineYear || this.parent.currentView === 'MonthAgenda') {\n      return true;\n    }\n\n    return false;\n  };\n\n  KeyboardInteraction.prototype.processUp = function (e, isMultiple) {\n    var isTimelineYear = this.parent.currentView === 'TimelineYear';\n\n    if (isMultiple && this.cancelUpDownAction(isTimelineYear)) {\n      return;\n    }\n\n    var target = e.target;\n    var selectedElements = this.parent.getSelectedCells();\n    var selectedEventElements = this.parent.eventBase.getSelectedAppointments();\n    var moreEventWrapper = this.parent.element.querySelector('.' + MORE_POPUP_WRAPPER_CLASS);\n    var quickPopupWrapper = this.getQuickPopupElement();\n\n    if (selectedElements.length > 0 && !e.target.classList.contains(WORK_CELLS_CLASS)) {\n      target = selectedElements[selectedElements.length - 1];\n    }\n\n    if (selectedEventElements.length > 0 && !moreEventWrapper.classList.contains(POPUP_OPEN) && !quickPopupWrapper.classList.contains(POPUP_OPEN) && ['Day', 'Week', 'WorkWeek', 'Month'].indexOf(this.parent.currentView) !== -1) {\n      target = this.getWorkCellFromAppointmentElement(selectedEventElements[selectedEventElements.length - 1]);\n      this.parent.eventBase.removeSelectedAppointmentClass();\n    }\n\n    if (!target) {\n      return;\n    }\n\n    if (target.classList.contains(WORK_CELLS_CLASS) && !this.parent.element.querySelector('.' + POPUP_OPEN)) {\n      var tableRows = this.parent.getTableRows();\n      var curRowIndex = tableRows.indexOf(target.parentElement);\n      var targetCell = void 0;\n\n      if (isTimelineYear && isMultiple && this.parent.activeViewOptions.group.resources.length === 0) {\n        targetCell = this.isInverseTableSelect() ? this.getVerticalUpDownCell(tableRows, target, curRowIndex, true) : this.getHorizontalUpDownCell(tableRows, target, curRowIndex, true);\n      }\n\n      if ((curRowIndex > 0 || targetCell) && curRowIndex < tableRows.length) {\n        targetCell = targetCell ? targetCell : tableRows[curRowIndex - 1].cells[target.cellIndex];\n\n        if (this.parent.currentView === 'Year' && targetCell.classList.contains(OTHERMONTH_CLASS)) {\n          if (this.parent.activeView.getStartDate().getTime() < +targetCell.getAttribute('data-date')) {\n            targetCell = this.getYearUpDownCell(tableRows, curRowIndex - 1, target.cellIndex, true);\n          } else {\n            return;\n          }\n        }\n\n        this.selectCells(isMultiple, targetCell);\n      }\n    } else if (this.parent.currentView === 'Agenda' || this.parent.currentView === 'MonthAgenda') {\n      this.selectAppointment(true, target);\n    }\n  };\n\n  KeyboardInteraction.prototype.processDown = function (e, isMultiple) {\n    var isTimelineYear = this.parent.currentView === 'TimelineYear';\n\n    if (isMultiple && this.cancelUpDownAction(isTimelineYear)) {\n      return;\n    }\n\n    var target = e.target;\n    var selectedCells = this.parent.getSelectedCells();\n    var selectedElements = this.parent.eventBase.getSelectedAppointments();\n    var moreEventWrapper = this.parent.element.querySelector('.' + MORE_POPUP_WRAPPER_CLASS);\n    var quickPopupWrapper = this.getQuickPopupElement();\n\n    if (selectedCells.length > 0 && !e.target.classList.contains(WORK_CELLS_CLASS)) {\n      target = selectedCells[selectedCells.length - 1];\n    }\n\n    if (selectedElements.length > 0 && !moreEventWrapper.classList.contains(POPUP_OPEN) && !quickPopupWrapper.classList.contains(POPUP_OPEN) && ['Day', 'Week', 'WorkWeek', 'Month'].indexOf(this.parent.currentView) !== -1) {\n      target = this.getWorkCellFromAppointmentElement(selectedElements[selectedElements.length - 1]);\n      this.parent.eventBase.removeSelectedAppointmentClass();\n    }\n\n    var tableRows = this.parent.getTableRows();\n\n    if (!target) {\n      return;\n    }\n\n    if (target.classList.contains(WORK_CELLS_CLASS) && !this.parent.element.querySelector('.' + POPUP_OPEN)) {\n      var curRowIndex = tableRows.indexOf(target.parentElement);\n      var targetCell = void 0;\n\n      if (isTimelineYear && isMultiple && this.parent.activeViewOptions.group.resources.length === 0) {\n        targetCell = this.isInverseTableSelect() ? this.getVerticalUpDownCell(tableRows, target, curRowIndex, false) : this.getHorizontalUpDownCell(tableRows, target, curRowIndex, false);\n      }\n\n      if (curRowIndex >= 0 && (curRowIndex < tableRows.length - 1 || targetCell)) {\n        targetCell = targetCell ? targetCell : tableRows[curRowIndex + 1].cells[target.cellIndex];\n\n        if (this.parent.currentView === 'Year' && targetCell.classList.contains(OTHERMONTH_CLASS)) {\n          if (this.parent.activeView.getEndDate().getTime() > +targetCell.getAttribute('data-date')) {\n            targetCell = this.getYearUpDownCell(tableRows, curRowIndex + 1, target.cellIndex, false);\n          } else {\n            return;\n          }\n        }\n\n        this.selectCells(isMultiple, targetCell);\n      }\n    } else if (this.parent.currentView === 'Agenda' || this.parent.currentView === 'MonthAgenda') {\n      this.selectAppointment(false, target);\n    }\n  };\n\n  KeyboardInteraction.prototype.getYearUpDownCell = function (tableRows, rowIndex, cellIndex, isUp) {\n    while (tableRows[parseInt(rowIndex.toString(), 10)] && tableRows[parseInt(rowIndex.toString(), 10)].cells[parseInt(cellIndex.toString(), 10)].classList.contains(OTHERMONTH_CLASS)) {\n      rowIndex = rowIndex + (isUp ? -1 : 1);\n    }\n\n    return tableRows[parseInt(rowIndex.toString(), 10)].cells[parseInt(cellIndex.toString(), 10)];\n  }; // eslint-disable-next-line max-len\n\n\n  KeyboardInteraction.prototype.getHorizontalUpDownCell = function (tableRows, target, curRowIndex, isUp) {\n    var row = tableRows[curRowIndex + (isUp ? -1 : 1)];\n    var cell = row ? row.cells[target.cellIndex] : target;\n\n    if (cell.classList.contains(OTHERMONTH_CLASS)) {\n      var workCell = row.querySelector('.' + WORK_CELLS_CLASS + ':not(.' + OTHERMONTH_CLASS + ')');\n      var date = new Date(+workCell.getAttribute('data-date'));\n      var query = '[data-date=\"' + new Date(date.getFullYear(), date.getMonth() + 1, 0).getTime() + '\"]';\n      cell = cell.cellIndex < workCell.cellIndex ? workCell : row.querySelector(query);\n    }\n\n    return cell;\n  }; // eslint-disable-next-line max-len\n\n\n  KeyboardInteraction.prototype.getVerticalUpDownCell = function (tableRows, target, curRowIndex, isUp) {\n    var hasRow = isUp && curRowIndex > 0 || !isUp && curRowIndex < tableRows.length - 1;\n    var targetCell = hasRow ? tableRows[curRowIndex + (isUp ? -1 : 1)].cells[target.cellIndex] : undefined;\n\n    if (!targetCell || targetCell.classList.contains(OTHERMONTH_CLASS)) {\n      var column = tableRows[parseInt(curRowIndex.toString(), 10)].cells[target.cellIndex - (isUp ? 1 : -1)];\n\n      if (column) {\n        var dateAttr = +target.getAttribute('data-date') - (isUp ? MS_PER_DAY : -MS_PER_DAY);\n        return this.parent.getContentTable().querySelector('.' + WORK_CELLS_CLASS + '[data-date=\"' + dateAttr + '\"]');\n      }\n\n      targetCell = target;\n    }\n\n    return targetCell;\n  };\n\n  KeyboardInteraction.prototype.processLeftRight = function (target) {\n    var tableEle = this.parent.currentView === 'Year' ? target.closest('tbody') : this.parent.getContentTable();\n    var curRowIndex = target.parentNode.sectionRowIndex;\n    var key = {\n      element: tableEle,\n      rowIndex: curRowIndex,\n      columnIndex: target.cellIndex,\n      maxIndex: tableEle.rows[parseInt(curRowIndex.toString(), 10)].cells.length\n    };\n    return key;\n  };\n\n  KeyboardInteraction.prototype.getQuickPopupElement = function () {\n    return (this.parent.isAdaptive ? document.body : this.parent.element).querySelector('.' + POPUP_WRAPPER_CLASS);\n  };\n\n  KeyboardInteraction.prototype.isCancelLeftRightAction = function (e, isMultiple, isTimelineYear) {\n    var prevent = this.parent.currentView === 'MonthAgenda' || isTimelineYear && this.initialTarget.classList.contains(OTHERMONTH_CLASS);\n\n    if (this.parent.currentView === 'Agenda' || isMultiple && prevent) {\n      return true;\n    }\n\n    if (this.isPreventAction(e) && isMultiple) {\n      return true;\n    }\n\n    var moreEventWrapper = this.parent.element.querySelector('.' + MORE_POPUP_WRAPPER_CLASS);\n    var quickPopupWrapper = this.getQuickPopupElement();\n\n    if (moreEventWrapper.classList.contains(POPUP_OPEN) || quickPopupWrapper.classList.contains(POPUP_OPEN)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  KeyboardInteraction.prototype.processRight = function (e, isMultiple) {\n    var isTimelineYear = this.parent.currentView === 'TimelineYear';\n\n    if (this.isCancelLeftRightAction(e, isMultiple, isTimelineYear)) {\n      return;\n    }\n\n    var selectedCells = this.parent.getSelectedCells();\n    var targetCell;\n    var selectedAppointments = this.parent.eventBase.getSelectedAppointments();\n    var target = e.target;\n\n    if (selectedCells.length > 0 && !target.classList.contains(WORK_CELLS_CLASS) && !target.classList.contains(ALLDAY_CELLS_CLASS)) {\n      target = selectedCells[selectedCells.length - 1];\n    }\n\n    if (selectedAppointments.length > 0) {\n      target = this.getWorkCellFromAppointmentElement(selectedAppointments[selectedAppointments.length - 1]);\n      this.parent.eventBase.removeSelectedAppointmentClass();\n\n      if (!target) {\n        return;\n      }\n    }\n\n    if (target.classList.contains(WORK_CELLS_CLASS) && e.target.classList.contains(WORK_CELLS_CLASS)) {\n      var key = this.processLeftRight(target);\n      var targetDate = new Date(+target.getAttribute('data-date'));\n      var isMonthEnd = this.parent.currentView === 'Year' && targetDate.getTime() === lastDateOfMonth(targetDate).getTime();\n\n      if (key.columnIndex >= 0 && key.columnIndex < key.maxIndex - 1 && !isMonthEnd) {\n        targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex].cells[target.cellIndex + 1], 'right');\n\n        if (isTimelineYear && isMultiple && targetCell.classList.contains(OTHERMONTH_CLASS)) {\n          targetCell = this.getTimelineYearTargetCell(key, target, true);\n        }\n\n        if (!isNullOrUndefined(targetCell)) {\n          this.selectCells(isMultiple, targetCell);\n        }\n      } else if (key.columnIndex === key.maxIndex - 1 || isMonthEnd) {\n        if (!this.isInverseTableSelect() && key.rowIndex < key.element.rows.length - 1 && !isMonthEnd) {\n          targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex + 1].cells[0], 'right');\n          var changeTargetCell = isTimelineYear && isMultiple && targetCell.classList.contains(OTHERMONTH_CLASS);\n          targetCell = changeTargetCell ? this.getHorizontalLeftRightCell(key, target, true) : targetCell;\n\n          if (!isNullOrUndefined(targetCell)) {\n            this.selectCells(isMultiple, targetCell);\n          }\n        } else if (!isMultiple) {\n          if (isMonthEnd && targetDate.getTime() !== this.parent.activeView.getEndDate().getTime()) {\n            this.selectCells(isMultiple, this.parent.element.querySelector(':not(.' + OTHERMONTH_CLASS + ')[data-date=\"' + (targetDate.getTime() + MS_PER_DAY) + '\"]'));\n            return;\n          }\n\n          var rowIndex = this.isInverseTableSelect() ? key.rowIndex : 0;\n          this.parent.changeDate(this.parent.activeView.getNextPreviousDate('next'), e);\n          var tableEle = this.parent.getContentTable();\n          var cell = isMonthEnd ? tableEle.rows[parseInt(rowIndex.toString(), 10)].querySelector('.' + WORK_CELLS_CLASS + ':not(.' + OTHERMONTH_CLASS + ')') : tableEle.rows[parseInt(rowIndex.toString(), 10)].cells[0];\n          this.selectCells(false, cell);\n        }\n      }\n    } else if (target.classList.contains(ALLDAY_CELLS_CLASS)) {\n      var curColIndex = target.cellIndex;\n      var allDayRow = this.parent.getAllDayRow();\n      var maxColIndex = allDayRow.cells.length;\n\n      if (curColIndex >= 0 && curColIndex < maxColIndex - 1) {\n        this.selectCells(isMultiple, allDayRow.cells[curColIndex + 1]);\n      } else if (curColIndex === maxColIndex - 1 && !isMultiple) {\n        this.parent.changeDate(this.parent.activeView.getNextPreviousDate('next'), e);\n        var allDayRow_1 = this.parent.getAllDayRow();\n        this.selectCells(false, allDayRow_1.cells[0]);\n      }\n    }\n  };\n\n  KeyboardInteraction.prototype.processLeft = function (e, isMultiple) {\n    var isTimelineYear = this.parent.currentView === 'TimelineYear';\n\n    if (this.isCancelLeftRightAction(e, isMultiple, isTimelineYear)) {\n      return;\n    }\n\n    var target = e.target;\n    var selectedCells = this.parent.getSelectedCells();\n    var targetCell;\n\n    if (selectedCells.length > 0 && !target.classList.contains(WORK_CELLS_CLASS) && !target.classList.contains(ALLDAY_CELLS_CLASS)) {\n      target = selectedCells[selectedCells.length - 1];\n    }\n\n    var selectedElements = this.parent.eventBase.getSelectedAppointments();\n\n    if (selectedElements.length > 0) {\n      target = this.getWorkCellFromAppointmentElement(selectedElements[selectedElements.length - 1]);\n      this.parent.eventBase.removeSelectedAppointmentClass();\n\n      if (!target) {\n        return;\n      }\n    }\n\n    if (e.target.classList.contains(WORK_CELLS_CLASS) && target.classList.contains(WORK_CELLS_CLASS)) {\n      var key = this.processLeftRight(target);\n      var targetDate = new Date(+target.getAttribute('data-date'));\n      var isMonthStart = this.parent.currentView === 'Year' && targetDate.getTime() === firstDateOfMonth(targetDate).getTime();\n\n      if (key.columnIndex > 0 && key.columnIndex < key.maxIndex && !isMonthStart) {\n        targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex].cells[target.cellIndex - 1], 'left');\n\n        if (isTimelineYear && isMultiple && targetCell.classList.contains(OTHERMONTH_CLASS)) {\n          targetCell = this.getTimelineYearTargetCell(key, target, false);\n        }\n\n        if (!isNullOrUndefined(targetCell)) {\n          this.selectCells(isMultiple, targetCell);\n        }\n      } else if (key.columnIndex === 0 || isMonthStart) {\n        if (!this.isInverseTableSelect() && key.rowIndex > 0) {\n          targetCell = this.calculateNextPrevDate(target, key.element.rows[key.rowIndex - 1].cells[key.maxIndex - 1], 'left');\n          var otherMonthCell = isTimelineYear && isMultiple && targetCell.classList.contains(OTHERMONTH_CLASS);\n          targetCell = otherMonthCell ? this.getHorizontalLeftRightCell(key, target, false) : targetCell;\n\n          if (!isNullOrUndefined(targetCell)) {\n            this.selectCells(isMultiple, targetCell);\n          }\n        } else if (!isMultiple) {\n          if (isMonthStart && targetDate.getTime() !== this.parent.activeView.getStartDate().getTime()) {\n            this.selectCells(isMultiple, this.parent.element.querySelector('[data-date=\"' + (targetDate.getTime() - MS_PER_DAY) + '\"]'));\n            return;\n          }\n\n          this.parent.changeDate(this.parent.activeView.getNextPreviousDate('previous'), e);\n          var tableEle = this.parent.getContentTable();\n          var rowIndex = this.isInverseTableSelect() ? key.rowIndex : tableEle.rows.length - 1;\n          var cell = tableEle.rows[parseInt(rowIndex.toString(), 10)].cells[key.maxIndex - 1];\n\n          if (isMonthStart) {\n            var tbody = this.parent.element.querySelectorAll('.' + CONTENT_TABLE_CLASS + ' tbody');\n            cell = tbody.item(tbody.length - 1).querySelector(':not(.' + OTHERMONTH_CLASS + ')[data-date=\"' + this.parent.activeView.getEndDate().getTime() + '\"]');\n          }\n\n          this.selectCells(false, cell);\n        }\n      }\n    } else if (target.classList.contains(ALLDAY_CELLS_CLASS)) {\n      var curColIndex = target.cellIndex;\n      var allDayRow = this.parent.getAllDayRow();\n      var maxColIndex = allDayRow.cells.length;\n\n      if (curColIndex > 0 && curColIndex < maxColIndex) {\n        this.selectCells(isMultiple, allDayRow.cells[curColIndex - 1]);\n      } else if (curColIndex === 0 && !isMultiple) {\n        this.parent.changeDate(this.parent.activeView.getNextPreviousDate('previous'), e);\n        var allDayRow_2 = this.parent.getAllDayRow();\n        this.selectCells(false, allDayRow_2.cells[maxColIndex - 1]);\n      }\n    }\n  };\n\n  KeyboardInteraction.prototype.getTimelineYearTargetCell = function (key, target, isRight) {\n    return this.isInverseTableSelect() ? this.getVerticalLeftRightCell(target, isRight) : this.getHorizontalLeftRightCell(key, target, isRight);\n  };\n\n  KeyboardInteraction.prototype.getHorizontalLeftRightCell = function (key, target, isRight) {\n    var row = key.element.rows[target.parentNode.sectionRowIndex + (isRight ? 1 : -1)];\n\n    if (row) {\n      var query = isRight ? '.' + WORK_CELLS_CLASS + ':not(.' + OTHERMONTH_CLASS + ')' : '[data-date=\"' + (+target.getAttribute('data-date') - MS_PER_DAY) + '\"]';\n      return row.querySelector(query);\n    }\n\n    return target;\n  };\n\n  KeyboardInteraction.prototype.getVerticalLeftRightCell = function (target, isRight) {\n    var date = new Date(+target.getAttribute('data-date'));\n    var start = new Date(date.getFullYear(), date.getMonth() + (isRight ? 1 : -1), 1);\n    var tableEle = this.parent.getContentTable();\n    var targetCell = tableEle.querySelector('[data-date=\"' + start.getTime() + '\"]');\n\n    if (targetCell.parentNode.sectionRowIndex > target.parentNode.sectionRowIndex) {\n      return targetCell;\n    }\n\n    return tableEle.querySelector('[data-date=\"' + new Date(start.getFullYear(), start.getMonth() + 1, 0).getTime() + '\"]');\n  };\n\n  KeyboardInteraction.prototype.calculateNextPrevDate = function (currentCell, target, type) {\n    var initialId = this.initialTarget.getAttribute('data-group-index');\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.currentView === 'Month') {\n      if (currentCell && target && target.getAttribute('data-group-index') !== initialId) {\n        var currentDate = this.parent.getDateFromElement(currentCell);\n        var nextPrevDate = type === 'right' ? new Date(currentDate.setDate(currentDate.getDate() + 1)) : new Date(currentDate.setDate(currentDate.getDate() - 1));\n        target = [].slice.call(this.parent.element.querySelectorAll('td[data-date=\"' + nextPrevDate.getTime().toString() + '\"]' + '[data-group-index=\"' + initialId + '\"]'))[0];\n      }\n    }\n\n    return target;\n  };\n\n  KeyboardInteraction.prototype.getFocusableElements = function (container) {\n    var queryString = 'a[href]:not([tabindex=\"-1\"]),input:not([disabled]):not([tabindex=\"-1\"]),' + 'textarea:not([disabled]):not([tabindex=\"-1\"]),button:not([disabled]):not([tabindex=\"-1\"]),' + 'select:not([disabled]):not([tabindex=\"-1\"]),[tabindex]:not([tabindex=\"-1\"]),[contentEditable=true]:not([tabindex=\"-1\"])';\n    return [].slice.call(container.querySelectorAll(queryString));\n  };\n\n  KeyboardInteraction.prototype.processTabOnPopup = function (e, popupElement) {\n    var _this = this;\n\n    var focusableElements = this.getFocusableElements(popupElement);\n    focusableElements = focusableElements.filter(function (element) {\n      var footerEle = _this.parent.element.querySelector('.' + POPUP_FOOTER_CLASS);\n\n      if (footerEle && footerEle.offsetParent) {\n        return !(element.classList.contains(EDIT_CLASS) || element.classList.contains(DELETE_CLASS));\n      } else {\n        return !(element.classList.contains(EDIT_EVENT_CLASS) || element.classList.contains(DELETE_EVENT_CLASS));\n      }\n    });\n    var firstEle = focusableElements[0];\n    var lastEle = focusableElements[focusableElements.length - 1];\n\n    if (!isNullOrUndefined(lastEle) && document.activeElement === lastEle && !e.shiftKey) {\n      e.preventDefault();\n      firstEle.focus();\n    }\n\n    if (!isNullOrUndefined(firstEle) && document.activeElement === firstEle && e.shiftKey) {\n      e.preventDefault();\n      lastEle.focus();\n    }\n  };\n\n  KeyboardInteraction.prototype.processTab = function (e, isReverse) {\n    var target = e.target;\n\n    if (target.classList.contains(INLINE_SUBJECT_CLASS) && this.parent.inlineModule) {\n      target = target.closest('.e-appointment');\n      this.parent.inlineModule.inlineCrudActions(e.target);\n    }\n\n    if (this.parent.currentView === 'TimelineYear' && target.classList.contains(OTHERMONTH_CLASS)) {\n      if (target.classList.contains(SELECTED_CELL_CLASS)) {\n        this.parent.removeSelectedClass();\n      }\n\n      return;\n    }\n\n    var popupWrapper = closest(target, '.' + POPUP_WRAPPER_CLASS + ',.' + MORE_POPUP_WRAPPER_CLASS);\n\n    if (popupWrapper && popupWrapper.classList.contains(POPUP_OPEN)) {\n      if (popupWrapper.classList.contains(MORE_POPUP_WRAPPER_CLASS)) {\n        this.parent.eventBase.removeSelectedAppointmentClass();\n      }\n\n      this.processTabOnPopup(e, popupWrapper);\n      return;\n    }\n\n    if (target.classList.contains(ROOT)) {\n      this.parent.eventBase.removeSelectedAppointmentClass();\n      return;\n    }\n\n    if (target.classList.contains(RESOURCE_CELLS_CLASS) && this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0) {\n      var index = parseInt(target.getAttribute('data-group-index'), 10);\n      var appSelector = \".\" + APPOINTMENT_CLASS + \"[data-group-index=\\\"\" + (isReverse ? index - 1 : index) + \"\\\"]\";\n      var appElements = [].slice.call(this.parent.element.querySelectorAll(appSelector));\n\n      if (appElements.length > 0) {\n        this.parent.eventBase.removeSelectedAppointmentClass();\n        var focusAppointment = isReverse ? appElements.slice(-1)[0] : appElements[0];\n        this.parent.eventBase.addSelectedAppointments([focusAppointment], true);\n        focusAppointment.focus();\n        e.preventDefault();\n      } else if (index + 1 === this.parent.resourceBase.lastResourceLevel.length) {\n        this.parent.element.focus();\n        e.preventDefault();\n      } else if (this.parent.virtualScrollModule) {\n        var virtual = this.parent.element.querySelector('.' + VIRTUAL_TRACK_CLASS);\n        var averageRowHeight = Math.round(virtual.offsetHeight / this.parent.resourceBase.expandedResources.length);\n        this.parent.element.querySelector('.e-content-wrap').scrollTop = (isReverse ? index - 1 : index + 1) * averageRowHeight;\n        this.parent.virtualScrollModule.virtualScrolling();\n      } else {\n        this.setScrollPosition(index);\n      }\n\n      return;\n    }\n\n    if (target.classList.contains(APPOINTMENT_CLASS)) {\n      var appElements = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CLASS));\n      var isTimelineYear = this.parent.currentView === 'TimelineYear';\n      var isTimeline = this.parent.activeView.isTimelineView() && !isTimelineYear;\n\n      if ((isTimeline || isTimelineYear && this.parent.activeViewOptions.orientation === 'Vertical') && this.parent.activeViewOptions.group.resources.length > 0) {\n        var index = parseInt(target.getAttribute('data-group-index'), 10);\n        appElements = [].slice.call(this.parent.element.querySelectorAll(\".\" + APPOINTMENT_CLASS + \"[data-group-index=\\\"\" + index + \"\\\"]\"));\n        var resCellSelector = \".\" + RESOURCE_CELLS_CLASS + \"[data-group-index=\\\"\" + (isReverse ? index : index + 1) + \"\\\"]\";\n        var resourceCell = this.parent.element.querySelector(resCellSelector);\n\n        if (resourceCell && (isReverse && target.getAttribute('data-guid') === appElements[0].getAttribute('data-guid') || !isReverse && target.getAttribute('data-guid') === appElements.slice(-1)[0].getAttribute('data-guid'))) {\n          this.parent.eventBase.removeSelectedAppointmentClass();\n\n          if (this.parent.virtualScrollModule) {\n            resourceCell.focus({\n              preventScroll: true\n            });\n          } else {\n            resourceCell.focus();\n          }\n\n          if (this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0 && isNullOrUndefined(this.parent.virtualScrollModule)) {\n            this.setScrollPosition(index);\n          }\n\n          e.preventDefault();\n          return;\n        }\n      }\n\n      var selectedAppointments = this.parent.eventBase.getSelectedAppointments();\n\n      if (selectedAppointments.length > 0) {\n        target = selectedAppointments[selectedAppointments.length - 1];\n      }\n\n      this.parent.eventBase.removeSelectedAppointmentClass();\n\n      if (!isReverse && target.getAttribute('data-guid') === appElements[appElements.length - 1].getAttribute('data-guid') || isReverse && target.getAttribute('data-guid') === appElements[0].getAttribute('data-guid')) {\n        return;\n      }\n\n      if (this.parent.currentView === 'Agenda' || this.parent.currentView === 'MonthAgenda') {\n        this.selectAppointment(isReverse, target);\n        e.preventDefault();\n      }\n\n      return;\n    }\n\n    var selectedCells = this.parent.getSelectedCells();\n\n    if (selectedCells.length > 0 && !target.classList.contains(APPOINTMENT_CLASS)) {\n      target = selectedCells[selectedCells.length - 1];\n      this.selectAppointmentElementFromWorkCell(isReverse, target);\n      e.preventDefault();\n      return;\n    }\n\n    if (target && !target.classList.contains(RESOURCE_CELLS_CLASS) && this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0) {\n      this.processTabOnResourceCells(target, isReverse);\n    }\n  };\n\n  KeyboardInteraction.prototype.processDelete = function (e) {\n    var activeEle = document.activeElement;\n\n    if (this.parent.currentView === 'MonthAgenda') {\n      var selectedEle = this.parent.eventBase.getSelectedEvents().element;\n      activeEle = selectedEle && isNullOrUndefined(selectedEle.length) ? selectedEle : selectedEle[0];\n    }\n\n    if (activeEle && activeEle.classList.contains(APPOINTMENT_CLASS)) {\n      addClass([activeEle], APPOINTMENT_BORDER);\n      this.parent.activeEventData = this.parent.eventBase.getSelectedEvents();\n\n      if (this.parent.activeViewOptions.readonly || activeEle.classList.contains(READ_ONLY) || !this.parent.eventSettings.allowDeleting) {\n        return;\n      }\n\n      this.parent.quickPopup.deleteClick(e);\n    }\n  };\n\n  KeyboardInteraction.prototype.processCtrlShiftNavigationArrows = function (e) {\n    if (this.parent.activeViewOptions.group.resources.length > 0 && document.activeElement.classList.contains(APPOINTMENT_CLASS)) {\n      var groupIndex = parseInt(document.activeElement.getAttribute('data-group-index'), 10);\n      var index = e.action === 'ctrlShiftLeftArrow' || e.action === 'ctrlShiftUpArrow' ? groupIndex - 1 : groupIndex + 1;\n      index = index < 0 ? 0 : index > this.parent.resourceBase.lastResourceLevel.length ? this.parent.resourceBase.lastResourceLevel.length : index;\n      var eventEle = [];\n\n      while (eventEle.length === 0 && index >= 0 && index <= this.parent.resourceBase.lastResourceLevel.length) {\n        eventEle = [].slice.call(this.parent.element.querySelectorAll(\".\" + APPOINTMENT_CLASS + \"[data-group-index=\\\"\" + index + \"\\\"]\"));\n        index = e.action === 'ctrlShiftLeftArrow' || e.action === 'ctrlShiftUpArrow' ? index - 1 : index + 1;\n      }\n\n      var nextAppEle = eventEle[0];\n\n      if (nextAppEle) {\n        this.parent.eventBase.removeSelectedAppointmentClass();\n        this.parent.eventBase.addSelectedAppointments([nextAppEle], true);\n        nextAppEle.focus();\n      }\n    } else if (this.parent.activeViewOptions.group.resources.length > 0 && !document.activeElement.classList.contains(APPOINTMENT_CLASS)) {\n      var index = this.parent.resourceBase.renderedResources[0].groupIndex;\n      var appSelector = \".\" + APPOINTMENT_CLASS + \"[data-group-index=\\\"\" + index + \"\\\"]\";\n      var appElements = [].slice.call(this.parent.element.querySelectorAll(appSelector));\n\n      if (appElements.length > 0) {\n        this.parent.eventBase.removeSelectedAppointmentClass();\n        var focusAppointment = appElements[0];\n        this.parent.eventBase.addSelectedAppointments([focusAppointment], true);\n        focusAppointment.focus();\n        e.preventDefault();\n      }\n    }\n  };\n\n  KeyboardInteraction.prototype.processEscape = function (event) {\n    this.parent.quickPopup.onClosePopup(event);\n    this.parent.quickPopup.morePopup.hide();\n\n    if (this.parent.headerModule) {\n      this.parent.headerModule.hideHeaderPopup();\n    }\n\n    if (this.parent.inlineModule) {\n      this.parent.inlineModule.removeInlineAppointmentElement();\n    }\n  };\n\n  KeyboardInteraction.prototype.isPreventAction = function (e) {\n    var target = closest(e.target, '.' + RESOURCE_GROUP_CELLS_CLASS);\n\n    if (this.parent.activeView.isTimelineView() && !isNullOrUndefined(target)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  KeyboardInteraction.prototype.processTabOnResourceCells = function (target, isReverse) {\n    var tabElements = [].slice.call(this.parent.element.querySelectorAll('[tabIndex=\"0\"]'));\n    var currentTabIndex = tabElements.indexOf(target);\n    var nextTabElement = !isReverse ? tabElements[currentTabIndex + 1] : tabElements[currentTabIndex - 1];\n\n    if (nextTabElement && nextTabElement.classList.contains(RESOURCE_CELLS_CLASS)) {\n      var groupIndex = parseInt(nextTabElement.getAttribute('data-group-index'), 10);\n\n      if (this.parent.virtualScrollModule) {\n        var resColWrap_1 = this.parent.element.querySelector('.' + RESOURCE_COLUMN_WRAP_CLASS);\n        var resCells = [].slice.call(this.parent.element.querySelectorAll('.' + RESOURCE_CELLS_CLASS));\n        resCells.forEach(function (element) {\n          if (element.getBoundingClientRect().top < resColWrap_1.getBoundingClientRect().top) {\n            element.setAttribute('tabindex', '-1');\n          }\n        });\n      } else {\n        this.setScrollPosition(groupIndex);\n      }\n    }\n  };\n\n  KeyboardInteraction.prototype.setScrollPosition = function (index) {\n    var workCell = this.parent.element.querySelector(\".\" + WORK_CELLS_CLASS + \"[data-group-index=\\\"\" + index + \"\\\"]\");\n\n    if (workCell) {\n      this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS).scrollTop = workCell.offsetTop;\n    }\n  };\n  /**\n   * Get module name.\n   *\n   * @returns {string} Returns the module name.\n   */\n\n\n  KeyboardInteraction.prototype.getModuleName = function () {\n    return 'keyboard';\n  };\n  /**\n   * To destroy the keyboard module.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  KeyboardInteraction.prototype.destroy = function () {\n    this.removeEventListener();\n    this.selectedCells = [];\n    this.keyboardModule.destroy();\n  };\n\n  return KeyboardInteraction;\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * data module is used to generate query and data source.\n *\n * @private\n */\n\n\nvar Data =\n/** @__PURE__ @class */\nfunction () {\n  /**\n   * Constructor for data module\n   *\n   * @param {Schedule} parent Accepts the schedule element instance\n   * @param {Object | DataManager} dataSource Accepts the datasource as JSON objects or DataManager\n   * @param {Query} query Accepts the query to process the data\n   * @private\n   */\n  function Data(parent, dataSource, query) {\n    this.parent = parent;\n    this.initDataManager(dataSource, query);\n  }\n  /**\n   * The function used to initialize dataManager and query\n   *\n   * @param {Object | DataManager} dataSource Accepts the datasource as JSON objects or DataManager\n   * @param {Query} query Accepts the query to process the data\n   * @returns {void}\n   * @private\n   */\n\n\n  Data.prototype.initDataManager = function (dataSource, query) {\n    this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\n    this.query = query instanceof Query ? query : new Query();\n  };\n  /**\n   * The function used to generate updated Query from schedule model\n   *\n   * @param {Date} startDate Accepts the start date\n   * @param {Date} endDate Accepts the end date\n   * @returns {void}\n   * @private\n   */\n\n\n  Data.prototype.generateQuery = function (startDate, endDate) {\n    var query = this.query.clone();\n\n    if (this.parent && this.parent.eventSettings.includeFiltersInQuery && startDate && endDate) {\n      var dateQuery = this.getStartEndQuery(startDate, endDate);\n      var recurrenceQuery = new Predicate(this.parent.eventFields.recurrenceRule, 'notequal', null).and(new Predicate(this.parent.eventFields.recurrenceRule, 'notequal', ''));\n      return query.where(dateQuery.or(recurrenceQuery));\n    }\n\n    if (startDate) {\n      query.addParams('StartDate', startDate.toISOString());\n    }\n\n    if (endDate) {\n      query.addParams('EndDate', endDate.toISOString());\n    }\n\n    return query;\n  };\n  /**\n   * The function used to generate updated Query from schedule model\n   *\n   * @param {Date} startDate Accepts the start date\n   * @param {Date} endDate Accepts the end date\n   * @returns {void}\n   * @private\n   */\n\n\n  Data.prototype.getStartEndQuery = function (startDate, endDate) {\n    var fieldMapping = this.parent.eventFields;\n    var dateQuery = new Predicate(fieldMapping.startTime, 'greaterthanorequal', startDate).and(new Predicate(fieldMapping.endTime, 'greaterthanorequal', startDate)).and(new Predicate(fieldMapping.startTime, 'lessthan', endDate)).or(new Predicate(fieldMapping.startTime, 'lessthanorequal', startDate).and(new Predicate(fieldMapping.endTime, 'greaterthan', startDate)));\n    return dateQuery;\n  };\n  /**\n   * The function used to get dataSource by executing given Query\n   *\n   * @param  {Query} query - A Query that specifies to generate dataSource\n   * @returns {void}\n   * @private\n   */\n\n\n  Data.prototype.getData = function (query) {\n    return this.dataManager.executeQuery(query);\n  };\n  /**\n   * To destroy the crud module.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Data.prototype.destroy = function () {\n    this.dataManager = null;\n    this.query = null;\n  };\n\n  return Data;\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/** @private */\n\n\nvar Gregorian =\n/** @__PURE__ @class */\nfunction () {\n  function Gregorian() {}\n\n  Gregorian.prototype.firstDateOfMonth = function (date) {\n    return new Date(date.getFullYear(), date.getMonth());\n  };\n\n  Gregorian.prototype.lastDateOfMonth = function (dt) {\n    return new Date(dt.getFullYear(), dt.getMonth() + 1, 0);\n  };\n\n  Gregorian.prototype.isMonthStart = function (date) {\n    return date.getDate() === 1;\n  };\n\n  Gregorian.prototype.getLeapYearDaysCount = function () {\n    return 366;\n  };\n\n  Gregorian.prototype.getYearDaysCount = function (date, interval) {\n    return (date.getFullYear() + interval) % 4 === 0 ? 366 : 365;\n  };\n\n  Gregorian.prototype.getDate = function (date) {\n    return date.getDate();\n  };\n\n  Gregorian.prototype.getMonth = function (date) {\n    return date.getMonth() + 1;\n  };\n\n  Gregorian.prototype.getFullYear = function (date) {\n    return date.getFullYear();\n  };\n\n  Gregorian.prototype.getYearLastDate = function (date, interval) {\n    return new Date(date.getFullYear() + interval, 0, 0);\n  };\n\n  Gregorian.prototype.getMonthDaysCount = function (date) {\n    return this.lastDateOfMonth(date).getDate();\n  };\n\n  Gregorian.prototype.getMonthStartDate = function (date) {\n    return new Date(date.getFullYear(), date.getMonth(), 1, date.getHours(), date.getMinutes());\n  };\n\n  Gregorian.prototype.getMonthEndDate = function (date) {\n    date.setDate(1);\n    return new Date(date.setMonth(date.getMonth() + 1));\n  };\n\n  Gregorian.prototype.getExpectedDays = function (date, days) {\n    return days;\n  };\n\n  Gregorian.prototype.setDate = function (dateObj, date) {\n    dateObj.setDate(date);\n  };\n\n  Gregorian.prototype.setValidDate = function (date, interval, startDate, monthValue, beginDate) {\n    if (!isNullOrUndefined(beginDate)) {\n      date.setMonth((beginDate ? monthValue : date.getMonth()) + interval);\n    } else {\n      date.setMonth(date.getMonth() + interval, startDate);\n    }\n  };\n\n  Gregorian.prototype.setMonth = function (date, interval, startDate) {\n    date.setDate(1);\n    date.setFullYear(date.getFullYear());\n    date.setMonth(interval - 1);\n    var maxDay = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n    date.setDate(Math.min(startDate, maxDay));\n  };\n\n  Gregorian.prototype.addYears = function (date, interval) {\n    date.setFullYear(date.getFullYear() + interval);\n  };\n\n  Gregorian.prototype.isSameMonth = function (date1, date2) {\n    return date1.getMonth() === date2.getMonth();\n  };\n\n  Gregorian.prototype.checkMonth = function (date, months) {\n    return months.indexOf(date.getMonth() + 1) === -1;\n  };\n\n  Gregorian.prototype.compareMonth = function (date1, date2) {\n    return date1.getMonth() > date2.getMonth();\n  };\n\n  Gregorian.prototype.isSameYear = function (date1, date2) {\n    return date1.getFullYear() === date2.getFullYear();\n  };\n\n  Gregorian.prototype.isLastMonth = function (date) {\n    return date.getMonth() === 11;\n  };\n\n  Gregorian.prototype.isLeapYear = function (year, interval) {\n    return (year + interval) % 4 === 0;\n  };\n\n  return Gregorian;\n}();\n/** @private */\n\n\nvar Islamic =\n/** @__PURE__ @class */\nfunction () {\n  function Islamic() {}\n\n  Islamic.prototype.firstDateOfMonth = function (date) {\n    var hDate = this.getHijriDate(date);\n    var gDate = HijriParser.toGregorian(hDate.year, hDate.month, 1);\n    return gDate;\n  };\n\n  Islamic.prototype.lastDateOfMonth = function (date) {\n    var hDate = this.getHijriDate(date);\n    var daysInMonth = this.getDaysInMonth(hDate.month, hDate.year);\n    var gDate = HijriParser.toGregorian(hDate.year, hDate.month, daysInMonth);\n    var finalGDate = new Date(gDate.getTime());\n    finalGDate = new Date(finalGDate.setDate(finalGDate.getDate() + 1));\n    var finalHDate = this.getHijriDate(finalGDate);\n\n    if (hDate.month === finalHDate.month) {\n      return finalGDate;\n    }\n\n    finalHDate = this.getHijriDate(gDate);\n\n    if (hDate.month === finalHDate.month) {\n      return gDate;\n    }\n\n    return new Date(gDate.setDate(gDate.getDate() - 1));\n  };\n\n  Islamic.prototype.isMonthStart = function (date) {\n    var hijriDate = this.getHijriDate(date);\n    return hijriDate.date === 1;\n  };\n\n  Islamic.prototype.getLeapYearDaysCount = function () {\n    return 355;\n  };\n\n  Islamic.prototype.getYearDaysCount = function (date, interval) {\n    var hDate = this.getHijriDate(date);\n    return this.isLeapYear(hDate.year, interval) ? 355 : 354;\n  };\n\n  Islamic.prototype.getDate = function (date) {\n    var hijriDate = this.getHijriDate(date);\n    return hijriDate.date;\n  };\n\n  Islamic.prototype.getMonth = function (date) {\n    var hDate = this.getHijriDate(date);\n    return hDate.month;\n  };\n\n  Islamic.prototype.getFullYear = function (date) {\n    var hDate = this.getHijriDate(date);\n    return hDate.year;\n  };\n\n  Islamic.prototype.getYearLastDate = function (date, interval) {\n    var hDate = this.getHijriDate(date);\n    var gDate = HijriParser.toGregorian(hDate.year + interval, 1, 0);\n    return gDate;\n  };\n\n  Islamic.prototype.getMonthDaysCount = function (date) {\n    var maxDate = this.lastDateOfMonth(date);\n    var hijriDate = this.getHijriDate(maxDate);\n    return hijriDate.date;\n  };\n\n  Islamic.prototype.getMonthStartDate = function (date) {\n    var firstDate = this.firstDateOfMonth(date);\n    return new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate(), date.getHours(), date.getMinutes());\n  };\n\n  Islamic.prototype.getMonthEndDate = function (date) {\n    var lastDate = this.lastDateOfMonth(date);\n    lastDate.setDate(lastDate.getDate() + 1);\n    return new Date(lastDate.setMonth(lastDate.getMonth()));\n  };\n\n  Islamic.prototype.getExpectedDays = function (date, days) {\n    var hDate = this.getHijriDate(date);\n    var day = [];\n\n    for (var i = 0; i < days.length; i++) {\n      var gDate = HijriParser.toGregorian(hDate.year, hDate.month, days[parseInt(i.toString(), 10)]);\n      day.push(gDate.getDate());\n    }\n\n    return day;\n  };\n\n  Islamic.prototype.setDate = function (dateObj, date) {\n    var hDate = this.getHijriDate(dateObj);\n    var gDate = HijriParser.toGregorian(hDate.year, hDate.month, date);\n    this.updateDateObj(dateObj, gDate);\n  };\n\n  Islamic.prototype.setValidDate = function (date, interval, startDate, monthValue, beginDate) {\n    var firstDate = !isNullOrUndefined(beginDate) ? this.firstDateOfMonth(beginDate) : date;\n    var hDate = this.getHijriDate(firstDate);\n    var gDate = HijriParser.toGregorian(hDate.year, hDate.month + interval, startDate);\n    this.updateDateObj(date, gDate);\n  };\n\n  Islamic.prototype.setMonth = function (date, interval, startDate) {\n    var hDate = this.getHijriDate(date);\n    var gDate = HijriParser.toGregorian(hDate.year, interval, startDate);\n    this.updateDateObj(date, gDate);\n  };\n\n  Islamic.prototype.addYears = function (date, interval, monthValue) {\n    var hDate = this.getHijriDate(date);\n    var gDate = HijriParser.toGregorian(hDate.year + interval, monthValue, 1);\n    this.updateDateObj(date, gDate);\n  };\n\n  Islamic.prototype.isSameMonth = function (date1, date2) {\n    var currentHijri = this.getHijriDate(date1);\n    var tempHijri = this.getHijriDate(date2);\n    return currentHijri.month === tempHijri.month;\n  };\n\n  Islamic.prototype.checkMonth = function (date, months) {\n    var hDate = this.getHijriDate(date);\n    return months.indexOf(hDate.month) === -1;\n  };\n\n  Islamic.prototype.compareMonth = function (date1, date2) {\n    var hDate = this.getHijriDate(date1);\n    var hDate1 = this.getHijriDate(date2);\n    return hDate.month > hDate1.month;\n  };\n\n  Islamic.prototype.isSameYear = function (date1, date2) {\n    var hDate = this.getHijriDate(date1);\n    var hDate1 = this.getHijriDate(date2);\n    return hDate.year === hDate1.year;\n  };\n\n  Islamic.prototype.isLastMonth = function (date) {\n    var hDate = this.getHijriDate(date);\n    return hDate.month === 12;\n  };\n\n  Islamic.prototype.updateDateObj = function (date, gDate) {\n    date.setFullYear(gDate.getFullYear(), gDate.getMonth(), gDate.getDate());\n  };\n\n  Islamic.prototype.isLeapYear = function (year, interval) {\n    return (14 + 11 * (year + interval)) % 30 < 11;\n  };\n\n  Islamic.prototype.getDaysInMonth = function (month, year) {\n    var length = 0;\n    length = 29 + (month + 1) % 2;\n\n    if (month === 11 && this.isLeapYear(year, 0)) {\n      length++;\n    }\n\n    return length;\n  };\n\n  Islamic.prototype.getHijriDate = function (date) {\n    return HijriParser.getHijriDate(date);\n  };\n\n  return Islamic;\n}();\n/**\n * Time zone\n */\n\n\nvar Timezone =\n/** @__PURE__ @class */\nfunction () {\n  function Timezone() {\n    this.timezoneData = [];\n    this.timezoneData = this.getTimezoneData();\n  }\n\n  Timezone.prototype.offset = function (date, timezone) {\n    var localOffset = date.getTimezoneOffset();\n\n    try {\n      var convertedDate = new Date(date.toLocaleString('en-US', {\n        timeZone: timezone\n      }));\n\n      if (!isNaN(convertedDate.getTime())) {\n        return (date.getTime() - convertedDate.getTime()) / 60000 + localOffset;\n      }\n\n      return 0;\n    } catch (error) {\n      return 0;\n    }\n  };\n\n  Timezone.prototype.convert = function (date, fromOffset, toOffset) {\n    if (typeof fromOffset === 'string') {\n      fromOffset = this.offset(date, fromOffset);\n    }\n\n    if (typeof toOffset === 'string') {\n      toOffset = this.offset(date, toOffset);\n    }\n\n    var fromLocalOffset = date.getTimezoneOffset();\n    date = new Date(date.getTime() + (fromOffset - toOffset) * 60000);\n    var toLocalOffset = date.getTimezoneOffset();\n    return new Date(date.getTime() + (toLocalOffset - fromLocalOffset) * 60000);\n  };\n\n  Timezone.prototype.add = function (date, timezone) {\n    return this.convert(date, date.getTimezoneOffset(), timezone);\n  };\n\n  Timezone.prototype.remove = function (date, timezone) {\n    return this.convert(date, timezone, date.getTimezoneOffset());\n  };\n\n  Timezone.prototype.removeLocalOffset = function (date) {\n    return new Date(date.getTime() - date.getTimezoneOffset() * 60000);\n  };\n\n  Timezone.prototype.getLocalTimezoneName = function () {\n    return window.Intl ? Intl.DateTimeFormat().resolvedOptions().timeZone || 'UTC' : 'UTC';\n  };\n\n  Timezone.prototype.getTimezoneData = function () {\n    return timezoneData;\n  };\n\n  return Timezone;\n}();\n\nvar timezoneData = [{\n  Value: 'Pacific/Niue',\n  Text: '(UTC-11:00) Niue'\n}, {\n  Value: 'Pacific/Pago_Pago',\n  Text: '(UTC-11:00) Pago Pago'\n}, {\n  Value: 'Pacific/Honolulu',\n  Text: '(UTC-10:00) Hawaii Time'\n}, {\n  Value: 'Pacific/Rarotonga',\n  Text: '(UTC-10:00) Rarotonga'\n}, {\n  Value: 'Pacific/Tahiti',\n  Text: '(UTC-10:00) Tahiti'\n}, {\n  Value: 'Pacific/Marquesas',\n  Text: '(UTC-09:30) Marquesas'\n}, {\n  Value: 'America/Anchorage',\n  Text: '(UTC-09:00) Alaska Time'\n}, {\n  Value: 'Pacific/Gambier',\n  Text: '(UTC-09:00) Gambier'\n}, {\n  Value: 'America/Los_Angeles',\n  Text: '(UTC-08:00) Pacific Time'\n}, {\n  Value: 'America/Tijuana',\n  Text: '(UTC-08:00) Pacific Time - Tijuana'\n}, {\n  Value: 'America/Vancouver',\n  Text: '(UTC-08:00) Pacific Time - Vancouver'\n}, {\n  Value: 'America/Whitehorse',\n  Text: '(UTC-08:00) Pacific Time - Whitehorse'\n}, {\n  Value: 'Pacific/Pitcairn',\n  Text: '(UTC-08:00) Pitcairn'\n}, {\n  Value: 'America/Denver',\n  Text: '(UTC-07:00) Mountain Time'\n}, {\n  Value: 'America/Phoenix',\n  Text: '(UTC-07:00) Mountain Time - Arizona'\n}, {\n  Value: 'America/Mazatlan',\n  Text: '(UTC-07:00) Mountain Time - Chihuahua, Mazatlan'\n}, {\n  Value: 'America/Dawson_Creek',\n  Text: '(UTC-07:00) Mountain Time - Dawson Creek'\n}, {\n  Value: 'America/Edmonton',\n  Text: '(UTC-07:00) Mountain Time - Edmonton'\n}, {\n  Value: 'America/Hermosillo',\n  Text: '(UTC-07:00) Mountain Time - Hermosillo'\n}, {\n  Value: 'America/Yellowknife',\n  Text: '(UTC-07:00) Mountain Time - Yellowknife'\n}, {\n  Value: 'America/Belize',\n  Text: '(UTC-06:00) Belize'\n}, {\n  Value: 'America/Chicago',\n  Text: '(UTC-06:00) Central Time'\n}, {\n  Value: 'America/Mexico_City',\n  Text: '(UTC-06:00) Central Time - Mexico City'\n}, {\n  Value: 'America/Regina',\n  Text: '(UTC-06:00) Central Time - Regina'\n}, {\n  Value: 'America/Tegucigalpa',\n  Text: '(UTC-06:00) Central Time - Tegucigalpa'\n}, {\n  Value: 'America/Winnipeg',\n  Text: '(UTC-06:00) Central Time - Winnipeg'\n}, {\n  Value: 'America/Costa_Rica',\n  Text: '(UTC-06:00) Costa Rica'\n}, {\n  Value: 'America/El_Salvador',\n  Text: '(UTC-06:00) El Salvador'\n}, {\n  Value: 'Pacific/Galapagos',\n  Text: '(UTC-06:00) Galapagos'\n}, {\n  Value: 'America/Guatemala',\n  Text: '(UTC-06:00) Guatemala'\n}, {\n  Value: 'America/Managua',\n  Text: '(UTC-06:00) Managua'\n}, {\n  Value: 'America/Cancun',\n  Text: '(UTC-05:00) America Cancun'\n}, {\n  Value: 'America/Bogota',\n  Text: '(UTC-05:00) Bogota'\n}, {\n  Value: 'Pacific/Easter',\n  Text: '(UTC-05:00) Easter Island'\n}, {\n  Value: 'America/New_York',\n  Text: '(UTC-05:00) Eastern Time'\n}, {\n  Value: 'America/Iqaluit',\n  Text: '(UTC-05:00) Eastern Time - Iqaluit'\n}, {\n  Value: 'America/Toronto',\n  Text: '(UTC-05:00) Eastern Time - Toronto'\n}, {\n  Value: 'America/Guayaquil',\n  Text: '(UTC-05:00) Guayaquil'\n}, {\n  Value: 'America/Havana',\n  Text: '(UTC-05:00) Havana'\n}, {\n  Value: 'America/Jamaica',\n  Text: '(UTC-05:00) Jamaica'\n}, {\n  Value: 'America/Lima',\n  Text: '(UTC-05:00) Lima'\n}, {\n  Value: 'America/Nassau',\n  Text: '(UTC-05:00) Nassau'\n}, {\n  Value: 'America/Panama',\n  Text: '(UTC-05:00) Panama'\n}, {\n  Value: 'America/Port-au-Prince',\n  Text: '(UTC-05:00) Port-au-Prince'\n}, {\n  Value: 'America/Rio_Branco',\n  Text: '(UTC-05:00) Rio Branco'\n}, {\n  Value: 'America/Halifax',\n  Text: '(UTC-04:00) Atlantic Time - Halifax'\n}, {\n  Value: 'America/Barbados',\n  Text: '(UTC-04:00) Barbados'\n}, {\n  Value: 'Atlantic/Bermuda',\n  Text: '(UTC-04:00) Bermuda'\n}, {\n  Value: 'America/Boa_Vista',\n  Text: '(UTC-04:00) Boa Vista'\n}, {\n  Value: 'America/Caracas',\n  Text: '(UTC-04:00) Caracas'\n}, {\n  Value: 'America/Curacao',\n  Text: '(UTC-04:00) Curacao'\n}, {\n  Value: 'America/Grand_Turk',\n  Text: '(UTC-04:00) Grand Turk'\n}, {\n  Value: 'America/Guyana',\n  Text: '(UTC-04:00) Guyana'\n}, {\n  Value: 'America/La_Paz',\n  Text: '(UTC-04:00) La Paz'\n}, {\n  Value: 'America/Manaus',\n  Text: '(UTC-04:00) Manaus'\n}, {\n  Value: 'America/Martinique',\n  Text: '(UTC-04:00) Martinique'\n}, {\n  Value: 'America/Port_of_Spain',\n  Text: '(UTC-04:00) Port of Spain'\n}, {\n  Value: 'America/Porto_Velho',\n  Text: '(UTC-04:00) Porto Velho'\n}, {\n  Value: 'America/Puerto_Rico',\n  Text: '(UTC-04:00) Puerto Rico'\n}, {\n  Value: 'America/Santo_Domingo',\n  Text: '(UTC-04:00) Santo Domingo'\n}, {\n  Value: 'America/Thule',\n  Text: '(UTC-04:00) Thule'\n}, {\n  Value: 'America/St_Johns',\n  Text: '(UTC-03:30) Newfoundland Time - St. Johns'\n}, {\n  Value: 'America/Araguaina',\n  Text: '(UTC-03:00) Araguaina'\n}, {\n  Value: 'America/Asuncion',\n  Text: '(UTC-03:00) Asuncion'\n}, {\n  Value: 'America/Belem',\n  Text: '(UTC-03:00) Belem'\n}, {\n  Value: 'America/Argentina/Buenos_Aires',\n  Text: '(UTC-03:00) Buenos Aires'\n}, {\n  Value: 'America/Campo_Grande',\n  Text: '(UTC-03:00) Campo Grande'\n}, {\n  Value: 'America/Cayenne',\n  Text: '(UTC-03:00) Cayenne'\n}, {\n  Value: 'America/Cuiaba',\n  Text: '(UTC-03:00) Cuiaba'\n}, {\n  Value: 'America/Fortaleza',\n  Text: '(UTC-03:00) Fortaleza'\n}, {\n  Value: 'America/Godthab',\n  Text: '(UTC-03:00) Godthab'\n}, {\n  Value: 'America/Maceio',\n  Text: '(UTC-03:00) Maceio'\n}, {\n  Value: 'America/Miquelon',\n  Text: '(UTC-03:00) Miquelon'\n}, {\n  Value: 'America/Montevideo',\n  Text: '(UTC-03:00) Montevideo'\n}, {\n  Value: 'Antarctica/Palmer',\n  Text: '(UTC-03:00) Palmer'\n}, {\n  Value: 'America/Paramaribo',\n  Text: '(UTC-03:00) Paramaribo'\n}, {\n  Value: 'America/Punta_Arenas',\n  Text: '(UTC-03:00) Punta Arenas'\n}, {\n  Value: 'America/Recife',\n  Text: '(UTC-03:00) Recife'\n}, {\n  Value: 'Antarctica/Rothera',\n  Text: '(UTC-03:00) Rothera'\n}, {\n  Value: 'America/Bahia',\n  Text: '(UTC-03:00) Salvador'\n}, {\n  Value: 'America/Santiago',\n  Text: '(UTC-03:00) Santiago'\n}, {\n  Value: 'Atlantic/Stanley',\n  Text: '(UTC-03:00) Stanley'\n}, {\n  Value: 'America/Noronha',\n  Text: '(UTC-02:00) Noronha'\n}, {\n  Value: 'America/Sao_Paulo',\n  Text: '(UTC-02:00) Sao Paulo'\n}, {\n  Value: 'Atlantic/South_Georgia',\n  Text: '(UTC-02:00) South Georgia'\n}, {\n  Value: 'Atlantic/Azores',\n  Text: '(UTC-01:00) Azores'\n}, {\n  Value: 'Atlantic/Cape_Verde',\n  Text: '(UTC-01:00) Cape Verde'\n}, {\n  Value: 'America/Scoresbysund',\n  Text: '(UTC-01:00) Scoresbysund'\n}, {\n  Value: 'Africa/Abidjan',\n  Text: '(UTC+00:00) Abidjan'\n}, {\n  Value: 'Africa/Accra',\n  Text: '(UTC+00:00) Accra'\n}, {\n  Value: 'Africa/Bissau',\n  Text: '(UTC+00:00) Bissau'\n}, {\n  Value: 'Atlantic/Canary',\n  Text: '(UTC+00:00) Canary Islands'\n}, {\n  Value: 'Africa/Casablanca',\n  Text: '(UTC+00:00) Casablanca'\n}, {\n  Value: 'America/Danmarkshavn',\n  Text: '(UTC+00:00) Danmarkshavn'\n}, {\n  Value: 'Europe/Dublin',\n  Text: '(UTC+00:00) Dublin'\n}, {\n  Value: 'Africa/El_Aaiun',\n  Text: '(UTC+00:00) El Aaiun'\n}, {\n  Value: 'Atlantic/Faroe',\n  Text: '(UTC+00:00) Faeroe'\n}, {\n  Value: 'Etc/UTC',\n  Text: '(UTC+00:00) UTC (no daylight saving)'\n}, {\n  Value: 'Europe/Lisbon',\n  Text: '(UTC+00:00) Lisbon'\n}, {\n  Value: 'Europe/London',\n  Text: '(UTC+00:00) London'\n}, {\n  Value: 'Africa/Monrovia',\n  Text: '(UTC+00:00) Monrovia'\n}, {\n  Value: 'Atlantic/Reykjavik',\n  Text: '(UTC+00:00) Reykjavik'\n}, {\n  Value: 'UTC',\n  Text: 'UTC'\n}, {\n  Value: 'Africa/Algiers',\n  Text: '(UTC+01:00) Algiers'\n}, {\n  Value: 'Europe/Amsterdam',\n  Text: '(UTC+01:00) Amsterdam'\n}, {\n  Value: 'Europe/Andorra',\n  Text: '(UTC+01:00) Andorra'\n}, {\n  Value: 'Europe/Berlin',\n  Text: '(UTC+01:00) Berlin'\n}, {\n  Value: 'Europe/Brussels',\n  Text: '(UTC+01:00) Brussels'\n}, {\n  Value: 'Europe/Budapest',\n  Text: '(UTC+01:00) Budapest'\n}, {\n  Value: 'Europe/Belgrade',\n  Text: '(UTC+01:00) Central European Time - Belgrade'\n}, {\n  Value: 'Europe/Prague',\n  Text: '(UTC+01:00) Central European Time - Prague'\n}, {\n  Value: 'Africa/Ceuta',\n  Text: '(UTC+01:00) Ceuta'\n}, {\n  Value: 'Europe/Copenhagen',\n  Text: '(UTC+01:00) Copenhagen'\n}, {\n  Value: 'Europe/Gibraltar',\n  Text: '(UTC+01:00) Gibraltar'\n}, {\n  Value: 'Africa/Lagos',\n  Text: '(UTC+01:00) Lagos'\n}, {\n  Value: 'Europe/Luxembourg',\n  Text: '(UTC+01:00) Luxembourg'\n}, {\n  Value: 'Europe/Madrid',\n  Text: '(UTC+01:00) Madrid'\n}, {\n  Value: 'Europe/Malta',\n  Text: '(UTC+01:00) Malta'\n}, {\n  Value: 'Europe/Monaco',\n  Text: '(UTC+01:00) Monaco'\n}, {\n  Value: 'Africa/Ndjamena',\n  Text: '(UTC+01:00) Ndjamena'\n}, {\n  Value: 'Europe/Oslo',\n  Text: '(UTC+01:00) Oslo'\n}, {\n  Value: 'Europe/Paris',\n  Text: '(UTC+01:00) Paris'\n}, {\n  Value: 'Europe/Rome',\n  Text: '(UTC+01:00) Rome'\n}, {\n  Value: 'Europe/Stockholm',\n  Text: '(UTC+01:00) Stockholm'\n}, {\n  Value: 'Europe/Tirane',\n  Text: '(UTC+01:00) Tirane'\n}, {\n  Value: 'Africa/Tunis',\n  Text: '(UTC+01:00) Tunis'\n}, {\n  Value: 'Europe/Vienna',\n  Text: '(UTC+01:00) Vienna'\n}, {\n  Value: 'Europe/Warsaw',\n  Text: '(UTC+01:00) Warsaw'\n}, {\n  Value: 'Europe/Zurich',\n  Text: '(UTC+01:00) Zurich'\n}, {\n  Value: 'Asia/Amman',\n  Text: '(UTC+02:00) Amman'\n}, {\n  Value: 'Europe/Athens',\n  Text: '(UTC+02:00) Athens'\n}, {\n  Value: 'Asia/Beirut',\n  Text: '(UTC+02:00) Beirut'\n}, {\n  Value: 'Europe/Bucharest',\n  Text: '(UTC+02:00) Bucharest'\n}, {\n  Value: 'Africa/Cairo',\n  Text: '(UTC+02:00) Cairo'\n}, {\n  Value: 'Europe/Chisinau',\n  Text: '(UTC+02:00) Chisinau'\n}, {\n  Value: 'Asia/Damascus',\n  Text: '(UTC+02:00) Damascus'\n}, {\n  Value: 'Asia/Gaza',\n  Text: '(UTC+02:00) Gaza'\n}, {\n  Value: 'Europe/Helsinki',\n  Text: '(UTC+02:00) Helsinki'\n}, {\n  Value: 'Asia/Jerusalem',\n  Text: '(UTC+02:00) Jerusalem'\n}, {\n  Value: 'Africa/Johannesburg',\n  Text: '(UTC+02:00) Johannesburg'\n}, {\n  Value: 'Africa/Khartoum',\n  Text: '(UTC+02:00) Khartoum'\n}, {\n  Value: 'Europe/Kiev',\n  Text: '(UTC+02:00) Kiev'\n}, {\n  Value: 'Africa/Maputo',\n  Text: '(UTC+02:00) Maputo'\n}, {\n  Value: 'Europe/Kaliningrad',\n  Text: '(UTC+02:00) Moscow-01 - Kaliningrad'\n}, {\n  Value: 'Asia/Nicosia',\n  Text: '(UTC+02:00) Nicosia'\n}, {\n  Value: 'Europe/Riga',\n  Text: '(UTC+02:00) Riga'\n}, {\n  Value: 'Europe/Sofia',\n  Text: '(UTC+02:00) Sofia'\n}, {\n  Value: 'Europe/Tallinn',\n  Text: '(UTC+02:00) Tallinn'\n}, {\n  Value: 'Africa/Tripoli',\n  Text: '(UTC+02:00) Tripoli'\n}, {\n  Value: 'Europe/Vilnius',\n  Text: '(UTC+02:00) Vilnius'\n}, {\n  Value: 'Africa/Windhoek',\n  Text: '(UTC+02:00) Windhoek'\n}, {\n  Value: 'Asia/Baghdad',\n  Text: '(UTC+03:00) Baghdad'\n}, {\n  Value: 'Europe/Istanbul',\n  Text: '(UTC+03:00) Istanbul'\n}, {\n  Value: 'Europe/Minsk',\n  Text: '(UTC+03:00) Minsk'\n}, {\n  Value: 'Europe/Moscow',\n  Text: '(UTC+03:00) Moscow+00 - Moscow'\n}, {\n  Value: 'Africa/Nairobi',\n  Text: '(UTC+03:00) Nairobi'\n}, {\n  Value: 'Asia/Qatar',\n  Text: '(UTC+03:00) Qatar'\n}, {\n  Value: 'Asia/Riyadh',\n  Text: '(UTC+03:00) Riyadh'\n}, {\n  Value: 'Antarctica/Syowa',\n  Text: '(UTC+03:00) Syowa'\n}, {\n  Value: 'Asia/Tehran',\n  Text: '(UTC+03:30) Tehran'\n}, {\n  Value: 'Asia/Baku',\n  Text: '(UTC+04:00) Baku'\n}, {\n  Value: 'Asia/Dubai',\n  Text: '(UTC+04:00) Dubai'\n}, {\n  Value: 'Indian/Mahe',\n  Text: '(UTC+04:00) Mahe'\n}, {\n  Value: 'Indian/Mauritius',\n  Text: '(UTC+04:00) Mauritius'\n}, {\n  Value: 'Europe/Samara',\n  Text: '(UTC+04:00) Moscow+01 - Samara'\n}, {\n  Value: 'Indian/Reunion',\n  Text: '(UTC+04:00) Reunion'\n}, {\n  Value: 'Asia/Tbilisi',\n  Text: '(UTC+04:00) Tbilisi'\n}, {\n  Value: 'Asia/Yerevan',\n  Text: '(UTC+04:00) Yerevan'\n}, {\n  Value: 'Asia/Kabul',\n  Text: '(UTC+04:30) Kabul'\n}, {\n  Value: 'Asia/Aqtau',\n  Text: '(UTC+05:00) Aqtau'\n}, {\n  Value: 'Asia/Aqtobe',\n  Text: '(UTC+05:00) Aqtobe'\n}, {\n  Value: 'Asia/Ashgabat',\n  Text: '(UTC+05:00) Ashgabat'\n}, {\n  Value: 'Asia/Dushanbe',\n  Text: '(UTC+05:00) Dushanbe'\n}, {\n  Value: 'Asia/Karachi',\n  Text: '(UTC+05:00) Karachi'\n}, {\n  Value: 'Indian/Kerguelen',\n  Text: '(UTC+05:00) Kerguelen'\n}, {\n  Value: 'Indian/Maldives',\n  Text: '(UTC+05:00) Maldives'\n}, {\n  Value: 'Antarctica/Mawson',\n  Text: '(UTC+05:00) Mawson'\n}, {\n  Value: 'Asia/Yekaterinburg',\n  Text: '(UTC+05:00) Moscow+02 - Yekaterinburg'\n}, {\n  Value: 'Asia/Tashkent',\n  Text: '(UTC+05:00) Tashkent'\n}, {\n  Value: 'Asia/Colombo',\n  Text: '(UTC+05:30) Colombo'\n}, {\n  Value: 'Asia/Kolkata',\n  Text: '(UTC+05:30) India Standard Time'\n}, {\n  Value: 'Asia/Katmandu',\n  Text: '(UTC+05:45) Katmandu'\n}, {\n  Value: 'Asia/Almaty',\n  Text: '(UTC+06:00) Almaty'\n}, {\n  Value: 'Asia/Bishkek',\n  Text: '(UTC+06:00) Bishkek'\n}, {\n  Value: 'Indian/Chagos',\n  Text: '(UTC+06:00) Chagos'\n}, {\n  Value: 'Asia/Dhaka',\n  Text: '(UTC+06:00) Dhaka'\n}, {\n  Value: 'Asia/Omsk',\n  Text: '(UTC+06:00) Moscow+03 - Omsk'\n}, {\n  Value: 'Asia/Thimphu',\n  Text: '(UTC+06:00) Thimphu'\n}, {\n  Value: 'Antarctica/Vostok',\n  Text: '(UTC+06:00) Vostok'\n}, {\n  Value: 'Indian/Cocos',\n  Text: '(UTC+06:30) Cocos'\n}, {\n  Value: 'Asia/Yangon',\n  Text: '(UTC+06:30) Rangoon'\n}, {\n  Value: 'Asia/Bangkok',\n  Text: '(UTC+07:00) Bangkok'\n}, {\n  Value: 'Indian/Christmas',\n  Text: '(UTC+07:00) Christmas'\n}, {\n  Value: 'Antarctica/Davis',\n  Text: '(UTC+07:00) Davis'\n}, {\n  Value: 'Asia/Saigon',\n  Text: '(UTC+07:00) Hanoi'\n}, {\n  Value: 'Asia/Hovd',\n  Text: '(UTC+07:00) Hovd'\n}, {\n  Value: 'Asia/Jakarta',\n  Text: '(UTC+07:00) Jakarta'\n}, {\n  Value: 'Asia/Krasnoyarsk',\n  Text: '(UTC+07:00) Moscow+04 - Krasnoyarsk'\n}, {\n  Value: 'Asia/Brunei',\n  Text: '(UTC+08:00) Brunei'\n}, {\n  Value: 'Asia/Shanghai',\n  Text: '(UTC+08:00) China Time - Beijing'\n}, {\n  Value: 'Asia/Choibalsan',\n  Text: '(UTC+08:00) Choibalsan'\n}, {\n  Value: 'Asia/Hong_Kong',\n  Text: '(UTC+08:00) Hong Kong'\n}, {\n  Value: 'Asia/Kuala_Lumpur',\n  Text: '(UTC+08:00) Kuala Lumpur'\n}, {\n  Value: 'Asia/Macau',\n  Text: '(UTC+08:00) Macau'\n}, {\n  Value: 'Asia/Makassar',\n  Text: '(UTC+08:00) Makassar'\n}, {\n  Value: 'Asia/Manila',\n  Text: '(UTC+08:00) Manila'\n}, {\n  Value: 'Asia/Irkutsk',\n  Text: '(UTC+08:00) Moscow+05 - Irkutsk'\n}, {\n  Value: 'Asia/Singapore',\n  Text: '(UTC+08:00) Singapore'\n}, {\n  Value: 'Asia/Taipei',\n  Text: '(UTC+08:00) Taipei'\n}, {\n  Value: 'Asia/Ulaanbaatar',\n  Text: '(UTC+08:00) Ulaanbaatar'\n}, {\n  Value: 'Australia/Perth',\n  Text: '(UTC+08:00) Western Time - Perth'\n}, {\n  Value: 'Asia/Pyongyang',\n  Text: '(UTC+08:30) Pyongyang'\n}, {\n  Value: 'Asia/Dili',\n  Text: '(UTC+09:00) Dili'\n}, {\n  Value: 'Asia/Jayapura',\n  Text: '(UTC+09:00) Jayapura'\n}, {\n  Value: 'Asia/Yakutsk',\n  Text: '(UTC+09:00) Moscow+06 - Yakutsk'\n}, {\n  Value: 'Pacific/Palau',\n  Text: '(UTC+09:00) Palau'\n}, {\n  Value: 'Asia/Seoul',\n  Text: '(UTC+09:00) Seoul'\n}, {\n  Value: 'Asia/Tokyo',\n  Text: '(UTC+09:00) Tokyo'\n}, {\n  Value: 'Australia/Darwin',\n  Text: '(UTC+09:30) Central Time - Darwin'\n}, {\n  Value: 'Antarctica/DumontDUrville',\n  Text: '(UTC+10:00) Dumont D\"Urville'\n}, {\n  Value: 'Australia/Brisbane',\n  Text: '(UTC+10:00) Eastern Time - Brisbane'\n}, {\n  Value: 'Pacific/Guam',\n  Text: '(UTC+10:00) Guam'\n}, {\n  Value: 'Asia/Vladivostok',\n  Text: '(UTC+10:00) Moscow+07 - Vladivostok'\n}, {\n  Value: 'Pacific/Port_Moresby',\n  Text: '(UTC+10:00) Port Moresby'\n}, {\n  Value: 'Pacific / Chuuk',\n  Text: '(UTC+10:00) Truk'\n}, {\n  Value: 'Australia/Adelaide',\n  Text: '(UTC+10:30) Central Time - Adelaide'\n}, {\n  Value: 'Antarctica/Casey',\n  Text: '(UTC+11:00) Casey'\n}, {\n  Value: 'Australia/Hobart',\n  Text: '(UTC+11:00) Eastern Time - Hobart'\n}, {\n  Value: 'Australia/Sydney',\n  Text: '(UTC+11:00) Eastern Time - Melbourne, Sydney'\n}, {\n  Value: 'Pacific/Efate',\n  Text: '(UTC+11:00) Efate'\n}, {\n  Value: 'Pacific/Guadalcanal',\n  Text: '(UTC+11:00) Guadalcanal'\n}, {\n  Value: 'Pacific/Kosrae',\n  Text: '(UTC+11:00) Kosrae'\n}, {\n  Value: 'Asia/Magadan',\n  Text: '(UTC+11:00) Moscow+08 - Magadan'\n}, {\n  Value: 'Pacific / Norfolk',\n  Text: '(UTC+11:00) Norfolk'\n}, {\n  Value: 'Pacific/Noumea',\n  Text: '(UTC+11:00) Noumea'\n}, {\n  Value: 'Pacific/Pohnpei',\n  Text: '(UTC+11:00) Ponape'\n}, {\n  Value: 'Pacific/Funafuti',\n  Text: '(UTC+12:00) Funafuti'\n}, {\n  Value: 'Pacific/Kwajalein',\n  Text: '(UTC+12:00) Kwajalein'\n}, {\n  Value: 'Pacific/Majuro',\n  Text: '(UTC+12:00) Majuro'\n}, {\n  Value: 'Asia/Kamchatka',\n  Text: '(UTC+12:00) Moscow+09 - Petropavlovsk - Kamchatskiy'\n}, {\n  Value: 'Pacific / Nauru',\n  Text: '(UTC+12:00) Nauru'\n}, {\n  Value: 'Pacific/Tarawa',\n  Text: '(UTC+12:00) Tarawa'\n}, {\n  Value: 'Pacific/Wake',\n  Text: '(UTC+12:00) Wake'\n}, {\n  Value: 'Pacific/Wallis',\n  Text: '(UTC+12:00) Wallis'\n}, {\n  Value: 'Pacific/Auckland',\n  Text: '(UTC+13:00) Auckland'\n}, {\n  Value: 'Pacific/Enderbury',\n  Text: '(UTC+13:00) Enderbury'\n}, {\n  Value: 'Pacific/Fakaofo',\n  Text: '(UTC+13:00) Fakaofo'\n}, {\n  Value: 'Pacific/Fiji',\n  Text: '(UTC+13:00) Fiji'\n}, {\n  Value: 'Pacific/Tongatapu',\n  Text: '(UTC+13:00) Tongatapu'\n}, {\n  Value: 'Pacific/Apia',\n  Text: '(UTC+14:00) Apia'\n}, {\n  Value: 'Pacific/Kiritimati',\n  Text: '(UTC+14:00) Kiritimati'\n}];\n/* eslint-disable max-len */\n\n/**\n * Date Generator from Recurrence Rule\n */\n\n/**\n * Generate Summary from Recurrence Rule\n *\n * @param {string} rule Accepts the Recurrence rule\n * @param {L10n} localeObject Accepts the locale object\n * @param {string} locale Accepts the locale name\n * @param {CalendarType} calendarType Accepts the calendar type\n * @returns {string} Returns the summary string from given recurrence rule\n */\n\nfunction generateSummary(rule, localeObject, locale, calendarType) {\n  if (calendarType === void 0) {\n    calendarType = 'Gregorian';\n  }\n\n  var ruleObject = extractObjectFromRule(rule);\n  var summary = localeObject.getConstant(EVERY) + ' ';\n  var cldrObj;\n  var cldrObj1;\n  var calendarMode = calendarType.toLowerCase();\n\n  if (locale === 'en' || locale === 'en-US') {\n    var nameSpace1 = 'months.stand-alone.abbreviated';\n    var nameSpace = 'days.stand-alone.abbreviated';\n    cldrObj1 = getValue(nameSpace1, getDefaultDateObject(calendarMode));\n    cldrObj = getValue(nameSpace, getDefaultDateObject(calendarMode));\n  } else {\n    var nameSpace1 = 'main.' + locale + '.dates.calendars.' + calendarMode + '.months.stand-alone.abbreviated';\n    var nameSpace = 'main.' + locale + '.dates.calendars.' + calendarMode + '.days.stand-alone.abbreviated';\n    cldrObj1 = getValue(nameSpace1, cldrData);\n    cldrObj = getValue(nameSpace, cldrData);\n  }\n\n  if (ruleObject.interval > 1) {\n    summary += ruleObject.interval + ' ';\n  }\n\n  switch (ruleObject.freq) {\n    case 'DAILY':\n      summary += localeObject.getConstant(DAYS);\n      break;\n\n    case 'WEEKLY':\n      summary += localeObject.getConstant(WEEKS) + ' ' + localeObject.getConstant(ON) + ' ';\n      ruleObject.day.forEach(function (day, index) {\n        summary += capitalizeFirstWord(getValue(DAYINDEXOBJECT[\"\" + day], cldrObj), 'single');\n        summary += ruleObject.day.length - 1 === index ? '' : ', ';\n      });\n      break;\n\n    case 'MONTHLY':\n      summary += localeObject.getConstant(MONTHS) + ' ' + localeObject.getConstant(ON) + ' ';\n      summary += getMonthSummary(ruleObject, cldrObj, localeObject);\n      break;\n\n    case 'YEARLY':\n      summary += localeObject.getConstant(YEARS) + ' ' + localeObject.getConstant(ON) + ' ';\n      summary += capitalizeFirstWord(getValue(ruleObject.month[0].toString(), cldrObj1), 'single') + ' ';\n      summary += getMonthSummary(ruleObject, cldrObj, localeObject);\n      break;\n  }\n\n  if (ruleObject.count) {\n    summary += ', ' + ruleObject.count + ' ' + localeObject.getConstant(TIMES);\n  } else if (ruleObject.until) {\n    var tempDate = ruleObject.until;\n    summary += ', ' + localeObject.getConstant(UNTIL) + ' ' + tempDate.getDate() + ' ' + capitalizeFirstWord(getValue((tempDate.getMonth() + 1).toString(), cldrObj1), 'single') + ' ' + tempDate.getFullYear();\n  }\n\n  return summary;\n}\n/**\n * Generates Month summary\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {string[]} cldrObj Accepts the collections of month name from calendar\n * @param {L10n} localeObj Accepts the locale object\n * @returns {string} Returns the month summary string from given recurrence rule object\n * @private\n */\n\n\nfunction getMonthSummary(ruleObject, cldrObj, localeObj) {\n  var summary = '';\n\n  if (ruleObject.monthDay.length) {\n    summary += ruleObject.monthDay[0];\n  } else if (ruleObject.day) {\n    var pos = ruleObject.setPosition - 1;\n    summary += localeObj.getConstant(WEEKPOS[pos > -1 ? pos : WEEKPOS.length - 1]) + ' ' + capitalizeFirstWord(getValue(DAYINDEXOBJECT[ruleObject.day[0]], cldrObj), 'single');\n  }\n\n  return summary;\n}\n/**\n * Generates the date collections from the given recurrence rule\n *\n * @param {Date} startDate Accepts the rule start date\n * @param {string} rule Accepts the recurrence rule\n * @param {string} excludeDate Accepts the exception dates in string format\n * @param {number} startDayOfWeek Accepts the start day index of week\n * @param {number} maximumCount Accepts the maximum number count to generate date collections\n * @param {Date} viewDate Accepts the current date instead of start date\n * @param {CalendarType} calendarMode Accepts the calendar type\n * @param {string} oldTimezone Accepts the timezone name\n * @param {string} newTimezone Accepts the timezone name\n * @returns {number[]} Returns the collection of dates\n */\n\n\nfunction generate(startDate, rule, excludeDate, startDayOfWeek, maximumCount, viewDate, calendarMode, oldTimezone, newTimezone) {\n  if (maximumCount === void 0) {\n    maximumCount = MAXOCCURRENCE;\n  }\n\n  if (viewDate === void 0) {\n    viewDate = null;\n  }\n\n  if (calendarMode === void 0) {\n    calendarMode = 'Gregorian';\n  }\n\n  if (oldTimezone === void 0) {\n    oldTimezone = null;\n  }\n\n  if (newTimezone === void 0) {\n    newTimezone = null;\n  }\n\n  var ruleObject = extractObjectFromRule(rule);\n  var cacheDate;\n  calendarUtil = getCalendarUtil(calendarMode);\n  var data = [];\n  var modifiedDate = new Date(startDate.getTime());\n  tempExcludeDate = [];\n  var tempDate = isNullOrUndefined(excludeDate) ? [] : excludeDate.split(',');\n  var tz = new Timezone();\n  tempDate.forEach(function (content) {\n    var parsedDate = getDateFromRecurrenceDateString(content);\n\n    if (oldTimezone && newTimezone) {\n      parsedDate = tz.convert(new Date(parsedDate.getTime()), oldTimezone, newTimezone);\n    }\n\n    tempExcludeDate.push(new Date(parsedDate.getTime()).setHours(0, 0, 0, 0));\n  });\n  ruleObject.recExceptionCount = !isNullOrUndefined(ruleObject.count) ? tempExcludeDate.length : 0;\n\n  if (viewDate && viewDate > startDate && !ruleObject.count) {\n    tempViewDate = new Date(new Date(viewDate.getTime()).setHours(0, 0, 0));\n  } else {\n    tempViewDate = null;\n  }\n\n  if (!ruleObject.until && tempViewDate) {\n    cacheDate = new Date(tempViewDate.getTime());\n    cacheDate.setDate(tempViewDate.getDate() + maximumCount * ruleObject.interval);\n    ruleObject.until = cacheDate;\n  }\n\n  if (ruleObject.until && startDate > ruleObject.until) {\n    return data;\n  }\n\n  maxOccurrence = maximumCount;\n  setFirstDayOfWeek(DAYINDEX[parseInt(startDayOfWeek.toString(), 10)]);\n\n  if (ruleObject.until) {\n    var end = resetTime(ruleObject.until);\n    ruleObject.until = new Date(end.getFullYear(), end.getMonth(), end.getDate(), 23, 59, 59);\n  }\n\n  switch (ruleObject.freq) {\n    case 'DAILY':\n      dailyType(modifiedDate, ruleObject.until, data, ruleObject);\n      break;\n\n    case 'WEEKLY':\n      weeklyType(modifiedDate, ruleObject.until, data, ruleObject);\n      break;\n\n    case 'MONTHLY':\n      monthlyType(modifiedDate, ruleObject.until, data, ruleObject);\n      break;\n\n    case 'YEARLY':\n      yearlyType(modifiedDate, ruleObject.until, data, ruleObject);\n  }\n\n  return data;\n}\n/**\n * Generate date object from given date string\n *\n * @param {string} recDateString Accepts the exception date as string\n * @returns {Date} Returns the date from exception date string\n */\n\n\nfunction getDateFromRecurrenceDateString(recDateString) {\n  return new Date(recDateString.substr(0, 4) + '-' + recDateString.substr(4, 2) + '-' + recDateString.substr(6, 5) + ':' + recDateString.substr(11, 2) + ':' + recDateString.substr(13));\n}\n/**\n * Internal method to handle exclude date\n *\n * @param {number[]} data Accepts the exception date collections\n * @param {number} date Accepts the new exclude date\n * @returns {void}\n * @private\n */\n\n\nfunction excludeDateHandler(data, date) {\n  var zeroIndex = new Date(date).setHours(0, 0, 0, 0);\n\n  if (tempExcludeDate.indexOf(zeroIndex) === -1 && (!tempViewDate || zeroIndex >= tempViewDate.getTime())) {\n    data.push(date);\n  }\n}\n/**\n * Internal method for get date count\n *\n * @param {Date} startDate Accepts the date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {number} Returns the number of date count\n * @private\n */\n\n\nfunction getDateCount$1(startDate, ruleObject) {\n  var count = maxOccurrence;\n\n  if (ruleObject.count) {\n    count = ruleObject.count;\n  } else if (ruleObject.until) {\n    if (ruleObject.freq === 'DAILY' || ruleObject.freq === 'WEEKLY') {\n      count = Math.floor((ruleObject.until.getTime() - startDate.getTime()) / MS_PER_DAY) + 1;\n    } else if (ruleObject.freq === 'MONTHLY' || ruleObject.freq === 'YEARLY') {\n      count = Math.floor((ruleObject.until.getMonth() + 12 * ruleObject.until.getFullYear() - (startDate.getMonth() + 12 * startDate.getFullYear())) / ruleObject.interval) + (ruleObject.day.length > 1 ? Math.floor((ruleObject.until.getTime() - startDate.getTime()) / MS_PER_DAY) + 1 : 1);\n\n      if (ruleObject.freq === 'YEARLY') {\n        count = ruleObject.month.length > 1 ? count * ruleObject.month.length : count;\n      }\n    }\n  }\n\n  return count;\n}\n/**\n *  Internal method for daily type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction dailyType(startDate, endDate, data, ruleObject) {\n  var tempDate = new Date(startDate.getTime());\n  var interval = ruleObject.interval;\n  var expectedCount = getDateCount$1(startDate, ruleObject);\n  var state;\n  var expectedDays = ruleObject.day;\n\n  while (compareDates(tempDate, endDate)) {\n    state = true;\n    state = validateRules(tempDate, ruleObject);\n\n    if (state && (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1 || expectedDays.length === 0)) {\n      excludeDateHandler(data, tempDate.getTime());\n\n      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n        break;\n      }\n    }\n\n    tempDate.setDate(tempDate.getDate() + interval);\n\n    if (tempDate.getHours() !== startDate.getHours()) {\n      tempDate.setHours(startDate.getHours());\n    }\n  }\n}\n/**\n * Internal method for weekly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction weeklyType(startDate, endDate, data, ruleObject) {\n  var tempDate = new Date(startDate.getTime());\n\n  if (!ruleObject.day.length) {\n    ruleObject.day.push(DAYINDEX[startDate.getDay()]);\n  }\n\n  var interval = ruleObject.interval;\n  var expectedDays = ruleObject.day;\n  var expectedCount = getDateCount$1(startDate, ruleObject);\n  var weekState = true;\n  var wkstIndex;\n  var weekCollection = [];\n\n  if (expectedDays.length > 1) {\n    if (isNullOrUndefined(ruleObject.wkst) || ruleObject.wkst === '') {\n      ruleObject.wkst = dayIndex[0];\n    }\n\n    wkstIndex = DAYINDEX.indexOf(ruleObject.wkst);\n\n    while (compareDates(tempDate, endDate)) {\n      var startDateDiff = DAYINDEX.indexOf(DAYINDEX[tempDate.getDay()]) - wkstIndex;\n      startDateDiff = startDateDiff === -1 ? 6 : startDateDiff;\n      var weekstartDate = addDays(tempDate, -startDateDiff);\n      var weekendDate = addDays(weekstartDate, 6);\n      var compareTempDate = new Date(tempDate.getTime());\n      weekendDate = resetTime(weekendDate);\n      compareTempDate = resetTime(compareTempDate);\n\n      while (weekendDate >= compareTempDate) {\n        if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n          weekCollection.push([tempDate.getTime()]);\n        }\n\n        if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n          break;\n        }\n\n        tempDate.setDate(tempDate.getDate() + 1);\n\n        if (tempDate.getHours() !== startDate.getHours()) {\n          tempDate.setHours(startDate.getHours());\n        }\n\n        compareTempDate = new Date(tempDate.getTime());\n        compareTempDate = resetTime(compareTempDate);\n      }\n\n      tempDate.setDate(tempDate.getDate() - 1);\n\n      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n        break;\n      }\n\n      tempDate.setDate(tempDate.getDate() + 1 + (interval - 1) * 7);\n      insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);\n      weekCollection = [];\n    }\n  } else {\n    tempDate = getStartDateForWeek(startDate, ruleObject.day);\n\n    while (compareDates(tempDate, endDate)) {\n      weekState = validateRules(tempDate, ruleObject);\n\n      if (weekState && expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n        excludeDateHandler(data, tempDate.getTime());\n      }\n\n      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n        break;\n      }\n\n      tempDate.setDate(tempDate.getDate() + interval * 7);\n    }\n\n    insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);\n    weekCollection = [];\n  }\n}\n/**\n *  Internal method for monthly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction monthlyType(startDate, endDate, data, ruleObject) {\n  // Set monthday value if BYDAY, BYMONTH and Month day property is not set based on start date\n  if (!ruleObject.month.length && !ruleObject.day.length && !ruleObject.monthDay.length) {\n    ruleObject.monthDay.push(startDate.getDate());\n\n    if (ruleObject.freq === 'YEARLY') {\n      ruleObject.month.push(startDate.getMonth() + 1);\n    }\n  } else if (ruleObject.month.length > 0 && !ruleObject.day.length && !ruleObject.monthDay.length) {\n    ruleObject.monthDay.push(startDate.getDate());\n  }\n\n  var ruleType = validateMonthlyRuleType(ruleObject);\n\n  switch (ruleType) {\n    case 'day':\n      switch (ruleObject.freq) {\n        case 'MONTHLY':\n          monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n          break;\n\n        case 'YEARLY':\n          monthlyDayTypeProcess(startDate, endDate, data, ruleObject);\n          break;\n      }\n\n      break;\n\n    case 'both':\n    case 'date':\n      switch (ruleObject.freq) {\n        case 'MONTHLY':\n          monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n          break;\n\n        case 'YEARLY':\n          monthlyDateTypeProcess(startDate, endDate, data, ruleObject);\n          break;\n      }\n\n      break;\n  }\n}\n/**\n * Internal method for yearly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction yearlyType(startDate, endDate, data, ruleObject) {\n  var typeValue = checkYearlyType(ruleObject);\n\n  switch (typeValue) {\n    case 'MONTH':\n      monthlyType(startDate, endDate, data, ruleObject);\n      break;\n\n    case 'WEEKNO':\n      processWeekNo(startDate, endDate, data, ruleObject);\n      break;\n\n    case 'YEARDAY':\n      processYearDay(startDate, endDate, data, ruleObject);\n      break;\n  }\n}\n/**\n * Internal method for process week no\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction processWeekNo(startDate, endDate, data, ruleObject) {\n  var stDate = calendarUtil.getYearLastDate(startDate, 0);\n  var tempDate;\n  var expectedCount = getDateCount$1(startDate, ruleObject);\n  var state;\n  var startDay;\n  var firstWeekSpan;\n  var weekNos = ruleObject.weekNo;\n  var weekNo;\n  var maxDate;\n  var minDate;\n  var weekCollection = [];\n  var expectedDays = ruleObject.day;\n\n  while (compareDates(stDate, endDate)) {\n    startDay = dayIndex.indexOf(DAYINDEX[stDate.getDay()]);\n    firstWeekSpan = 6 - startDay + 1;\n\n    for (var index = 0; index < weekNos.length; index++) {\n      weekNo = weekNos[parseInt(index.toString(), 10)];\n      weekNo = weekNo > 0 ? weekNo : 53 + weekNo + 1;\n      maxDate = weekNo === 1 ? firstWeekSpan : firstWeekSpan + (weekNo - 1) * 7;\n      minDate = weekNo === 1 ? firstWeekSpan - 7 : firstWeekSpan + (weekNo - 2) * 7;\n\n      while (minDate < maxDate) {\n        tempDate = new Date(stDate.getTime() + MS_PER_DAY * minDate);\n\n        if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n          if (isNullOrUndefined(ruleObject.setPosition)) {\n            insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());\n          } else {\n            weekCollection.push([tempDate.getTime()]);\n          }\n        }\n\n        minDate++;\n      }\n    }\n\n    if (!isNullOrUndefined(ruleObject.setPosition)) {\n      insertDatasIntoExistingCollection(weekCollection, state, startDate, endDate, data, ruleObject);\n    }\n\n    if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n      return;\n    }\n\n    stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);\n    weekCollection = [];\n  }\n}\n/**\n * Internal method for process year day\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction processYearDay(startDate, endDate, data, ruleObject) {\n  var stDate = calendarUtil.getYearLastDate(startDate, 0);\n  var tempDate;\n  var expectedCount = getDateCount$1(startDate, ruleObject);\n  var state;\n  var dateCollection = [];\n  var date;\n  var expectedDays = ruleObject.day;\n\n  while (compareDates(stDate, endDate)) {\n    for (var index = 0; index < ruleObject.yearDay.length; index++) {\n      date = ruleObject.yearDay[parseInt(index.toString(), 10)];\n      tempDate = new Date(stDate.getTime());\n\n      if ((date === calendarUtil.getLeapYearDaysCount() || date === -calendarUtil.getLeapYearDaysCount()) && !calendarUtil.isLeapYear(calendarUtil.getFullYear(tempDate), 1)) {\n        tempDate.setDate(tempDate.getDate() + 1);\n        continue;\n      }\n\n      tempDate.setDate(tempDate.getDate() + (date < 0 ? calendarUtil.getYearDaysCount(tempDate, 1) + 1 + date : date));\n\n      if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n        if (ruleObject.setPosition == null) {\n          insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());\n        } else {\n          dateCollection.push([tempDate.getTime()]);\n        }\n      }\n    }\n\n    if (!isNullOrUndefined(ruleObject.setPosition)) {\n      insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject);\n    }\n\n    if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n      return;\n    }\n\n    stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);\n    dateCollection = [];\n  }\n}\n/**\n * Internal method to check yearly type\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {YearRuleType} Returns the Yearly rule type object\n * @private\n */\n\n\nfunction checkYearlyType(ruleObject) {\n  if (ruleObject.yearDay.length) {\n    return 'YEARDAY';\n  } else if (ruleObject.weekNo.length) {\n    return 'WEEKNO';\n  }\n\n  return 'MONTH';\n}\n/**\n * Internal method to initialize recurrence rule variables\n *\n * @param {Date} startDate Accepts the start date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {RuleData} Return the rule data object\n * @private\n */\n\n\nfunction initializeRecRuleVariables(startDate, ruleObject) {\n  var ruleData = {\n    monthCollection: [],\n    index: 0,\n    tempDate: new Date(startDate.getTime()),\n    mainDate: new Date(startDate.getTime()),\n    expectedCount: getDateCount$1(startDate, ruleObject),\n    monthInit: 0,\n    dateCollection: []\n  };\n\n  if (ruleObject.month.length) {\n    calendarUtil.setMonth(ruleData.tempDate, ruleObject.month[0], ruleData.tempDate.getDate());\n  }\n\n  return ruleData;\n}\n/**\n * Internal method for process monthly date type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction monthlyDateTypeProcess(startDate, endDate, data, ruleObject) {\n  if (ruleObject.month.length) {\n    monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n    return;\n  }\n\n  var ruleData = initializeRecRuleVariables(startDate, ruleObject);\n  var currentMonthDate;\n  ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);\n\n  while (compareDates(ruleData.tempDate, endDate)) {\n    currentMonthDate = new Date(ruleData.tempDate.getTime());\n\n    while (calendarUtil.isSameYear(currentMonthDate, ruleData.tempDate) && ruleData.expectedCount && data.length + ruleObject.recExceptionCount <= ruleData.expectedCount) {\n      if (ruleObject.month.length === 0 || ruleObject.month.length > 0 && !calendarUtil.checkMonth(ruleData.tempDate, ruleObject.month)) {\n        processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, false);\n        ruleData.beginDate = new Date(ruleData.tempDate.getTime());\n        ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n      } else {\n        calendarUtil.setValidDate(ruleData.tempDate, 1, 1);\n        ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n        break;\n      }\n    }\n\n    ruleData.tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate());\n    insertDataCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);\n\n    if (calendarUtil.isLastMonth(ruleData.tempDate)) {\n      calendarUtil.setValidDate(ruleData.tempDate, 1, 1);\n      ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n    }\n\n    if (ruleData.expectedCount && data.length + ruleObject.recExceptionCount >= ruleData.expectedCount) {\n      return;\n    }\n\n    ruleData.tempDate.setFullYear(ruleData.tempDate.getFullYear() + ruleObject.interval - 1);\n    ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n    ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n    ruleData.dateCollection = [];\n  }\n}\n/**\n * Internal method for process monthly date type with month frequency from recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {\n  var ruleData = initializeRecRuleVariables(startDate, ruleObject);\n  ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);\n\n  if ((ruleObject.freq === 'MONTHLY' && ruleObject.interval === 12 || ruleObject.freq === 'YEARLY') && calendarUtil.getMonthDaysCount(startDate) < ruleObject.monthDay[0]) {\n    return;\n  }\n\n  while (compareDates(ruleData.tempDate, endDate)) {\n    ruleData.beginDate = new Date(ruleData.tempDate.getTime());\n    processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, true, startDate, data);\n\n    if (!isNullOrUndefined(ruleObject.setPosition)) {\n      insertDatasIntoExistingCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);\n    }\n\n    if (ruleData.expectedCount && data.length + ruleObject.recExceptionCount >= ruleData.expectedCount) {\n      return;\n    }\n\n    ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n    ruleData.dateCollection = [];\n  }\n}\n/**\n * To process date collection for Monthly & Yearly based on BYMONTH Day property\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {RuleData} recRuleVariables Accepts the rule data\n * @param {Date} endDate Accepts the end date\n * @param {boolean} isByMonth Accepts the boolean to validate either month or not\n * @param {Date} startDate Accepts the start date\n * @param {number[]} data Accepts the collection of dates\n * @returns {void}\n * @private\n */\n\n\nfunction processDateCollectionForByMonthDay(ruleObject, recRuleVariables, endDate, isByMonth, startDate, data) {\n  for (var index = 0; index < ruleObject.monthDay.length; index++) {\n    recRuleVariables.date = ruleObject.monthDay[parseInt(index.toString(), 10)];\n    recRuleVariables.tempDate = calendarUtil.getMonthStartDate(recRuleVariables.tempDate);\n    var maxDate = calendarUtil.getMonthDaysCount(recRuleVariables.tempDate);\n    recRuleVariables.date = recRuleVariables.date > 0 ? recRuleVariables.date : maxDate + recRuleVariables.date + 1;\n\n    if (validateProperDate(recRuleVariables.tempDate, recRuleVariables.date, recRuleVariables.mainDate) && recRuleVariables.date > 0) {\n      calendarUtil.setDate(recRuleVariables.tempDate, recRuleVariables.date);\n\n      if (endDate && recRuleVariables.tempDate > endDate) {\n        return;\n      }\n\n      if (ruleObject.day.length === 0 || ruleObject.day.indexOf(DAYINDEX[recRuleVariables.tempDate.getDay()]) > -1) {\n        if (isByMonth && isNullOrUndefined(ruleObject.setPosition) && recRuleVariables.expectedCount && data.length + ruleObject.recExceptionCount < recRuleVariables.expectedCount) {\n          insertDateCollection(recRuleVariables.state, startDate, endDate, data, ruleObject, recRuleVariables.tempDate.getTime());\n        } else {\n          recRuleVariables.dateCollection.push([recRuleVariables.tempDate.getTime()]);\n        }\n      }\n    }\n  }\n}\n/**\n * Internal method to set next valid date\n *\n * @param {Date} tempDate Accepts the date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} monthInit Accepts the initial month\n * @param {Date} beginDate Accepts the initial date\n * @param {number} interval Accepts the interval duration\n * @returns {number} Returnx the next valid date\n * @private\n */\n\n\nfunction setNextValidDate(tempDate, ruleObject, monthInit, beginDate, interval) {\n  if (beginDate === void 0) {\n    beginDate = null;\n  }\n\n  var monthData = beginDate ? beginDate.getMonth() : 0;\n  var startDate = calendarUtil.getMonthStartDate(tempDate);\n  interval = isNullOrUndefined(interval) ? ruleObject.interval : interval;\n  tempDate.setFullYear(startDate.getFullYear());\n  tempDate.setMonth(startDate.getMonth());\n  tempDate.setDate(startDate.getDate());\n\n  if (ruleObject.month.length) {\n    monthInit++;\n    monthInit = monthInit % ruleObject.month.length;\n    calendarUtil.setMonth(tempDate, ruleObject.month[parseInt(monthInit.toString(), 10)], 1);\n\n    if (monthInit === 0) {\n      calendarUtil.addYears(tempDate, interval, ruleObject.month[0]);\n    }\n  } else {\n    if (beginDate && beginDate.getFullYear() < tempDate.getFullYear()) {\n      monthData = tempDate.getMonth() - 1;\n    }\n\n    calendarUtil.setValidDate(tempDate, interval, 1, monthData, beginDate);\n  }\n\n  return monthInit;\n}\n/**\n * To get month collection when BYDAY property having more than one value in list.\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction getMonthCollection(startDate, endDate, data, ruleObject) {\n  var expectedDays = ruleObject.day;\n  var tempDate = new Date(startDate.getTime());\n  tempDate = calendarUtil.getMonthStartDate(tempDate);\n  var monthCollection = [];\n  var dateCollection = [];\n  var dates = [];\n  var index;\n  var state;\n  var expectedCount = getDateCount$1(startDate, ruleObject);\n  var monthInit = 0;\n  var beginDate;\n\n  if (ruleObject.month.length) {\n    calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n  }\n\n  tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n\n  while (compareDates(tempDate, endDate) && expectedCount && data.length + ruleObject.recExceptionCount < expectedCount) {\n    var currentMonthDate = new Date(tempDate.getTime());\n    var isHavingNumber = expectedDays.map(function (item) {\n      return HASNUMBER.test(item);\n    });\n\n    if (isHavingNumber.indexOf(true) > -1) {\n      for (var j = 0; j <= expectedDays.length - 1; j++) {\n        var expectedDaysArray = expectedDays[parseInt(j.toString(), 10)].match(SPLITNUMBERANDSTRING);\n        var position = parseInt(expectedDaysArray[0], 10);\n        tempDate = new Date(tempDate.getTime());\n        tempDate = calendarUtil.getMonthStartDate(tempDate);\n        tempDate = getStartDateForWeek(tempDate, expectedDays);\n        currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());\n\n        while (calendarUtil.isSameYear(currentMonthDate, tempDate) && calendarUtil.isSameMonth(currentMonthDate, tempDate)) {\n          if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentMonthDate.getDay()]) {\n            monthCollection.push([currentMonthDate.getTime()]);\n          }\n\n          currentMonthDate.setDate(currentMonthDate.getDate() + 1);\n        }\n\n        currentMonthDate.setDate(currentMonthDate.getDate() - 1);\n\n        if (expectedDaysArray[0].indexOf('-') > -1) {\n          index = monthCollection.length - -1 * position;\n        } else {\n          index = position - 1;\n        }\n\n        index = isNaN(index) ? 0 : index;\n\n        if (monthCollection.length > 0) {\n          if (isNullOrUndefined(ruleObject.setPosition)) {\n            insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n          } else {\n            dateCollection = [filterDateCollectionByIndex(monthCollection, index, dates)];\n          }\n        }\n\n        if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n          return;\n        }\n\n        monthCollection = [];\n      }\n\n      if (!isNullOrUndefined(ruleObject.setPosition)) {\n        insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n        dates = [];\n      }\n\n      monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n      tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n      monthCollection = [];\n    } else {\n      var weekCollection = [];\n      var dayCycleData = processWeekDays(expectedDays);\n      currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());\n      var initialDate = new Date(tempDate.getTime());\n      beginDate = new Date(tempDate.getTime());\n\n      while (calendarUtil.isSameMonth(initialDate, tempDate)) {\n        weekCollection.push(tempDate.getTime());\n\n        if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n          monthCollection.push(weekCollection);\n          weekCollection = [];\n        }\n\n        tempDate.setDate(tempDate.getDate() + dayCycleData[DAYINDEX[tempDate.getDay()]]);\n      }\n\n      index = ruleObject.setPosition < 1 ? monthCollection.length + ruleObject.setPosition : ruleObject.setPosition - 1;\n\n      if (isNullOrUndefined(ruleObject.setPosition)) {\n        index = 0;\n        var datas = [];\n\n        for (var week = 0; week < monthCollection.length; week++) {\n          for (var row = 0; row < monthCollection[parseInt(week.toString(), 10)].length; row++) {\n            datas.push(monthCollection[parseInt(week.toString(), 10)][parseInt(row.toString(), 10)]);\n          }\n        }\n\n        monthCollection = [datas];\n      }\n\n      if (monthCollection.length > 0) {\n        insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n      }\n\n      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n        return;\n      }\n\n      monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n      tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n      monthCollection = [];\n    }\n  }\n}\n/**\n * To process monday day type for FREQ=MONTHLY\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {\n  var expectedDays = ruleObject.day; // When BYDAY property having more than 1 value.\n\n  if (expectedDays.length > 1) {\n    getMonthCollection(startDate, endDate, data, ruleObject);\n    return;\n  }\n\n  var tempDate = new Date(startDate.getTime());\n  var expectedCount = getDateCount$1(startDate, ruleObject);\n  var monthCollection = [];\n  var beginDate;\n  var monthInit = 0;\n  tempDate = calendarUtil.getMonthStartDate(tempDate);\n\n  if (ruleObject.month.length) {\n    calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n  }\n\n  tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n\n  while (compareDates(tempDate, endDate) && expectedCount && data.length + ruleObject.recExceptionCount < expectedCount) {\n    beginDate = new Date(tempDate.getTime());\n    var currentMonthDate = new Date(tempDate.getTime());\n\n    while (calendarUtil.isSameMonth(tempDate, currentMonthDate)) {\n      monthCollection.push([currentMonthDate.getTime()]);\n      currentMonthDate.setDate(currentMonthDate.getDate() + 7);\n    } // To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n\n\n    insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);\n    monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    monthCollection = [];\n  }\n}\n/**\n * To process monday day type for FREQ=YEARLY\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction monthlyDayTypeProcess(startDate, endDate, data, ruleObject) {\n  var expectedDays = ruleObject.day;\n  var isHavingNumber = expectedDays.map(function (item) {\n    return HASNUMBER.test(item);\n  }); // If BYDAY property having more than 1 value in list\n\n  if (expectedDays.length > 1 && isHavingNumber.indexOf(true) > -1) {\n    processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject);\n    return;\n  } else if (ruleObject.month.length && expectedDays.length === 1 && isHavingNumber.indexOf(true) > -1) {\n    monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n    return;\n  }\n\n  var tempDate = new Date(startDate.getTime());\n  var currentMonthDate;\n  var expectedCount = getDateCount$1(startDate, ruleObject);\n  var interval = ruleObject.interval;\n  var monthCollection = [];\n\n  if (ruleObject.month.length) {\n    calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());\n  } // Set the date as start date of the yeear if yearly freq having ByDay property alone\n\n\n  if (isNullOrUndefined(ruleObject.setPosition) && ruleObject.month.length === 0 && ruleObject.weekNo.length === 0) {\n    tempDate.setFullYear(startDate.getFullYear(), 0, 1);\n  }\n\n  tempDate = calendarUtil.getMonthStartDate(tempDate);\n  tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n\n  while (compareDates(tempDate, endDate)) {\n    currentMonthDate = new Date(tempDate.getTime());\n\n    while (calendarUtil.isSameYear(currentMonthDate, tempDate) && expectedCount && data.length + ruleObject.recExceptionCount <= expectedCount) {\n      currentMonthDate = new Date(tempDate.getTime());\n\n      while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {\n        if (ruleObject.month.length === 0 || ruleObject.month.length > 0 && !calendarUtil.checkMonth(tempDate, ruleObject.month)) {\n          if (expectedDays.length > 1) {\n            if (calendarUtil.compareMonth(currentMonthDate, tempDate)) {\n              calendarUtil.setValidDate(tempDate, 1, 1);\n              tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n              break;\n            }\n\n            if (expectedDays.indexOf(DAYINDEX[currentMonthDate.getDay()]) > -1) {\n              monthCollection.push([currentMonthDate.getTime()]);\n            }\n\n            currentMonthDate.setDate(currentMonthDate.getDate() + 1);\n          } else {\n            // If BYDAY property having 1 value in list\n            if (currentMonthDate.getFullYear() > tempDate.getFullYear()) {\n              calendarUtil.setValidDate(tempDate, 1, 1);\n              tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n              break;\n            }\n\n            var newstr = getDayString(expectedDays[0]);\n\n            if (DAYINDEX[currentMonthDate.getDay()] === newstr && new Date(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), 0) > new Date(startDate.getFullYear())) {\n              monthCollection.push([currentMonthDate.getTime()]);\n            }\n\n            currentMonthDate.setDate(currentMonthDate.getDate() + 7);\n          }\n        } else {\n          calendarUtil.setValidDate(tempDate, 1, 1);\n          tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n          break;\n        }\n      }\n    }\n\n    tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate()); // To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n\n    insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);\n\n    if (calendarUtil.isLastMonth(tempDate)) {\n      calendarUtil.setValidDate(tempDate, 1, 1);\n      tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    }\n\n    tempDate.setFullYear(tempDate.getFullYear() + interval - 1);\n\n    if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n      return;\n    }\n\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    monthCollection = [];\n  }\n}\n/**\n * To process the recurrence rule when BYDAY property having values with integer\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject) {\n  var expectedDays = ruleObject.day;\n  var expectedCount = getDateCount$1(startDate, ruleObject);\n  var tempDate = new Date(startDate.getTime());\n  var interval = ruleObject.interval;\n  var monthCollection = [];\n  var dateCollection = [];\n  var index;\n  var state;\n  var monthInit = 0;\n  var currentMonthDate;\n  var currentDate;\n  var beginDate;\n  tempDate = calendarUtil.getMonthStartDate(tempDate);\n  var datas = [];\n\n  if (ruleObject.month.length) {\n    calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n  }\n\n  tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n\n  while (compareDates(tempDate, endDate)) {\n    currentMonthDate = new Date(tempDate.getTime());\n\n    for (var i = 0; i <= ruleObject.month.length; i++) {\n      for (var j = 0; j <= expectedDays.length - 1; j++) {\n        tempDate = calendarUtil.getMonthStartDate(tempDate);\n        tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n        monthCollection = [];\n\n        while (calendarUtil.isSameYear(currentMonthDate, tempDate) && expectedCount && data.length + ruleObject.recExceptionCount <= expectedCount) {\n          while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {\n            currentMonthDate = new Date(tempDate.getTime());\n\n            if (ruleObject.month.length === 0 || ruleObject.month.length > 0 && ruleObject.month[parseInt(i.toString(), 10)] === calendarUtil.getMonth(currentMonthDate)) {\n              var expectedDaysArray = expectedDays[parseInt(j.toString(), 10)].match(SPLITNUMBERANDSTRING);\n              var position = parseInt(expectedDaysArray[0], 10);\n              currentDate = new Date(tempDate.getTime());\n\n              while (calendarUtil.isSameYear(currentDate, tempDate) && calendarUtil.isSameMonth(currentDate, tempDate)) {\n                if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentDate.getDay()]) {\n                  monthCollection.push([currentDate.getTime()]);\n                }\n\n                currentDate.setDate(currentDate.getDate() + 1);\n              }\n\n              currentDate.setDate(currentDate.getDate() - 1);\n\n              if (expectedDaysArray[0].indexOf('-') > -1) {\n                index = monthCollection.length - -1 * position;\n              } else {\n                index = position - 1;\n              }\n\n              index = isNaN(index) ? 0 : index;\n            }\n\n            monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate, 1);\n            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n          }\n        }\n\n        tempDate = j === 0 && currentDate ? new Date(currentDate.getTime()) : new Date(currentMonthDate.getTime());\n\n        if (monthCollection.length > 0) {\n          if (isNullOrUndefined(ruleObject.setPosition)) {\n            insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n          } else {\n            dateCollection = [filterDateCollectionByIndex(monthCollection, index, datas)];\n          }\n        }\n\n        if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n          return;\n        }\n      }\n    }\n\n    if (!isNullOrUndefined(ruleObject.setPosition)) {\n      insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n      datas = [];\n    }\n\n    if (calendarUtil.isLastMonth(tempDate)) {\n      calendarUtil.setValidDate(tempDate, 1, 1);\n      tempDate.setFullYear(tempDate.getFullYear() + interval - 1);\n    } else {\n      tempDate.setFullYear(tempDate.getFullYear() + interval);\n    }\n\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n\n    if (ruleObject.month.length) {\n      calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());\n    }\n  }\n}\n/**\n * To get recurrence collection if BYSETPOS is null\n *\n * @param {number[]} monthCollection Accepts the month collection dates\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {RuleData} Returns the rule data object\n * @private\n */\n\n\nfunction getRecurrenceCollection(monthCollection, expectedDays) {\n  var index;\n  var recurrenceCollectionObject = {\n    monthCollection: [],\n    index: 0\n  };\n\n  if (expectedDays.length === 1) {\n    // To split numeric value from BYDAY property value\n    var expectedDaysArrays = expectedDays[0].match(SPLITNUMBERANDSTRING);\n    var arrPosition = void 0;\n\n    if (expectedDaysArrays.length > 1) {\n      arrPosition = parseInt(expectedDaysArrays[0], 10);\n      index = arrPosition < 1 ? monthCollection.length + arrPosition : arrPosition - 1;\n    } else {\n      index = 0;\n      monthCollection = getDateCollectionforBySetPosNull(monthCollection);\n    }\n  } else {\n    index = 0;\n    monthCollection = getDateCollectionforBySetPosNull(monthCollection);\n  }\n\n  recurrenceCollectionObject.monthCollection = monthCollection;\n  recurrenceCollectionObject.index = index;\n  return recurrenceCollectionObject;\n}\n/**\n * Internal method to process the data collections\n *\n * @param {number[]} dateCollection Accepts the date collections\n * @param {boolean} state Accepts the state\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of numbers\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction insertDataCollection(dateCollection, state, startDate, endDate, data, ruleObject) {\n  var index = ruleObject.setPosition < 1 ? dateCollection.length + ruleObject.setPosition : ruleObject.setPosition - 1;\n\n  if (isNullOrUndefined(ruleObject.setPosition)) {\n    index = 0;\n    dateCollection = getDateCollectionforBySetPosNull(dateCollection);\n  }\n\n  if (dateCollection.length > 0) {\n    insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject, index);\n  }\n}\n/**\n * To process month collection if BYSETPOS is null\n *\n * @param {number[]} monthCollection Accepts the month date collections\n * @returns {number[]} Returns the month date collections\n * @private\n */\n\n\nfunction getDateCollectionforBySetPosNull(monthCollection) {\n  var datas = [];\n\n  for (var week = 0; week < monthCollection.length; week++) {\n    for (var row = 0; row < monthCollection[parseInt(week.toString(), 10)].length; row++) {\n      datas.push(new Date(monthCollection[parseInt(week.toString(), 10)][parseInt(row.toString(), 10)]).getTime());\n    }\n  }\n\n  monthCollection = datas.length > 0 ? [datas] : [];\n  return monthCollection;\n}\n/**\n * To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n *\n * @param {number[]} monthCollection Accepts the month date collections\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the date collections\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject) {\n  var expectedDays = ruleObject.day;\n  var state;\n  var datas = [];\n  var dateCollection = [];\n  var recurrenceCollections = getRecurrenceCollection(monthCollection, expectedDays);\n  monthCollection = recurrenceCollections.monthCollection;\n  var index = recurrenceCollections.index;\n\n  if (ruleObject.setPosition != null) {\n    dateCollection = [filterDateCollectionByIndex(monthCollection, index, datas)];\n    insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n  } else {\n    if (monthCollection.length > 0) {\n      insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n    }\n  }\n\n  datas = [];\n}\n/**\n * To filter date collection when BYDAY property having values with number\n *\n * @param {number[]} monthCollection Accepts the date collections\n * @param {number} index Accepts the index of date collections\n * @param {number[]} datas Accepts the collection of dates\n * @returns {number[]} Returns the collection of dates\n * @private\n */\n\n\nfunction filterDateCollectionByIndex(monthCollection, index, datas) {\n  for (var week = 0; week < monthCollection[parseInt(index.toString(), 10)].length; week++) {\n    datas.push(monthCollection[parseInt(index.toString(), 10)][parseInt(week.toString(), 10)]);\n  }\n\n  return datas;\n}\n/**\n * To insert processed date collection in final array element\n *\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} dayData Accepts the date index\n * @returns {void}\n * @private\n */\n\n\nfunction insertDateCollection(state, startDate, endDate, data, ruleObject, dayData) {\n  var expectedCount = getDateCount$1(startDate, ruleObject);\n  var chDate = new Date(dayData);\n  state = validateRules(chDate, ruleObject);\n\n  if (chDate >= startDate && compareDates(chDate, endDate) && state && expectedCount && data.length + ruleObject.recExceptionCount < expectedCount) {\n    excludeDateHandler(data, dayData);\n  }\n}\n/**\n * Return the last week number of given month and year.\n *\n * @param {number} year Accepts the Year in number format\n * @param {number} startDayOfWeek Accepts the start date\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {number} week Accepts the week in number format\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {number} returns week number\n * @private\n */\n\n\nfunction weekCount(year, startDayOfWeek, monthCollection, week, ruleObject) {\n  var firstDayOfWeek = startDayOfWeek || 0;\n  var firstOfMonth = new Date(year, ruleObject.month[0] - 1, 1);\n  var lastOfMonth = new Date(year, ruleObject.month[0], 0);\n  var numberOfDaysInMonth = lastOfMonth.getDate();\n  var firstWeekDay = (firstOfMonth.getDay() - firstDayOfWeek + 7) % 7;\n  var used = firstWeekDay + numberOfDaysInMonth;\n  var count = Math.ceil(used / 7) - 1;\n  var dayData = monthCollection[parseInt(week.toString(), 10)][parseInt(count.toString(), 10)];\n  var chDate = new Date(dayData);\n  var state = validateRules(chDate, ruleObject);\n  return state ? count : count - 1;\n}\n/**\n * To process date collection based on Byset position after process the collection based on BYDAY property value index: EX:BYDAY=1SUm-1SU\n *\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\n\n\nfunction insertDateCollectionBasedonBySetPos(monthCollection, state, startDate, endDate, data, ruleObject) {\n  if (monthCollection.length > 0) {\n    for (var week = 0; week < monthCollection.length; week++) {\n      monthCollection[parseInt(week.toString(), 10)].sort();\n      var expectedDays = ruleObject.day;\n      var isHavingNumber = expectedDays.map(function (item) {\n        return HASNUMBER.test(item);\n      });\n      var weekIndex = ruleObject.freq === 'YEARLY' && ruleObject.validRules.indexOf('BYMONTH') > -1 && !(isHavingNumber.indexOf(true) > -1) ? weekCount(new Date(monthCollection[0][0]).getFullYear(), 0, monthCollection, week, ruleObject) : monthCollection[parseInt(week.toString(), 10)].length + ruleObject.setPosition;\n      var index = ruleObject.setPosition < 1 ? weekIndex : ruleObject.setPosition - 1;\n      var dayData = monthCollection[parseInt(week.toString(), 10)][parseInt(index.toString(), 10)];\n      insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);\n    }\n  }\n}\n/**\n * To insert datas into existing collection which is processed from previous loop.\n *\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} index Accepts the index value\n * @returns {void}\n * @private\n */\n\n\nfunction insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index) {\n  if (monthCollection.length > 0) {\n    index = !isNullOrUndefined(index) ? index : ruleObject.setPosition < 1 ? monthCollection.length + ruleObject.setPosition : ruleObject.setPosition - 1;\n    monthCollection[parseInt(index.toString(), 10)].sort();\n\n    for (var week = 0; week < monthCollection[parseInt(index.toString(), 10)].length; week++) {\n      var dayData = monthCollection[parseInt(index.toString(), 10)][parseInt(week.toString(), 10)];\n      insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);\n    }\n  }\n}\n/**\n * Internal method to compare dates\n *\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @returns {boolean} Returns the result of checking start and end dates\n * @private\n */\n\n\nfunction compareDates(startDate, endDate) {\n  return endDate ? startDate <= endDate : true;\n}\n/**\n * Internal method to get day string\n *\n * @param {string} expectedDays Accepts the exception date string\n * @returns {string} Returns the valid string\n * @private\n */\n\n\nfunction getDayString(expectedDays) {\n  // To get BYDAY value without numeric value\n  var newstr = expectedDays.replace(REMOVENUMBERINSTRING, '');\n  return newstr;\n}\n/**\n * Internal method to check day index\n *\n * @param {number} day Accepts the day index\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {boolean} Returns the index date\n * @private\n */\n\n\nfunction checkDayIndex(day, expectedDays) {\n  var sortedExpectedDays = [];\n  expectedDays.forEach(function (element) {\n    var expectedDaysNumberSplit = element.match(SPLITNUMBERANDSTRING);\n\n    if (expectedDaysNumberSplit.length === 2) {\n      sortedExpectedDays.push(expectedDaysNumberSplit[1]);\n    } else {\n      sortedExpectedDays.push(expectedDaysNumberSplit[0]);\n    }\n  });\n  return sortedExpectedDays.indexOf(DAYINDEX[parseInt(day.toString(), 10)]) === -1;\n}\n/**\n * Internal method to get start date of week\n *\n * @param {Date} startDate Accepts the start date\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {Date} Return the week start date\n * @private\n */\n\n\nfunction getStartDateForWeek(startDate, expectedDays) {\n  var tempDate = new Date(startDate.getTime());\n  var newstr;\n\n  if (expectedDays.length > 0) {\n    var expectedDaysArr = [];\n\n    for (var i = 0; i <= expectedDays.length - 1; i++) {\n      newstr = getDayString(expectedDays[parseInt(i.toString(), 10)]);\n      expectedDaysArr.push(newstr);\n    }\n\n    if (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1) {\n      do {\n        tempDate.setDate(tempDate.getDate() + 1);\n      } while (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1);\n    }\n  }\n\n  return tempDate;\n}\n/**\n * Method to generate recurrence rule object from given rule\n *\n * @param {string} rules Accepts the recurrence rule\n * @returns {RecRule} Returns the recurrence rule object\n */\n\n\nfunction extractObjectFromRule(rules) {\n  var ruleObject = {\n    freq: null,\n    interval: 1,\n    count: null,\n    until: null,\n    day: [],\n    wkst: null,\n    month: [],\n    weekNo: [],\n    monthDay: [],\n    yearDay: [],\n    setPosition: null,\n    validRules: []\n  };\n  var rulesList = rules.split(';');\n  var splitData = [];\n  var temp;\n  rulesList.forEach(function (data) {\n    splitData = data.split('=');\n\n    switch (splitData[0]) {\n      case 'UNTIL':\n        temp = splitData[1];\n        ruleObject.until = getDateFromRecurrenceDateString(temp);\n        break;\n\n      case 'BYDAY':\n        ruleObject.day = splitData[1].split(',');\n        ruleObject.validRules.push(splitData[0]);\n        break;\n\n      case 'BYMONTHDAY':\n        ruleObject.monthDay = splitData[1].split(',').map(Number);\n        ruleObject.validRules.push(splitData[0]);\n        break;\n\n      case 'BYMONTH':\n        ruleObject.month = splitData[1].split(',').map(Number);\n        ruleObject.validRules.push(splitData[0]);\n        break;\n\n      case 'BYYEARDAY':\n        ruleObject.yearDay = splitData[1].split(',').map(Number);\n        ruleObject.validRules.push(splitData[0]);\n        break;\n\n      case 'BYWEEKNO':\n        ruleObject.weekNo = splitData[1].split(',').map(Number);\n        ruleObject.validRules.push(splitData[0]);\n        break;\n\n      case 'INTERVAL':\n        ruleObject.interval = parseInt(splitData[1], 10);\n        break;\n\n      case 'COUNT':\n        ruleObject.count = parseInt(splitData[1], 10);\n        break;\n\n      case 'BYSETPOS':\n        ruleObject.setPosition = parseInt(splitData[1], 10) > 4 ? -1 : parseInt(splitData[1], 10);\n        break;\n\n      case 'FREQ':\n        ruleObject.freq = splitData[1];\n        break;\n\n      case 'WKST':\n        ruleObject.wkst = splitData[1];\n        break;\n    }\n  });\n\n  if (ruleObject.freq === 'MONTHLY' && ruleObject.monthDay.length === 0) {\n    var index = ruleObject.validRules.indexOf('BYDAY');\n    ruleObject.validRules.splice(index, 1);\n  }\n\n  return ruleObject;\n}\n/**\n * Internal method to validate proper date\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number} data Accepts the data value\n * @param {Date} startDate Accepts the start date\n * @returns {boolean} Returns the result of date validate\n * @private\n */\n\n\nfunction validateProperDate(tempDate, data, startDate) {\n  var maxDate = calendarUtil.getMonthDaysCount(tempDate);\n  return data <= maxDate && tempDate >= startDate;\n}\n/**\n * Internal method to process week days\n *\n * @param {string[]} expectedDays Accepts the expection dates\n * @returns {Object} Returns the weekdays object\n * @private\n */\n\n\nfunction processWeekDays(expectedDays) {\n  var dayCycle = {};\n  expectedDays.forEach(function (element, index) {\n    if (index === expectedDays.length - 1) {\n      var startIndex = dayIndex.indexOf(element);\n      var temp = startIndex;\n\n      while (temp % 7 !== dayIndex.indexOf(expectedDays[0])) {\n        temp++;\n      }\n\n      dayCycle[\"\" + element] = temp - startIndex;\n    } else {\n      dayCycle[\"\" + element] = dayIndex.indexOf(expectedDays[index + 1]) - dayIndex.indexOf(element);\n    }\n  });\n  return dayCycle;\n}\n/**\n * Internal method to check date\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number[]} expectedDate Accepts the exception dates\n * @returns {boolean} Returns the boolean value\n * @private\n */\n\n\nfunction checkDate(tempDate, expectedDate) {\n  var temp = expectedDate.slice(0);\n  var data;\n  var maxDate = calendarUtil.getMonthDaysCount(tempDate);\n  data = temp.shift();\n\n  while (data) {\n    if (data < 0) {\n      data = data + maxDate + 1;\n    }\n\n    if (data === tempDate.getDate()) {\n      return false;\n    }\n\n    data = temp.shift();\n  }\n\n  return true;\n}\n/**\n * Internal method to check the year value\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number[]} expectedyearDay Accepts the exception dates in year\n * @returns {boolean} Returns the boolean value\n * @private\n */\n\n\nfunction checkYear(tempDate, expectedyearDay) {\n  var temp = expectedyearDay.slice(0);\n  var data;\n  var yearDay = getYearDay(tempDate);\n  data = temp.shift();\n\n  while (data) {\n    if (data < 0) {\n      data = data + calendarUtil.getYearDaysCount(tempDate, 0) + 1;\n    }\n\n    if (data === yearDay) {\n      return false;\n    }\n\n    data = temp.shift();\n  }\n\n  return true;\n}\n/**\n * Internal method to get the year day\n *\n * @param {Date} currentDate Accepts the date value\n * @returns {number} Returns the boolean value\n * @private\n */\n\n\nfunction getYearDay(currentDate) {\n  if (!startDateCollection[calendarUtil.getFullYear(currentDate)]) {\n    startDateCollection[calendarUtil.getFullYear(currentDate)] = calendarUtil.getYearLastDate(currentDate, 0);\n  }\n\n  var tempDate = startDateCollection[calendarUtil.getFullYear(currentDate)];\n  var diff = currentDate.getTime() - tempDate.getTime();\n  return Math.ceil(diff / MS_PER_DAY);\n}\n/**\n * Internal method to validate monthly rule type\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {MonthlyType} Returns the monthly type object\n * @private\n */\n\n\nfunction validateMonthlyRuleType(ruleObject) {\n  if (ruleObject.monthDay.length && !ruleObject.day.length) {\n    return 'date';\n  } else if (!ruleObject.monthDay.length && ruleObject.day.length) {\n    return 'day';\n  }\n\n  return 'both';\n}\n/**\n * Internal method to re-order the week days based on first day of week\n *\n * @param {string[]} days Accepts the week days value\n * @returns {void}\n * @private\n */\n\n\nfunction rotate(days) {\n  var data = days.shift();\n  days.push(data);\n}\n/**\n * Internal method to set first day of week\n *\n * @param {string} day Accepts the first day string\n * @returns {void}\n * @private\n */\n\n\nfunction setFirstDayOfWeek(day) {\n  while (dayIndex[0] !== day) {\n    rotate(dayIndex);\n  }\n}\n/**\n * Internal method to validate recurrence rule\n *\n * @param {Date} tempDate Accepts the date value\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {boolean} Returns the boolean value\n * @private\n */\n\n\nfunction validateRules(tempDate, ruleObject) {\n  var state = true;\n  var expectedDays = ruleObject.day;\n  var expectedMonth = ruleObject.month;\n  var expectedDate = calendarUtil.getExpectedDays(tempDate, ruleObject.monthDay);\n  var expectedyearDay = ruleObject.yearDay;\n  ruleObject.validRules.forEach(function (rule) {\n    switch (rule) {\n      case 'BYDAY':\n        if (checkDayIndex(tempDate.getDay(), expectedDays)) {\n          state = false;\n        }\n\n        break;\n\n      case 'BYMONTH':\n        if (calendarUtil.checkMonth(tempDate, expectedMonth)) {\n          state = false;\n        }\n\n        break;\n\n      case 'BYMONTHDAY':\n        if (checkDate(tempDate, expectedDate)) {\n          state = false;\n        }\n\n        break;\n\n      case 'BYYEARDAY':\n        if (checkYear(tempDate, expectedyearDay)) {\n          state = false;\n        }\n\n        break;\n    }\n  });\n  return state;\n}\n/**\n * Internal method to get calendar util\n *\n * @param {CalendarType} calendarMode Accepts the calendar type object\n * @returns {CalendarUtil} Returns the calendar util object\n * @private\n */\n\n\nfunction getCalendarUtil(calendarMode) {\n  if (calendarMode === 'Islamic') {\n    return new Islamic();\n  }\n\n  return new Gregorian();\n}\n\nvar startDateCollection = {};\nvar tempExcludeDate;\nvar dayIndex = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\nvar maxOccurrence;\nvar tempViewDate;\nvar calendarUtil;\nvar DAYINDEX = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\nvar MAXOCCURRENCE = 43;\nvar WEEKPOS = ['first', 'second', 'third', 'fourth', 'last'];\nvar TIMES = 'summaryTimes';\nvar ON = 'summaryOn';\nvar EVERY = 'every';\nvar UNTIL = 'summaryUntil';\nvar DAYS = 'summaryDay';\nvar WEEKS = 'summaryWeek';\nvar MONTHS = 'summaryMonth';\nvar YEARS = 'summaryYear';\nvar DAYINDEXOBJECT = {\n  SU: 'sun',\n  MO: 'mon',\n  TU: 'tue',\n  WE: 'wed',\n  TH: 'thu',\n  FR: 'fri',\n  SA: 'sat'\n}; // To check string has number\n\nvar HASNUMBER = /\\d/; // To find the numbers in string\n\nvar REMOVENUMBERINSTRING = /[^A-Z]+/; // To split number and string\n\nvar SPLITNUMBERANDSTRING = /[a-z]+|[^a-z]+/gi;\n/**\n * Method to generate string from date\n *\n * @param {Date} date Accepts the date value\n * @returns {string} Returns the string value\n */\n\nfunction getRecurrenceStringFromDate(date) {\n  return [date.getUTCFullYear(), roundDateValues(date.getUTCMonth() + 1), roundDateValues(date.getUTCDate()), 'T', roundDateValues(date.getUTCHours()), roundDateValues(date.getUTCMinutes()), roundDateValues(date.getUTCSeconds()), 'Z'].join('');\n}\n/**\n * Internal method to round the date values\n *\n * @param {string | number} date Accepts the date value in either string or number format\n * @returns {string} Returns the date value in string format\n * @private\n */\n\n\nfunction roundDateValues(date) {\n  return ('0' + date).slice(-2);\n}\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable max-len */\n\n/**\n * EventBase for appointment rendering\n */\n\n\nvar EventBase =\n/** @__PURE__ @class */\nfunction () {\n  /**\n   * Constructor for EventBase\n   *\n   * @param {Schedule} parent Accepts the schedule instance\n   */\n  function EventBase(parent) {\n    this.slots = [];\n    this.isDoubleTapped = false;\n    this.parent = parent;\n  }\n\n  EventBase.prototype.processData = function (events, timeZonePropChanged, oldTimezone) {\n    var _this = this;\n\n    var start = this.parent.activeView.startDate();\n    var end = this.parent.activeView.endDate();\n    var fields = this.parent.eventFields;\n    var processed = [];\n    var temp = 1;\n    var generateID = false;\n    var resourceCollection = this.parent.resourceBase ? this.parent.resourceBase.resourceCollection : [];\n\n    if (events.length > 0 && isNullOrUndefined(events[0][fields.id])) {\n      generateID = true;\n    }\n\n    var _loop_1 = function (event_1) {\n      if (generateID) {\n        event_1[fields.id] = temp++;\n      }\n\n      event_1 = this_1.updateEventDateTime(event_1);\n\n      if (timeZonePropChanged) {\n        this_1.processTimezoneChange(event_1, oldTimezone);\n      } else if (!this_1.parent.isPrinting && !this_1.parent.uiStateValues.isPreventTimezone) {\n        event_1 = this_1.processTimezone(event_1);\n      }\n\n      for (var level = 0; level < resourceCollection.length; level++) {\n        if (event_1[resourceCollection[parseInt(level.toString(), 10)].field] === null || event_1[resourceCollection[parseInt(level.toString(), 10)].field] === 0) {\n          event_1[resourceCollection[parseInt(level.toString(), 10)].field] = undefined;\n        }\n      }\n\n      if (!isNullOrUndefined(event_1[fields.recurrenceRule]) && event_1[fields.recurrenceRule] === '') {\n        event_1[fields.recurrenceRule] = null;\n      }\n\n      if (!isNullOrUndefined(event_1[fields.recurrenceRule]) && isNullOrUndefined(event_1[fields.recurrenceID]) && !(this_1.parent.crudModule && this_1.parent.crudModule.crudObj.isCrudAction)) {\n        processed = processed.concat(this_1.generateOccurrence(event_1, null, oldTimezone, true));\n      } else {\n        if (this_1.parent.crudModule && this_1.parent.crudModule.crudObj.isCrudAction) {\n          if (!isNullOrUndefined(event_1[fields.recurrenceRule]) && isNullOrUndefined(event_1[fields.recurrenceID])) {\n            var recurrenceEvent = this_1.generateOccurrence(event_1, null, oldTimezone, true);\n\n            var _loop_2 = function (occurrence) {\n              var app = this_1.parent.eventsProcessed.filter(function (data) {\n                return data[fields.startTime].getTime() - occurrence[fields.startTime].getTime() === 0 && data[fields.id] === occurrence[fields.id];\n              });\n              occurrence.Guid = app.length > 0 ? app[0].Guid : this_1.generateGuid();\n              processed.push(occurrence);\n            };\n\n            for (var _i = 0, recurrenceEvent_1 = recurrenceEvent; _i < recurrenceEvent_1.length; _i++) {\n              var occurrence = recurrenceEvent_1[_i];\n\n              _loop_2(occurrence);\n            }\n          } else {\n            var app = this_1.parent.eventsProcessed.filter(function (data) {\n              return data[_this.parent.eventFields.id] === event_1[_this.parent.eventFields.id];\n            });\n            event_1.Guid = app.length > 0 ? app[0].Guid : this_1.generateGuid();\n            processed.push(event_1);\n          }\n        } else {\n          event_1.Guid = this_1.generateGuid();\n          processed.push(event_1);\n        }\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, events_1 = events; _i < events_1.length; _i++) {\n      var event_1 = events_1[_i];\n\n      _loop_1(event_1);\n    }\n\n    this.parent.eventsProcessed = [];\n    var eventData = processed.filter(function (data) {\n      return !data[_this.parent.eventFields.isBlock];\n    });\n    this.parent.eventsProcessed = this.filterEvents(start, end, eventData);\n    var blockData = processed.filter(function (data) {\n      return data[_this.parent.eventFields.isBlock];\n    });\n\n    for (var _a = 0, blockData_1 = blockData; _a < blockData_1.length; _a++) {\n      var eventObj = blockData_1[_a];\n\n      if (eventObj[fields.isAllDay]) {\n        var isDifferentDate = resetTime(new Date(eventObj[fields.startTime].getTime())) < resetTime(new Date(eventObj[fields.endTime].getTime()));\n\n        if (!isDifferentDate) {\n          eventObj[fields.startTime] = resetTime(eventObj[fields.startTime]);\n          eventObj[fields.endTime] = addDays(resetTime(eventObj[fields.endTime]), 1);\n        }\n      }\n    }\n\n    this.parent.blockProcessed = blockData;\n    return eventData;\n  };\n\n  EventBase.prototype.updateEventDateTime = function (eventData) {\n    if (typeof eventData[this.parent.eventFields.startTime] === 'string') {\n      eventData[this.parent.eventFields.startTime] = getDateFromString(eventData[this.parent.eventFields.startTime]);\n    }\n\n    if (typeof eventData[this.parent.eventFields.endTime] === 'string') {\n      eventData[this.parent.eventFields.endTime] = getDateFromString(eventData[this.parent.eventFields.endTime]);\n    }\n\n    return eventData;\n  };\n\n  EventBase.prototype.getProcessedEvents = function (eventCollection) {\n    if (eventCollection === void 0) {\n      eventCollection = this.parent.eventsData;\n    }\n\n    var processed = [];\n\n    for (var _i = 0, eventCollection_1 = eventCollection; _i < eventCollection_1.length; _i++) {\n      var event_2 = eventCollection_1[_i];\n\n      if (!isNullOrUndefined(event_2[this.parent.eventFields.recurrenceRule]) && isNullOrUndefined(event_2[this.parent.eventFields.recurrenceID])) {\n        processed = processed.concat(this.generateOccurrence(event_2));\n      } else {\n        processed.push(event_2);\n      }\n    }\n\n    return processed;\n  };\n\n  EventBase.prototype.timezonePropertyChange = function (oldTimezone) {\n    var data = this.parent.eventsData.concat(this.parent.blockData);\n    var processed = this.processData(data, true, oldTimezone);\n    this.parent.notify(dataReady, {\n      processedData: processed\n    });\n  };\n\n  EventBase.prototype.timezoneConvert = function (eventData) {\n    var fields = this.parent.eventFields;\n    eventData[fields.startTimezone] = eventData[fields.startTimezone] || eventData[fields.endTimezone];\n    eventData[fields.endTimezone] = eventData[fields.endTimezone] || eventData[fields.startTimezone];\n\n    if (this.parent.timezone) {\n      var startTz = eventData[fields.startTimezone];\n      var endTz = eventData[fields.endTimezone];\n      eventData[fields.startTime] = this.parent.tzModule.convert(eventData[fields.startTime], this.parent.timezone, startTz);\n      eventData[fields.endTime] = this.parent.tzModule.convert(eventData[fields.endTime], this.parent.timezone, endTz);\n    }\n  };\n\n  EventBase.prototype.processTimezoneChange = function (event, oldTimezone) {\n    var fields = this.parent.eventFields;\n\n    if (event[fields.isAllDay]) {\n      return;\n    }\n\n    if (oldTimezone && this.parent.timezone) {\n      event[fields.startTime] = this.parent.tzModule.convert(event[fields.startTime], oldTimezone, this.parent.timezone);\n      event[fields.endTime] = this.parent.tzModule.convert(event[fields.endTime], oldTimezone, this.parent.timezone);\n    } else if (!oldTimezone && this.parent.timezone) {\n      event[fields.startTime] = this.parent.tzModule.add(event[fields.startTime], this.parent.timezone);\n      event[fields.endTime] = this.parent.tzModule.add(event[fields.endTime], this.parent.timezone);\n    } else if (oldTimezone && !this.parent.timezone) {\n      event[fields.startTime] = this.parent.tzModule.remove(event[fields.startTime], oldTimezone);\n      event[fields.endTime] = this.parent.tzModule.remove(event[fields.endTime], oldTimezone);\n    }\n  };\n\n  EventBase.prototype.processTimezone = function (event, isReverse) {\n    if (isReverse === void 0) {\n      isReverse = false;\n    }\n\n    var fields = this.parent.eventFields;\n\n    if (event[fields.startTimezone] || event[fields.endTimezone]) {\n      var startTimezone = event[fields.startTimezone] || event[fields.endTimezone];\n      var endTimezone = event[fields.endTimezone] || event[fields.startTimezone];\n\n      if (isReverse) {\n        if (this.parent.timezone) {\n          event[fields.startTime] = this.parent.tzModule.convert(event[fields.startTime], startTimezone, this.parent.timezone);\n          event[fields.endTime] = this.parent.tzModule.convert(event[fields.endTime], endTimezone, this.parent.timezone);\n          event[fields.startTime] = this.parent.tzModule.remove(event[fields.startTime], this.parent.timezone);\n          event[fields.endTime] = this.parent.tzModule.remove(event[fields.endTime], this.parent.timezone);\n        } else {\n          event[fields.startTime] = this.parent.tzModule.remove(event[fields.startTime], startTimezone);\n          event[fields.endTime] = this.parent.tzModule.remove(event[fields.endTime], endTimezone);\n        }\n      } else {\n        event[fields.startTime] = this.parent.tzModule.add(event[fields.startTime], startTimezone);\n        event[fields.endTime] = this.parent.tzModule.add(event[fields.endTime], endTimezone);\n\n        if (this.parent.timezone) {\n          event[fields.startTime] = this.parent.tzModule.convert(event[fields.startTime], startTimezone, this.parent.timezone);\n          event[fields.endTime] = this.parent.tzModule.convert(event[fields.endTime], endTimezone, this.parent.timezone);\n        }\n      }\n    } else if (this.parent.timezone) {\n      if (isReverse) {\n        event[fields.startTime] = this.parent.tzModule.remove(event[fields.startTime], this.parent.timezone);\n        event[fields.endTime] = this.parent.tzModule.remove(event[fields.endTime], this.parent.timezone);\n      } else {\n        event[fields.startTime] = this.parent.tzModule.add(event[fields.startTime], this.parent.timezone);\n        event[fields.endTime] = this.parent.tzModule.add(event[fields.endTime], this.parent.timezone);\n      }\n    }\n\n    return event;\n  };\n\n  EventBase.prototype.filterBlockEvents = function (eventObj) {\n    var fields = this.parent.eventFields;\n    var eStart = eventObj[fields.startTime];\n    var eEnd = eventObj[fields.endTime];\n    var resourceData;\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      var data = this.getGroupIndexFromEvent(eventObj);\n      resourceData = this.parent.resourceBase.lastResourceLevel[parseInt(data.toString(), 10)];\n    }\n\n    var blockEvents = extend([], this.parent.blockProcessed, null, true);\n\n    for (var _i = 0, blockEvents_1 = blockEvents; _i < blockEvents_1.length; _i++) {\n      var eventObj_1 = blockEvents_1[_i];\n\n      if (eventObj_1[fields.isAllDay]) {\n        var isDifferentTime = eventObj_1[fields.endTime].getTime() > resetTime(new Date(eventObj_1[fields.endTime].getTime())).getTime();\n\n        if (isDifferentTime) {\n          eventObj_1[fields.startTime] = resetTime(eventObj_1[fields.startTime]);\n          eventObj_1[fields.endTime] = addDays(resetTime(eventObj_1[fields.endTime]), 1);\n        }\n      }\n    }\n\n    return this.filterEvents(eStart, eEnd, blockEvents, resourceData);\n  };\n\n  EventBase.prototype.filterEvents = function (startDate, endDate, appointments, resourceTdData) {\n    if (appointments === void 0) {\n      appointments = this.parent.eventsProcessed;\n    }\n\n    var predicate = this.parent.dataModule.getStartEndQuery(startDate, endDate);\n    var filter = new DataManager({\n      json: appointments\n    }).executeLocal(new Query().where(predicate));\n\n    if (resourceTdData) {\n      filter = this.filterEventsByResource(resourceTdData, filter);\n    }\n\n    return this.sortByTime(filter);\n  };\n\n  EventBase.prototype.filterEventsByRange = function (eventCollection, startDate, endDate) {\n    var _this = this;\n\n    var filteredEvents = [];\n\n    if (startDate && endDate) {\n      filteredEvents = this.filterEvents(startDate, endDate, eventCollection);\n    } else if (startDate && !endDate) {\n      filteredEvents = eventCollection.filter(function (e) {\n        return e[_this.parent.eventFields.startTime] >= startDate;\n      });\n    } else if (!startDate && endDate) {\n      filteredEvents = eventCollection.filter(function (e) {\n        return e[_this.parent.eventFields.endTime] <= endDate;\n      });\n    } else {\n      filteredEvents = eventCollection;\n    }\n\n    return this.sortByTime(filteredEvents);\n  };\n\n  EventBase.prototype.filterEventsByResource = function (resourceTdData, appointments) {\n    if (appointments === void 0) {\n      appointments = this.parent.eventsProcessed;\n    }\n\n    var predicate = {};\n    var resourceCollection = this.parent.resourceBase.resourceCollection;\n\n    for (var level = 0; level < resourceCollection.length; level++) {\n      predicate[resourceCollection[parseInt(level.toString(), 10)].field] = resourceTdData.groupOrder[parseInt(level.toString(), 10)];\n    }\n\n    var keys = Object.keys(predicate);\n    var filteredCollection = appointments.filter(function (eventObj) {\n      return keys.every(function (key) {\n        if (eventObj[\"\" + key] instanceof Array) {\n          return eventObj[\"\" + key].indexOf(predicate[\"\" + key]) > -1;\n        } else {\n          return eventObj[\"\" + key] === predicate[\"\" + key];\n        }\n      });\n    });\n    return filteredCollection;\n  };\n\n  EventBase.prototype.sortByTime = function (appointmentsCollection) {\n    if (this.parent.eventSettings.sortComparer && (typeof this.parent.eventSettings.sortComparer === 'function' || typeof this.parent.eventSettings.sortComparer === 'string')) {\n      appointmentsCollection = this.customSorting(appointmentsCollection);\n    } else {\n      var fieldMappings_1 = this.parent.eventFields;\n      appointmentsCollection.sort(function (a, b) {\n        var d1 = a[fieldMappings_1.startTime];\n        var d2 = b[fieldMappings_1.startTime];\n        return d1.getTime() - d2.getTime();\n      });\n    }\n\n    return appointmentsCollection;\n  };\n\n  EventBase.prototype.sortByDateTime = function (appointments) {\n    if (this.parent.eventSettings.sortComparer && (typeof this.parent.eventSettings.sortComparer === 'function' || typeof this.parent.eventSettings.sortComparer === 'string')) {\n      appointments = this.customSorting(appointments);\n    } else {\n      var fieldMapping_1 = this.parent.eventFields;\n      appointments.sort(function (object1, object2) {\n        var d3 = object1[fieldMapping_1.startTime];\n        var d4 = object2[fieldMapping_1.startTime];\n        var d5 = object1[fieldMapping_1.endTime];\n        var d6 = object2[fieldMapping_1.endTime];\n        var d1 = d5.getTime() - d3.getTime();\n        var d2 = d6.getTime() - d4.getTime();\n        return d3.getTime() - d4.getTime() || d2 - d1;\n      });\n    }\n\n    return appointments;\n  };\n\n  EventBase.prototype.customSorting = function (appointments) {\n    if (typeof this.parent.eventSettings.sortComparer === 'function') {\n      return this.parent.eventSettings.sortComparer.call(this.parent, appointments);\n    } else if (typeof this.parent.eventSettings.sortComparer === 'string') {\n      var splits = this.parent.eventSettings.sortComparer.split('.');\n      var sortFn = void 0;\n\n      if (!isNullOrUndefined(window)) {\n        sortFn = window[splits[splits.length - 1]];\n      }\n\n      if (sortFn) {\n        return sortFn(appointments);\n      }\n    }\n\n    return appointments;\n  };\n\n  EventBase.prototype.getSmallestMissingNumber = function (array) {\n    var large = Math.max.apply(Math, array);\n\n    for (var i = 0; i < large; i++) {\n      if (array.indexOf(i) === -1) {\n        return i;\n      }\n    }\n\n    return large + 1;\n  };\n\n  EventBase.prototype.splitEventByDay = function (event) {\n    var eventFields = this.parent.eventFields;\n    var data = [];\n    var eventStartTime = event[eventFields.startTime];\n    var eventEndTime = event[eventFields.endTime];\n    var isDifferentDate = resetTime(new Date(eventStartTime.getTime())) < resetTime(new Date(eventEndTime.getTime()));\n\n    if (isDifferentDate) {\n      var start = new Date(eventStartTime.getTime());\n      var end = addDays(resetTime(new Date(eventStartTime.getTime())), 1);\n      var endDate = eventEndTime.getHours() === 0 && eventEndTime.getMinutes() === 0 ? eventEndTime : addDays(eventEndTime, 1);\n      var index = 1;\n      var eventLength = getDaysCount(eventStartTime.getTime(), endDate.getTime());\n\n      while (end <= eventEndTime && start.getTime() !== end.getTime()) {\n        var app = extend({}, event);\n        app[eventFields.startTime] = start;\n        app[eventFields.endTime] = end;\n        app.data = {\n          index: index,\n          count: eventLength\n        };\n        app.Guid = this.generateGuid();\n        app.isSpanned = true;\n        data.push(app);\n        start = end;\n\n        if (resetTime(new Date(start.getTime())).getTime() === resetTime(new Date(eventEndTime.getTime())).getTime() && !(end.getTime() === eventEndTime.getTime())) {\n          end = new Date(start.getTime());\n          end = new Date(end.setHours(eventEndTime.getHours(), eventEndTime.getMinutes(), eventEndTime.getSeconds()));\n        } else {\n          end = addDays(resetTime(new Date(start.getTime())), 1);\n        }\n\n        index++;\n      }\n    } else {\n      data.push(event);\n    }\n\n    return data;\n  };\n\n  EventBase.prototype.splitEvent = function (event, dateRender) {\n    var fields = this.parent.eventFields;\n    var start = resetTime(event[fields.startTime]).getTime();\n    var end = resetTime(event[fields.endTime]).getTime();\n\n    if (getDateInMs(event[fields.endTime]) <= 0) {\n      var temp = addDays(resetTime(event[fields.endTime]), -1).getTime();\n      end = start > temp ? start : temp;\n    }\n\n    var orgStart = start;\n    var orgEnd = end;\n    var ranges = [];\n\n    if (start !== end) {\n      if (start < dateRender[0].getTime()) {\n        start = dateRender[0].getTime();\n      }\n\n      if (end > dateRender[dateRender.length - 1].getTime()) {\n        end = dateRender[dateRender.length - 1].getTime();\n      }\n\n      var cStart = start;\n\n      for (var level = 0; level < this.slots.length; level++) {\n        var slot = this.slots[parseInt(level.toString(), 10)];\n\n        if (this.parent.currentView === 'WorkWeek' || this.parent.currentView === 'TimelineWorkWeek' || this.parent.activeViewOptions.group.byDate || this.parent.activeViewOptions.showWeekend) {\n          var slotDates = [];\n\n          for (var _i = 0, slot_1 = slot; _i < slot_1.length; _i++) {\n            var s = slot_1[_i];\n            slotDates.push(new Date(s));\n          }\n\n          var renderedDates = this.getRenderedDates(slotDates);\n\n          if (!isNullOrUndefined(renderedDates) && renderedDates.length > 0) {\n            slot = [];\n\n            for (var _a = 0, renderedDates_1 = renderedDates; _a < renderedDates_1.length; _a++) {\n              var date = renderedDates_1[_a];\n              slot.push(date.getTime());\n            }\n          }\n        }\n\n        if (typeof slot === 'number') {\n          var temp = slot;\n          slot = [];\n          slot.push(temp);\n        }\n\n        var firstSlot = slot[0];\n        cStart = cStart <= firstSlot && end >= firstSlot ? firstSlot : cStart;\n\n        if (cStart > end || firstSlot > end) {\n          break;\n        }\n\n        if (!this.parent.activeViewOptions.group.byDate && this.parent.activeViewOptions.showWeekend && this.parent.currentView !== 'WorkWeek' && this.parent.currentView !== 'TimelineWorkWeek') {\n          var startIndex = slot.indexOf(cStart);\n\n          if (startIndex !== -1) {\n            var endIndex = slot.indexOf(end);\n            var hasBreak = endIndex !== -1;\n            endIndex = hasBreak ? endIndex : slot.length - 1;\n            var count = endIndex - startIndex + 1;\n            var isLeft = slot[parseInt(startIndex.toString(), 10)] !== orgStart;\n            var isRight = slot[parseInt(endIndex.toString(), 10)] !== orgEnd;\n            ranges.push(this.cloneEventObject(event, slot[parseInt(startIndex.toString(), 10)], slot[parseInt(endIndex.toString(), 10)], count, isLeft, isRight));\n\n            if (hasBreak) {\n              break;\n            }\n          }\n        } else {\n          if (this.dateInRange(cStart, slot[0], slot[slot.length - 1])) {\n            var availSlot = [];\n\n            for (var i = 0; i < slot.length; i++) {\n              if (this.dateInRange(slot[parseInt(i.toString(), 10)], orgStart, orgEnd)) {\n                availSlot.push(slot[parseInt(i.toString(), 10)]);\n              }\n            }\n\n            if (availSlot.length > 0) {\n              if (!this.parent.activeViewOptions.group.byDate) {\n                var isLeft = availSlot[0] !== orgStart;\n                var isRight = availSlot[availSlot.length - 1] !== orgEnd;\n                ranges.push(this.cloneEventObject(event, availSlot[0], availSlot[availSlot.length - 1], availSlot.length, isLeft, isRight));\n              } else {\n                for (var _b = 0, availSlot_1 = availSlot; _b < availSlot_1.length; _b++) {\n                  var slot_2 = availSlot_1[_b];\n                  ranges.push(this.cloneEventObject(event, slot_2, slot_2, 1, slot_2 !== orgStart, slot_2 !== orgEnd));\n                }\n              }\n            }\n          }\n        }\n      }\n    } else {\n      ranges.push(this.cloneEventObject(event, start, end, 1, false, false));\n    }\n\n    return ranges;\n  };\n\n  EventBase.prototype.cloneEventObject = function (event, start, end, count, isLeft, isRight) {\n    var fields = this.parent.eventFields;\n    var e = extend({}, event, null, true);\n    var data = {\n      count: count,\n      isLeft: isLeft,\n      isRight: isRight\n    };\n    data[fields.startTime] = event[fields.startTime];\n    data[fields.endTime] = event[fields.endTime];\n    e.data = data;\n    e[fields.startTime] = new Date(start);\n    e[fields.endTime] = new Date(end);\n    return e;\n  };\n\n  EventBase.prototype.dateInRange = function (date, start, end) {\n    return start <= date && date <= end;\n  };\n\n  EventBase.prototype.getSelectedEventElements = function (target) {\n    this.removeSelectedAppointmentClass();\n\n    if (this.parent.selectedElements.length <= 0) {\n      this.parent.selectedElements.push(target);\n    } else {\n      var isAlreadySelected = this.parent.selectedElements.filter(function (element) {\n        return element.getAttribute('data-guid') === target.getAttribute('data-guid');\n      });\n\n      if (isAlreadySelected.length <= 0) {\n        var elementSelector = 'div[data-guid=\"' + target.getAttribute('data-guid') + '\"]';\n        var focusElements = [].slice.call(this.parent.element.querySelectorAll(elementSelector));\n\n        for (var _i = 0, focusElements_1 = focusElements; _i < focusElements_1.length; _i++) {\n          var element = focusElements_1[_i];\n          this.parent.selectedElements.push(element);\n        }\n      } else {\n        var selectedElements = this.parent.selectedElements.filter(function (element) {\n          return element.getAttribute('data-guid') !== target.getAttribute('data-guid');\n        });\n        this.parent.selectedElements = selectedElements;\n      }\n    }\n\n    if (target && this.parent.selectedElements.length > 0) {\n      this.addSelectedAppointments(this.parent.selectedElements, false);\n    }\n\n    return this.parent.selectedElements;\n  };\n\n  EventBase.prototype.getSelectedEvents = function () {\n    var _this = this;\n\n    var eventSelect = [];\n    var elementSelect = [];\n    var selectAppointments = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_BORDER));\n    selectAppointments.filter(function (element) {\n      var isAlreadyAdded = eventSelect.filter(function (event) {\n        return event.Guid === element.getAttribute('data-guid');\n      });\n\n      if (isAlreadyAdded.length === 0) {\n        eventSelect.push(_this.getEventByGuid(element.getAttribute('data-guid')));\n      }\n\n      elementSelect.push(element);\n    });\n    return {\n      event: eventSelect.length > 1 ? eventSelect : eventSelect[0],\n      element: elementSelect.length > 1 ? elementSelect : elementSelect[0]\n    };\n  };\n\n  EventBase.prototype.removeSelectedAppointmentClass = function () {\n    var selectedAppointments = this.getSelectedAppointments();\n    removeClass(selectedAppointments, APPOINTMENT_BORDER);\n\n    if (this.parent.currentView === 'Agenda' || this.parent.currentView === 'MonthAgenda') {\n      removeClass(selectedAppointments, AGENDA_SELECTED_CELL);\n    }\n  };\n\n  EventBase.prototype.addSelectedAppointments = function (cells, preventFocus) {\n    if (this.parent.currentView !== 'MonthAgenda') {\n      this.parent.removeSelectedClass();\n    }\n\n    addClass(cells, APPOINTMENT_BORDER);\n\n    if (cells.length > 0 && !preventFocus) {\n      cells[cells.length - 1].focus();\n    }\n  };\n\n  EventBase.prototype.getSelectedAppointments = function () {\n    return [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_BORDER + ',.' + APPOINTMENT_CLASS + ':focus'));\n  };\n\n  EventBase.prototype.focusElement = function (isFocused) {\n    if (this.parent.eventWindow.dialogObject && this.parent.eventWindow.dialogObject.visible) {\n      return;\n    }\n\n    var activeEle = document.activeElement;\n    var selectedCell = this.parent.getSelectedCells();\n\n    if (selectedCell.length > 0 && (activeEle && (this.parent.element.contains(activeEle) || selectedCell.indexOf(activeEle) !== -1) || isFocused)) {\n      if (this.parent.keyboardInteractionModule) {\n        var target = !isNullOrUndefined(this.parent.activeCellsData) && this.parent.activeCellsData.element || selectedCell[selectedCell.length - 1];\n        this.parent.keyboardInteractionModule.selectCells(target instanceof Array, target);\n      }\n\n      return;\n    }\n\n    var selectedAppointments = this.getSelectedAppointments();\n\n    if (selectedAppointments.length > 0) {\n      if (this.parent.activeEventData && this.parent.activeEventData.element && selectedAppointments.indexOf(this.parent.activeEventData.element) > -1) {\n        this.parent.activeEventData.element.focus();\n        return;\n      }\n\n      selectedAppointments[selectedAppointments.length - 1].focus();\n      return;\n    }\n  };\n\n  EventBase.prototype.selectWorkCellByTime = function (eventsData) {\n    var target;\n\n    if (this.parent.currentView === 'Agenda' || this.parent.currentView === 'MonthAgenda') {\n      return target;\n    }\n\n    if (eventsData.length > 0) {\n      var selectedObject = eventsData[eventsData.length - 1];\n      var eventStartTime = selectedObject[this.parent.eventFields.startTime];\n      var nearestTime = new Date(+eventStartTime).setMinutes(0, 0, 0);\n      var isAllDay = this.isAllDayAppointment(selectedObject);\n\n      if (this.parent.currentView === 'Month' || isAllDay) {\n        nearestTime = new Date(+eventStartTime).setHours(0, 0, 0, 0);\n      }\n\n      var targetArea = void 0;\n\n      if (isAllDay && ['Day', 'Week', 'WorkWeek'].indexOf(this.parent.currentView) !== -1) {\n        targetArea = this.parent.getAllDayRow();\n      } else {\n        targetArea = this.parent.getContentTable();\n      }\n\n      var queryString = '[data-date=\"' + new Date(nearestTime).getTime() + '\"]';\n\n      if (this.parent.activeViewOptions.group.resources.length > 0) {\n        queryString += '[data-group-index=\"' + this.getGroupIndexFromEvent(selectedObject) + '\"]';\n      }\n\n      target = targetArea.querySelector(queryString);\n\n      if (target) {\n        this.parent.activeCellsData = this.parent.getCellDetails(target);\n\n        if (this.parent.keyboardInteractionModule) {\n          this.parent.keyboardInteractionModule.selectCells(false, target);\n        }\n\n        return target;\n      }\n    }\n\n    return target;\n  };\n\n  EventBase.prototype.getGroupIndexFromEvent = function (eventData) {\n    var levelIndex;\n    var resource;\n    var levelName;\n    var idField;\n\n    for (var i = this.parent.resourceBase.resourceCollection.length - 1; i >= 0; i--) {\n      var resourceData = eventData[this.parent.resourceBase.resourceCollection[parseInt(i.toString(), 10)].field];\n\n      if (!isNullOrUndefined(resourceData)) {\n        resource = this.parent.resourceBase.resourceCollection[parseInt(i.toString(), 10)];\n        levelIndex = i;\n        levelName = resource.name;\n        idField = resource.field;\n        break;\n      }\n    }\n\n    if (isNullOrUndefined(levelName) && isNullOrUndefined(levelIndex)) {\n      levelName = this.parent.resourceCollection.slice(-1)[0].name;\n      levelIndex = this.parent.resourceCollection.length - 1;\n      idField = this.parent.resourceCollection.slice(-1)[0].field;\n      resource = this.parent.resourceCollection.filter(function (e, index) {\n        if (e.name === levelName) {\n          levelIndex = index;\n          return e;\n        }\n\n        return null;\n      })[0];\n    }\n\n    var id = eventData[\"\" + idField] instanceof Array ? eventData[\"\" + idField][0] : eventData[\"\" + idField];\n\n    if (levelIndex > 0) {\n      var parentField = this.parent.resourceCollection[levelIndex - 1].field;\n      return this.parent.resourceBase.getIndexFromResourceId(id, levelName, resource, eventData, parentField);\n    } else {\n      return this.parent.resourceBase.getIndexFromResourceId(id, levelName, resource);\n    }\n  };\n\n  EventBase.prototype.isAllDayAppointment = function (event) {\n    var fieldMapping = this.parent.eventFields;\n    var isAllDay = event[fieldMapping.isAllDay];\n    var isFullDay = (getUniversalTime(event[fieldMapping.endTime]) - getUniversalTime(event[fieldMapping.startTime])) / MS_PER_DAY >= 1;\n    return isAllDay || this.parent.eventSettings.spannedEventPlacement !== 'TimeSlot' && isFullDay ? true : false;\n  };\n\n  EventBase.prototype.addEventListener = function () {\n    this.parent.on(documentClick, this.appointmentBorderRemove, this);\n  };\n\n  EventBase.prototype.removeEventListener = function () {\n    this.parent.off(documentClick, this.appointmentBorderRemove);\n  };\n\n  EventBase.prototype.appointmentBorderRemove = function (event) {\n    var element = event.event.target;\n\n    if (closest(element, '.' + APPOINTMENT_CLASS)) {\n      if (this.parent.currentView !== 'MonthAgenda') {\n        this.parent.removeSelectedClass();\n      }\n    } else if (!closest(element, '.' + POPUP_OPEN)) {\n      this.removeSelectedAppointmentClass();\n      this.parent.selectedElements = [];\n    }\n  };\n\n  EventBase.prototype.wireAppointmentEvents = function (element, event, isPreventCrud) {\n    if (isPreventCrud === void 0) {\n      isPreventCrud = false;\n    }\n\n    var isReadOnly = !isNullOrUndefined(event) ? event[this.parent.eventFields.isReadonly] : false;\n    EventHandler.add(element, 'click', this.eventClick, this);\n\n    if (!this.parent.isAdaptive && !this.parent.activeViewOptions.readonly && !isReadOnly) {\n      EventHandler.add(element, 'touchstart', this.eventTouchClick, this);\n      EventHandler.add(element, 'dblclick', this.eventDoubleClick, this);\n    }\n\n    if (!this.parent.activeViewOptions.readonly && !isReadOnly && !isPreventCrud) {\n      if (this.parent.resizeModule) {\n        this.parent.resizeModule.wireResizeEvent(element);\n      }\n\n      if (this.parent.dragAndDropModule) {\n        this.parent.dragAndDropModule.wireDragEvent(element);\n      }\n    }\n  };\n\n  EventBase.prototype.eventTouchClick = function (e) {\n    var _this = this;\n\n    setTimeout(function () {\n      return _this.isDoubleTapped = false;\n    }, 250);\n    e.preventDefault();\n\n    if (this.isDoubleTapped) {\n      this.eventDoubleClick(e);\n    } else if (!this.isDoubleTapped) {\n      this.isDoubleTapped = true;\n      this.eventClick(e);\n    }\n  };\n\n  EventBase.prototype.renderResizeHandler = function (element, spanEvent, isReadOnly) {\n    if (!this.parent.resizeModule || !this.parent.allowResizing || this.parent.activeViewOptions.readonly || isReadOnly) {\n      return;\n    }\n\n    for (var _i = 0, _a = Object.keys(spanEvent); _i < _a.length; _i++) {\n      var resizeEdge = _a[_i];\n      var resizeHandler = createElement('div', {\n        className: EVENT_RESIZE_CLASS\n      });\n\n      switch (resizeEdge) {\n        case 'isLeft':\n          if (!spanEvent.isLeft) {\n            resizeHandler.appendChild(createElement('div', {\n              className: 'e-left-right-resize'\n            }));\n            addClass([resizeHandler], this.parent.enableRtl ? RIGHT_RESIZE_HANDLER : LEFT_RESIZE_HANDLER);\n            prepend([resizeHandler], element);\n          }\n\n          break;\n\n        case 'isRight':\n          if (!spanEvent.isRight) {\n            resizeHandler.appendChild(createElement('div', {\n              className: 'e-left-right-resize'\n            }));\n            addClass([resizeHandler], this.parent.enableRtl ? LEFT_RESIZE_HANDLER : RIGHT_RESIZE_HANDLER);\n            append([resizeHandler], element);\n          }\n\n          break;\n\n        case 'isTop':\n          if (!spanEvent.isTop) {\n            resizeHandler.appendChild(createElement('div', {\n              className: 'e-top-bottom-resize'\n            }));\n            addClass([resizeHandler], TOP_RESIZE_HANDLER);\n            prepend([resizeHandler], element);\n          }\n\n          break;\n\n        case 'isBottom':\n          if (!spanEvent.isBottom) {\n            resizeHandler.appendChild(createElement('div', {\n              className: 'e-top-bottom-resize'\n            }));\n            addClass([resizeHandler], BOTTOM_RESIZE_HANDLER);\n            append([resizeHandler], element);\n          }\n\n          break;\n      }\n    }\n  };\n\n  EventBase.prototype.eventClick = function (eventData) {\n    var _this = this;\n\n    var target = eventData.target;\n\n    if (target.classList.contains(DRAG_CLONE_CLASS) || target.classList.contains(RESIZE_CLONE_CLASS) || target.classList.contains(INLINE_SUBJECT_CLASS)) {\n      return;\n    }\n\n    if ((eventData.ctrlKey || eventData.metaKey) && eventData.which === 1 && this.parent.keyboardInteractionModule) {\n      this.parent.quickPopup.quickPopup.hide();\n      this.parent.selectedElements = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_BORDER));\n      var target_1 = closest(eventData.target, '.' + APPOINTMENT_CLASS);\n      this.getSelectedEventElements(target_1);\n      this.activeEventData(eventData, false);\n      var selectArgs = {\n        data: this.parent.activeEventData.event,\n        element: this.parent.activeEventData.element,\n        event: eventData,\n        requestType: 'eventSelect'\n      };\n      this.parent.trigger(select, selectArgs);\n      var args = extend(this.parent.activeEventData, {\n        cancel: false,\n        originalEvent: eventData\n      });\n      this.parent.trigger(eventClick, args);\n    } else {\n      this.removeSelectedAppointmentClass();\n      this.activeEventData(eventData, true);\n      var selectEventArgs = {\n        data: this.parent.activeEventData.event,\n        element: this.parent.activeEventData.element,\n        event: eventData,\n        requestType: 'eventSelect'\n      };\n      this.parent.trigger(select, selectEventArgs);\n      var args = extend(this.parent.activeEventData, {\n        cancel: false,\n        originalEvent: eventData\n      });\n      this.parent.trigger(eventClick, args, function (eventClickArgs) {\n        if (eventClickArgs.cancel) {\n          _this.removeSelectedAppointmentClass();\n\n          _this.parent.selectedElements = [];\n\n          if (_this.parent.quickPopup) {\n            _this.parent.quickPopup.quickPopupHide();\n          }\n        } else {\n          if (_this.parent.currentView === 'Agenda' || _this.parent.currentView === 'MonthAgenda') {\n            addClass([_this.parent.activeEventData.element], AGENDA_SELECTED_CELL);\n          }\n\n          if (_this.parent.allowInline) {\n            var inlineArgs = {\n              data: eventClickArgs.event,\n              element: eventClickArgs.element,\n              type: 'Event'\n            };\n\n            _this.parent.notify(inlineClick, inlineArgs);\n          } else {\n            _this.parent.notify(eventClick, eventClickArgs);\n          }\n        }\n      });\n    }\n  };\n\n  EventBase.prototype.eventDoubleClick = function (e) {\n    if (this.parent.quickPopup) {\n      this.parent.quickPopup.quickPopupHide(true);\n    }\n\n    if (e.type === 'touchstart') {\n      this.activeEventData(e, true);\n    }\n\n    this.removeSelectedAppointmentClass();\n    this.parent.selectedElements = [];\n\n    if (this.parent.activeEventData.element.classList.contains(INLINE_APPOINTMENT_CLASS) || this.parent.activeEventData.element.querySelector('.' + INLINE_SUBJECT_CLASS)) {\n      return;\n    }\n\n    if (!isNullOrUndefined(this.parent.activeEventData.event) && isNullOrUndefined(this.parent.activeEventData.event[this.parent.eventFields.recurrenceID])) {\n      this.parent.eventWindow.openEditor(this.parent.activeEventData.event, 'Save');\n    } else {\n      this.parent.currentAction = 'EditOccurrence';\n      this.parent.quickPopup.openRecurrenceAlert();\n    }\n  };\n\n  EventBase.prototype.getEventByGuid = function (guid) {\n    return this.parent.eventsProcessed.filter(function (data) {\n      return data.Guid === guid;\n    })[0];\n  };\n\n  EventBase.prototype.getEventById = function (id) {\n    var _this = this;\n\n    return this.parent.eventsData.filter(function (data) {\n      return data[_this.parent.eventFields.id] === id;\n    })[0];\n  };\n\n  EventBase.prototype.generateGuid = function () {\n    return 'xyxxxxyx-xxxy-yxxx-xyxx-xxyxxxxyyxxx'.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16 | 0;\n      var v = c === 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n  };\n\n  EventBase.prototype.getEventIDType = function () {\n    if (this.parent.eventsData.length !== 0) {\n      return typeof this.parent.eventsData[0][this.parent.eventFields.id];\n    }\n\n    if (this.parent.blockData.length !== 0) {\n      return typeof this.parent.blockData[0][this.parent.eventFields.id];\n    }\n\n    return 'string';\n  };\n\n  EventBase.prototype.getEventMaxID = function (resourceId) {\n    var _this = this;\n\n    if (this.parent.eventsData.length < 1 && this.parent.blockData.length < 1) {\n      return 1;\n    }\n\n    var eventId;\n    var idType = this.getEventIDType();\n\n    if (idType === 'string') {\n      eventId = this.generateGuid();\n    }\n\n    if (idType === 'number') {\n      var datas = this.parent.eventsData.concat(this.parent.blockData);\n      var appIds = datas.map(function (event) {\n        return event[_this.parent.eventFields.id];\n      });\n      var maxId = appIds.reduce(function (a, b) {\n        return Math.max(a, b);\n      });\n      maxId = isNullOrUndefined(resourceId) ? maxId : maxId + resourceId;\n      eventId = maxId + 1;\n    }\n\n    return eventId;\n  };\n\n  EventBase.prototype.activeEventData = function (eventData, isMultiple) {\n    var _this = this;\n\n    var target = closest(eventData.target, '.' + APPOINTMENT_CLASS);\n    var guid = target.getAttribute('data-guid');\n\n    if (isMultiple) {\n      this.addSelectedAppointments([].slice.call(this.parent.element.querySelectorAll('div[data-guid=\"' + guid + '\"]')), true);\n      target.focus();\n    }\n\n    var eventObject = this.getEventByGuid(guid);\n\n    if (eventObject && eventObject.isSpanned) {\n      eventObject = this.parent.eventsData.filter(function (obj) {\n        return obj[_this.parent.eventFields.id] === eventObject[_this.parent.eventFields.id];\n      })[0];\n    }\n\n    this.parent.activeEventData = {\n      event: eventObject,\n      element: target\n    };\n  };\n\n  EventBase.prototype.generateOccurrence = function (event, viewDate, oldTimezone, isMaxCount) {\n    var startDate = event[this.parent.eventFields.startTime];\n    var endDate = event[this.parent.eventFields.endTime];\n    var eventRule = event[this.parent.eventFields.recurrenceRule];\n    var timeZoneDiff = endDate.getTimezoneOffset() - startDate.getTimezoneOffset();\n    var duration = endDate.getTime() - startDate.getTime() - timeZoneDiff * 60000;\n    viewDate = new Date((viewDate || this.parent.activeView.startDate()).getTime() - duration);\n    var exception = event[this.parent.eventFields.recurrenceException];\n    var maxCount;\n\n    if (this.parent.currentView !== 'Agenda' && isMaxCount) {\n      maxCount = getDateCount(viewDate, this.parent.activeView.endDate()) + 1;\n    }\n\n    var newTimezone = this.parent.timezone || this.parent.tzModule.getLocalTimezoneName();\n    var firstDay = this.parent.activeViewOptions.firstDayOfWeek;\n    var calendarMode = this.parent.calendarMode;\n    var dates = generate(startDate, eventRule, exception, firstDay, maxCount, viewDate, calendarMode, oldTimezone, newTimezone);\n\n    if (this.parent.currentView === 'Agenda' && eventRule.indexOf('COUNT') === -1 && eventRule.indexOf('UNTIL') === -1) {\n      if (isNullOrUndefined(event.generatedDates)) {\n        event.generatedDates = {\n          start: new Date(dates[0]),\n          end: new Date(dates[dates.length - 1])\n        };\n      } else {\n        if (dates[0] < event.generatedDates.start.getTime()) {\n          event.generatedDates.start = new Date(dates[0]);\n        }\n\n        if (dates[dates.length - 1] > event.generatedDates.end.getTime()) {\n          event.generatedDates.end = new Date(dates[dates.length - 1]);\n        }\n      }\n    }\n\n    var occurrenceCollection = [];\n\n    for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {\n      var date = dates_1[_i];\n      var clonedObject = extend({}, event, null, true);\n      date = this.getDSTAdjustedTime(date, clonedObject);\n      clonedObject[this.parent.eventFields.startTime] = new Date(date);\n      clonedObject[this.parent.eventFields.endTime] = new Date(new Date(date).setMilliseconds(duration));\n      clonedObject[this.parent.eventFields.recurrenceID] = clonedObject[this.parent.eventFields.id];\n      delete clonedObject[this.parent.eventFields.recurrenceException];\n      delete clonedObject[this.parent.eventFields.followingID];\n      clonedObject.Guid = this.generateGuid();\n      occurrenceCollection.push(clonedObject);\n    }\n\n    return occurrenceCollection;\n  };\n\n  EventBase.prototype.getDSTAdjustedTime = function (date, event) {\n    var occurDate = date;\n\n    if (this.parent.timezone && (event[this.parent.eventFields.startTimezone] || event[this.parent.eventFields.endTimezone])) {\n      var eventOffset = this.getDSTDiff(event[this.parent.eventFields.startTime], new Date(date), event[this.parent.eventFields.startTimezone]);\n      var schOffset = this.getDSTDiff(event[this.parent.eventFields.startTime], new Date(date), this.parent.timezone);\n      occurDate = new Date(date).getTime() - (eventOffset - schOffset) * 60000;\n    }\n\n    return occurDate;\n  };\n\n  EventBase.prototype.getDSTDiff = function (startDate, occurDate, timezone) {\n    var startOffset = this.parent.tzModule.offset(new Date(startDate), timezone);\n    var occurOffset = this.parent.tzModule.offset(new Date(occurDate), timezone);\n    return startOffset - occurOffset;\n  };\n\n  EventBase.prototype.getParentEvent = function (eventObj, isParent) {\n    if (isParent === void 0) {\n      isParent = false;\n    }\n\n    var parentEvent;\n\n    do {\n      eventObj = this.getFollowingEvent(eventObj);\n\n      if (eventObj) {\n        parentEvent = extend({}, eventObj, null, true);\n      }\n    } while (eventObj && isParent);\n\n    if (isParent && parentEvent) {\n      var collection = this.getEventCollections(parentEvent);\n      var followObj = collection.follow.slice(-1)[0];\n\n      if (collection.occurrence.length > 0 && !parentEvent[this.parent.eventFields.recurrenceException]) {\n        followObj = collection.occurrence.slice(-1)[0];\n      }\n\n      if (followObj) {\n        parentEvent[this.parent.eventFields.recurrenceRule] = followObj[this.parent.eventFields.recurrenceRule];\n      }\n    }\n\n    return parentEvent;\n  };\n\n  EventBase.prototype.getEventCollections = function (parentObj, childObj) {\n    var followingCollection = [];\n    var occurrenceCollection = [];\n    var followingEvent = parentObj;\n\n    do {\n      followingEvent = this.getFollowingEvent(followingEvent, true);\n\n      if (followingEvent) {\n        followingCollection.push(followingEvent);\n      }\n\n      occurrenceCollection = occurrenceCollection.concat(this.getOccurrenceEvent(followingEvent || parentObj));\n    } while (followingEvent);\n\n    var collections = {};\n\n    if (childObj) {\n      var fields_1 = this.parent.eventFields;\n      collections = {\n        follow: followingCollection.filter(function (eventData) {\n          return eventData[fields_1.startTime] >= childObj[fields_1.startTime];\n        }),\n        occurrence: occurrenceCollection.filter(function (eventData) {\n          return eventData[fields_1.startTime] >= childObj[fields_1.startTime];\n        })\n      };\n    } else {\n      collections = {\n        follow: followingCollection,\n        occurrence: occurrenceCollection\n      };\n    }\n\n    return collections;\n  };\n\n  EventBase.prototype.getFollowingEvent = function (parentObj, isReverse) {\n    var fields = this.parent.eventFields;\n    var fieldValue;\n\n    if (isReverse) {\n      fieldValue = parentObj[fields.id];\n    } else {\n      fieldValue = parentObj[fields.recurrenceID] || parentObj[fields.followingID];\n    }\n\n    var parentApp = this.parent.eventsData.filter(function (data) {\n      return data[isReverse ? fields.followingID : fields.id] === fieldValue;\n    });\n    return parentApp.shift();\n  };\n\n  EventBase.prototype.isFollowingEvent = function (parentObj, childObj) {\n    var parentStart = parentObj[this.parent.eventFields.startTime];\n    var childStart = childObj[this.parent.eventFields.startTime];\n    return parentStart.getHours() === childStart.getHours() && parentStart.getMinutes() === childStart.getMinutes() && parentStart.getSeconds() === childStart.getSeconds();\n  };\n\n  EventBase.prototype.getOccurrenceEvent = function (eventObj, isGuid, isFollowing) {\n    if (isGuid === void 0) {\n      isGuid = false;\n    }\n\n    if (isFollowing === void 0) {\n      isFollowing = false;\n    }\n\n    var idField = isGuid ? 'Guid' : isFollowing ? this.parent.eventFields.followingID : this.parent.eventFields.recurrenceID;\n    var fieldKey = isGuid ? 'Guid' : this.parent.eventFields.id;\n    var dataSource = isGuid ? this.parent.eventsProcessed : this.parent.eventsData;\n    return dataSource.filter(function (data) {\n      return data[\"\" + idField] === eventObj[\"\" + fieldKey];\n    });\n  };\n\n  EventBase.prototype.getOccurrencesByID = function (id) {\n    var fields = this.parent.eventFields;\n    var occurrenceCollection = [];\n    var parentObject = this.parent.eventsData.filter(function (obj) {\n      return obj[fields.id] === id;\n    });\n\n    for (var _i = 0, parentObject_1 = parentObject; _i < parentObject_1.length; _i++) {\n      var event_3 = parentObject_1[_i];\n\n      if (!isNullOrUndefined(event_3[fields.recurrenceRule])) {\n        occurrenceCollection = occurrenceCollection.concat(this.generateOccurrence(event_3));\n      }\n    }\n\n    return occurrenceCollection;\n  };\n\n  EventBase.prototype.getOccurrencesByRange = function (startTime, endTime) {\n    var fields = this.parent.eventFields;\n    var occurrenceCollection = [];\n\n    for (var _i = 0, _a = this.parent.eventsData; _i < _a.length; _i++) {\n      var event_4 = _a[_i];\n\n      if (!isNullOrUndefined(event_4[fields.recurrenceRule])) {\n        occurrenceCollection = occurrenceCollection.concat(this.generateOccurrence(event_4));\n      }\n    }\n\n    var filter = occurrenceCollection.filter(function (obj) {\n      return obj[fields.startTime] >= startTime && obj[fields.endTime] <= endTime && !isNullOrUndefined(obj[fields.recurrenceID]);\n    });\n    return filter;\n  };\n\n  EventBase.prototype.getDeletedOccurrences = function (recurrenceData) {\n    var fields = this.parent.eventFields;\n    var parentObject;\n    var deletedOccurrences = [];\n\n    if (typeof recurrenceData === 'string' || typeof recurrenceData === 'number') {\n      parentObject = this.parent.eventsData.filter(function (obj) {\n        return obj[fields.id] === recurrenceData;\n      })[0];\n    } else {\n      parentObject = extend({}, recurrenceData, null, true);\n    }\n\n    if (parentObject[fields.recurrenceException]) {\n      var exDateString_1 = parentObject[fields.recurrenceException].split(',');\n\n      var _loop_3 = function (i, len) {\n        var edited = this_2.parent.eventsData.filter(function (eventObj) {\n          return eventObj[fields.recurrenceID] === parentObject[fields.id] && eventObj[fields.recurrenceException] === exDateString_1[parseInt(i.toString(), 10)];\n        });\n\n        if (edited.length === 0) {\n          var exDate = getDateFromRecurrenceDateString(exDateString_1[parseInt(i.toString(), 10)]);\n          var childObject = extend({}, recurrenceData, null, true);\n          childObject[fields.recurrenceID] = parentObject[fields.id];\n          delete childObject[fields.followingID];\n          childObject[fields.recurrenceException] = exDateString_1[parseInt(i.toString(), 10)];\n          var startDate = new Date(exDate.getTime());\n          var time = parentObject[fields.endTime].getTime() - parentObject[fields.startTime].getTime();\n          var endDate = new Date(startDate.getTime());\n          endDate.setMilliseconds(time);\n          childObject[fields.startTime] = new Date(startDate.getTime());\n          childObject[fields.endTime] = new Date(endDate.getTime());\n          deletedOccurrences.push(childObject);\n        }\n      };\n\n      var this_2 = this;\n\n      for (var i = 0, len = exDateString_1.length; i < len; i++) {\n        _loop_3(i, len);\n      }\n    }\n\n    return deletedOccurrences;\n  };\n\n  EventBase.prototype.applyResourceColor = function (element, data, type, index, alpha) {\n    if (!this.parent.resourceBase) {\n      return;\n    }\n\n    var alphaColor = function (color, alpha) {\n      color = color.replace('#', '');\n      var r = parseInt(color.substring(0, color.length / 3), 16);\n      var g = parseInt(color.substring(color.length / 3, 2 * color.length / 3), 16);\n      var b = parseInt(color.substring(2 * color.length / 3, 3 * color.length / 3), 16);\n      return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n    }; // index refers groupOrder\n\n\n    var color = this.parent.resourceBase.getResourceColor(data, index);\n\n    if (color) {\n      element.style[type] = !isNullOrUndefined(alpha) ? alphaColor(color, alpha) : color;\n    }\n  };\n\n  EventBase.prototype.createBlockAppointmentElement = function (record, resIndex, isResourceEventTemplate) {\n    var eventSubject = record[this.parent.eventFields.subject] || this.parent.eventSettings.fields.subject.default;\n    var appointmentWrapper = createElement('div', {\n      className: BLOCK_APPOINTMENT_CLASS,\n      attrs: {\n        'data-id': 'Appointment_' + record[this.parent.eventFields.id],\n        'aria-disabled': 'true'\n      }\n    });\n    var templateElement;\n\n    if (!isNullOrUndefined(this.parent.activeViewOptions.eventTemplate)) {\n      var scheduleId = this.parent.element.id + '_';\n      var viewName = this.parent.activeViewOptions.eventTemplateName;\n      var templateId = scheduleId + viewName + 'eventTemplate';\n      var templateName = 'eventTemplate' + (isResourceEventTemplate && this.parent.currentView.indexOf('Year') === -1 ? '_' + resIndex : '');\n      templateElement = this.parent.getAppointmentTemplate()(record, this.parent, templateName, templateId, false);\n    } else {\n      var appointmentSubject = createElement('div', {\n        className: SUBJECT_CLASS\n      });\n      this.parent.sanitize(eventSubject, appointmentSubject);\n      templateElement = [appointmentSubject];\n    }\n\n    append(templateElement, appointmentWrapper);\n    this.setWrapperAttributes(appointmentWrapper, resIndex);\n    return appointmentWrapper;\n  };\n\n  EventBase.prototype.setWrapperAttributes = function (appointmentWrapper, resIndex) {\n    if (!isNullOrUndefined(this.cssClass)) {\n      addClass([appointmentWrapper], this.cssClass);\n    }\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      appointmentWrapper.setAttribute('data-group-index', resIndex.toString());\n    }\n  };\n\n  EventBase.prototype.getReadonlyAttribute = function (event) {\n    return (event[this.parent.eventFields.isReadonly] || this.parent.readonly).toString();\n  };\n\n  EventBase.prototype.isBlockRange = function (eventData) {\n    var eventCollection = eventData instanceof Array ? eventData : [eventData];\n    var isBlockAlert = false;\n    var fields = this.parent.eventFields;\n\n    for (var _i = 0, _a = eventCollection; _i < _a.length; _i++) {\n      var event_5 = _a[_i];\n      var dataCol = [];\n\n      if (!isNullOrUndefined(event_5[fields.recurrenceRule]) && (isNullOrUndefined(event_5[fields.recurrenceID]) || event_5[fields.id] === event_5[fields.recurrenceID])) {\n        dataCol = this.generateOccurrence(event_5);\n      } else {\n        dataCol.push(event_5);\n      }\n\n      for (var _b = 0, dataCol_1 = dataCol; _b < dataCol_1.length; _b++) {\n        var data = dataCol_1[_b];\n        var filterBlockEvents = this.filterBlockEvents(data);\n\n        if (filterBlockEvents.length > 0) {\n          isBlockAlert = true;\n          break;\n        }\n      }\n    }\n\n    this.parent.uiStateValues.isBlock = isBlockAlert;\n    return isBlockAlert;\n  };\n\n  EventBase.prototype.getFilterEventsList = function (dataSource, query) {\n    return new DataManager(dataSource).executeLocal(new Query().where(query));\n  };\n\n  EventBase.prototype.getSeriesEvents = function (parentEvent, startTime) {\n    var fields = this.parent.eventFields;\n    startTime = isNullOrUndefined(startTime) ? parentEvent[fields.startTime] : startTime;\n    var deleteFutureEditEvents;\n    var futureEvents;\n    var deleteFutureEditEventList = [];\n    var delId = parentEvent[fields.id];\n    var followingId = parentEvent[fields.followingID];\n    var deleteFutureEvent;\n    var startTimeQuery = this.parent.currentAction === 'EditSeries' ? 'greaterthan' : 'greaterthanorequal';\n\n    do {\n      deleteFutureEvent = new Predicate(fields.followingID, 'equal', delId).and(new Predicate(fields.startTime, startTimeQuery, startTime));\n      futureEvents = this.getFilterEventsList(this.parent.eventsData, deleteFutureEvent);\n      deleteFutureEditEvents = futureEvents.slice(-1)[0];\n\n      if (!isNullOrUndefined(deleteFutureEditEvents) && deleteFutureEditEvents[fields.id] !== followingId) {\n        deleteFutureEditEventList.push(deleteFutureEditEvents);\n        delId = deleteFutureEditEvents[fields.id];\n        followingId = deleteFutureEditEvents[fields.followingID];\n      } else {\n        followingId = null;\n      }\n    } while (futureEvents.length === 1 && !isNullOrUndefined(deleteFutureEditEvents[fields.followingID]));\n\n    return deleteFutureEditEventList;\n  };\n\n  EventBase.prototype.getEditedOccurrences = function (deleteFutureEditEventList, startTime) {\n    var fields = this.parent.eventFields;\n    var deleteRecurrenceEventList = [];\n    var delEditedEvents;\n\n    for (var _i = 0, deleteFutureEditEventList_1 = deleteFutureEditEventList; _i < deleteFutureEditEventList_1.length; _i++) {\n      var event_6 = deleteFutureEditEventList_1[_i];\n      var delEventQuery = new Predicate(fields.recurrenceID, 'equal', event_6[fields.id]).or(new Predicate(fields.recurrenceID, 'equal', event_6[fields.followingID]).and(new Predicate(fields.recurrenceID, 'notequal', undefined)).and(new Predicate(fields.recurrenceID, 'notequal', null)));\n\n      if (this.parent.currentAction === 'EditFollowingEvents' || this.parent.currentAction === 'DeleteFollowingEvents') {\n        delEventQuery = delEventQuery.and(new Predicate(fields.startTime, 'greaterthanorequal', startTime));\n      }\n\n      delEditedEvents = this.getFilterEventsList(this.parent.eventsData, delEventQuery);\n      deleteRecurrenceEventList = deleteRecurrenceEventList.concat(delEditedEvents);\n    }\n\n    return deleteRecurrenceEventList;\n  };\n\n  EventBase.prototype.getRenderedDates = function (dateRender) {\n    var firstDate = 0;\n    var lastDate = dateRender.length;\n    var filteredDates;\n\n    if (dateRender[0] < this.parent.minDate && dateRender[dateRender.length - 1] > this.parent.maxDate) {\n      for (var i = 0; i < dateRender.length; i++) {\n        if (resetTime(dateRender[parseInt(i.toString(), 10)]).getTime() === resetTime(new Date(this.parent.minDate)).getTime()) {\n          firstDate = i;\n        }\n\n        if (resetTime(dateRender[parseInt(i.toString(), 10)]).getTime() === resetTime(new Date(this.parent.maxDate)).getTime()) {\n          lastDate = i;\n        }\n      }\n\n      filteredDates = dateRender.filter(function (date) {\n        return date >= dateRender[parseInt(firstDate.toString(), 10)] && date <= dateRender[parseInt(lastDate.toString(), 10)];\n      });\n    }\n\n    return filteredDates;\n  };\n\n  EventBase.prototype.isValidEvent = function (eventObj, start, end, schedule) {\n    var isHourRange = end.getTime() > schedule.startHour.getTime() && start.getTime() < schedule.endHour.getTime();\n    var isSameRange = schedule.startHour.getTime() <= start.getTime() && eventObj[this.parent.eventFields.startTime].getTime() >= schedule.startHour.getTime() && eventObj[this.parent.eventFields.endTime].getTime() < schedule.endHour.getTime() && start.getTime() === end.getTime();\n    return isHourRange || isSameRange;\n  };\n\n  EventBase.prototype.allDayExpandScroll = function (dateHeader) {\n    var indentHeight = 0;\n    var headerRows = [].slice.call(this.parent.element.querySelectorAll('.' + HEADER_ROW_CLASS));\n    headerRows.forEach(function (element) {\n      var tdEle = [].slice.call(element.children);\n      tdEle.forEach(function (ele) {\n        ele.style.top = indentHeight + 'px';\n      });\n      indentHeight += element.offsetHeight;\n    });\n    indentHeight = dateHeader.offsetHeight - indentHeight;\n    this.parent.element.querySelector('.' + ALLDAY_CELLS_CLASS).style.height = indentHeight / 12 + 'em';\n\n    if (this.parent.uiStateValues.expand) {\n      addClass([dateHeader], ALLDAY_APPOINTMENT_SCROLL);\n    } else {\n      removeClass([dateHeader], ALLDAY_APPOINTMENT_SCROLL);\n    }\n  };\n\n  EventBase.prototype.updateEventMinimumDuration = function (startEndHours, startTime, endTime) {\n    if (startTime.getTime() < endTime.getTime()) {\n      var eventDuration = (getUniversalTime(endTime) - getUniversalTime(startTime)) / MS_PER_MINUTE;\n\n      if (eventDuration < this.parent.eventSettings.minimumEventDuration) {\n        var tempEnd = new Date(startTime);\n        tempEnd.setMinutes(tempEnd.getMinutes() + this.parent.eventSettings.minimumEventDuration);\n        endTime = tempEnd;\n\n        if (endTime.getTime() > startEndHours.endHour.getTime()) {\n          var tempStart = new Date(startEndHours.endHour.getTime());\n          tempStart.setMinutes(tempStart.getMinutes() - this.parent.eventSettings.minimumEventDuration);\n          startTime = tempStart;\n          endTime = startEndHours.endHour;\n        }\n      }\n    }\n\n    return {\n      startDate: startTime,\n      endDate: endTime\n    };\n  };\n\n  EventBase.prototype.createEventWrapper = function (type, index) {\n    if (type === void 0) {\n      type = '';\n    }\n\n    if (index === void 0) {\n      index = 0;\n    }\n\n    var tr = createElement('tr');\n    var levels = this.parent.activeView.colLevels.slice(-1)[0];\n\n    for (var i = 0, len = levels.length; i < len; i++) {\n      var col = levels[parseInt(i.toString(), 10)];\n      var appointmentWrap = createElement('td', {\n        className: type === 'allDay' ? ALLDAY_APPOINTMENT_WRAPPER_CLASS : type === 'timeIndicator' ? TIMELINE_WRAPPER_CLASS : DAY_WRAPPER_CLASS,\n        attrs: {\n          'data-date': col.date.getTime().toString()\n        }\n      });\n\n      if (!isNullOrUndefined(col.groupIndex)) {\n        appointmentWrap.setAttribute('data-group-index', col.groupIndex.toString());\n      }\n\n      if (type === '') {\n        var innerWrapper = createElement('div', {\n          id: APPOINTMENT_WRAPPER_CLASS + '-' + index.toString(),\n          className: APPOINTMENT_WRAPPER_CLASS\n        });\n        appointmentWrap.appendChild(innerWrapper);\n      }\n\n      tr.appendChild(appointmentWrap);\n      index = index + 1;\n    }\n\n    return tr;\n  };\n\n  EventBase.prototype.getPageCoordinates = function (e) {\n    if (isNullOrUndefined(e)) {\n      return e;\n    }\n\n    var eventArgs = e.event;\n    return eventArgs && eventArgs.changedTouches ? eventArgs.changedTouches[0] : e.changedTouches ? e.changedTouches[0] : eventArgs || e;\n  };\n\n  EventBase.prototype.renderSpannedIcon = function (element, spanEvent) {\n    var iconElement = createElement('div', {\n      className: EVENT_INDICATOR_CLASS + ' ' + ICON\n    });\n\n    if (spanEvent.isLeft) {\n      var iconLeft = iconElement.cloneNode();\n      addClass([iconLeft], EVENT_ICON_LEFT_CLASS);\n      prepend([iconLeft], element);\n    }\n\n    if (spanEvent.isRight) {\n      var iconRight = iconElement.cloneNode();\n      addClass([iconRight], EVENT_ICON_RIGHT_CLASS);\n      append([iconRight], element);\n    }\n\n    if (spanEvent.isTop) {\n      var iconTop = iconElement.cloneNode();\n      addClass([iconTop], EVENT_ICON_UP_CLASS);\n      prepend([iconTop], element);\n    }\n\n    if (spanEvent.isBottom) {\n      var iconBottom = iconElement.cloneNode();\n      addClass([iconBottom], EVENT_ICON_DOWN_CLASS);\n      append([iconBottom], element);\n    }\n  };\n\n  EventBase.prototype.unWireEvents = function () {\n    var appElements = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CLASS));\n\n    for (var _i = 0, appElements_1 = appElements; _i < appElements_1.length; _i++) {\n      var element = appElements_1[_i];\n      EventHandler.clearEvents(element);\n    }\n  };\n\n  EventBase.prototype.destroy = function () {\n    this.unWireEvents();\n    this.parent = null;\n  };\n\n  return EventBase;\n}();\n\nvar __extends$1 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Vertical view appointment rendering\n */\n\n\nvar VerticalEvent =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$1(VerticalEvent, _super);\n\n  function VerticalEvent(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.dateRender = [];\n    _this.renderedEvents = [];\n    _this.renderedAllDayEvents = [];\n    _this.overlapEvents = [];\n    _this.moreEvents = [];\n    _this.overlapList = [];\n    _this.allDayEvents = [];\n    _this.slotCount = _this.parent.activeViewOptions.timeScale.slotCount;\n    _this.interval = _this.parent.activeViewOptions.timeScale.interval;\n    _this.allDayLevel = 0;\n    _this.startHour = _this.parent.activeView.getStartHour();\n    _this.endHour = _this.parent.activeView.getEndHour();\n    _this.element = _this.parent.activeView.getPanel();\n    _this.fields = _this.parent.eventFields;\n    _this.animation = new Animation({\n      progress: _this.animationUiUpdate.bind(_this)\n    });\n\n    _this.addEventListener();\n\n    return _this;\n  }\n\n  VerticalEvent.prototype.renderAppointments = function () {\n    if (isNullOrUndefined(this.parent)) {\n      return;\n    }\n\n    if (this.parent.dragAndDropModule) {\n      this.parent.dragAndDropModule.setDragArea();\n    }\n\n    this.isResourceEventTemplate = this.parent.isSpecificResourceEvents();\n    var wrapperElements = [].slice.call(this.parent.element.querySelectorAll('.' + BLOCK_APPOINTMENT_CLASS + ',.' + APPOINTMENT_CLASS + ',.' + ROW_COUNT_WRAPPER_CLASS));\n    var isDragging = this.parent.crudModule && this.parent.crudModule.crudObj.isCrudAction ? true : false;\n\n    for (var _i = 0, wrapperElements_1 = wrapperElements; _i < wrapperElements_1.length; _i++) {\n      var wrapper = wrapperElements_1[_i];\n\n      if (isDragging && !(wrapper.classList.contains(ALLDAY_APPOINTMENT_CLASS) || wrapper.classList.contains(ROW_COUNT_WRAPPER_CLASS))) {\n        var groupIndex = parseInt(wrapper.getAttribute('data-group-index'), 10);\n\n        for (var j = 0, len = this.parent.crudModule.crudObj.sourceEvent.length; j < len; j++) {\n          if (groupIndex === this.parent.crudModule.crudObj.sourceEvent[parseInt(j.toString(), 10)].groupIndex || groupIndex === this.parent.crudModule.crudObj.targetEvent[parseInt(j.toString(), 10)].groupIndex) {\n            remove(wrapper);\n          }\n        }\n      } else {\n        remove(wrapper);\n      }\n    }\n\n    if (!this.element.querySelector('.' + WORK_CELLS_CLASS)) {\n      return;\n    }\n\n    if (this.parent.virtualScrollModule) {\n      this.parent.virtualScrollModule.updateFocusedWorkCell();\n    }\n\n    this.allDayElement = [].slice.call(this.element.querySelectorAll('.' + ALLDAY_CELLS_CLASS));\n    this.setAllDayRowHeight(0);\n\n    if (this.parent.eventsProcessed.length === 0 && this.parent.blockProcessed.length === 0) {\n      return;\n    }\n\n    var expandCollapse = this.element.querySelector('.' + ALLDAY_APPOINTMENT_SECTION_CLASS);\n    EventHandler.remove(expandCollapse, 'click', this.rowExpandCollapse);\n    EventHandler.add(expandCollapse, 'click', this.rowExpandCollapse, this);\n    this.renderedEvents = [];\n    this.renderedAllDayEvents = [];\n    this.initializeValues();\n    this.processBlockEvents();\n    this.renderEvents('normalEvents');\n\n    if (this.allDayEvents.length > 0) {\n      this.allDayEvents = this.allDayEvents.filter(function (item, index, arr) {\n        return index === arr.map(function (item) {\n          return item.Guid;\n        }).indexOf(item.Guid);\n      });\n      removeClass(this.allDayElement, ALLDAY_ROW_ANIMATE_CLASS);\n      this.slots.push(this.parent.activeView.renderDates.map(function (date) {\n        return +date;\n      }));\n      this.renderEvents('allDayEvents');\n    }\n\n    this.parent.notify(contentReady, {});\n    addClass(this.allDayElement, ALLDAY_ROW_ANIMATE_CLASS);\n\n    if (isDragging) {\n      this.parent.crudModule.crudObj.isCrudAction = false;\n    }\n\n    this.parent.renderTemplates();\n  };\n\n  VerticalEvent.prototype.initializeValues = function () {\n    this.resources = this.parent.activeViewOptions.group.resources.length > 0 ? this.parent.uiStateValues.isGroupAdaptive ? [this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex]] : this.parent.resourceBase.lastResourceLevel : [];\n\n    if (this.resources.length > 0 && this.parent.activeViewOptions.allowVirtualScrolling && this.parent.virtualScrollModule) {\n      this.resources = this.parent.resourceBase.renderedResources;\n    }\n\n    this.cellHeight = parseFloat(this.parent.element.querySelector('.e-content-wrap tbody tr').getBoundingClientRect().height.toFixed(2));\n    this.dateRender[0] = this.parent.activeView.renderDates;\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      for (var i = 0, len = this.resources.length; i < len; i++) {\n        this.dateRender[parseInt(i.toString(), 10)] = this.resources[parseInt(i.toString(), 10)].renderDates;\n      }\n    }\n  };\n\n  VerticalEvent.prototype.getHeight = function (start, end) {\n    var appHeight = (getUniversalTime(end) - getUniversalTime(start)) / MS_PER_MINUTE * (this.cellHeight * this.slotCount) / this.interval;\n    appHeight = appHeight <= 0 ? this.cellHeight : appHeight;\n    return appHeight;\n  };\n\n  VerticalEvent.prototype.appendEvent = function (eventObj, appointmentElement, index, appLeft) {\n    var appointmentWrap = this.element.querySelector('.' + APPOINTMENT_WRAPPER_CLASS + '[id=\"' + APPOINTMENT_WRAPPER_CLASS + '-' + index + '\"]');\n\n    if (this.parent.enableRtl) {\n      setStyleAttribute(appointmentElement, {\n        'right': appLeft\n      });\n    } else {\n      setStyleAttribute(appointmentElement, {\n        'left': appLeft\n      });\n    }\n\n    var eventType = appointmentElement.classList.contains(BLOCK_APPOINTMENT_CLASS) ? 'blockEvent' : 'event';\n    var args = {\n      data: extend({}, eventObj, null, true),\n      element: appointmentElement,\n      cancel: false,\n      type: eventType\n    };\n    this.parent.trigger(eventRendered, args, function (eventArgs) {\n      if (!eventArgs.cancel) {\n        appointmentWrap.appendChild(appointmentElement);\n      }\n    });\n  };\n\n  VerticalEvent.prototype.processBlockEvents = function () {\n    var resources = this.getResourceList();\n    var dateCount = this.getStartCount();\n\n    for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {\n      var resource = resources_1[_i];\n      var renderDates = this.dateRender[parseInt(resource.toString(), 10)];\n\n      for (var day = 0, length_1 = renderDates.length; day < length_1; day++) {\n        var startDate = new Date(renderDates[parseInt(day.toString(), 10)].getTime());\n        var endDate = addDays(renderDates[parseInt(day.toString(), 10)], 1);\n        var filterEvents = this.filterEvents(startDate, endDate, this.parent.blockProcessed, this.resources[parseInt(resource.toString(), 10)]);\n\n        for (var _a = 0, filterEvents_1 = filterEvents; _a < filterEvents_1.length; _a++) {\n          var event_1 = filterEvents_1[_a];\n\n          if (this.parent.resourceBase) {\n            this.setValues(event_1, resource);\n          }\n\n          this.renderBlockEvents(event_1, day, resource, dateCount);\n          this.cssClass = null;\n          this.groupOrder = null;\n        }\n\n        dateCount += 1;\n      }\n    }\n  };\n\n  VerticalEvent.prototype.renderBlockEvents = function (eventObj, dayIndex, resource, dayCount) {\n    var spannedData = this.isSpannedEvent(eventObj, dayIndex, resource);\n    var eStart = spannedData[this.fields.startTime];\n    var eEnd = spannedData[this.fields.endTime];\n    var currentDate = resetTime(new Date(this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex.toString(), 10)].getTime()));\n    var schedule = getStartEndHours(currentDate, this.startHour, this.endHour);\n\n    if (eStart <= eEnd && this.isValidEvent(eventObj, eStart, eEnd, schedule) && this.isWorkDayAvailable(resource, eStart)) {\n      var blockTop = void 0;\n      var blockHeight = void 0;\n\n      if (spannedData[this.fields.isAllDay]) {\n        var contentWrap = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS + ' table');\n        blockHeight = formatUnit(contentWrap.offsetHeight);\n        blockTop = formatUnit(0);\n      } else {\n        blockHeight = formatUnit(this.getHeight(eStart, eEnd));\n        blockTop = formatUnit(this.getTopValue(eStart, dayIndex, resource));\n      }\n\n      var appointmentElement = this.createBlockAppointmentElement(eventObj, resource, this.isResourceEventTemplate);\n      setStyleAttribute(appointmentElement, {\n        'width': '100%',\n        'height': blockHeight,\n        'top': blockTop\n      });\n      var index = this.getDayIndex(dayIndex, resource, dayCount);\n      this.appendEvent(eventObj, appointmentElement, index, '0px');\n    }\n  };\n\n  VerticalEvent.prototype.renderEvents = function (eventType) {\n    removeClass(this.allDayElement, ALLDAY_ROW_ANIMATE_CLASS);\n    var eventCollection = eventType === 'allDayEvents' ? this.sortByDateTime(this.allDayEvents) : undefined;\n    var resources = this.getResourceList();\n    var dateCount = this.getStartCount();\n    var isRender;\n\n    var _loop_1 = function (resource) {\n      isRender = true;\n\n      if (this_1.parent.crudModule && this_1.parent.crudModule.crudObj.isCrudAction && eventType !== 'allDayEvents' && !this_1.parent.uiStateValues.isGroupAdaptive) {\n        if (this_1.parent.crudModule.crudObj.sourceEvent.filter(function (data) {\n          return data.groupIndex === resource;\n        }).length === 0 && this_1.parent.crudModule.crudObj.targetEvent.filter(function (data) {\n          return data.groupIndex === resource;\n        }).length === 0) {\n          isRender = false;\n        }\n      }\n\n      this_1.slots = [];\n      var renderDates = this_1.dateRender[parseInt(resource.toString(), 10)];\n      var renderedDate = this_1.getRenderedDates(renderDates) || renderDates;\n      this_1.slots.push(renderDates.map(function (date) {\n        return +date;\n      }));\n\n      for (var day = 0, length_2 = renderDates.length; day < length_2 && renderDates[parseInt(day.toString(), 10)] <= renderedDate[renderedDate.length - 1]; day++) {\n        this_1.renderedEvents = [];\n        var startDate = new Date(renderDates[parseInt(day.toString(), 10)].getTime());\n        var endDate = addDays(renderDates[parseInt(day.toString(), 10)], 1);\n        var filterEvents = this_1.filterEvents(startDate, endDate, eventCollection, this_1.resources[parseInt(resource.toString(), 10)]);\n\n        if (isRender) {\n          for (var _i = 0, filterEvents_2 = filterEvents; _i < filterEvents_2.length; _i++) {\n            var event_2 = filterEvents_2[_i];\n\n            if (this_1.parent.resourceBase) {\n              this_1.setValues(event_2, resource);\n            }\n\n            if (eventType === 'allDayEvents') {\n              this_1.renderAllDayEvents(event_2, day, resource, dateCount);\n            } else {\n              if (this_1.isAllDayAppointment(event_2)) {\n                this_1.allDayEvents.push(extend({}, event_2, null, true));\n              } else {\n                if (this_1.parent.eventSettings.enableMaxHeight) {\n                  if (this_1.getOverlapIndex(event_2, day, false, resource) > 0) {\n                    continue;\n                  }\n                }\n\n                this_1.renderNormalEvents(event_2, day, resource, dateCount);\n              }\n            }\n\n            this_1.cssClass = null;\n            this_1.groupOrder = null;\n          }\n        } else {\n          for (var _a = 0, filterEvents_3 = filterEvents; _a < filterEvents_3.length; _a++) {\n            var event_3 = filterEvents_3[_a];\n\n            if (this_1.isAllDayAppointment(event_3)) {\n              this_1.allDayEvents.push(extend({}, event_3, null, true));\n            }\n          }\n        }\n\n        dateCount += 1;\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, resources_2 = resources; _i < resources_2.length; _i++) {\n      var resource = resources_2[_i];\n\n      _loop_1(resource);\n    }\n  };\n\n  VerticalEvent.prototype.getStartCount = function () {\n    return this.parent.virtualScrollModule && this.parent.activeViewOptions.allowVirtualScrolling && this.parent.timeScale.enable ? parseInt(this.element.querySelector('.' + APPOINTMENT_WRAPPER_CLASS).getAttribute('id').split('-').slice(-1)[0], 10) : 0;\n  };\n\n  VerticalEvent.prototype.getDayIndex = function (dayIndex, resource, dayCount) {\n    var _this = this;\n\n    if (!this.parent.activeViewOptions.group.byDate) {\n      return dayCount;\n    }\n\n    if (this.parent.activeViewOptions.group.byDate && !this.parent.activeViewOptions.group.hideNonWorkingDays) {\n      var renderedIndex = this.parent.resourceBase.lastResourceLevel[0].renderDates.indexOf(this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex.toString(), 10)]);\n      return this.resources.length * renderedIndex + resource;\n    }\n\n    var dateIndex = 0;\n    var firstColumn = this.parent.activeView.colLevels[0];\n    var currentDate = this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex.toString(), 10)].getTime();\n    var currentResources = [];\n\n    for (var i = 0; i < firstColumn.length; i++) {\n      currentResources = this.parent.resourceBase.resourceDateTree[parseInt(i.toString(), 10)];\n\n      if (currentDate === firstColumn[parseInt(i.toString(), 10)].date.getTime()) {\n        break;\n      }\n\n      dateIndex = dateIndex + firstColumn[parseInt(i.toString(), 10)].colSpan;\n    }\n\n    var resIndex = currentResources.findIndex(function (x) {\n      return x.groupOrder.toString() === _this.resources[parseInt(resource.toString(), 10)].groupOrder.toString();\n    });\n\n    if (resIndex < 0) {\n      return dateIndex;\n    }\n\n    return dateIndex + resIndex;\n  };\n\n  VerticalEvent.prototype.setValues = function (event, resourceIndex) {\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.cssClass = this.resources[parseInt(resourceIndex.toString(), 10)].cssClass;\n      this.groupOrder = this.resources[parseInt(resourceIndex.toString(), 10)].groupOrder;\n    } else {\n      this.cssClass = this.parent.resourceBase.getCssClass(event);\n    }\n  };\n\n  VerticalEvent.prototype.getResourceList = function () {\n    // eslint-disable-next-line prefer-spread\n    var resources = Array.apply(null, {\n      length: this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive ? this.resources.length : 1\n    }).map(function (value, index) {\n      return index;\n    });\n    return resources;\n  }; // eslint-disable-next-line max-len\n\n\n  VerticalEvent.prototype.createAppointmentElement = function (record, isAllDay, data, resource) {\n    var fieldMapping = this.parent.eventFields;\n    var recordSubject = record[fieldMapping.subject] || this.parent.eventSettings.fields.subject.default || this.parent.localeObj.getConstant('addTitle');\n    var appointmentWrapper = createElement('div', {\n      className: APPOINTMENT_CLASS,\n      attrs: {\n        'data-id': 'Appointment_' + record[fieldMapping.id],\n        'data-guid': record.Guid,\n        'role': 'button',\n        'tabindex': '0',\n        'aria-disabled': this.parent.eventBase.getReadonlyAttribute(record),\n        'aria-label': this.parent.getAnnouncementString(record)\n      }\n    });\n\n    if (record[this.fields.isReadonly]) {\n      addClass([appointmentWrapper], 'e-read-only');\n    }\n\n    var appointmentDetails = createElement('div', {\n      className: APPOINTMENT_DETAILS\n    });\n    appointmentWrapper.appendChild(appointmentDetails);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      var resourceIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : resource;\n      appointmentWrapper.setAttribute('data-group-index', resourceIndex.toString());\n    }\n\n    var templateElement;\n    var eventData = data;\n\n    if (!isNullOrUndefined(this.parent.activeViewOptions.eventTemplate)) {\n      var elementId = this.parent.element.id + '_';\n      var viewName = this.parent.activeViewOptions.eventTemplateName;\n      var templateId = elementId + viewName + 'eventTemplate';\n      var resIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : resource;\n      var templateName = 'eventTemplate' + (this.isResourceEventTemplate ? '_' + resIndex : '');\n      templateElement = this.parent.getAppointmentTemplate()(record, this.parent, templateName, templateId, false);\n    } else {\n      var appointmentSubject = createElement('div', {\n        className: SUBJECT_CLASS\n      });\n      this.parent.sanitize(recordSubject, appointmentSubject);\n\n      if (isAllDay) {\n        if (record[fieldMapping.isAllDay]) {\n          templateElement = [appointmentSubject];\n        } else {\n          templateElement = [];\n          var appointmentStartTime = createElement('div', {\n            className: APPOINTMENT_TIME + (this.parent.isAdaptive ? ' ' + DISABLE_CLASS : ''),\n            innerHTML: this.parent.getTimeString(record[fieldMapping.startTime])\n          });\n          var appointmentEndTime = createElement('div', {\n            className: APPOINTMENT_TIME + (this.parent.isAdaptive ? ' ' + DISABLE_CLASS : ''),\n            innerHTML: this.parent.getTimeString(record[fieldMapping.endTime])\n          });\n          addClass([appointmentSubject], 'e-text-center');\n\n          if (!eventData.isLeft) {\n            templateElement.push(appointmentStartTime);\n          }\n\n          templateElement.push(appointmentSubject);\n\n          if (!eventData.isRight) {\n            templateElement.push(appointmentEndTime);\n          }\n        }\n      } else {\n        var timeStr = this.parent.getTimeString(record[fieldMapping.startTime]) + ' - ' + this.parent.getTimeString(record[fieldMapping.endTime]);\n        var appointmentTime = createElement('div', {\n          className: APPOINTMENT_TIME + (this.parent.isAdaptive ? ' ' + DISABLE_CLASS : ''),\n          innerHTML: timeStr\n        });\n        var appointmentLocation = createElement('div', {\n          className: LOCATION_CLASS\n        });\n        this.parent.sanitize(record[fieldMapping.location] || this.parent.eventSettings.fields.location.default || '', appointmentLocation);\n        templateElement = [appointmentSubject, appointmentTime, appointmentLocation];\n      }\n    }\n\n    append(templateElement, appointmentDetails);\n\n    if (!this.parent.isAdaptive && (!isNullOrUndefined(record[fieldMapping.recurrenceRule]) || !isNullOrUndefined(record[fieldMapping.recurrenceID]))) {\n      var iconClass = record[fieldMapping.id] === record[fieldMapping.recurrenceID] ? EVENT_RECURRENCE_ICON_CLASS : EVENT_RECURRENCE_EDIT_ICON_CLASS;\n      var recurrenceIcon = createElement('div', {\n        className: ICON + ' ' + iconClass\n      });\n\n      if (isAllDay) {\n        appointmentDetails.appendChild(recurrenceIcon);\n      } else {\n        appointmentWrapper.appendChild(recurrenceIcon);\n      }\n    }\n\n    this.parent.eventBase.renderSpannedIcon(isAllDay ? appointmentDetails : appointmentWrapper, eventData);\n\n    if (!isNullOrUndefined(this.cssClass)) {\n      addClass([appointmentWrapper], this.cssClass);\n    }\n\n    this.applyResourceColor(appointmentWrapper, record, 'backgroundColor', this.groupOrder);\n    this.renderResizeHandler(appointmentWrapper, eventData, record[this.fields.isReadonly]);\n    return appointmentWrapper;\n  };\n\n  VerticalEvent.prototype.createMoreIndicator = function (allDayRow, count, currentDay) {\n    var index = currentDay + count;\n    var countWrapper = allDayRow[parseInt(index.toString(), 10)];\n\n    if (countWrapper.childElementCount <= 0) {\n      var innerCountWrap = createElement('div', {\n        className: ROW_COUNT_WRAPPER_CLASS,\n        id: ROW_COUNT_WRAPPER_CLASS + '-' + index.toString()\n      });\n      var moreIndicatorElement = createElement('div', {\n        className: MORE_INDICATOR_CLASS,\n        attrs: {\n          'tabindex': '0',\n          'data-index': index.toString(),\n          'data-count': '1'\n        },\n        innerHTML: '+1&nbsp;' + (this.parent.isAdaptive ? '' : this.parent.localeObj.getConstant('more'))\n      });\n      innerCountWrap.appendChild(moreIndicatorElement);\n      countWrapper.appendChild(innerCountWrap);\n      EventHandler.add(moreIndicatorElement, 'click', this.rowExpandCollapse, this);\n    } else {\n      var countCell = countWrapper.querySelector('.' + MORE_INDICATOR_CLASS);\n      var moreCount = parseInt(countCell.getAttribute('data-count'), 10) + 1;\n      countCell.setAttribute('data-count', moreCount.toString());\n      countCell.innerHTML = '+' + this.parent.globalize.formatNumber(moreCount) + '&nbsp;' + (this.parent.isAdaptive ? '' : this.parent.localeObj.getConstant('more'));\n    }\n  };\n\n  VerticalEvent.prototype.isSpannedEvent = function (record, day, resource) {\n    var currentDate = resetTime(this.dateRender[parseInt(resource.toString(), 10)][parseInt(day.toString(), 10)]);\n    var renderedDate = this.getRenderedDates(this.dateRender[parseInt(resource.toString(), 10)]) || [currentDate];\n    var currentDay = renderedDate.filter(function (date) {\n      return date.getDay() === day;\n    });\n\n    if (currentDay.length === 0) {\n      currentDate = resetTime(renderedDate[0]);\n    }\n\n    var field = this.parent.eventFields;\n    var schedule = getStartEndHours(currentDate, this.startHour, this.endHour);\n    var event = extend({}, record, null, true);\n    event.isSpanned = {\n      isBottom: false,\n      isTop: false\n    };\n\n    if (record[field.startTime].getTime() < schedule.startHour.getTime()) {\n      event[field.startTime] = schedule.startHour;\n      event.isSpanned.isTop = true;\n    }\n\n    if (record[field.endTime].getTime() > schedule.endHour.getTime()) {\n      event[field.endTime] = schedule.endHour;\n      event.isSpanned.isBottom = true;\n    }\n\n    var eventDates = this.updateEventMinimumDuration(schedule, event[field.startTime], event[field.endTime]);\n    event[field.startTime] = eventDates.startDate;\n    event[field.endTime] = eventDates.endDate;\n    return event;\n  };\n\n  VerticalEvent.prototype.isWorkDayAvailable = function (resource, start) {\n    if (this.parent.activeViewOptions.group.hideNonWorkingDays && this.resources.length > 0) {\n      var workDays = this.resources[parseInt(resource.toString(), 10)].resourceData[this.resources[parseInt(resource.toString(), 10)].resource.workDaysField] || this.parent.activeViewOptions.workDays;\n      return workDays && workDays.indexOf(start.getDay()) >= 0;\n    }\n\n    return true;\n  };\n\n  VerticalEvent.prototype.renderAllDayEvents = function (eventObj, dayIndex, resource, dayCount, inline) {\n    var _this = this;\n\n    var currentDates = this.getRenderedDates(this.dateRender[parseInt(resource.toString(), 10)]) || this.dateRender[parseInt(resource.toString(), 10)];\n\n    if (this.parent.activeViewOptions.group.byDate) {\n      this.slots[0] = [this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex.toString(), 10)].getTime()];\n      currentDates = [this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex.toString(), 10)]];\n    }\n\n    var record = this.splitEvent(eventObj, currentDates)[0];\n    var allDayRowCell = this.element.querySelector('.' + ALLDAY_CELLS_CLASS + ':first-child');\n    var cellTop = allDayRowCell.offsetTop;\n    var eStart = new Date(record[this.parent.eventFields.startTime].getTime());\n    var eEnd = new Date(record[this.parent.eventFields.endTime].getTime());\n    var appWidth = 0;\n    var topValue = 1;\n    var isDateRange = currentDates[0].getTime() <= eStart.getTime() && addDays(currentDates.slice(-1)[0], 1).getTime() >= eStart.getTime();\n\n    if (eStart <= eEnd && isDateRange && this.isWorkDayAvailable(resource, eStart)) {\n      var isAlreadyRendered = [];\n\n      if (this.renderedAllDayEvents[parseInt(resource.toString(), 10)]) {\n        isAlreadyRendered = this.renderedAllDayEvents[parseInt(resource.toString(), 10)].filter(function (event) {\n          return event.Guid === eventObj.Guid;\n        });\n\n        if (this.parent.activeViewOptions.group.byDate) {\n          isAlreadyRendered = isAlreadyRendered.filter(function (event) {\n            return event[_this.parent.eventFields.startTime] >= currentDates[parseInt(dayIndex.toString(), 10)] && event[_this.parent.eventFields.endTime] <= addDays(new Date(+currentDates[parseInt(dayIndex.toString(), 10)]), 1);\n          });\n        }\n      }\n\n      if (isAlreadyRendered.length === 0) {\n        var allDayDifference_1 = record.data.count;\n        var allDayIndex_1 = this.getOverlapIndex(record, dayIndex, true, resource);\n        record.Index = allDayIndex_1;\n        this.allDayLevel = this.allDayLevel < allDayIndex_1 ? allDayIndex_1 : this.allDayLevel;\n        var widthAdjustment = record.data.isRight ? 0 : this.parent.currentView === 'Day' ? 4 : 7;\n\n        if (allDayDifference_1 >= 0) {\n          appWidth = allDayDifference_1 * 100 - widthAdjustment;\n        }\n\n        if (isNullOrUndefined(this.renderedAllDayEvents[parseInt(resource.toString(), 10)])) {\n          this.renderedAllDayEvents[parseInt(resource.toString(), 10)] = [];\n        }\n\n        this.renderedAllDayEvents[parseInt(resource.toString(), 10)].push(extend({}, record, null, true));\n        var allDayRow_1 = [].slice.call(this.element.querySelector('.' + ALLDAY_ROW_CLASS).children);\n        var wIndex_1 = this.getDayIndex(dayIndex, resource, dayCount);\n        var eventWrapper_1 = this.element.querySelector('.' + ALLDAY_APPOINTMENT_WRAPPER_CLASS + ':nth-child(' + (wIndex_1 + 1) + ')');\n        var appointmentElement_1;\n\n        if (inline) {\n          appointmentElement_1 = this.parent.inlineModule.createInlineAppointmentElement(eventObj);\n        } else {\n          appointmentElement_1 = this.createAppointmentElement(eventObj, true, record.data, resource);\n        }\n\n        addClass([appointmentElement_1], ALLDAY_APPOINTMENT_CLASS);\n        var eventData = extend({}, record.data, null, true);\n        eventObj.data = eventData;\n        var args = {\n          data: eventObj,\n          element: appointmentElement_1,\n          cancel: false\n        };\n        this.parent.trigger(eventRendered, args, function (eventArgs) {\n          if (!eventArgs.cancel) {\n            eventWrapper_1.appendChild(appointmentElement_1);\n            var appHeight = appointmentElement_1.offsetHeight;\n            topValue += (allDayIndex_1 === 0 ? cellTop : cellTop + allDayIndex_1 * appHeight) + 1;\n            setStyleAttribute(appointmentElement_1, {\n              'width': appWidth + '%',\n              'top': formatUnit(topValue)\n            });\n\n            if (allDayIndex_1 > 1) {\n              _this.moreEvents.push(appointmentElement_1);\n\n              for (var count = 0, length_3 = allDayDifference_1; count < length_3; count++) {\n                _this.createMoreIndicator(allDayRow_1, count, wIndex_1);\n              }\n            }\n\n            allDayRowCell.setAttribute('data-count', _this.allDayLevel.toString());\n            var allDayRowHeight = (!_this.parent.uiStateValues.expand && _this.allDayLevel > 2 ? 3 * appHeight : (_this.allDayLevel + 1) * appHeight) + 4;\n\n            _this.setAllDayRowHeight(allDayRowHeight);\n\n            _this.addOrRemoveClass();\n\n            _this.wireAppointmentEvents(appointmentElement_1, eventObj);\n          }\n        });\n      }\n    }\n  };\n\n  VerticalEvent.prototype.renderNormalEvents = function (eventObj, dayIndex, resource, dayCount, inline) {\n    var record = this.isSpannedEvent(eventObj, dayIndex, resource);\n    var eStart = record[this.fields.startTime];\n    var eEnd = record[this.fields.endTime];\n    var appWidth = '0%';\n    var appLeft = '0%';\n    var topValue = 0;\n    var currentDate = resetTime(new Date(this.dateRender[parseInt(resource.toString(), 10)][parseInt(dayIndex.toString(), 10)].getTime()));\n    var schedule = getStartEndHours(currentDate, this.startHour, this.endHour);\n    var isValidEvent = this.isValidEvent(eventObj, eStart, eEnd, schedule);\n\n    if (eStart.getTime() < this.parent.minDate.getTime() || eEnd.getTime() > this.parent.maxDate.getTime()) {\n      return;\n    }\n\n    if (eStart <= eEnd && isValidEvent && this.isWorkDayAvailable(resource, eStart)) {\n      var appHeight = this.getHeight(eStart, eEnd);\n\n      if (eStart.getTime() > schedule.startHour.getTime()) {\n        topValue = this.getTopValue(eStart, dayIndex, resource);\n      }\n\n      var appIndex = this.getOverlapIndex(record, dayIndex, false, resource);\n      record.Index = appIndex;\n      this.overlapList.push(record);\n\n      if (this.overlapList.length > 1) {\n        if (isNullOrUndefined(this.overlapEvents[parseInt(appIndex.toString(), 10)])) {\n          this.overlapEvents[parseInt(appIndex.toString(), 10)] = [];\n        }\n\n        this.overlapEvents[parseInt(appIndex.toString(), 10)].push(record);\n      } else {\n        this.overlapEvents = [];\n        this.overlapEvents.push([record]);\n      }\n\n      appWidth = this.getEventWidth();\n      var argsData = {\n        index: appIndex,\n        left: appLeft,\n        width: appWidth,\n        day: dayCount,\n        dayIndex: dayIndex,\n        record: record,\n        resource: resource\n      };\n      var tempData = this.adjustOverlapElements(argsData);\n      appWidth = tempData.appWidth;\n\n      if (isNullOrUndefined(this.renderedEvents[parseInt(resource.toString(), 10)])) {\n        this.renderedEvents[parseInt(resource.toString(), 10)] = [];\n      }\n\n      this.renderedEvents[parseInt(resource.toString(), 10)].push(extend({}, record, null, true));\n      var appointmentElement = void 0;\n\n      if (inline) {\n        appointmentElement = this.parent.inlineModule.createInlineAppointmentElement(eventObj);\n      } else {\n        appointmentElement = this.createAppointmentElement(eventObj, false, record.isSpanned, resource);\n      }\n\n      setStyleAttribute(appointmentElement, {\n        'width': this.parent.eventSettings.enableMaxHeight ? '100%' : tempData.appWidth,\n        'height': appHeight + 'px',\n        'top': topValue + 'px'\n      });\n      var iconHeight = appointmentElement.querySelectorAll('.' + EVENT_INDICATOR_CLASS).length * 15;\n      var maxHeight = appHeight - 40 - iconHeight;\n      var subjectElement = appointmentElement.querySelector('.' + SUBJECT_CLASS);\n\n      if (!this.parent.isAdaptive && subjectElement) {\n        subjectElement.style.maxHeight = formatUnit(maxHeight);\n      }\n\n      var index = this.getDayIndex(dayIndex, resource, dayCount);\n      var eventData = {};\n      eventData[this.fields.startTime] = eventObj[this.fields.startTime];\n      eventData[this.fields.endTime] = eventObj[this.fields.endTime];\n      record.data = eventData;\n      this.appendEvent(record, appointmentElement, index, tempData.appLeft);\n      this.wireAppointmentEvents(appointmentElement, eventObj);\n    }\n  };\n\n  VerticalEvent.prototype.getEventWidth = function () {\n    var width = this.parent.currentView === 'Day' ? 97 : 94;\n    var tempWidth = (width - this.overlapEvents.length) / this.overlapEvents.length;\n    return (tempWidth < 0 ? 0 : tempWidth) + '%';\n  };\n\n  VerticalEvent.prototype.getEventLeft = function (appWidth, index) {\n    var tempLeft = (parseFloat(appWidth) + 1) * index;\n    return (tempLeft > 99 ? 99 : tempLeft) + '%';\n  };\n\n  VerticalEvent.prototype.getTopValue = function (date, day, resource) {\n    var startEndHours = getStartEndHours(resetTime(this.dateRender[parseInt(resource.toString(), 10)][parseInt(day.toString(), 10)]), this.startHour, this.endHour);\n    var startHour = startEndHours.startHour;\n    var diffInMinutes = (date.getHours() - startHour.getHours()) * 60 + (date.getMinutes() - startHour.getMinutes());\n    return this.parent.activeViewOptions.timeScale.enable ? diffInMinutes * this.cellHeight * this.slotCount / this.interval : 0;\n  };\n\n  VerticalEvent.prototype.getOverlapIndex = function (record, day, isAllDay, resource) {\n    var _this = this;\n\n    var fieldMapping = this.parent.eventFields;\n    var eventsList = [];\n    var appIndex = -1;\n    this.overlapEvents = [];\n\n    if (isAllDay) {\n      if (!isNullOrUndefined(this.renderedAllDayEvents[parseInt(resource.toString(), 10)])) {\n        var date_1 = resetTime(new Date(this.dateRender[parseInt(resource.toString(), 10)][parseInt(day.toString(), 10)].getTime()));\n        eventsList = this.renderedAllDayEvents[parseInt(resource.toString(), 10)].filter(function (app) {\n          return resetTime(app[fieldMapping.startTime]).getTime() <= date_1.getTime() && resetTime(app[fieldMapping.endTime]).getTime() >= date_1.getTime();\n        });\n\n        if (this.parent.activeViewOptions.group.resources.length > 0) {\n          eventsList = this.filterEventsByResource(this.resources[parseInt(resource.toString(), 10)], eventsList);\n        }\n      }\n    } else {\n      var appointmentList_1 = !isNullOrUndefined(this.renderedEvents[parseInt(resource.toString(), 10)]) ? this.renderedEvents[parseInt(resource.toString(), 10)] : [];\n      var appointment_1 = [];\n      var recordStart_1 = record[fieldMapping.startTime];\n      var recordEnd_1 = record[fieldMapping.endTime];\n      this.overlapList = appointmentList_1.filter(function (data) {\n        return data[fieldMapping.endTime] > recordStart_1 && data[fieldMapping.startTime] <= recordEnd_1 || data[fieldMapping.startTime] >= recordEnd_1 && data[fieldMapping.endTime] <= recordStart_1 || data[fieldMapping.endTime].getTime() === data[fieldMapping.startTime].getTime() && data[fieldMapping.startTime].getTime() === recordStart_1.getTime() && data[fieldMapping.endTime] < recordEnd_1;\n      });\n\n      if (this.parent.activeViewOptions.group.resources.length > 0) {\n        this.overlapList = this.filterEventsByResource(this.resources[parseInt(resource.toString(), 10)], this.overlapList);\n      }\n\n      this.overlapList.forEach(function (obj) {\n        var filterList = appointmentList_1.filter(function (data) {\n          return data[fieldMapping.endTime] > obj[fieldMapping.startTime] && data[fieldMapping.startTime] <= obj[fieldMapping.endTime];\n        });\n\n        if (_this.parent.activeViewOptions.group.resources.length > 0) {\n          filterList = _this.filterEventsByResource(_this.resources[parseInt(resource.toString(), 10)], filterList);\n        }\n\n        var collection = filterList.filter(function (val) {\n          return _this.overlapList.indexOf(val) === -1;\n        });\n\n        if (collection.length > 0) {\n          appointment_1 = appointment_1.concat(collection);\n        }\n      });\n\n      for (var i = 0; i < appointment_1.length - 1; i++) {\n        for (var j = i + 1; j < appointment_1.length; j++) {\n          if (appointment_1[parseInt(i.toString(), 10)][fieldMapping.id] === appointment_1[parseInt(j.toString(), 10)][fieldMapping.id]) {\n            appointment_1.splice(j, 1);\n            j--;\n          }\n        }\n      }\n\n      this.overlapList = this.overlapList.concat(appointment_1);\n      eventsList = this.overlapList;\n\n      for (var _i = 0, eventsList_1 = eventsList; _i < eventsList_1.length; _i++) {\n        var event_4 = eventsList_1[_i];\n        var record_1 = event_4;\n        var index = record_1.Index;\n\n        if (isNullOrUndefined(this.overlapEvents[parseInt(index.toString(), 10)])) {\n          this.overlapEvents[parseInt(index.toString(), 10)] = [event_4];\n        } else {\n          this.overlapEvents[parseInt(index.toString(), 10)].push(event_4);\n        }\n      }\n    }\n\n    if (!isAllDay) {\n      eventsList = eventsList.filter(function (obj) {\n        return obj[fieldMapping.startTime] === record[fieldMapping.startTime] && obj[fieldMapping.endTime] > record[fieldMapping.endTime] || obj[fieldMapping.endTime] > record[fieldMapping.startTime] && obj[fieldMapping.startTime] < record[fieldMapping.endTime] || obj[fieldMapping.endTime] === record[fieldMapping.startTime] && obj[fieldMapping.startTime] === record[fieldMapping.endTime] || obj[fieldMapping.startTime].getTime() === record[fieldMapping.startTime].getTime() && obj[fieldMapping.endTime].getTime() === record[fieldMapping.endTime].getTime() || obj[fieldMapping.startTime].getTime() === record[fieldMapping.startTime].getTime() && obj[fieldMapping.endTime].getTime() < record[fieldMapping.endTime].getTime() || obj[fieldMapping.endTime].getTime() > record[fieldMapping.endTime].getTime();\n      });\n    }\n\n    if (eventsList.length > 0) {\n      var appLevel = eventsList.map(function (obj) {\n        return obj.Index;\n      });\n      appIndex = appLevel.length > 0 ? this.getSmallestMissingNumber(appLevel) : 0;\n    }\n\n    return appIndex === -1 ? 0 : appIndex;\n  };\n\n  VerticalEvent.prototype.adjustOverlapElements = function (args) {\n    var data = {\n      appWidth: args.width,\n      appLeft: args.left\n    };\n\n    for (var i = 0, length1 = this.overlapEvents.length; i < length1; i++) {\n      if (!isNullOrUndefined(this.overlapEvents[parseInt(i.toString(), 10)])) {\n        for (var j = 0, length2 = this.overlapEvents[parseInt(i.toString(), 10)].length; j < length2; j++) {\n          var dayCount = this.getDayIndex(args.dayIndex, args.resource, args.day);\n          var element = this.element.querySelector('#e-appointment-wrapper-' + dayCount);\n\n          if (element && element.childElementCount > 0) {\n            var eleGuid = this.overlapEvents[parseInt(i.toString(), 10)][parseInt(j.toString(), 10)].Guid;\n\n            if (element.querySelectorAll('div[data-guid=\"' + eleGuid + '\"]').length > 0 && eleGuid !== args.record.Guid) {\n              var apps = element.querySelector('div[data-guid=\"' + eleGuid + '\"]');\n\n              if (parseFloat(args.width) <= parseFloat(apps.style.width)) {\n                if (this.parent.enableRtl) {\n                  apps.style.right = this.getEventLeft(args.width, i);\n                } else {\n                  apps.style.left = this.getEventLeft(args.width, i);\n                }\n\n                apps.style.width = parseFloat(args.width) + '%';\n                data.appWidth = apps.style.width;\n              } else {\n                data.appWidth = apps.style.width;\n              }\n            } else {\n              var appWidth = args.width;\n\n              if (isNullOrUndefined(this.overlapEvents[i - 1])) {\n                appWidth = this.getEventWidth();\n              }\n\n              data.appWidth = appWidth;\n              data.appLeft = this.getEventLeft(appWidth, args.index);\n            }\n          }\n        }\n      }\n    }\n\n    return data;\n  };\n\n  VerticalEvent.prototype.setAllDayRowHeight = function (height) {\n    var dateHeader = this.parent.element.querySelector('.' + DATE_HEADER_WRAP_CLASS);\n\n    if (this.parent.height === 'auto' || !this.parent.enableAllDayScroll) {\n      addClass([dateHeader], ALLDAY_APPOINTMENT_AUTO);\n    }\n\n    var allDayRow = this.parent.element.querySelector('.' + ALLDAY_ROW_CLASS);\n    allDayRow.style.height = '';\n\n    if (this.parent.uiStateValues.expand && this.parent.height !== 'auto' && this.parent.enableAllDayScroll) {\n      allDayRow.style.height = height / 12 + 'em';\n      this.parent.eventBase.allDayExpandScroll(dateHeader);\n    } else {\n      dateHeader.scrollTop = 0;\n\n      for (var _i = 0, _a = this.allDayElement; _i < _a.length; _i++) {\n        var element = _a[_i];\n        element.style.height = height / 12 + 'em';\n      }\n\n      removeClass([dateHeader], ALLDAY_APPOINTMENT_SCROLL);\n    }\n\n    this.animation.animate(this.allDayElement[0]);\n  };\n\n  VerticalEvent.prototype.addOrRemoveClass = function () {\n    var _this = this;\n\n    this.moreEvents.filter(function (element) {\n      if (!_this.parent.uiStateValues.expand && _this.allDayLevel > 2) {\n        addClass([element], EVENT_COUNT_CLASS);\n        element.setAttribute('tabindex', '-1');\n      } else {\n        removeClass([element], EVENT_COUNT_CLASS);\n        element.setAttribute('tabindex', '0');\n      }\n    });\n    var moreEventCount = this.element.querySelector('.' + ALLDAY_APPOINTMENT_SECTION_CLASS);\n\n    if (this.parent.uiStateValues.expand) {\n      removeClass([moreEventCount], APPOINTMENT_ROW_EXPAND_CLASS);\n      addClass([moreEventCount], APPOINTMENT_ROW_COLLAPSE_CLASS);\n    } else {\n      removeClass([moreEventCount], APPOINTMENT_ROW_COLLAPSE_CLASS);\n      addClass([moreEventCount], APPOINTMENT_ROW_EXPAND_CLASS);\n    }\n\n    if (this.allDayLevel > 2) {\n      removeClass([moreEventCount], DISABLE_CLASS);\n    } else {\n      addClass([moreEventCount], DISABLE_CLASS);\n    }\n\n    var countCell = [].slice.call(this.element.querySelectorAll('.' + ROW_COUNT_WRAPPER_CLASS));\n    countCell.forEach(function (element) {\n      if (!_this.parent.uiStateValues.expand && _this.allDayLevel > 2) {\n        removeClass([element], DISABLE_CLASS);\n      } else {\n        addClass([element], DISABLE_CLASS);\n      }\n    });\n  };\n\n  VerticalEvent.prototype.getEventHeight = function () {\n    var eventElement = createElement('div', {\n      className: APPOINTMENT_CLASS,\n      styles: 'visibility:hidden'\n    });\n    var eventWrapper = this.element.querySelector('.' + ALLDAY_APPOINTMENT_WRAPPER_CLASS + ':first-child');\n    eventWrapper.appendChild(eventElement);\n    var height = eventElement.offsetHeight;\n    remove(eventElement);\n    return height;\n  };\n\n  VerticalEvent.prototype.rowExpandCollapse = function () {\n    var target = this.element.querySelector('.' + ALLDAY_APPOINTMENT_SECTION_CLASS);\n    this.parent.uiStateValues.expand = target.classList.contains(APPOINTMENT_ROW_EXPAND_CLASS);\n    var rowHeight;\n\n    if (this.parent.uiStateValues.expand) {\n      target.setAttribute('title', this.parent.localeObj.getConstant('collapseAllDaySection'));\n      target.setAttribute('aria-label', 'Collapse section');\n      rowHeight = (this.allDayLevel + 1) * this.getEventHeight() + 4;\n    } else {\n      target.setAttribute('title', this.parent.localeObj.getConstant('expandAllDaySection'));\n      target.setAttribute('aria-label', 'Expand section');\n      rowHeight = 3 * this.getEventHeight() + 4;\n    }\n\n    this.setAllDayRowHeight(rowHeight);\n    this.addOrRemoveClass();\n    this.animation.animate(target);\n  };\n\n  VerticalEvent.prototype.animationUiUpdate = function () {\n    this.parent.notify(contentReady, {});\n  };\n\n  VerticalEvent.prototype.destroy = function () {\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeEventListener();\n    this.allDayElement = null;\n    this.renderedAllDayEvents = null;\n    this.renderedEvents = null;\n    this.slotCount = null;\n    this.interval = null;\n    this.startHour = null;\n    this.endHour = null;\n    this.element = null;\n    this.fields = null;\n    this.animation = null;\n\n    _super.prototype.destroy.call(this);\n  };\n\n  return VerticalEvent;\n}(EventBase);\n\nvar __extends$2 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nvar EVENT_GAP = 0;\n/**\n * Month view events render\n */\n\nvar MonthEvent =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$2(MonthEvent, _super);\n\n  function MonthEvent(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.renderedEvents = [];\n    _this.monthHeaderHeight = 0;\n    _this.moreIndicatorHeight = 19;\n    _this.renderType = 'day';\n    _this.element = _this.parent.activeView.getPanel();\n    _this.fields = _this.parent.eventFields;\n    _this.maxHeight = _this.parent.eventSettings.enableMaxHeight && !_this.parent.eventSettings.enableIndicator && !_this.parent.rowAutoHeight;\n    _this.withIndicator = _this.parent.eventSettings.enableMaxHeight && _this.parent.eventSettings.enableIndicator && !_this.parent.rowAutoHeight;\n    _this.maxOrIndicator = _this.maxHeight || _this.withIndicator;\n    _this.moreIndicatorHeight = _this.parent.rowAutoHeight && _this.parent.eventSettings.ignoreWhitespace ? 0 : _this.moreIndicatorHeight;\n\n    _this.addEventListener();\n\n    return _this;\n  }\n\n  MonthEvent.prototype.removeEventWrapper = function (appElement) {\n    if (appElement.length > 0) {\n      appElement = this.parent.currentView === 'Month' || !this.parent.activeView.isTimelineView() && !this.parent.activeViewOptions.timeScale.enable ? appElement : [appElement[0]];\n\n      for (var _i = 0, appElement_1 = appElement; _i < appElement_1.length; _i++) {\n        var wrap = appElement_1[_i];\n\n        if (wrap.parentElement && wrap.parentElement.parentNode) {\n          remove(wrap.parentElement);\n        }\n      }\n    }\n  };\n\n  MonthEvent.prototype.renderAppointments = function () {\n    if (this.parent.dragAndDropModule) {\n      this.parent.dragAndDropModule.setDragArea();\n    }\n\n    this.isResourceEventTemplate = this.parent.isSpecificResourceEvents();\n    var conWrap = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n\n    if (this.parent.rowAutoHeight) {\n      this.parent.uiStateValues.top = conWrap.scrollTop;\n      this.parent.uiStateValues.left = conWrap.scrollLeft;\n    }\n\n    var appointmentWrapper = [].slice.call(this.element.querySelectorAll('.' + APPOINTMENT_WRAPPER_CLASS));\n\n    if (this.parent.crudModule && this.parent.crudModule.crudObj.isCrudAction) {\n      for (var i = 0, len = this.parent.crudModule.crudObj.sourceEvent.length; i < len; i++) {\n        var appElement = [].slice.call(this.element.querySelectorAll('.e-appointment-wrapper ' + '[data-group-index=\"' + this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex + '\"]'));\n        this.removeEventWrapper(appElement);\n\n        if (this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)] && this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex !== this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex) {\n          var ele = [].slice.call(this.element.querySelectorAll('.e-appointment-wrapper ' + '[data-group-index=\"' + this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex + '\"]'));\n          this.removeEventWrapper(ele);\n        }\n      }\n    } else {\n      for (var _i = 0, appointmentWrapper_1 = appointmentWrapper; _i < appointmentWrapper_1.length; _i++) {\n        var wrap = appointmentWrapper_1[_i];\n        remove(wrap);\n      }\n    }\n\n    this.removeHeightProperty(CONTENT_TABLE_CLASS);\n\n    if (!this.element.querySelector('.' + WORK_CELLS_CLASS)) {\n      return;\n    }\n\n    if (this.parent.currentView === 'Month') {\n      var wrapper = createElement('div', {\n        className: APPOINTMENT_WRAPPER_CLASS\n      });\n      var cellTd = this.parent.element.querySelector('.' + WORK_CELLS_CLASS);\n      cellTd.appendChild(wrapper);\n      this.monthHeaderHeight = wrapper.offsetTop - cellTd.offsetTop;\n      cellTd.removeChild(wrapper);\n    }\n\n    this.eventHeight = getElementHeightFromClass(this.element, APPOINTMENT_CLASS);\n    var scrollTop = conWrap.scrollTop;\n\n    if (this.parent.rowAutoHeight && this.parent.virtualScrollModule && !this.parent.virtualScrollModule.isHorizontalScroll && !isNullOrUndefined(this.parent.currentAction)) {\n      conWrap.scrollTop = conWrap.scrollTop - 1;\n    }\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.renderResourceEvents();\n\n      if (this.parent.virtualScrollModule) {\n        this.parent.virtualScrollModule.updateFocusedWorkCell();\n      }\n    } else {\n      this.renderEventsHandler(this.parent.activeView.renderDates, this.parent.activeViewOptions.workDays);\n    }\n\n    if (this.parent.rowAutoHeight) {\n      this.updateBlockElements();\n      var data = {\n        cssProperties: this.parent.getCssProperties(),\n        module: this.parent.getModuleName(),\n        isPreventScrollUpdate: true,\n        scrollPosition: {\n          left: this.parent.uiStateValues.left,\n          top: this.parent.uiStateValues.top\n        }\n      };\n\n      if (this.parent.virtualScrollModule && !this.parent.virtualScrollModule.isHorizontalScroll) {\n        if (this.parent.currentAction) {\n          conWrap.scrollTop = scrollTop;\n          this.parent.currentAction = null;\n        } else {\n          this.parent.virtualScrollModule.updateVirtualScrollHeight();\n        }\n      }\n\n      if (!this.parent.enablePersistence) {\n        this.parent.notify(contentReady, {});\n      }\n\n      this.parent.notify(scrollUiUpdate, data);\n\n      if (this.parent.currentView === 'Month' && this.parent.showWeekNumber) {\n        var totalCells_1 = [].slice.call(this.parent.element.querySelectorAll('.e-content-wrap table tr td:first-child'));\n        var weekNumberCells = [].slice.call(this.parent.element.querySelectorAll('.' + WEEK_NUMBER_CLASS));\n        weekNumberCells.forEach(function (cell, i) {\n          var height = totalCells_1[parseInt(i.toString(), 10)].offsetHeight;\n          setStyleAttribute(cell, {\n            'height': height + 'px'\n          });\n        });\n        this.parent.element.querySelector('.' + WEEK_NUMBER_WRAPPER_CLASS).scrollTop = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS).scrollTop;\n      }\n    }\n\n    this.parent.renderTemplates();\n  };\n\n  MonthEvent.prototype.renderEventsHandler = function (dateRender, workDays, resData) {\n    this.renderedEvents = [];\n    var eventsList;\n    var blockList;\n    var resIndex = 0;\n\n    if (resData) {\n      resIndex = resData.groupIndex;\n      this.cssClass = resData.cssClass;\n      this.groupOrder = resData.groupOrder;\n      eventsList = this.parent.eventBase.filterEventsByResource(resData, this.parent.eventsProcessed);\n      blockList = this.parent.eventBase.filterEventsByResource(resData, this.parent.blockProcessed);\n      this.workCells = [].slice.call(this.element.querySelectorAll('.' + WORK_CELLS_CLASS + '[data-group-index=\"' + resIndex + '\"]'));\n    } else {\n      eventsList = this.parent.eventsProcessed;\n      blockList = this.parent.blockProcessed;\n      this.workCells = [].slice.call(this.element.querySelectorAll('.' + WORK_CELLS_CLASS));\n    }\n\n    this.sortByDateTime(eventsList);\n    this.sortByDateTime(blockList);\n\n    if (this.parent.currentView === 'Month' && this.parent.rowAutoHeight && this.parent.activeViewOptions.group.resources.length === 0) {\n      var totalCells = [].slice.call(this.parent.element.querySelectorAll('.e-content-wrap table tr td:first-child'));\n      var height_1 = this.parent.element.querySelector('.' + CONTENT_TABLE_CLASS).clientHeight / totalCells.length;\n      totalCells.forEach(function (cell) {\n        setStyleAttribute(cell, {\n          'height': height_1 + 'px'\n        });\n      });\n    }\n\n    var cellDetail = this.workCells[this.parent.activeView.isTimelineView() ? 0 : this.workCells.length - 1].getBoundingClientRect();\n    this.cellWidth = cellDetail.width;\n    this.cellHeight = cellDetail.height;\n    this.dateRender = dateRender;\n    var filteredDates = this.getRenderedDates(dateRender);\n    this.getSlotDates(workDays || this.parent.activeViewOptions.workDays);\n    this.processBlockEvents(blockList, resIndex, resData);\n    var events = [];\n\n    for (var _i = 0, eventsList_1 = eventsList; _i < eventsList_1.length; _i++) {\n      var event_1 = eventsList_1[_i];\n\n      if (this.parent.resourceBase && !resData) {\n        this.cssClass = this.parent.resourceBase.getCssClass(event_1);\n      }\n\n      events = events.concat(this.splitEvent(event_1, filteredDates || this.dateRender));\n    }\n\n    for (var level = 0; level < this.slots.length; level++) {\n      this.renderedEvents = [];\n      var slot = this.slots[parseInt(level.toString(), 10)];\n      var endDate = addDays(new Date(slot[slot.length - 1]), 1);\n      var spannedEvents = this.filterEvents(new Date(slot[0]), endDate, events);\n\n      for (var _a = 0, spannedEvents_1 = spannedEvents; _a < spannedEvents_1.length; _a++) {\n        var event_2 = spannedEvents_1[_a];\n\n        if (this.maxHeight) {\n          var sDate = this.parent.currentView === 'Month' ? event_2[this.fields.startTime] : this.getStartTime(event_2, event_2.data);\n\n          if (this.getIndex(sDate) > 0) {\n            continue;\n          }\n        }\n\n        this.updateIndicatorIcon(event_2);\n        this.renderEvents(event_2, resIndex, eventsList);\n      }\n    }\n\n    this.cssClass = null;\n    this.groupOrder = null;\n  };\n\n  MonthEvent.prototype.processBlockEvents = function (blockEvents, resIndex, resData) {\n    for (var _i = 0, blockEvents_1 = blockEvents; _i < blockEvents_1.length; _i++) {\n      var event_3 = blockEvents_1[_i];\n\n      if (this.parent.resourceBase && !resData) {\n        this.cssClass = this.parent.resourceBase.getCssClass(event_3);\n      }\n\n      var blockSpannedList = [];\n\n      if (this.renderType === 'day' && !event_3[this.fields.isAllDay]) {\n        var temp = extend({}, event_3, null, true);\n        var isSameDate = this.isSameDate(temp[this.fields.startTime], temp[this.fields.endTime]);\n        temp.isBlockIcon = isSameDate;\n\n        if (!isSameDate && getDateInMs(temp[this.fields.startTime]) > 0) {\n          var e = extend({}, event_3, null, true);\n          e[this.fields.endTime] = addDays(resetTime(new Date(event_3[this.fields.startTime] + '')), 1);\n          e.isBlockIcon = true;\n          temp[this.fields.startTime] = e[this.fields.endTime];\n          blockSpannedList.push(e);\n        }\n\n        isSameDate = this.isSameDate(temp[this.fields.startTime], temp[this.fields.endTime]);\n\n        if (!isSameDate && getDateInMs(temp[this.fields.endTime]) > 0) {\n          var e = extend({}, event_3, null, true);\n          e[this.fields.startTime] = resetTime(new Date(event_3[this.fields.endTime] + ''));\n          e.isBlockIcon = true;\n          blockSpannedList.push(e);\n          temp[this.fields.endTime] = e[this.fields.startTime];\n        }\n\n        blockSpannedList.push(temp);\n      } else {\n        blockSpannedList.push(event_3);\n      }\n\n      for (var _a = 0, blockSpannedList_1 = blockSpannedList; _a < blockSpannedList_1.length; _a++) {\n        var blockEvent = blockSpannedList_1[_a];\n        var spannedEvents = this.splitEvent(blockEvent, this.dateRender);\n\n        for (var _b = 0, spannedEvents_2 = spannedEvents; _b < spannedEvents_2.length; _b++) {\n          var event_4 = spannedEvents_2[_b];\n          this.renderBlockEvents(event_4, resIndex, !!blockEvent.isBlockIcon);\n        }\n      }\n    }\n  };\n\n  MonthEvent.prototype.isSameDate = function (start, end) {\n    return new Date(+start).setHours(0, 0, 0, 0) === new Date(+end).setHours(0, 0, 0, 0);\n  };\n\n  MonthEvent.prototype.renderBlockEvents = function (event, resIndex, isIcon) {\n    var eventData = event.data;\n    var startTime = this.getStartTime(event, eventData);\n    var endTime = this.getEndTime(event, eventData);\n    var day = this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(startTime.getTime())));\n\n    if (day < 0 || startTime > endTime) {\n      return;\n    }\n\n    var cellTd = this.getCellTd(day);\n    var position = this.getPosition(startTime, endTime, event[this.fields.isAllDay], day);\n\n    if (!isIcon) {\n      var diffInDays = eventData.count;\n      var appWidth = this.getEventWidth(startTime, endTime, event[this.fields.isAllDay], diffInDays);\n      appWidth = appWidth <= 0 ? this.cellWidth : appWidth;\n      var appLeft = this.parent.enableRtl ? 0 : position;\n      var appRight = this.parent.enableRtl ? position : 0;\n      var appHeight = this.cellHeight - this.monthHeaderHeight;\n      var appTop = this.getRowTop(resIndex);\n      var blockElement = this.createBlockAppointmentElement(event, resIndex, this.isResourceEventTemplate);\n      setStyleAttribute(blockElement, {\n        'width': appWidth + 'px',\n        'height': appHeight + 'px',\n        'left': appLeft + 'px',\n        'right': appRight + 'px',\n        'top': appTop + 'px'\n      });\n      this.renderEventElement(event, blockElement, cellTd);\n    } else {\n      this.renderBlockIndicator(cellTd, position, resIndex);\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  MonthEvent.prototype.renderBlockIndicator = function (cellTd, position, resIndex) {\n    var blockIndicator = createElement('div', {\n      className: 'e-icons ' + BLOCK_INDICATOR_CLASS\n    });\n\n    if (isNullOrUndefined(cellTd.querySelector('.' + BLOCK_INDICATOR_CLASS))) {\n      cellTd.appendChild(blockIndicator);\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  MonthEvent.prototype.getStartTime = function (event, eventData) {\n    return event[this.fields.startTime];\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  MonthEvent.prototype.getEndTime = function (event, eventData) {\n    return event[this.fields.endTime];\n  };\n\n  MonthEvent.prototype.getCellTd = function (day) {\n    return this.workCells[parseInt(day.toString(), 10)];\n  };\n\n  MonthEvent.prototype.getEventWidth = function (startDate, endDate, isAllDay, count) {\n    return count * this.cellWidth - 1;\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  MonthEvent.prototype.getPosition = function (startTime, endTime, isAllDay, day) {\n    return 0;\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  MonthEvent.prototype.getRowTop = function (resIndex) {\n    return 0;\n  };\n\n  MonthEvent.prototype.updateIndicatorIcon = function (event) {\n    if (this.parent.currentView.indexOf('Timeline') === -1 || this.parent.currentView === 'TimelineMonth' || event[this.fields.isAllDay]) {\n      return;\n    }\n\n    var cloneData = event.data;\n    var start = this.parent.activeView.getStartHour();\n    var end = this.parent.activeView.getEndHour();\n    var startHour = getStartEndHours(event[this.fields.startTime], start, end);\n    var endHour = getStartEndHours(event[this.fields.endTime], start, end);\n    var actualStartTime = cloneData[this.fields.startTime];\n    var actualEndTime = cloneData[this.fields.endTime];\n    cloneData.isLeft = cloneData.isLeft || actualStartTime.getTime() < startHour.startHour.getTime();\n    cloneData.isRight = cloneData.isRight || actualEndTime.getTime() > endHour.endHour.getTime();\n\n    if (resetTime(actualStartTime).getTime() !== resetTime(actualEndTime).getTime()) {\n      var actualStartHour = startHour.startHour;\n      var actualEndHour = endHour.endHour;\n      var startTime = new Date(resetTime(actualStartTime));\n      startTime.setHours(actualEndHour.getHours(), actualEndHour.getMinutes(), actualEndHour.getSeconds());\n      cloneData.isLeft = cloneData.isLeft || actualStartTime.getTime() >= (actualStartHour.getDate() === startHour.endHour.getDate() ? startTime.getTime() : addDays(startTime, 1).getTime());\n\n      if (actualEndTime.getTime() !== resetTime(actualEndTime).getTime()) {\n        var endTime = new Date(resetTime(actualEndTime));\n        cloneData.isRight = cloneData.isRight || actualEndTime.getTime() <= endTime.setHours(actualStartHour.getHours(), actualStartHour.getMinutes(), actualStartHour.getSeconds());\n      }\n    }\n  };\n\n  MonthEvent.prototype.renderResourceEvents = function () {\n    var resources = this.parent.uiStateValues.isGroupAdaptive ? [this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex]] : this.parent.resourceBase.renderedResources;\n\n    if (this.parent.crudModule && this.parent.crudModule.crudObj.isCrudAction) {\n      for (var i = 0, len = this.parent.crudModule.crudObj.sourceEvent.length; i < len; i++) {\n        var sourceRes = this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)];\n        this.renderEventsHandler(sourceRes.renderDates, sourceRes.workDays, sourceRes);\n\n        if (this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex !== this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex) {\n          var target = this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)];\n          this.renderEventsHandler(target.renderDates, target.workDays, target);\n        }\n      }\n\n      this.parent.crudModule.crudObj.isCrudAction = false;\n    } else {\n      for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {\n        var slotData = resources_1[_i];\n        this.renderEventsHandler(slotData.renderDates, slotData.workDays, slotData);\n      }\n    }\n  };\n\n  MonthEvent.prototype.getSlotDates = function (workDays) {\n    this.slots = [];\n    var dates = this.dateRender.map(function (date) {\n      return +date;\n    });\n    var noOfDays = !this.parent.activeViewOptions.showWeekend || this.parent.activeViewOptions.group.byDate && this.parent.activeViewOptions.group.hideNonWorkingDays ? workDays.length : WEEK_LENGTH;\n\n    while (dates.length > 0) {\n      this.slots.push(dates.splice(0, noOfDays));\n    }\n  };\n\n  MonthEvent.prototype.createAppointmentElement = function (record, resIndex, isCloneElement) {\n    if (isCloneElement === void 0) {\n      isCloneElement = false;\n    }\n\n    var eventSubject = record[this.fields.subject] || this.parent.eventSettings.fields.subject.default || this.parent.localeObj.getConstant('addTitle');\n    var newRecord = extend({}, record, record.data, true);\n    var attrs = {\n      'data-id': 'Appointment_' + record[this.fields.id],\n      'role': 'button',\n      'tabindex': '0',\n      'aria-disabled': this.parent.eventBase.getReadonlyAttribute(record),\n      'aria-label': this.parent.getAnnouncementString(newRecord, eventSubject)\n    };\n\n    if (!isCloneElement) {\n      attrs['data-guid'] = record.Guid;\n    }\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      attrs['data-group-index'] = resIndex.toString();\n    }\n\n    var appointmentWrapper = createElement('div', {\n      className: APPOINTMENT_CLASS,\n      attrs: attrs\n    });\n\n    if (!isNullOrUndefined(this.cssClass)) {\n      addClass([appointmentWrapper], this.cssClass);\n    }\n\n    if (record[this.fields.isReadonly]) {\n      addClass([appointmentWrapper], 'e-read-only');\n    }\n\n    var appointmentDetails = createElement('div', {\n      className: APPOINTMENT_DETAILS\n    });\n    appointmentWrapper.appendChild(appointmentDetails);\n    var templateElement;\n    var eventData = record.data;\n    var eventObj = this.getEventData(record);\n\n    if (!isNullOrUndefined(this.parent.activeViewOptions.eventTemplate)) {\n      var scheduleId = this.parent.element.id + '_';\n      var viewName = this.parent.activeViewOptions.eventTemplateName;\n      var templateId = scheduleId + viewName + 'eventTemplate';\n      var eventTemplate = 'eventTemplate' + (this.isResourceEventTemplate ? '_' + resIndex : '');\n      templateElement = this.parent.getAppointmentTemplate()(eventObj, this.parent, eventTemplate, templateId, false);\n    } else {\n      var eventLocation = record[this.fields.location] || this.parent.eventSettings.fields.location.default || '';\n      var appointmentSubject = createElement('div', {\n        className: SUBJECT_CLASS\n      });\n      this.parent.sanitize(eventSubject + (eventLocation ? '; ' + eventLocation : ''), appointmentSubject);\n      var appointmentStartTime = createElement('div', {\n        className: APPOINTMENT_TIME + (this.parent.isAdaptive ? ' ' + DISABLE_CLASS : ''),\n        innerHTML: this.parent.getTimeString(eventData[this.fields.startTime])\n      });\n      var appointmentEndTime = createElement('div', {\n        className: APPOINTMENT_TIME + (this.parent.isAdaptive ? ' ' + DISABLE_CLASS : ''),\n        innerHTML: this.parent.getTimeString(eventData[this.fields.endTime])\n      });\n\n      if (this.parent.currentView === 'Month') {\n        if (record[this.fields.isAllDay]) {\n          templateElement = [appointmentSubject];\n          addClass([appointmentSubject], 'e-text-center');\n        } else if (eventData.count <= 1 && !eventData.isLeft && !eventData.isRight) {\n          templateElement = [appointmentStartTime, appointmentSubject];\n        } else {\n          templateElement = [];\n          addClass([appointmentSubject], 'e-text-center');\n\n          if (!eventData.isLeft) {\n            templateElement.push(appointmentStartTime);\n          }\n\n          templateElement.push(appointmentSubject);\n\n          if (!eventData.isRight) {\n            templateElement.push(appointmentEndTime);\n          }\n        }\n      } else {\n        var innerElement = void 0;\n\n        if (record[this.fields.isAllDay]) {\n          var allDayString = createElement('div', {\n            className: APPOINTMENT_TIME,\n            innerHTML: this.parent.localeObj.getConstant('allDay')\n          });\n          innerElement = [appointmentSubject, allDayString];\n        } else {\n          var timeString = this.parent.getTimeString(eventData[this.fields.startTime]) + ' - ' + this.parent.getTimeString(eventData[this.fields.endTime]);\n          var appTime = createElement('div', {\n            className: APPOINTMENT_TIME + (this.parent.isAdaptive ? ' ' + DISABLE_CLASS : ''),\n            innerHTML: timeString\n          });\n          var appLocation = createElement('div', {\n            className: LOCATION_CLASS\n          });\n          this.parent.sanitize(eventLocation, appLocation);\n          innerElement = [appointmentSubject, appTime, appLocation];\n        }\n\n        var wrap = createElement('div', {\n          className: 'e-inner-wrap'\n        });\n        append(innerElement, wrap);\n        templateElement = [wrap];\n      }\n    }\n\n    append(templateElement, appointmentDetails);\n    this.appendEventIcons(record, appointmentDetails);\n    this.renderResizeHandler(appointmentWrapper, record.data, record[this.fields.isReadonly]);\n    return appointmentWrapper;\n  };\n\n  MonthEvent.prototype.appendEventIcons = function (record, appointmentDetails) {\n    var eventData = record.data;\n\n    if (!isNullOrUndefined(record[this.fields.recurrenceRule]) || !isNullOrUndefined(record[this.fields.recurrenceID])) {\n      var iconClass = record[this.fields.id] === record[this.fields.recurrenceID] ? EVENT_RECURRENCE_ICON_CLASS : EVENT_RECURRENCE_EDIT_ICON_CLASS;\n      appointmentDetails.appendChild(createElement('div', {\n        className: ICON + ' ' + iconClass + (this.parent.isAdaptive ? ' ' + DISABLE_CLASS : '')\n      }));\n    }\n\n    if (eventData.isLeft) {\n      var iconLeft = createElement('div', {\n        className: EVENT_INDICATOR_CLASS + ' ' + ICON + ' ' + EVENT_ICON_LEFT_CLASS\n      });\n      prepend([iconLeft], appointmentDetails);\n    }\n\n    if (eventData.isRight) {\n      var iconRight = createElement('div', {\n        className: EVENT_INDICATOR_CLASS + ' ' + ICON + ' ' + EVENT_ICON_RIGHT_CLASS\n      });\n      append([iconRight], appointmentDetails);\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  MonthEvent.prototype.renderEvents = function (event, resIndex, eventsList) {\n    var startTime = event[this.fields.startTime];\n    var endTime = event[this.fields.endTime];\n    var day = this.parent.getIndexOfDate(this.dateRender, resetTime(startTime));\n\n    if (day < 0 || startTime.getTime() < this.parent.minDate.getTime() || endTime.getTime() > this.parent.maxDate.getTime()) {\n      return;\n    }\n\n    var overlapCount = this.getIndex(startTime);\n    event.Index = overlapCount;\n    var diffInDays = event.data.count;\n\n    if (startTime.getTime() <= endTime.getTime()) {\n      var appWidth = diffInDays * this.cellWidth - 5;\n      var cellTd = this.workCells[parseInt(day.toString(), 10)];\n      var appTop = overlapCount * (this.eventHeight + EVENT_GAP);\n      var height = this.monthHeaderHeight + (overlapCount + 1) * (this.eventHeight + EVENT_GAP) + this.moreIndicatorHeight;\n      var enableAppRender = this.maxOrIndicator ? overlapCount < 1 ? true : false : this.cellHeight > height;\n\n      if (this.parent.rowAutoHeight || enableAppRender) {\n        this.renderedEvents.push(extend({}, event, null, true));\n        var appointmentElement = void 0;\n\n        if (this.inlineValue) {\n          appointmentElement = this.parent.inlineModule.createInlineAppointmentElement();\n        } else {\n          appointmentElement = this.createAppointmentElement(event, resIndex);\n        }\n\n        this.applyResourceColor(appointmentElement, event, 'backgroundColor', this.groupOrder);\n        this.wireAppointmentEvents(appointmentElement, event);\n        setStyleAttribute(appointmentElement, {\n          'width': appWidth + 'px',\n          'top': appTop + 'px'\n        });\n        this.renderEventElement(event, appointmentElement, cellTd);\n\n        if (this.parent.rowAutoHeight) {\n          var firstChild = cellTd.parentElement.firstElementChild;\n          this.updateCellHeight(firstChild, height);\n        }\n      } else {\n        for (var i = 0; i < diffInDays; i++) {\n          if (this.workCells[day + i]) {\n            var indicator = this.workCells[day + i].querySelector('.' + MORE_INDICATOR_CLASS);\n\n            if (indicator) {\n              var count = parseInt(indicator.getAttribute('data-count'), 10) + 1;\n              indicator.setAttribute('data-count', count.toString());\n              indicator.innerHTML = this.getMoreIndicatorText(count);\n            } else {\n              var startDate = new Date(this.dateRender[day + i].getTime());\n              var endDate = addDays(this.dateRender[day + i], 1);\n              var groupIndex = this.workCells[day + i].getAttribute('data-group-index');\n              var moreIndicatorElement = this.getMoreIndicatorElement(1, startDate, endDate);\n\n              if (!isNullOrUndefined(groupIndex)) {\n                moreIndicatorElement.setAttribute('data-group-index', groupIndex);\n              }\n\n              moreIndicatorElement.style.top = this.cellHeight - this.monthHeaderHeight - this.moreIndicatorHeight + 'px';\n              moreIndicatorElement.style.width = this.cellWidth - 2 + 'px';\n              this.renderElement(this.workCells[day + i], moreIndicatorElement);\n              EventHandler.add(moreIndicatorElement, 'click', this.moreIndicatorClick, this);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  MonthEvent.prototype.updateCellHeight = function (cell, height) {\n    if (height > cell.offsetHeight) {\n      setStyleAttribute(cell, {\n        'height': height + 'px'\n      });\n    }\n  };\n\n  MonthEvent.prototype.updateBlockElements = function () {\n    var blockElement = [].slice.call(this.element.querySelectorAll('.' + BLOCK_APPOINTMENT_CLASS));\n\n    for (var _i = 0, blockElement_1 = blockElement; _i < blockElement_1.length; _i++) {\n      var element = blockElement_1[_i];\n      var target = closest(element, 'tr');\n      this.monthHeaderHeight = element.offsetParent.offsetTop - target.offsetTop;\n      element.style.height = target.offsetHeight - 1 - this.monthHeaderHeight + 'px';\n      var firstChild = target.firstElementChild;\n      var width = Math.round(element.offsetWidth / firstChild.offsetWidth);\n      element.style.width = firstChild.offsetWidth * width + 'px';\n    }\n  }; // eslint-disable-next-line max-len\n\n\n  MonthEvent.prototype.getFilteredEvents = function (startDate, endDate, groupIndex, eventsList) {\n    var filteredEvents;\n\n    if (isNullOrUndefined(groupIndex)) {\n      filteredEvents = this.filterEvents(startDate, endDate);\n    } else {\n      var data = this.parent.resourceBase.lastResourceLevel[parseInt(groupIndex, 10)];\n      filteredEvents = this.filterEvents(startDate, endDate, isNullOrUndefined(eventsList) ? undefined : eventsList, data);\n    }\n\n    return filteredEvents;\n  };\n\n  MonthEvent.prototype.getOverlapEvents = function (date, appointments) {\n    var appointmentsList = [];\n    var dateTime = resetTime(date).getTime();\n\n    for (var _i = 0, appointments_1 = appointments; _i < appointments_1.length; _i++) {\n      var app = appointments_1[_i];\n\n      if (resetTime(app[this.fields.startTime]).getTime() <= dateTime && resetTime(app[this.fields.endTime]).getTime() >= dateTime) {\n        appointmentsList.push(app);\n      }\n    }\n\n    return appointmentsList;\n  };\n\n  MonthEvent.prototype.getIndex = function (date) {\n    var appIndex = -1;\n    var appointments = this.renderedEvents;\n\n    if (appointments.length > 0) {\n      var appointmentsList = this.getOverlapEvents(date, appointments);\n      var appLevel = appointmentsList.map(function (obj) {\n        return obj.Index;\n      });\n      appIndex = appLevel.length > 0 ? this.getSmallestMissingNumber(appLevel) : 0;\n    }\n\n    return appIndex === -1 ? 0 : appIndex;\n  };\n\n  MonthEvent.prototype.moreIndicatorClick = function (event) {\n    var _this = this;\n\n    var target = closest(event.target, '.' + MORE_INDICATOR_CLASS);\n    var startDate = new Date(parseInt(target.getAttribute('data-start-date'), 10));\n    var endDate = new Date(parseInt(target.getAttribute('data-end-date'), 10));\n    var groupIndex = target.getAttribute('data-group-index');\n    var moreArgs = {\n      cancel: false,\n      event: event,\n      element: target,\n      isPopupOpen: true,\n      startTime: startDate,\n      endTime: endDate,\n      viewName: this.parent.getNavigateView()\n    };\n\n    if (groupIndex) {\n      moreArgs.groupIndex = parseInt(groupIndex, 10);\n    }\n\n    this.parent.trigger(moreEventsClick, moreArgs, function (clickArgs) {\n      if (!clickArgs.cancel) {\n        if (clickArgs.isPopupOpen) {\n          var filteredEvents = _this.getFilteredEvents(startDate, endDate, groupIndex);\n\n          var moreArgs_1 = {\n            date: startDate,\n            event: filteredEvents,\n            element: event.target\n          };\n\n          _this.parent.quickPopup.moreEventClick(moreArgs_1, endDate, groupIndex);\n        } else {\n          _this.parent.setProperties({\n            selectedDate: startDate\n          }, true);\n\n          _this.parent.changeView(clickArgs.viewName, event);\n        }\n      }\n    });\n  };\n\n  MonthEvent.prototype.renderEventElement = function (event, appointmentElement, cellTd) {\n    var _this = this;\n\n    var eventType = appointmentElement.classList.contains(BLOCK_APPOINTMENT_CLASS) ? 'blockEvent' : 'event';\n    var isAppointment = appointmentElement.classList.contains(APPOINTMENT_CLASS);\n    var eventObj = this.getEventData(event);\n    var args = {\n      data: eventObj,\n      element: appointmentElement,\n      cancel: false,\n      type: eventType\n    };\n    this.parent.trigger(eventRendered, args, function (eventArgs) {\n      if (eventArgs.cancel) {\n        _this.renderedEvents.pop();\n      } else {\n        _this.renderElement(cellTd, appointmentElement, isAppointment);\n      }\n    });\n  };\n\n  MonthEvent.prototype.getEventData = function (event) {\n    var eventObj = extend({}, event, null, true);\n    eventObj[this.fields.startTime] = event.data[this.fields.startTime];\n    eventObj[this.fields.endTime] = event.data[this.fields.endTime];\n    return eventObj;\n  };\n\n  MonthEvent.prototype.renderElement = function (cellTd, element, isAppointment) {\n    if (isAppointment === void 0) {\n      isAppointment = false;\n    }\n\n    if (this.maxOrIndicator && isAppointment) {\n      this.setMaxEventHeight(element, cellTd);\n    }\n\n    var wrapperEle = cellTd.querySelector('.' + APPOINTMENT_WRAPPER_CLASS);\n\n    if (wrapperEle) {\n      wrapperEle.appendChild(element);\n    } else {\n      var wrapper = createElement('div', {\n        className: APPOINTMENT_WRAPPER_CLASS\n      });\n      wrapper.appendChild(element);\n      cellTd.appendChild(wrapper);\n    }\n  };\n\n  MonthEvent.prototype.getMoreIndicatorElement = function (count, startDate, endDate) {\n    var moreIndicatorElement = createElement('div', {\n      className: MORE_INDICATOR_CLASS,\n      innerHTML: this.getMoreIndicatorText(count),\n      attrs: {\n        'tabindex': '0',\n        'data-count': count.toString(),\n        'data-start-date': startDate.getTime().toString(),\n        'data-end-date': endDate.getTime().toString()\n      }\n    });\n    return moreIndicatorElement;\n  };\n\n  MonthEvent.prototype.getMoreIndicatorText = function (count) {\n    return '+' + this.parent.globalize.formatNumber(count) + '&nbsp;' + (this.parent.isAdaptive ? '' : this.parent.localeObj.getConstant('more'));\n  };\n\n  MonthEvent.prototype.removeHeightProperty = function (selector) {\n    var rows = [].slice.call(this.element.querySelectorAll('.' + selector + ' tbody tr'));\n\n    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n      var row = rows_1[_i];\n      row.firstElementChild.style.height = '';\n    }\n  };\n\n  MonthEvent.prototype.setMaxEventHeight = function (event, cell) {\n    var headerHeight = getOuterHeight(cell.querySelector('.' + DATE_HEADER_CLASS));\n    var height = cell.offsetHeight - headerHeight - (this.maxHeight ? 0 : this.moreIndicatorHeight);\n    setStyleAttribute(event, {\n      'height': height + 'px',\n      'align-items': 'center'\n    });\n  };\n\n  MonthEvent.prototype.destroy = function () {\n    this.element = null;\n    this.fields = null;\n    this.maxHeight = null;\n    this.withIndicator = null;\n    this.maxOrIndicator = null;\n    this.moreIndicatorHeight = null;\n    this.removeEventListener();\n\n    _super.prototype.destroy.call(this);\n  };\n\n  return MonthEvent;\n}(EventBase);\n\nvar __extends$3 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable max-len */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nvar EVENT_GAP$1 = 2;\nvar BLOCK_INDICATOR_WIDTH = 22;\nvar BLOCK_INDICATOR_HEIGHT = 18;\n/**\n * Timeline view events render\n */\n\nvar TimelineEvent =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$3(TimelineEvent, _super);\n\n  function TimelineEvent(parent, type) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.startHour = _this.parent.activeView.getStartHour();\n    _this.endHour = _this.parent.activeView.getEndHour();\n    _this.slotCount = _this.parent.activeViewOptions.timeScale.slotCount;\n    _this.interval = _this.parent.activeViewOptions.timeScale.interval;\n    _this.day = 0;\n    _this.rowIndex = 0;\n    _this.cellTops = [];\n    _this.renderType = type;\n    _this.eventContainers = [].slice.call(_this.element.querySelectorAll('.' + APPOINTMENT_CONTAINER_CLASS));\n    var tr = [].slice.call(_this.element.querySelectorAll('.' + CONTENT_TABLE_CLASS + ' tbody tr'));\n    _this.dayLength = tr.length === 0 ? 0 : tr[0].children.length;\n    _this.content = _this.parent.element.querySelector('.' + CONTENT_TABLE_CLASS);\n    return _this;\n  }\n\n  TimelineEvent.prototype.getSlotDates = function () {\n    this.slots = [];\n    this.slots.push(this.parent.activeView.renderDates.map(function (date) {\n      return +date;\n    }));\n\n    if (this.parent.activeViewOptions.headerRows.length > 0 && this.parent.activeViewOptions.headerRows.slice(-1)[0].option !== 'Hour') {\n      this.renderType = 'day';\n      this.cellWidth = this.content.offsetWidth / this.dateRender.length;\n      this.slotsPerDay = 1;\n    } else {\n      this.slotsPerDay = this.dayLength / this.dateRender.length;\n    }\n  };\n\n  TimelineEvent.prototype.getOverlapEvents = function (date, appointments) {\n    var appointmentsList = [];\n\n    if (this.renderType === 'day') {\n      for (var _i = 0, appointments_1 = appointments; _i < appointments_1.length; _i++) {\n        var app = appointments_1[_i];\n\n        if (resetTime(app[this.fields.startTime]).getTime() <= resetTime(new Date(date.getTime())).getTime() && resetTime(app[this.fields.endTime]).getTime() >= resetTime(new Date(date.getTime())).getTime()) {\n          appointmentsList.push(app);\n        }\n      }\n    } else {\n      for (var _a = 0, appointments_2 = appointments; _a < appointments_2.length; _a++) {\n        var app = appointments_2[_a];\n        var eventData = app.data;\n\n        if (eventData.trimStartTime.getTime() <= date.getTime() && eventData.trimEndTime.getTime() > date.getTime()) {\n          appointmentsList.push(app);\n        }\n      }\n    }\n\n    return appointmentsList;\n  };\n\n  TimelineEvent.prototype.getSortComparerIndex = function (startDate, endDate) {\n    var appIndex = -1;\n    var appointments = this.renderedEvents;\n\n    if (appointments.length > 0) {\n      var appointmentsList = this.getOverlapSortComparerEvents(startDate, endDate, appointments);\n      var appLevel = appointmentsList.map(function (obj) {\n        return obj.Index;\n      });\n      appIndex = appLevel.length > 0 ? this.getSmallestMissingNumber(appLevel) : 0;\n    }\n\n    return appIndex === -1 ? 0 : appIndex;\n  };\n\n  TimelineEvent.prototype.getOverlapSortComparerEvents = function (startDate, endDate, appointmentsCollection) {\n    var appointments = [];\n\n    for (var _i = 0, appointmentsCollection_1 = appointmentsCollection; _i < appointmentsCollection_1.length; _i++) {\n      var app = appointmentsCollection_1[_i];\n\n      if (this.renderType === 'day') {\n        if (resetTime(app[this.fields.startTime]).getTime() <= resetTime(new Date(startDate.getTime())).getTime() && resetTime(app[this.fields.endTime]).getTime() >= resetTime(new Date(startDate.getTime())).getTime()) {\n          appointments.push(app);\n        }\n      } else {\n        var eventData = app.data;\n\n        if (eventData.trimStartTime.getTime() <= startDate.getTime() && startDate.getTime() < eventData.trimEndTime.getTime() || startDate.getTime() <= eventData.trimStartTime.getTime() && eventData.trimStartTime.getTime() < endDate.getTime()) {\n          appointments.push(app);\n        }\n      }\n    }\n\n    return appointments;\n  };\n\n  TimelineEvent.prototype.renderResourceEvents = function () {\n    this.removeHeightProperty(RESOURCE_COLUMN_TABLE_CLASS);\n    var resources = this.parent.uiStateValues.isGroupAdaptive ? [this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex]] : this.parent.resourceBase.renderedResources;\n\n    if (this.parent.crudModule && this.parent.crudModule.crudObj.isCrudAction) {\n      for (var i = 0, len = this.parent.crudModule.crudObj.sourceEvent.length; i < len; i++) {\n        var source = this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)];\n        this.rowIndex = source.groupIndex;\n        this.renderEventsHandler(this.parent.activeView.renderDates, this.parent.activeViewOptions.workDays, source);\n\n        if (this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)] && this.parent.crudModule.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex !== this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex) {\n          var target = this.parent.crudModule.crudObj.targetEvent[parseInt(i.toString(), 10)];\n          this.rowIndex = target.groupIndex;\n          this.renderEventsHandler(this.parent.activeView.renderDates, this.parent.activeViewOptions.workDays, target);\n        }\n      }\n\n      this.parent.crudModule.crudObj.isCrudAction = false;\n    } else {\n      for (var i = 0; i < resources.length; i++) {\n        this.rowIndex = i;\n        this.renderEventsHandler(this.parent.activeView.renderDates, this.parent.activeViewOptions.workDays, resources[parseInt(i.toString(), 10)]);\n      }\n    }\n  };\n\n  TimelineEvent.prototype.renderEvents = function (event, resIndex, appointmentsList) {\n    var startTime = event[this.fields.startTime];\n    var endTime = event[this.fields.endTime];\n\n    if (startTime.getTime() < this.parent.minDate.getTime() || endTime.getTime() > this.parent.maxDate.getTime()) {\n      return;\n    }\n\n    var eventData = event.data;\n    startTime = this.getStartTime(event, eventData);\n    endTime = this.getEndTime(event, eventData);\n    var startEndHours = getStartEndHours(event[this.fields.startTime], this.startHour, this.endHour);\n    var eventDates = this.updateEventMinimumDuration(startEndHours, startTime, endTime);\n    startTime = eventDates.startDate;\n    endTime = eventDates.endDate;\n    this.day = this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(startTime.getTime())));\n\n    if (this.day < 0) {\n      return;\n    }\n\n    var cellTd = this.getCellTd();\n    var overlapCount = isNullOrUndefined(this.parent.eventSettings.sortComparer) ? this.getIndex(startTime) : this.getSortComparerIndex(startTime, endTime);\n    event.Index = overlapCount;\n    var appHeight = this.eventHeight;\n    var diffInDays = eventData.count;\n    var eventObj = extend({}, event, null, true);\n    eventObj[this.fields.startTime] = eventData[this.fields.startTime];\n    eventObj[this.fields.endTime] = eventData[this.fields.endTime];\n    var currentDate = resetTime(new Date(this.dateRender[this.day].getTime()));\n    var schedule = getStartEndHours(currentDate, this.startHour, this.endHour);\n    var isValidEvent = true;\n\n    if (this.isDayProcess() || eventObj[this.fields.isAllDay]) {\n      isValidEvent = true;\n    } else {\n      isValidEvent = this.isValidEvent(eventObj, startTime, endTime, schedule);\n    }\n\n    if (startTime <= endTime && isValidEvent) {\n      var appWidth = this.getEventWidth(startTime, endTime, event[this.fields.isAllDay], diffInDays);\n      appWidth = this.renderType === 'day' ? appWidth - 2 : appWidth;\n      var appLeft = 0;\n      var appRight = 0;\n      var position = this.getPosition(startTime, endTime, event[this.fields.isAllDay], this.day);\n      appWidth = appWidth <= 0 ? this.cellWidth : appWidth; // appWidth 0 when start and end time as same\n\n      this.renderedEvents.push(extend({}, event, null, true));\n\n      if (isNullOrUndefined(this.cellTops[parseInt(resIndex.toString(), 10)])) {\n        this.cellTops[parseInt(resIndex.toString(), 10)] = this.getRowTop(resIndex);\n      }\n\n      var top_1 = this.cellTops[parseInt(resIndex.toString(), 10)];\n      var appTop = top_1 + (this.maxHeight ? 0 : EVENT_GAP$1) + overlapCount * (appHeight + EVENT_GAP$1);\n      appLeft = this.parent.enableRtl ? 0 : position;\n      appRight = this.parent.enableRtl ? position : 0;\n      var height = (overlapCount + 1) * (appHeight + EVENT_GAP$1) + this.moreIndicatorHeight;\n      var renderApp = this.maxOrIndicator ? overlapCount < 1 ? true : false : this.cellHeight > height;\n\n      if (this.parent.rowAutoHeight || renderApp) {\n        var appointmentElement = void 0;\n\n        if (isNullOrUndefined(this.inlineValue)) {\n          appointmentElement = this.createAppointmentElement(event, resIndex);\n        } else {\n          appointmentElement = this.parent.inlineModule.createInlineAppointmentElement();\n        }\n\n        this.applyResourceColor(appointmentElement, event, 'backgroundColor', this.groupOrder);\n        setStyleAttribute(appointmentElement, {\n          'width': appWidth + 'px',\n          'left': appLeft + 'px',\n          'right': appRight + 'px',\n          'top': appTop + 'px'\n        });\n        this.wireAppointmentEvents(appointmentElement, event);\n        this.renderEventElement(event, appointmentElement, cellTd);\n\n        if (this.parent.rowAutoHeight) {\n          var firstChild = this.getFirstChild(resIndex);\n          this.updateCellHeight(firstChild, height);\n        }\n      } else {\n        for (var i = 0; i < diffInDays; i++) {\n          var moreIndicator = cellTd.querySelector('.' + MORE_INDICATOR_CLASS);\n          var appPos = this.parent.enableRtl ? appRight : appLeft;\n          appPos = Math.floor(appPos / this.cellWidth) * this.cellWidth;\n          var interval = this.interval / this.slotCount;\n          var startDate = this.parent.activeViewOptions.option === 'TimelineMonth' || this.renderType === 'day' || i !== 0 ? new Date(this.dateRender[this.day + i].getTime()) : new Date(startTime);\n          var endDate = addDays(this.dateRender[this.day + i], 1);\n\n          if (this.parent.activeViewOptions.option === 'TimelineMonth' || this.renderType === 'day') {\n            var position_1 = this.getPosition(startDate, endDate, event[this.fields.isAllDay], this.day + i);\n            this.renderTimelineMoreIndicator(startTime, startDate, endDate, appHeight, interval, resIndex, appointmentsList, top_1, appLeft, appRight, cellTd, moreIndicator, appPos, position_1);\n          } else {\n            var slotCount = (getUniversalTime(endTime) - getUniversalTime(startTime)) / MS_PER_MINUTE * this.slotCount / this.interval;\n\n            for (var k = 0; k < slotCount; k++) {\n              startDate = k === 0 ? new Date(startDate.getTime()) : new Date(startDate.getTime() + 60000 * interval);\n              endDate = new Date(startDate.getTime() + 60000 * interval);\n\n              if (endDate.getTime() > endTime.getTime()) {\n                break;\n              }\n\n              var position_2 = this.getPosition(startDate, endDate, false, this.day + i);\n\n              if (appPos > position_2) {\n                break;\n              }\n\n              appPos = position_2;\n              this.renderTimelineMoreIndicator(startTime, startDate, endDate, appHeight, interval, resIndex, appointmentsList, top_1, appLeft, appRight, cellTd, moreIndicator, appPos, position_2);\n            }\n          }\n        }\n      }\n    }\n\n    this.parent.renderTemplates();\n  };\n\n  TimelineEvent.prototype.renderTimelineMoreIndicator = function (startTime, startDate, endDate, appHeight, interval, resIndex, appointmentsList, top, appLeft, appRight, cellTd, moreIndicator, appPos, position) {\n    appLeft = this.parent.enableRtl ? appRight = position : position;\n    appPos = this.parent.enableRtl ? appRight : appLeft;\n    appPos = Math.round(appPos / this.cellWidth) * this.cellWidth;\n\n    if (cellTd && isNullOrUndefined(moreIndicator) || !this.isAlreadyAvail(appPos, cellTd)) {\n      var startDateTime = this.parent.activeViewOptions.option === 'TimelineMonth' || this.renderType === 'day' ? new Date(+startTime) : startDate;\n      var slotStartTime = new Date(startDateTime.setMinutes(Math.floor(startDateTime.getMinutes() / interval) * interval));\n      var slotEndTime = new Date(slotStartTime.getTime() + 60000 * interval);\n      var groupIndex = void 0;\n\n      if (this.parent.activeViewOptions.group.resources.length > 0 && !isNullOrUndefined(resIndex)) {\n        groupIndex = resIndex.toString();\n      }\n\n      var filterEvents = this.getFilterEvents(startDate, endDate, slotStartTime, slotEndTime, groupIndex, appointmentsList);\n      var appArea = this.cellHeight - this.moreIndicatorHeight;\n      appHeight = this.withIndicator ? appArea - EVENT_GAP$1 : appHeight;\n      var renderedAppCount = Math.floor(appArea / (appHeight + EVENT_GAP$1));\n      var count = filterEvents.length - renderedAppCount <= 0 ? 1 : filterEvents.length - renderedAppCount;\n      var moreIndicatorElement = void 0;\n\n      if (this.renderType === 'day') {\n        moreIndicatorElement = this.getMoreIndicatorElement(count, startDate, endDate);\n      } else {\n        moreIndicatorElement = this.getMoreIndicatorElement(count, slotStartTime, slotEndTime);\n      }\n\n      if (!isNullOrUndefined(groupIndex)) {\n        moreIndicatorElement.setAttribute('data-group-index', groupIndex);\n      }\n\n      moreIndicatorElement.style.top = top + appArea + 'px';\n      moreIndicatorElement.style.width = this.cellWidth + 'px';\n      moreIndicatorElement.style.left = appLeft / this.cellWidth * this.cellWidth + 'px';\n      moreIndicatorElement.style.right = appRight / this.cellWidth * this.cellWidth + 'px';\n      this.renderElement(cellTd, moreIndicatorElement);\n      EventHandler.add(moreIndicatorElement, 'click', this.moreIndicatorClick, this);\n    }\n  };\n\n  TimelineEvent.prototype.updateCellHeight = function (cell, height) {\n    var cellHeight = cell.style.height === '' ? this.cellHeight : parseInt(cell.style.height, 10);\n\n    if (height > cellHeight) {\n      setStyleAttribute(cell, {\n        'height': height + 'px'\n      });\n\n      if (this.parent.activeViewOptions.group.resources.length > 0) {\n        var resourceCell = this.parent.element.querySelector('.' + RESOURCE_COLUMN_TABLE_CLASS + ' ' + 'tbody td[data-group-index=\"' + cell.getAttribute('data-group-index') + '\"]');\n\n        if (resourceCell) {\n          setStyleAttribute(resourceCell, {\n            'height': height + 'px'\n          });\n        }\n      }\n\n      var monthHeader = this.parent.element.querySelector('.e-month-header-wrapper table tr:nth-child(' + (cell.parentElement.rowIndex + 1) + ') td');\n\n      if (monthHeader) {\n        setStyleAttribute(monthHeader, {\n          'height': height + 'px'\n        });\n      }\n    }\n  };\n\n  TimelineEvent.prototype.getFirstChild = function (index) {\n    var query = '.' + CONTENT_TABLE_CLASS + ' tbody td';\n    var groupIndex = '';\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      groupIndex = '[data-group-index=\"' + index.toString() + '\"]';\n    }\n\n    var td = this.parent.element.querySelector(query + groupIndex);\n    return td;\n  };\n\n  TimelineEvent.prototype.updateBlockElements = function () {\n    var blockElement = [].slice.call(this.element.querySelectorAll('.' + BLOCK_APPOINTMENT_CLASS));\n\n    for (var _i = 0, blockElement_1 = blockElement; _i < blockElement_1.length; _i++) {\n      var element = blockElement_1[_i];\n      var resIndex = parseInt(element.getAttribute('data-group-index'), 10);\n      var firstChild = this.getFirstChild(resIndex);\n      element.style.height = firstChild.offsetHeight + 'px';\n      var width = Math.round(element.offsetWidth / firstChild.offsetWidth);\n      element.style.width = firstChild.offsetWidth * width + 'px';\n    }\n\n    var blockIndicator = [].slice.call(this.element.querySelectorAll('.' + BLOCK_INDICATOR_CLASS));\n\n    for (var _a = 0, blockIndicator_1 = blockIndicator; _a < blockIndicator_1.length; _a++) {\n      var element = blockIndicator_1[_a];\n      var resIndex = parseInt(element.getAttribute('data-group-index'), 10);\n      element.style.top = this.getRowTop(resIndex) + this.getFirstChild(resIndex).offsetHeight - BLOCK_INDICATOR_HEIGHT + 'px';\n    }\n  };\n\n  TimelineEvent.prototype.getStartTime = function (event, eventData) {\n    var startTime = event[this.fields.startTime];\n    var schedule = getStartEndHours(startTime, this.startHour, this.endHour);\n\n    if (this.isDayProcess()) {\n      startTime = event[this.fields.startTime];\n    } else {\n      if (schedule.startHour.getTime() >= eventData[this.fields.startTime]) {\n        startTime = schedule.startHour;\n      } else if (schedule.endHour.getTime() <= eventData[this.fields.startTime]) {\n        startTime = this.getNextDay(schedule.startHour, eventData);\n      } else {\n        startTime = eventData[this.fields.startTime];\n      }\n    } // To overcome the overflow\n\n\n    eventData.trimStartTime = event[this.fields.isAllDay] ? schedule.startHour : eventData[this.fields.startTime];\n    return startTime;\n  };\n\n  TimelineEvent.prototype.getNextDay = function (startTime, eventData) {\n    var startDate;\n\n    for (var i = 1; i <= this.dateRender.length; i++) {\n      startDate = addDays(startTime, i);\n\n      if (this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(startTime.getTime()))) !== -1) {\n        eventData.count = eventData.count - 1;\n        return startDate;\n      }\n    }\n\n    return startDate;\n  };\n\n  TimelineEvent.prototype.getEndTime = function (event, eventData) {\n    var endTime = event[this.fields.endTime];\n    var schedule = getStartEndHours(endTime, this.startHour, this.endHour);\n\n    if (this.isDayProcess()) {\n      endTime = eventData[this.fields.endTime];\n    } else {\n      endTime = eventData[this.fields.endTime];\n\n      if (schedule.endHour.getTime() <= eventData[this.fields.endTime] || event[this.fields.isAllDay]) {\n        endTime = schedule.endHour;\n      }\n\n      if (schedule.startHour.getTime() >= eventData[this.fields.endTime].getTime() && !event[this.fields.isAllDay]) {\n        endTime = this.getPreviousDay(schedule.startHour, schedule.endHour, eventData);\n      }\n    } // To overcome the overflow\n\n\n    eventData.trimEndTime = event[this.fields.isAllDay] ? schedule.endHour : eventData[this.fields.endTime];\n    return endTime;\n  };\n\n  TimelineEvent.prototype.getPreviousDay = function (startTime, endTime, eventData) {\n    for (var i = 1; i <= this.dateRender.length; i++) {\n      var endDate = addDays(endTime, -i);\n\n      if (this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(startTime.getTime()))) !== -1) {\n        endDate = resetTime(new Date(endDate.getTime()));\n        endDate.setHours(endTime.getHours(), endTime.getMinutes(), endTime.getSeconds());\n        var count = eventData.count;\n        var actualEndTime = eventData[this.fields.endTime];\n        eventData.count = actualEndTime.getHours() !== 0 || actualEndTime.getMinutes() !== 0 ? count - 1 : count;\n        return endDate;\n      }\n    }\n\n    return eventData[this.fields.endTime];\n  };\n\n  TimelineEvent.prototype.getEventWidth = function (startDate, endDate, isAllDay, count) {\n    if (this.renderType === 'day' || isAllDay) {\n      return count * this.slotsPerDay * this.cellWidth;\n    }\n\n    if (this.isSameDay(startDate, endDate)) {\n      return this.getSameDayEventsWidth(startDate, endDate);\n    } else {\n      return this.getSpannedEventsWidth(startDate, endDate, count);\n    }\n  };\n\n  TimelineEvent.prototype.getSameDayEventsWidth = function (startDate, endDate) {\n    return (getUniversalTime(endDate) - getUniversalTime(startDate)) / MS_PER_MINUTE * (this.cellWidth * this.slotCount) / this.interval;\n  };\n\n  TimelineEvent.prototype.getSpannedEventsWidth = function (startDate, endDate, diffInDays) {\n    var width = diffInDays * this.slotsPerDay * this.cellWidth;\n    var endWidth;\n    var start = getStartEndHours(resetTime(new Date(startDate.getTime())), this.startHour, this.endHour);\n    var startWidth = this.getSameDayEventsWidth(start.startHour, startDate);\n\n    if (this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(endDate.getTime()))) === -1) {\n      endWidth = 0;\n    } else {\n      var end = getStartEndHours(resetTime(new Date(endDate.getTime())), this.startHour, this.endHour);\n      endWidth = this.getSameDayEventsWidth(endDate, end.endHour);\n      endWidth = this.slotsPerDay * this.cellWidth === endWidth ? 0 : endWidth;\n    }\n\n    var spannedWidth = startWidth + endWidth;\n    return width > spannedWidth ? width - spannedWidth : width - startWidth;\n  };\n\n  TimelineEvent.prototype.isSameDay = function (startTime, endTime) {\n    var startDay = this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(startTime.getTime())));\n    var endDay = this.parent.getIndexOfDate(this.dateRender, resetTime(new Date(endTime.getTime())));\n    return startDay === endDay;\n  };\n\n  TimelineEvent.prototype.getAppointmentLeft = function (schedule, startTime, day) {\n    var slotTd = this.isSameDay(startTime, schedule.startHour) ? (getUniversalTime(startTime) - getUniversalTime(schedule.startHour)) / (MS_PER_MINUTE * this.interval) * this.slotCount : 0;\n\n    if (day === 0) {\n      return slotTd;\n    } else {\n      var daySlot = Math.round((getUniversalTime(schedule.endHour) - getUniversalTime(schedule.startHour)) / MS_PER_MINUTE / this.interval * this.slotCount);\n      return daySlot * day + slotTd;\n    }\n  };\n\n  TimelineEvent.prototype.getPosition = function (startTime, endTime, isAllDay, day) {\n    if (this.renderType === 'day' || isAllDay) {\n      return day * this.slotsPerDay * this.cellWidth;\n    }\n\n    var currentDate = resetTime(new Date(this.dateRender[parseInt(day.toString(), 10)].getTime()));\n    var schedule = getStartEndHours(currentDate, this.startHour, this.endHour);\n    var cellIndex;\n\n    if (schedule.endHour.getTime() <= endTime.getTime() && schedule.startHour.getTime() >= startTime.getTime()) {\n      cellIndex = this.getAppointmentLeft(schedule, schedule.startHour, day);\n    } else if (schedule.endHour.getTime() <= endTime.getTime()) {\n      cellIndex = this.getAppointmentLeft(schedule, startTime, day);\n    } else if (schedule.startHour.getTime() >= startTime.getTime()) {\n      cellIndex = this.getAppointmentLeft(schedule, schedule.startHour, day);\n    } else {\n      cellIndex = this.getAppointmentLeft(schedule, startTime, day);\n    }\n\n    return cellIndex * this.cellWidth;\n  };\n\n  TimelineEvent.prototype.getFilterEvents = function (startDate, endDate, startTime, endTime, gIndex, eventsList) {\n    if (this.renderType === 'day') {\n      return this.getFilteredEvents(startDate, endDate, gIndex, eventsList);\n    } else {\n      return this.getFilteredEvents(startTime, endTime, gIndex, eventsList);\n    }\n  };\n\n  TimelineEvent.prototype.isAlreadyAvail = function (appPos, cellTd) {\n    var moreIndicator = [].slice.call(cellTd.querySelectorAll('.' + MORE_INDICATOR_CLASS));\n\n    for (var i = 0; i < moreIndicator.length; i++) {\n      var indicatorPos = void 0;\n\n      if (moreIndicator) {\n        indicatorPos = this.parent.enableRtl ? moreIndicator[parseInt(i.toString(), 10)].style.right : moreIndicator[parseInt(i.toString(), 10)].style.left;\n      }\n\n      if (parseInt(indicatorPos, 10) === Math.floor(appPos)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  TimelineEvent.prototype.getRowTop = function (resIndex) {\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      return this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS + ' ' + 'tbody td[data-group-index=\"' + resIndex.toString() + '\"]').offsetTop;\n    }\n\n    return 0;\n  };\n\n  TimelineEvent.prototype.getCellTd = function () {\n    var wrapIndex = this.parent.uiStateValues.isGroupAdaptive ? 0 : this.rowIndex;\n    return this.eventContainers[parseInt(wrapIndex.toString(), 10)];\n  };\n\n  TimelineEvent.prototype.renderBlockIndicator = function (cellTd, position, resIndex) {\n    // No need to render block icon for Year, Month and Week header rows\n    if (this.parent.headerRows.length > 0 && (this.parent.headerRows[this.parent.headerRows.length - 1].option !== 'Hour' || this.parent.headerRows[this.parent.headerRows.length - 1].option !== 'Date')) {\n      return;\n    }\n\n    position = Math.floor(position / this.cellWidth) * this.cellWidth + this.cellWidth - BLOCK_INDICATOR_WIDTH;\n\n    if (!this.isAlreadyAvail(position, cellTd)) {\n      var blockIndicator = createElement('div', {\n        className: 'e-icons ' + BLOCK_INDICATOR_CLASS\n      });\n\n      if (this.parent.activeViewOptions.group.resources.length > 0) {\n        blockIndicator.setAttribute('data-group-index', resIndex.toString());\n      }\n\n      if (this.parent.enableRtl) {\n        blockIndicator.style.right = position + 'px';\n      } else {\n        blockIndicator.style.left = position + 'px';\n      }\n\n      blockIndicator.style.top = this.getRowTop(resIndex) + this.cellHeight - BLOCK_INDICATOR_HEIGHT + 'px';\n      this.renderElement(cellTd, blockIndicator);\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  TimelineEvent.prototype.setMaxEventHeight = function (event, cell) {\n    setStyleAttribute(event, {\n      'height': this.cellHeight - (this.maxHeight ? 0 : EVENT_GAP$1) - (this.maxHeight ? 0 : this.moreIndicatorHeight) + 'px'\n    });\n  };\n\n  TimelineEvent.prototype.isDayProcess = function () {\n    if (this.parent.currentView === 'TimelineMonth' || !this.parent.activeViewOptions.timeScale.enable || this.parent.activeViewOptions.headerRows.length > 0 && this.parent.activeViewOptions.headerRows.slice(-1)[0].option !== 'Hour') {\n      return true;\n    }\n\n    return false;\n  };\n\n  TimelineEvent.prototype.destroy = function () {\n    this.renderType = null;\n    this.eventContainers = null;\n    this.dayLength = null;\n    this.content = null;\n\n    _super.prototype.destroy.call(this);\n\n    this.parent = null;\n  };\n\n  return TimelineEvent;\n}(MonthEvent);\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Inline Edit interactions\n */\n\n\nvar InlineEdit =\n/** @__PURE__ @class */\nfunction () {\n  function InlineEdit(parent) {\n    this.parent = parent;\n    this.parent.on(inlineClick, this.inlineEdit, this);\n  }\n\n  InlineEdit.prototype.inlineEdit = function (args) {\n    if (this.parent.quickPopup) {\n      this.parent.quickPopup.quickPopupHide();\n    }\n\n    if (args.type === 'Cell') {\n      var moreWrapper = this.parent.element.querySelector('.' + MORE_POPUP_WRAPPER_CLASS);\n\n      if (moreWrapper && moreWrapper.classList.contains(POPUP_OPEN)) {\n        this.parent.quickPopup.morePopup.hide();\n      }\n\n      this.removeInlineAppointmentElement();\n      this.cellEdit(args);\n    } else {\n      if (this.parent.element.querySelector('.' + INLINE_SUBJECT_CLASS) !== args.element.querySelector('.' + INLINE_SUBJECT_CLASS)) {\n        this.removeInlineAppointmentElement();\n      }\n\n      this.eventEdit(args);\n    }\n  };\n\n  InlineEdit.prototype.cellEdit = function (args) {\n    var saveObj = this.generateEventData();\n    var cellIndex = args.element.cellIndex;\n    var count = this.getEventDaysCount(saveObj);\n\n    if (count > 1) {\n      count = Math.round(count);\n      count--;\n      cellIndex = cellIndex - count;\n    }\n\n    var start = resetTime(new Date('' + saveObj[this.parent.eventFields.startTime])).getTime();\n    var end = resetTime(new Date('' + saveObj[this.parent.eventFields.endTime])).getTime();\n    var resIndex = args.groupIndex || 0;\n    var isVertical = this.parent.currentView === 'Day' || this.parent.currentView === 'Week' || this.parent.currentView === 'WorkWeek';\n\n    if (this.parent.activeViewOptions.timeScale.enable && isVertical) {\n      var dayIndex = saveObj[this.parent.eventFields.startTime].getDay();\n      this.createVerticalViewInline(saveObj, dayIndex, resIndex, cellIndex);\n    } else if (this.parent.currentView === 'Month' || !this.parent.activeViewOptions.timeScale.enable && isVertical) {\n      this.createMonthViewInline(saveObj, resIndex, start, end);\n    } else {\n      this.createTimelineViewInline(saveObj, start, end, resIndex);\n    }\n\n    var inlineSubject = this.parent.element.querySelector('.' + INLINE_SUBJECT_CLASS);\n\n    if (inlineSubject) {\n      inlineSubject.focus();\n    }\n  };\n\n  InlineEdit.prototype.eventEdit = function (args) {\n    var inlineSubject = args.element.querySelector('.' + INLINE_SUBJECT_CLASS);\n    var subject;\n\n    if (inlineSubject) {\n      subject = inlineSubject.value;\n    } else {\n      var subEle = args.element.querySelector('.' + SUBJECT_CLASS);\n\n      if (!isNullOrUndefined(subEle)) {\n        addClass([subEle], DISABLE_CLASS);\n        subject = subEle.innerText;\n      } else {\n        subject = args.data[this.parent.eventFields.subject];\n      }\n\n      inlineSubject = createElement('input', {\n        className: INLINE_SUBJECT_CLASS,\n        attrs: {\n          value: subject\n        }\n      });\n\n      if (closest(args.element, '.' + MORE_POPUP_WRAPPER_CLASS)) {\n        args.element.insertBefore(inlineSubject, subEle);\n      } else if (['Agenda', 'MonthAgenda'].indexOf(this.parent.currentView) > -1) {\n        var subjectWrap = args.element.querySelector('.' + SUBJECT_WRAP);\n\n        if (isNullOrUndefined(subjectWrap)) {\n          subjectWrap = createElement('div', {\n            className: SUBJECT_WRAP\n          });\n          args.element.prepend(subjectWrap);\n        }\n\n        subjectWrap.insertBefore(inlineSubject, subjectWrap.firstChild);\n      } else {\n        args.element.querySelector('.e-appointment-details').prepend(inlineSubject);\n      }\n\n      inlineSubject.focus();\n    }\n\n    inlineSubject.setSelectionRange(subject.length, subject.length);\n  };\n\n  InlineEdit.prototype.createVerticalViewInline = function (saveObj, dayIndex, resIndex, daysCount) {\n    var _a;\n\n    var count = this.getEventDaysCount(saveObj);\n    var verticalEvent = new VerticalEvent(this.parent);\n    verticalEvent.initializeValues();\n    var index = verticalEvent.dateRender[parseInt(resIndex.toString(), 10)].map(function (date) {\n      return date.getDay();\n    }).indexOf(dayIndex);\n\n    if (count >= 1) {\n      verticalEvent.allDayElement = [].slice.call(this.parent.element.querySelectorAll('.' + ALLDAY_CELLS_CLASS));\n\n      (_a = verticalEvent.slots).push.apply(_a, this.parent.activeView.renderDates.map(function (date) {\n        return +date;\n      }));\n\n      var allDayElements = [].slice.call(this.parent.element.querySelectorAll('.' + ALLDAY_APPOINTMENT_CLASS));\n      var allDayLevel = 0;\n\n      if (allDayElements.length > 0) {\n        allDayLevel = Math.floor(this.parent.element.querySelector('.' + ALLDAY_ROW_CLASS).getBoundingClientRect().height / allDayElements[0].offsetHeight) - 1;\n      }\n\n      verticalEvent.allDayLevel = allDayLevel;\n      verticalEvent.renderAllDayEvents(saveObj, index, resIndex, daysCount, this.parent.allowInline);\n    } else {\n      verticalEvent.renderNormalEvents(saveObj, index, resIndex, daysCount, this.parent.allowInline);\n    }\n  };\n\n  InlineEdit.prototype.createMonthViewInline = function (saveObj, index, start, end) {\n    var count = this.getEventDaysCount(saveObj);\n    var saveObject = this.parent.eventBase.cloneEventObject(saveObj, start, end, count, false, false);\n    var monthEvent = new MonthEvent(this.parent);\n    monthEvent.dateRender = this.parent.activeView.renderDates;\n    monthEvent.inlineValue = this.parent.allowInline;\n    var renderDates = this.parent.activeView.renderDates;\n    var workDays = this.parent.activeViewOptions.workDays;\n    var monthCellSelector = '.' + WORK_CELLS_CLASS;\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      monthCellSelector += '[data-group-index=\"' + index + '\"]';\n      var resourceData = this.parent.resourceBase.lastResourceLevel[parseInt(index.toString(), 10)];\n      renderDates = resourceData.renderDates;\n      workDays = resourceData.workDays;\n    }\n\n    monthEvent.dateRender = renderDates;\n    monthEvent.workCells = [].slice.call(this.parent.element.querySelectorAll(monthCellSelector));\n    monthEvent.cellWidth = monthEvent.workCells[0].offsetWidth;\n    monthEvent.cellHeight = monthEvent.workCells[0].offsetHeight;\n    monthEvent.eventHeight = getElementHeightFromClass(this.parent.monthModule.element || monthEvent.element, APPOINTMENT_CLASS);\n    monthEvent.getSlotDates(workDays);\n    var filteredDates = monthEvent.getRenderedDates(renderDates);\n    var spannedEvents = monthEvent.splitEvent(saveObject, filteredDates || renderDates);\n\n    for (var _i = 0, spannedEvents_1 = spannedEvents; _i < spannedEvents_1.length; _i++) {\n      var eventData = spannedEvents_1[_i];\n      monthEvent.renderEvents(eventData, index);\n    }\n\n    var inlineSubject = this.parent.element.querySelector('.' + INLINE_SUBJECT_CLASS);\n    inlineSubject.focus();\n  };\n\n  InlineEdit.prototype.createTimelineViewInline = function (saveObj, start, end, resIndex) {\n    var count = this.getEventDaysCount(saveObj);\n    var saveObject = this.parent.eventBase.cloneEventObject(saveObj, start, end, count, false, false);\n    var timelineView = new TimelineEvent(this.parent, this.parent.activeViewOptions.timeScale.enable ? 'hour' : 'day');\n    timelineView.dateRender = this.parent.activeView.renderDates;\n    timelineView.eventContainers = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CONTAINER_CLASS));\n    var workCell = this.parent.element.querySelector('.' + WORK_CELLS_CLASS);\n    timelineView.inlineValue = this.parent.allowInline;\n    timelineView.cellWidth = workCell.offsetWidth;\n    timelineView.cellHeight = workCell.offsetHeight;\n    var dayLength = this.parent.element.querySelectorAll('.' + CONTENT_TABLE_CLASS + ' tbody tr').length === 0 ? 0 : this.parent.element.querySelectorAll('.' + CONTENT_TABLE_CLASS + ' tbody tr')[0].children.length;\n    timelineView.slotsPerDay = dayLength / timelineView.dateRender.length;\n    timelineView.eventHeight = getElementHeightFromClass(timelineView.element, APPOINTMENT_CLASS);\n    timelineView.renderEvents(saveObject, resIndex);\n  };\n\n  InlineEdit.prototype.getEventDaysCount = function (saveObj) {\n    var startDate = saveObj[this.parent.eventFields.startTime];\n    var endDate = saveObj[this.parent.eventFields.endTime];\n    var daysCount = Math.abs(endDate.getTime() - startDate.getTime()) / MS_PER_DAY;\n    return daysCount;\n  };\n\n  InlineEdit.prototype.generateEventData = function (target) {\n    var inlineElement = this.parent.element.querySelector('.' + INLINE_SUBJECT_CLASS);\n    var subject = inlineElement ? inlineElement.value : target ? target.innerHTML : '';\n    var saveObj = {};\n    saveObj[this.parent.eventFields.id] = this.parent.eventBase.getEventMaxID();\n    saveObj[this.parent.eventFields.subject] = subject;\n    saveObj[this.parent.eventFields.startTime] = this.parent.activeCellsData.startTime;\n    saveObj[this.parent.eventFields.endTime] = this.parent.activeCellsData.endTime;\n    saveObj[this.parent.eventFields.isAllDay] = this.parent.activeCellsData.isAllDay;\n    this.parent.eventWindow.setDefaultValueToObject(saveObj);\n\n    if (this.parent.resourceBase) {\n      this.parent.resourceBase.setResourceValues(saveObj, this.parent.activeCellsData.groupIndex);\n    }\n\n    return saveObj;\n  };\n\n  InlineEdit.prototype.documentClick = function () {\n    var target = this.parent.element.querySelector('.' + INLINE_SUBJECT_CLASS);\n\n    if (target && target.value !== '') {\n      this.inlineCrudActions(target);\n    } else {\n      this.removeInlineAppointmentElement();\n    }\n  };\n\n  InlineEdit.prototype.inlineCrudActions = function (target) {\n    if (closest(target, '.' + INLINE_APPOINTMENT_CLASS)) {\n      var saveObj = this.generateEventData(target);\n      this.parent.addEvent(saveObj);\n    } else {\n      var eventTarget = closest(target, '.' + APPOINTMENT_CLASS);\n      var eventDetails = this.parent.getEventDetails(eventTarget);\n      eventDetails[this.parent.eventFields.subject] = target.value;\n      var currentAction = void 0;\n\n      if (eventDetails[this.parent.eventFields.id] === eventDetails[this.parent.eventFields.recurrenceID]) {\n        currentAction = 'EditOccurrence';\n        eventDetails[this.parent.eventFields.id] = this.parent.eventBase.getEventMaxID();\n      }\n\n      this.parent.saveEvent(eventDetails, currentAction);\n    }\n\n    this.removeInlineAppointmentElement();\n  };\n\n  InlineEdit.prototype.createInlineAppointmentElement = function (inlineData) {\n    var inlineAppointmentElement = createElement('div', {\n      className: APPOINTMENT_CLASS + ' ' + INLINE_APPOINTMENT_CLASS\n    });\n    var inlineDetails = createElement('div', {\n      className: APPOINTMENT_DETAILS\n    });\n    inlineAppointmentElement.appendChild(inlineDetails);\n    var inline = createElement('input', {\n      className: INLINE_SUBJECT_CLASS\n    });\n    inlineDetails.appendChild(inline);\n\n    if (inlineData) {\n      this.parent.eventBase.applyResourceColor(inlineAppointmentElement, inlineData, 'backgroundColor');\n    }\n\n    return inlineAppointmentElement;\n  };\n\n  InlineEdit.prototype.removeInlineAppointmentElement = function () {\n    var inlineAppointment = [].slice.call(this.parent.element.querySelectorAll('.' + INLINE_APPOINTMENT_CLASS));\n\n    if (inlineAppointment.length > 0) {\n      inlineAppointment.forEach(function (node) {\n        return remove(node);\n      });\n    }\n\n    var inlineSubject = this.parent.element.querySelector('.' + INLINE_SUBJECT_CLASS);\n\n    if (inlineSubject) {\n      var appointmentSubject = closest(inlineSubject, '.' + APPOINTMENT_CLASS);\n      var subject = appointmentSubject.querySelector('.' + SUBJECT_CLASS);\n\n      if (!isNullOrUndefined(subject)) {\n        removeClass([subject], DISABLE_CLASS);\n      }\n\n      remove(inlineSubject);\n    }\n  };\n\n  InlineEdit.prototype.destroy = function () {\n    this.parent.off(inlineClick, this.inlineEdit);\n  };\n\n  return InlineEdit;\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Appointment window field validation\n */\n\n\nvar FieldValidator =\n/** @__PURE__ @class */\nfunction () {\n  function FieldValidator() {}\n\n  FieldValidator.prototype.renderFormValidator = function (form, rules, element, locale) {\n    var _this = this;\n\n    this.element = element;\n    this.formObj = new FormValidator(form, {\n      locale: locale,\n      customPlacement: function (inputElement, error) {\n        _this.errorPlacement(inputElement, error);\n      },\n      rules: rules,\n      validationComplete: function (args) {\n        _this.validationComplete(args);\n      },\n      focusout: function (args) {\n        _this.focusOut(args);\n      }\n    });\n  };\n\n  FieldValidator.prototype.focusOut = function (args) {\n    var target = args.relatedTarget;\n\n    if (target && (target.classList.contains('e-dlg-closeicon-btn') || target.classList.contains('e-close') || target.classList.contains(ALLDAY_CELLS_CLASS) || target.classList.contains(HEADER_CELLS_CLASS) || target.classList.contains(QUICK_POPUP_EVENT_DETAILS_CLASS) || target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(EVENT_WINDOW_CANCEL_BUTTON_CLASS))) {\n      this.ignoreError = true;\n    } else {\n      this.ignoreError = false;\n    }\n  };\n\n  FieldValidator.prototype.validationComplete = function (args) {\n    var elem = this.element.querySelector('#' + args.inputName + '_Error');\n\n    if (elem) {\n      elem.style.display = args.status === 'failure' ? '' : 'none';\n    }\n  };\n\n  FieldValidator.prototype.errorPlacement = function (inputElement, error) {\n    var id = error.getAttribute('for');\n    var elem = this.element.querySelector('#' + id + '_Error');\n\n    if (!elem && !this.ignoreError) {\n      this.createTooltip(inputElement, error, id, '');\n    }\n\n    if (!isNullOrUndefined(elem)) {\n      elem.querySelector('.e-error').innerHTML = error.innerHTML;\n    }\n  };\n\n  FieldValidator.prototype.createTooltip = function (element, error, name, display) {\n    var dlgContent;\n    var client;\n    var inputClient = element.getBoundingClientRect();\n\n    if (this.element.classList.contains(POPUP_WRAPPER_CLASS)) {\n      dlgContent = this.element;\n      client = this.element.getBoundingClientRect();\n    } else {\n      dlgContent = this.element.querySelector('.e-schedule-dialog .e-dlg-content');\n      client = dlgContent.getBoundingClientRect();\n    }\n\n    var div = createElement('div', {\n      className: 'e-tooltip-wrap e-popup ' + ERROR_VALIDATION_CLASS,\n      id: name + '_Error',\n      styles: 'display:' + display + ';top:' + (inputClient.bottom - client.top + dlgContent.scrollTop + 9) + 'px;left:' + (inputClient.left - client.left + dlgContent.scrollLeft + inputClient.width / 2) + 'px;'\n    });\n    var content = createElement('div', {\n      className: 'e-tip-content'\n    });\n    content.appendChild(error);\n    var arrow = createElement('div', {\n      className: 'e-arrow-tip e-tip-top'\n    });\n    arrow.appendChild(createElement('div', {\n      className: 'e-arrow-tip-outer e-tip-top'\n    }));\n    arrow.appendChild(createElement('div', {\n      className: 'e-arrow-tip-inner e-tip-top'\n    }));\n    div.appendChild(content);\n    div.appendChild(arrow);\n    dlgContent.appendChild(div);\n    div.style.left = parseInt(div.style.left, 10) - div.offsetWidth / 2 + 'px';\n  };\n\n  FieldValidator.prototype.destroyToolTip = function () {\n    if (this.element) {\n      var elements = [].slice.call(this.element.querySelectorAll('.' + ERROR_VALIDATION_CLASS));\n\n      for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n        var elem = elements_1[_i];\n        remove(elem);\n      }\n    }\n\n    if (this.formObj && this.formObj.element) {\n      this.formObj.reset();\n    }\n  };\n\n  FieldValidator.prototype.destroy = function () {\n    if (this.formObj && this.formObj.element && !this.formObj.isDestroyed) {\n      this.formObj.destroy();\n    }\n\n    this.formObj = null;\n    this.element = null;\n  };\n\n  return FieldValidator;\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nvar EVENT_FIELD = 'e-field';\n/**\n * Quick Popups interactions\n */\n\nvar QuickPopups =\n/** @__PURE__ @class */\nfunction () {\n  function QuickPopups(parent) {\n    this.isMultipleEventSelect = false;\n    this.isCrudAction = false;\n    this.parent = parent;\n    this.l10n = this.parent.localeObj;\n    this.fieldValidator = new FieldValidator();\n    this.render();\n    this.addEventListener();\n  }\n\n  QuickPopups.prototype.render = function () {\n    this.renderQuickPopup();\n    this.renderMorePopup();\n    this.renderQuickDialog();\n  };\n\n  QuickPopups.prototype.renderQuickPopup = function () {\n    var quickPopupWrapper = createElement('div', {\n      className: POPUP_WRAPPER_CLASS + ' e-popup-close'\n    });\n\n    if (this.parent.isAdaptive) {\n      document.body.appendChild(quickPopupWrapper);\n      addClass([quickPopupWrapper], DEVICE_CLASS);\n    } else {\n      this.parent.element.appendChild(quickPopupWrapper);\n    }\n\n    this.quickPopup = new Popup(quickPopupWrapper, {\n      targetType: this.parent.isAdaptive ? 'container' : 'relative',\n      enableRtl: this.parent.enableRtl,\n      open: this.quickPopupOpen.bind(this),\n      close: this.quickPopupClose.bind(this),\n      hideAnimation: this.parent.isAdaptive ? {\n        name: 'ZoomOut'\n      } : {\n        name: 'FadeOut',\n        duration: 150\n      },\n      showAnimation: this.parent.isAdaptive ? {\n        name: 'ZoomIn'\n      } : {\n        name: 'FadeIn',\n        duration: 150\n      },\n      collision: this.parent.isAdaptive ? {\n        X: 'fit',\n        Y: 'fit'\n      } : this.parent.enableRtl ? {\n        X: 'flip',\n        Y: 'fit'\n      } : {\n        X: 'none',\n        Y: 'fit'\n      },\n      position: this.parent.isAdaptive || this.parent.enableRtl ? {\n        X: 'left',\n        Y: 'top'\n      } : {\n        X: 'right',\n        Y: 'top'\n      },\n      viewPortElement: this.parent.isAdaptive ? document.body : this.parent.element,\n      zIndex: this.parent.isAdaptive ? 1004 : 3\n    });\n  };\n\n  QuickPopups.prototype.renderMorePopup = function () {\n    var moreEventPopup = \"<div class=\\\"\" + MORE_EVENT_POPUP_CLASS + \"\\\"><div class=\\\"\" + MORE_EVENT_HEADER_CLASS + \"\\\">\" + (\"<div class=\\\"\" + MORE_EVENT_CLOSE_CLASS + \"\\\" title=\\\"\" + this.l10n.getConstant('close') + \"\\\" tabindex=\\\"0\\\"></div>\") + (\"<div class=\\\"\" + MORE_EVENT_DATE_HEADER_CLASS + \"\\\"><div class=\\\"\" + MORE_EVENT_HEADER_DAY_CLASS + \"\\\"></div>\") + (\"<div class=\\\"\" + MORE_EVENT_HEADER_DATE_CLASS + \" \" + NAVIGATE_CLASS + \"\\\" tabindex=\\\"0\\\"></div></div></div></div>\");\n    var moreEventWrapper = createElement('div', {\n      className: MORE_POPUP_WRAPPER_CLASS + ' e-popup-close',\n      innerHTML: moreEventPopup\n    });\n\n    if (this.parent.isAdaptive) {\n      document.body.appendChild(moreEventWrapper);\n      addClass([moreEventWrapper], DEVICE_CLASS);\n    } else {\n      this.parent.element.appendChild(moreEventWrapper);\n    }\n\n    this.morePopup = new Popup(moreEventWrapper, {\n      targetType: this.parent.isAdaptive ? 'container' : 'relative',\n      enableRtl: this.parent.enableRtl,\n      hideAnimation: {\n        name: 'ZoomOut',\n        duration: 300\n      },\n      showAnimation: {\n        name: 'ZoomIn',\n        duration: 300\n      },\n      open: this.morePopupOpen.bind(this),\n      close: this.morePopupClose.bind(this),\n      collision: this.parent.isAdaptive ? {\n        X: 'fit',\n        Y: 'fit'\n      } : this.parent.enableRtl ? {\n        X: 'flip',\n        Y: 'fit'\n      } : {\n        X: 'flip',\n        Y: 'flip'\n      },\n      viewPortElement: this.parent.isAdaptive ? document.body : this.parent.element,\n      zIndex: this.parent.isAdaptive ? 1002 : 2\n    });\n    var closeButton = this.morePopup.element.querySelector('.' + MORE_EVENT_CLOSE_CLASS);\n    this.renderButton('e-round', ICON + ' ' + CLOSE_ICON_CLASS, false, closeButton, this.closeClick);\n    EventHandler.add(this.morePopup.element.querySelector('.' + MORE_EVENT_HEADER_DATE_CLASS), 'click', this.navigationClick, this);\n  };\n\n  QuickPopups.prototype.renderQuickDialog = function () {\n    var buttonModel = [{\n      buttonModel: {\n        cssClass: 'e-quick-alertok e-flat',\n        isPrimary: true\n      },\n      click: this.dialogButtonClick.bind(this)\n    }, {\n      buttonModel: {\n        cssClass: 'e-quick-alertcancel e-flat',\n        isPrimary: false\n      },\n      click: this.dialogButtonClick.bind(this)\n    }, {\n      buttonModel: {\n        cssClass: 'e-quick-dialog-cancel e-disable e-flat',\n        isPrimary: false\n      },\n      click: this.dialogButtonClick.bind(this)\n    }];\n\n    if (this.parent.eventSettings.editFollowingEvents) {\n      var followingSeriesButton = {\n        buttonModel: {\n          cssClass: 'e-quick-alertfollowing e-flat',\n          isPrimary: false\n        },\n        click: this.dialogButtonClick.bind(this)\n      };\n      buttonModel.splice(1, 0, followingSeriesButton);\n    }\n\n    this.quickDialog = new Dialog({\n      animationSettings: {\n        effect: 'Zoom'\n      },\n      buttons: buttonModel,\n      cssClass: QUICK_DIALOG_CLASS,\n      closeOnEscape: true,\n      enableRtl: this.parent.enableRtl,\n      enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n      beforeClose: this.beforeQuickDialogClose.bind(this),\n      isModal: true,\n      position: {\n        X: 'center',\n        Y: 'center'\n      },\n      showCloseIcon: true,\n      target: document.body,\n      visible: false,\n      width: 'auto'\n    });\n    var dialogElement = createElement('div', {\n      id: this.parent.element.id + 'QuickDialog'\n    });\n    this.parent.element.appendChild(dialogElement);\n    this.quickDialog.appendTo(dialogElement);\n    var okButton = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_OK);\n\n    if (okButton) {\n      okButton.setAttribute('aria-label', this.l10n.getConstant('occurrence'));\n      okButton.setAttribute('aria-label', okButton.innerHTML);\n    }\n\n    var cancelButton = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_CANCEL);\n\n    if (cancelButton) {\n      cancelButton.setAttribute('aria-label', this.l10n.getConstant('series'));\n      cancelButton.setAttribute('aria-label', cancelButton.innerHTML);\n    }\n\n    if (this.quickDialog.element.querySelector('.e-dlg-closeicon-btn')) {\n      this.quickDialog.element.querySelector('.e-dlg-closeicon-btn').setAttribute('title', this.l10n.getConstant('close'));\n    }\n  }; // eslint-disable-next-line max-len\n\n\n  QuickPopups.prototype.renderButton = function (className, iconName, isDisabled, element, clickEvent) {\n    var buttonObj = new Button({\n      cssClass: className,\n      disabled: isDisabled,\n      enableRtl: this.parent.enableRtl,\n      enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n      iconCss: iconName\n    });\n    buttonObj.appendTo(element);\n    EventHandler.add(element, 'click', clickEvent, this);\n    removeClass([element], ICON);\n  };\n\n  QuickPopups.prototype.quickDialogClass = function (action) {\n    var classList$$1 = [QUICK_DIALOG_OCCURRENCE_CLASS, QUICK_DIALOG_SERIES_CLASS, QUICK_DIALOG_DELETE_CLASS, QUICK_DIALOG_CANCEL_CLASS, QUICK_DIALOG_ALERT_BTN_CLASS, DISABLE_CLASS];\n    var okButton = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_OK);\n    var cancelButton = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_CANCEL);\n    var followingEventButton = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_FOLLOWING);\n    removeClass([okButton, cancelButton], classList$$1);\n    addClass([this.quickDialog.element.querySelector('.' + QUICK_DIALOG_CANCEL_CLASS)], DISABLE_CLASS);\n\n    if (this.parent.eventSettings.editFollowingEvents) {\n      addClass([followingEventButton], DISABLE_CLASS);\n      removeClass([this.quickDialog.element], FOLLOWING_EVENTS_DIALOG);\n    }\n\n    switch (action) {\n      case 'Recurrence':\n        addClass([okButton], QUICK_DIALOG_OCCURRENCE_CLASS);\n        addClass([cancelButton], QUICK_DIALOG_SERIES_CLASS);\n\n        if (this.parent.eventSettings.editFollowingEvents) {\n          removeClass([followingEventButton], DISABLE_CLASS);\n          addClass([this.quickDialog.element], FOLLOWING_EVENTS_DIALOG);\n          addClass([followingEventButton], QUICK_DIALOG_FOLLOWING_EVENTS_CLASS);\n        }\n\n        break;\n\n      case 'Delete':\n        addClass([okButton], QUICK_DIALOG_DELETE_CLASS);\n        addClass([cancelButton], QUICK_DIALOG_CANCEL_CLASS);\n        break;\n\n      case 'Alert':\n        addClass([okButton], [QUICK_DIALOG_ALERT_OK, QUICK_DIALOG_ALERT_BTN_CLASS]);\n        addClass([cancelButton], [QUICK_DIALOG_ALERT_CANCEL, DISABLE_CLASS]);\n        break;\n    }\n  };\n\n  QuickPopups.prototype.applyFormValidation = function () {\n    var form = this.quickPopup.element.querySelector('.' + FORM_CLASS);\n    var rules = {};\n    rules[this.parent.eventSettings.fields.subject.name] = this.parent.eventSettings.fields.subject.validation;\n    this.fieldValidator.renderFormValidator(form, rules, this.quickPopup.element, this.parent.locale);\n  };\n\n  QuickPopups.prototype.openRecurrenceAlert = function () {\n    var editDeleteOnly = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_OK);\n\n    if (editDeleteOnly) {\n      editDeleteOnly.innerHTML = this.l10n.getConstant(this.parent.currentAction === 'Delete' ? 'deleteEvent' : 'editEvent');\n      editDeleteOnly.setAttribute('aria-label', editDeleteOnly.innerHTML);\n    }\n\n    var editFollowingEventsOnly = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_FOLLOWING);\n\n    if (editFollowingEventsOnly) {\n      editFollowingEventsOnly.innerHTML = this.l10n.getConstant('editFollowingEvent');\n      editFollowingEventsOnly.setAttribute('aria-label', editFollowingEventsOnly.innerHTML);\n    }\n\n    var editDeleteSeries = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_CANCEL);\n\n    if (editDeleteSeries) {\n      editDeleteSeries.innerHTML = this.l10n.getConstant(this.parent.currentAction === 'Delete' ? 'deleteSeries' : 'editSeries');\n      editDeleteSeries.setAttribute('aria-label', editDeleteSeries.innerHTML);\n    }\n\n    this.quickDialog.content = this.l10n.getConstant('editContent');\n    this.quickDialog.header = this.l10n.getConstant(this.parent.currentAction === 'Delete' ? 'deleteTitle' : 'editTitle');\n    this.quickDialogClass('Recurrence');\n    var activeEvent = this.parent.activeEventData.event;\n\n    if (this.parent.eventSettings.editFollowingEvents && this.parent.currentAction === 'EditOccurrence' && !isNullOrUndefined(activeEvent[this.parent.eventFields.recurrenceID]) && activeEvent[this.parent.eventFields.recurrenceID] !== activeEvent[this.parent.eventFields.id]) {\n      var followingEventButton = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_FOLLOWING);\n      addClass([followingEventButton], DISABLE_CLASS);\n    }\n\n    this.showQuickDialog('RecurrenceAlert');\n  };\n\n  QuickPopups.prototype.openRecurrenceValidationAlert = function (type) {\n    this.quickDialogClass('Alert');\n    var okButton = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_OK);\n    okButton.innerHTML = this.l10n.getConstant('ok');\n    okButton.setAttribute('aria-label', okButton.innerHTML);\n    var cancelButton = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_CANCEL);\n    cancelButton.innerHTML = this.l10n.getConstant('cancel');\n    cancelButton.setAttribute('aria-label', cancelButton.innerHTML);\n    this.quickDialog.header = this.l10n.getConstant('alert');\n    var dialogCancel;\n\n    switch (type) {\n      case 'wrongPattern':\n        addClass([cancelButton], DISABLE_CLASS);\n        this.quickDialog.content = this.l10n.getConstant('wrongPattern');\n        break;\n\n      case 'createError':\n        addClass([cancelButton], DISABLE_CLASS);\n        this.quickDialog.content = this.l10n.getConstant('createError');\n        break;\n\n      case 'sameDayAlert':\n        addClass([cancelButton], DISABLE_CLASS);\n        this.quickDialog.content = this.l10n.getConstant('sameDayAlert');\n        break;\n\n      case 'seriesChangeAlert':\n        dialogCancel = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_CANCEL_CLASS);\n        removeClass([cancelButton, dialogCancel], DISABLE_CLASS);\n        this.quickDialog.content = this.l10n.getConstant('seriesChangeAlert');\n        okButton.innerHTML = this.l10n.getConstant('yes');\n        cancelButton.innerHTML = this.l10n.getConstant('no');\n        dialogCancel.innerHTML = this.l10n.getConstant('cancel');\n        break;\n\n      case 'occurrenceAlert':\n        addClass([cancelButton], DISABLE_CLASS);\n        this.quickDialog.content = this.l10n.getConstant('occurenceAlert');\n        break;\n    }\n\n    if (!this.parent.enableRecurrenceValidation && type === 'wrongPattern' || this.parent.enableRecurrenceValidation) {\n      this.showQuickDialog('RecurrenceValidationAlert');\n    }\n  };\n\n  QuickPopups.prototype.openDeleteAlert = function () {\n    if (this.parent.activeViewOptions.readonly) {\n      return;\n    }\n\n    var okButton = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_OK);\n\n    if (okButton) {\n      okButton.innerHTML = this.l10n.getConstant('delete');\n      okButton.setAttribute('aria-label', okButton.innerHTML);\n    }\n\n    var cancelButton = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_CANCEL);\n\n    if (cancelButton) {\n      cancelButton.innerHTML = this.l10n.getConstant('cancel');\n      cancelButton.setAttribute('aria-label', cancelButton.innerHTML);\n    }\n\n    this.quickDialog.content = this.parent.activeEventData.event.length > 1 ? this.l10n.getConstant('deleteMultipleContent') : this.l10n.getConstant('deleteContent');\n    this.quickDialog.header = this.parent.activeEventData.event.length > 1 ? this.l10n.getConstant('deleteMultipleEvent') : this.l10n.getConstant('deleteEvent');\n    this.quickDialogClass('Delete');\n    this.showQuickDialog('DeleteAlert');\n  };\n\n  QuickPopups.prototype.openValidationError = function (type, eventData) {\n    this.quickDialog.header = this.l10n.getConstant('alert');\n    this.quickDialog.content = this.l10n.getConstant(type);\n    var okButton = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_OK);\n\n    if (okButton) {\n      okButton.innerHTML = this.l10n.getConstant('ok');\n      okButton.setAttribute('aria-label', okButton.innerHTML);\n    }\n\n    var cancelButton = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_CANCEL);\n\n    if (cancelButton) {\n      cancelButton.innerHTML = this.l10n.getConstant('cancel');\n      okButton.setAttribute('aria-label', cancelButton.innerHTML);\n    }\n\n    this.quickDialogClass('Alert');\n    this.showQuickDialog('ValidationAlert', eventData);\n  };\n\n  QuickPopups.prototype.showQuickDialog = function (popupType, eventData) {\n    var _this = this;\n\n    this.quickDialog.dataBind();\n    var eventProp = {\n      type: popupType,\n      cancel: false,\n      element: this.quickDialog.element,\n      data: extend({}, eventData || this.parent.activeEventData.event, null, true)\n    };\n    this.parent.trigger(popupOpen, eventProp, function (popupArgs) {\n      if (!popupArgs.cancel) {\n        _this.quickDialog.show();\n      }\n    });\n  };\n\n  QuickPopups.prototype.createMoreEventList = function (eventCollection, groupOrder, groupIndex) {\n    var _this = this;\n\n    var fields = this.parent.eventFields;\n    var moreEventContentEle = createElement('div', {\n      className: MORE_EVENT_CONTENT_CLASS\n    });\n    var moreEventWrapperEle = createElement('div', {\n      className: MORE_EVENT_WRAPPER_CLASS\n    });\n\n    if (eventCollection.length === 0) {\n      moreEventWrapperEle = createElement('div', {\n        className: MORE_EVENT_CONTENT_CLASS,\n        innerHTML: this.l10n.getConstant('emptyContainer')\n      });\n    } else {\n      var _loop_1 = function (eventData) {\n        var eventText = eventData[fields.subject] || this_1.parent.eventSettings.fields.subject.default || this_1.parent.localeObj.getConstant('addTitle');\n        var appointmentElement = createElement('div', {\n          className: APPOINTMENT_CLASS,\n          attrs: {\n            'data-id': '' + eventData[fields.id],\n            'data-guid': eventData.Guid,\n            'role': 'button',\n            'tabindex': '0',\n            'aria-disabled': this_1.parent.eventBase.getReadonlyAttribute(eventData),\n            'aria-label': this_1.parent.getAnnouncementString(eventData)\n          }\n        });\n        var templateElement = void 0;\n\n        if (!isNullOrUndefined(this_1.parent.activeViewOptions.eventTemplate)) {\n          var tempId = this_1.parent.element.id + '_' + this_1.parent.activeViewOptions.eventTemplateName + 'eventTemplate';\n          templateElement = this_1.parent.getAppointmentTemplate()(eventData, this_1.parent, 'eventTemplate', tempId, false);\n          append(templateElement, appointmentElement);\n        } else {\n          appointmentElement.appendChild(createElement('div', {\n            className: SUBJECT_CLASS\n          }));\n          this_1.parent.sanitize(eventText, appointmentElement.firstElementChild);\n        }\n\n        if (!isNullOrUndefined(groupIndex)) {\n          appointmentElement.setAttribute('data-group-index', groupIndex);\n        }\n\n        if (!isNullOrUndefined(eventData[fields.recurrenceRule])) {\n          var iconClass = eventData[fields.id] === eventData[fields.recurrenceID] ? EVENT_RECURRENCE_ICON_CLASS : EVENT_RECURRENCE_EDIT_ICON_CLASS;\n          appointmentElement.appendChild(createElement('div', {\n            className: ICON + ' ' + iconClass\n          }));\n        }\n\n        var args = {\n          data: extend({}, eventData, null, true),\n          element: appointmentElement,\n          cancel: false\n        };\n        this_1.parent.trigger(eventRendered, args, function (eventArgs) {\n          if (!eventArgs.cancel) {\n            moreEventWrapperEle.appendChild(appointmentElement);\n            var isPreventCrud = _this.parent.isAdaptive || _this.parent.currentView === 'Year';\n\n            _this.parent.eventBase.wireAppointmentEvents(appointmentElement, eventData, isPreventCrud);\n\n            _this.parent.eventBase.applyResourceColor(appointmentElement, eventData, 'backgroundColor', groupOrder);\n          }\n        });\n      };\n\n      var this_1 = this;\n\n      for (var _i = 0, eventCollection_1 = eventCollection; _i < eventCollection_1.length; _i++) {\n        var eventData = eventCollection_1[_i];\n\n        _loop_1(eventData);\n      }\n    }\n\n    moreEventContentEle.appendChild(moreEventWrapperEle);\n    return moreEventContentEle;\n  };\n\n  QuickPopups.prototype.tapHoldEventPopup = function (e) {\n    var target = closest(e.target, '.' + APPOINTMENT_CLASS);\n    this.isMultipleEventSelect = false;\n    this.parent.selectedElements = [];\n    this.isMultipleEventSelect = true;\n    this.parent.eventBase.getSelectedEventElements(target);\n    this.parent.activeEventData = this.parent.eventBase.getSelectedEvents();\n    var guid = target.getAttribute('data-guid');\n    var eventObj = this.parent.eventBase.getEventByGuid(guid);\n\n    if (isNullOrUndefined(eventObj)) {\n      return;\n    }\n\n    var eventTitle = eventObj[this.parent.eventFields.subject] || this.l10n.getConstant('noTitle');\n    var eventTemplate = \"<div class=\\\"\" + MULTIPLE_EVENT_POPUP_CLASS + \"\\\"><div class=\\\"\" + POPUP_HEADER_CLASS + \"\\\">\" + (\"<button class=\\\"\" + CLOSE_CLASS + \"\\\" title=\\\"\" + this.l10n.getConstant('close') + \"\\\"></button>\") + (\"<div class=\\\"\" + SUBJECT_CLASS + \"\\\">\" + eventTitle + \"</div>\") + (\"<button class=\\\"\" + EDIT_CLASS + \"\\\" title=\\\"\" + this.l10n.getConstant('edit') + \"\\\"></button>\") + (\"<button class=\\\"\" + DELETE_CLASS + \"\\\" title=\\\"\" + this.l10n.getConstant('delete') + \"\\\"></button></div></div>\");\n    this.quickPopup.element.innerHTML = eventTemplate;\n    var closeIcon = this.quickPopup.element.querySelector('.' + CLOSE_CLASS);\n    this.renderButton('e-flat e-round e-small', ICON + ' ' + CLOSE_ICON_CLASS, false, closeIcon, this.closeClick);\n    var readonly = this.parent.activeViewOptions.readonly || eventObj[this.parent.eventFields.isReadonly];\n    var editAction = !this.parent.eventSettings.allowEditing || readonly;\n    var deleteAction = !this.parent.eventSettings.allowDeleting || readonly;\n    var editIcon = this.quickPopup.element.querySelector('.' + EDIT_CLASS);\n\n    if (editIcon) {\n      this.renderButton('e-flat e-round e-small', ICON + ' ' + EDIT_ICON_CLASS, editAction, editIcon, this.editClick);\n    }\n\n    var deleteIcon = this.quickPopup.element.querySelector('.' + DELETE_CLASS);\n\n    if (deleteIcon) {\n      this.renderButton('e-flat e-round e-small', ICON + ' ' + DELETE_ICON_CLASS, deleteAction, deleteIcon, this.deleteClick);\n    }\n\n    this.beforeQuickPopupOpen(target, this.parent.eventBase.getPageCoordinates(e));\n  };\n\n  QuickPopups.prototype.isCellBlocked = function (args) {\n    var tempObj = {};\n    tempObj[this.parent.eventFields.startTime] = this.parent.activeCellsData.startTime;\n    tempObj[this.parent.eventFields.endTime] = this.parent.activeCellsData.endTime;\n    tempObj[this.parent.eventFields.isAllDay] = this.parent.activeCellsData.isAllDay;\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      var targetCell = args.element instanceof Array ? args.element[0] : args.element;\n      var groupIndex = parseInt(targetCell.getAttribute('data-group-index'), 10);\n      this.parent.resourceBase.setResourceValues(tempObj, isNaN(groupIndex) ? null : groupIndex);\n    }\n\n    return this.parent.eventBase.isBlockRange(tempObj);\n  };\n\n  QuickPopups.prototype.cellClick = function (args) {\n    var date = new Date(args.startTime.getTime());\n\n    if (!this.parent.showQuickInfo || !this.parent.eventSettings.allowAdding || this.parent.currentView === 'MonthAgenda' || this.isCellBlocked(args) || !this.parent.isMinMaxDate(new Date(date.setHours(0, 0, 0, 0)))) {\n      this.quickPopupHide();\n      return;\n    }\n\n    var targetEle = !isNullOrUndefined(args.event) ? args.event.target : args.element;\n\n    if (this.parent.isAdaptive) {\n      this.quickPopupHide();\n      var newEventClone = this.parent.element.querySelector('.' + NEW_EVENT_CLASS);\n\n      if (isNullOrUndefined(newEventClone)) {\n        newEventClone = createElement('div', {\n          className: NEW_EVENT_CLASS,\n          innerHTML: \"<div class=\\\"e-title\\\">+ \" + this.l10n.getConstant('newEvent') + \"</div>\"\n        });\n      }\n\n      var targetCell = closest(targetEle, '.' + WORK_CELLS_CLASS + ',.' + ALLDAY_CELLS_CLASS);\n\n      if (targetCell) {\n        targetCell.appendChild(newEventClone);\n      }\n\n      return;\n    }\n\n    var target = closest(targetEle, '.' + WORK_CELLS_CLASS + ',.' + ALLDAY_CELLS_CLASS + ',.' + HEADER_CELLS_CLASS);\n\n    if (isNullOrUndefined(target) || targetEle.classList.contains(MORE_INDICATOR_CLASS)) {\n      return;\n    }\n\n    var isSameTarget = this.quickPopup.relateTo === target;\n\n    if (isSameTarget && this.quickPopup.element.classList.contains(POPUP_OPEN)) {\n      var subjectElement_1 = this.quickPopup.element.querySelector('.' + SUBJECT_CLASS);\n\n      if (subjectElement_1) {\n        subjectElement_1.focus();\n      }\n\n      return;\n    } else if (this.quickPopup.element) {\n      this.destroyPopupButtons('quickPopup');\n    }\n\n    var temp = {};\n    temp[this.parent.eventFields.startTime] = this.parent.activeCellsData.startTime;\n    temp[this.parent.eventFields.endTime] = this.parent.activeCellsData.endTime;\n    temp[this.parent.eventFields.isAllDay] = this.parent.activeCellsData.isAllDay;\n    var quickCellPopup = createElement('div', {\n      className: CELL_POPUP_CLASS\n    });\n    quickCellPopup.appendChild(this.getPopupHeader('Cell', temp));\n    quickCellPopup.appendChild(this.getPopupContent('Cell', args, temp));\n    quickCellPopup.appendChild(this.getPopupFooter('Cell', temp));\n    var subjectElement = quickCellPopup.querySelector('.' + SUBJECT_CLASS);\n\n    if (subjectElement) {\n      Input.createInput({\n        element: subjectElement,\n        properties: {\n          placeholder: this.l10n.getConstant('addTitle')\n        }\n      });\n    }\n\n    if (!isNullOrUndefined(this.parent.eventSettings.fields.subject.default)) {\n      subjectElement.value = this.parent.eventSettings.fields.subject.default;\n    }\n\n    var closeIcon = quickCellPopup.querySelector('.' + CLOSE_CLASS);\n\n    if (closeIcon) {\n      this.renderButton('e-flat e-round e-small', ICON + ' ' + CLOSE_ICON_CLASS, false, closeIcon, this.popupClose);\n    }\n\n    var moreButton = quickCellPopup.querySelector('.' + QUICK_POPUP_EVENT_DETAILS_CLASS);\n\n    if (moreButton) {\n      this.renderButton('e-flat', '', false, moreButton, this.detailsClick);\n    }\n\n    var saveButton = quickCellPopup.querySelector('.' + EVENT_CREATE_CLASS);\n\n    if (saveButton) {\n      this.renderButton('e-flat e-primary', '', this.parent.activeViewOptions.readonly, saveButton, this.saveClick);\n    }\n\n    if (this.morePopup) {\n      this.morePopup.hide();\n    }\n\n    this.quickPopup.content = quickCellPopup;\n    this.quickPopup.relateTo = target;\n    this.quickPopup.dataBind();\n    this.beforeQuickPopupOpen(target, this.parent.eventBase.getPageCoordinates(args.event));\n  };\n\n  QuickPopups.prototype.isSameEventClick = function (events) {\n    var isSameTarget = this.quickPopup.relateTo === closest(events.element, '.' + APPOINTMENT_CLASS);\n\n    if (isSameTarget && this.quickPopup.element.classList.contains(POPUP_OPEN)) {\n      var editIcon = this.quickPopup.element.querySelector('.' + EDIT_CLASS);\n\n      if (editIcon) {\n        editIcon.focus();\n      }\n\n      if (!this.parent.isAdaptive) {\n        var editButton = this.quickPopup.element.querySelector('.' + EDIT_EVENT_CLASS);\n\n        if (editButton) {\n          editButton.focus();\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  QuickPopups.prototype.isQuickTemplate = function (type) {\n    return this.parent.quickInfoTemplates.templateType === 'Both' || this.parent.quickInfoTemplates.templateType === type;\n  };\n\n  QuickPopups.prototype.eventClick = function (events) {\n    if (this.parent.eventTooltip) {\n      this.parent.eventTooltip.close();\n    }\n\n    if (!this.parent.showQuickInfo) {\n      return;\n    }\n\n    if (this.parent.isAdaptive && this.isMultipleEventSelect) {\n      this.updateTapHoldEventPopup(closest(events.element, '.' + APPOINTMENT_CLASS));\n    } else {\n      var isSameTarget = this.isSameEventClick(events);\n      this.parent.selectedElements = [];\n\n      if (isSameTarget) {\n        return;\n      } else if (this.quickPopup.element) {\n        this.destroyPopupButtons('quickPopup');\n      }\n\n      var eventData = events.event;\n      var quickEventPopup = createElement('div', {\n        className: EVENT_POPUP_CLASS\n      });\n      quickEventPopup.appendChild(this.getPopupHeader('Event', eventData));\n      quickEventPopup.appendChild(this.getPopupContent('Event', events, eventData));\n      quickEventPopup.appendChild(this.getPopupFooter('Event', eventData));\n      var readonly = this.parent.activeViewOptions.readonly || eventData[this.parent.eventFields.isReadonly];\n      var editAction = !this.parent.eventSettings.allowEditing || readonly;\n      var deleteAction = !this.parent.eventSettings.allowDeleting || readonly;\n      var editIcon = quickEventPopup.querySelector('.' + EDIT_CLASS);\n      var buttonClass = 'e-flat e-round e-small';\n\n      if (editIcon) {\n        this.renderButton(buttonClass, ICON + ' ' + EDIT_ICON_CLASS, editAction, editIcon, this.editClick);\n      }\n\n      var deleteIcon = quickEventPopup.querySelector('.' + DELETE_CLASS);\n\n      if (deleteIcon) {\n        this.renderButton(buttonClass, ICON + ' ' + DELETE_ICON_CLASS, deleteAction, deleteIcon, this.deleteClick);\n      }\n\n      var closeIcon = quickEventPopup.querySelector('.' + CLOSE_CLASS);\n\n      if (closeIcon) {\n        this.renderButton(buttonClass, ICON + ' ' + CLOSE_ICON_CLASS, false, closeIcon, this.popupClose);\n      }\n\n      var editButton = quickEventPopup.querySelector('.' + EDIT_EVENT_CLASS);\n\n      if (editButton) {\n        this.renderButton('e-flat e-primary', '', editAction, editButton, this.editClick);\n      }\n\n      var deleteButton = quickEventPopup.querySelector('.' + DELETE_EVENT_CLASS);\n\n      if (deleteButton) {\n        this.renderButton('e-flat', '', deleteAction, deleteButton, this.deleteClick);\n      }\n\n      if (this.morePopup && !closest(events.element, '.' + MORE_EVENT_WRAPPER_CLASS)) {\n        this.morePopup.hide();\n      }\n\n      this.quickPopup.content = quickEventPopup;\n      this.quickPopup.relateTo = this.parent.isAdaptive ? document.body : closest(events.element, '.' + APPOINTMENT_CLASS);\n      this.quickPopup.dataBind();\n      this.beforeQuickPopupOpen(events.element, this.parent.eventBase.getPageCoordinates(events.originalEvent));\n    }\n  };\n\n  QuickPopups.prototype.getPopupHeader = function (headerType, headerData) {\n    var headerTemplate = createElement('div', {\n      className: POPUP_HEADER_CLASS\n    });\n\n    if (this.isQuickTemplate(headerType) && this.parent.quickInfoTemplates.header) {\n      var headerArgs = extend({}, headerData, {\n        elementType: headerType.toLowerCase()\n      }, true);\n      var templateId = this.parent.element.id;\n      var headerTemp = [].slice.call(this.parent.getQuickInfoTemplatesHeader()(headerArgs, this.parent, 'header', templateId + '_headerTemplate', false));\n      append([].slice.call(headerTemp), headerTemplate);\n    } else {\n      var header = void 0;\n      var args = void 0;\n\n      switch (headerType) {\n        case 'Cell':\n          header = \"<div class=\\\"\" + POPUP_HEADER_ICON_WRAPPER + \"\\\"><button class=\\\"\" + CLOSE_CLASS + \"\\\" title=\" + (\"\\\"\" + this.l10n.getConstant('close') + \"\\\"></button></div>\");\n          break;\n\n        case 'Event':\n          args = this.getFormattedString(headerData);\n          header = \"<div class=\\\"\" + POPUP_HEADER_ICON_WRAPPER + \"\\\">\" + (\"<button class=\\\"\" + (EDIT_CLASS + ' ' + ICON) + \"\\\" title=\\\"\" + this.l10n.getConstant('edit') + \"\\\"></button>\") + (\"<button class=\\\"\" + (DELETE_CLASS + ' ' + ICON) + \"\\\" title=\\\"\" + this.l10n.getConstant('delete') + \"\\\"></button>\") + (\"<button class=\\\"\" + CLOSE_CLASS + \"\\\" title=\\\"\" + this.l10n.getConstant('close') + \"\\\"></button></div>\") + (\"<div class=\\\"\" + SUBJECT_WRAP + \"\\\"><div class=\\\"\" + SUBJECT_CLASS + \" \" + TEXT_ELLIPSIS + \"\\\" \") + (\"title=\\\"\" + (args.eventSubject ? args.eventSubject.replaceAll('\"', '\\'') : args.eventSubject) + \"\\\"></div></div >\");\n          break;\n      }\n\n      var templateWrapper = createElement('div', {\n        innerHTML: header\n      });\n\n      if (headerType === 'Event') {\n        var subjectText = templateWrapper.querySelector('.' + SUBJECT_CLASS);\n        this.parent.sanitize(args.eventSubject, subjectText);\n      }\n\n      append([].slice.call(templateWrapper.childNodes), headerTemplate);\n    }\n\n    return headerTemplate;\n  };\n\n  QuickPopups.prototype.getPopupContent = function (type, args, data) {\n    var contentTemplate = createElement('div', {\n      className: POPUP_CONTENT_CLASS\n    });\n\n    if (this.isQuickTemplate(type) && this.parent.quickInfoTemplates.content) {\n      var contentArgs = extend({}, data, {\n        elementType: type.toLowerCase()\n      }, true);\n      var templateId = this.parent.element.id;\n      var contentTemp = [].slice.call(this.parent.getQuickInfoTemplatesContent()(contentArgs, this.parent, 'content', templateId + '_contentTemplate', false));\n      append([].slice.call(contentTemp), contentTemplate);\n    } else {\n      var content = void 0;\n      var cellDetails = void 0;\n      var argsData = void 0;\n      var resourceText = this.getResourceText(args, type.toLowerCase());\n\n      switch (type) {\n        case 'Cell':\n          cellDetails = this.getFormattedString(data);\n          content = \"<table class=\\\"\" + POPUP_TABLE_CLASS + \"\\\"><tbody><tr><td><form class=\\\"\" + FORM_CLASS + \"\\\" onsubmit=\" + (\"\\\"return false;\\\"><input class=\\\"\" + SUBJECT_CLASS + \" \" + EVENT_FIELD + \"\\\" type=\\\"text\\\" name=\") + (\"\\\"\" + this.parent.eventFields.subject + \"\\\" /></form></td></tr><tr><td><div class=\\\"\" + DATE_TIME_CLASS + \"\\\">\") + (\"<div class=\\\"\" + DATE_TIME_ICON_CLASS + \" \" + ICON + \"\\\"></div><div class=\\\"\" + DATE_TIME_DETAILS_CLASS + \" \") + (TEXT_ELLIPSIS + \"\\\">\" + cellDetails.details + \"</div></div>\") + ((this.parent.activeViewOptions.group.resources.length > 0 ? \"<div class=\\\"\" + RESOURCE_CLASS + \"\\\">\" + (\"<div class=\\\"\" + RESOURCE_ICON_CLASS + \" \" + ICON + \" \\\"></div><div class=\\\"\" + RESOURCE_DETAILS_CLASS + \" \") + (TEXT_ELLIPSIS + \"\\\"></div></div>\") : '') + \"</td></tr></tbody></table>\");\n          break;\n\n        case 'Event':\n          argsData = this.getFormattedString(data);\n          content = '<div class=\"' + DATE_TIME_CLASS + '\"><div class=\"' + DATE_TIME_ICON_CLASS + ' ' + ICON + '\"></div><div class=\"' + DATE_TIME_WRAPPER_CLASS + ' ' + TEXT_ELLIPSIS + '\"><div class=\"' + DATE_TIME_DETAILS_CLASS + ' ' + TEXT_ELLIPSIS + '\">' + argsData.details + '</div>';\n\n          if (data[this.parent.eventFields.recurrenceRule]) {\n            content += '<div class=\"' + RECURRENCE_SUMMARY_CLASS + ' ' + TEXT_ELLIPSIS + '\">' + this.getRecurrenceSummary(data) + '</div>';\n          }\n\n          content += '</div></div>';\n\n          if (data[this.parent.eventFields.location]) {\n            content += '<div class=\"' + LOCATION_CLASS + '\"><div class=\"' + LOCATION_ICON_CLASS + ' ' + ICON + '\"></div><div class=\"' + LOCATION_DETAILS_CLASS + ' ' + TEXT_ELLIPSIS + '\"></div></div>';\n          }\n\n          if (data[this.parent.eventFields.startTimezone] || data[this.parent.eventFields.endTimezone]) {\n            content += '<div class=\"' + TIME_ZONE_CLASS + '\"><div class=\"' + TIME_ZONE_ICON_CLASS + ' ' + ICON + '\"></div><div class=\"' + TIME_ZONE_DETAILS_CLASS + ' ' + TEXT_ELLIPSIS + '\">' + this.getTimezone(data) + '</div></div>';\n          }\n\n          if (data[this.parent.eventFields.description]) {\n            content += '<div class=\"' + DESCRIPTION_CLASS + '\"><div class=\"' + DESCRIPTION_ICON_CLASS + ' ' + ICON + '\"></div><div class=\"' + DESCRIPTION_DETAILS_CLASS + ' ' + TEXT_ELLIPSIS + '\"></div></div>';\n          }\n\n          if (this.parent.resourceCollection.length > 0) {\n            content += '<div class=\"' + RESOURCE_CLASS + '\"><div class=\"' + RESOURCE_ICON_CLASS + ' ' + ICON + '\"></div><div class=\"' + RESOURCE_DETAILS_CLASS + ' ' + TEXT_ELLIPSIS + '\"></div></div>';\n          }\n\n          break;\n      }\n\n      var templateWrapper = createElement('div', {\n        innerHTML: content\n      });\n\n      if (data[this.parent.eventFields.location]) {\n        var locationDetails = templateWrapper.querySelector('.' + LOCATION_DETAILS_CLASS);\n\n        if (!isNullOrUndefined(locationDetails)) {\n          this.parent.sanitize(data[this.parent.eventFields.location], locationDetails);\n        }\n      }\n\n      if (data[this.parent.eventFields.description]) {\n        var descriptionDetails = templateWrapper.querySelector('.' + DESCRIPTION_DETAILS_CLASS);\n\n        if (!isNullOrUndefined(descriptionDetails)) {\n          this.parent.sanitize(data[this.parent.eventFields.description], descriptionDetails);\n        }\n      }\n\n      if (resourceText) {\n        var resourceDetails = templateWrapper.querySelector('.' + RESOURCE_DETAILS_CLASS);\n\n        if (!isNullOrUndefined(resourceDetails)) {\n          this.parent.sanitize(resourceText, resourceDetails);\n        }\n      }\n\n      append([].slice.call(templateWrapper.childNodes), contentTemplate);\n    }\n\n    return contentTemplate;\n  };\n\n  QuickPopups.prototype.getPopupFooter = function (footerType, footerData) {\n    var footerTemplate = createElement('div', {\n      className: POPUP_FOOTER_CLASS\n    });\n\n    if (this.isQuickTemplate(footerType) && this.parent.quickInfoTemplates.footer) {\n      var footerArgs = extend({}, footerData, {\n        elementType: footerType.toLowerCase()\n      }, true);\n      var templateId = this.parent.element.id;\n      var footerTemp = [].slice.call(this.parent.getQuickInfoTemplatesFooter()(footerArgs, this.parent, 'footer', templateId + '_footerTemplate', false));\n      append([].slice.call(footerTemp), footerTemplate);\n    } else {\n      var footer = void 0;\n\n      switch (footerType) {\n        case 'Cell':\n          footer = \"<button class=\\\"\" + (QUICK_POPUP_EVENT_DETAILS_CLASS + ' ' + TEXT_ELLIPSIS) + \"\\\" title=\" + (\"\\\"\" + this.l10n.getConstant('moreDetails') + \"\\\">\" + this.l10n.getConstant('moreDetails') + \"</button>\") + (\"<button class=\\\"\" + EVENT_CREATE_CLASS + \" \" + TEXT_ELLIPSIS + \"\\\" title=\\\"\" + this.l10n.getConstant('save') + \"\\\">\") + (this.l10n.getConstant('save') + \"</button>\");\n          break;\n\n        case 'Event':\n          footer = \"\" + (this.parent.isAdaptive ? '' : \"<button class=\\\"\" + EDIT_EVENT_CLASS + \" \" + (TEXT_ELLIPSIS + \"\\\" title=\\\"\" + this.l10n.getConstant('edit') + \"\\\">\" + this.l10n.getConstant('edit') + \"</button>\") + (\"<button class=\\\"\" + DELETE_EVENT_CLASS + \" \" + TEXT_ELLIPSIS + \"\\\" title=\\\"\" + this.l10n.getConstant('delete') + \"\\\">\") + (this.l10n.getConstant('delete') + \"</button>\"));\n          break;\n      }\n\n      var templateWrapper = createElement('div', {\n        innerHTML: footer\n      });\n      append([].slice.call(templateWrapper.childNodes), footerTemplate);\n    }\n\n    return footerTemplate;\n  };\n\n  QuickPopups.prototype.getResourceText = function (args, type) {\n    if (this.parent.resourceCollection.length === 0) {\n      return null;\n    }\n\n    var resourceValue = '';\n\n    if (this.parent.activeViewOptions.group.resources.length === 0) {\n      var resourceCollection_1 = this.parent.resourceBase.resourceCollection.slice(-1)[0];\n      var resourceData = resourceCollection_1.dataSource;\n\n      if (type === 'event') {\n        var eventData = args.event;\n\n        var _loop_2 = function (data) {\n          var resourceId = eventData[resourceCollection_1.field];\n\n          if (resourceId instanceof Array) {\n            if (resourceId.indexOf(data[resourceCollection_1.idField]) > -1) {\n              var id_1 = resourceId[resourceId.indexOf(data[resourceCollection_1.idField])];\n              var resource = resourceData.filter(function (e) {\n                return e[resourceCollection_1.idField] === id_1;\n              })[0];\n              resourceValue += resourceValue === '' ? resource[resourceCollection_1.textField] : ', ' + resource[resourceCollection_1.textField];\n            }\n          } else if (data[resourceCollection_1.idField] === resourceId) {\n            resourceValue = data[resourceCollection_1.textField].toString();\n          }\n        };\n\n        for (var _i = 0, resourceData_1 = resourceData; _i < resourceData_1.length; _i++) {\n          var data = resourceData_1[_i];\n\n          _loop_2(data);\n        }\n      } else {\n        resourceValue = resourceData[0][resourceCollection_1.textField].toString();\n      }\n    } else {\n      if (type === 'event') {\n        var eventData = args.event;\n        var resourceData = void 0;\n        var lastResource_1;\n\n        for (var i = this.parent.resourceBase.resourceCollection.length - 1; i >= 0; i--) {\n          resourceData = eventData[this.parent.resourceBase.resourceCollection[parseInt(i.toString(), 10)].field];\n\n          if (!isNullOrUndefined(resourceData)) {\n            lastResource_1 = this.parent.resourceBase.resourceCollection[parseInt(i.toString(), 10)];\n            break;\n          }\n        }\n\n        if (!Array.isArray(resourceData)) {\n          resourceData = [resourceData];\n        }\n\n        var resNames_1 = [];\n        var lastResourceData_1 = lastResource_1.dataSource;\n        resourceData.forEach(function (value) {\n          var text;\n          var i = findIndexInData(lastResourceData_1, lastResource_1.idField, value);\n\n          if (i > -1) {\n            text = lastResourceData_1[parseInt(i.toString(), 10)][lastResource_1.textField];\n          }\n\n          if (text) {\n            resNames_1.push(text);\n          }\n        });\n        resourceValue = resNames_1.join(', ');\n      } else {\n        var argsData = args;\n        var groupIndex = !isNullOrUndefined(argsData.groupIndex) ? argsData.groupIndex : 0;\n        var resourceDetails = this.parent.resourceBase.lastResourceLevel[parseInt(groupIndex.toString(), 10)];\n        resourceValue = resourceDetails.resourceData[resourceDetails.resource.textField];\n      }\n    }\n\n    return resourceValue;\n  };\n\n  QuickPopups.prototype.getFormattedString = function (eventData) {\n    var fields = this.parent.eventFields;\n    var eventSubject = eventData[fields.subject] || this.l10n.getConstant('noTitle');\n    var startDate = eventData[fields.startTime];\n    var endDate = eventData[fields.endTime];\n    var startDateDetails = this.getDateFormat(startDate, 'long');\n    var endDateDetails = eventData[fields.isAllDay] && endDate.getHours() === 0 && endDate.getMinutes() === 0 ? this.getDateFormat(addDays(new Date(endDate.getTime()), -1), 'long') : this.getDateFormat(endDate, 'long');\n    var startTimeDetail = this.parent.getTimeString(startDate);\n    var endTimeDetail = this.parent.getTimeString(endDate);\n    var details = '';\n    var spanLength = endDate.getDate() !== startDate.getDate() && (endDate.getTime() - startDate.getTime()) / (60 * 60 * 1000) < 24 ? 1 : 0;\n\n    if (eventData[fields.isAllDay]) {\n      details = startDateDetails + ' (' + this.l10n.getConstant('allDay') + ')';\n\n      if ((getUniversalTime(endDate) - getUniversalTime(startDate)) / MS_PER_DAY > 1) {\n        details += '&nbsp;-&nbsp;' + endDateDetails + ' (' + this.l10n.getConstant('allDay') + ')';\n      }\n    } else if ((getUniversalTime(endDate) - getUniversalTime(startDate)) / MS_PER_DAY >= 1 || spanLength > 0) {\n      details = startDateDetails + ' (' + startTimeDetail + ')' + '&nbsp;-&nbsp;' + endDateDetails + ' (' + endTimeDetail + ')';\n    } else {\n      details = startDateDetails + ' (' + (startTimeDetail + '&nbsp;-&nbsp;' + endTimeDetail) + ')';\n    }\n\n    return {\n      eventSubject: eventSubject,\n      details: details\n    };\n  };\n\n  QuickPopups.prototype.moreEventClick = function (data, endDate, groupIndex) {\n    var _this = this;\n\n    this.quickPopupHide(true);\n    var moreEventContentEle = this.morePopup.element.querySelector('.' + MORE_EVENT_CONTENT_CLASS);\n\n    if (moreEventContentEle) {\n      remove(moreEventContentEle);\n    }\n\n    var selectedDate = data.date.getTime().toString();\n    var target = closest(data.element, '.' + MORE_INDICATOR_CLASS + ',.' + WORK_CELLS_CLASS);\n    var day = this.parent.globalize.formatDate(data.date, {\n      format: 'E',\n      calendar: this.parent.getCalendarMode()\n    });\n    this.morePopup.element.querySelector('.' + MORE_EVENT_HEADER_DAY_CLASS).innerHTML = capitalizeFirstWord(day, 'single');\n    var dateElement = this.morePopup.element.querySelector('.' + MORE_EVENT_HEADER_DATE_CLASS);\n    dateElement.innerHTML = this.getDateFormat(data.date, 'd');\n    dateElement.setAttribute('data-date', selectedDate);\n    dateElement.setAttribute('data-end-date', endDate.getTime().toString());\n    var groupOrder;\n\n    if (!isNullOrUndefined(groupIndex)) {\n      dateElement.setAttribute('data-group-index', groupIndex);\n      groupOrder = this.parent.resourceBase.lastResourceLevel[parseInt(groupIndex, 10)].groupOrder;\n    }\n\n    var moreEventElements = this.createMoreEventList(data.event, groupOrder, groupIndex);\n    this.morePopup.element.querySelector('.' + MORE_EVENT_POPUP_CLASS).appendChild(moreEventElements);\n    removeClass(this.morePopup.element.querySelector('.' + MORE_EVENT_DATE_HEADER_CLASS).childNodes, CURRENTDATE_CLASS);\n\n    if (resetTime(data.date).getTime() === resetTime(this.parent.getCurrentTime()).getTime()) {\n      addClass(this.morePopup.element.querySelector('.' + MORE_EVENT_DATE_HEADER_CLASS).childNodes, CURRENTDATE_CLASS);\n    }\n\n    if (!this.parent.isAdaptive) {\n      if (this.parent.currentView.indexOf('Timeline') !== -1) {\n        var gIndex = target.getAttribute('data-group-index');\n        var startDate = new Date(parseInt(target.getAttribute('data-start-date'), 10));\n        startDate.setHours(startDate.getHours(), startDate.getMinutes(), 0);\n        var tdDate = startDate.getTime().toString();\n\n        if (isNullOrUndefined(gIndex)) {\n          this.morePopup.relateTo = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS + ' tbody tr td[data-date=\"' + tdDate + '\"]');\n        } else {\n          this.morePopup.relateTo = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS + ' tbody tr td[data-group-index=\"' + gIndex + '\"][data-date=\"' + tdDate + '\"]');\n\n          if (isNullOrUndefined(this.morePopup.relateTo)) {\n            var workCells = [].slice.call(this.parent.element.querySelectorAll('.' + CONTENT_WRAP_CLASS + ' tbody tr td[data-group-index=\"' + gIndex + '\"]'));\n\n            for (var i = 0; i < workCells.length; i++) {\n              var date = workCells[parseInt(i.toString(), 10)].getAttribute('data-date');\n\n              if (date < tdDate) {\n                this.morePopup.relateTo = workCells[parseInt(i.toString(), 10)];\n              }\n            }\n          }\n        }\n      } else {\n        this.morePopup.relateTo = closest(target, '.' + WORK_CELLS_CLASS);\n      }\n    }\n\n    this.parent.renderTemplates(function () {\n      var eventProp = {\n        type: 'EventContainer',\n        cancel: false,\n        element: _this.morePopup.element,\n        data: data\n      };\n\n      _this.parent.trigger(popupOpen, eventProp, function (popupArgs) {\n        if (!popupArgs.cancel) {\n          _this.morePopup.show();\n        }\n      });\n    });\n  };\n\n  QuickPopups.prototype.saveClick = function (event) {\n    this.applyFormValidation();\n    this.dialogEvent = event;\n    this.isCrudAction = true;\n    this.quickPopupHide();\n  };\n\n  QuickPopups.prototype.detailsClick = function (event) {\n    var subjectEle = this.quickPopup.element.querySelector('.' + SUBJECT_CLASS);\n\n    if (subjectEle && subjectEle.value !== '') {\n      extend(this.parent.activeCellsData, {\n        subject: subjectEle.value\n      });\n    }\n\n    this.dialogEvent = event;\n    this.isCrudAction = false;\n    this.fieldValidator.destroyToolTip();\n    this.quickPopupHide();\n    this.parent.eventWindow.openEditor(this.parent.activeCellsData, 'Add');\n  };\n\n  QuickPopups.prototype.editClick = function (event) {\n    this.dialogEvent = event;\n    this.quickPopupHide(true);\n    var data = this.parent.activeEventData.event;\n    this.parent.currentAction = 'EditSeries';\n\n    if (!isNullOrUndefined(data[this.parent.eventFields.recurrenceRule])) {\n      this.parent.currentAction = 'EditOccurrence';\n      this.openRecurrenceAlert();\n    } else {\n      this.parent.eventWindow.openEditor(data, this.parent.currentAction);\n    }\n  };\n\n  QuickPopups.prototype.deleteClick = function (event) {\n    this.dialogEvent = event;\n    this.quickPopupHide(true);\n    this.parent.currentAction = 'Delete';\n\n    if (this.parent.activeEventData.event[this.parent.eventFields.recurrenceRule]) {\n      this.openRecurrenceAlert();\n    } else {\n      this.openDeleteAlert();\n    }\n  };\n\n  QuickPopups.prototype.updateMoreEventContent = function () {\n    if (this.morePopup.element.classList.contains('e-popup-close')) {\n      return;\n    }\n\n    var moreEventContentEle = this.morePopup.element.querySelector('.' + MORE_EVENT_CONTENT_CLASS);\n\n    if (moreEventContentEle) {\n      remove(moreEventContentEle);\n    }\n\n    var dateElement = this.morePopup.element.querySelector('.' + MORE_EVENT_HEADER_DATE_CLASS);\n    var startDate = new Date(parseInt(dateElement.getAttribute('data-date'), 10));\n    var endDate = new Date(parseInt(dateElement.getAttribute('data-end-date'), 10));\n    var groupIndex = dateElement.getAttribute('data-group-index');\n    var data;\n    var groupOrder;\n\n    if (!isNullOrUndefined(groupIndex)) {\n      data = this.parent.resourceBase.lastResourceLevel[parseInt(groupIndex, 10)];\n      groupOrder = data.groupOrder;\n    }\n\n    var events = this.parent.eventBase.filterEvents(startDate, endDate, this.parent.eventsProcessed, data);\n    var moreElement = this.createMoreEventList(events, groupOrder, groupIndex);\n    this.morePopup.element.querySelector('.' + MORE_EVENT_POPUP_CLASS).appendChild(moreElement);\n  };\n\n  QuickPopups.prototype.closeClick = function (event) {\n    this.dialogEvent = event;\n\n    if (this.parent.currentView === 'Year' && this.parent.activeCellsData && this.parent.activeCellsData.element) {\n      this.parent.selectCell(this.parent.activeCellsData.element);\n    }\n\n    this.quickPopupHide();\n    this.morePopup.hide();\n  };\n\n  QuickPopups.prototype.dialogButtonClick = function (event) {\n    this.dialogEvent = event;\n    this.quickDialog.hide();\n    var target = event.target;\n    var cancelBtn = this.quickDialog.element.querySelector('.' + QUICK_DIALOG_ALERT_CANCEL);\n    var eventData = this.parent.activeEventData.event;\n\n    if (target.classList.contains(QUICK_DIALOG_OCCURRENCE_CLASS)) {\n      this.parent.currentAction = this.parent.currentAction === 'Delete' ? 'DeleteOccurrence' : 'EditOccurrence';\n\n      switch (this.parent.currentAction) {\n        case 'EditOccurrence':\n          this.parent.eventWindow.openEditor(eventData, this.parent.currentAction);\n          break;\n\n        case 'DeleteOccurrence':\n          this.parent.crudModule.deleteEvent(eventData, this.parent.currentAction);\n          break;\n      }\n    } else if (target.classList.contains(QUICK_DIALOG_FOLLOWING_EVENTS_CLASS)) {\n      this.parent.currentAction = this.parent.currentAction === 'Delete' ? 'DeleteFollowingEvents' : 'EditFollowingEvents';\n\n      switch (this.parent.currentAction) {\n        case 'EditFollowingEvents':\n          this.parent.eventWindow.openEditor(eventData, this.parent.currentAction);\n          break;\n\n        case 'DeleteFollowingEvents':\n          this.parent.crudModule.deleteEvent(eventData, this.parent.currentAction);\n          break;\n      }\n    } else if (target.classList.contains(QUICK_DIALOG_SERIES_CLASS)) {\n      this.parent.currentAction = this.parent.currentAction === 'Delete' ? 'DeleteSeries' : 'EditSeries';\n\n      switch (this.parent.currentAction) {\n        case 'EditSeries':\n          this.parent.eventWindow.openEditor(this.parent.eventBase.getParentEvent(eventData, true), this.parent.currentAction);\n          break;\n\n        case 'DeleteSeries':\n          this.parent.crudModule.deleteEvent(eventData, this.parent.currentAction);\n          break;\n      }\n    } else if (target.classList.contains(QUICK_DIALOG_DELETE_CLASS)) {\n      this.parent.crudModule.deleteEvent(eventData, this.parent.currentAction);\n    } else if (!cancelBtn.classList.contains(DISABLE_CLASS) && (target.classList.contains(QUICK_DIALOG_ALERT_OK) || target.classList.contains(QUICK_DIALOG_ALERT_CANCEL) && !cancelBtn.classList.contains(QUICK_DIALOG_CANCEL_CLASS))) {\n      this.parent.uiStateValues.isIgnoreOccurrence = target.classList.contains(QUICK_DIALOG_ALERT_CANCEL);\n      this.parent.eventWindow.eventSave(event, this.l10n.getConstant('ok'));\n    }\n  };\n\n  QuickPopups.prototype.updateTapHoldEventPopup = function (target) {\n    var selectedElements = this.parent.eventBase.getSelectedEventElements(target);\n    this.parent.activeEventData = this.parent.eventBase.getSelectedEvents();\n\n    if (selectedElements.length > 0) {\n      var eventObj = this.parent.eventBase.getEventByGuid(selectedElements[0].getAttribute('data-guid'));\n      var titleContent = selectedElements.length === 1 ? eventObj[this.parent.eventFields.subject] || this.l10n.getConstant('noTitle') : '(' + selectedElements.length + ')' + '&nbsp;' + this.l10n.getConstant('selectedItems');\n      this.quickPopup.element.querySelector('.' + SUBJECT_CLASS).innerHTML = titleContent;\n\n      if (selectedElements.length > 1) {\n        addClass([this.quickPopup.element.querySelector('.' + EDIT_ICON_CLASS)], HIDDEN_CLASS);\n      } else {\n        removeClass([this.quickPopup.element.querySelector('.' + EDIT_ICON_CLASS)], HIDDEN_CLASS);\n      }\n    } else {\n      this.parent.selectedElements = [];\n      this.quickPopupHide();\n    }\n  };\n\n  QuickPopups.prototype.getTimezone = function (event) {\n    var zoneDetails = '';\n    zoneDetails += event[this.parent.eventFields.startTimezone] || '';\n    zoneDetails += zoneDetails === '' ? '' : ' - ';\n    zoneDetails += event[this.parent.eventFields.endTimezone] || '';\n    return zoneDetails;\n  };\n\n  QuickPopups.prototype.getRecurrenceSummary = function (event) {\n    var recurrenceEditor = this.parent.eventWindow.getRecurrenceEditorInstance();\n\n    if (recurrenceEditor) {\n      var ruleSummary = recurrenceEditor.getRuleSummary(event[this.parent.eventFields.recurrenceRule]);\n      return ruleSummary.charAt(0).toUpperCase() + ruleSummary.slice(1);\n    }\n\n    return '';\n  };\n\n  QuickPopups.prototype.getDateFormat = function (date, skeletonString) {\n    return capitalizeFirstWord(this.parent.globalize.formatDate(date, {\n      skeleton: skeletonString,\n      calendar: this.parent.getCalendarMode()\n    }), 'single');\n  };\n\n  QuickPopups.prototype.getDataFromTarget = function (target) {\n    if (target.classList.contains(APPOINTMENT_CLASS)) {\n      return this.parent.activeEventData.event;\n    } // Deprecated cells data in quick popups\n\n\n    var eventObj = {\n      startTime: this.parent.activeCellsData.startTime,\n      endTime: this.parent.activeCellsData.endTime,\n      isAllDay: this.parent.activeCellsData.isAllDay,\n      groupIndex: this.parent.activeCellsData.groupIndex\n    };\n    var cellsData = this.parent.activeCellsData;\n    this.parent.eventWindow.convertToEventData(cellsData, eventObj);\n    return eventObj;\n  };\n\n  QuickPopups.prototype.beforeQuickDialogClose = function (e) {\n    var _this = this;\n\n    var args = {\n      event: e.event || this.dialogEvent,\n      type: isNullOrUndefined(this.parent.activeEventData.event) ? 'ValidationAlert' : !isNullOrUndefined(this.parent.activeEventData.event[this.parent.eventFields.recurrenceRule]) ? 'RecurrenceAlert' : 'DeleteAlert',\n      cancel: false,\n      data: this.parent.activeEventData.event,\n      element: this.quickDialog.element\n    };\n    this.parent.trigger(popupClose, args, function (popupCloseArgs) {\n      if (!popupCloseArgs.cancel) {\n        _this.parent.eventBase.focusElement(true);\n      }\n    });\n  };\n\n  QuickPopups.prototype.beforeQuickPopupOpen = function (target, originalEvent) {\n    var _this = this;\n\n    this.parent.renderTemplates(function () {\n      var isEventPopup = _this.quickPopup.element.querySelector('.' + EVENT_POPUP_CLASS);\n\n      var popupType = _this.parent.isAdaptive ? isEventPopup ? 'ViewEventInfo' : 'EditEventInfo' : 'QuickInfo';\n      var eventProp = {\n        type: popupType,\n        cancel: false,\n        data: extend({}, _this.getDataFromTarget(target), null, true),\n        target: target,\n        element: _this.quickPopup.element\n      };\n\n      _this.parent.trigger(popupOpen, eventProp, function (popupArgs) {\n        if (popupArgs.cancel) {\n          _this.quickPopupHide();\n\n          _this.destroyPopupButtons('quickPopup');\n\n          if (popupArgs.element.classList.contains(POPUP_OPEN)) {\n            _this.quickPopupClose();\n          }\n\n          removeChildren(_this.quickPopup.element);\n          _this.isMultipleEventSelect = false;\n        } else {\n          var display = _this.quickPopup.element.style.display;\n          _this.quickPopup.element.style.display = 'block';\n\n          if (_this.parent.isAdaptive) {\n            _this.quickPopup.element.removeAttribute('style');\n\n            _this.quickPopup.element.style.display = 'block';\n            _this.quickPopup.element.style.height = formatUnit(popupType === 'EditEventInfo' ? 65 : window.innerHeight);\n          } else {\n            var isVirtualScroll = _this.parent.virtualScrollModule && _this.parent.virtualScrollModule.isHorizontalScroll && !isNullOrUndefined(closest(target, '.' + CONTENT_TABLE_CLASS));\n\n            var conTable = _this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS + ' table');\n\n            _this.quickPopup.offsetX = isVirtualScroll && !_this.parent.enableRtl ? getTranslateX(conTable) + 10 : 10;\n            _this.quickPopup.offsetY = _this.parent.virtualScrollModule && !_this.parent.virtualScrollModule.isHorizontalScroll ? _this.quickPopup.offsetY : 0;\n            _this.quickPopup.collision = {\n              X: _this.parent.enableRtl ? 'flip' : 'none',\n              Y: 'fit'\n            };\n            _this.quickPopup.position = {\n              X: _this.parent.enableRtl ? 'left' : 'right',\n              Y: _this.parent.enableRtl ? 'bottom' : 'top'\n            };\n\n            _this.quickPopup.dataBind();\n\n            _this.quickPopup.refreshPosition(null, true);\n\n            var collide = isCollide(_this.quickPopup.element, _this.parent.element);\n\n            if (collide.indexOf(_this.parent.enableRtl ? 'left' : 'right') > -1) {\n              _this.quickPopup.offsetX = -target.offsetWidth - 10 - _this.quickPopup.element.offsetWidth;\n\n              if (isVirtualScroll && !_this.parent.enableRtl) {\n                _this.quickPopup.offsetX = getTranslateX(conTable) + _this.quickPopup.offsetX;\n              }\n\n              _this.quickPopup.dataBind();\n\n              _this.quickPopup.refreshPosition(null, true);\n\n              var leftCollide = isCollide(_this.quickPopup.element, _this.parent.element);\n\n              if (leftCollide.indexOf('left') > -1) {\n                _this.quickPopup.position = {\n                  X: 'center',\n                  Y: 'center'\n                };\n                _this.quickPopup.collision = {\n                  X: 'fit',\n                  Y: 'fit'\n                };\n                _this.quickPopup.offsetX = -(_this.quickPopup.element.offsetWidth / 2);\n\n                _this.quickPopup.dataBind();\n              }\n            }\n\n            if (_this.parent.virtualScrollModule && !_this.parent.virtualScrollModule.isHorizontalScroll && (collide.indexOf('top') > -1 || collide.indexOf('bottom') > -1)) {\n              var translateY = getTranslateY(conTable);\n              _this.quickPopup.offsetY = translateY;\n\n              _this.quickPopup.dataBind();\n\n              _this.quickPopup.refreshPosition(null, true);\n            }\n\n            if (_this.quickPopup.position.X === 'center' && _this.quickPopup.position.Y === 'center' && !isNullOrUndefined(originalEvent) && originalEvent.clientX && originalEvent.clientY) {\n              var clientX = originalEvent.clientX;\n              var clientY = originalEvent.clientY;\n              var targetRect = target.getBoundingClientRect();\n              var offsetY = originalEvent.offsetY || Math.ceil(clientY - targetRect.y);\n              var previousOffset = _this.quickPopup.offsetY;\n              var collision = isCollide(_this.quickPopup.element, target);\n\n              var popupRect = _this.quickPopup.element.getBoundingClientRect();\n\n              var targetEle = document.elementFromPoint(clientX, clientY);\n\n              if (collision.indexOf('top') > -1 || collision.indexOf('bottom') > -1 || closest(targetEle, '.' + POPUP_WRAPPER_CLASS)) {\n                if (popupRect.top <= clientY && clientY <= popupRect.top + popupRect.height) {\n                  _this.quickPopup.offsetY = previousOffset - popupRect.height - 10;\n\n                  _this.quickPopup.dataBind();\n\n                  collision = isCollide(_this.quickPopup.element, _this.parent.element);\n\n                  if (collision.indexOf('top') > -1) {\n                    _this.quickPopup.offsetY = previousOffset + offsetY + 10;\n\n                    _this.quickPopup.dataBind();\n                  }\n                } else if (isCollide(_this.quickPopup.element, _this.parent.element).indexOf('bottom') > -1) {\n                  _this.quickPopup.offsetY = previousOffset - offsetY - Math.ceil(popupRect.height) - 10;\n\n                  _this.quickPopup.dataBind();\n                }\n              }\n            }\n          }\n\n          if (isEventPopup) {\n            _this.applyEventColor();\n          }\n\n          _this.quickPopup.element.style.display = display;\n\n          _this.quickPopup.dataBind();\n\n          _this.quickPopup.show();\n        }\n      });\n    });\n  };\n\n  QuickPopups.prototype.applyEventColor = function () {\n    var colorField = '';\n\n    if (this.parent.currentView === 'Agenda' || this.parent.currentView === 'MonthAgenda') {\n      colorField = this.parent.enableRtl ? 'border-right-color' : 'border-left-color';\n    } else {\n      colorField = 'background-color';\n    }\n\n    var color = this.parent.activeEventData.element.style[colorField];\n\n    if (color === '') {\n      return;\n    }\n\n    var colorEle = this.quickPopup.element.querySelector('.' + POPUP_HEADER_CLASS);\n    var footerEle = this.quickPopup.element.querySelector('.' + POPUP_FOOTER_CLASS);\n\n    if (footerEle && footerEle.offsetParent) {\n      colorEle = this.quickPopup.element.querySelector('.' + SUBJECT_CLASS);\n\n      if (colorEle) {\n        colorEle.style.borderLeftColor = color;\n        color = \"rgba(\" + color.match(/\\d+/g).join() + \",0.3)\";\n      }\n    }\n\n    if (colorEle) {\n      colorEle.style.backgroundColor = color;\n    }\n  };\n\n  QuickPopups.prototype.quickPopupOpen = function () {\n    if (this.parent.isAdaptive) {\n      this.quickPopup.element.style.top = '0px';\n      return;\n    }\n\n    if (this.quickPopup.element.querySelector('.' + CELL_POPUP_CLASS)) {\n      var subjectElement = this.quickPopup.element.querySelector('.' + SUBJECT_CLASS);\n\n      if (subjectElement) {\n        subjectElement.focus();\n      }\n    } else {\n      var editElement = this.quickPopup.element.querySelector('.' + EDIT_EVENT_CLASS);\n\n      if (editElement) {\n        editElement.focus();\n      }\n\n      var editIcon = this.quickPopup.element.querySelector('.' + EDIT_CLASS);\n\n      if (editIcon) {\n        editIcon.focus();\n      }\n    }\n  };\n\n  QuickPopups.prototype.quickPopupClose = function () {\n    this.parent.eventBase.focusElement();\n    this.quickPopup.relateTo = '.' + WORK_CELLS_CLASS;\n    this.fieldValidator.destroyToolTip();\n\n    if (this.quickPopup.element.querySelectorAll('.e-formvalidator').length) {\n      this.fieldValidator.destroy();\n    }\n\n    this.destroyPopupButtons('quickPopup');\n    removeChildren(this.quickPopup.element);\n  };\n\n  QuickPopups.prototype.morePopupOpen = function () {\n    if (this.parent.isAdaptive) {\n      this.morePopup.element.style.top = '0px';\n      this.morePopup.element.style.left = '0px';\n      this.morePopup.element.style.height = formatUnit(window.innerHeight);\n      return;\n    }\n\n    this.morePopup.element.querySelector('.' + MORE_EVENT_HEADER_DATE_CLASS).focus();\n    this.morePopup.refreshPosition();\n  };\n\n  QuickPopups.prototype.morePopupClose = function () {\n    var moreWrapper = this.parent.element.querySelector('.' + MORE_EVENT_WRAPPER_CLASS);\n\n    if (moreWrapper) {\n      remove(moreWrapper);\n    }\n  };\n\n  QuickPopups.prototype.popupClose = function (event) {\n    this.dialogEvent = event;\n    this.isCrudAction = false;\n    this.quickPopupHide(true);\n  };\n\n  QuickPopups.prototype.quickPopupHide = function (hideAnimation) {\n    var _this = this;\n\n    if (!this.quickPopup.element.classList.contains(POPUP_OPEN)) {\n      return;\n    }\n\n    var isCellPopup = this.quickPopup.element.querySelector('.' + CELL_POPUP_CLASS);\n    var popupData;\n\n    if (isCellPopup) {\n      var formvalidator = this.quickPopup.element.querySelector('.e-formvalidator');\n\n      if (this.isCrudAction && formvalidator && !formvalidator.ej2_instances[0].validate()) {\n        return;\n      }\n\n      var fields = this.parent.eventFields;\n      var saveObj = this.parent.eventWindow.getObjectFromFormData(POPUP_WRAPPER_CLASS);\n      this.parent.eventWindow.setDefaultValueToObject(saveObj);\n      saveObj[fields.id] = this.parent.eventBase.getEventMaxID();\n      saveObj[fields.startTime] = this.parent.activeCellsData.startTime;\n      saveObj[fields.endTime] = this.parent.activeCellsData.endTime;\n      saveObj[fields.isAllDay] = this.parent.activeCellsData.isAllDay;\n\n      if (this.parent.resourceBase) {\n        this.parent.resourceBase.setResourceValues(saveObj);\n      }\n\n      popupData = saveObj;\n    } else {\n      popupData = this.parent.activeEventData.event;\n    }\n\n    var isEventPopup = this.quickPopup.element.querySelector('.' + EVENT_POPUP_CLASS);\n    var args = {\n      event: this.dialogEvent,\n      type: this.parent.isAdaptive ? isEventPopup ? 'ViewEventInfo' : 'EditEventInfo' : 'QuickInfo',\n      cancel: false,\n      data: popupData,\n      element: this.quickPopup.element,\n      target: isCellPopup ? this.parent.activeCellsData.element : this.parent.activeEventData.element\n    };\n    this.parent.trigger(popupClose, args, function (popupCloseArgs) {\n      if (!popupCloseArgs.cancel) {\n        if (_this.quickPopup.element.classList.contains('e-popup-open')) {\n          if (isCellPopup && _this.isCrudAction) {\n            _this.parent.currentAction = 'Add';\n\n            _this.parent.crudModule.addEvent(popupCloseArgs.data);\n          }\n\n          if (hideAnimation) {\n            var animation = _this.quickPopup.hideAnimation;\n            _this.quickPopup.hideAnimation = null;\n\n            _this.quickPopup.hide();\n\n            _this.quickPopup.hideAnimation = animation;\n          } else {\n            _this.quickPopup.hide();\n          }\n\n          _this.isMultipleEventSelect = false;\n          _this.isCrudAction = false;\n        }\n      }\n    });\n  };\n\n  QuickPopups.prototype.navigationClick = function (e) {\n    var navigateEle = closest(e.target, '.' + NAVIGATE_CLASS);\n\n    if (!isNullOrUndefined(navigateEle)) {\n      var date = this.parent.getDateFromElement(e.currentTarget);\n\n      if (!isNullOrUndefined(date)) {\n        this.closeClick(e);\n        this.parent.setProperties({\n          selectedDate: date\n        }, true);\n        this.parent.changeView(this.parent.getNavigateView(), e);\n      }\n    }\n  };\n\n  QuickPopups.prototype.documentClick = function (e) {\n    var target = e.event.target;\n    var classNames = '.' + POPUP_WRAPPER_CLASS + ',.' + HEADER_CELLS_CLASS + ',.' + ALLDAY_CELLS_CLASS + ',.' + WORK_CELLS_CLASS + ',.' + APPOINTMENT_CLASS + ',.e-popup';\n    var popupWrap = this.parent.element.querySelector('.' + POPUP_WRAPPER_CLASS);\n\n    if (popupWrap && popupWrap.childElementCount > 0 && !closest(target, classNames) || !closest(target, classNames)) {\n      this.quickPopupHide();\n      this.parent.removeNewEventElement();\n    }\n\n    var tar = this.parent.element.querySelector('.' + INLINE_SUBJECT_CLASS);\n\n    if (tar && tar !== target && this.parent.allowInline) {\n      this.parent.inlineModule.documentClick();\n    }\n\n    if (closest(target, '.' + APPOINTMENT_CLASS + ',.' + HEADER_CELLS_CLASS)) {\n      this.parent.removeNewEventElement();\n    }\n\n    if (!closest(target, '.' + MORE_POPUP_WRAPPER_CLASS) && target.classList && !target.classList.contains(MORE_INDICATOR_CLASS) && !closest(target, '.' + POPUP_OPEN) && !closest(target, '.' + WORK_CELLS_CLASS)) {\n      this.morePopup.hide();\n    }\n  };\n\n  QuickPopups.prototype.onClosePopup = function (event) {\n    if (!isNullOrUndefined(event)) {\n      this.dialogEvent = event;\n    }\n\n    this.quickPopupHide();\n    this.parent.eventBase.focusElement();\n  };\n\n  QuickPopups.prototype.addEventListener = function () {\n    this.parent.on(cellClick, this.cellClick, this);\n    this.parent.on(eventClick, this.eventClick, this);\n    this.parent.on(documentClick, this.documentClick, this);\n    this.parent.on(dataReady, this.updateMoreEventContent, this);\n  };\n\n  QuickPopups.prototype.removeEventListener = function () {\n    this.parent.off(cellClick, this.cellClick);\n    this.parent.off(eventClick, this.eventClick);\n    this.parent.off(documentClick, this.documentClick);\n    this.parent.off(dataReady, this.updateMoreEventContent);\n  };\n\n  QuickPopups.prototype.destroyPopupButtons = function (popupName) {\n    var popup = popupName === 'quickPopup' ? this.quickPopup : this.morePopup;\n    var buttonCollections = [].slice.call(popup.element.querySelectorAll('.e-control.e-btn'));\n\n    for (var _i = 0, buttonCollections_1 = buttonCollections; _i < buttonCollections_1.length; _i++) {\n      var button = buttonCollections_1[_i];\n      var instance = button.ej2_instances[0];\n\n      if (instance) {\n        instance.destroy();\n      }\n    }\n  };\n\n  QuickPopups.prototype.refreshQuickDialog = function () {\n    this.destroyQuickDialog();\n    this.renderQuickDialog();\n  };\n\n  QuickPopups.prototype.refreshQuickPopup = function () {\n    this.destroyQuickPopup();\n    this.renderQuickPopup();\n  };\n\n  QuickPopups.prototype.refreshMorePopup = function () {\n    this.destroyMorePopup();\n    this.renderMorePopup();\n  };\n\n  QuickPopups.prototype.destroyQuickDialog = function () {\n    if (this.quickDialog.element) {\n      this.quickDialog.destroy();\n      remove(this.quickDialog.element);\n      this.quickDialog = null;\n    }\n  };\n\n  QuickPopups.prototype.destroyQuickPopup = function () {\n    if (this.quickPopup.element) {\n      this.destroyPopupButtons('quickPopup');\n      this.quickPopup.destroy();\n      remove(this.quickPopup.element);\n      this.quickPopup = null;\n    }\n  };\n\n  QuickPopups.prototype.destroyMorePopup = function () {\n    if (this.morePopup.element) {\n      this.destroyPopupButtons('morePopup');\n      this.morePopup.destroy();\n      remove(this.morePopup.element);\n      this.morePopup = null;\n    }\n  };\n\n  QuickPopups.prototype.destroy = function () {\n    if (this.quickPopup.element.querySelectorAll('.e-formvalidator').length) {\n      this.fieldValidator.destroy();\n    }\n\n    this.removeEventListener();\n    this.destroyQuickPopup();\n    this.destroyMorePopup();\n    this.destroyQuickDialog();\n    this.dialogEvent = null;\n    this.parent = null;\n    this.l10n = null;\n    this.isCrudAction = null;\n    this.fieldValidator = null;\n    this.isMultipleEventSelect = null;\n  };\n\n  return QuickPopups;\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Tooltip for Schedule\n */\n\n\nvar EventTooltip =\n/** @__PURE__ @class */\nfunction () {\n  function EventTooltip(parent) {\n    this.parent = parent;\n    this.tooltipObj = new Tooltip({\n      animation: {\n        close: {\n          effect: 'FadeOut'\n        }\n      },\n      content: 'No title',\n      position: 'BottomRight',\n      offsetY: 10,\n      mouseTrail: this.parent.isAdaptive ? false : true,\n      showTipPointer: false,\n      cssClass: this.parent.cssClass + ' ' + EVENT_TOOLTIP_ROOT_CLASS,\n      target: this.getTargets(),\n      beforeRender: this.onBeforeRender.bind(this),\n      beforeClose: this.onBeforeClose.bind(this),\n      enableRtl: this.parent.enableRtl,\n      enableHtmlSanitizer: this.parent.enableHtmlSanitizer\n    });\n    this.tooltipObj.appendTo(this.parent.element);\n  }\n\n  EventTooltip.prototype.getTargets = function () {\n    var targets = [];\n\n    if (this.parent.activeViewOptions.group.headerTooltipTemplate) {\n      targets.push('.' + RESOURCE_CELLS_CLASS);\n    }\n\n    if (this.parent.eventSettings.enableTooltip) {\n      targets.push('.' + APPOINTMENT_CLASS);\n    }\n\n    return targets.join(',');\n  };\n\n  EventTooltip.prototype.onBeforeRender = function (args) {\n    if (!isNullOrUndefined(args.target.getAttribute('data-tooltip-id'))) {\n      return;\n    }\n\n    if (args.target.classList.contains(RESOURCE_CELLS_CLASS) && this.parent.activeViewOptions.group.resources.length > 0) {\n      var resCollection = void 0;\n\n      if (this.parent.activeView.isTimelineView()) {\n        var index = parseInt(args.target.getAttribute('data-group-index'), 10);\n        resCollection = this.parent.resourceBase.lastResourceLevel[parseInt(index.toString(), 10)];\n      } else {\n        var rowIndex = args.target.parentNode.sectionRowIndex;\n        var cellIndex = args.target.cellIndex;\n        resCollection = this.parent.activeView.getColumnLevels()[parseInt(rowIndex.toString(), 10)][parseInt(cellIndex.toString(), 10)];\n      }\n\n      var data = {\n        resource: resCollection.resource,\n        resourceData: resCollection.resourceData\n      };\n      var contentContainer = createElement('div');\n      var templateId = this.parent.element.id + '_headerTooltipTemplate';\n      var tooltipTemplate = [].slice.call(this.parent.getHeaderTooltipTemplate()(data, this.parent, 'headerTooltipTemplate', templateId, false));\n      append(tooltipTemplate, contentContainer);\n      this.setContent(contentContainer);\n      this.parent.renderTemplates();\n      return;\n    }\n\n    var record = this.parent.eventBase.getEventByGuid(args.target.getAttribute('data-guid'));\n\n    if (isNullOrUndefined(record)) {\n      return;\n    }\n\n    if (!isNullOrUndefined(this.parent.eventSettings.tooltipTemplate)) {\n      var contentContainer = createElement('div');\n      var templateId = this.parent.element.id + '_tooltipTemplate';\n      var tooltipTemplate = [].slice.call(this.parent.getEventTooltipTemplate()(record, this.parent, 'tooltipTemplate', templateId, false));\n      append(tooltipTemplate, contentContainer);\n      this.setContent(contentContainer);\n    } else {\n      var globalize = this.parent.globalize;\n      var fields = this.parent.eventFields;\n      var eventStart = new Date('' + record[fields.startTime]);\n      var eventEnd = new Date('' + record[fields.endTime]);\n      eventEnd = eventEnd.getHours() === 0 && eventEnd.getMinutes() === 0 ? new Date(eventEnd.setMilliseconds(-1000)) : eventEnd;\n      var startDate = resetTime(new Date('' + eventStart));\n      var endDate = resetTime(new Date('' + eventEnd));\n      var tooltipSubject = record[fields.subject] || this.parent.eventSettings.fields.subject.default || this.parent.localeObj.getConstant('addTitle');\n      var tooltipLocation = !isNullOrUndefined(record[fields.location]) ? record[fields.location] : '';\n      var startMonthDate = '';\n      var startMonthYearDate = '';\n      var endMonthYearDate = '';\n      startMonthDate = globalize.formatDate(eventStart, {\n        type: 'date',\n        skeleton: 'MMMd',\n        calendar: this.parent.getCalendarMode()\n      });\n      startMonthYearDate = globalize.formatDate(eventStart, {\n        type: 'date',\n        skeleton: 'medium',\n        calendar: this.parent.getCalendarMode()\n      });\n      endMonthYearDate = globalize.formatDate(eventEnd, {\n        type: 'date',\n        skeleton: 'medium',\n        calendar: this.parent.getCalendarMode()\n      });\n      startMonthDate = capitalizeFirstWord(startMonthDate, 'single');\n      startMonthYearDate = capitalizeFirstWord(startMonthYearDate, 'single');\n      endMonthYearDate = capitalizeFirstWord(endMonthYearDate, 'single');\n      var startTime = this.parent.getTimeString(eventStart);\n      var endTime = this.parent.getTimeString(eventEnd);\n      var tooltipDetails = void 0;\n\n      if (startDate.getTime() === endDate.getTime()) {\n        tooltipDetails = globalize.formatDate(eventStart, {\n          type: 'date',\n          skeleton: 'long',\n          calendar: this.parent.getCalendarMode()\n        });\n        tooltipDetails = capitalizeFirstWord(tooltipDetails, 'single');\n      } else {\n        tooltipDetails = startDate.getFullYear() === endDate.getFullYear() ? startMonthDate + ' - ' + endMonthYearDate : startMonthYearDate + ' - ' + endMonthYearDate;\n      }\n\n      var tooltipTime = record[fields.isAllDay] ? this.parent.localeObj.getConstant('allDay') : startTime + ' - ' + endTime;\n      var content = '<div><div class=\"e-subject\">' + tooltipSubject + '</div>' + '<div class=\"e-location\">' + tooltipLocation + '</div>' + '<div class=\"e-details\">' + tooltipDetails + '</div>' + '<div class=\"e-all-day\">' + tooltipTime + '</div></div>';\n      this.setContent(content);\n    }\n\n    this.parent.renderTemplates();\n  };\n\n  EventTooltip.prototype.onBeforeClose = function () {\n    this.parent.resetTemplates(['tooltipTemplate', 'headerTooltipTemplate']);\n  };\n\n  EventTooltip.prototype.setContent = function (content) {\n    this.tooltipObj.setProperties({\n      content: content\n    }, true);\n  };\n\n  EventTooltip.prototype.close = function () {\n    this.tooltipObj.close();\n  };\n\n  EventTooltip.prototype.destroy = function () {\n    this.tooltipObj.destroy();\n    addClass([this.parent.element], 'e-control');\n    this.tooltipObj = null;\n    this.parent = null;\n  };\n\n  return EventTooltip;\n}();\n\nvar __extends$4 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar HEADER = 'e-editor';\nvar INPUTWARAPPER = 'e-input-wrapper';\nvar INPUTWARAPPERSIDE = 'e-input-wrapper-side';\nvar REPEATELEMENT = 'e-repeat-element';\nvar REPEATINTERVAL = 'e-repeat-interval';\nvar INTERVALCLASS = 'e-interval';\nvar DAYWRAPPER = 'e-days';\nvar WEEKWRAPPER = 'e-non-week';\nvar WEEKPOSITION = 'e-week-position';\nvar DAYPOSITION = 'e-day-position';\nvar YEAREXPANDERWRAPPER = 'e-year-expander';\nvar YEAREXPANDERELEMENT = 'e-year-expander-element';\nvar MONETHEXPANDERWRAPPER = 'e-month-expander';\nvar MONETHEXPANDWRAPPER = 'e-month-expand-wrapper';\nvar MONTHEXPANDERELEMENT = 'e-month-expander-element';\nvar MONTHEXPANDERCHECKBOXWRAPPER = 'e-month-expander-checkbox-wrapper';\nvar FORMLEFT = 'e-form-left';\nvar FORMRIGHT = 'e-form-right';\nvar MONTHDAYWRAPPER = 'e-month-day';\nvar MONTHEXPANNDERELEM = 'e-month-expander-wrapper';\nvar MONTHPOS = 'e-month-pos';\nvar MONTHWEEK = 'e-month-week';\nvar ENDON = 'e-end-on';\nvar MONTHEXPANDERLABEL = 'e-month-expander-label';\nvar WEEKEXPANDERLABEL = 'e-week-expander-label';\nvar ENDONLABEL = 'e-end-on-label';\nvar ENDONLEFT = 'e-end-on-left';\nvar MONTHDAYELEMENT = 'e-monthday-element';\nvar ENDONELEMENT = 'e-end-on-element';\nvar ENDONDATE = 'e-end-on-date';\nvar UNTILDATE = 'e-until-date';\nvar ENDONCOUNTWRAPPER = 'e-end-on-count';\nvar ENDONCOUNT = 'e-recurrence-count';\nvar HIDEWRAPPER = 'e-hide-recurrence-element';\nvar RTLCLASS = 'e-rtl';\nvar PRIMARY = 'e-primary';\nvar ACTIVE = 'e-active';\nvar RECURRENCETABLE = 'e-recurrence-table';\nvar REPEATCONTENT = 'e-repeat-content';\nvar REPEATCONTENTWRAPPER = 'e-repeat-content-wrapper';\nvar NONE = 'none';\nvar DAILY = 'daily';\nvar WEEKLY = 'weekly';\nvar MONTHLY = 'monthly';\nvar YEARLY = 'yearly';\nvar NEVER = 'never';\nvar UNTIL$1 = 'until';\nvar COUNT = 'count';\nvar TEXTFIELD = 'text';\nvar VALUEFIELD = 'value';\nvar LAST = 'last';\nvar REPEAT = 'repeat';\nvar REPEATEVERY = 'repeatEvery';\nvar ON$1 = 'on';\nvar END = 'end';\nvar RADIOLABEL = 'onDay';\nvar RULEUNTIL = 'UNTIL';\nvar RULEBYDAY = 'BYDAY';\nvar RULEBYMONTHDAY = 'BYMONTHDAY';\nvar RULEBYMONTH = 'BYMONTH';\nvar RULEINTERVAL = 'INTERVAL';\nvar RULECOUNT = 'COUNT';\nvar RULESETPOS = 'BYSETPOS';\nvar RULEFREQ = 'FREQ';\nvar RULEDAILY = 'DAILY';\nvar RULEWEEKLY = 'WEEKLY';\nvar RULEMONTHLY = 'MONTHLY';\nvar RULEYEARLY = 'YEARLY';\nvar RULESUNDAY = 'SU';\nvar RULEMONDAY = 'MO';\nvar RULETUESDAY = 'TU';\nvar RULEWEDNESDAY = 'WE';\nvar RULETHURSDAY = 'TH';\nvar RULEFRIDAY = 'FR';\nvar RULESATURDAY = 'SA';\nvar KEYSUNDAY = 'sun';\nvar KEYMONDAY = 'mon';\nvar KEYTUESDAY = 'tue';\nvar KEYWEDNESDAY = 'wed';\nvar KEYTHURSDAY = 'thu';\nvar KEYFRIDAY = 'fri';\nvar KEYSATURDAY = 'sat';\nvar EQUAL = '=';\nvar SEMICOLON = ';';\nvar COMMA = ',';\nvar FIRST = 'first';\nvar SECOND = 'second';\nvar THIRD = 'third';\nvar FOURTH = 'fourth';\nvar contentType = {\n  none: '',\n  daily: 'days',\n  weekly: 'weeks',\n  monthly: 'months',\n  yearly: 'years'\n};\nvar valueData = {\n  'sun': RULESUNDAY,\n  'mon': RULEMONDAY,\n  'tue': RULETUESDAY,\n  'wed': RULEWEDNESDAY,\n  'thu': RULETHURSDAY,\n  'fri': RULEFRIDAY,\n  'sat': RULESATURDAY\n};\nvar neverClassList = [DAYWRAPPER, WEEKWRAPPER, ENDON, INTERVALCLASS, YEAREXPANDERWRAPPER, MONETHEXPANDERWRAPPER];\nvar weekClassList = [WEEKWRAPPER];\nvar monthClassList = [DAYWRAPPER, YEAREXPANDERWRAPPER];\nvar yearClassList = [DAYWRAPPER];\nvar dailyClassList = [DAYWRAPPER, WEEKWRAPPER, YEAREXPANDERWRAPPER, MONETHEXPANDERWRAPPER];\nvar noEndClassList = [ENDONDATE, ENDONCOUNTWRAPPER];\nvar endOnCountClassList = [ENDONDATE];\nvar endOnDateClassList = [ENDONCOUNTWRAPPER];\n/**\n * Represents the RecurrenceEditor component.\n * ```html\n * <div id=\"recurrence\"></div>\n * ```\n * ```typescript\n * <script>\n *   var recObj = new RecurrenceEditor();\n *   recObj.appendTo(\"#recurrence\");\n * </script>\n * ```\n */\n\nvar RecurrenceEditor =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$4(RecurrenceEditor, _super);\n  /**\n   * Constructor for creating the widget\n   *\n   * @param {RecurrenceEditorModel} options Accepts the recurrence editor model properties to initiate the rendering\n   * @param {string | HTMLElement} element Accepts the DOM element reference\n   */\n\n\n  function RecurrenceEditor(options, element) {\n    var _this = _super.call(this, options, element) || this; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    _this.defaultLocale = {\n      none: 'None',\n      daily: 'Daily',\n      weekly: 'Weekly',\n      monthly: 'Monthly',\n      month: 'Month',\n      yearly: 'Yearly',\n      never: 'Never',\n      until: 'Until',\n      count: 'Count',\n      first: 'First',\n      second: 'Second',\n      third: 'Third',\n      fourth: 'Fourth',\n      last: 'Last',\n      repeat: 'Repeat',\n      repeatEvery: 'Repeat every',\n      on: 'Repeat On',\n      end: 'End',\n      onDay: 'Day',\n      days: 'Day(s)',\n      weeks: 'Week(s)',\n      months: 'Month(s)',\n      years: 'Year(s)',\n      every: 'every',\n      summaryTimes: 'time(s)',\n      summaryOn: 'on',\n      summaryUntil: 'until',\n      summaryRepeat: 'Repeats',\n      summaryDay: 'day(s)',\n      summaryWeek: 'week(s)',\n      summaryMonth: 'month(s)',\n      summaryYear: 'year(s)',\n      monthWeek: 'Month Week',\n      monthPosition: 'Month Position',\n      monthExpander: 'Month Expander',\n      yearExpander: 'Year Expander',\n      repeatInterval: 'Repeat Interval'\n    };\n    _this.renderStatus = false;\n    _this.dayButtons = [];\n    _this.monthButtons = [];\n    return _this;\n  }\n\n  RecurrenceEditor.prototype.startState = function (freq, endOn, startDate) {\n    this.showFormElement();\n    this.updateForm(freq);\n    this.freshOnEndForm();\n    this.updateEndOnForm(endOn);\n    this.selectMonthDay(startDate);\n    this.updateUntilDate(startDate);\n    this.onMonthDay.setProperties({\n      checked: true\n    });\n  };\n\n  RecurrenceEditor.prototype.preRender = function () {\n    this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);\n    this.calendarUtil = getCalendarUtil(this.calendarMode);\n  };\n\n  RecurrenceEditor.prototype.applyCustomClass = function (cssClass) {\n    if (cssClass) {\n      addClass([this.element], cssClass.split(' '));\n    }\n  };\n\n  RecurrenceEditor.prototype.initialize = function () {\n    addClass([this.element], 'e-' + this.getModuleName());\n    this.renderComponent();\n\n    if (!isNullOrUndefined(this.value) && this.value !== '') {\n      this.setRecurrenceRule(this.value);\n    } else {\n      if (!isNullOrUndefined(this.repeatType.value)) {\n        this.startState(this.repeatType.value.toString().toUpperCase(), NEVER, this.startDate);\n        this.updateForm(this.repeatType.value.toString());\n      }\n\n      if (this.selectedType > 0) {\n        this.setProperties({\n          value: this.getRecurrenceRule()\n        }, false);\n      }\n    }\n\n    this.applyCustomClass(this.cssClass);\n  };\n\n  RecurrenceEditor.prototype.triggerChangeEvent = function () {\n    var _this = this;\n\n    if (this.renderStatus) {\n      var value = this.getRecurrenceRule();\n      this.trigger('change', {\n        value: value\n      }, function (args) {\n        return _this.setProperties({\n          value: args.value\n        }, false);\n      });\n    }\n  };\n\n  RecurrenceEditor.prototype.resetDayButton = function () {\n    var elements = [].slice.call(this.element.querySelectorAll('.' + DAYWRAPPER + ' button'));\n    elements.forEach(function (element) {\n      return removeClass([element], [ACTIVE, PRIMARY]);\n    });\n  };\n\n  RecurrenceEditor.prototype.daySelection = function (dayIndex) {\n    this.resetDayButton();\n    var days = [0, 1, 2, 3, 4, 5, 6];\n    this.rotateArray(days, this.firstDayOfWeek);\n    var element = this.element.querySelector('.' + DAYWRAPPER + ' button[data-index=\"' + days.indexOf(dayIndex) + '\"]');\n\n    if (element) {\n      addClass([element], [ACTIVE, PRIMARY]);\n    }\n  };\n\n  RecurrenceEditor.prototype.rtlClass = function (status) {\n    if (status) {\n      addClass([this.element], RTLCLASS);\n    } else {\n      removeClass([this.element], RTLCLASS);\n    }\n  };\n\n  RecurrenceEditor.prototype.updateUntilDate = function (date) {\n    var tempDate = new Date(date.getTime());\n    tempDate.setDate(tempDate.getDate() + 60);\n    this.untilDateObj.setProperties({\n      value: tempDate\n    });\n  };\n\n  RecurrenceEditor.prototype.selectMonthDay = function (date) {\n    var weekday = [KEYSUNDAY, KEYMONDAY, KEYTUESDAY, KEYWEDNESDAY, KEYTHURSDAY, KEYFRIDAY, KEYSATURDAY];\n    this.monthDate.setProperties({\n      value: this.calendarUtil.getDate(date)\n    });\n    this.monthWeekDays.setProperties({\n      value: valueData[weekday[date.getDay()]]\n    });\n    this.monthValue.setProperties({\n      value: '' + this.calendarUtil.getMonth(date)\n    });\n    this.monthWeekPos.setProperties({\n      value: this.getDayPosition(date)\n    });\n    this.daySelection(date.getDay());\n  };\n\n  RecurrenceEditor.prototype.updateForm = function (state) {\n    var _this = this;\n\n    this.repeatType.setProperties({\n      value: state\n    });\n    var end = this.element.querySelector('.' + ENDON);\n\n    if (state === DAILY) {\n      classList(end, [FORMLEFT], [FORMRIGHT]);\n    } else {\n      classList(end, [FORMRIGHT], [FORMLEFT]);\n    }\n\n    switch (state) {\n      case NONE:\n        neverClassList.forEach(function (className) {\n          return addClass([_this.element.querySelector('.' + className)], HIDEWRAPPER);\n        });\n        break;\n\n      case WEEKLY:\n        weekClassList.forEach(function (className) {\n          return addClass([_this.element.querySelector('.' + className)], HIDEWRAPPER);\n        });\n        break;\n\n      case MONTHLY:\n        monthClassList.forEach(function (className) {\n          return addClass([_this.element.querySelector('.' + className)], HIDEWRAPPER);\n        });\n        break;\n\n      case YEARLY:\n        yearClassList.forEach(function (className) {\n          return addClass([_this.element.querySelector('.' + className)], HIDEWRAPPER);\n        });\n        break;\n\n      case DAILY:\n        dailyClassList.forEach(function (className) {\n          return addClass([_this.element.querySelector('.' + className)], HIDEWRAPPER);\n        });\n        break;\n    }\n  };\n\n  RecurrenceEditor.prototype.updateEndOnForm = function (state) {\n    var _this = this;\n\n    this.endType.setProperties({\n      value: state\n    });\n\n    switch (state) {\n      case NEVER:\n        noEndClassList.forEach(function (className) {\n          return addClass([_this.element.querySelector('.' + className)], HIDEWRAPPER);\n        });\n        break;\n\n      case UNTIL$1:\n        endOnDateClassList.forEach(function (className) {\n          return addClass([_this.element.querySelector('.' + className)], HIDEWRAPPER);\n        });\n        break;\n\n      case COUNT:\n        endOnCountClassList.forEach(function (className) {\n          return addClass([_this.element.querySelector('.' + className)], HIDEWRAPPER);\n        });\n        break;\n    }\n  };\n\n  RecurrenceEditor.prototype.freshOnEndForm = function () {\n    var _this = this;\n\n    noEndClassList.forEach(function (className) {\n      var element = _this.element.querySelector('.' + className);\n\n      if (element) {\n        removeClass([element], HIDEWRAPPER);\n      }\n    });\n  };\n\n  RecurrenceEditor.prototype.showFormElement = function () {\n    var _this = this;\n\n    neverClassList.forEach(function (className) {\n      var hideElement = _this.element.querySelector('.' + className);\n\n      if (hideElement) {\n        removeClass([hideElement], HIDEWRAPPER);\n      }\n    });\n  };\n\n  RecurrenceEditor.prototype.renderDropdowns = function () {\n    var _this = this; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n\n    var self = this;\n    this.repeatType = new DropDownList({\n      //set the data to dataSource property\n      dataSource: this.getRepeatData(),\n      floatLabelType: 'Always',\n      enableRtl: this.enableRtl,\n      index: this.selectedType,\n      fields: {\n        text: TEXTFIELD,\n        value: VALUEFIELD\n      },\n      placeholder: this.localeObj.getConstant(REPEAT),\n      htmlAttributes: {\n        'title': this.localeObj.getConstant(REPEAT),\n        role: 'option'\n      },\n      change: function (args) {\n        self.setProperties({\n          selectedType: _this.frequencies.indexOf(args.value)\n        }, false);\n        self.element.querySelector('.' + REPEATCONTENT).innerHTML = self.localeObj.getConstant(contentType[args.value]);\n        self.showFormElement();\n        self.updateForm(args.value);\n        self.resetFormValues();\n        self.triggerChangeEvent();\n      }\n    }); // set placeholder to DropDownList input element\n\n    this.repeatType.appendTo(this.element.querySelector('.' + REPEATELEMENT));\n    this.endType = new DropDownList({\n      dataSource: this.getEndData(),\n      popupWidth: this.getPopupWidth(),\n      enableRtl: this.enableRtl,\n      index: 1,\n      fields: {\n        text: TEXTFIELD,\n        value: VALUEFIELD\n      },\n      htmlAttributes: {\n        role: 'option'\n      },\n      change: function (args) {\n        self.freshOnEndForm();\n        self.updateEndOnForm(args.value);\n        self.resetFormValues();\n        self.triggerChangeEvent();\n      }\n    });\n    this.endType.appendTo(this.element.querySelector('.' + ENDONELEMENT));\n\n    var renderDropDownList = function (dropDownData) {\n      return new DropDownList({\n        dataSource: dropDownData,\n        popupWidth: _this.getPopupWidth(),\n        enableRtl: _this.enableRtl,\n        fields: {\n          text: TEXTFIELD,\n          value: VALUEFIELD\n        },\n        htmlAttributes: {\n          role: 'option'\n        },\n        index: 1,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        change: function (args) {\n          self.onWeekDay.setProperties({\n            checked: true\n          });\n          self.resetFormValues();\n          self.triggerChangeEvent();\n        }\n      });\n    };\n\n    this.monthWeekPos = renderDropDownList(this.getMonthPosData());\n    this.monthWeekPos.appendTo(this.element.querySelector('.' + MONTHPOS));\n    this.monthWeekDays = renderDropDownList(this.getDayData('wide'));\n    this.monthWeekDays.appendTo(this.element.querySelector('.' + MONTHWEEK));\n    this.monthValue = new DropDownList({\n      dataSource: this.getMonthData(),\n      fields: {\n        text: TEXTFIELD,\n        value: VALUEFIELD\n      },\n      htmlAttributes: {\n        role: 'option'\n      },\n      enableRtl: this.enableRtl,\n      index: 7,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      change: function (args) {\n        self.resetFormValues();\n        self.triggerChangeEvent();\n      }\n    });\n    this.monthValue.appendTo(this.element.querySelector('.' + YEAREXPANDERELEMENT));\n  };\n\n  RecurrenceEditor.prototype.setDefaultValue = function () {\n    var formelement = [].slice.call(this.element.querySelectorAll('.e-control .e-numerictextbox'));\n\n    for (var _i = 0, formelement_1 = formelement; _i < formelement_1.length; _i++) {\n      var element = formelement_1[_i];\n      var instance = element.ej2_instances[0];\n\n      if (instance.element.classList.contains(REPEATINTERVAL)) {\n        instance.value = 1;\n        instance.dataBind();\n      } else if (instance.element.classList.contains(ENDONCOUNT)) {\n        instance.value = 10;\n        instance.dataBind();\n      }\n    }\n  };\n\n  RecurrenceEditor.prototype.resetFormValues = function () {\n    var recurreneElement = [].slice.call(this.element.querySelectorAll('.e-control [type=\"text\"]'));\n\n    for (var _i = 0, recurreneElement_1 = recurreneElement; _i < recurreneElement_1.length; _i++) {\n      var element = recurreneElement_1[_i];\n      var instance = void 0;\n\n      if (element.classList.contains('e-datepicker')) {\n        instance = element.ej2_instances[0];\n\n        if (instance.value) {\n          // eslint-disable-next-line no-self-assign\n          instance.value = instance.value;\n          instance.dataBind();\n        } else {\n          this.updateUntilDate(this.startDate);\n        }\n      } else if (element.classList.contains('e-dropdownlist')) {\n        instance = element.ej2_instances[0];\n        instance.index = instance.index || 0;\n        instance.dataBind();\n      } else if (element.classList.contains('e-numerictextbox')) {\n        instance = element.ej2_instances[0];\n        var value = void 0;\n\n        if (instance.element.classList.contains(REPEATINTERVAL)) {\n          value = 1;\n        } else if (instance.element.classList.contains(ENDONCOUNT)) {\n          value = 10;\n        } else {\n          value = this.startDate.getDate();\n        }\n\n        instance.value = instance.value || value;\n        instance.dataBind();\n      }\n    }\n  };\n\n  RecurrenceEditor.prototype.getPopupWidth = function () {\n    return Browser.isDevice ? '100%' : 'auto';\n  };\n\n  RecurrenceEditor.prototype.renderDatePickers = function () {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    var self = this;\n    this.untilDateObj = new DatePicker({\n      firstDayOfWeek: this.firstDayOfWeek,\n      enableRtl: this.enableRtl,\n      locale: this.locale,\n      min: this.minDate,\n      max: this.maxDate,\n      format: isNullOrUndefined(this.dateFormat) ? this.getFormat('dateFormats') : this.dateFormat,\n      change: function (args) {\n        if (args.value) {\n          self.triggerChangeEvent();\n        }\n      }\n    });\n    this.untilDateObj.appendTo(this.element.querySelector('.' + UNTILDATE));\n  };\n\n  RecurrenceEditor.prototype.getFormat = function (formatType) {\n    var format;\n\n    if (this.locale === 'en' || this.locale === 'en-US') {\n      format = getValue(formatType + '.short', getDefaultDateObject(this.getCalendarMode()));\n    } else {\n      format = getValue('main.' + '' + this.locale + '.dates.calendars.' + this.getCalendarMode() + '.' + formatType + '.short', cldrData);\n    }\n\n    return format;\n  };\n\n  RecurrenceEditor.prototype.dayButtonRender = function () {\n    var _this = this;\n\n    var btns = [].slice.call(this.element.querySelectorAll('.' + DAYWRAPPER + ' button')); // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n    var self = this;\n\n    for (var _i = 0, btns_1 = btns; _i < btns_1.length; _i++) {\n      var btn = btns_1[_i];\n      var button = new Button({\n        isToggle: true,\n        enableRtl: this.enableRtl\n      }, btn);\n      this.dayButtons.push(button);\n      EventHandler.add(btn, 'click', function (args) {\n        var btns = [].slice.call(_this.element.querySelectorAll('.' + DAYWRAPPER + ' button.' + PRIMARY));\n        var element = args.target;\n\n        if (!element.classList.contains(PRIMARY)) {\n          addClass([element], PRIMARY);\n          self.triggerChangeEvent();\n        } else if (btns.length > 1) {\n          removeClass([element], PRIMARY);\n          self.triggerChangeEvent();\n        }\n      });\n    }\n  };\n\n  RecurrenceEditor.prototype.radioButtonRender = function () {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    var self = this;\n    this.onMonthDay = new RadioButton({\n      label: this.localeObj.getConstant(RADIOLABEL),\n      enableRtl: this.enableRtl,\n      name: 'monthType',\n      value: 'day',\n      change: function () {\n        self.resetFormValues();\n        self.triggerChangeEvent();\n      }\n    });\n    this.onMonthDay.appendTo(this.element.querySelector('.' + MONTHEXPANDERELEMENT));\n    this.monthButtons.push(this.onMonthDay);\n    this.onWeekDay = new RadioButton({\n      label: this.localeObj.getConstant('monthExpander'),\n      cssClass: 'e-month-type',\n      name: 'monthType',\n      enableRtl: this.enableRtl,\n      value: 'daypos',\n      change: function () {\n        self.resetFormValues();\n        self.triggerChangeEvent();\n      }\n    });\n    this.onWeekDay.appendTo(this.element.querySelector('.' + MONTHEXPANNDERELEM));\n    this.monthButtons.push(this.onWeekDay);\n  };\n\n  RecurrenceEditor.prototype.numericTextboxRender = function () {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    var self = this;\n    this.recurrenceCount = new NumericTextBox({\n      value: 10,\n      format: '#',\n      enableRtl: this.enableRtl,\n      min: 1,\n      max: 999,\n      change: function () {\n        self.triggerChangeEvent();\n      }\n    });\n    this.recurrenceCount.appendTo(this.element.querySelector('.' + ENDONCOUNT));\n    this.monthDate = new NumericTextBox({\n      value: 1,\n      format: '#',\n      enableRtl: this.enableRtl,\n      min: 1,\n      max: 31,\n      change: function () {\n        self.onMonthDay.setProperties({\n          checked: true\n        });\n        self.triggerChangeEvent();\n      }\n    });\n    this.monthDate.appendTo(this.element.querySelector('.' + MONTHDAYWRAPPER));\n    this.repeatInterval = new NumericTextBox({\n      value: 1,\n      format: '#',\n      min: 1,\n      max: 999,\n      enableRtl: this.enableRtl,\n      floatLabelType: 'Always',\n      placeholder: this.localeObj.getConstant(REPEATEVERY),\n      change: function () {\n        self.triggerChangeEvent();\n      }\n    });\n    this.repeatInterval.appendTo(this.element.querySelector('.' + REPEATINTERVAL));\n  };\n\n  RecurrenceEditor.prototype.renderComponent = function () {\n    this.setTemplate();\n    this.renderDropdowns();\n    this.renderDatePickers();\n    this.dayButtonRender();\n    this.radioButtonRender();\n    this.numericTextboxRender();\n  };\n\n  RecurrenceEditor.prototype.rotateArray = function (data, count) {\n    var temp;\n\n    for (var index = 0; index < count; index++) {\n      temp = data.shift();\n      data.push(temp);\n    }\n  };\n\n  RecurrenceEditor.prototype.getEndData = function () {\n    var endData = [NEVER, UNTIL$1, COUNT]; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n    var self = this;\n    var dataSource = [];\n    endData.forEach(function (data) {\n      dataSource.push({\n        text: self.localeObj.getConstant(data),\n        value: data\n      });\n    });\n    return dataSource;\n  };\n\n  RecurrenceEditor.prototype.getDayPosition = function (date) {\n    var temp = new Date(date.getTime());\n    var endDate = new Date(date.getTime());\n    var day = date.getDay();\n    var positionCollection = [];\n    temp = this.calendarUtil.getMonthStartDate(temp);\n    endDate = this.calendarUtil.getMonthEndDate(endDate);\n\n    while (temp < endDate) {\n      if (temp.getDay() === day) {\n        positionCollection.push(temp.getTime());\n      }\n\n      temp.setDate(temp.getDate() + 1);\n    }\n\n    if (positionCollection.indexOf(date.getTime()) === positionCollection.length - 1) {\n      return -1;\n    }\n\n    return positionCollection.indexOf(date.getTime()) + 1;\n  };\n\n  RecurrenceEditor.prototype.getRepeatData = function () {\n    var data = []; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n    var self = this;\n    this.frequencies.forEach(function (element) {\n      var textValue = element === NONE ? NEVER : element;\n      data.push({\n        text: self.localeObj.getConstant(textValue),\n        value: element\n      });\n    });\n    return data;\n  };\n\n  RecurrenceEditor.prototype.getMonthPosData = function () {\n    var monthpos = [FIRST, SECOND, THIRD, FOURTH, LAST];\n    var monthposValue = {\n      first: 1,\n      second: 2,\n      third: 3,\n      fourth: 4,\n      last: -1\n    }; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n    var self = this;\n    var dataSource = [];\n    monthpos.forEach(function (data) {\n      dataSource.push({\n        text: self.localeObj.getConstant(data),\n        value: monthposValue[\"\" + data]\n      });\n    });\n    return dataSource;\n  };\n\n  RecurrenceEditor.prototype.getDayData = function (format) {\n    var weekday = [KEYSUNDAY, KEYMONDAY, KEYTUESDAY, KEYWEDNESDAY, KEYTHURSDAY, KEYFRIDAY, KEYSATURDAY];\n    var dayData = [];\n    var cldrObj;\n    this.rotateArray(weekday, this.firstDayOfWeek);\n\n    if (this.locale === 'en' || this.locale === 'en-US') {\n      var nameSpaceString = 'days.stand-alone.';\n      cldrObj = getValue(nameSpaceString + format, getDefaultDateObject(this.getCalendarMode()));\n    } else {\n      var nameSpaceString = 'main.' + '' + this.locale + '.dates.calendars.' + this.getCalendarMode() + '.days.stand-alone.' + format;\n      cldrObj = getValue(nameSpaceString, cldrData);\n    }\n\n    for (var _i = 0, weekday_1 = weekday; _i < weekday_1.length; _i++) {\n      var obj = weekday_1[_i];\n      var day = getValue(obj, cldrObj);\n      dayData.push({\n        text: format === 'narrow' ? day : capitalizeFirstWord(day, 'single'),\n        value: valueData[\"\" + obj]\n      });\n    }\n\n    return dayData;\n  };\n\n  RecurrenceEditor.prototype.getMonthData = function () {\n    var monthData = [];\n    var cldrObj;\n\n    if (this.locale === 'en' || this.locale === 'en-US') {\n      var nameSpaceString = 'months.stand-alone.wide';\n      cldrObj = getValue(nameSpaceString, getDefaultDateObject(this.getCalendarMode()));\n    } else {\n      var nameSpaceString = 'main.' + '' + this.locale + '.dates.calendars.' + this.getCalendarMode() + '.months.stand-alone.wide';\n      cldrObj = getValue(nameSpaceString, cldrData);\n    }\n\n    for (var _i = 0, _a = Object.keys(cldrObj); _i < _a.length; _i++) {\n      var obj = _a[_i];\n      monthData.push({\n        text: capitalizeFirstWord(getValue(obj, cldrObj), 'single'),\n        value: obj\n      });\n    }\n\n    return monthData;\n  };\n\n  RecurrenceEditor.prototype.setTemplate = function () {\n    var dayData = this.getDayData('narrow');\n    var fullDay = this.getDayData('wide');\n    this.element.innerHTML = '<div class=\"' + HEADER + '\">' + '<div class=\"' + INPUTWARAPPER + ' ' + FORMLEFT + '\">' + '<input type=\"text\" tabindex=\"0\" class=\"' + REPEATELEMENT + '\"label=\"' + REPEATELEMENT.substr(2) + '\" />' + '</div><div class=\"' + INPUTWARAPPER + ' ' + INTERVALCLASS + ' ' + FORMRIGHT + '\"><table  class=\"' + RECURRENCETABLE + ' ' + REPEATCONTENTWRAPPER + '\"><tr>' + '<td><input type=\"text\" tabindex=\"0\" id=\"' + this.element.id + '_' + REPEATINTERVAL + '\" class=\"' + REPEATINTERVAL + '\"title=\"' + this.localeObj.getConstant('repeatEvery') + '\" /></td>' + '<td><span class=\"' + REPEATCONTENT + '\"></span></td>' + '</tr></table></div><div class=\"' + INPUTWARAPPERSIDE + ' ' + DAYWRAPPER + ' ' + FORMLEFT + '\">' + '<div class=' + WEEKEXPANDERLABEL + '>' + this.localeObj.getConstant(ON$1) + '</div>' + '<button type=\"button\" class=\"e-round\" data-index=\"0\" title=\"' + fullDay[0].text + '\">' + dayData[0].text + '</button>' + '<button type=\"button\" class=\"e-round\" data-index=\"1\" title=\"' + fullDay[1].text + '\">' + dayData[1].text + '</button>' + '<button type=\"button\" class=\"e-round\" data-index=\"2\" title=\"' + fullDay[2].text + '\">' + dayData[2].text + '</button>' + '<button type=\"button\" class=\"e-round\" data-index=\"3\" title=\"' + fullDay[3].text + '\">' + dayData[3].text + '</button>' + '<button type=\"button\" class=\"e-round\" data-index=\"4\" title=\"' + fullDay[4].text + '\">' + dayData[4].text + '</button>' + '<button type=\"button\" class=\"e-round\" data-index=\"5\" title=\"' + fullDay[5].text + '\">' + dayData[5].text + '</button>' + '<button type=\"button\" class=\"e-round\" data-index=\"6\" title=\"' + fullDay[6].text + '\">' + dayData[6].text + '</button></div>' + '<div class=\"' + INPUTWARAPPERSIDE + ' ' + WEEKWRAPPER + ' ' + FORMLEFT + '\">' + '<div class=' + MONTHEXPANDERLABEL + '>' + this.localeObj.getConstant(ON$1) + '</div>' + '<div class=\"' + YEAREXPANDERWRAPPER + '\">' + '<input class=\"' + YEAREXPANDERELEMENT + '\" type=\"text\" tabindex=\"0\" title=\"' + this.localeObj.getConstant('yearExpander') + '\"/>' + '</div>' + '<div class=\"' + MONETHEXPANDERWRAPPER + '\">' + '<table class=\"' + RECURRENCETABLE + ' ' + MONETHEXPANDWRAPPER + '\"><tr><td>' + '<div class=\"' + INPUTWARAPPER + ' ' + MONTHEXPANDERCHECKBOXWRAPPER + '\">' + '<input class=\"' + MONTHEXPANDERELEMENT + '\"title=\"' + this.localeObj.getConstant('monthExpander') + '\" type=\"radio\">' + '</div></td>' + '<td colspan=\"2\"><div class=\"' + INPUTWARAPPER + ' ' + MONTHDAYELEMENT + '\">' + '<input type=\"text\" tabindex=\"0\" id=\"' + this.element.id + '_' + MONTHDAYWRAPPER + '\" class=\"' + MONTHDAYWRAPPER + '\"title=\"' + this.localeObj.getConstant('on') + '\" />' + '</div></td></tr>' + '<tr><td>' + '<div class=\"' + INPUTWARAPPER + ' ' + MONTHEXPANDERCHECKBOXWRAPPER + '\" style=\"min-width: 30px;margin-bottom:18px;\">' + '<input class=\"' + MONTHEXPANNDERELEM + '\"title=\"' + this.localeObj.getConstant('monthExpander') + '\" type=\"radio\">' + '</div></td>' + '<td><div class=\"' + INPUTWARAPPER + ' ' + WEEKPOSITION + '\" >' + '<input type=\"text\" tabindex=\"0\" class=\"' + MONTHPOS + '\"title=\"' + this.localeObj.getConstant('monthPosition') + '\" />' + '</div></td>' + '<td><div class=\"' + INPUTWARAPPER + ' ' + DAYPOSITION + '\">' + '<input type=\"text\" tabindex=\"0\" class=\"' + MONTHWEEK + '\"title=\"' + this.localeObj.getConstant('monthWeek') + '\" />' + '</div></td></tr></table>' + '</div></div>' + '<div class=\"' + INPUTWARAPPERSIDE + ' ' + ENDON + ' ' + FORMRIGHT + '\">' + '<div class=' + ENDONLABEL + '>' + this.localeObj.getConstant(END) + '</div>' + '<div class=\"' + INPUTWARAPPER + ' ' + ENDONLEFT + '\">' + '<input type=\"text\" tabindex=\"0\" class=\"' + ENDONELEMENT + '\"title=\"' + this.localeObj.getConstant(END) + '\" />' + '</div>' + '<div class=\"' + INPUTWARAPPER + ' ' + ENDONDATE + '\" >' + '<input type=\"text\" tabindex=\"0\" class=\"' + UNTILDATE + '\"title=\"' + this.localeObj.getConstant(UNTIL$1) + '\" />' + '</div>' + '<div class=\"' + INPUTWARAPPER + ' ' + ENDONCOUNTWRAPPER + '\">' + '<input type=\"text\" tabindex=\"0\" id=\"' + this.element.id + '_' + ENDONCOUNT + '\" class=\"' + ENDONCOUNT + '\"title=\"' + this.localeObj.getConstant(COUNT) + '\" />' + '</div></div>' + '</div></div>';\n  };\n\n  RecurrenceEditor.prototype.getSelectedDaysData = function () {\n    var ruleData = RULEBYDAY + EQUAL;\n    var elements = [].slice.call(this.element.querySelectorAll('.' + DAYWRAPPER + ' button.' + PRIMARY));\n    var weekday = [RULESUNDAY, RULEMONDAY, RULETUESDAY, RULEWEDNESDAY, RULETHURSDAY, RULEFRIDAY, RULESATURDAY];\n    this.rotateArray(weekday, this.firstDayOfWeek);\n\n    for (var index = 0; index < elements.length; index++) {\n      ruleData += weekday[parseInt(elements[parseInt(index.toString(), 10)].getAttribute('data-index'), 10)] + (index === elements.length - 1 ? '' : COMMA);\n    }\n\n    return ruleData + SEMICOLON;\n  };\n\n  RecurrenceEditor.prototype.getSelectedMonthData = function () {\n    var ruleData;\n\n    if (this.onWeekDay.checked) {\n      ruleData = RULEBYDAY + EQUAL + this.monthWeekDays.value + SEMICOLON + RULESETPOS + EQUAL + this.monthWeekPos.value + SEMICOLON;\n    } else {\n      ruleData = RULEBYMONTHDAY + EQUAL + this.monthDate.value + SEMICOLON;\n    }\n\n    return ruleData;\n  };\n\n  RecurrenceEditor.prototype.getIntervalData = function () {\n    return RULEINTERVAL + EQUAL + this.repeatInterval.value + SEMICOLON;\n  };\n\n  RecurrenceEditor.prototype.getEndOnCount = function () {\n    return RULECOUNT + EQUAL + this.recurrenceCount.value + SEMICOLON;\n  };\n\n  RecurrenceEditor.prototype.getYearMonthRuleData = function () {\n    return RULEBYMONTH + EQUAL + this.monthValue.value + SEMICOLON;\n  };\n\n  RecurrenceEditor.prototype.updateWeekButton = function (keys) {\n    var weekday = [RULESUNDAY, RULEMONDAY, RULETUESDAY, RULEWEDNESDAY, RULETHURSDAY, RULEFRIDAY, RULESATURDAY];\n    this.rotateArray(weekday, this.firstDayOfWeek);\n\n    for (var _i = 0, _a = this.dayButtons; _i < _a.length; _i++) {\n      var obj = _a[_i];\n      var index = parseInt(obj.element.getAttribute('data-index'), 10);\n\n      if (keys.indexOf(weekday[parseInt(index.toString(), 10)]) !== -1) {\n        obj.setProperties({\n          isPrimary: true\n        });\n      } else {\n        obj.setProperties({\n          isPrimary: false\n        });\n      }\n    }\n  };\n\n  RecurrenceEditor.prototype.updateMonthUI = function () {\n    if (this.ruleObject.monthDay.length) {\n      this.monthDate.setProperties({\n        value: this.ruleObject.monthDay[0]\n      });\n      this.onMonthDay.setProperties({\n        checked: true\n      });\n    } else {\n      this.onWeekDay.setProperties({\n        checked: true\n      });\n      this.monthWeekPos.setProperties({\n        value: this.ruleObject.setPosition\n      });\n\n      for (var _i = 0, _a = Object.keys(valueData); _i < _a.length; _i++) {\n        var key = _a[_i];\n\n        if (valueData[\"\" + key] === this.ruleObject.day[0]) {\n          this.monthWeekDays.setProperties({\n            value: this.ruleObject.day[0]\n          });\n          break;\n        }\n      }\n    }\n  };\n\n  RecurrenceEditor.prototype.updateUI = function (repeat, state) {\n    this.repeatInterval.setProperties({\n      value: this.ruleObject.interval\n    });\n\n    switch (state) {\n      case UNTIL$1:\n        this.untilDateObj.setProperties({\n          value: this.ruleObject.until\n        });\n        break;\n\n      case COUNT:\n        this.recurrenceCount.setProperties({\n          value: this.ruleObject.count\n        });\n        break;\n    }\n\n    switch (repeat) {\n      case WEEKLY:\n        this.updateWeekButton(this.ruleObject.day);\n        break;\n\n      case YEARLY:\n        this.monthValue.setProperties({\n          index: this.ruleObject.month[0] - 1\n        });\n        this.updateMonthUI();\n        break;\n\n      case MONTHLY:\n        this.updateMonthUI();\n        break;\n    }\n  };\n\n  RecurrenceEditor.prototype.getUntilData = function () {\n    if (!this.untilDateObj.value) {\n      return '';\n    }\n\n    var tempStr = getRecurrenceStringFromDate(this.untilDateObj.value);\n    return RULEUNTIL + EQUAL + tempStr + SEMICOLON;\n  };\n\n  RecurrenceEditor.prototype.destroyComponents = function () {\n    if (!this.recurrenceCount.isDestroyed) {\n      this.recurrenceCount.destroy();\n      this.recurrenceCount = null;\n    }\n\n    if (!this.monthDate.isDestroyed) {\n      this.monthDate.destroy();\n      this.monthDate = null;\n    }\n\n    if (!this.repeatInterval.isDestroyed) {\n      this.repeatInterval.destroy();\n      this.repeatInterval = null;\n    }\n\n    if (!this.untilDateObj.isDestroyed) {\n      this.untilDateObj.destroy();\n      this.untilDateObj = null;\n    }\n\n    if (!this.repeatType.isDestroyed) {\n      this.repeatType.destroy();\n      this.repeatType = null;\n    }\n\n    if (!this.endType.isDestroyed) {\n      this.endType.destroy();\n      this.endType = null;\n    }\n\n    if (!this.monthWeekPos.isDestroyed) {\n      this.monthWeekPos.destroy();\n      this.monthWeekPos = null;\n    }\n\n    if (!this.monthWeekDays.isDestroyed) {\n      this.monthWeekDays.destroy();\n      this.monthWeekDays = null;\n    }\n\n    if (!this.monthValue.isDestroyed) {\n      this.monthValue.destroy();\n      this.monthValue = null;\n    }\n\n    if (!this.onMonthDay.isDestroyed) {\n      this.onMonthDay.destroy();\n      this.onMonthDay = null;\n    }\n\n    if (!this.onWeekDay.isDestroyed) {\n      this.onWeekDay.destroy();\n      this.onWeekDay = null;\n    }\n\n    this.dayButtons.forEach(function (element) {\n      if (!element.isDestroyed) {\n        element.destroy();\n      }\n    });\n    this.dayButtons = [];\n    this.monthButtons.forEach(function (element) {\n      if (!element.isDestroyed) {\n        element.destroy();\n      }\n    });\n    this.monthButtons = [];\n  };\n\n  RecurrenceEditor.prototype.resetFields = function () {\n    this.startState(NONE, NEVER, this.startDate);\n    this.setDefaultValue();\n  };\n\n  RecurrenceEditor.prototype.updateRuleUntilDate = function (startDate) {\n    if (this.untilDateObj.value && startDate) {\n      var untilDate = this.untilDateObj.value;\n      var newUntilDate = new Date(untilDate.getFullYear(), untilDate.getMonth(), untilDate.getDate(), startDate.getHours(), startDate.getMinutes(), startDate.getMilliseconds());\n      this.untilDateObj.setProperties({\n        value: newUntilDate\n      });\n    }\n  };\n\n  RecurrenceEditor.prototype.getCalendarMode = function () {\n    return this.calendarMode.toLowerCase();\n  };\n\n  RecurrenceEditor.prototype.getRuleSummary = function (rule) {\n    if (rule === void 0) {\n      rule = this.getRecurrenceRule();\n    }\n\n    return generateSummary(rule, this.localeObj, this.locale, this.calendarMode);\n  };\n\n  RecurrenceEditor.prototype.getRecurrenceDates = function (startDate, rule, excludeDate, maximumCount, viewDate) {\n    viewDate = isNullOrUndefined(viewDate) ? this.startDate : viewDate;\n    return generate(startDate, rule, excludeDate, this.firstDayOfWeek, maximumCount, viewDate, this.calendarMode);\n  };\n\n  RecurrenceEditor.prototype.getRecurrenceRule = function () {\n    var ruleData = RULEFREQ + EQUAL;\n\n    switch (this.repeatType.value) {\n      case DAILY:\n        ruleData += RULEDAILY + SEMICOLON;\n        break;\n\n      case WEEKLY:\n        ruleData += RULEWEEKLY + SEMICOLON + this.getSelectedDaysData();\n        break;\n\n      case MONTHLY:\n        ruleData += RULEMONTHLY + SEMICOLON + this.getSelectedMonthData();\n        break;\n\n      case YEARLY:\n        ruleData += RULEYEARLY + SEMICOLON + this.getSelectedMonthData() + this.getYearMonthRuleData();\n        break;\n\n      case NONE:\n        return '';\n    }\n\n    ruleData += this.getIntervalData();\n\n    switch (this.endType.value) {\n      case UNTIL$1:\n        ruleData += this.getUntilData();\n        break;\n\n      case COUNT:\n        ruleData += this.getEndOnCount();\n        break;\n    }\n\n    return ruleData;\n  };\n\n  RecurrenceEditor.prototype.setRecurrenceRule = function (rule, startDate) {\n    if (startDate === void 0) {\n      startDate = this.startDate;\n    }\n\n    if (!rule) {\n      this.repeatType.setProperties({\n        value: NONE\n      });\n      return;\n    }\n\n    this.renderStatus = false;\n    this.ruleObject = extractObjectFromRule(rule);\n    var endon = this.ruleObject.count ? COUNT : this.ruleObject.until ? UNTIL$1 : NEVER;\n\n    switch (this.ruleObject.freq) {\n      case RULEDAILY:\n        this.startState(DAILY, endon, startDate);\n        this.updateUI(DAILY, endon);\n        break;\n\n      case RULEWEEKLY:\n        this.startState(WEEKLY, endon, startDate);\n        this.updateUI(WEEKLY, endon);\n        break;\n\n      case RULEMONTHLY:\n        this.startState(MONTHLY, endon, startDate);\n        this.updateUI(MONTHLY, endon);\n        break;\n\n      case RULEYEARLY:\n        this.startState(YEARLY, endon, startDate);\n        this.updateUI(YEARLY, endon);\n        break;\n    }\n\n    this.renderStatus = true;\n    this.triggerChangeEvent();\n  };\n\n  RecurrenceEditor.prototype.detachInputs = function () {\n    var inputElements = [].slice.call(this.element.querySelectorAll('input'));\n\n    for (var _i = 0, inputElements_1 = inputElements; _i < inputElements_1.length; _i++) {\n      var element = inputElements_1[_i];\n      detach(element);\n    }\n  };\n  /**\n   * Destroys the widget.\n   *\n   * @returns {void}\n   */\n\n\n  RecurrenceEditor.prototype.destroy = function () {\n    if (!this.isDestroyed) {\n      this.destroyComponents();\n\n      _super.prototype.destroy.call(this);\n\n      var removeClasses = ['e-' + this.getModuleName()];\n\n      if (this.cssClass) {\n        removeClasses = removeClasses.concat(this.cssClass.split(' '));\n      }\n\n      removeClass([this.element], removeClasses);\n      this.detachInputs();\n\n      while (this.element.firstElementChild) {\n        this.element.removeChild(this.element.firstElementChild);\n      }\n    }\n  };\n  /**\n   * Get component name.\n   *\n   * @returns {string} Returns the module name\n   * @private\n   */\n\n\n  RecurrenceEditor.prototype.getModuleName = function () {\n    return 'recurrenceeditor';\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} Returns the persisted state\n   */\n\n\n  RecurrenceEditor.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n  /**\n   * Initialize the control rendering\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  RecurrenceEditor.prototype.render = function () {\n    this.initialize();\n    this.rtlClass(this.enableRtl);\n    this.renderStatus = true;\n    this.renderComplete();\n  };\n  /**\n   * Called internally, if any of the property value changed.\n   *\n   * @param {RecurrenceEditorModel} newProp Accepts the changed properties new values\n   * @param {RecurrenceEditorModel} oldProp Accepts the changed properties old values\n   * @returns {void}\n   * @private\n   */\n\n\n  RecurrenceEditor.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'startDate':\n          this.selectMonthDay(newProp.startDate);\n          this.updateUntilDate(newProp.startDate);\n          this.endType.setProperties({\n            index: 0\n          });\n          break;\n\n        case 'enableRtl':\n          this.rtlClass(newProp.enableRtl);\n          break;\n\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([this.element], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([this.element], newProp.cssClass.split(' '));\n          }\n\n          break;\n\n        case 'selectedType':\n          this.repeatType.setProperties({\n            index: this.selectedType\n          });\n          break;\n\n        case 'minDate':\n          this.untilDateObj.setProperties({\n            minDate: this.minDate\n          });\n          break;\n\n        case 'maxDate':\n          this.untilDateObj.setProperties({\n            maxDate: this.maxDate\n          });\n          break;\n\n        case 'value':\n          if (this.getRecurrenceRule() !== this.value) {\n            this.setRecurrenceRule(this.value);\n          }\n\n          break;\n\n        case 'calendarMode':\n          this.calendarMode = newProp.calendarMode;\n          this.calendarUtil = getCalendarUtil(newProp.calendarMode);\n          break;\n\n        case 'locale':\n        case 'frequencies':\n        case 'firstDayOfWeek':\n          this.refresh();\n          break;\n\n        case 'dateFormat':\n          this.untilDateObj.setProperties({\n            format: newProp.dateFormat\n          });\n          break;\n      }\n    }\n  };\n\n  __decorate$1([Property(['none', 'daily', 'weekly', 'monthly', 'yearly'])], RecurrenceEditor.prototype, \"frequencies\", void 0);\n\n  __decorate$1([Property(0)], RecurrenceEditor.prototype, \"firstDayOfWeek\", void 0);\n\n  __decorate$1([Property(new Date())], RecurrenceEditor.prototype, \"startDate\", void 0);\n\n  __decorate$1([Property()], RecurrenceEditor.prototype, \"dateFormat\", void 0);\n\n  __decorate$1([Property('Gregorian')], RecurrenceEditor.prototype, \"calendarMode\", void 0);\n\n  __decorate$1([Property()], RecurrenceEditor.prototype, \"cssClass\", void 0);\n\n  __decorate$1([Property()], RecurrenceEditor.prototype, \"value\", void 0);\n\n  __decorate$1([Property(new Date(1900, 0, 1))], RecurrenceEditor.prototype, \"minDate\", void 0);\n\n  __decorate$1([Property(new Date(2099, 11, 31))], RecurrenceEditor.prototype, \"maxDate\", void 0);\n\n  __decorate$1([Property(0)], RecurrenceEditor.prototype, \"selectedType\", void 0);\n\n  __decorate$1([Event()], RecurrenceEditor.prototype, \"change\", void 0);\n\n  RecurrenceEditor = __decorate$1([NotifyPropertyChanges], RecurrenceEditor);\n  return RecurrenceEditor;\n}(Component);\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nvar EVENT_FIELD$1 = 'e-field';\nvar REPEAT_CONTAINER_CLASS = 'e-recurrence-container';\nvar REPEAT_BUTTON_ICON_CLASS = 'e-recurrence-edit';\nvar REPEAT_BUTTON_CLASS = 'e-recurrence-edit-button';\nvar REPEAT_DIALOG_CLASS = 'e-recurrence-dialog';\nvar HIDE_STYLE_CLASS = 'e-hide';\n/**\n * Event editor window\n */\n\nvar EventWindow =\n/** @__PURE__ @class */\nfunction () {\n  function EventWindow(parent) {\n    this.parent = parent;\n    this.l10n = this.parent.localeObj;\n    this.fields = this.parent.eventFields;\n    this.eventWindowTime = {\n      startTime: new Date(),\n      endTime: new Date()\n    };\n    this.renderEventWindow();\n  }\n\n  EventWindow.prototype.renderEventWindow = function () {\n    this.element = createElement('div', {\n      id: this.parent.element.id + '_dialog_wrapper'\n    });\n    this.parent.element.appendChild(this.element);\n    var dialogModel = {\n      animationSettings: {\n        effect: 'Zoom'\n      },\n      content: this.getEventWindowContent(),\n      cssClass: EVENT_WINDOW_DIALOG_CLASS,\n      enableRtl: this.parent.enableRtl,\n      enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n      height: this.parent.isAdaptive ? '100%' : 'auto',\n      minHeight: '300px',\n      isModal: true,\n      showCloseIcon: this.parent.isAdaptive ? false : true,\n      target: document.body,\n      visible: false,\n      width: '500px',\n      beforeOpen: this.onBeforeOpen.bind(this),\n      beforeClose: this.onBeforeClose.bind(this)\n    };\n\n    if (this.parent.isAdaptive) {\n      dialogModel.cssClass = EVENT_WINDOW_DIALOG_CLASS + ' ' + DEVICE_CLASS;\n      dialogModel.header = '<div class=\"e-title-header\"><div class=\"e-back-icon e-icons\"></div><div class=\"e-title-text\">' + this.l10n.getConstant('newEvent') + '</div><div class=\"e-save-icon e-icons\"></div></div>';\n    } else {\n      dialogModel.buttons = [{\n        buttonModel: {\n          content: this.l10n.getConstant('deleteButton'),\n          cssClass: DELETE_EVENT_CLASS,\n          disabled: !this.parent.eventSettings.allowDeleting || this.parent.readonly\n        },\n        click: this.eventDelete.bind(this)\n      }, {\n        buttonModel: {\n          content: this.l10n.getConstant('saveButton'),\n          cssClass: 'e-primary ' + EVENT_WINDOW_SAVE_BUTTON_CLASS,\n          isPrimary: true,\n          disabled: !this.parent.eventSettings.allowAdding || this.parent.readonly\n        },\n        click: this.eventSave.bind(this)\n      }, {\n        buttonModel: {\n          cssClass: EVENT_WINDOW_CANCEL_BUTTON_CLASS,\n          content: this.l10n.getConstant('cancelButton')\n        },\n        click: this.dialogClose.bind(this)\n      }];\n      dialogModel.header = '<div class=\"e-title-text\">' + this.l10n.getConstant('newEvent') + '</div>';\n    }\n\n    this.dialogObject = new Dialog(dialogModel, this.element);\n\n    if (this.dialogObject.element.querySelector('.e-dlg-closeicon-btn')) {\n      this.dialogObject.element.querySelector('.e-dlg-closeicon-btn').setAttribute('title', this.l10n.getConstant('close'));\n    }\n\n    addClass([this.element.parentElement], EVENT_WINDOW_DIALOG_CLASS + '-container');\n\n    if (this.parent.isAdaptive) {\n      EventHandler.add(this.element.querySelector('.' + EVENT_WINDOW_BACK_ICON_CLASS), 'click', this.dialogClose, this);\n      EventHandler.add(this.element.querySelector('.' + EVENT_WINDOW_SAVE_ICON_CLASS), 'click', this.eventSave, this);\n    }\n\n    EventHandler.add(this.dialogObject.element, 'keydown', this.preventEventSave, this);\n    this.applyFormValidation();\n  };\n\n  EventWindow.prototype.refresh = function () {\n    this.destroy(true);\n    this.renderEventWindow();\n  };\n\n  EventWindow.prototype.refreshRecurrenceEditor = function () {\n    if (this.recurrenceEditor) {\n      var recurrenceEditor = this.recurrenceEditor.element;\n      this.recurrenceEditor.destroy();\n      this.createRecurrenceEditor(recurrenceEditor);\n    }\n  };\n\n  EventWindow.prototype.setRecurrenceEditor = function (recurrenceEditor) {\n    if (this.parent.editorTemplate) {\n      this.recurrenceEditor = recurrenceEditor;\n    }\n  };\n\n  EventWindow.prototype.openEditor = function (data, type, isEventData, repeatType) {\n    this.parent.currentAction = type;\n    this.parent.removeNewEventElement();\n\n    if (this.parent.quickPopup) {\n      this.parent.quickPopup.quickPopupHide(true);\n    }\n\n    this.parent.inlineModule.removeInlineAppointmentElement();\n\n    if (type === 'Add') {\n      var eventObj = {};\n      this.cellClickAction = !isEventData;\n      this.parent.activeCellsData = data;\n      var event_1 = data;\n\n      if (this.cellClickAction) {\n        this.convertToEventData(event_1, eventObj);\n      } else {\n        this.parent.activeCellsData = {\n          startTime: event_1.startTime || event_1[this.fields.startTime],\n          endTime: event_1.endTime || event_1[this.fields.endTime],\n          isAllDay: event_1.isAllDay || event_1[this.fields.isAllDay],\n          element: event_1.element,\n          groupIndex: event_1.groupIndex\n        };\n        eventObj = event_1;\n      }\n\n      data = eventObj;\n    }\n\n    if (!isNullOrUndefined(this.parent.editorTemplate)) {\n      this.renderFormElements(this.element.querySelector('.e-schedule-form'), data);\n    }\n\n    if (!this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {\n      removeClass([this.dialogObject.element.querySelector('.e-recurrenceeditor')], DISABLE_CLASS);\n    }\n\n    if (this.recurrenceEditor) {\n      this.recurrenceEditor.firstDayOfWeek = this.parent.activeViewOptions.firstDayOfWeek;\n    }\n\n    switch (type) {\n      case 'Add':\n        this.onCellDetailsUpdate(data, repeatType);\n        break;\n\n      case 'Save':\n      case 'EditOccurrence':\n      case 'EditSeries':\n      case 'EditFollowingEvents':\n        if (type === 'EditOccurrence' && !this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {\n          addClass([this.dialogObject.element.querySelector('.e-recurrenceeditor')], DISABLE_CLASS);\n        }\n\n        this.cellClickAction = false;\n        this.onEventDetailsUpdate(data);\n        break;\n    }\n  };\n\n  EventWindow.prototype.setDialogContent = function () {\n    this.dialogObject.content = this.getEventWindowContent();\n    this.dialogObject.dataBind();\n    this.applyFormValidation();\n  };\n\n  EventWindow.prototype.preventEventSave = function (e) {\n    if (this.parent && !this.parent.allowKeyboardInteraction && e.code === 'Enter') {\n      this.isEnterKey = true;\n    }\n  };\n\n  EventWindow.prototype.onBeforeOpen = function (args) {\n    var _this = this;\n\n    var eventProp = {\n      type: 'Editor',\n      data: this.eventData,\n      cancel: false,\n      element: this.element,\n      target: this.cellClickAction ? this.parent.activeCellsData.element : this.parent.activeEventData.element\n    };\n\n    if (this.cellClickAction) {\n      eventProp.duration = this.getSlotDuration();\n    }\n\n    var saveObj = this.getInstance(EVENT_WINDOW_SAVE_BUTTON_CLASS);\n\n    if (saveObj) {\n      saveObj.disabled = !(this.cellClickAction ? this.parent.eventSettings.allowAdding : this.parent.eventSettings.allowEditing);\n      saveObj.dataBind();\n    }\n\n    var deleteObj = this.getInstance(DELETE_EVENT_CLASS);\n\n    if (deleteObj) {\n      deleteObj.disabled = !this.parent.eventSettings.allowDeleting;\n      deleteObj.dataBind();\n    }\n\n    var callBackPromise = new Deferred();\n    this.parent.trigger(popupOpen, eventProp, function (popupArgs) {\n      args.cancel = popupArgs.cancel;\n      _this.duration = _this.cellClickAction ? popupArgs.duration : null;\n\n      _this.refreshDateTimePicker(_this.duration);\n\n      if (_this.cellClickAction && popupArgs.duration !== _this.getSlotDuration() && isNullOrUndefined(_this.parent.editorTemplate)) {\n        var startObj = _this.getInstance(EVENT_WINDOW_START_CLASS);\n\n        var endObj = _this.getInstance(EVENT_WINDOW_END_CLASS);\n\n        endObj.value = new Date(startObj.value.getTime() + MS_PER_MINUTE * popupArgs.duration);\n        endObj.dataBind();\n      }\n\n      if (_this.parent.editorTemplate && _this.element.querySelector('.e-recurrenceeditor') && !_this.recurrenceEditor) {\n        _this.recurrenceEditor = _this.getInstance('e-recurrenceeditor');\n      }\n\n      callBackPromise.resolve(args);\n    });\n    return callBackPromise;\n  };\n\n  EventWindow.prototype.onBeforeClose = function (args) {\n    var _this = this;\n\n    if (args.isInteracted) {\n      this.isCrudAction = false;\n    }\n\n    var eventProp = {\n      type: 'Editor',\n      event: args.event || this.dialogEvent,\n      data: this.eventCrudData,\n      cancel: false,\n      element: this.element,\n      target: this.cellClickAction ? this.parent.activeCellsData.element : this.parent.activeEventData.element\n    };\n    var callBackPromise = new Deferred();\n    this.parent.trigger(popupClose, eventProp, function (popupArgs) {\n      args.cancel = popupArgs.cancel;\n\n      if (!popupArgs.cancel) {\n        if (_this.isCrudAction) {\n          args.cancel = _this.processCrudActions(popupArgs.data);\n          _this.isCrudAction = args.cancel;\n        }\n\n        if (!_this.isCrudAction) {\n          _this.resetForm();\n\n          _this.parent.eventBase.focusElement(true);\n\n          _this.eventCrudData = null;\n        }\n      }\n\n      callBackPromise.resolve(args);\n    });\n    return callBackPromise;\n  };\n\n  EventWindow.prototype.getEventWindowContent = function () {\n    var container = createElement('div', {\n      className: FORM_CONTAINER_CLASS\n    });\n    var form = createElement('form', {\n      id: this.parent.element.id + 'EditForm',\n      className: FORM_CLASS,\n      attrs: {\n        onsubmit: 'return false;'\n      }\n    });\n    this.renderFormElements(form);\n    container.appendChild(form);\n    return container;\n  };\n\n  EventWindow.prototype.renderFormElements = function (form, args) {\n    var _this = this;\n\n    if (!isNullOrUndefined(this.parent.editorTemplate)) {\n      if (args) {\n        if (this.fieldValidator) {\n          this.fieldValidator.destroy();\n          this.fieldValidator = null;\n        }\n\n        if (this.recurrenceEditor) {\n          this.recurrenceEditor.destroy();\n          this.recurrenceEditor = null;\n        }\n\n        this.destroyComponents();\n        var formElements = [].slice.call(form.children);\n\n        for (var _i = 0, formElements_1 = formElements; _i < formElements_1.length; _i++) {\n          var element = formElements_1[_i];\n          remove(element);\n        }\n\n        this.parent.resetTemplates(['editorTemplate']);\n      }\n\n      var templateId = this.parent.element.id + '_editorTemplate';\n      var tempEle = [].slice.call(this.parent.getEditorTemplate()(args || {}, this.parent, 'editorTemplate', templateId, false));\n      append(tempEle, form);\n      this.parent.renderTemplates(function () {\n        if (_this.element) {\n          _this.applyFormValidation();\n        }\n      });\n    } else {\n      form.appendChild(this.getDefaultEventWindowContent());\n    }\n  };\n\n  EventWindow.prototype.getDefaultEventWindowContent = function () {\n    var parentDiv = this.createDivElement(EVENT_WINDOW_DIALOG_PARENT_CLASS);\n    var titleLocationDiv = this.createDivElement(EVENT_WINDOW_TITLE_LOCATION_DIV_CLASS);\n    parentDiv.appendChild(titleLocationDiv);\n    titleLocationDiv.appendChild(this.renderTextBox(SUBJECT_CLASS));\n    titleLocationDiv.querySelector('.' + SUBJECT_CLASS).setAttribute('title', this.parent.editorTitles.subject);\n    titleLocationDiv.appendChild(this.renderTextBox(LOCATION_CLASS));\n    titleLocationDiv.querySelector('.' + LOCATION_CLASS).setAttribute('title', this.parent.editorTitles.location);\n    var startEndDateTimeDiv = this.createDivElement(EVENT_WINDOW_START_END_DIV_CLASS);\n    parentDiv.appendChild(startEndDateTimeDiv);\n    startEndDateTimeDiv.appendChild(this.renderDateTimePicker(EVENT_WINDOW_START_CLASS, this.onTimeChange.bind(this)));\n    startEndDateTimeDiv.querySelector('.' + EVENT_WINDOW_START_CLASS).setAttribute('title', this.parent.editorTitles.startTime);\n    startEndDateTimeDiv.appendChild(this.renderDateTimePicker(EVENT_WINDOW_END_CLASS));\n    startEndDateTimeDiv.querySelector('.' + EVENT_WINDOW_END_CLASS).setAttribute('title', this.parent.editorTitles.endTime);\n    var allDayTimezoneDiv = this.createDivElement(EVENT_WINDOW_ALLDAY_TZ_DIV_CLASS);\n    parentDiv.appendChild(allDayTimezoneDiv);\n    allDayTimezoneDiv.appendChild(this.renderCheckBox(EVENT_WINDOW_ALL_DAY_CLASS));\n    allDayTimezoneDiv.appendChild(this.renderCheckBox(TIME_ZONE_CLASS));\n    var timezoneParentDiv = this.createDivElement(EVENT_WINDOW_TIME_ZONE_DIV_CLASS);\n    parentDiv.appendChild(timezoneParentDiv);\n    timezoneParentDiv.appendChild(this.renderDropDown(EVENT_WINDOW_START_TZ_CLASS));\n    timezoneParentDiv.appendChild(this.renderDropDown(EVENT_WINDOW_END_TZ_CLASS));\n    var repeatParentDiv = this.createDivElement(EVENT_WINDOW_REPEAT_DIV_CLASS);\n    parentDiv.appendChild(repeatParentDiv);\n    var repeatDiv = this.renderCheckBox(EVENT_WINDOW_REPEAT_CLASS);\n    var repeatEditContainer = createElement('span', {\n      className: REPEAT_CONTAINER_CLASS\n    });\n    var button = createElement('button', {\n      className: REPEAT_BUTTON_CLASS,\n      attrs: {\n        type: 'button',\n        'title': this.l10n.getConstant('editRecurrence')\n      }\n    });\n    this.buttonObj = new Button({\n      iconCss: REPEAT_BUTTON_ICON_CLASS + ' e-icons',\n      cssClass: 'e-medium ' + this.parent.cssClass\n    });\n    repeatEditContainer.appendChild(button);\n    this.buttonObj.appendTo(button);\n    repeatDiv.appendChild(repeatEditContainer);\n    repeatParentDiv.appendChild(repeatDiv);\n\n    if (this.parent.isAdaptive) {\n      EventHandler.add(button, 'click', this.loadRecurrenceEditor, this);\n    } else {\n      this.createRecurrenceEditor(parentDiv);\n    }\n\n    if (this.parent.resourceCollection.length > 0) {\n      var resourceParentDiv = this.createDivElement(EVENT_WINDOW_RESOURCES_DIV_CLASS);\n\n      for (var _i = 0, _a = this.parent.resourceBase.resourceCollection; _i < _a.length; _i++) {\n        var resource = _a[_i];\n        resourceParentDiv.appendChild(this.renderResourceDetails(resource));\n      }\n\n      parentDiv.appendChild(resourceParentDiv);\n    }\n\n    var description = this.createDivElement(DESCRIPTION_CLASS + '-row');\n    description.appendChild(this.renderTextBox(DESCRIPTION_CLASS));\n    description.querySelector('.' + DESCRIPTION_CLASS).setAttribute('title', this.parent.editorTitles.description);\n    parentDiv.appendChild(description);\n    var submit = createElement('button', {\n      attrs: {\n        type: 'hidden',\n        title: 'submit',\n        style: 'display:none'\n      }\n    });\n    parentDiv.appendChild(submit);\n    return parentDiv;\n  };\n\n  EventWindow.prototype.createRecurrenceEditor = function (parentDiv) {\n    var recurrenceEditor = createElement('div', {\n      id: this.parent.element.id + '_recurrence_editor'\n    });\n    parentDiv.appendChild(recurrenceEditor);\n    this.recurrenceEditor = this.renderRecurrenceEditor();\n    this.recurrenceEditor.appendTo(recurrenceEditor);\n    this.updateMinMaxDateToEditor();\n  };\n\n  EventWindow.prototype.createDivElement = function (className) {\n    return createElement('div', {\n      className: className\n    });\n  };\n\n  EventWindow.prototype.createInputElement = function (className, fieldName, type) {\n    return createElement(type || 'input', {\n      className: className,\n      attrs: {\n        type: 'text',\n        name: fieldName,\n        value: '',\n        id: fieldName,\n        title: this.l10n.getConstant(fieldName.charAt(0).toLowerCase() + fieldName.slice(1)) === '' ? fieldName : this.l10n.getConstant(fieldName.charAt(0).toLowerCase() + fieldName.slice(1))\n      }\n    });\n  };\n\n  EventWindow.prototype.getSlotDuration = function () {\n    return this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount;\n  };\n\n  EventWindow.prototype.renderDateTimePicker = function (value, changeEvent) {\n    var dateTimeDiv = this.createDivElement(value + '-container');\n    var fieldName = this.getFieldName(value);\n    var dateTimeInput = this.createInputElement(value + ' ' + EVENT_FIELD$1, fieldName);\n    dateTimeDiv.appendChild(dateTimeInput);\n    var dateTimePicker = new DateTimePicker({\n      change: changeEvent,\n      firstDayOfWeek: this.parent.activeViewOptions.firstDayOfWeek,\n      calendarMode: this.parent.calendarMode,\n      min: this.parent.minDate,\n      max: new Date(new Date(+this.parent.maxDate).setHours(23, 59, 59)),\n      cssClass: this.parent.cssClass,\n      enableRtl: this.parent.enableRtl,\n      locale: this.parent.locale,\n      floatLabelType: 'Always',\n      timeFormat: this.parent.activeViewOptions.timeFormat,\n      format: (isNullOrUndefined(this.parent.dateFormat) ? this.getFormat('dateFormats') : this.parent.dateFormat) + ' ' + this.parent.activeViewOptions.timeFormat,\n      placeholder: this.getFieldLabel(value),\n      step: this.getSlotDuration(),\n      width: '100%'\n    });\n    dateTimePicker.appendTo(dateTimeInput);\n    return dateTimeDiv;\n  };\n\n  EventWindow.prototype.refreshDateTimePicker = function (duration) {\n    var elementSelector = '.' + EVENT_WINDOW_START_CLASS + ',.' + EVENT_WINDOW_END_CLASS;\n    var startEndElement = [].slice.call(this.element.querySelectorAll(elementSelector));\n\n    for (var _i = 0, startEndElement_1 = startEndElement; _i < startEndElement_1.length; _i++) {\n      var element = startEndElement_1[_i];\n      var instance = element.ej2_instances[0];\n      instance.firstDayOfWeek = this.parent.activeViewOptions.firstDayOfWeek;\n      instance.timeFormat = this.parent.activeViewOptions.timeFormat;\n      instance.step = duration || this.getSlotDuration();\n      instance.dataBind();\n    }\n  };\n\n  EventWindow.prototype.onTimeChange = function () {\n    var startObj = this.getInstance(EVENT_WINDOW_START_CLASS);\n\n    if (startObj.element.parentElement.classList.contains('e-input-focus')) {\n      var endObj = this.getInstance(EVENT_WINDOW_END_CLASS);\n      var duration = 0;\n\n      if (this.cellClickAction) {\n        duration = MS_PER_MINUTE * this.duration;\n        this.eventWindowTime.startTime = startObj.value;\n      } else {\n        duration = this.eventData[this.fields.endTime].getTime() - this.eventData[this.fields.startTime].getTime();\n      }\n\n      var endDate = isNullOrUndefined(startObj.value) ? null : new Date(startObj.value.getTime() + duration);\n\n      if (this.cellClickAction) {\n        this.eventWindowTime.endTime = endDate;\n      }\n\n      endObj.value = endDate;\n      endObj.dataBind();\n    }\n\n    if (this.recurrenceEditor) {\n      this.recurrenceEditor.updateRuleUntilDate(this.eventWindowTime.startTime);\n    }\n  };\n\n  EventWindow.prototype.renderResourceDetails = function (resourceData) {\n    var fieldName = resourceData.field;\n    var value = 'e-' + fieldName;\n    var labelValue = resourceData.title;\n    var resourceDiv = this.createDivElement(value + '-container' + ' ' + 'e-resources');\n    var resourceInput = this.createInputElement(value + ' ' + EVENT_FIELD$1, fieldName);\n    resourceDiv.appendChild(resourceInput);\n    var resourceTemplate = '<div class=\"e-resource-template\"><div class=\"e-resource-color\" style=\"background-color:${' + resourceData.colorField + '}\"></div><div class=\"e-resource-text\">${' + resourceData.textField + '}</div></div>';\n\n    if (resourceData.allowMultiple) {\n      var listObj = new MultiSelect({\n        enableRtl: this.parent.enableRtl,\n        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n        cssClass: this.parent.cssClass || '',\n        dataSource: resourceData.dataSource,\n        change: this.onMultiselectResourceChange.bind(this),\n        itemTemplate: resourceTemplate,\n        fields: {\n          text: resourceData.textField,\n          value: resourceData.idField\n        },\n        htmlAttributes: {\n          'title': labelValue,\n          'name': fieldName\n        },\n        floatLabelType: 'Always',\n        placeholder: labelValue,\n        popupHeight: '230px',\n        popupWidth: '447px',\n        mode: 'Box'\n      });\n      listObj.appendTo(resourceInput);\n    } else {\n      var dropDownList = new DropDownList({\n        cssClass: this.parent.cssClass || '',\n        change: this.onDropdownResourceChange.bind(this),\n        dataSource: resourceData.dataSource,\n        enableRtl: this.parent.enableRtl,\n        fields: {\n          text: resourceData.textField,\n          value: resourceData.idField\n        },\n        htmlAttributes: {\n          'title': labelValue,\n          'name': fieldName\n        },\n        floatLabelType: 'Always',\n        placeholder: labelValue,\n        popupHeight: '230px',\n        popupWidth: '447px',\n        itemTemplate: resourceTemplate\n      });\n      dropDownList.appendTo(resourceInput);\n    }\n\n    return resourceDiv;\n  };\n\n  EventWindow.prototype.renderDropDown = function (value) {\n    var _this = this;\n\n    var fieldName = this.getFieldName(value);\n    var timezoneDiv = this.createDivElement(value + '-container');\n    var timezoneInput = this.createInputElement(value + ' ' + EVENT_FIELD$1, fieldName);\n    timezoneDiv.appendChild(timezoneInput);\n    var dropDownList = new DropDownList({\n      allowFiltering: true,\n      change: this.onTimezoneChange.bind(this),\n      cssClass: this.parent.cssClass || '',\n      dataSource: this.parent.timezoneDataSource,\n      enableRtl: this.parent.enableRtl,\n      fields: {\n        text: 'Text',\n        value: 'Value'\n      },\n      filterBarPlaceholder: this.parent.localeObj.getConstant('searchTimezone'),\n      noRecordsTemplate: this.parent.localeObj.getConstant('noRecords'),\n      filtering: function (e) {\n        var query = new Query();\n        query = e.text !== '' ? query.where('Text', 'contains', e.text, true) : query;\n        e.updateData(_this.parent.timezoneDataSource, query);\n      },\n      htmlAttributes: {\n        'title': this.getFieldLabel(value),\n        'name': fieldName,\n        role: 'option'\n      },\n      floatLabelType: 'Always',\n      placeholder: this.getFieldLabel(value),\n      popupHeight: '230px'\n    });\n    dropDownList.appendTo(timezoneInput);\n    return timezoneDiv;\n  };\n\n  EventWindow.prototype.onMultiselectResourceChange = function (args) {\n    if (!args.value || !this.parent.activeViewOptions.group.byGroupID || this.parent.resourceCollection.length <= 1) {\n      return;\n    }\n\n    var resourceCollection = this.parent.resourceBase.resourceCollection;\n    var fieldName = args.element.getAttribute('name') || this.getColumnName(args.element);\n\n    for (var i = 0; i < resourceCollection.length; i++) {\n      if (resourceCollection[parseInt(i.toString(), 10)].field === fieldName && i < resourceCollection.length - 1) {\n        var resObject = this.createInstance(i);\n        var datasource = [];\n\n        var _loop_1 = function (j) {\n          var resourceModel = resourceCollection[i + 1]; // eslint-disable-next-line max-len\n\n          var filter = resourceModel.dataSource.filter(function (data) {\n            return data[resourceModel.groupIDField] === args.value[parseInt(j.toString(), 10)];\n          })[0];\n          var groupId = !isNullOrUndefined(filter) ? filter[resourceCollection[i + 1].groupIDField] : null;\n          var filterRes = this_1.filterDatasource(i, groupId);\n          datasource = datasource.concat(filterRes);\n        };\n\n        var this_1 = this;\n\n        for (var j = 0; j < args.value.length; j++) {\n          _loop_1(j);\n        }\n\n        resObject.dataSource = datasource;\n        resObject.dataBind();\n      }\n    }\n  };\n\n  EventWindow.prototype.createInstance = function (index) {\n    var resourceData = this.parent.resourceBase.resourceCollection[index + 1];\n    var resObject = this.element.querySelector('.e-' + resourceData.field).ej2_instances[0];\n    resObject.clear();\n    return resObject;\n  };\n\n  EventWindow.prototype.onDropdownResourceChange = function (args) {\n    if (!args.value || this.parent.resourceCollection.length <= 1 || !this.parent.activeViewOptions.group.byGroupID) {\n      return;\n    }\n\n    var fieldName = args.element.getAttribute('name') || this.getColumnName(args.element);\n    var resourceCollection = this.parent.resourceBase.resourceCollection;\n\n    for (var i = 0; i < resourceCollection.length; i++) {\n      if (i < resourceCollection.length - 1 && resourceCollection[parseInt(i.toString(), 10)].field === fieldName) {\n        var resObj = this.createInstance(i);\n        var groupId = args.itemData[resourceCollection[parseInt(i.toString(), 10)].idField];\n        resObj.dataSource = this.filterDatasource(i, groupId);\n        resObj.dataBind();\n        var resValue = resObj.dataSource.length > 0 ? resObj.dataSource[0][resourceCollection[i + 1].idField] : null;\n        resObj.value = resourceCollection[i + 1].allowMultiple ? [resValue] : resValue;\n        resObj.dataBind();\n      }\n    }\n  };\n\n  EventWindow.prototype.filterDatasource = function (index, groupId) {\n    var resourceData = this.parent.resourceBase.resourceCollection[index + 1];\n    return resourceData.dataSource.filter(function (data) {\n      return data[resourceData.groupIDField] === groupId;\n    });\n  };\n\n  EventWindow.prototype.onTimezoneChange = function (args) {\n    var fieldName = args.element.getAttribute('name') || this.getColumnName(args.element);\n\n    if (fieldName === this.parent.eventFields.startTimezone) {\n      var startTimezoneObj = this.getInstance(EVENT_WINDOW_START_TZ_CLASS);\n      var endTimezoneObj = this.getInstance(EVENT_WINDOW_END_TZ_CLASS);\n      endTimezoneObj.value = startTimezoneObj.value;\n      endTimezoneObj.dataBind();\n    }\n  };\n\n  EventWindow.prototype.renderCheckBox = function (value) {\n    var checkBoxDiv = this.createDivElement(value + '-container');\n    var fieldName = this.getFieldName(value);\n    var checkBoxInput = this.createInputElement(value + ' ' + EVENT_FIELD$1, fieldName);\n    checkBoxDiv.appendChild(checkBoxInput);\n    var checkBox = new CheckBox({\n      change: this.onChange.bind(this),\n      cssClass: value + ' ' + this.parent.cssClass,\n      enableRtl: this.parent.enableRtl,\n      enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n      label: this.getFieldLabel(value)\n    });\n    checkBox.appendTo(checkBoxInput);\n    checkBoxInput.setAttribute('name', fieldName);\n\n    if (fieldName === 'Repeat') {\n      this.repeatStatus = checkBox;\n    }\n\n    return checkBoxDiv;\n  };\n\n  EventWindow.prototype.renderTextBox = function (value) {\n    var textBoxDiv = this.createDivElement(value + '-container');\n    var fieldName = this.getFieldName(value);\n    var elementType = value === DESCRIPTION_CLASS ? 'textarea' : 'input';\n    var textBoxInput = this.createInputElement(value + ' ' + EVENT_FIELD$1, fieldName, elementType);\n    textBoxDiv.appendChild(textBoxInput);\n    Input.createInput({\n      element: textBoxInput,\n      floatLabelType: 'Always',\n      properties: {\n        enableRtl: this.parent.enableRtl,\n        placeholder: this.getFieldLabel(value)\n      }\n    });\n    return textBoxDiv;\n  };\n\n  EventWindow.prototype.getFieldName = function (name) {\n    var fieldName = '';\n\n    switch (name) {\n      case SUBJECT_CLASS:\n        fieldName = this.fields.subject;\n        break;\n\n      case LOCATION_CLASS:\n        fieldName = this.fields.location;\n        break;\n\n      case EVENT_WINDOW_START_CLASS:\n        fieldName = this.fields.startTime;\n        break;\n\n      case EVENT_WINDOW_END_CLASS:\n        fieldName = this.fields.endTime;\n        break;\n\n      case DESCRIPTION_CLASS:\n        fieldName = this.fields.description;\n        break;\n\n      case EVENT_WINDOW_ALL_DAY_CLASS:\n        fieldName = this.fields.isAllDay;\n        break;\n\n      case EVENT_WINDOW_START_TZ_CLASS:\n        fieldName = this.fields.startTimezone;\n        break;\n\n      case EVENT_WINDOW_END_TZ_CLASS:\n        fieldName = this.fields.endTimezone;\n        break;\n\n      case TIME_ZONE_CLASS:\n        fieldName = 'Timezone';\n        break;\n\n      case EVENT_WINDOW_REPEAT_CLASS:\n        fieldName = 'Repeat';\n        break;\n    }\n\n    return fieldName;\n  };\n\n  EventWindow.prototype.getFieldLabel = function (fieldName) {\n    var labelText = '';\n\n    switch (fieldName) {\n      case SUBJECT_CLASS:\n        labelText = this.parent.editorTitles.subject;\n        break;\n\n      case LOCATION_CLASS:\n        labelText = this.parent.editorTitles.location;\n        break;\n\n      case DESCRIPTION_CLASS:\n        labelText = this.parent.editorTitles.description;\n        break;\n\n      case EVENT_WINDOW_START_CLASS:\n        labelText = this.parent.editorTitles.startTime;\n        break;\n\n      case EVENT_WINDOW_END_CLASS:\n        labelText = this.parent.editorTitles.endTime;\n        break;\n\n      case EVENT_WINDOW_START_TZ_CLASS:\n        labelText = this.parent.editorTitles.startTimezone;\n        break;\n\n      case EVENT_WINDOW_END_TZ_CLASS:\n        labelText = this.parent.editorTitles.endTimezone;\n        break;\n\n      case EVENT_WINDOW_REPEAT_CLASS:\n        labelText = this.parent.editorTitles.recurrenceRule;\n        break;\n\n      case EVENT_WINDOW_ALL_DAY_CLASS:\n        labelText = this.parent.editorTitles.isAllDay;\n        break;\n\n      case TIME_ZONE_CLASS:\n        labelText = this.l10n.getConstant('timezone');\n        break;\n    }\n\n    return labelText;\n  };\n\n  EventWindow.prototype.onChange = function (args) {\n    var targetSelector = \".\" + EVENT_WINDOW_ALL_DAY_CLASS + \",.\" + TIME_ZONE_CLASS + \",.\" + EVENT_WINDOW_REPEAT_CLASS;\n    var target = closest(args.event.target, targetSelector);\n\n    if (target.classList.contains(EVENT_WINDOW_ALL_DAY_CLASS)) {\n      this.onAllDayChange(args.checked);\n    } else if (target.classList.contains(TIME_ZONE_CLASS)) {\n      this.timezoneChangeStyle(args.checked);\n    } else if (target.classList.contains(EVENT_WINDOW_REPEAT_CLASS)) {\n      this.onRepeatChange(args.checked);\n    }\n  };\n\n  EventWindow.prototype.renderRepeatDialog = function () {\n    var element = createElement('div');\n    this.repeatDialogObject = new Dialog({\n      header: this.l10n.getConstant('recurrence'),\n      visible: false,\n      content: '<div class=\"e-rec-editor\"></div>',\n      closeOnEscape: true,\n      width: '90%',\n      buttons: [{\n        click: this.repeatSaveDialog.bind(this),\n        buttonModel: {\n          content: this.l10n.getConstant('save'),\n          cssClass: 'e-save',\n          isPrimary: true\n        }\n      }, {\n        click: this.repeatCancelDialog.bind(this),\n        buttonModel: {\n          cssClass: 'e-cancel',\n          content: this.l10n.getConstant('cancel')\n        }\n      }],\n      target: this.element,\n      animationSettings: {\n        effect: 'Zoom'\n      },\n      enableRtl: this.parent.enableRtl,\n      enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n      isModal: true,\n      cssClass: REPEAT_DIALOG_CLASS,\n      open: this.repeatOpenDialog.bind(this)\n    });\n    this.element.appendChild(element);\n    this.repeatDialogObject.appendTo(element);\n    this.createRecurrenceEditor(this.repeatDialogObject.element.querySelector('.e-rec-editor'));\n  };\n\n  EventWindow.prototype.loadRecurrenceEditor = function () {\n    this.repeatDialogObject.show();\n\n    if (this.recurrenceEditor && this.repeatRule) {\n      this.recurrenceEditor.setRecurrenceRule(this.repeatRule);\n    }\n  };\n\n  EventWindow.prototype.onRepeatChange = function (state) {\n    if (state) {\n      if (!this.repeatDialogObject) {\n        this.renderRepeatDialog();\n      }\n\n      this.recurrenceEditor.setProperties({\n        startDate: this.repeatStartDate,\n        selectedType: 0\n      });\n      this.loadRecurrenceEditor();\n    } else {\n      if (this.repeatDialogObject) {\n        this.repeatDialogObject.hide();\n      }\n\n      this.repeatRule = '';\n\n      if (this.recurrenceEditor) {\n        this.recurrenceEditor.setRecurrenceRule(this.repeatRule);\n        this.updateRepeatLabel(this.repeatRule);\n      }\n\n      var element = this.element.querySelector('.' + REPEAT_CONTAINER_CLASS);\n      addClass([element], HIDE_STYLE_CLASS);\n    }\n  };\n\n  EventWindow.prototype.repeatSaveDialog = function () {\n    this.repeatRule = this.recurrenceEditor.getRecurrenceRule();\n    var element = this.element.querySelector('.' + REPEAT_CONTAINER_CLASS);\n\n    if (this.recurrenceEditor.getRecurrenceRule()) {\n      removeClass([element], HIDE_STYLE_CLASS);\n    } else {\n      addClass([element], HIDE_STYLE_CLASS);\n      this.repeatStatus.setProperties({\n        checked: false\n      });\n    }\n\n    this.updateRepeatLabel(this.repeatRule);\n    this.closeRepeatDialog();\n  };\n\n  EventWindow.prototype.closeRepeatDialog = function () {\n    this.repeatDialogObject.hide();\n  };\n\n  EventWindow.prototype.repeatCancelDialog = function () {\n    this.closeRepeatDialog();\n\n    if (this.recurrenceEditor) {\n      this.recurrenceEditor.setRecurrenceRule(this.repeatTempRule);\n    }\n\n    if (!this.repeatTempRule) {\n      this.repeatStatus.setProperties({\n        checked: false\n      });\n    }\n  };\n\n  EventWindow.prototype.repeatOpenDialog = function () {\n    this.repeatTempRule = this.recurrenceEditor.getRecurrenceRule();\n  };\n\n  EventWindow.prototype.onCellDetailsUpdate = function (eventObj, repeatType) {\n    if (!this.parent.eventSettings.allowAdding) {\n      return;\n    }\n\n    if (this.parent.isAdaptive && repeatType && !this.repeatDialogObject) {\n      this.renderRepeatDialog();\n    }\n\n    this.element.querySelector('.' + FORM_CLASS).removeAttribute('data-id');\n    this.element.querySelector('.' + EVENT_WINDOW_TITLE_TEXT_CLASS).innerHTML = this.l10n.getConstant('newEvent');\n    eventObj.Timezone = false;\n    this.repeatStartDate = eventObj[this.fields.startTime];\n    this.repeatRule = '';\n\n    if (!isNullOrUndefined(this.parent.eventSettings.fields.subject.default)) {\n      eventObj[this.fields.subject] = this.parent.eventSettings.fields.subject.default;\n    }\n\n    if (!isNullOrUndefined(this.parent.eventSettings.fields.location.default)) {\n      eventObj[this.fields.location] = this.parent.eventSettings.fields.location.default;\n    }\n\n    if (!isNullOrUndefined(this.parent.eventSettings.fields.description.default)) {\n      eventObj[this.fields.description] = this.parent.eventSettings.fields.description.default;\n    }\n\n    this.showDetails(eventObj);\n\n    if (eventObj[this.fields.recurrenceRule] && this.recurrenceEditor) {\n      this.recurrenceEditor.setRecurrenceRule(eventObj[this.fields.recurrenceRule], eventObj[this.fields.startTime]);\n      this.repeatRule = eventObj[this.fields.recurrenceRule];\n    }\n\n    var deleteButton = this.element.querySelector('.' + DELETE_EVENT_CLASS);\n\n    if (deleteButton) {\n      addClass([deleteButton], DISABLE_CLASS);\n    }\n\n    if (this.recurrenceEditor) {\n      this.recurrenceEditor.setProperties({\n        startDate: eventObj[this.fields.startTime],\n        selectedType: !isNullOrUndefined(repeatType) ? repeatType : !isNullOrUndefined(eventObj[this.fields.recurrenceRule]) ? this.recurrenceEditor.selectedType : 0\n      });\n      this.repeatRule = this.recurrenceEditor.value;\n    }\n\n    if (this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {\n      var element = this.element.querySelector('.' + REPEAT_CONTAINER_CLASS);\n\n      if (eventObj[this.fields.recurrenceRule] || repeatType) {\n        removeClass([element], HIDE_STYLE_CLASS);\n        this.repeatStatus.setProperties({\n          checked: true\n        });\n      } else {\n        addClass([element], HIDE_STYLE_CLASS);\n        this.repeatStatus.setProperties({\n          checked: false\n        });\n      }\n\n      this.updateRepeatLabel(this.repeatRule);\n    } else {\n      var saveButton = this.element.querySelector('.' + EVENT_WINDOW_SAVE_BUTTON_CLASS);\n      this.disableButton(saveButton, false);\n    }\n\n    this.dialogObject.show();\n  };\n\n  EventWindow.prototype.convertToEventData = function (cellsData, eventObj) {\n    if (cellsData.subject) {\n      eventObj[this.fields.subject] = cellsData.subject;\n    }\n\n    eventObj[this.fields.startTime] = cellsData.startTime;\n    eventObj[this.fields.endTime] = cellsData.endTime;\n    eventObj[this.fields.isAllDay] = cellsData.isAllDay;\n\n    if (cellsData.RecurrenceRule) {\n      eventObj[this.fields.recurrenceRule] = cellsData.RecurrenceRule;\n    }\n\n    if (this.parent.resourceCollection.length > 0 || this.parent.activeViewOptions.group.resources.length > 0) {\n      this.parent.resourceBase.setResourceValues(eventObj);\n    }\n  };\n\n  EventWindow.prototype.applyFormValidation = function () {\n    var form = this.element.querySelector('.' + FORM_CLASS);\n\n    if (!form) {\n      return;\n    }\n\n    var getValidationRule = function (rules) {\n      return rules && Object.keys(rules).length > 0 ? rules : undefined;\n    };\n\n    var rules = {};\n    var subjectRule = getValidationRule(this.parent.eventSettings.fields.subject.validation);\n\n    if (!isNullOrUndefined(subjectRule)) {\n      rules[this.parent.eventSettings.fields.subject.name] = subjectRule;\n    }\n\n    var locationRule = getValidationRule(this.parent.eventSettings.fields.location.validation);\n\n    if (!isNullOrUndefined(locationRule)) {\n      rules[this.parent.eventSettings.fields.location.name] = locationRule;\n    }\n\n    var startTimeRule = getValidationRule(this.parent.eventSettings.fields.startTime.validation);\n\n    if (!isNullOrUndefined(startTimeRule)) {\n      rules[this.parent.eventSettings.fields.startTime.name] = startTimeRule;\n    }\n\n    var endTimeRule = getValidationRule(this.parent.eventSettings.fields.endTime.validation);\n\n    if (!isNullOrUndefined(endTimeRule)) {\n      rules[this.parent.eventSettings.fields.endTime.name] = endTimeRule;\n    }\n\n    var descriptionRule = getValidationRule(this.parent.eventSettings.fields.description.validation);\n\n    if (!isNullOrUndefined(descriptionRule)) {\n      rules[this.parent.eventSettings.fields.description.name] = descriptionRule;\n    }\n\n    this.fieldValidator = new FieldValidator();\n    this.fieldValidator.renderFormValidator(form, rules, this.element, this.parent.locale);\n  };\n\n  EventWindow.prototype.showDetails = function (eventData) {\n    var eventObj = extend({}, eventData, null, true);\n\n    if ((!this.cellClickAction || this.cellClickAction && !isNullOrUndefined(this.parent.editorTemplate)) && eventObj[this.fields.endTime].getHours() === 0 && eventObj[this.fields.endTime].getMinutes() === 0) {\n      this.trimAllDay(eventObj);\n    }\n\n    this.eventData = eventObj;\n    var formElements = this.getFormElements(EVENT_WINDOW_DIALOG_CLASS);\n    var keyNames = Object.keys(eventObj);\n\n    for (var _i = 0, formElements_2 = formElements; _i < formElements_2.length; _i++) {\n      var curElement = formElements_2[_i];\n      var columnName = curElement.name || this.getColumnName(curElement);\n\n      if (!isNullOrUndefined(columnName) && columnName !== '') {\n        if (keyNames.indexOf(columnName) !== -1) {\n          this.setValueToElement(curElement, eventObj[\"\" + columnName]);\n        } else {\n          this.setDefaultValueToElement(curElement);\n        }\n      }\n    }\n\n    if (isNullOrUndefined(this.parent.editorTemplate)) {\n      this.onAllDayChange(eventObj[this.fields.isAllDay]);\n      var timezoneObj = this.getInstance(TIME_ZONE_CLASS + '.' + EVENT_FIELD$1);\n\n      if (!(isNullOrUndefined(eventObj[this.fields.startTimezone]) && isNullOrUndefined(eventObj[this.fields.endTimezone]))) {\n        timezoneObj.checked = true;\n        timezoneObj.dataBind();\n      }\n\n      this.timezoneChangeStyle(timezoneObj.checked);\n      delete eventObj.Timezone;\n    }\n  };\n\n  EventWindow.prototype.getColumnName = function (element) {\n    var attrName = element.getAttribute('data-name') || '';\n\n    if (attrName === '') {\n      var isDropDowns = false;\n      var fieldSelector = '';\n\n      if (element.classList.contains('e-dropdownlist')) {\n        fieldSelector = 'e-ddl';\n        isDropDowns = true;\n      } else if (element.classList.contains('e-multiselect')) {\n        fieldSelector = 'e-multiselect';\n        isDropDowns = true;\n      } else if (element.classList.contains('e-datetimepicker')) {\n        fieldSelector = 'e-datetimepicker';\n      } else if (element.classList.contains('e-datepicker')) {\n        fieldSelector = 'e-datepicker';\n      } else if (element.classList.contains('e-checkbox')) {\n        fieldSelector = 'e-checkbox';\n      }\n\n      var classSelector = isDropDowns ? \".\" + fieldSelector + \":not(.e-control)\" : \".\" + fieldSelector;\n      var control = closest(element, classSelector) || element.querySelector(\".\" + fieldSelector);\n\n      if (control) {\n        var attrEle = control.querySelector('[name]');\n\n        if (attrEle) {\n          attrName = attrEle.name;\n        }\n      }\n    }\n\n    return attrName;\n  };\n\n  EventWindow.prototype.onAllDayChange = function (allDayStatus) {\n    var startObj = this.getInstance(EVENT_WINDOW_START_CLASS);\n    var endObj = this.getInstance(EVENT_WINDOW_END_CLASS);\n    var timezoneDiv = this.element.querySelector('.e-time-zone-container');\n    var format;\n\n    if (allDayStatus) {\n      format = isNullOrUndefined(this.parent.dateFormat) ? this.getFormat('dateFormats') : this.parent.dateFormat;\n      addClass(this.element.querySelectorAll('.e-time-icon'), EVENT_WINDOW_ICON_DISABLE_CLASS);\n      addClass([timezoneDiv], DISABLE_CLASS);\n\n      if (this.element.querySelector('.' + EVENT_WINDOW_TIME_ZONE_DIV_CLASS)) {\n        removeClass([this.element.querySelector('.' + EVENT_WINDOW_TIME_ZONE_DIV_CLASS)], ENABLE_CLASS);\n      }\n\n      startObj.format = endObj.format = format;\n    } else {\n      format = isNullOrUndefined(this.parent.dateFormat) ? this.getFormat('dateFormats') + ' ' + this.parent.activeViewOptions.timeFormat : this.parent.dateFormat + ' ' + this.parent.activeViewOptions.timeFormat;\n      removeClass(this.element.querySelectorAll('.e-time-icon'), EVENT_WINDOW_ICON_DISABLE_CLASS);\n      removeClass([timezoneDiv], DISABLE_CLASS);\n\n      if (this.element.querySelector('.e-checkbox-wrapper .e-time-zone').checked) {\n        addClass([this.element.querySelector('.' + EVENT_WINDOW_TIME_ZONE_DIV_CLASS)], ENABLE_CLASS);\n      }\n\n      startObj.format = endObj.format = format;\n    }\n\n    if (this.cellClickAction) {\n      this.updateDateTime(allDayStatus, startObj, endObj);\n    }\n\n    startObj.dataBind();\n    endObj.dataBind();\n\n    if (!isNullOrUndefined(this.recurrenceEditor)) {\n      this.recurrenceEditor.updateRuleUntilDate(startObj.value);\n    }\n  };\n\n  EventWindow.prototype.updateDateTime = function (allDayStatus, startObj, endObj) {\n    var startDate;\n    var endDate;\n\n    if (allDayStatus) {\n      startDate = resetTime(new Date(this.eventWindowTime.startTime.getTime()));\n\n      if (this.parent.activeCellsData.isAllDay) {\n        var temp = addDays(new Date(this.eventWindowTime.endTime.getTime()), -1).getTime();\n        endDate = +this.eventWindowTime.startTime > temp ? this.eventWindowTime.endTime : new Date(temp);\n      } else {\n        endDate = resetTime(new Date(this.eventWindowTime.endTime.getTime()));\n      }\n    } else {\n      var start = this.parent.activeCellsData.startTime;\n      startDate = new Date(this.eventWindowTime.startTime.getTime());\n      startDate.setHours(start.getHours(), start.getMinutes(), start.getSeconds());\n\n      if (this.parent.activeCellsData.isAllDay) {\n        var startHour = this.parent.getStartEndTime(this.parent.workHours.start);\n        startDate.setHours(startHour.getHours(), startHour.getMinutes(), startHour.getSeconds());\n        endDate = new Date(startDate.getTime());\n        endDate.setMilliseconds(MS_PER_MINUTE * this.getSlotDuration());\n      } else {\n        endDate = new Date(startDate.getTime());\n        endDate.setMilliseconds(this.parent.activeCellsData.endTime.getTime() - this.parent.activeCellsData.startTime.getTime());\n      }\n    }\n\n    this.eventWindowTime = {\n      startTime: new Date(startDate.getTime()),\n      endTime: new Date(endDate.getTime())\n    };\n    startObj.value = startDate;\n    endObj.value = endDate;\n    startObj.dataBind();\n    endObj.dataBind();\n  };\n\n  EventWindow.prototype.getFormat = function (formatType) {\n    var format;\n\n    if (this.parent.locale === 'en' || this.parent.locale === 'en-US') {\n      format = getValue(formatType + '.short', getDefaultDateObject(this.parent.getCalendarMode()));\n    } else {\n      format = getValue(\"main.\" + this.parent.locale + \".dates.calendars.\" + this.parent.getCalendarMode() + \".\" + formatType + \".short\", cldrData);\n    }\n\n    return format;\n  };\n\n  EventWindow.prototype.onEventDetailsUpdate = function (eventObj) {\n    if (!this.parent.eventSettings.allowEditing) {\n      return;\n    }\n\n    if (!this.parent.isAdaptive) {\n      removeClass([this.element.querySelector('.' + DELETE_EVENT_CLASS)], DISABLE_CLASS);\n    }\n\n    this.element.querySelector('.' + EVENT_WINDOW_TITLE_TEXT_CLASS).innerHTML = this.l10n.getConstant('editEvent');\n    this.element.querySelector('.' + FORM_CLASS).setAttribute('data-id', eventObj[this.fields.id].toString());\n\n    if (isNullOrUndefined(this.parent.editorTemplate)) {\n      eventObj = extend({}, eventObj, null, true);\n      var timezoneObj = this.getInstance(TIME_ZONE_CLASS + '.' + EVENT_FIELD$1);\n      var timezoneValue = void 0;\n\n      if (eventObj[this.fields.startTimezone] || eventObj[this.fields.endTimezone]) {\n        timezoneValue = true;\n        this.parent.eventBase.timezoneConvert(eventObj);\n      } else {\n        timezoneValue = false;\n      }\n\n      eventObj.Timezone = timezoneValue;\n      timezoneObj.checked = timezoneValue;\n      timezoneObj.dataBind();\n    }\n\n    this.showDetails(eventObj);\n\n    if (eventObj[this.fields.recurrenceRule] && this.recurrenceEditor) {\n      this.recurrenceEditor.setRecurrenceRule(eventObj[this.fields.recurrenceRule], eventObj[this.fields.startTime]);\n    } else if (!this.parent.isAdaptive && this.recurrenceEditor) {\n      this.recurrenceEditor.setProperties({\n        startDate: eventObj[this.fields.startTime]\n      });\n      this.recurrenceEditor.setRecurrenceRule('');\n    }\n\n    this.repeatStartDate = eventObj[this.fields.startTime];\n    this.repeatRule = '';\n\n    if (eventObj[this.fields.recurrenceRule]) {\n      if (this.recurrenceEditor) {\n        this.recurrenceEditor.setRecurrenceRule(eventObj[this.fields.recurrenceRule], eventObj[this.fields.startTime]);\n      }\n\n      this.repeatRule = eventObj[this.fields.recurrenceRule];\n    }\n\n    if (this.parent.isAdaptive && isNullOrUndefined(this.parent.editorTemplate)) {\n      var element = this.element.querySelector('.' + REPEAT_CONTAINER_CLASS);\n\n      if (eventObj[this.fields.recurrenceRule]) {\n        removeClass([element], HIDE_STYLE_CLASS);\n        this.repeatStatus.setProperties({\n          checked: true\n        });\n      } else {\n        addClass([element], HIDE_STYLE_CLASS);\n        this.repeatStatus.setProperties({\n          checked: false\n        });\n      }\n\n      this.updateRepeatLabel(this.repeatRule);\n    }\n\n    var isDisable = this.parent.readonly || eventObj[this.fields.isReadonly];\n\n    if (!this.parent.isAdaptive) {\n      var saveButton = this.element.querySelector('.' + EVENT_WINDOW_SAVE_BUTTON_CLASS);\n      var deleteButton = this.element.querySelector('.' + DELETE_EVENT_CLASS);\n      this.disableButton(saveButton, isDisable);\n      this.disableButton(deleteButton, isDisable);\n    } else {\n      var saveIcon = this.element.querySelector('.' + EVENT_WINDOW_SAVE_ICON_CLASS);\n\n      if (saveIcon) {\n        if (isDisable) {\n          addClass([saveIcon], ICON_DISABLE_CLASS);\n        } else {\n          removeClass([saveIcon], ICON_DISABLE_CLASS);\n        }\n      }\n    }\n\n    this.dialogObject.show();\n  };\n\n  EventWindow.prototype.disableButton = function (element, value) {\n    if (element) {\n      element.ej2_instances[0].disabled = value;\n    }\n  };\n\n  EventWindow.prototype.renderRecurrenceEditor = function () {\n    return new RecurrenceEditor({\n      calendarMode: this.parent.calendarMode,\n      cssClass: this.parent.cssClass,\n      dateFormat: this.parent.dateFormat,\n      enableRtl: this.parent.enableRtl,\n      firstDayOfWeek: this.parent.activeViewOptions.firstDayOfWeek,\n      locale: this.parent.locale\n    });\n  };\n\n  EventWindow.prototype.updateMinMaxDateToEditor = function () {\n    var startDate = this.element.querySelector('.e-start');\n    var endDate = this.element.querySelector('.e-end');\n\n    if (startDate && endDate) {\n      var startObj = startDate.ej2_instances[0];\n      var endObj = endDate.ej2_instances[0];\n      startObj.min = this.parent.minDate;\n      startObj.max = this.parent.maxDate;\n      endObj.min = this.parent.minDate;\n      endObj.max = this.parent.maxDate;\n      startObj.dataBind();\n      endObj.dataBind();\n    }\n\n    if (this.recurrenceEditor) {\n      var untilDate = this.recurrenceEditor.element.querySelector('.e-until-date');\n\n      if (untilDate) {\n        var untilObj = untilDate.ej2_instances[0];\n        untilObj.min = this.parent.minDate;\n        untilObj.max = this.parent.maxDate;\n        untilObj.dataBind();\n      }\n    }\n  };\n\n  EventWindow.prototype.updateRepeatLabel = function (repeatRule) {\n    if (this.parent.isAdaptive && !this.repeatDialogObject) {\n      this.renderRepeatDialog();\n    }\n\n    var data = repeatRule ? this.l10n.getConstant('repeats') + ' ' + this.recurrenceEditor.getRuleSummary(repeatRule) : this.l10n.getConstant('repeat');\n    this.repeatStatus.setProperties({\n      label: data\n    });\n  };\n\n  EventWindow.prototype.dialogClose = function (event) {\n    if (this.isEnterKey) {\n      this.isEnterKey = false;\n      return;\n    }\n\n    this.dialogEvent = event;\n    this.isCrudAction = false;\n    this.parent.activeEventData = {\n      event: undefined,\n      element: undefined\n    };\n    this.parent.currentAction = null;\n    this.dialogObject.hide();\n  };\n\n  EventWindow.prototype.resetForm = function () {\n    this.fieldValidator.destroyToolTip();\n    this.resetFormFields();\n\n    if (!this.parent.isAdaptive && this.recurrenceEditor && !this.recurrenceEditor.isDestroyed) {\n      this.recurrenceEditor.resetFields();\n    }\n  };\n\n  EventWindow.prototype.timezoneChangeStyle = function (value) {\n    var timezoneDiv = this.element.querySelector('.' + EVENT_WINDOW_TIME_ZONE_DIV_CLASS);\n    var localTimezoneName = this.parent.tzModule.getLocalTimezoneName();\n\n    if (value) {\n      addClass([timezoneDiv], ENABLE_CLASS);\n      var startTimezoneObj = this.getInstance(EVENT_WINDOW_START_TZ_CLASS);\n      var endTimezoneObj = this.getInstance(EVENT_WINDOW_END_TZ_CLASS);\n      var timezone = startTimezoneObj.dataSource;\n\n      if (!startTimezoneObj.value || !this.parent.timezone) {\n        var found = timezone.some(function (tz) {\n          return tz.Value === localTimezoneName;\n        });\n\n        if (!found) {\n          timezone.push({\n            Value: localTimezoneName,\n            Text: localTimezoneName\n          });\n          startTimezoneObj.dataSource = timezone;\n          endTimezoneObj.dataSource = timezone;\n          startTimezoneObj.dataBind();\n          endTimezoneObj.dataBind();\n        }\n      }\n\n      startTimezoneObj.value = startTimezoneObj.value || this.parent.timezone || localTimezoneName;\n      endTimezoneObj.value = endTimezoneObj.value || this.parent.timezone || localTimezoneName;\n      startTimezoneObj.dataBind();\n      endTimezoneObj.dataBind();\n    } else {\n      removeClass([timezoneDiv], ENABLE_CLASS);\n    }\n  };\n\n  EventWindow.prototype.resetFormFields = function () {\n    var formElement = this.getFormElements(EVENT_WINDOW_DIALOG_CLASS);\n\n    for (var _i = 0, formElement_1 = formElement; _i < formElement_1.length; _i++) {\n      var currentElement = formElement_1[_i];\n      var columnName = currentElement.name || this.getColumnName(currentElement);\n\n      if (!isNullOrUndefined(columnName) && columnName !== '') {\n        this.setDefaultValueToElement(currentElement);\n      }\n    }\n  };\n\n  EventWindow.prototype.eventSave = function (event, alert) {\n    if (this.isEnterKey) {\n      this.isEnterKey = false;\n      return;\n    }\n\n    var formElement = this.element.querySelector('.' + FORM_CLASS);\n\n    if (formElement && formElement.classList.contains('e-formvalidator') && !formElement.ej2_instances[0].validate()) {\n      return;\n    }\n\n    var dataCollection = this.getEventDataFromEditor();\n\n    if (this.processEventValidation(dataCollection.tempData, alert)) {\n      return;\n    }\n\n    this.eventCrudData = dataCollection.eventData;\n    this.dialogEvent = event;\n    this.isCrudAction = true;\n    this.dialogObject.hide();\n  };\n\n  EventWindow.prototype.getEventDataFromEditor = function () {\n    var eventObj = extend({}, this.getObjectFromFormData(EVENT_WINDOW_DIALOG_CLASS));\n\n    if (!eventObj.Timezone) {\n      eventObj[this.fields.startTimezone] = null;\n      eventObj[this.fields.endTimezone] = null;\n    }\n\n    delete eventObj.Timezone;\n    delete eventObj.Repeat;\n    this.setDefaultValueToObject(eventObj);\n    eventObj[this.fields.recurrenceRule] = this.recurrenceEditor ? this.recurrenceEditor.getRecurrenceRule() || null : undefined;\n    var tempObj = extend({}, eventObj, null, true);\n\n    if (eventObj[this.fields.isAllDay]) {\n      eventObj[this.fields.startTime] = isNullOrUndefined(eventObj[this.fields.startTime]) ? null : resetTime(new Date(eventObj[this.fields.startTime].getTime()));\n      eventObj[this.fields.endTime] = isNullOrUndefined(eventObj[this.fields.endTime]) ? null : addDays(resetTime(new Date(eventObj[this.fields.endTime].getTime())), 1);\n    }\n\n    return {\n      eventData: eventObj,\n      tempData: tempObj\n    };\n  };\n\n  EventWindow.prototype.processEventValidation = function (eventObj, alert) {\n    var alertType;\n\n    if (isNullOrUndefined(this.parent.editorTemplate)) {\n      if (!eventObj[this.fields.startTime] || !eventObj[this.fields.endTime]) {\n        this.parent.quickPopup.openValidationError('invalidDateError');\n        return true;\n      }\n\n      if (eventObj[this.fields.startTime] > eventObj[this.fields.endTime]) {\n        this.parent.quickPopup.openValidationError('startEndError');\n        return true;\n      }\n    }\n\n    if (this.recurrenceEditor && this.recurrenceEditor.value && this.recurrenceEditor.value !== '') {\n      if (this.parent.currentAction !== 'EditOccurrence') {\n        alertType = this.recurrenceValidation(eventObj[this.fields.startTime], eventObj[this.fields.endTime], alert);\n      }\n\n      var isShowAlert = true;\n\n      if (alertType === 'seriesChangeAlert' && this.parent.uiStateValues.isIgnoreOccurrence) {\n        isShowAlert = false;\n      }\n\n      if (!isNullOrUndefined(alertType) && isShowAlert && (!this.parent.enableRecurrenceValidation && alertType === 'wrongPattern' || this.parent.enableRecurrenceValidation)) {\n        this.parent.quickPopup.openRecurrenceValidationAlert(alertType);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  EventWindow.prototype.processCrudActions = function (eventObj) {\n    var _this = this;\n\n    this.parent.uiStateValues.isBlock = false;\n    var resourceData = this.getResourceData(eventObj);\n    var isResourceEventExpand = (this.parent.activeViewOptions.group.resources.length > 0 || this.parent.resourceCollection.length > 0) && !this.parent.activeViewOptions.group.allowGroupEdit && !isNullOrUndefined(resourceData);\n    var eventId = this.getEventIdFromForm();\n\n    if (!isNullOrUndefined(eventId)) {\n      var eveId_1 = this.parent.eventBase.getEventIDType() === 'string' ? eventId : parseInt(eventId, 10);\n      var editedData = this.parent.eventsData.filter(function (data) {\n        return data[_this.fields.id] === eveId_1;\n      })[0];\n\n      if (isNullOrUndefined(editedData)) {\n        editedData = this.parent.blockData.filter(function (data) {\n          return data[_this.fields.id] === eveId_1;\n        })[0];\n      }\n\n      eventObj = extend({}, editedData, eventObj);\n\n      if (eventObj[this.fields.isReadonly]) {\n        return false;\n      }\n\n      var currentAction = void 0;\n\n      if (!isNullOrUndefined(editedData[this.fields.recurrenceRule])) {\n        currentAction = this.parent.currentAction;\n        eventObj.Guid = this.parent.activeEventData.event.Guid;\n\n        if (this.parent.currentAction === 'EditOccurrence') {\n          if (!eventObj[this.fields.recurrenceID]) {\n            eventObj[this.fields.id] = this.parent.eventBase.getEventMaxID();\n            eventObj.Guid = this.parent.activeEventData.event.Guid;\n          } else {\n            eveId_1 = eventObj[this.fields.recurrenceID];\n            currentAction = null;\n          }\n\n          if (this.parent.enableRecurrenceValidation && this.editOccurrenceValidation(eveId_1, eventObj)) {\n            return true;\n          }\n        }\n\n        if (this.parent.currentAction === 'EditSeries' || eventObj[this.fields.id] !== editedData[this.fields.id]) {\n          eventObj[this.fields.recurrenceID] = editedData[this.fields.id];\n        } else if (this.parent.currentAction === 'EditFollowingEvents') {\n          eventObj[this.fields.id] = this.parent.eventBase.getEventMaxID();\n          eventObj[this.fields.followingID] = editedData[this.fields.id];\n        }\n      }\n\n      if (isResourceEventExpand) {\n        this.resourceSaveEvent(eventObj, 'Save', currentAction);\n      } else {\n        this.parent.saveEvent(eventObj, currentAction);\n      }\n    } else {\n      this.parent.currentAction = 'Add';\n\n      if (isResourceEventExpand) {\n        this.resourceSaveEvent(eventObj, this.parent.currentAction);\n      } else {\n        eventObj[this.fields.id] = this.parent.eventBase.getEventMaxID();\n        this.parent.addEvent(eventObj);\n      }\n    }\n\n    return this.parent.uiStateValues.isBlock;\n  };\n\n  EventWindow.prototype.getResourceData = function (eventObj) {\n    var resourceData = null;\n\n    if (!isNullOrUndefined(this.parent.resourceBase) && !isNullOrUndefined(this.parent.resourceBase.resourceCollection) && this.parent.resourceBase.resourceCollection.length > 0) {\n      var lastResourceData = this.parent.resourceBase.resourceCollection.slice(-1)[0];\n      resourceData = eventObj[lastResourceData.field];\n    }\n\n    return resourceData;\n  };\n\n  EventWindow.prototype.getObjectFromFormData = function (className) {\n    var formElement = this.getFormElements(className);\n    var eventObj = {};\n\n    for (var _i = 0, formElement_2 = formElement; _i < formElement_2.length; _i++) {\n      var currentElement = formElement_2[_i];\n      var columnName = currentElement.name || this.getColumnName(currentElement);\n\n      if (!isNullOrUndefined(columnName) && columnName !== '') {\n        eventObj[\"\" + columnName] = this.getValueFromElement(currentElement);\n      }\n    }\n\n    return eventObj;\n  };\n\n  EventWindow.prototype.setDefaultValueToObject = function (eventObj) {\n    if (!isNullOrUndefined(eventObj[this.fields.subject])) {\n      eventObj[this.fields.subject] = eventObj[this.fields.subject] || this.parent.eventSettings.fields.subject.default || this.l10n.getConstant('addTitle');\n    }\n\n    if (!isNullOrUndefined(eventObj[this.fields.location])) {\n      eventObj[this.fields.location] = eventObj[this.fields.location] || this.parent.eventSettings.fields.location.default;\n    }\n\n    if (!isNullOrUndefined(eventObj[this.fields.description])) {\n      eventObj[this.fields.description] = eventObj[this.fields.description] || this.parent.eventSettings.fields.description.default;\n    }\n  };\n\n  EventWindow.prototype.recurrenceValidation = function (startDate, endDate, alert) {\n    var alertMessage;\n    var recEditor = this.recurrenceEditor;\n    var interval = this.getInstance('e-repeat-interval.e-numerictextbox').value;\n\n    if (alert !== this.l10n.getConstant('ok')) {\n      var activeEvent = this.parent.activeEventData.event;\n      var excludedEvents = [];\n\n      if ((this.parent.currentAction === 'EditSeries' || this.parent.currentAction === 'EditFollowingEvents') && !isNullOrUndefined(activeEvent)) {\n        var eventStartTime = activeEvent[this.parent.eventFields.startTime];\n        var seriesEvents = this.parent.eventBase.getSeriesEvents(this.eventData, eventStartTime);\n\n        if (seriesEvents.length > 0) {\n          excludedEvents = this.parent.eventBase.getEditedOccurrences(seriesEvents, eventStartTime);\n        } else {\n          var event_2 = this.parent.eventBase.getEventById(activeEvent[this.parent.eventFields.id]);\n          excludedEvents = this.parent.eventBase.getEditedOccurrences([event_2], eventStartTime);\n        }\n\n        if (this.parent.currentAction === 'EditSeries' && !isNullOrUndefined(this.eventData[this.parent.eventFields.recurrenceException])) {\n          excludedEvents.push(this.eventData);\n        }\n      }\n\n      if (excludedEvents.length > 0) {\n        alertMessage = 'seriesChangeAlert';\n      }\n\n      if (this.getInstance('e-end-on-left .e-ddl .e-dropdownlist').value === 'until' && this.getInstance('e-end-on-date .e-datepicker').value < startDate) {\n        alertMessage = 'wrongPattern';\n      }\n\n      if (isNullOrUndefined(alertMessage)) {\n        var types = recEditor.value.split(';')[1].split('=')[1].split(',');\n        var obj = {\n          'SU': 0,\n          'MO': 1,\n          'TU': 2,\n          'WE': 3,\n          'TH': 4,\n          'FR': 5,\n          'SA': 6\n        };\n        var temp = [];\n        var tempDiff = [];\n        var tempValue = void 0;\n\n        switch (recEditor.value.split(';')[0].split('=')[1]) {\n          case 'DAILY':\n            if ((endDate.getTime() - startDate.getTime()) / (1000 * 3600) > interval * 24) {\n              alertMessage = 'createError';\n            }\n\n            break;\n\n          case 'WEEKLY':\n            types = recEditor.value.split(';')[1].split('=')[1].split(',');\n\n            for (var index = 0; index < types.length * (interval + 1); index++) {\n              temp[parseInt(index.toString(), 10)] = types.length > index ? obj[types[parseInt(index.toString(), 10)]] : temp[index - types.length] + 7 * interval;\n            }\n\n            tempValue = temp.sort(function (a, b) {\n              return a - b;\n            });\n\n            for (var index = 1; index < tempValue.length; index++) {\n              tempDiff.push(tempValue[parseInt(index.toString(), 10)] - tempValue[index - 1]);\n            }\n\n            if ((endDate.getTime() - startDate.getTime()) / (1000 * 3600) >= Math.min.apply(Math, tempDiff) * 24 || isNullOrUndefined(interval)) {\n              alertMessage = 'createError';\n            }\n\n            break;\n\n          case 'MONTHLY':\n            if (endDate.getTime() >= new Date(+startDate).setMonth(startDate.getMonth() + interval)) {\n              alertMessage = 'createError';\n            }\n\n            break;\n\n          case 'YEARLY':\n            if (endDate.getTime() >= new Date(+startDate).setFullYear(startDate.getFullYear() + interval)) {\n              alertMessage = 'createError';\n            }\n\n            break;\n        }\n      }\n    } else {\n      if (endDate.getTime() >= new Date(+startDate).setMonth(startDate.getMonth() + interval)) {\n        alertMessage = 'createError';\n      }\n\n      if (isNullOrUndefined(alertMessage)) {\n        this.parent.quickPopup.quickDialog.hide();\n      }\n    }\n\n    if (isNullOrUndefined(interval)) {\n      alertMessage = 'createError';\n    }\n\n    return alertMessage;\n  };\n\n  EventWindow.prototype.getRecurrenceIndex = function (recColl, event) {\n    var recIndex;\n\n    for (var index = 0; index < recColl.length; index++) {\n      if (event[this.fields.startTime].valueOf() === recColl[parseInt(index.toString(), 10)][this.fields.startTime].valueOf()) {\n        recIndex = index;\n        break;\n      }\n    }\n\n    return recIndex;\n  };\n\n  EventWindow.prototype.trimAllDay = function (data) {\n    if (data[this.fields.isAllDay]) {\n      var temp = addDays(new Date(+data[this.fields.endTime]), -1).getTime();\n      data[this.fields.endTime] = +data[this.fields.startTime] > temp ? data[this.fields.endTime] : new Date(temp);\n    }\n  };\n\n  EventWindow.prototype.editOccurrenceValidation = function (eventId, currentData, editData) {\n    var _this = this;\n\n    if (editData === void 0) {\n      editData = this.eventData;\n    }\n\n    var recurColl = this.parent.getOccurrencesByID(eventId);\n    var excludedDatas = this.parent.eventsData.filter(function (data) {\n      return data[_this.fields.recurrenceID] === eventId;\n    });\n    excludedDatas.map(function (data) {\n      return recurColl.push(extend({}, data));\n    });\n    currentData = extend({}, currentData);\n    this.trimAllDay(currentData);\n\n    for (var _i = 0, recurColl_1 = recurColl; _i < recurColl_1.length; _i++) {\n      var data = recurColl_1[_i];\n      this.trimAllDay(data);\n    }\n\n    this.parent.eventBase.sortByTime(recurColl);\n    var index = this.getRecurrenceIndex(recurColl, editData);\n\n    if (isNullOrUndefined(index)) {\n      return false;\n    }\n\n    var currentStartTime = new Date(+currentData[this.fields.startTime]);\n    var currentEndTime = new Date(+currentData[this.fields.endTime]);\n    var nextStartTime;\n    var nextEndTime;\n\n    if (index !== recurColl.length - 1) {\n      nextStartTime = new Date(+recurColl[index + 1][this.fields.startTime]);\n      nextEndTime = new Date(+recurColl[index + 1][this.fields.endTime]);\n    }\n\n    var lastEndTime = new Date(+recurColl[recurColl.length - 1][this.fields.endTime]);\n\n    if (index === 0) {\n      if (!isNullOrUndefined(recurColl[index + 1])) {\n        if (!(nextStartTime.getTime() >= currentEndTime.getTime()) && resetTime(lastEndTime).getTime() >= resetTime(currentStartTime).getTime() || resetTime(lastEndTime).getTime() < resetTime(currentStartTime).getTime()) {\n          this.parent.quickPopup.openRecurrenceValidationAlert('occurrenceAlert');\n          return true;\n        } else if (!(resetTime(currentStartTime).getTime() < resetTime(nextStartTime).getTime())) {\n          this.parent.quickPopup.openRecurrenceValidationAlert('sameDayAlert');\n          return true;\n        }\n      }\n\n      return false;\n    } else {\n      var previousStartTime = new Date(+recurColl[index - 1][this.fields.startTime]);\n      var previousEndTime = new Date(+recurColl[index - 1][this.fields.endTime]);\n\n      if (index === recurColl.length - 1) {\n        if (resetTime(new Date(+recurColl[recurColl.length - 1 - index][this.fields.startTime])).getTime() > resetTime(currentStartTime).getTime()) {\n          this.parent.quickPopup.openRecurrenceValidationAlert('occurrenceAlert');\n          return true;\n        } else if (!(previousEndTime.getTime() <= currentStartTime.getTime() && resetTime(currentStartTime).getTime() > resetTime(previousStartTime).getTime())) {\n          this.parent.quickPopup.openRecurrenceValidationAlert('sameDayAlert');\n          return true;\n        }\n      } else if (!((resetTime(previousStartTime).getTime() < resetTime(currentStartTime).getTime() || resetTime(new Date(+recurColl[0][this.fields.startTime])).getTime() > resetTime(currentStartTime).getTime()) && (resetTime(nextStartTime).getTime() > resetTime(currentStartTime).getTime() || lastEndTime.getTime() < currentStartTime.getTime()))) {\n        this.parent.quickPopup.openRecurrenceValidationAlert('sameDayAlert');\n        return true;\n      } else if (!(previousEndTime.getTime() <= currentStartTime.getTime() && nextStartTime.getTime() > currentEndTime.getTime()) || resetTime(nextEndTime).getTime() < resetTime(currentStartTime).getTime() || resetTime(previousStartTime).getTime() > resetTime(currentEndTime).getTime() || !(resetTime(currentStartTime).getTime() < resetTime(nextStartTime).getTime())) {\n        this.parent.quickPopup.openRecurrenceValidationAlert('occurrenceAlert');\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  EventWindow.prototype.resourceSaveEvent = function (eventObj, action, currentAction) {\n    var _this = this;\n\n    var lastResourceData = this.parent.resourceBase.resourceCollection.slice(-1)[0];\n    var resourceData = eventObj[lastResourceData.field];\n    resourceData = resourceData instanceof Array ? resourceData.reverse() : [resourceData].reverse();\n    var lastLevel = this.parent.resourceBase.lastResourceLevel;\n    var eventList = [];\n\n    var _loop_2 = function (i) {\n      var events = extend({}, eventObj, null, true);\n      events[this_2.fields.id] = this_2.parent.eventBase.getEventMaxID();\n      var temp = [];\n\n      var addValues = function () {\n        if (action === 'Save' && i === resourceData.length - 1) {\n          if (temp.length > 0) {\n            temp[0][_this.fields.id] = eventObj[_this.fields.id];\n\n            for (var k = 1; k < temp.length; k++) {\n              temp[parseInt(k.toString(), 10)][_this.fields.id] = _this.parent.eventBase.getEventMaxID(i);\n              eventList.push(temp[parseInt(k.toString(), 10)]);\n\n              _this.parent.saveEvent(temp[0], currentAction);\n            }\n          } else {\n            events[_this.fields.id] = eventObj[_this.fields.id];\n\n            _this.parent.saveEvent(events, currentAction);\n          }\n        } else {\n          if (temp.length > 0) {\n            for (var j = 0; j < temp.length; j++) {\n              temp[parseInt(j.toString(), 10)][_this.fields.id] = _this.parent.eventBase.getEventMaxID(j);\n              eventList.push(temp[parseInt(j.toString(), 10)]);\n            }\n          } else {\n            events[_this.fields.id] = _this.parent.eventBase.getEventMaxID(i);\n            eventList.push(events);\n          }\n        }\n      };\n\n      if (this_2.parent.activeViewOptions.group.byGroupID && !isNullOrUndefined(lastLevel)) {\n        var lastResource = lastResourceData.dataSource;\n        var resCol = this_2.parent.resourceCollection;\n        var index = void 0;\n\n        if (resCol.length > 1) {\n          index = findIndexInData(lastResource, lastResourceData.idField, resourceData[parseInt(i.toString(), 10)], events, resCol);\n        } else {\n          index = findIndexInData(lastResource, lastResourceData.idField, resourceData[parseInt(i.toString(), 10)]);\n        }\n\n        if (index < 0) {\n          return {\n            value: void 0\n          };\n        }\n\n        var groupId_1 = lastResource[parseInt(index.toString(), 10)][lastResourceData.groupIDField];\n        var filter = lastLevel.filter(function (obj) {\n          return obj.resourceData[lastResourceData.idField] === resourceData[parseInt(i.toString(), 10)];\n        }).filter(function (obj) {\n          return obj.resourceData[lastResourceData.groupIDField] === groupId_1;\n        })[0];\n        var groupOrder = filter.groupOrder;\n\n        for (var index_1 = 0; index_1 < this_2.parent.resourceBase.resourceCollection.length; index_1++) {\n          var field = this_2.parent.resourceBase.resourceCollection[parseInt(index_1.toString(), 10)].field;\n          events[\"\" + field] = groupOrder[parseInt(index_1.toString(), 10)] instanceof Array ? groupOrder[parseInt(index_1.toString(), 10)][0] : groupOrder[parseInt(index_1.toString(), 10)];\n        }\n\n        addValues();\n      } else {\n        for (var index = 0; index < this_2.parent.resourceBase.resourceCollection.length - 1; index++) {\n          var field = this_2.parent.resourceBase.resourceCollection[parseInt(index.toString(), 10)].field;\n\n          if (events[\"\" + field] instanceof Array && events[\"\" + field].length > 1) {\n            for (var k = 0; k < events[\"\" + field].length; k++) {\n              var event_3 = extend({}, events, null, true);\n              event_3[\"\" + field] = eventObj[\"\" + field][parseInt(k.toString(), 10)];\n              event_3[lastResourceData.field] = resourceData[parseInt(i.toString(), 10)];\n              temp.push(event_3);\n            }\n          } else {\n            if (temp.length === 0) {\n              events[\"\" + field] = eventObj[\"\" + field] instanceof Array ? eventObj[\"\" + field][0] : eventObj[\"\" + field];\n              events[lastResourceData.field] = resourceData[parseInt(i.toString(), 10)];\n            } else {\n              for (var l = 0; l < temp.length; l++) {\n                temp[parseInt(l.toString(), 10)][\"\" + field] = eventObj[\"\" + field] instanceof Array ? eventObj[\"\" + field][0] : eventObj[\"\" + field];\n              }\n            }\n          }\n        }\n\n        events[lastResourceData.field] = resourceData[parseInt(i.toString(), 10)];\n        addValues();\n      }\n    };\n\n    var this_2 = this;\n\n    for (var i = 0; i < resourceData.length; i++) {\n      var state_1 = _loop_2(i);\n\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n\n    if (eventList.length > 0) {\n      for (var _i = 0, eventList_1 = eventList; _i < eventList_1.length; _i++) {\n        var event_4 = eventList_1[_i];\n        event_4[this.fields.recurrenceException] = null;\n        event_4[this.fields.recurrenceID] = null;\n      }\n\n      this.parent.addEvent(eventList);\n    }\n  };\n\n  EventWindow.prototype.getEventIdFromForm = function () {\n    return this.element.querySelector('.' + FORM_CLASS).getAttribute('data-id');\n  };\n\n  EventWindow.prototype.getFormElements = function (className) {\n    var elements = [];\n\n    if (className === EVENT_WINDOW_DIALOG_CLASS) {\n      elements = [].slice.call(this.element.querySelectorAll('.' + EVENT_FIELD$1));\n    } else {\n      elements = [].slice.call(this.parent.element.querySelectorAll('.' + className + ' .' + EVENT_FIELD$1));\n    }\n\n    return elements;\n  };\n\n  EventWindow.prototype.getValueFromElement = function (element) {\n    var value;\n\n    if (element.classList.contains('e-datepicker')) {\n      value = element.ej2_instances[0].value;\n    } else if (element.classList.contains('e-datetimepicker')) {\n      value = element.ej2_instances[0].value;\n    } else if (element.classList.contains('e-dropdownlist')) {\n      value = element.ej2_instances[0].value;\n    } else if (element.classList.contains('e-multiselect')) {\n      value = element.ej2_instances[0].value;\n    } else if (element.classList.contains('e-checkbox')) {\n      value = element.ej2_instances[0].checked;\n    } else {\n      if (element.type === 'checkbox') {\n        value = element.checked;\n      } else {\n        value = this.parent.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(element.value) : element.value;\n      }\n    }\n\n    return value;\n  };\n\n  EventWindow.prototype.setValueToElement = function (element, value) {\n    if (element.classList.contains('e-datepicker')) {\n      var instance = element.ej2_instances[0];\n      instance.value = value;\n      instance.dataBind();\n    } else if (element.classList.contains('e-datetimepicker')) {\n      var instance = element.ej2_instances[0];\n\n      if (instance.element.classList.contains(EVENT_WINDOW_START_CLASS)) {\n        this.eventWindowTime.startTime = new Date('' + value);\n      } else {\n        this.eventWindowTime.endTime = new Date('' + value);\n      }\n\n      instance.value = value;\n      instance.dataBind();\n    } else if (element.classList.contains('e-dropdownlist')) {\n      var instance = element.ej2_instances[0];\n      instance.value = value;\n      instance.dataBind();\n    } else if (element.classList.contains('e-multiselect')) {\n      var instance = element.ej2_instances[0];\n      instance.value = [];\n      instance.value = value instanceof Array ? value : [value];\n      instance.dataBind();\n    } else if (element.classList.contains('e-checkbox')) {\n      var instance = element.ej2_instances[0];\n      instance.checked = value;\n      instance.dataBind();\n    } else {\n      if (element.type !== 'checkbox') {\n        element.value = value || '';\n      } else {\n        element.checked = value;\n      }\n    }\n  };\n\n  EventWindow.prototype.setDefaultValueToElement = function (element) {\n    if (element.classList.contains('e-datepicker')) {\n      var instance = element.ej2_instances[0];\n      instance.value = this.parent.getCurrentTime();\n      instance.dataBind();\n    } else if (element.classList.contains('e-datetimepicker')) {\n      var instance = element.ej2_instances[0];\n      var dateValue = this.parent.getCurrentTime();\n      this.eventWindowTime = {\n        startTime: dateValue,\n        endTime: dateValue\n      };\n      instance.value = dateValue;\n      instance.dataBind();\n    } else if (element.classList.contains('e-dropdownlist')) {\n      var instance = element.ej2_instances[0];\n      instance.value = null;\n      instance.dataBind();\n    } else if (element.classList.contains('e-multiselect')) {\n      var instance = element.ej2_instances[0];\n      instance.value = [];\n      instance.dataBind();\n    } else if (element.classList.contains('e-checkbox')) {\n      var instance = element.ej2_instances[0];\n      instance.checked = false;\n      instance.dataBind();\n    } else {\n      if (element.type === 'checkbox') {\n        element.checked = false;\n      } else {\n        element.value = '';\n      }\n    }\n  };\n\n  EventWindow.prototype.getInstance = function (className) {\n    var element = this.element.querySelector('.' + className);\n    return element ? element.ej2_instances[0] : null;\n  };\n\n  EventWindow.prototype.eventDelete = function (event) {\n    if (this.isEnterKey) {\n      this.isEnterKey = false;\n      return;\n    }\n\n    switch (this.parent.currentAction) {\n      case 'EditOccurrence':\n        if (!isNullOrUndefined(this.parent.activeEventData.event[this.parent.eventFields.recurrenceRule])) {\n          this.parent.currentAction = 'DeleteOccurrence';\n        } else {\n          this.parent.currentAction = 'Delete';\n        }\n\n        break;\n\n      case 'EditSeries':\n        this.parent.currentAction = 'DeleteSeries';\n        break;\n\n      case 'Save':\n        this.parent.currentAction = 'Delete';\n        break;\n\n      case 'EditFollowingEvents':\n        if (!isNullOrUndefined(this.parent.activeEventData.event[this.parent.eventFields.recurrenceRule])) {\n          this.parent.currentAction = 'DeleteFollowingEvents';\n        }\n\n        break;\n    }\n\n    this.dialogEvent = event;\n    this.isCrudAction = false;\n    this.dialogObject.hide();\n    this.parent.quickPopup.openDeleteAlert();\n  };\n\n  EventWindow.prototype.getRecurrenceEditorInstance = function () {\n    if (this.parent.isAdaptive && !this.repeatDialogObject) {\n      this.renderRepeatDialog();\n    }\n\n    return this.recurrenceEditor;\n  };\n\n  EventWindow.prototype.destroyComponents = function () {\n    var formElements = this.getFormElements(EVENT_WINDOW_DIALOG_CLASS);\n\n    for (var _i = 0, formElements_3 = formElements; _i < formElements_3.length; _i++) {\n      var element = formElements_3[_i];\n      var instance = void 0;\n\n      if (element.classList.contains('e-datetimepicker')) {\n        instance = element.ej2_instances;\n      } else if (element.classList.contains('e-datepicker')) {\n        instance = element.ej2_instances;\n      } else if (element.classList.contains('e-checkbox')) {\n        instance = element.ej2_instances;\n      } else if (element.classList.contains('e-dropdownlist')) {\n        instance = element.ej2_instances;\n      } else if (element.classList.contains('e-multiselect')) {\n        instance = element.ej2_instances;\n      } else if (element.classList.contains('e-numerictextbox')) {\n        instance = element.ej2_instances;\n      }\n\n      if (instance && instance[0]) {\n        instance[0].destroy();\n      }\n    }\n\n    if (this.buttonObj) {\n      this.buttonObj.destroy();\n    }\n  };\n\n  EventWindow.prototype.detachComponents = function () {\n    var formElements = this.getFormElements(EVENT_WINDOW_DIALOG_CLASS);\n\n    for (var _i = 0, formElements_4 = formElements; _i < formElements_4.length; _i++) {\n      var element = formElements_4[_i];\n      detach(element);\n    }\n  };\n\n  EventWindow.prototype.destroy = function (isIgnore) {\n    if (this.parent && !this.parent.isDestroyed) {\n      this.parent.resetTemplates(['editorTemplate']);\n    }\n\n    this.destroyComponents();\n\n    if (this.recurrenceEditor) {\n      this.recurrenceEditor.destroy();\n      detach(this.recurrenceEditor.element);\n      this.recurrenceEditor = null;\n    }\n\n    if (this.fieldValidator) {\n      this.fieldValidator.destroy();\n      this.fieldValidator = null;\n    }\n\n    if (this.repeatDialogObject) {\n      this.repeatDialogObject.destroy();\n      this.repeatDialogObject = null;\n    }\n\n    this.detachComponents();\n\n    if (this.dialogObject) {\n      if (this.dialogObject.element) {\n        var form = this.dialogObject.element.querySelector('form');\n        removeChildren(form);\n        detach(form);\n        EventHandler.remove(this.dialogObject.element, 'keydown', this.preventEventSave);\n      }\n\n      this.dialogObject.destroy();\n      this.dialogObject = null;\n    }\n\n    if (this.element) {\n      remove(this.element);\n      this.element = null;\n    }\n\n    if (!isIgnore) {\n      this.l10n = null;\n      this.parent = null;\n      this.fields = null;\n      this.buttonObj = null;\n      this.repeatStatus = null;\n      this.eventWindowTime = null;\n      this.dialogEvent = null;\n    }\n  };\n\n  return EventWindow;\n}();\n/**\n * Virtual Scroll\n */\n\n\nvar VirtualScroll =\n/** @__PURE__ @class */\nfunction () {\n  function VirtualScroll(parent) {\n    this.translateY = 0;\n    this.itemSize = 60;\n    this.bufferCount = 3;\n    this.renderedLength = 0;\n    this.averageRowHeight = 0;\n    this.startIndex = 0;\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  VirtualScroll.prototype.addEventListener = function () {\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.on(virtualScroll, this.virtualScrolling, this);\n  };\n\n  VirtualScroll.prototype.removeEventListener = function () {\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(virtualScroll, this.virtualScrolling);\n  };\n\n  VirtualScroll.prototype.getRenderedCount = function () {\n    this.setItemSize();\n    var containerSize = this.isHorizontalScroll ? this.parent.element.clientWidth : this.parent.element.clientHeight;\n    this.renderedLength = Math.ceil(containerSize / this.itemSize) + this.bufferCount;\n    return this.renderedLength;\n  };\n\n  VirtualScroll.prototype.renderVirtualTrack = function (contentWrap) {\n    var wrap = createElement('div', {\n      className: VIRTUAL_TRACK_CLASS\n    });\n\n    if (this.isHorizontalScroll) {\n      var colCount = this.parent.activeView.colLevels[this.parent.activeView.colLevels.length - 1].length;\n      wrap.style.width = colCount * this.itemSize + 'px';\n    } else {\n      wrap.style.height = this.parent.resourceBase.expandedResources.length * this.itemSize + 'px';\n    }\n\n    contentWrap.appendChild(wrap);\n  };\n\n  VirtualScroll.prototype.updateVirtualScrollHeight = function () {\n    var virtual = this.parent.element.querySelector('.' + VIRTUAL_TRACK_CLASS);\n    var lastResourceIndex = this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].groupIndex;\n    var lastRenderIndex = this.parent.resourceBase.renderedResources[this.parent.resourceBase.renderedResources.length - 1].groupIndex;\n\n    if (lastRenderIndex !== lastResourceIndex) {\n      var conTable = this.parent.element.querySelector('.' + CONTENT_TABLE_CLASS);\n      this.renderedLength = conTable.querySelector('tbody').children.length;\n      virtual.style.height = conTable.offsetHeight + (this.parent.resourceBase.expandedResources.length - this.renderedLength) * conTable.offsetHeight / this.renderedLength + 'px';\n    } else {\n      virtual.style.height = '';\n    }\n\n    this.averageRowHeight = virtual.offsetHeight / this.parent.resourceBase.expandedResources.length;\n  };\n\n  VirtualScroll.prototype.updateVirtualTrackHeight = function (wrap) {\n    var resourceCount = this.parent.resourceBase.renderedResources.length;\n\n    if (resourceCount !== this.getRenderedCount()) {\n      wrap.style.height = this.parent.element.querySelector('.e-content-wrap').clientHeight + 'px';\n      var resWrap = this.parent.element.querySelector('.' + RESOURCE_COLUMN_WRAP_CLASS);\n      var conWrap = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n      var eventWrap = this.parent.element.querySelector('.' + EVENT_TABLE_CLASS);\n      this.translateY = 0;\n      this.setTranslate(resWrap, conWrap, eventWrap);\n    } else {\n      var lastRenderIndex = this.parent.resourceBase.renderedResources[resourceCount - 1].groupIndex;\n      var lastCollIndex = this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].groupIndex;\n      var renderedResCount = resourceCount + (lastCollIndex - lastRenderIndex);\n      renderedResCount = renderedResCount > this.parent.resourceBase.expandedResources.length ? this.parent.resourceBase.expandedResources.length : renderedResCount;\n      wrap.style.height = renderedResCount * this.itemSize + 'px';\n    }\n  };\n\n  VirtualScroll.prototype.setItemSize = function () {\n    if (this.isHorizontalScroll) {\n      this.itemSize = getElementWidthFromClass(this.parent.activeView.element, WORK_CELLS_CLASS) || this.itemSize;\n    } else {\n      this.itemSize = getElementHeightFromClass(this.parent.activeView.element, WORK_CELLS_CLASS) || this.itemSize;\n    }\n  };\n\n  VirtualScroll.prototype.renderEvents = function () {\n    this.setTabIndex();\n\n    if (this.parent.crudModule) {\n      this.parent.crudModule.refreshProcessedData(true);\n    }\n\n    if (this.parent.currentView !== 'Month') {\n      this.parent.notify(contentReady, {});\n    }\n\n    this.parent.hideSpinner();\n  };\n\n  VirtualScroll.prototype.virtualScrolling = function () {\n    var _this = this;\n\n    if (this.parent.quickPopup) {\n      this.parent.quickPopup.quickPopupHide();\n      this.parent.quickPopup.morePopup.hide();\n    }\n\n    var conWrap = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n\n    if (this.isHorizontalScroll) {\n      this.horizontalScrolling(conWrap);\n    } else {\n      var resWrap = this.parent.element.querySelector('.' + RESOURCE_COLUMN_WRAP_CLASS);\n      var eventWrap = this.parent.element.querySelector('.' + EVENT_TABLE_CLASS);\n      var timeIndicator = this.parent.element.querySelector('.' + CURRENT_TIMELINE_CLASS);\n      var conTable = this.parent.element.querySelector('.' + CONTENT_TABLE_CLASS);\n      addClass([conWrap], 'e-transition');\n      this.renderedLength = resWrap.querySelector('tbody').children.length;\n      var firstTDIndex = parseInt(resWrap.querySelector('tbody td').getAttribute('data-group-index'), 10);\n      var scrollHeight = this.parent.rowAutoHeight ? conTable.offsetHeight - conWrap.offsetHeight : this.bufferCount * this.itemSize;\n      var resCollection = [];\n\n      if (conWrap.scrollTop - this.translateY < 0) {\n        resCollection = this.upScroll(conWrap, firstTDIndex);\n      } else if (conWrap.scrollTop - this.translateY > scrollHeight) {\n        resCollection = this.downScroll(conWrap, firstTDIndex);\n      }\n\n      if (!isNullOrUndefined(resCollection) && resCollection.length > 0) {\n        this.parent.showSpinner();\n        var selectedEle = this.parent.getSelectedCells();\n        this.focusedEle = selectedEle[selectedEle.length - 1] || this.focusedEle;\n        this.updateContent(resWrap, conWrap, eventWrap, resCollection);\n        this.setTranslate(resWrap, conWrap, eventWrap, timeIndicator);\n\n        if (this.parent.dragAndDropModule && this.parent.dragAndDropModule.actionObj.action === 'drag') {\n          this.parent.dragAndDropModule.navigationWrapper();\n        }\n\n        window.clearTimeout(this.timeValue);\n        this.timeValue = window.setTimeout(function () {\n          _this.renderEvents();\n        }, 250);\n      }\n    }\n  };\n\n  VirtualScroll.prototype.horizontalScrolling = function (conWrap) {\n    var _this = this;\n\n    var resCollection = [];\n    var scrollWidth = this.bufferCount * this.itemSize;\n\n    if (Math.abs(conWrap.scrollLeft) - Math.abs(this.translateY) < 0) {\n      resCollection = this.leftScroll(conWrap);\n    } else if (Math.abs(conWrap.scrollLeft) - Math.abs(this.translateY) > scrollWidth) {\n      resCollection = this.rightScroll(conWrap);\n    }\n\n    if (!isNullOrUndefined(resCollection) && resCollection.length > 0) {\n      if (this.parent.resourceBase.expandedResources.length !== resCollection.length || this.parent.resourceBase.expandedResources[0] !== resCollection[0] || this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1] !== resCollection[resCollection.length - 1]) {\n        this.parent.showSpinner();\n        var colLevels = this.parent.activeView.colLevels.slice(0);\n        this.updateHorizontalContent(conWrap, resCollection);\n        setStyleAttribute(conWrap.querySelector('table'), {\n          transform: \"translateX(\" + this.translateY + \"px)\"\n        });\n        this.parent.activeView.colLevels = colLevels;\n\n        if (this.parent.dragAndDropModule && this.parent.dragAndDropModule.actionObj.action === 'drag') {\n          this.parent.dragAndDropModule.navigationWrapper();\n        }\n      }\n\n      window.clearTimeout(this.timeValue);\n      this.timeValue = window.setTimeout(function () {\n        _this.renderEvents();\n      }, 250);\n    }\n  };\n\n  VirtualScroll.prototype.upScroll = function (conWrap, firstTDIndex) {\n    var index = 0;\n    index = ~~(conWrap.scrollTop / this.itemSize) + Math.ceil(conWrap.clientHeight / this.itemSize) - this.renderedLength;\n\n    if (this.parent.rowAutoHeight) {\n      index = index > firstTDIndex ? firstTDIndex - this.bufferCount : index;\n    }\n\n    index = index > 0 ? index : 0;\n    var prevSetCollection = this.getBufferCollection(index, index + this.renderedLength);\n    this.parent.resourceBase.renderedResources = prevSetCollection;\n\n    if (firstTDIndex === 0) {\n      this.translateY = conWrap.scrollTop;\n    } else {\n      var height = this.parent.rowAutoHeight ? this.averageRowHeight : this.itemSize;\n      height = height > 0 ? height : this.itemSize;\n      this.translateY = conWrap.scrollTop - this.bufferCount * height > 0 ? conWrap.scrollTop - this.bufferCount * height : 0;\n    }\n\n    return prevSetCollection;\n  };\n\n  VirtualScroll.prototype.downScroll = function (conWrap, firstTDIndex) {\n    var lastResource = this.parent.resourceBase.renderedResources[this.parent.resourceBase.renderedResources.length - 1].groupIndex;\n    var lastResourceIndex = this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].groupIndex;\n\n    if (lastResource === lastResourceIndex) {\n      return null;\n    }\n\n    var nextSetResIndex = 0;\n    nextSetResIndex = ~~(conWrap.scrollTop / this.itemSize);\n\n    if (this.parent.rowAutoHeight) {\n      nextSetResIndex = ~~((conWrap.scrollTop - this.translateY) / this.averageRowHeight) + firstTDIndex;\n      nextSetResIndex = nextSetResIndex > firstTDIndex + this.bufferCount ? nextSetResIndex : firstTDIndex + this.bufferCount;\n    }\n\n    var lastIndex = nextSetResIndex + this.renderedLength;\n    lastIndex = lastIndex > this.parent.resourceBase.expandedResources.length ? nextSetResIndex + (this.parent.resourceBase.expandedResources.length - nextSetResIndex) : lastIndex;\n    var nextSetCollection = this.getBufferCollection(lastIndex - this.renderedLength, lastIndex);\n    this.translateY = conWrap.scrollTop;\n    return nextSetCollection;\n  };\n\n  VirtualScroll.prototype.leftScroll = function (conWrap) {\n    var index = 0;\n    index = ~~(Math.abs(conWrap.scrollLeft) / this.itemSize) + Math.ceil(conWrap.clientWidth / this.itemSize) - this.renderedLength;\n    index = index > 0 ? index : 0;\n    return this.getCollection(index, index + this.renderedLength);\n  };\n\n  VirtualScroll.prototype.rightScroll = function (conWrap) {\n    var lastLevel = this.parent.activeView.colLevels[this.parent.activeView.colLevels.length - 1];\n    var nextSetIndex = 0;\n    nextSetIndex = ~~(Math.abs(conWrap.scrollLeft) / this.itemSize);\n    var lastIndex = nextSetIndex + this.renderedLength;\n    lastIndex = lastIndex > lastLevel.length - 1 ? lastLevel.length - 1 : lastIndex;\n    return this.getCollection(lastIndex - this.renderedLength, lastIndex);\n  };\n\n  VirtualScroll.prototype.getCollection = function (startIndex, endIndex) {\n    this.translateY = startIndex * this.itemSize;\n    var lastLevel = this.getResCollection(startIndex, endIndex);\n\n    if (this.parent.enableRtl) {\n      this.translateY = -this.translateY;\n    }\n\n    return lastLevel;\n  };\n\n  VirtualScroll.prototype.getResCollection = function (startIndex, endIndex) {\n    var lastLevel = this.parent.activeView.colLevels[this.parent.activeView.colLevels.length - 1];\n    var resCollection = [];\n    var index = {\n      startIndex: 0,\n      endIndex: 0\n    };\n\n    if (this.parent.activeViewOptions.group.byDate) {\n      if (lastLevel[parseInt(startIndex.toString(), 10)].date.getTime() === this.parent.resourceBase.expandedResources[0].date.getTime() && lastLevel[parseInt(endIndex.toString(), 10)].date.getTime() === this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].date.getTime()) {\n        return this.parent.resourceBase.expandedResources;\n      }\n\n      resCollection = this.getByDateCollection(lastLevel[parseInt(startIndex.toString(), 10)], lastLevel[parseInt(endIndex.toString(), 10)], index);\n      this.setRenderedDates(resCollection);\n    } else {\n      if (lastLevel[parseInt(startIndex.toString(), 10)].groupIndex === this.parent.resourceBase.expandedResources[0].groupIndex && lastLevel[parseInt(endIndex.toString(), 10)].groupIndex === this.parent.resourceBase.expandedResources[this.parent.resourceBase.expandedResources.length - 1].groupIndex) {\n        return this.parent.resourceBase.expandedResources;\n      }\n\n      resCollection = this.getByIdCollection(lastLevel[parseInt(startIndex.toString(), 10)], lastLevel[parseInt(endIndex.toString(), 10)], index);\n    }\n\n    if (this.parent.currentView !== 'Month') {\n      this.startIndex = index.startIndex;\n      resCollection = lastLevel.slice(index.startIndex, index.endIndex);\n    }\n\n    this.translateY = index.startIndex * this.itemSize;\n    return resCollection;\n  };\n\n  VirtualScroll.prototype.getByDateCollection = function (firstItem, lastItem, index) {\n    var resCollection = this.parent.activeView.colLevels[0].filter(function (data) {\n      return firstItem.date.getTime() <= data.date.getTime() && data.date.getTime() <= lastItem.date.getTime();\n    });\n    this.setStartEndIndex(this.parent.activeView.colLevels[0], resCollection[0], resCollection[resCollection.length - 1], index);\n    return resCollection;\n  };\n\n  VirtualScroll.prototype.getByIdCollection = function (firstItem, lastItem, index) {\n    var resCollection = this.parent.resourceBase.lastResourceLevel.filter(function (data) {\n      return firstItem.groupIndex <= data.groupIndex && data.groupIndex <= lastItem.groupIndex;\n    });\n    this.parent.resourceBase.renderedResources = resCollection;\n    this.setStartEndIndex(this.parent.resourceBase.lastResourceLevel, resCollection[0], resCollection[resCollection.length - 1], index);\n    return resCollection;\n  };\n\n  VirtualScroll.prototype.setStartEndIndex = function (data, firstItem, lastItem, colIndex) {\n    var index = 0;\n    data.filter(function (data) {\n      if (firstItem === data) {\n        colIndex.startIndex = index;\n      } else if (lastItem === data) {\n        colIndex.endIndex = index + data.colSpan;\n      }\n\n      index += data.colSpan;\n    });\n\n    if (firstItem === lastItem) {\n      colIndex.endIndex = colIndex.startIndex + lastItem.colSpan;\n    }\n  };\n\n  VirtualScroll.prototype.updateContent = function (resWrap, conWrap, eventWrap, resCollection) {\n    var renderedLength = resWrap.querySelector('tbody').children.length;\n\n    if (document.activeElement && document.activeElement.classList.contains(RESOURCE_CELLS_CLASS)) {\n      this.isResourceCell = true;\n      this.parent.element.focus();\n    }\n\n    for (var i = 0; i < renderedLength; i++) {\n      remove(resWrap.querySelector('tbody tr'));\n      remove(conWrap.querySelector('tbody tr'));\n      remove(eventWrap.querySelector('div'));\n    }\n\n    this.parent.resourceBase.renderedResources = resCollection;\n    var resourceRows = this.parent.resourceBase.getContentRows(resCollection, true);\n    var contentRows = this.parent.activeView.getContentRows();\n    var eventRows = this.parent.activeView.getEventRows(resCollection.length);\n    append(resourceRows, resWrap.querySelector('tbody'));\n    append(contentRows, conWrap.querySelector('tbody'));\n    append(eventRows, eventWrap);\n  };\n\n  VirtualScroll.prototype.updateHorizontalContent = function (conWrap, resCollection) {\n    this.parent.resourceBase.expandedResources = resCollection;\n    var selectedEle = this.parent.getSelectedCells();\n    this.focusedEle = selectedEle[selectedEle.length - 1] || this.focusedEle;\n    var renderedLength = conWrap.querySelectorAll('tbody tr').length;\n\n    for (var i = 0; i < renderedLength; i++) {\n      remove(conWrap.querySelector('tbody tr'));\n    }\n\n    if (this.parent.currentView === 'Month') {\n      if (this.parent.activeViewOptions.group.byDate) {\n        this.parent.activeView.colLevels[0] = resCollection;\n      } else {\n        this.parent.activeView.colLevels[this.parent.activeView.colLevels.length - 2] = resCollection;\n      }\n\n      var contentRows = this.parent.activeView.getContentRows();\n      append(contentRows, conWrap.querySelector('tbody'));\n    } else {\n      var col = [].slice.call(conWrap.querySelector('colgroup').children);\n\n      for (var i = 0; i < col.length; i++) {\n        remove(col[parseInt(i.toString(), 10)]);\n      }\n\n      this.parent.activeView.colLevels[this.parent.activeView.colLevels.length - 1] = resCollection;\n      var contentRows = this.parent.activeView.getContentRows();\n      var table = conWrap.querySelector('table');\n      var thead = conWrap.querySelector('thead');\n      var colGroupEle_1 = conWrap.querySelector('colgroup');\n      resCollection.forEach(function () {\n        colGroupEle_1.appendChild(createElement('col'));\n      });\n      thead.appendChild(this.parent.eventBase.createEventWrapper('', this.startIndex > 0 ? this.startIndex : 0));\n\n      if (this.parent.activeViewOptions.timeScale.enable) {\n        thead.appendChild(this.parent.eventBase.createEventWrapper('timeIndicator'));\n      }\n\n      prepend([thead], table);\n      append(contentRows, conWrap.querySelector('tbody'));\n    }\n  };\n\n  VirtualScroll.prototype.getBufferCollection = function (startIndex, endIndex) {\n    return this.parent.resourceBase.expandedResources.slice(startIndex, endIndex);\n  };\n\n  VirtualScroll.prototype.setTranslate = function (resWrap, conWrap, eventWrap, timeIndicator) {\n    setStyleAttribute(resWrap.querySelector('table'), {\n      transform: \"translateY(\" + this.translateY + \"px)\"\n    });\n    setStyleAttribute(conWrap.querySelector('table'), {\n      transform: \"translateY(\" + this.translateY + \"px)\"\n    });\n    setStyleAttribute(eventWrap, {\n      transform: \"translateY(\" + this.translateY + \"px)\"\n    });\n\n    if (!isNullOrUndefined(timeIndicator)) {\n      setStyleAttribute(timeIndicator, {\n        transform: \"translateY(\" + this.translateY + \"px)\"\n      });\n    }\n  };\n\n  VirtualScroll.prototype.updateFocusedWorkCell = function () {\n    if (this.focusedEle) {\n      var date = parseInt(this.focusedEle.getAttribute('data-date'), 10);\n      var groupIndex = parseInt(this.focusedEle.getAttribute('data-group-index'), 10);\n      var ele = this.parent.element.querySelector(\".\" + WORK_CELLS_CLASS + \"[data-date=\\\"\" + date + \"\\\"][data-group-index=\\\"\" + groupIndex + \"\\\"]\");\n\n      if (ele) {\n        this.parent.addSelectedClass([ele], ele, true);\n      }\n\n      this.focusedEle = null;\n    }\n  };\n\n  VirtualScroll.prototype.setRenderedDates = function (resCollection) {\n    if (this.parent.currentView !== 'Month') {\n      var dateCol_1 = resCollection.map(function (x) {\n        return x.date;\n      });\n      this.parent.resourceBase.renderedResources.forEach(function (x) {\n        return x.renderDates = dateCol_1;\n      });\n    } else {\n      var dateCol_2 = resCollection.map(function (x) {\n        return x.date.getDay();\n      });\n      var renderDates_1 = this.parent.activeView.renderDates.filter(function (x) {\n        return dateCol_2.indexOf(x.getDay()) >= 0;\n      });\n      this.parent.resourceBase.renderedResources.forEach(function (x) {\n        return x.renderDates = renderDates_1;\n      });\n    }\n  };\n\n  VirtualScroll.prototype.setTabIndex = function () {\n    var resColWrap = this.parent.element.querySelector('.' + RESOURCE_COLUMN_WRAP_CLASS);\n    var resCells = [].slice.call(this.parent.element.querySelectorAll('.' + RESOURCE_CELLS_CLASS));\n\n    if (resCells && resColWrap) {\n      resCells.forEach(function (element) {\n        if (element.getBoundingClientRect().top >= resColWrap.getBoundingClientRect().top) {\n          element.setAttribute('tabindex', '0');\n        }\n      });\n    }\n\n    var focusResCell = this.parent.element.querySelector(\".\" + RESOURCE_CELLS_CLASS + \"[tabindex=\\\"\" + 0 + \"\\\"]\");\n\n    if (this.isResourceCell && focusResCell) {\n      focusResCell.focus();\n      this.isResourceCell = false;\n    }\n  };\n\n  VirtualScroll.prototype.destroy = function () {\n    this.removeEventListener();\n    this.focusedEle = null;\n  };\n\n  return VirtualScroll;\n}();\n/**\n * Schedule DOM rendering\n */\n\n\nvar Render =\n/** @__PURE__ @class */\nfunction () {\n  function Render(parent) {\n    this.parent = parent;\n  }\n\n  Render.prototype.render = function (viewName, isDataRefresh) {\n    if (isDataRefresh === void 0) {\n      isDataRefresh = true;\n    }\n\n    this.initializeLayout(viewName);\n\n    if (this.parent.activeView && isDataRefresh) {\n      this.parent.crudModule.refreshDataManager();\n    }\n  };\n\n  Render.prototype.initializeLayout = function (viewName) {\n    if (this.parent.activeView) {\n      var templates = ['cellTemplate', 'eventTemplate', 'tooltipTemplate', 'majorSlotTemplate', 'minorSlotTemplate', 'headerTooltipTemplate', 'dateHeaderTemplate', 'dayHeaderTemplate', 'monthHeaderTemplate', 'headerIndentTemplate', 'resourceHeaderTemplate', 'cellHeaderTemplate', 'dateRangeTemplate'];\n      this.parent.resetTemplates(templates);\n      this.parent.activeView.removeEventListener();\n      this.parent.activeView.destroy();\n    }\n\n    switch (viewName) {\n      case 'Day':\n        this.parent.activeView = this.parent.dayModule;\n        break;\n\n      case 'Week':\n        this.parent.activeView = this.parent.weekModule;\n        break;\n\n      case 'WorkWeek':\n        this.parent.activeView = this.parent.workWeekModule;\n        break;\n\n      case 'Month':\n        this.parent.activeView = this.parent.monthModule;\n        break;\n\n      case 'Year':\n        this.parent.activeView = this.parent.yearModule;\n        break;\n\n      case 'Agenda':\n        this.parent.activeView = this.parent.agendaModule;\n        break;\n\n      case 'MonthAgenda':\n        this.parent.activeView = this.parent.monthAgendaModule;\n        break;\n\n      case 'TimelineDay':\n        this.parent.activeView = this.parent.timelineViewsModule;\n        this.parent.activeView.viewClass = 'e-timeline-day-view';\n        break;\n\n      case 'TimelineWorkWeek':\n        this.parent.activeView = this.parent.timelineViewsModule;\n        this.parent.activeView.viewClass = 'e-timeline-work-week-view';\n        break;\n\n      case 'TimelineWeek':\n        this.parent.activeView = this.parent.timelineViewsModule;\n        this.parent.activeView.viewClass = 'e-timeline-week-view';\n        break;\n\n      case 'TimelineMonth':\n        this.parent.activeView = this.parent.timelineMonthModule;\n        break;\n\n      case 'TimelineYear':\n        this.parent.activeView = this.parent.timelineYearModule;\n        break;\n    }\n\n    if (isNullOrUndefined(this.parent.activeView)) {\n      var firstView = this.parent.viewCollections[0].option;\n\n      if (firstView) {\n        this.parent.setProperties({\n          currentView: firstView\n        }, true);\n\n        if (this.parent.headerModule) {\n          this.parent.headerModule.updateActiveView();\n          this.parent.headerModule.setCalendarView();\n        }\n\n        return this.initializeLayout(firstView);\n      }\n\n      throw Error('Inject required modules');\n    }\n\n    this.parent.activeView.viewIndex = this.parent.viewIndex;\n    this.updateLabelText(viewName);\n    this.parent.activeView.addEventListener();\n    this.parent.activeView.getRenderDates();\n    this.parent.uiStateValues.isGroupAdaptive = this.parent.activeViewOptions.group.resources.length > 0 && (this.parent.enableAdaptiveUI && !this.parent.isAdaptive || this.parent.isAdaptive && this.parent.activeViewOptions.group.enableCompactView);\n\n    if (this.parent.virtualScrollModule) {\n      this.parent.virtualScrollModule.destroy();\n      this.parent.virtualScrollModule = null;\n    }\n\n    if ((['Agenda', 'Year'].indexOf(this.parent.currentView) === -1 || this.parent.currentView === 'TimelineYear' && this.parent.activeViewOptions.orientation === 'Vertical') && this.parent.activeViewOptions.allowVirtualScrolling && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      this.parent.virtualScrollModule = new VirtualScroll(this.parent);\n\n      if (this.parent.activeView.isTimelineView()) {\n        this.parent.uiStateValues.top = 0;\n      } else {\n        this.parent.virtualScrollModule.isHorizontalScroll = true;\n        this.parent.uiStateValues.left = 0;\n      }\n    }\n\n    this.updateHeader();\n    this.parent.currentTimezoneDate = this.parent.getCurrentTime();\n    this.parent.activeView.renderLayout(CURRENT_PANEL_CLASS);\n    this.parent.renderTemplates();\n\n    if (this.parent.eventTooltip) {\n      this.parent.eventTooltip.destroy();\n      this.parent.eventTooltip = null;\n    }\n\n    if (this.parent.eventSettings.enableTooltip || this.parent.activeViewOptions.group.resources.length > 0 && this.parent.activeViewOptions.group.headerTooltipTemplate) {\n      this.parent.eventTooltip = new EventTooltip(this.parent);\n    }\n  };\n\n  Render.prototype.updateHeader = function () {\n    if (this.parent.headerModule) {\n      this.parent.headerModule.setDayOfWeek(this.parent.activeViewOptions.firstDayOfWeek);\n\n      if (this.parent.activeViewOptions.readonly) {\n        addClass([this.parent.element], READ_ONLY);\n      } else if (this.parent.element.classList.contains(READ_ONLY)) {\n        removeClass([this.parent.element], READ_ONLY);\n      }\n\n      this.parent.headerModule.updateDateRange();\n      this.parent.headerModule.updateHeaderItems('remove');\n    }\n  };\n\n  Render.prototype.updateLabelText = function (view) {\n    var content = this.parent.activeView.getLabelText(view);\n    this.parent.element.setAttribute('role', 'main');\n    this.parent.element.setAttribute('aria-label', content);\n  };\n\n  return Render;\n}();\n\nvar __extends$5 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * A class that represents the configuration of working hours related options of scheduler.\n */\n\n\nvar WorkHours =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$5(WorkHours, _super);\n\n  function WorkHours() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$2([Property(true)], WorkHours.prototype, \"highlight\", void 0);\n\n  __decorate$2([Property('09:00')], WorkHours.prototype, \"start\", void 0);\n\n  __decorate$2([Property('18:00')], WorkHours.prototype, \"end\", void 0);\n\n  return WorkHours;\n}(ChildProperty);\n\nvar __extends$6 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * A class that represents the configuration of options related to timescale on scheduler.\n */\n\n\nvar TimeScale =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$6(TimeScale, _super);\n\n  function TimeScale() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$3([Property(true)], TimeScale.prototype, \"enable\", void 0);\n\n  __decorate$3([Property(60)], TimeScale.prototype, \"interval\", void 0);\n\n  __decorate$3([Property(2)], TimeScale.prototype, \"slotCount\", void 0);\n\n  __decorate$3([Property()], TimeScale.prototype, \"minorSlotTemplate\", void 0);\n\n  __decorate$3([Property()], TimeScale.prototype, \"majorSlotTemplate\", void 0);\n\n  return TimeScale;\n}(ChildProperty);\n\nvar __extends$7 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$4 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * A class that defines the template options available to customize the quick popup of scheduler.\n */\n\n\nvar QuickInfoTemplates =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$7(QuickInfoTemplates, _super);\n\n  function QuickInfoTemplates() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$4([Property('Both')], QuickInfoTemplates.prototype, \"templateType\", void 0);\n\n  __decorate$4([Property()], QuickInfoTemplates.prototype, \"header\", void 0);\n\n  __decorate$4([Property()], QuickInfoTemplates.prototype, \"content\", void 0);\n\n  __decorate$4([Property()], QuickInfoTemplates.prototype, \"footer\", void 0);\n\n  return QuickInfoTemplates;\n}(ChildProperty);\n\nvar __extends$8 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$5 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * A class that represents the header rows related configurations on timeline views.\n */\n\n\nvar HeaderRows =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$8(HeaderRows, _super);\n\n  function HeaderRows() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$5([Property()], HeaderRows.prototype, \"option\", void 0);\n\n  __decorate$5([Property()], HeaderRows.prototype, \"template\", void 0);\n\n  return HeaderRows;\n}(ChildProperty);\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable max-len */\n\n/**\n * Schedule CRUD operations\n */\n\n\nvar Crud =\n/** @__PURE__ @class */\nfunction () {\n  function Crud(parent) {\n    this.parent = parent;\n    this.crudObj = {\n      sourceEvent: null,\n      targetEvent: null,\n      isCrudAction: false\n    };\n  }\n\n  Crud.prototype.getQuery = function () {\n    var start = this.parent.activeView.startDate();\n    var end = this.parent.activeView.endDate();\n    return this.parent.dataModule.generateQuery(start, end);\n  };\n\n  Crud.prototype.getTable = function () {\n    if (this.parent.eventSettings.query) {\n      var query = this.parent.eventSettings.query.clone();\n      return query.fromTable;\n    }\n\n    return null;\n  };\n\n  Crud.prototype.refreshDataManager = function () {\n    var _this = this;\n\n    if (!this.parent.activeView) {\n      return;\n    }\n\n    var start = this.parent.activeView.startDate();\n    var end = this.parent.activeView.endDate();\n    var dataManager = this.parent.dataModule.getData(this.parent.dataModule.generateQuery(start, end));\n    dataManager.then(function (e) {\n      return _this.dataManagerSuccess(e);\n    }).catch(function (e) {\n      return _this.dataManagerFailure(e);\n    });\n  };\n\n  Crud.prototype.dataManagerSuccess = function (e) {\n    var _this = this;\n\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.trigger(dataBinding, e, function (args) {\n      var resultData = extend([], args.result, null, true);\n      _this.parent.eventsData = resultData.filter(function (data) {\n        return !data[_this.parent.eventFields.isBlock];\n      });\n      _this.parent.blockData = resultData.filter(function (data) {\n        return data[_this.parent.eventFields.isBlock];\n      });\n\n      _this.refreshProcessedData();\n\n      if (_this.parent.dragAndDropModule && _this.parent.dragAndDropModule.actionObj.action === 'drag') {\n        _this.parent.dragAndDropModule.navigationWrapper();\n      }\n\n      _this.parent.trigger(dataBound, null, function () {\n        _this.parent.hideSpinner();\n\n        if (_this.parent.isPrinting) {\n          _this.parent.notify(print$1, {});\n        }\n      });\n    });\n  };\n\n  Crud.prototype.dataManagerFailure = function (e) {\n    var _this = this;\n\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.trigger(actionFailure, {\n      error: e\n    }, function () {\n      return _this.parent.hideSpinner();\n    });\n  };\n\n  Crud.prototype.refreshProcessedData = function (isVirtualScrollAction) {\n    if (isVirtualScrollAction === void 0) {\n      isVirtualScrollAction = false;\n    }\n\n    if (this.parent.dragAndDropModule) {\n      this.parent.dragAndDropModule.actionObj.action = '';\n      removeClass([this.parent.element], 'e-event-action');\n    }\n\n    if (this.parent.activeViewOptions && this.parent.activeViewOptions.eventTemplate) {\n      var templateNames = ['eventTemplate'];\n\n      if (this.crudObj.isCrudAction && ['Agenda', 'MonthAgenda', 'Year', 'TimelineYear'].indexOf(this.parent.currentView) === -1) {\n        templateNames = [];\n\n        for (var i = 0, len = this.crudObj.sourceEvent.length; i < len; i++) {\n          templateNames.push('eventTemplate_' + this.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex);\n\n          if (this.crudObj.targetEvent[parseInt(i.toString(), 10)] && this.crudObj.sourceEvent[parseInt(i.toString(), 10)].groupIndex !== this.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex) {\n            templateNames.push('eventTemplate_' + this.crudObj.targetEvent[parseInt(i.toString(), 10)].groupIndex);\n          }\n        }\n      }\n\n      if (templateNames.length > 0) {\n        this.parent.resetTemplates(templateNames);\n      }\n    }\n\n    if (isVirtualScrollAction) {\n      this.parent.notify(dataReady, {\n        processedData: this.parent.eventsProcessed\n      });\n      return;\n    }\n\n    var eventsData = this.parent.eventsData || [];\n    var blockData = this.parent.blockData || [];\n    var data = eventsData.concat(blockData);\n    this.parent.notify(dataReady, {\n      processedData: this.parent.eventBase ? this.parent.eventBase.processData(data) : []\n    });\n  };\n\n  Crud.prototype.refreshData = function (args) {\n    var _this = this;\n\n    var actionArgs = {\n      requestType: args.requestType,\n      cancel: false,\n      data: args.data,\n      addedRecords: args.editParams.addedRecords,\n      changedRecords: args.editParams.changedRecords,\n      deletedRecords: args.editParams.deletedRecords\n    };\n\n    if (this.parent.dragAndDropModule && this.parent.dragAndDropModule.actionObj && this.parent.dragAndDropModule.actionObj.element) {\n      this.parent.dragAndDropModule.actionObj.element.style.display = 'none';\n    }\n\n    if (this.parent.resizeModule && this.parent.resizeModule.actionObj && this.parent.resizeModule.actionObj.element) {\n      this.parent.resizeModule.actionObj.element.style.display = 'none';\n    }\n\n    if (this.parent.isSpecificResourceEvents()) {\n      if (args.requestType === 'eventCreated' || args.requestType === 'eventRemoved') {\n        this.crudObj.isCrudAction = true;\n        this.crudObj.sourceEvent = [];\n        var crudData = args.data instanceof Array ? args.data.length === 0 && args.requestType === 'eventRemoved' ? args.editParams.deletedRecords : args.data : (typeof args.data === 'string' || typeof args.data === 'number') && args.requestType === 'eventRemoved' ? args.editParams.deletedRecords : [args.data];\n\n        var _loop_1 = function (data) {\n          this_1.crudObj.isCrudAction = !(args.requestType === 'eventRemoved' && !isNullOrUndefined(data.parent));\n          var groupIndex = this_1.parent.eventBase.getGroupIndexFromEvent(data);\n\n          if (groupIndex > -1 && this_1.parent.crudModule.crudObj.sourceEvent.filter(function (tdData) {\n            return tdData.groupIndex === groupIndex;\n          }).length === 0 && this_1.crudObj.isCrudAction) {\n            this_1.crudObj.sourceEvent.push(this_1.parent.resourceBase.lastResourceLevel[parseInt(groupIndex.toString(), 10)]);\n          }\n        };\n\n        var this_1 = this;\n\n        for (var _i = 0, crudData_1 = crudData; _i < crudData_1.length; _i++) {\n          var data = crudData_1[_i];\n\n          _loop_1(data);\n        }\n\n        this.crudObj.targetEvent = this.crudObj.sourceEvent;\n      }\n    }\n\n    if (this.parent.dataModule.dataManager.dataSource.offline) {\n      this.parent.trigger(actionComplete, actionArgs, function (offlineArgs) {\n        if (!offlineArgs.cancel) {\n          _this.refreshDataManager();\n        }\n      });\n    } else {\n      args.promise.then(function () {\n        if (!_this.parent || _this.parent && _this.parent.isDestroyed) {\n          return;\n        }\n\n        _this.parent.trigger(actionComplete, actionArgs, function (onlineArgs) {\n          if (!onlineArgs.cancel) {\n            _this.refreshDataManager();\n          }\n        });\n      }).catch(function (e) {\n        if (!_this.parent || _this.parent && _this.parent.isDestroyed) {\n          return;\n        }\n\n        _this.parent.trigger(actionFailure, {\n          error: e\n        });\n      });\n    }\n  };\n\n  Crud.prototype.addEvent = function (eventData) {\n    var _this = this;\n\n    if (this.parent.eventSettings.allowAdding && !this.parent.activeViewOptions.readonly) {\n      if (!this.isBlockEvent(eventData) && this.parent.eventBase.isBlockRange(eventData)) {\n        this.parent.quickPopup.openValidationError('blockAlert', eventData);\n        return;\n      }\n\n      var addEvents = eventData instanceof Array ? eventData : [eventData];\n\n      if (addEvents.length === 0) {\n        return;\n      }\n\n      var args = {\n        requestType: 'eventCreate',\n        cancel: false,\n        data: addEvents,\n        addedRecords: addEvents,\n        changedRecords: [],\n        deletedRecords: []\n      };\n      this.parent.trigger(actionBegin, args, function (addArgs) {\n        if (!addArgs.cancel) {\n          var fields = _this.parent.eventFields;\n          var editParams = {\n            addedRecords: [],\n            changedRecords: [],\n            deletedRecords: []\n          };\n          var promise = void 0;\n\n          if (addArgs.addedRecords instanceof Array) {\n            for (var _i = 0, _a = addArgs.addedRecords; _i < _a.length; _i++) {\n              var event_1 = _a[_i];\n              event_1 = _this.parent.eventBase.updateEventDateTime(event_1);\n              var eventData_1 = extend({}, _this.parent.eventBase.processTimezone(event_1, true), null, true);\n              editParams.addedRecords.push(eventData_1);\n            }\n\n            promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());\n          } else {\n            var event_2 = _this.parent.eventBase.processTimezone(addArgs.addedRecords, true);\n\n            editParams.addedRecords.push(event_2);\n            promise = _this.parent.dataModule.dataManager.insert(event_2, _this.getTable(), _this.getQuery());\n          }\n\n          var crudArgs = {\n            requestType: 'eventCreated',\n            cancel: false,\n            data: addArgs.addedRecords,\n            promise: promise,\n            editParams: editParams\n          };\n\n          _this.refreshData(crudArgs);\n        }\n      });\n    }\n  };\n\n  Crud.prototype.saveEvent = function (eventData, action) {\n    var _this = this;\n\n    if (this.parent.eventSettings.allowEditing && !this.parent.activeViewOptions.readonly) {\n      if (this.parent.currentAction !== 'EditFollowingEvents' && !this.isBlockEvent(eventData) && this.parent.eventBase.isBlockRange(eventData)) {\n        this.parent.quickPopup.openValidationError('blockAlert', eventData);\n        this.parent.crudModule.crudObj.isCrudAction = false;\n        return;\n      }\n\n      var updateEvents = eventData instanceof Array ? eventData : [eventData];\n\n      if (updateEvents.length === 0) {\n        return;\n      }\n\n      this.parent.currentAction = action;\n\n      if (action) {\n        switch (action) {\n          case 'Save':\n            this.processSave(eventData);\n            break;\n\n          case 'EditOccurrence':\n            this.processOccurrences(eventData, action);\n            break;\n\n          case 'EditFollowingEvents':\n            this.processFollowSeries(eventData, action);\n            break;\n\n          case 'EditSeries':\n            this.processEntireSeries(eventData, action);\n            break;\n        }\n      } else {\n        var args = {\n          requestType: 'eventChange',\n          cancel: false,\n          data: eventData,\n          addedRecords: [],\n          changedRecords: updateEvents,\n          deletedRecords: []\n        };\n        this.parent.trigger(actionBegin, args, function (saveArgs) {\n          if (!saveArgs.cancel) {\n            var promise = void 0;\n            var fields = _this.parent.eventFields;\n            var editParams = {\n              addedRecords: [],\n              changedRecords: [],\n              deletedRecords: []\n            };\n\n            if (saveArgs.changedRecords instanceof Array) {\n              for (var _i = 0, _a = saveArgs.changedRecords; _i < _a.length; _i++) {\n                var event_3 = _a[_i];\n                event_3 = _this.parent.eventBase.updateEventDateTime(event_3);\n                var eventData_2 = extend({}, _this.parent.eventBase.processTimezone(event_3, true), null, true);\n                editParams.changedRecords.push(eventData_2);\n              }\n\n              promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());\n            } else {\n              var event_4 = _this.parent.eventBase.processTimezone(saveArgs.changedRecords, true);\n\n              editParams.changedRecords.push(event_4);\n              promise = _this.parent.dataModule.dataManager.update(fields.id, event_4, _this.getTable(), _this.getQuery());\n            }\n\n            var crudArgs = {\n              requestType: 'eventChanged',\n              cancel: false,\n              data: saveArgs.changedRecords,\n              promise: promise,\n              editParams: editParams\n            };\n\n            _this.refreshData(crudArgs);\n          }\n        });\n      }\n    }\n  };\n\n  Crud.prototype.deleteEvent = function (eventData, action) {\n    var _this = this;\n\n    if (this.parent.eventSettings.allowDeleting && !this.parent.activeViewOptions.readonly) {\n      this.parent.currentAction = action;\n      var deleteEvents = [];\n\n      if (typeof eventData === 'string' || typeof eventData === 'number') {\n        deleteEvents = this.parent.eventsData.filter(function (eventObj) {\n          return eventObj[_this.parent.eventFields.id] === eventData;\n        });\n      } else {\n        deleteEvents = eventData instanceof Array ? eventData : [eventData];\n      }\n\n      if (deleteEvents.length === 0) {\n        return;\n      }\n\n      if (action) {\n        switch (action) {\n          case 'Delete':\n            this.processDelete(deleteEvents);\n            break;\n\n          case 'DeleteOccurrence':\n            this.processOccurrences(deleteEvents, action);\n            break;\n\n          case 'DeleteFollowingEvents':\n            this.processFollowSeries(deleteEvents, action);\n            break;\n\n          case 'DeleteSeries':\n            this.processEntireSeries(deleteEvents, action);\n            break;\n        }\n      } else {\n        var args = {\n          requestType: 'eventRemove',\n          cancel: false,\n          data: eventData,\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: deleteEvents\n        };\n        this.parent.trigger(actionBegin, args, function (deleteArgs) {\n          if (!deleteArgs.cancel) {\n            var promise = void 0;\n            var fields = _this.parent.eventFields;\n            var editParams = {\n              addedRecords: [],\n              changedRecords: [],\n              deletedRecords: []\n            };\n\n            if (deleteArgs.deletedRecords.length > 1) {\n              editParams.deletedRecords = editParams.deletedRecords.concat(deleteArgs.deletedRecords);\n              promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());\n            } else {\n              editParams.deletedRecords.push(deleteArgs.deletedRecords[0]);\n              promise = _this.parent.dataModule.dataManager.remove(fields.id, deleteArgs.deletedRecords[0], _this.getTable(), _this.getQuery());\n            }\n\n            _this.parent.eventBase.selectWorkCellByTime(deleteArgs.deletedRecords);\n\n            var crudArgs = {\n              requestType: 'eventRemoved',\n              cancel: false,\n              data: deleteArgs.deletedRecords,\n              promise: promise,\n              editParams: editParams\n            };\n\n            _this.refreshData(crudArgs);\n          }\n        });\n      }\n    }\n  };\n\n  Crud.prototype.processOccurrences = function (eventData, action) {\n    var _this = this;\n\n    var occurrenceData = [];\n    var isDeletedRecords = false;\n\n    if (eventData instanceof Array) {\n      for (var _i = 0, eventData_3 = eventData; _i < eventData_3.length; _i++) {\n        var event_5 = eventData_3[_i];\n        occurrenceData.push({\n          occurrence: event_5,\n          parent: this.getParentEvent(event_5)\n        });\n      }\n    } else {\n      occurrenceData = {\n        occurrence: eventData,\n        parent: this.getParentEvent(eventData)\n      };\n    }\n\n    var updateEvents = eventData instanceof Array ? eventData : [eventData];\n    var args = {\n      requestType: action === 'EditOccurrence' ? 'eventChange' : 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: updateEvents,\n      deletedRecords: []\n    };\n    args.data = occurrenceData;\n    this.parent.trigger(actionBegin, args, function (occurrenceArgs) {\n      if (!occurrenceArgs.cancel) {\n        var fields = _this.parent.eventFields;\n        var editParams = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n        var occurrenceEvents = occurrenceData instanceof Array ? occurrenceData : [occurrenceData];\n\n        var _loop_2 = function (a, count) {\n          var childEvent = occurrenceArgs.changedRecords[parseInt(a.toString(), 10)];\n          var parentEvent = occurrenceEvents[parseInt(a.toString(), 10)].parent;\n          var parentException = parentEvent[fields.recurrenceException];\n          var editedData = void 0;\n          var exceptionDate = void 0;\n\n          switch (action) {\n            case 'EditOccurrence':\n              editedData = _this.parent.eventsProcessed.filter(function (event) {\n                return event.Guid === childEvent.Guid;\n              })[0];\n              exceptionDate = _this.excludeDateCheck(editedData[fields.startTime], parentException);\n\n              if (exceptionDate !== parentEvent[fields.recurrenceException]) {\n                parentEvent[fields.recurrenceException] = exceptionDate;\n                childEvent[fields.recurrenceException] = getRecurrenceStringFromDate(editedData[fields.startTime]);\n                childEvent[fields.recurrenceID] = parentEvent[fields.id];\n                childEvent[fields.followingID] = null;\n                editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n                editParams.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              } else {\n                editParams.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              }\n\n              break;\n\n            case 'DeleteOccurrence':\n              if (!childEvent[fields.recurrenceException]) {\n                parentEvent[fields.recurrenceException] = _this.excludeDateCheck(childEvent[fields.startTime], parentException);\n                editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n              }\n\n              if (childEvent[fields.id] !== parentEvent[fields.id]) {\n                editParams.deletedRecords.push(childEvent);\n                isDeletedRecords = true;\n              }\n\n              break;\n          }\n        };\n\n        for (var a = 0, count = occurrenceArgs.changedRecords.length; a < count; a++) {\n          _loop_2(a, count);\n        }\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());\n\n        _this.parent.eventBase.selectWorkCellByTime(occurrenceArgs.changedRecords);\n\n        var crudArgs = {\n          requestType: action === 'EditOccurrence' ? 'eventChanged' : 'eventRemoved',\n          cancel: false,\n          data: isDeletedRecords ? occurrenceArgs.deletedRecords : occurrenceArgs.changedRecords,\n          promise: promise,\n          editParams: editParams\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.processFollowSeries = function (eventData, action) {\n    var _this = this;\n\n    var followData = [];\n\n    if (eventData instanceof Array) {\n      for (var _i = 0, eventData_4 = eventData; _i < eventData_4.length; _i++) {\n        var event_6 = eventData_4[_i];\n        followData.push({\n          occurrence: event_6,\n          parent: this.getParentEvent(event_6)\n        });\n      }\n    } else {\n      followData = {\n        occurrence: eventData,\n        parent: this.getParentEvent(eventData)\n      };\n    }\n\n    var updateFollowEvents = eventData instanceof Array ? eventData : [eventData];\n    var args = {\n      requestType: action === 'EditFollowingEvents' ? 'eventChange' : 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: updateFollowEvents,\n      deletedRecords: []\n    };\n    args.data = followData;\n    this.parent.trigger(actionBegin, args, function (followArgs) {\n      if (!followArgs.cancel) {\n        var fields_1 = _this.parent.eventFields;\n        var editParams = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n        var followEvents = followData instanceof Array ? followData : [followData];\n\n        var _loop_3 = function (a, count) {\n          var childEvent = followArgs.changedRecords[parseInt(a.toString(), 10)];\n          var parentEvent = followEvents[parseInt(a.toString(), 10)].parent;\n\n          var followData_1 = _this.parent.eventBase.getEventCollections(parentEvent, childEvent);\n\n          var isSpanned = void 0;\n\n          switch (action) {\n            case 'EditFollowingEvents':\n              _this.processRecurrenceRule(parentEvent, childEvent);\n\n              isSpanned = !_this.parent.eventBase.isFollowingEvent(parentEvent, childEvent);\n              childEvent[fields_1.followingID] = isSpanned ? null : parentEvent[fields_1.id];\n              childEvent[fields_1.recurrenceID] = null;\n              editParams.addedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n\n              if (!_this.parent.uiStateValues.isIgnoreOccurrence) {\n                childEvent[fields_1.recurrenceException] = null;\n\n                if (followData_1.occurrence.length > 0) {\n                  var rule = followData_1.occurrence.slice(-1)[0][fields_1.recurrenceRule];\n\n                  if (rule.indexOf('COUNT') === -1) {\n                    childEvent[fields_1.recurrenceRule] = rule;\n                  }\n                }\n\n                if (followData_1.follow.length > 0) {\n                  childEvent[fields_1.recurrenceRule] = followData_1.follow.slice(-1)[0][fields_1.recurrenceRule];\n                  editParams.deletedRecords = editParams.deletedRecords.concat(followData_1.follow);\n                }\n\n                if (isSpanned) {\n                  followData_1.occurrence = followData_1.occurrence.filter(function (eventObj) {\n                    return eventObj[fields_1.recurrenceID] === childEvent[fields_1.id];\n                  });\n                }\n\n                editParams.deletedRecords = editParams.deletedRecords.concat(followData_1.occurrence);\n              }\n\n              break;\n\n            case 'DeleteFollowingEvents':\n              _this.processRecurrenceRule(parentEvent, childEvent[fields_1.startTime]);\n\n              editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent, true));\n              editParams.deletedRecords = editParams.deletedRecords.concat(followData_1.occurrence).concat(followData_1.follow);\n              break;\n          }\n        };\n\n        for (var a = 0, count = followArgs.changedRecords.length; a < count; a++) {\n          _loop_3(a, count);\n        }\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields_1.id, _this.getTable(), _this.getQuery());\n\n        _this.parent.eventBase.selectWorkCellByTime(followArgs.changedRecords);\n\n        var crudArgs = {\n          requestType: action === 'EditFollowingEvents' ? 'eventChanged' : 'eventRemoved',\n          cancel: false,\n          data: followArgs.changedRecords,\n          promise: promise,\n          editParams: editParams\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.processEntireSeries = function (eventData, action) {\n    var _this = this;\n\n    var seriesData = [];\n    var isDeletedRecords = false;\n\n    if (eventData instanceof Array) {\n      for (var _i = 0, eventData_5 = eventData; _i < eventData_5.length; _i++) {\n        var event_7 = eventData_5[_i];\n        seriesData.push(this.getParentEvent(event_7, true));\n      }\n    } else {\n      seriesData = this.getParentEvent(eventData, true);\n    }\n\n    var updateSeriesEvents = eventData instanceof Array ? eventData : [eventData];\n    var args = {\n      requestType: action === 'EditSeries' ? 'eventChange' : 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: updateSeriesEvents,\n      deletedRecords: []\n    };\n    args.data = seriesData;\n    this.parent.trigger(actionBegin, args, function (seriesArgs) {\n      if (!seriesArgs.cancel) {\n        var fields_2 = _this.parent.eventFields;\n        var editParams = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n        var seriesEvents = seriesData instanceof Array ? seriesData : [seriesData];\n\n        var _loop_4 = function (a, count) {\n          var childEvent = seriesArgs.changedRecords[parseInt(a.toString(), 10)];\n          var parentEvent = seriesEvents[parseInt(a.toString(), 10)];\n\n          var eventCollections = _this.parent.eventBase.getEventCollections(parentEvent);\n\n          var deletedEvents = eventCollections.follow.concat(eventCollections.occurrence);\n\n          switch (action) {\n            case 'EditSeries':\n              childEvent[fields_2.id] = parentEvent[fields_2.id];\n              childEvent[fields_2.recurrenceID] = null;\n              childEvent[fields_2.followingID] = null;\n\n              if (_this.parent.uiStateValues.isIgnoreOccurrence && childEvent[fields_2.recurrenceException]) {\n                var originalParent = _this.parent.eventsData.filter(function (eventObj) {\n                  return eventObj[fields_2.id] === childEvent[fields_2.id];\n                });\n\n                if (originalParent.length > 0) {\n                  childEvent[fields_2.recurrenceRule] = originalParent[0][fields_2.recurrenceRule];\n                }\n              } else {\n                childEvent[fields_2.recurrenceException] = null;\n                editParams.deletedRecords = editParams.deletedRecords.concat(deletedEvents);\n              }\n\n              editParams.changedRecords.push(_this.parent.eventBase.processTimezone(childEvent, true));\n              _this.parent.uiStateValues.isIgnoreOccurrence = false;\n              break;\n\n            case 'DeleteSeries':\n              editParams.deletedRecords = editParams.deletedRecords.concat(deletedEvents.concat(parentEvent));\n              isDeletedRecords = true;\n              break;\n          }\n        };\n\n        for (var a = 0, count = seriesArgs.changedRecords.length; a < count; a++) {\n          _loop_4(a, count);\n        }\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields_2.id, _this.getTable(), _this.getQuery());\n\n        _this.parent.eventBase.selectWorkCellByTime(seriesArgs.changedRecords);\n\n        var crudArgs = {\n          requestType: action === 'EditSeries' ? 'eventChanged' : 'eventRemoved',\n          cancel: false,\n          data: isDeletedRecords ? seriesArgs.deletedRecords : seriesArgs.changedRecords,\n          promise: promise,\n          editParams: editParams\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.processDelete = function (eventData) {\n    var _this = this;\n\n    var deleteData = [];\n\n    for (var _i = 0, eventData_6 = eventData; _i < eventData_6.length; _i++) {\n      var eventObj = eventData_6[_i];\n\n      if (eventObj[this.parent.eventFields.recurrenceRule]) {\n        deleteData.push({\n          occurrence: eventObj,\n          parent: this.getParentEvent(eventObj)\n        });\n      } else {\n        deleteData.push(eventObj);\n      }\n    }\n\n    var args = {\n      requestType: 'eventRemove',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: [],\n      deletedRecords: eventData\n    };\n    args.data = deleteData;\n    this.parent.trigger(actionBegin, args, function (deleteArgs) {\n      if (!deleteArgs.cancel) {\n        var fields_3 = _this.parent.eventFields;\n        var editParams = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n\n        var _loop_5 = function (a, count) {\n          var isDelete = isNullOrUndefined(deleteArgs.deletedRecords[parseInt(a.toString(), 10)][_this.parent.eventFields.recurrenceRule]);\n\n          if (!isDelete) {\n            var parentEvent_1 = deleteData[parseInt(a.toString(), 10)].parent;\n            var isEdited = editParams.changedRecords.filter(function (obj) {\n              return obj[fields_3.id] === parentEvent_1[fields_3.id];\n            });\n            var editedDate = deleteArgs.deletedRecords[parseInt(a.toString(), 10)][fields_3.startTime];\n\n            if (isEdited.length > 0) {\n              var editedData = isEdited[0];\n              editedData[fields_3.recurrenceException] = _this.excludeDateCheck(editedDate, editedData[fields_3.recurrenceException]);\n            } else {\n              parentEvent_1[fields_3.recurrenceException] = _this.excludeDateCheck(editedDate, parentEvent_1[fields_3.recurrenceException]);\n            }\n\n            if (isEdited.length === 0) {\n              editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEvent_1, true));\n            }\n\n            isDelete = deleteArgs.deletedRecords[parseInt(a.toString(), 10)][fields_3.id] !== parentEvent_1[fields_3.id];\n          }\n\n          if (isDelete) {\n            editParams.deletedRecords.push(deleteArgs.deletedRecords[parseInt(a.toString(), 10)]);\n          }\n        };\n\n        for (var a = 0, count = deleteArgs.deletedRecords.length; a < count; a++) {\n          _loop_5(a, count);\n        }\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields_3.id, _this.getTable(), _this.getQuery());\n\n        var crudArgs = {\n          requestType: 'eventRemoved',\n          cancel: false,\n          data: deleteArgs.deletedRecords,\n          promise: promise,\n          editParams: editParams\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.processSave = function (data) {\n    var _this = this;\n\n    var eventData = data instanceof Array ? data : [data];\n    var editData = [];\n\n    for (var _i = 0, eventData_7 = eventData; _i < eventData_7.length; _i++) {\n      var eventObj = eventData_7[_i];\n\n      if (eventObj[this.parent.eventFields.recurrenceRule]) {\n        editData.push({\n          occurrence: eventObj,\n          parent: this.getParentEvent(eventObj)\n        });\n      } else {\n        editData.push(eventObj);\n      }\n    }\n\n    var args = {\n      requestType: 'eventChange',\n      cancel: false,\n      addedRecords: [],\n      changedRecords: eventData,\n      deletedRecords: []\n    };\n    args.data = editData;\n    this.parent.trigger(actionBegin, args, function (editArgs) {\n      if (!editArgs.cancel) {\n        var fields = _this.parent.eventFields;\n        var editParams = {\n          addedRecords: [],\n          changedRecords: [],\n          deletedRecords: []\n        };\n\n        for (var _i = 0, _a = editArgs.changedRecords; _i < _a.length; _i++) {\n          var record = _a[_i];\n\n          if (!isNullOrUndefined(record[fields.recurrenceRule]) && isNullOrUndefined(record[fields.recurrenceException])) {\n            var exceptionString = getRecurrenceStringFromDate(record[fields.startTime]);\n\n            var parentEle = _this.getParentEvent(record);\n\n            parentEle[fields.recurrenceException] = isNullOrUndefined(parentEle[fields.recurrenceException]) ? exceptionString : parentEle[fields.recurrenceException].concat(',' + exceptionString);\n            record[fields.id] = _this.parent.getEventMaxID();\n            record[fields.recurrenceException] = exceptionString;\n            editParams.addedRecords.push(_this.parent.eventBase.processTimezone(record, true));\n            editParams.changedRecords.push(_this.parent.eventBase.processTimezone(parentEle, true));\n          } else {\n            editParams.changedRecords.push(_this.parent.eventBase.processTimezone(record, true));\n          }\n        }\n\n        var promise = _this.parent.dataModule.dataManager.saveChanges(editParams, fields.id, _this.getTable(), _this.getQuery());\n\n        var crudArgs = {\n          requestType: 'eventChanged',\n          cancel: false,\n          data: editArgs.changedRecords,\n          promise: promise,\n          editParams: editParams\n        };\n\n        _this.refreshData(crudArgs);\n      }\n    });\n  };\n\n  Crud.prototype.getParentEvent = function (event, isParent) {\n    if (isParent === void 0) {\n      isParent = false;\n    }\n\n    var parentEvent = this.parent.eventBase.getParentEvent(event, isParent) || event;\n\n    if (parentEvent[this.parent.eventFields.startTimezone] || parentEvent[this.parent.eventFields.endTimezone]) {\n      this.parent.eventBase.timezoneConvert(parentEvent);\n    }\n\n    return parentEvent;\n  };\n\n  Crud.prototype.excludeDateCheck = function (eventStartTime, exceptionDateList) {\n    var exDate = getRecurrenceStringFromDate(eventStartTime);\n\n    if (!isNullOrUndefined(exceptionDateList)) {\n      if (exceptionDateList.indexOf(exDate) === -1) {\n        exceptionDateList = !isNullOrUndefined(exceptionDateList) ? exceptionDateList + ',' + exDate : exDate;\n      }\n    } else {\n      exceptionDateList = exDate;\n    }\n\n    return exceptionDateList;\n  };\n\n  Crud.prototype.processRecurrenceRule = function (parentEvent, followEvent) {\n    var fields = this.parent.eventFields;\n    var recurrenceRule = parentEvent[fields.recurrenceRule];\n    var endDate;\n\n    if (followEvent instanceof Date) {\n      endDate = new Date(+followEvent);\n    } else {\n      endDate = new Date(+followEvent[fields.startTime]);\n      var newRecurrenceRule = followEvent[fields.recurrenceRule];\n\n      if (newRecurrenceRule) {\n        var startDate = parentEvent[fields.startTime];\n        var ruleException = this.parent.currentAction === 'DeleteFollowingEvents' ? followEvent[fields.recurrenceException] : null;\n        var dateCollection = generate(startDate, newRecurrenceRule, ruleException, this.parent.activeViewOptions.firstDayOfWeek);\n        var untilDate = new Date(dateCollection.slice(-1)[0]);\n        untilDate.setHours(endDate.getHours(), endDate.getMinutes(), endDate.getSeconds());\n        endDate.setHours(startDate.getHours(), startDate.getMinutes(), startDate.getSeconds());\n        followEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(newRecurrenceRule, new Date(+untilDate), false);\n      }\n    }\n\n    parentEvent[fields.recurrenceRule] = this.getUpdatedRecurrenceRule(recurrenceRule, addDays(new Date(endDate.getTime()), -1), true);\n  };\n\n  Crud.prototype.getUpdatedRecurrenceRule = function (recurrenceRule, untilDate, isParent) {\n    var splitRule = recurrenceRule.split(';');\n    var updatedRule = '';\n\n    for (var _i = 0, splitRule_1 = splitRule; _i < splitRule_1.length; _i++) {\n      var rule = splitRule_1[_i];\n\n      if (rule !== '') {\n        var ruleKey = rule.split('=')[0];\n        var ruleValue = rule.split('=')[1];\n\n        if (ruleKey === 'COUNT' || ruleKey === 'UNTIL') {\n          ruleValue = getRecurrenceStringFromDate(untilDate);\n          rule = rule.replace(rule, 'UNTIL=' + ruleValue);\n        }\n\n        updatedRule += rule + ';';\n      }\n    }\n\n    if (isParent && updatedRule.indexOf('UNTIL') === -1) {\n      updatedRule += 'UNTIL=' + getRecurrenceStringFromDate(untilDate);\n    }\n\n    return updatedRule;\n  };\n\n  Crud.prototype.isBlockEvent = function (eventData) {\n    var eventCollection = eventData instanceof Array ? eventData : [eventData];\n    var value = false;\n\n    for (var _i = 0, eventCollection_1 = eventCollection; _i < eventCollection_1.length; _i++) {\n      var event_8 = eventCollection_1[_i];\n      value = event_8[this.parent.eventFields.isBlock] || false;\n    }\n\n    return value;\n  };\n  /**\n   * To destroy the crud module.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Crud.prototype.destroy = function () {\n    this.crudObj = null;\n    this.parent = null;\n  };\n\n  return Crud;\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Work cell interactions\n */\n\n\nvar WorkCellInteraction =\n/** @__PURE__ @class */\nfunction () {\n  function WorkCellInteraction(parent) {\n    this.parent = parent;\n    EventHandler.add(this.parent.element, 'mouseover', this.onHover, this);\n  }\n\n  WorkCellInteraction.prototype.cellMouseDown = function (e) {\n    if (this.isPreventAction(e)) {\n      return;\n    }\n\n    this.parent.notify(cellMouseDown, {\n      event: e\n    });\n  };\n\n  WorkCellInteraction.prototype.cellClick = function (e) {\n    var _this = this;\n\n    if (this.isPreventAction(e)) {\n      return;\n    }\n\n    var queryStr = '.' + WORK_CELLS_CLASS + ',.' + ALLDAY_CELLS_CLASS + ',.' + HEADER_CELLS_CLASS;\n    var target = closest(e.target, queryStr);\n\n    if (isNullOrUndefined(target)) {\n      return;\n    }\n\n    if (!isNullOrUndefined(closest(e.target, '.' + NEW_EVENT_CLASS))) {\n      this.parent.eventWindow.openEditor(this.parent.activeCellsData, 'Add');\n      return;\n    }\n\n    var navigateEle = closest(e.target, '.' + NAVIGATE_CLASS);\n    var navigateView = this.parent.getNavigateView();\n    var sameView = this.parent.currentView === navigateView;\n\n    if (isNullOrUndefined(navigateEle) || sameView || isNullOrUndefined(this.parent.viewOptions[navigateView.charAt(0).toLowerCase() + navigateView.slice(1)])) {\n      if (this.parent.activeViewOptions.readonly && this.parent.currentView !== 'MonthAgenda') {\n        if (this.parent.quickPopup) {\n          this.parent.quickPopup.quickPopupHide();\n        }\n\n        return;\n      }\n\n      if (this.parent.isAdaptive && (e.target.classList.contains(MORE_INDICATOR_CLASS) || closest(e.target, '.' + MORE_INDICATOR_CLASS))) {\n        return;\n      }\n\n      var isWorkCell_1 = target.classList.contains(WORK_CELLS_CLASS) || target.classList.contains(ALLDAY_CELLS_CLASS);\n\n      if (isWorkCell_1 && e.shiftKey && e.which === 1 && this.parent.keyboardInteractionModule) {\n        this.parent.keyboardInteractionModule.onMouseSelection(e);\n        return;\n      }\n\n      this.parent.activeCellsData = this.parent.getCellDetails(target);\n      var args = extend(this.parent.activeCellsData, {\n        cancel: false,\n        event: e,\n        name: 'cellClick'\n      });\n      this.parent.trigger(cellClick, args, function (clickArgs) {\n        if (!clickArgs.cancel) {\n          if (isWorkCell_1) {\n            _this.parent.selectCell(target);\n          }\n\n          if (_this.parent.allowInline) {\n            var inlineArgs = {\n              element: clickArgs.element,\n              groupIndex: clickArgs.groupIndex,\n              type: 'Cell'\n            };\n\n            _this.parent.notify(inlineClick, inlineArgs);\n          } else {\n            _this.parent.notify(cellClick, clickArgs);\n          }\n        } else {\n          if (_this.parent.quickPopup) {\n            _this.parent.quickPopup.quickPopupHide();\n          }\n        }\n      });\n    } else {\n      var date = this.parent.getDateFromElement(target);\n\n      if (!isNullOrUndefined(date) && !this.parent.isAdaptive && this.parent.isMinMaxDate(date)) {\n        this.parent.setProperties({\n          selectedDate: date\n        }, true);\n        this.parent.changeView(this.parent.getNavigateView(), e);\n      }\n    }\n  };\n\n  WorkCellInteraction.prototype.cellDblClick = function (e) {\n    var _this = this;\n\n    var queryStr = '.' + WORK_CELLS_CLASS + ',.' + ALLDAY_CELLS_CLASS + ',.' + HEADER_CELLS_CLASS;\n    var target = closest(e.target, queryStr);\n\n    if (this.parent.activeViewOptions.readonly || this.isPreventAction(e) || isNullOrUndefined(target)) {\n      return;\n    }\n\n    var args = extend(this.parent.activeCellsData, {\n      cancel: false,\n      event: e,\n      name: 'cellDoubleClick'\n    });\n    this.parent.trigger(cellDoubleClick, args, function (clickArgs) {\n      var date = new Date(clickArgs.startTime.getTime());\n\n      if (!_this.parent.isMinMaxDate(new Date(date.setHours(0, 0, 0, 0)))) {\n        return;\n      }\n\n      if (!clickArgs.cancel) {\n        _this.parent.eventWindow.openEditor(_this.parent.activeCellsData, 'Add');\n      }\n    });\n  };\n\n  WorkCellInteraction.prototype.onHover = function (e) {\n    var targetSelector = '.' + WORK_CELLS_CLASS + ',.' + TIME_SLOT_CLASS + ',.' + ALLDAY_CELLS_CLASS + ',.' + HEADER_CELLS_CLASS + ',.' + RESOURCE_CELLS_CLASS + ',.' + APPOINTMENT_CLASS + ',.' + WEEK_NUMBER_CLASS + ',.' + MONTH_HEADER_CLASS;\n    var hoverTarget = closest(e.target, targetSelector);\n\n    if (hoverTarget) {\n      var hoverArgs = {\n        element: hoverTarget,\n        event: e\n      };\n      this.parent.trigger(hover, hoverArgs);\n    }\n  };\n\n  WorkCellInteraction.prototype.isPreventAction = function (e) {\n    if (closest(e.target, '.' + NAVIGATE_CLASS)) {\n      return false;\n    }\n\n    if (closest(e.target, '.' + APPOINTMENT_WRAPPER_CLASS) && !closest(e.target, '.' + MORE_INDICATOR_CLASS)) {\n      return true;\n    }\n\n    var target = closest(e.target, '.' + APPOINTMENT_CLASS + ',.' + RESOURCE_GROUP_CELLS_CLASS);\n\n    if (!isNullOrUndefined(target)) {\n      return true;\n    }\n\n    target = closest(e.target, '.' + HEADER_CELLS_CLASS);\n\n    if (this.parent.activeView.isTimelineView() && !isNullOrUndefined(target)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  WorkCellInteraction.prototype.destroy = function () {\n    EventHandler.remove(this.parent.element, 'mouseover', this.onHover);\n  };\n\n  return WorkCellInteraction;\n}();\n\nvar __extends$11 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$8 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Configuration that applies on each appointment field options of scheduler.\n */\n\n\nvar FieldOptions =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$11(FieldOptions, _super);\n\n  function FieldOptions() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$8([Property()], FieldOptions.prototype, \"name\", void 0);\n\n  __decorate$8([Property()], FieldOptions.prototype, \"default\", void 0);\n\n  __decorate$8([Property()], FieldOptions.prototype, \"title\", void 0);\n\n  __decorate$8([Property({})], FieldOptions.prototype, \"validation\", void 0);\n\n  return FieldOptions;\n}(ChildProperty);\n\nvar __extends$10 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$7 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * A class that holds the collection of event fields that requires to be mapped with the dataSource\n * fields along with its available configuration settings. Each field in it accepts both string and object\n *  data type. When each of the field is assigned with simple `string` value, it is assumed that the dataSource field\n *  name is mapped with it. If the `object` type is defined on each fields, then the validation related settings and mapping of\n *  those fields with dataSource can be given altogether within it.\n */\n\n\nvar Field =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$10(Field, _super);\n\n  function Field() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$7([Property('Id')], Field.prototype, \"id\", void 0);\n\n  __decorate$7([Property('IsBlock')], Field.prototype, \"isBlock\", void 0);\n\n  __decorate$7([Complex({\n    name: 'Subject'\n  }, FieldOptions)], Field.prototype, \"subject\", void 0);\n\n  __decorate$7([Complex({\n    name: 'StartTime'\n  }, FieldOptions)], Field.prototype, \"startTime\", void 0);\n\n  __decorate$7([Complex({\n    name: 'EndTime'\n  }, FieldOptions)], Field.prototype, \"endTime\", void 0);\n\n  __decorate$7([Complex({\n    name: 'StartTimezone'\n  }, FieldOptions)], Field.prototype, \"startTimezone\", void 0);\n\n  __decorate$7([Complex({\n    name: 'EndTimezone'\n  }, FieldOptions)], Field.prototype, \"endTimezone\", void 0);\n\n  __decorate$7([Complex({\n    name: 'Location'\n  }, FieldOptions)], Field.prototype, \"location\", void 0);\n\n  __decorate$7([Complex({\n    name: 'Description'\n  }, FieldOptions)], Field.prototype, \"description\", void 0);\n\n  __decorate$7([Complex({\n    name: 'IsAllDay'\n  }, FieldOptions)], Field.prototype, \"isAllDay\", void 0);\n\n  __decorate$7([Complex({\n    name: 'RecurrenceID'\n  }, FieldOptions)], Field.prototype, \"recurrenceID\", void 0);\n\n  __decorate$7([Complex({\n    name: 'RecurrenceRule'\n  }, FieldOptions)], Field.prototype, \"recurrenceRule\", void 0);\n\n  __decorate$7([Complex({\n    name: 'RecurrenceException'\n  }, FieldOptions)], Field.prototype, \"recurrenceException\", void 0);\n\n  __decorate$7([Property('IsReadonly')], Field.prototype, \"isReadonly\", void 0);\n\n  __decorate$7([Property('FollowingID')], Field.prototype, \"followingID\", void 0);\n\n  return Field;\n}(ChildProperty);\n\nvar __extends$9 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$6 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Holds the configuration of event related options and dataSource binding to Schedule.\n */\n\n\nvar EventSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$9(EventSettings, _super);\n\n  function EventSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$6([Property()], EventSettings.prototype, \"template\", void 0);\n\n  __decorate$6([Property([])], EventSettings.prototype, \"dataSource\", void 0);\n\n  __decorate$6([Property()], EventSettings.prototype, \"query\", void 0);\n\n  __decorate$6([Complex({}, Field)], EventSettings.prototype, \"fields\", void 0);\n\n  __decorate$6([Property(false)], EventSettings.prototype, \"enableTooltip\", void 0);\n\n  __decorate$6([Property('AllDayRow')], EventSettings.prototype, \"spannedEventPlacement\", void 0);\n\n  __decorate$6([Property(1)], EventSettings.prototype, \"minimumEventDuration\", void 0);\n\n  __decorate$6([Property()], EventSettings.prototype, \"tooltipTemplate\", void 0);\n\n  __decorate$6([Property()], EventSettings.prototype, \"resourceColorField\", void 0);\n\n  __decorate$6([Property(false)], EventSettings.prototype, \"editFollowingEvents\", void 0);\n\n  __decorate$6([Property(true)], EventSettings.prototype, \"allowAdding\", void 0);\n\n  __decorate$6([Property(true)], EventSettings.prototype, \"allowEditing\", void 0);\n\n  __decorate$6([Property(true)], EventSettings.prototype, \"allowDeleting\", void 0);\n\n  __decorate$6([Property(false)], EventSettings.prototype, \"enableMaxHeight\", void 0);\n\n  __decorate$6([Property(false)], EventSettings.prototype, \"enableIndicator\", void 0);\n\n  __decorate$6([Property(false)], EventSettings.prototype, \"ignoreWhitespace\", void 0);\n\n  __decorate$6([Property()], EventSettings.prototype, \"sortComparer\", void 0);\n\n  __decorate$6([Property()], EventSettings.prototype, \"includeFiltersInQuery\", void 0);\n\n  return EventSettings;\n}(ChildProperty);\n\nvar __extends$12 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$9 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * A class that holds the resource grouping related configurations on Schedule.\n */\n\n\nvar Group =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$12(Group, _super);\n\n  function Group() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$9([Property(false)], Group.prototype, \"byDate\", void 0);\n\n  __decorate$9([Property(true)], Group.prototype, \"byGroupID\", void 0);\n\n  __decorate$9([Property(false)], Group.prototype, \"allowGroupEdit\", void 0);\n\n  __decorate$9([Property([])], Group.prototype, \"resources\", void 0);\n\n  __decorate$9([Property(true)], Group.prototype, \"enableCompactView\", void 0);\n\n  __decorate$9([Property()], Group.prototype, \"headerTooltipTemplate\", void 0);\n\n  __decorate$9([Property(false)], Group.prototype, \"hideNonWorkingDays\", void 0);\n\n  return Group;\n}(ChildProperty);\n\nvar __extends$13 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$10 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * A class that represents the resource related configurations and its data binding options.\n */\n\n\nvar Resources =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$13(Resources, _super);\n\n  function Resources() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$10([Property()], Resources.prototype, \"field\", void 0);\n\n  __decorate$10([Property()], Resources.prototype, \"title\", void 0);\n\n  __decorate$10([Property()], Resources.prototype, \"name\", void 0);\n\n  __decorate$10([Property(false)], Resources.prototype, \"allowMultiple\", void 0);\n\n  __decorate$10([Property([])], Resources.prototype, \"dataSource\", void 0);\n\n  __decorate$10([Property()], Resources.prototype, \"query\", void 0);\n\n  __decorate$10([Property('Id')], Resources.prototype, \"idField\", void 0);\n\n  __decorate$10([Property('Text')], Resources.prototype, \"textField\", void 0);\n\n  __decorate$10([Property('Expanded')], Resources.prototype, \"expandedField\", void 0);\n\n  __decorate$10([Property('GroupID')], Resources.prototype, \"groupIDField\", void 0);\n\n  __decorate$10([Property('Color')], Resources.prototype, \"colorField\", void 0);\n\n  __decorate$10([Property('StartHour')], Resources.prototype, \"startHourField\", void 0);\n\n  __decorate$10([Property('EndHour')], Resources.prototype, \"endHourField\", void 0);\n\n  __decorate$10([Property('WorkDays')], Resources.prototype, \"workDaysField\", void 0);\n\n  __decorate$10([Property('CssClass')], Resources.prototype, \"cssClassField\", void 0);\n\n  return Resources;\n}(ChildProperty);\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable max-len */\n\n\nvar ResourceBase =\n/** @__PURE__ @class */\nfunction () {\n  function ResourceBase(parent) {\n    this.resourceCollection = [];\n    this.leftPixel = 25;\n    this.resourceDateTree = [];\n    this.parent = parent;\n  }\n\n  ResourceBase.prototype.renderResourceHeaderIndent = function (tr) {\n    var resColTd = createElement('td', {\n      className: RESOURCE_LEFT_TD_CLASS\n    });\n    var resColDiv = createElement('div', {\n      className: RESOURCE_TEXT_CLASS\n    });\n\n    if (this.parent.activeViewOptions.headerIndentTemplate) {\n      var data = {\n        className: [resColTd.className],\n        type: 'emptyCells'\n      };\n      this.parent.renderHeaderIndentTemplate(data, resColTd);\n    } else {\n      resColTd.appendChild(resColDiv);\n    }\n\n    var args = {\n      elementType: 'emptyCells',\n      element: resColTd\n    };\n    this.parent.trigger(renderCell, args);\n    tr.appendChild(resColTd);\n  };\n\n  ResourceBase.prototype.hideResourceRows = function (tBody) {\n    if (this.resourceCollection.length <= 1 || this.parent.virtualScrollModule) {\n      return;\n    }\n\n    var trCount = this.lastResourceLevel.length;\n\n    for (var i = 0; i < trCount; i++) {\n      var resData = this.lastResourceLevel[parseInt(i.toString(), 10)].resourceData;\n      var res = this.lastResourceLevel[parseInt(i.toString(), 10)].resource;\n\n      if (resData.ClassName === RESOURCE_PARENT_CLASS && !resData[res.expandedField] && !isNullOrUndefined(resData[res.expandedField])) {\n        var trCollection = [].slice.call(tBody.children);\n        var slicedCollection = trCollection.slice(i + 1, i + (parseInt(resData.Count, 10) + 1));\n        addClass(slicedCollection, HIDDEN_CLASS);\n      }\n    }\n  };\n\n  ResourceBase.prototype.createResourceColumn = function () {\n    var resColl = this.resourceCollection;\n    var resDiv = createElement('div', {\n      className: RESOURCE_COLUMN_WRAP_CLASS\n    });\n    var tbl = this.parent.activeView.createTableLayout(RESOURCE_COLUMN_TABLE_CLASS);\n\n    if (!this.parent.uiStateValues.isGroupAdaptive && this.parent.rowAutoHeight && this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0) {\n      addClass([tbl], AUTO_HEIGHT);\n    }\n\n    var tBody = tbl.querySelector('tbody');\n    var resData = this.generateTreeData(true);\n    this.countCalculation(resColl.slice(0, -2), resColl.slice(0, -1));\n    this.renderedResources = this.lastResourceLevel;\n\n    if (this.parent.virtualScrollModule) {\n      var resourceCount = this.parent.virtualScrollModule.getRenderedCount();\n      this.setExpandedResources();\n      resData = this.expandedResources.slice(0, resourceCount);\n      this.renderedResources = resData;\n    }\n\n    append(this.getContentRows(resData), tBody);\n    this.hideResourceRows(tBody);\n    tbl.appendChild(tBody);\n    resDiv.appendChild(tbl);\n    return resDiv;\n  };\n\n  ResourceBase.prototype.setRenderedResources = function () {\n    var resColl = this.resourceCollection; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    var temp = this.generateTreeData(true);\n    this.countCalculation(resColl.slice(0, -2), resColl.slice(0, -1));\n    this.renderedResources = this.lastResourceLevel;\n  };\n\n  ResourceBase.prototype.setExpandedResources = function () {\n    var resources = [];\n\n    for (var i = 0; i < this.lastResourceLevel.length; i++) {\n      var resource = this.lastResourceLevel[parseInt(i.toString(), 10)].resourceData;\n      var count = resource.Count;\n      resources.push(this.lastResourceLevel[parseInt(i.toString(), 10)]);\n      var isExpanded = resource[this.lastResourceLevel[parseInt(i.toString(), 10)].resource.expandedField];\n\n      if (!isNullOrUndefined(isExpanded) && !isExpanded && count > 0) {\n        i = i + count;\n      }\n    }\n\n    this.expandedResources = resources;\n  };\n\n  ResourceBase.prototype.getContentRows = function (resData, isVirtualScroll) {\n    var resRows = [];\n    var left;\n    var rIndex;\n    var resColl = this.resourceCollection;\n    var tr = createElement('tr');\n    var td = createElement('td', {\n      attrs: {\n        tabindex: isVirtualScroll ? '-1' : '0'\n      }\n    });\n\n    for (var i = 0; i < resData.length; i++) {\n      var ntd = td.cloneNode();\n      rIndex = findIndexInData(resColl, 'name', resData[parseInt(i.toString(), 10)].resource.name);\n\n      if (rIndex === resColl.length - 1) {\n        extend(resData[parseInt(i.toString(), 10)].resourceData, {\n          ClassName: RESOURCE_CHILD_CLASS\n        });\n        this.renderedResources[parseInt(i.toString(), 10)].className = [RESOURCE_CHILD_CLASS];\n      } else {\n        extend(resData[parseInt(i.toString(), 10)].resourceData, {\n          ClassName: RESOURCE_PARENT_CLASS\n        });\n        this.renderedResources[parseInt(i.toString(), 10)].className = [RESOURCE_PARENT_CLASS];\n      }\n\n      left = rIndex * this.leftPixel + 'px';\n\n      if (resData[parseInt(i.toString(), 10)].resourceData.ClassName === RESOURCE_PARENT_CLASS && !isNullOrUndefined(resData[parseInt(i.toString(), 10)].resourceData.Count) && resData[parseInt(i.toString(), 10)].resourceData.Count > 0) {\n        var iconClass = void 0;\n\n        if (resData[parseInt(i.toString(), 10)].resourceData[resColl[parseInt(rIndex.toString(), 10)].expandedField] || isNullOrUndefined(resData[parseInt(i.toString(), 10)].resourceData[resColl[parseInt(rIndex.toString(), 10)].expandedField])) {\n          iconClass = RESOURCE_COLLAPSE_CLASS;\n        } else {\n          iconClass = RESOURCE_EXPAND_CLASS;\n        }\n\n        var iconDiv = createElement('div');\n        addClass([iconDiv], [RESOURCE_TREE_ICON_CLASS, iconClass]);\n        this.setMargin(iconDiv, left);\n        ntd.appendChild(iconDiv);\n\n        if (this.resourceCollection.length > 1) {\n          EventHandler.add(iconDiv, 'click', this.onTreeIconClick, this);\n        }\n      }\n\n      this.parent.activeView.setResourceHeaderContent(ntd, resData[parseInt(i.toString(), 10)], RESOURCE_TEXT_CLASS);\n      ntd.setAttribute('data-group-index', resData[parseInt(i.toString(), 10)].groupIndex.toString());\n      ntd.setAttribute('aria-label', resData[parseInt(i.toString(), 10)].resourceData[resData[parseInt(i.toString(), 10)].resource.textField] + ' resource');\n\n      if (!this.parent.activeViewOptions.resourceHeaderTemplate) {\n        this.setMargin(ntd.querySelector('.' + RESOURCE_TEXT_CLASS), left);\n      }\n\n      var classCollection = [RESOURCE_CELLS_CLASS, resData[parseInt(i.toString(), 10)].resourceData.ClassName];\n      addClass([ntd], classCollection);\n      var args = {\n        elementType: 'resourceHeader',\n        element: ntd,\n        groupIndex: resData[parseInt(i.toString(), 10)].groupIndex\n      };\n      this.parent.trigger(renderCell, args);\n      var ntr = tr.cloneNode();\n      ntr.appendChild(ntd);\n      resRows.push(ntr);\n    }\n\n    return resRows;\n  };\n\n  ResourceBase.prototype.setMargin = function (element, value) {\n    if (!this.parent.enableRtl) {\n      element.style.marginLeft = value;\n    } else {\n      element.style.marginRight = value;\n    }\n  };\n\n  ResourceBase.prototype.countCalculation = function (parentCollection, wholeCollection) {\n    var collection;\n\n    for (var y = 0; y < parentCollection.length; y++) {\n      var data = parentCollection[parentCollection.length - (y + 1)].dataSource;\n\n      for (var x = 0; x < data.length; x++) {\n        var totalCount = 0;\n\n        if (this.parent.activeViewOptions.group.byGroupID) {\n          var query = new Query().where(wholeCollection[wholeCollection.length - 1].groupIDField, 'equal', data[parseInt(x.toString(), 10)][parentCollection[parentCollection.length - (y + 1)].idField]);\n          collection = new DataManager(wholeCollection[wholeCollection.length - 1].dataSource).executeLocal(query);\n        } else {\n          collection = wholeCollection[wholeCollection.length - 1].dataSource;\n        }\n\n        for (var z = 0; z < collection.length; z++) {\n          totalCount = totalCount + parseInt(collection[parseInt(z.toString(), 10)].Count, 10);\n        }\n\n        totalCount = totalCount + parseInt(data[parseInt(x.toString(), 10)].Count, 10);\n        extend(data[parseInt(x.toString(), 10)], {\n          Count: totalCount\n        });\n      }\n\n      wholeCollection = wholeCollection.slice(0, -1);\n    }\n  };\n\n  ResourceBase.prototype.onTreeIconClick = function (e) {\n    var _this = this;\n\n    if (this.parent.eventTooltip) {\n      this.parent.eventTooltip.close();\n    }\n\n    var target = e.target;\n    var hide;\n    var trElement = closest(target, '.' + RESOURCE_PARENT_CLASS).parentElement;\n    var index = parseInt(trElement.children[0].getAttribute('data-group-index'), 10);\n    var args = {\n      cancel: false,\n      event: e,\n      groupIndex: index,\n      requestType: !target.classList.contains(RESOURCE_COLLAPSE_CLASS) ? 'resourceExpand' : 'resourceCollapse'\n    };\n    this.parent.trigger(actionBegin, args, function (actionArgs) {\n      if (!actionArgs.cancel) {\n        if (target.classList.contains(RESOURCE_COLLAPSE_CLASS)) {\n          classList(target, [RESOURCE_EXPAND_CLASS], [RESOURCE_COLLAPSE_CLASS]);\n          hide = true;\n        } else {\n          classList(target, [RESOURCE_COLLAPSE_CLASS], [RESOURCE_EXPAND_CLASS]);\n          hide = false;\n        }\n\n        var eventElements = [].slice.call(_this.parent.element.querySelectorAll('.' + APPOINTMENT_CLASS + ',.' + MORE_INDICATOR_CLASS));\n\n        for (var _i = 0, eventElements_1 = eventElements; _i < eventElements_1.length; _i++) {\n          var element = eventElements_1[_i];\n          remove(element);\n        }\n\n        if (_this.parent.virtualScrollModule) {\n          _this.updateVirtualContent(index, hide, e, target);\n        } else {\n          _this.updateContent(index, hide);\n        }\n\n        var data = {\n          cssProperties: _this.parent.getCssProperties(),\n          module: 'scroll'\n        };\n\n        _this.parent.notify(scrollUiUpdate, data);\n\n        args = {\n          cancel: false,\n          event: e,\n          groupIndex: index,\n          requestType: target.classList.contains(RESOURCE_COLLAPSE_CLASS) ? 'resourceExpanded' : 'resourceCollapsed'\n        };\n\n        _this.parent.refreshEvents(false);\n\n        _this.parent.trigger(actionComplete, args);\n      }\n    });\n  };\n\n  ResourceBase.prototype.updateContent = function (index, hide) {\n    var rowCollection = [];\n    var workCellCollection = [];\n    var headerRowCollection = [];\n    var pNode;\n    var clickedRes = this.lastResourceLevel[parseInt(index.toString(), 10)].resourceData;\n    var resRows = [].slice.call(this.parent.element.querySelectorAll('.' + RESOURCE_COLUMN_WRAP_CLASS + ' ' + 'tr'));\n    var contentRows = [].slice.call(this.parent.element.querySelectorAll('.' + CONTENT_WRAP_CLASS + ' ' + 'tbody tr'));\n    var eventRows = [].slice.call(this.parent.element.querySelectorAll('.' + CONTENT_WRAP_CLASS + ' .' + APPOINTMENT_CONTAINER_CLASS));\n\n    for (var j = 0; j < clickedRes.Count; j++) {\n      rowCollection.push(resRows[index + j + 1]);\n      workCellCollection.push(contentRows[index + j + 1]);\n      headerRowCollection.push(eventRows[index + j + 1]);\n    }\n\n    var clonedCollection = this.lastResourceLevel;\n\n    for (var i = 0; i < rowCollection.length; i++) {\n      var expanded = true;\n      pNode = rowCollection[parseInt(i.toString(), 10)].children[0].classList.contains(RESOURCE_PARENT_CLASS);\n      clonedCollection[parseInt(index.toString(), 10)].resourceData[clonedCollection[parseInt(index.toString(), 10)].resource.expandedField] = !hide;\n\n      if (hide) {\n        if (pNode) {\n          var trElem = rowCollection[parseInt(i.toString(), 10)].querySelector('.' + RESOURCE_TREE_ICON_CLASS);\n\n          if (trElem) {\n            classList(trElem, [RESOURCE_EXPAND_CLASS], [RESOURCE_COLLAPSE_CLASS]);\n          }\n        }\n\n        if (!rowCollection[parseInt(i.toString(), 10)].classList.contains(HIDDEN_CLASS)) {\n          addClass([rowCollection[parseInt(i.toString(), 10)], workCellCollection[parseInt(i.toString(), 10)], headerRowCollection[parseInt(i.toString(), 10)]], HIDDEN_CLASS);\n        }\n      } else {\n        if (pNode) {\n          var rowIndex = rowCollection[parseInt(i.toString(), 10)].rowIndex;\n\n          if (!clonedCollection[parseInt(rowIndex.toString(), 10)].resourceData[clonedCollection[parseInt(rowIndex.toString(), 10)].resource.expandedField] && !isNullOrUndefined(clonedCollection[parseInt(rowIndex.toString(), 10)].resourceData[clonedCollection[parseInt(rowIndex.toString(), 10)].resource.expandedField])) {\n            rowCollection.splice(i + 1, parseInt(clonedCollection[parseInt(rowIndex.toString(), 10)].resourceData.Count, 10));\n            workCellCollection.splice(i + 1, parseInt(clonedCollection[parseInt(rowIndex.toString(), 10)].resourceData.Count, 10));\n            headerRowCollection.splice(i + 1, parseInt(clonedCollection[parseInt(rowIndex.toString(), 10)].resourceData.Count, 10));\n            expanded = false;\n          }\n\n          if (expanded) {\n            var trElem = rowCollection[parseInt(i.toString(), 10)].querySelector('.' + RESOURCE_TREE_ICON_CLASS);\n\n            if (trElem) {\n              classList(trElem, [RESOURCE_COLLAPSE_CLASS], [RESOURCE_EXPAND_CLASS]);\n            }\n          }\n        }\n\n        if (rowCollection[parseInt(i.toString(), 10)].classList.contains(HIDDEN_CLASS)) {\n          removeClass([rowCollection[parseInt(i.toString(), 10)], workCellCollection[parseInt(i.toString(), 10)], headerRowCollection[parseInt(i.toString(), 10)]], HIDDEN_CLASS);\n        }\n      }\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  ResourceBase.prototype.updateVirtualContent = function (index, expand, e, target) {\n    this.lastResourceLevel[parseInt(index.toString(), 10)].resourceData[this.lastResourceLevel[parseInt(index.toString(), 10)].resource.expandedField] = !expand;\n    this.setExpandedResources();\n    var resourceCount = this.parent.virtualScrollModule.getRenderedCount();\n    var startIndex = this.expandedResources.indexOf(this.renderedResources[0]);\n    this.renderedResources = this.expandedResources.slice(startIndex, startIndex + resourceCount);\n\n    if (this.renderedResources.length < resourceCount) {\n      var sIndex = this.expandedResources.length - resourceCount;\n      sIndex = sIndex > 0 ? sIndex : 0;\n      this.renderedResources = this.expandedResources.slice(sIndex, this.expandedResources.length);\n    }\n\n    var virtualTrack = this.parent.element.querySelector('.' + VIRTUAL_TRACK_CLASS);\n    this.parent.virtualScrollModule.updateVirtualTrackHeight(virtualTrack);\n    var resTable = this.parent.element.querySelector('.' + RESOURCE_COLUMN_WRAP_CLASS + ' ' + 'table');\n    var contentTable = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS + ' ' + 'table');\n    var eventTable = this.parent.element.querySelector('.' + EVENT_TABLE_CLASS);\n    this.parent.virtualScrollModule.updateContent(resTable, contentTable, eventTable, this.renderedResources);\n    var timeIndicator = this.parent.element.querySelector('.' + CURRENT_TIMELINE_CLASS);\n\n    if (!isNullOrUndefined(timeIndicator)) {\n      timeIndicator.style.height = this.parent.element.querySelector('.' + CONTENT_TABLE_CLASS).offsetHeight + 'px';\n    }\n  };\n\n  ResourceBase.prototype.renderResourceHeader = function () {\n    var resourceWrapper = createElement('div', {\n      className: RESOURCE_TOOLBAR_CONTAINER\n    });\n    resourceWrapper.innerHTML = '<div class=\"' + RESOURCE_HEADER_TOOLBAR + '\"><div class=\"' + RESOURCE_MENU + '\">' + '<div class=\"e-icons ' + RESOURCE_MENU_ICON + '\"></div></div><div class=\"' + RESOURCE_LEVEL_TITLE + '\"></div></div>';\n\n    if (this.parent.currentView === 'MonthAgenda') {\n      var target = this.parent.activeView.getPanel().querySelector('.' + CONTENT_WRAP_CLASS);\n      target.insertBefore(resourceWrapper, target.querySelector('.' + WRAPPER_CONTAINER_CLASS));\n    } else {\n      this.parent.element.insertBefore(resourceWrapper, this.parent.element.querySelector('.' + TABLE_CONTAINER_CLASS));\n    }\n\n    this.renderResourceHeaderText();\n    EventHandler.add(resourceWrapper.querySelector('.' + RESOURCE_MENU_ICON), 'click', this.menuClick, this);\n  };\n\n  ResourceBase.prototype.renderResourceTree = function () {\n    this.popupOverlay = createElement('div', {\n      className: RESOURCE_TREE_POPUP_OVERLAY\n    });\n    var treeWrapper = createElement('div', {\n      className: RESOURCE_TREE_POPUP + ' e-popup-close'\n    });\n\n    if (this.parent.currentView === 'MonthAgenda') {\n      var target = this.parent.activeView.getPanel().querySelector('.' + WRAPPER_CONTAINER_CLASS);\n      target.insertBefore(treeWrapper, target.children[0]);\n      target.appendChild(this.popupOverlay);\n    } else {\n      this.parent.element.querySelector('.' + TABLE_CONTAINER_CLASS).appendChild(treeWrapper);\n      this.parent.element.querySelector('.' + TABLE_CONTAINER_CLASS).appendChild(this.popupOverlay);\n    }\n\n    var resourceTree = createElement('div', {\n      className: RESOURCE_TREE\n    });\n    treeWrapper.appendChild(resourceTree);\n    this.treeViewObj = new TreeView({\n      cssClass: this.parent.cssClass,\n      enableRtl: this.parent.enableRtl,\n      enableHtmlSanitizer: this.parent.enableHtmlSanitizer,\n      fields: {\n        dataSource: [].slice.call(this.generateTreeData()),\n        id: 'resourceId',\n        text: 'resourceName',\n        child: 'resourceChild'\n      },\n      nodeTemplate: this.parent.resourceHeaderTemplate,\n      nodeClicked: this.resourceClick.bind(this),\n      created: this.resourceTreeCreated.bind(this)\n    });\n    this.treeViewObj.appendTo(resourceTree);\n    this.treeViewObj.expandAll();\n    this.treePopup = new Popup(treeWrapper, {\n      targetType: 'relative',\n      actionOnScroll: 'none',\n      content: this.treeViewObj.element,\n      relateTo: this.parent.element.querySelector('.' + TABLE_CONTAINER_CLASS),\n      enableRtl: this.parent.enableRtl,\n      hideAnimation: {\n        name: 'SlideLeftOut',\n        duration: 500\n      },\n      showAnimation: {\n        name: 'SlideLeftIn',\n        duration: 500\n      },\n      viewPortElement: this.parent.element.querySelector('.' + (this.parent.currentView === 'MonthAgenda' ? WRAPPER_CONTAINER_CLASS : TABLE_CONTAINER_CLASS))\n    });\n    this.parent.on(documentClick, this.documentClick, this);\n  };\n\n  ResourceBase.prototype.resourceTreeCreated = function () {\n    if (this.parent.activeViewOptions.resourceHeaderTemplate && this.parent.portals && this.treeViewObj.portals) {\n      this.parent.portals = this.parent.portals.concat(this.treeViewObj.portals);\n      this.parent.renderTemplates();\n    }\n  };\n\n  ResourceBase.prototype.generateTreeData = function (isTimeLine) {\n    var _this = this;\n\n    var treeCollection = [];\n    var resTreeColl = [];\n    var groupIndex = 0;\n\n    var _loop_1 = function (i, len) {\n      var treeHandler = function (treeLevel, index, levelId) {\n        var resource = _this.resourceCollection[parseInt(index.toString(), 10)];\n\n        var treeArgs;\n        var resObj;\n\n        if (!isTimeLine) {\n          treeArgs = {\n            resourceId: levelId,\n            resourceName: treeLevel.resourceData[resource.textField],\n            resource: treeLevel.resource,\n            resourceData: treeLevel.resourceData\n          };\n        } else {\n          resObj = {\n            type: 'resourceHeader',\n            resource: treeLevel.resource,\n            resourceData: treeLevel.resourceData,\n            groupIndex: groupIndex,\n            groupOrder: treeLevel.groupOrder\n          };\n          resTreeColl.push(resObj);\n          groupIndex++;\n        }\n\n        if (treeLevel.child.length > 0 && !isTimeLine) {\n          treeArgs.resourceChild = [];\n        }\n\n        var count = 1;\n\n        for (var _i = 0, _a = treeLevel.child; _i < _a.length; _i++) {\n          var tree = _a[_i];\n\n          if (!isTimeLine) {\n            treeArgs.resourceChild.push(treeHandler(tree, index + 1, levelId + '-' + count));\n          } else {\n            treeHandler(tree, index + 1, levelId + '-' + count);\n          }\n\n          count += 1;\n        }\n\n        if (isTimeLine) {\n          extend(resObj.resourceData, {\n            Count: count - 1\n          });\n        }\n\n        return treeArgs;\n      };\n\n      if (!isTimeLine) {\n        treeCollection.push(treeHandler(this_1.resourceTreeLevel[parseInt(i.toString(), 10)], 0, (i + 1).toString()));\n      } else {\n        treeHandler(this_1.resourceTreeLevel[parseInt(i.toString(), 10)], 0, (i + 1).toString());\n      }\n    };\n\n    var this_1 = this;\n\n    for (var i = 0, len = this.resourceTreeLevel.length; i < len; i++) {\n      _loop_1(i, len);\n    }\n\n    if (isTimeLine) {\n      this.lastResourceLevel = resTreeColl;\n      return resTreeColl;\n    } else {\n      return treeCollection;\n    }\n  };\n\n  ResourceBase.prototype.renderResourceHeaderText = function () {\n    var resource = this.lastResourceLevel[this.parent.uiStateValues.groupIndex];\n    var headerCollection = [];\n\n    var _loop_2 = function (i, len) {\n      var resourceLevel = this_2.resourceCollection[parseInt(i.toString(), 10)];\n      var resourceText = resourceLevel.dataSource.filter(function (resData) {\n        return resData[resourceLevel.idField] === resource.groupOrder[parseInt(i.toString(), 10)];\n      });\n      var resourceName = createElement('div', {\n        className: RESOURCE_NAME\n      });\n      this_2.parent.sanitize(resourceText[0][resourceLevel.textField], resourceName);\n      headerCollection.push(resourceName);\n      var levelIcon = createElement('div', {\n        className: 'e-icons e-icon-next'\n      });\n      headerCollection.push(levelIcon);\n    };\n\n    var this_2 = this;\n\n    for (var i = 0, len = resource.groupOrder.length; i < len; i++) {\n      _loop_2(i, len);\n    }\n\n    headerCollection.pop();\n    var target = this.parent.currentView === 'MonthAgenda' ? this.parent.activeView.getPanel() : this.parent.element;\n    var headerWrapper = target.querySelector('.' + RESOURCE_LEVEL_TITLE);\n    removeChildren(headerWrapper);\n\n    for (var _i = 0, headerCollection_1 = headerCollection; _i < headerCollection_1.length; _i++) {\n      var header = headerCollection_1[_i];\n      headerWrapper.appendChild(header);\n    }\n\n    if (this.lastResourceLevel.length === 1) {\n      addClass([this.parent.element.querySelector('.' + RESOURCE_MENU)], DISABLE_CLASS);\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  ResourceBase.prototype.menuClick = function (event) {\n    if (this.parent.element.querySelector('.' + RESOURCE_TREE_POPUP).classList.contains(POPUP_OPEN)) {\n      this.treePopup.hide();\n      removeClass([this.popupOverlay], ENABLE_CLASS);\n    } else {\n      var treeNodes = [].slice.call(this.treeViewObj.element.querySelectorAll('.e-list-item:not(.e-has-child)'));\n      removeClass(treeNodes, 'e-active');\n      addClass([treeNodes[this.parent.uiStateValues.groupIndex]], 'e-active');\n      this.treePopup.show();\n      addClass([this.popupOverlay], ENABLE_CLASS);\n    }\n  };\n\n  ResourceBase.prototype.selectResourceByIndex = function (groupIndex) {\n    if (this.lastResourceLevel && groupIndex > -1 && groupIndex < this.lastResourceLevel.length) {\n      this.triggerEvents(groupIndex);\n    }\n  };\n\n  ResourceBase.prototype.resourceClick = function (event) {\n    if (!event.node.classList.contains('e-has-child')) {\n      this.treePopup.hide();\n      removeClass([this.popupOverlay], ENABLE_CLASS);\n      var treeNodes = [].slice.call(this.treeViewObj.element.querySelectorAll('.e-list-item:not(.e-has-child)'));\n      var groupIndex = treeNodes.indexOf(event.node);\n      this.triggerEvents(groupIndex, event);\n      event.event.preventDefault();\n    }\n  };\n\n  ResourceBase.prototype.triggerEvents = function (groupIndex, event) {\n    var _this = this;\n\n    var args = {\n      cancel: false,\n      event: event ? event.event : null,\n      groupIndex: groupIndex,\n      requestType: 'resourceChange'\n    };\n    this.parent.trigger(actionBegin, args, function (actionArgs) {\n      if (!actionArgs.cancel) {\n        _this.parent.uiStateValues.groupIndex = actionArgs.groupIndex;\n\n        _this.parent.renderModule.render(_this.parent.currentView);\n\n        args = {\n          cancel: false,\n          event: event ? event.event : null,\n          groupIndex: _this.parent.uiStateValues.groupIndex,\n          requestType: 'resourceChanged'\n        };\n\n        _this.parent.trigger(actionComplete, args);\n      }\n    });\n  };\n\n  ResourceBase.prototype.documentClick = function (args) {\n    if (closest(args.event.target, '.' + RESOURCE_TREE_POPUP)) {\n      return;\n    }\n\n    var treeWrapper = this.parent.element.querySelector('.' + RESOURCE_TREE_POPUP);\n\n    if (treeWrapper && treeWrapper.classList.contains(POPUP_OPEN)) {\n      this.treePopup.hide();\n      removeClass([this.popupOverlay], ENABLE_CLASS);\n    }\n  };\n\n  ResourceBase.prototype.bindResourcesData = function (isSetModel) {\n    var _this = this;\n\n    this.parent.showSpinner();\n    var promises = [];\n\n    for (var _i = 0, _a = this.parent.resources; _i < _a.length; _i++) {\n      var resource = _a[_i];\n      var dataModule = new Data(this.parent, resource.dataSource, resource.query);\n      promises.push(dataModule.getData(dataModule.generateQuery()));\n    }\n\n    Promise.all(promises).then(function (e) {\n      return _this.dataManagerSuccess(e, isSetModel);\n    }).catch(function (e) {\n      return _this.parent.crudModule.dataManagerFailure(e);\n    });\n  };\n\n  ResourceBase.prototype.dataManagerSuccess = function (e, isSetModel) {\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.resourceCollection = [];\n\n    for (var i = 0, length_1 = e.length; i < length_1; i++) {\n      var resource = this.parent.resources[parseInt(i.toString(), 10)];\n      var resourceObj = this.getResourceModel(resource, e[parseInt(i.toString(), 10)].result);\n      this.parent.resourceCollection.push(resourceObj);\n    }\n\n    this.refreshLayout(isSetModel);\n  };\n\n  ResourceBase.prototype.getResourceModel = function (resource, resourceData) {\n    var resourceObj = {\n      field: resource.field,\n      title: resource.title,\n      name: resource.name,\n      allowMultiple: resource.allowMultiple,\n      dataSource: resourceData || resource.dataSource,\n      idField: resource.idField,\n      textField: resource.textField,\n      groupIDField: resource.groupIDField,\n      colorField: resource.colorField,\n      startHourField: resource.startHourField,\n      endHourField: resource.endHourField,\n      workDaysField: resource.workDaysField,\n      expandedField: resource.expandedField,\n      cssClassField: resource.cssClassField\n    };\n    return resourceObj;\n  };\n\n  ResourceBase.prototype.refreshLayout = function (isSetModel) {\n    if (isNullOrUndefined(this.parent.uiStateValues.groupIndex) || !this.parent.enablePersistence) {\n      this.parent.uiStateValues.groupIndex = 0;\n    }\n\n    this.parent.renderElements(isSetModel);\n  };\n\n  ResourceBase.prototype.setResourceCollection = function () {\n    var requiredResources = [];\n    this.resourceCollection = [];\n    this.colorIndex = null;\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      for (var _i = 0, _a = this.parent.activeViewOptions.group.resources; _i < _a.length; _i++) {\n        var resource = _a[_i];\n        var index_1 = findIndexInData(this.parent.resourceCollection, 'name', resource);\n\n        if (index_1 >= 0) {\n          requiredResources.push(this.parent.resourceCollection[parseInt(index_1.toString(), 10)]);\n        }\n      }\n    } else if (this.parent.resourceCollection.length > 0) {\n      requiredResources = this.parent.resourceCollection;\n    }\n\n    var index = 0;\n\n    for (var _b = 0, requiredResources_1 = requiredResources; _b < requiredResources_1.length; _b++) {\n      var resource = requiredResources_1[_b];\n      var resources = this.getResourceModel(resource);\n\n      if (resource.name === this.parent.eventSettings.resourceColorField) {\n        this.colorIndex = index;\n      }\n\n      index++;\n      this.resourceCollection.push(resources);\n    }\n\n    if (isNullOrUndefined(this.colorIndex)) {\n      this.colorIndex = this.resourceCollection.length - 1;\n    }\n  };\n\n  ResourceBase.prototype.generateResourceLevels = function (innerDates, isTimeLine) {\n    var _this = this;\n\n    var resources = this.resourceCollection;\n    var resTreeGroup = [];\n    var lastColumnDates = [];\n\n    var group = function (resources, index, prevResource, prevResourceData, prevOrder) {\n      var resTree = [];\n      var resource = resources[0];\n\n      if (resource) {\n        var data = void 0;\n\n        if (prevResourceData && _this.parent.activeViewOptions.group.byGroupID) {\n          var id_1 = prevResourceData[prevResource.idField];\n          data = resource.dataSource.filter(function (e) {\n            return e[resource.groupIDField] === id_1;\n          });\n        } else {\n          data = resource.dataSource;\n        }\n\n        for (var i = 0; i < data.length; i++) {\n          var groupOrder = [];\n\n          if (prevOrder && prevOrder.length > 0) {\n            groupOrder = groupOrder.concat(prevOrder);\n          }\n\n          groupOrder.push(data[parseInt(i.toString(), 10)][resource.idField]);\n          var items = group(resources.slice(1), index + 1, resource, data[parseInt(i.toString(), 10)], groupOrder); // Here validate child item empty top level resource only\n\n          if (index === 0 && items.length === 0 && _this.resourceCollection.length > 1) {\n            continue;\n          }\n\n          var dateCol = [];\n          var renderDates = _this.parent.activeView.renderDates;\n          var resWorkDays = void 0;\n\n          if (!_this.parent.activeViewOptions.group.byDate && index + 1 === _this.resourceCollection.length) {\n            var workDays = data[parseInt(i.toString(), 10)][resource.workDaysField];\n            var resStartHour = data[parseInt(i.toString(), 10)][resource.startHourField];\n            var resEndHour = data[parseInt(i.toString(), 10)][resource.endHourField];\n\n            if (workDays && workDays.length > 0) {\n              renderDates = _this.parent.activeView.getRenderDates(workDays);\n              resWorkDays = workDays;\n              dateCol = _this.parent.activeView.getDateSlots(renderDates, workDays);\n            } else {\n              resWorkDays = _this.parent.activeViewOptions.workDays;\n              dateCol = innerDates;\n            }\n\n            var dateSlots = _this.generateCustomHours(dateCol, resStartHour, resEndHour, groupOrder);\n\n            lastColumnDates = lastColumnDates.concat(dateSlots);\n          }\n\n          var resCssClass = data[parseInt(i.toString(), 10)][resource.cssClassField];\n          var slotData = {\n            type: 'resourceHeader',\n            className: ['e-resource-cells'],\n            resourceLevelIndex: index,\n            groupOrder: groupOrder,\n            resource: resource,\n            resourceData: data[parseInt(i.toString(), 10)],\n            colSpan: _this.parent.activeViewOptions.group.byDate ? 1 : dateCol.length,\n            renderDates: renderDates,\n            workDays: resWorkDays,\n            cssClass: resCssClass,\n            child: items\n          };\n          resTree.push(slotData);\n        }\n\n        if (!resTreeGroup[parseInt(index.toString(), 10)]) {\n          resTreeGroup[parseInt(index.toString(), 10)] = [];\n        }\n\n        if (resTree.length > 0) {\n          resTreeGroup[parseInt(index.toString(), 10)].push(resTree);\n        }\n\n        return resTree;\n      }\n\n      return [];\n    };\n\n    this.resourceTreeLevel = group(resources, 0);\n    return isTimeLine ? [] : this.generateHeaderLevels(resTreeGroup, lastColumnDates, innerDates);\n  };\n\n  ResourceBase.prototype.generateCustomHours = function (renderDates, startHour, endHour, groupOrder) {\n    var dateSlots = extend([], renderDates, null, true);\n\n    for (var _i = 0, dateSlots_1 = dateSlots; _i < dateSlots_1.length; _i++) {\n      var dateSlot = dateSlots_1[_i];\n\n      if (startHour) {\n        dateSlot.startHour = this.parent.getStartEndTime(startHour);\n      }\n\n      if (endHour) {\n        dateSlot.endHour = this.parent.getStartEndTime(endHour);\n      }\n\n      if (groupOrder) {\n        dateSlot.groupOrder = groupOrder;\n      }\n    }\n\n    return dateSlots;\n  };\n\n  ResourceBase.prototype.generateHeaderLevels = function (resTreeGroup, lastColumnDates, headerDates) {\n    var headerLevels = [];\n\n    for (var i = resTreeGroup.length - 1; i >= 0; i--) {\n      var temp = 0;\n\n      for (var _i = 0, _a = resTreeGroup[parseInt(i.toString(), 10)]; _i < _a.length; _i++) {\n        var currentLevelChilds = _a[_i];\n\n        for (var _b = 0, currentLevelChilds_1 = currentLevelChilds; _b < currentLevelChilds_1.length; _b++) {\n          var currentLevelChild = currentLevelChilds_1[_b];\n\n          if (resTreeGroup[i + 1] && resTreeGroup[i + 1].length > 0) {\n            var nextLevelChilds = resTreeGroup[parseInt((i + 1).toString(), 10)][parseInt(temp.toString(), 10)];\n\n            if (!nextLevelChilds) {\n              continue;\n            }\n\n            var colSpan = 0;\n\n            for (var _c = 0, nextLevelChilds_1 = nextLevelChilds; _c < nextLevelChilds_1.length; _c++) {\n              var nextLevelChild = nextLevelChilds_1[_c];\n\n              if (!this.parent.activeViewOptions.group.byGroupID || this.parent.activeViewOptions.group.byGroupID && nextLevelChild.resourceData[nextLevelChild.resource.groupIDField] === currentLevelChild.resourceData[currentLevelChild.resource.idField]) {\n                colSpan += nextLevelChild.colSpan;\n              }\n            }\n\n            currentLevelChild.colSpan = colSpan;\n          }\n\n          currentLevelChild.groupIndex = temp;\n          temp++;\n          headerLevels[currentLevelChild.resourceLevelIndex] = headerLevels[currentLevelChild.resourceLevelIndex] || [];\n          headerLevels[currentLevelChild.resourceLevelIndex].push(currentLevelChild);\n        }\n      }\n    }\n\n    this.lastResourceLevel = headerLevels.slice(-1)[0] || [];\n\n    if (!this.parent.activeViewOptions.group.byDate) {\n      var index = 0;\n\n      for (var _d = 0, _e = this.lastResourceLevel; _d < _e.length; _d++) {\n        var lastLevelResource = _e[_d];\n\n        for (var i = 0; i < lastLevelResource.colSpan; i++) {\n          lastColumnDates[parseInt(index.toString(), 10)].groupIndex = lastLevelResource.groupIndex;\n          index++;\n        }\n      }\n\n      headerLevels.push(lastColumnDates);\n      return headerLevels;\n    }\n\n    var dateHeaderLevels = [];\n    var levels = extend([], headerLevels, null, true);\n    var datesColumn = [];\n\n    if (this.parent.activeViewOptions.group.hideNonWorkingDays) {\n      var renderDates_1 = [];\n      var dateIndex = 0;\n\n      var _loop_3 = function (headerDate) {\n        this_3.resourceDateTree[parseInt(dateIndex.toString(), 10)] = [];\n        var currentDateLevels = [];\n\n        var _loop_4 = function (j) {\n          var workDays = this_3.lastResourceLevel[parseInt(j.toString(), 10)].resourceData[this_3.lastResourceLevel[parseInt(j.toString(), 10)].resource.workDaysField];\n\n          if (!workDays) {\n            workDays = this_3.parent.activeViewOptions.workDays;\n          }\n\n          if (workDays.indexOf(headerDate.date.getDay()) !== -1) {\n            var resTd_1 = extend({}, this_3.lastResourceLevel[parseInt(j.toString(), 10)], null, true);\n            resTd_1.date = headerDate.date;\n            this_3.lastResourceLevel[parseInt(j.toString(), 10)].workDays = workDays;\n            resTd_1.startHour = this_3.parent.getStartEndTime(resTd_1.resourceData[resTd_1.resource.startHourField]) || headerDate.startHour;\n            resTd_1.endHour = this_3.parent.getStartEndTime(resTd_1.resourceData[resTd_1.resource.endHourField]) || headerDate.endHour;\n            this_3.resourceDateTree[parseInt(dateIndex.toString(), 10)].push(resTd_1);\n\n            var _loop_5 = function (k) {\n              if (!currentDateLevels[parseInt(k.toString(), 10)]) {\n                currentDateLevels[parseInt(k.toString(), 10)] = [];\n              }\n\n              if (k === resTd_1.groupOrder.length - 1) {\n                if (!renderDates_1[parseInt(j.toString(), 10)]) {\n                  renderDates_1[parseInt(j.toString(), 10)] = [];\n                }\n\n                var filterDates = resTd_1.renderDates.filter(function (x) {\n                  return x.getDay() === headerDate.date.getDay();\n                });\n                renderDates_1[parseInt(j.toString(), 10)] = renderDates_1[parseInt(j.toString(), 10)].concat(filterDates);\n                currentDateLevels[parseInt(k.toString(), 10)].push(resTd_1);\n                return \"continue\";\n              }\n\n              var currentLevel = levels[parseInt(k.toString(), 10)];\n              var filteredResource = currentLevel.filter(function (data) {\n                return data.resourceData[data.resource.idField] === resTd_1.groupOrder[parseInt(k.toString(), 10)];\n              });\n\n              if (filteredResource && filteredResource.length > 0) {\n                var existedResource = currentDateLevels[parseInt(k.toString(), 10)].filter(function (data) {\n                  return data.resourceData[data.resource.idField] === resTd_1.groupOrder[parseInt(k.toString(), 10)];\n                });\n\n                if (existedResource && existedResource.length > 0) {\n                  existedResource[0].colSpan += 1;\n                } else {\n                  var filteredTd = extend({}, filteredResource[0], null, true);\n                  filteredTd.colSpan = 1;\n                  currentDateLevels[parseInt(k.toString(), 10)].push(filteredTd);\n                }\n              }\n            };\n\n            for (var k = 0; k < resTd_1.groupOrder.length; k++) {\n              _loop_5(k);\n            }\n          }\n        };\n\n        for (var j = 0; j < this_3.lastResourceLevel.length; j++) {\n          _loop_4(j);\n        }\n\n        if (currentDateLevels.length > 0) {\n          for (var l = 0; l < levels.length; l++) {\n            if (!dateHeaderLevels[parseInt(l.toString(), 10)]) {\n              dateHeaderLevels[parseInt(l.toString(), 10)] = [];\n            }\n\n            dateHeaderLevels[parseInt(l.toString(), 10)] = dateHeaderLevels[parseInt(l.toString(), 10)].concat(currentDateLevels[parseInt(l.toString(), 10)]);\n          }\n\n          headerDate.colSpan = currentDateLevels[currentDateLevels.length - 1].length;\n          datesColumn.push(headerDate);\n        }\n\n        dateIndex++;\n      };\n\n      var this_3 = this;\n\n      for (var _f = 0, headerDates_1 = headerDates; _f < headerDates_1.length; _f++) {\n        var headerDate = headerDates_1[_f];\n\n        _loop_3(headerDate);\n      }\n\n      this.resourceDateTree = this.resourceDateTree.filter(function (data) {\n        return data.length > 0;\n      });\n      this.lastResourceLevel.forEach(function (x, index) {\n        if (renderDates_1[parseInt(index.toString(), 10)]) {\n          x.renderDates = renderDates_1[parseInt(index.toString(), 10)].sort(function (a, b) {\n            return a.getTime() - b.getTime();\n          });\n        }\n      });\n      dateHeaderLevels.unshift(datesColumn);\n      return dateHeaderLevels;\n    }\n\n    var dateColSpan = 0;\n\n    for (var _g = 0, _h = levels[0]; _g < _h.length; _g++) {\n      var firstRowTd = _h[_g];\n      dateColSpan += firstRowTd.colSpan;\n    }\n\n    for (var _j = 0, headerDates_2 = headerDates; _j < headerDates_2.length; _j++) {\n      var headerDate = headerDates_2[_j];\n      headerDate.colSpan = dateColSpan;\n      datesColumn.push(headerDate);\n      var resGroup = extend([], levels, null, true);\n\n      for (var k = 0, length_2 = resGroup.length; k < length_2; k++) {\n        if (k === resGroup.length - 1) {\n          for (var _k = 0, _l = resGroup[parseInt(k.toString(), 10)]; _k < _l.length; _k++) {\n            var resTd = _l[_k];\n            resTd.date = headerDate.date;\n            resTd.workDays = headerDate.workDays;\n            resTd.startHour = this.parent.getStartEndTime(resTd.resourceData[resTd.resource.startHourField]) || headerDate.startHour;\n            resTd.endHour = this.parent.getStartEndTime(resTd.resourceData[resTd.resource.endHourField]) || headerDate.endHour;\n          }\n        }\n\n        if (!dateHeaderLevels[parseInt(k.toString(), 10)]) {\n          dateHeaderLevels[parseInt(k.toString(), 10)] = [];\n        }\n\n        dateHeaderLevels[parseInt(k.toString(), 10)] = dateHeaderLevels[parseInt(k.toString(), 10)].concat(resGroup[parseInt(k.toString(), 10)]);\n      }\n    }\n\n    dateHeaderLevels.unshift(datesColumn);\n    return dateHeaderLevels;\n  };\n\n  ResourceBase.prototype.setResourceValues = function (eventObj, groupIndex) {\n    var _this = this;\n\n    var setValues = function (index, field, value) {\n      if (_this.resourceCollection[parseInt(index.toString(), 10)].allowMultiple && _this.parent.activeViewOptions.group.allowGroupEdit) {\n        eventObj[\"\" + field] = [value];\n      } else {\n        eventObj[\"\" + field] = value;\n      }\n    };\n\n    if (groupIndex === void 0) {\n      groupIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : this.parent.activeCellsData.groupIndex;\n    }\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !isNullOrUndefined(groupIndex)) {\n      var groupOrder = this.lastResourceLevel[parseInt(groupIndex.toString(), 10)].groupOrder;\n\n      for (var index = 0; index < this.resourceCollection.length; index++) {\n        setValues(index, this.resourceCollection[parseInt(index.toString(), 10)].field, groupOrder[parseInt(index.toString(), 10)]);\n      }\n    } else if (this.parent.resourceCollection.length > 0) {\n      for (var index = 0; index < this.resourceCollection.length; index++) {\n        var data = this.resourceCollection[parseInt(index.toString(), 10)].dataSource[0];\n\n        if (data) {\n          setValues(index, this.resourceCollection[parseInt(index.toString(), 10)].field, data[this.resourceCollection[parseInt(index.toString(), 10)].idField]);\n        }\n      }\n    }\n  };\n\n  ResourceBase.prototype.getResourceColor = function (eventObj, groupOrder) {\n    var colorFieldIndex = !isNullOrUndefined(groupOrder) && this.colorIndex > groupOrder.length - 1 ? groupOrder.length - 1 : this.colorIndex;\n    var resource = this.resourceCollection[parseInt(colorFieldIndex.toString(), 10)];\n\n    if (isNullOrUndefined(groupOrder) && this.parent.activeViewOptions.group.allowGroupEdit && resource.allowMultiple) {\n      return undefined;\n    }\n\n    var id = isNullOrUndefined(groupOrder) ? eventObj[resource.field] : groupOrder[parseInt(colorFieldIndex.toString(), 10)];\n    var data = this.filterData(resource.dataSource, resource.idField, id);\n\n    if (data.length > 0) {\n      return data[0][resource.colorField];\n    }\n\n    return undefined;\n  };\n\n  ResourceBase.prototype.getCssClass = function (eventObj) {\n    var resource = this.resourceCollection.slice(-1)[0];\n\n    if (this.parent.activeViewOptions.group.allowGroupEdit && resource.allowMultiple) {\n      return undefined;\n    }\n\n    var data = this.filterData(resource.dataSource, resource.idField, eventObj[resource.field]);\n\n    if (data.length > 0) {\n      return data[0][resource.cssClassField];\n    }\n\n    return undefined;\n  };\n\n  ResourceBase.prototype.getResourceRenderDates = function () {\n    // eslint-disable-next-line prefer-spread\n    var resourceDates = [].concat.apply([], this.lastResourceLevel.map(function (e) {\n      return e.renderDates;\n    }));\n\n    var removeDuplicateDates = function (dateColl) {\n      return dateColl.filter(function (date, index, dates) {\n        return dates.map(function (dateObj) {\n          return dateObj.getTime();\n        }).indexOf(date.getTime()) === index;\n      });\n    };\n\n    var renderDates = removeDuplicateDates(resourceDates);\n    renderDates.sort(function (a, b) {\n      return a.getTime() - b.getTime();\n    });\n    return renderDates;\n  };\n\n  ResourceBase.prototype.filterData = function (dataSource, field, value) {\n    return dataSource.filter(function (data) {\n      return data[\"\" + field] === value;\n    });\n  };\n\n  ResourceBase.prototype.getResourceData = function (eventObj, index, groupEditIndex) {\n    if (this.parent.activeViewOptions.group.allowGroupEdit) {\n      var resourceObj = {};\n\n      for (var _i = 0, groupEditIndex_1 = groupEditIndex; _i < groupEditIndex_1.length; _i++) {\n        var groupIndex = groupEditIndex_1[_i];\n        var resourceLevel = this.lastResourceLevel[parseInt(groupIndex.toString(), 10)].groupOrder;\n\n        for (var level = 0, length_3 = resourceLevel.length; level < length_3; level++) {\n          var fieldName = this.resourceCollection[parseInt(level.toString(), 10)].field;\n\n          if (isNullOrUndefined(resourceObj[\"\" + fieldName])) {\n            resourceObj[\"\" + fieldName] = [];\n          }\n\n          resourceObj[\"\" + fieldName].push(resourceLevel[parseInt(level.toString(), 10)]);\n        }\n      }\n\n      eventObj = extend(eventObj, resourceObj);\n    } else {\n      for (var level = 0, length_4 = this.resourceCollection.length; level < length_4; level++) {\n        if (this.lastResourceLevel[parseInt(index.toString(), 10)]) {\n          eventObj[this.resourceCollection[parseInt(level.toString(), 10)].field] = this.lastResourceLevel[parseInt(index.toString(), 10)].groupOrder[parseInt(level.toString(), 10)];\n        }\n      }\n    }\n  };\n\n  ResourceBase.prototype.addResource = function (resources, name, index) {\n    var resourceCollection = resources instanceof Array ? resources : [resources];\n\n    var _loop_6 = function (resource) {\n      if (resource.name === name) {\n        resourceCollection.forEach(function (addObj, i) {\n          return new DataManager({\n            json: resource.dataSource\n          }).insert(addObj, null, null, index + i);\n        });\n        return \"break\";\n      }\n    };\n\n    for (var _i = 0, _a = this.parent.resourceCollection; _i < _a.length; _i++) {\n      var resource = _a[_i];\n\n      var state_1 = _loop_6(resource);\n\n      if (state_1 === \"break\") break;\n    }\n\n    this.refreshLayout(true);\n  };\n\n  ResourceBase.prototype.removeResource = function (resourceId, name) {\n    var resourceCollection = resourceId instanceof Array ? resourceId : [resourceId];\n\n    var _loop_7 = function (resource) {\n      if (resource.name === name) {\n        resourceCollection.forEach(function (removeObj) {\n          return new DataManager({\n            json: resource.dataSource\n          }).remove(resource.idField, removeObj);\n        });\n        return \"break\";\n      }\n    };\n\n    for (var _i = 0, _a = this.parent.resourceCollection; _i < _a.length; _i++) {\n      var resource = _a[_i];\n\n      var state_2 = _loop_7(resource);\n\n      if (state_2 === \"break\") break;\n    }\n\n    this.refreshLayout(true);\n  };\n\n  ResourceBase.prototype.getIndexFromResourceId = function (id, name, resourceData, event, parentField) {\n    name = name || this.parent.resourceCollection.slice(-1)[0].name;\n\n    if (isNullOrUndefined(resourceData)) {\n      resourceData = this.resourceCollection.filter(function (e) {\n        return e.name === name;\n      })[0];\n\n      if (isNullOrUndefined(resourceData)) {\n        return null;\n      }\n    }\n\n    var resource = resourceData.dataSource.filter(function (e) {\n      if (event && e[resourceData.idField] === id) {\n        if (e[resourceData.groupIDField] === event[\"\" + parentField]) {\n          return e[resourceData.idField] === id;\n        }\n\n        return null;\n      } else {\n        return e[resourceData.idField] === id;\n      }\n    })[0];\n    return this.lastResourceLevel.map(function (e) {\n      return e.resourceData;\n    }).indexOf(resource);\n  };\n\n  ResourceBase.prototype.resourceExpand = function (id, name, hide) {\n    var resource = this.parent.resourceCollection.filter(function (e) {\n      if (e.name === name) {\n        return e;\n      }\n\n      return null;\n    })[0];\n    var index = 0;\n    var resourceData = resource.dataSource.filter(function (e) {\n      return e[resource.idField] === id;\n    })[0];\n\n    if (!this.parent.activeViewOptions.group.byGroupID) {\n      index = this.getIndexFromResourceId(id, name, resource);\n    } else {\n      index = this.lastResourceLevel.map(function (e) {\n        return e.resourceData;\n      }).indexOf(resourceData);\n    }\n\n    var target = this.parent.element.querySelector('.' + RESOURCE_COLUMN_WRAP_CLASS + ' ' + (\"[data-group-index=\\\"\" + index + \"\\\"]\") + ' ' + '.' + RESOURCE_TREE_ICON_CLASS);\n\n    if (target) {\n      if (target.classList.contains(RESOURCE_EXPAND_CLASS) && !hide) {\n        target.click();\n      } else if (target.classList.contains(RESOURCE_COLLAPSE_CLASS) && hide) {\n        target.click();\n      }\n    }\n  };\n\n  ResourceBase.prototype.resourceScroll = function (id, name) {\n    if (this.parent.isAdaptive || ['Agenda', 'MonthAgenda'].indexOf(this.parent.currentView) > -1) {\n      return;\n    }\n\n    var levelName = name || this.parent.resourceCollection.slice(-1)[0].name;\n    var levelIndex = this.parent.resourceCollection.length - 1;\n    var resource = this.parent.resourceCollection.filter(function (e, index) {\n      if (e.name === levelName) {\n        levelIndex = index;\n        return e;\n      }\n\n      return null;\n    })[0];\n    var scrollElement = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n    var index = 0;\n\n    if (this.parent.activeView.isTimelineView()) {\n      if (!this.parent.activeViewOptions.group.byGroupID) {\n        index = this.getIndexFromResourceId(id, levelName, resource);\n      } else {\n        var resourceData = resource.dataSource.filter(function (e) {\n          return e[resource.idField] === id;\n        })[0];\n        index = this.lastResourceLevel.map(function (e) {\n          return e.resourceData;\n        }).indexOf(resourceData);\n      }\n\n      if (this.parent.virtualScrollModule) {\n        var virtual = this.parent.element.querySelector('.' + VIRTUAL_TRACK_CLASS);\n        var averageRowHeight = Math.round(virtual.offsetHeight / this.expandedResources.length);\n\n        if (this.parent.rowAutoHeight) {\n          scrollElement.scrollTop = 0;\n          this.parent.virtualScrollModule.virtualScrolling();\n        }\n\n        scrollElement.scrollTop = index * averageRowHeight - (this.parent.virtualScrollModule.bufferCount - 1) * averageRowHeight;\n        this.parent.virtualScrollModule.virtualScrolling();\n\n        if (this.parent.rowAutoHeight) {\n          var td = this.parent.element.querySelector(\".\" + WORK_CELLS_CLASS + \"[data-group-index=\\\"\" + index + \"\\\"]\");\n\n          if (td && !td.parentElement.classList.contains(HIDDEN_CLASS)) {\n            scrollElement.scrollTop = scrollElement.scrollTop < td.offsetTop ? td.offsetTop : scrollElement.scrollTop + td.offsetTop;\n          }\n        } else {\n          scrollElement.scrollTop = index * averageRowHeight;\n        }\n      } else {\n        var td = this.parent.element.querySelector(\".\" + WORK_CELLS_CLASS + \"[data-group-index=\\\"\" + index + \"\\\"]\");\n\n        if (td && !td.parentElement.classList.contains(HIDDEN_CLASS)) {\n          scrollElement.scrollTop = td.offsetTop;\n        }\n      }\n    } else {\n      if (!this.parent.activeViewOptions.group.byGroupID) {\n        index = this.getIndexFromResourceId(id, levelName, resource);\n      } else {\n        if (levelName === this.parent.resourceCollection.slice(-1)[0].name) {\n          index = this.lastResourceLevel.map(function (e) {\n            return e.resourceData[resource.idField];\n          }).indexOf(id);\n        } else {\n          index = resource.dataSource.map(function (e) {\n            return e[resource.idField];\n          }).indexOf(id);\n        }\n      }\n\n      var offsetTarget = this.parent.element.querySelector(\".\" + HEADER_ROW_CLASS + \":nth-child(\" + (levelIndex + 1) + \")\");\n      var offset = [].slice.call(offsetTarget.children).map(function (node) {\n        return node.offsetLeft;\n      });\n      scrollElement.scrollLeft = offset[parseInt(index.toString(), 10)];\n    }\n  };\n\n  ResourceBase.prototype.destroy = function () {\n    this.parent.off(documentClick, this.documentClick);\n\n    if (this.treeViewObj) {\n      if (this.treeViewObj.portals && this.treeViewObj.portals.length > 0) {\n        var treeViewTemplates = this.treeViewObj.portals.map(function (x) {\n          return x.propName;\n        });\n\n        if (treeViewTemplates.length > 0) {\n          this.parent.resetTemplates(treeViewTemplates);\n        }\n      }\n\n      this.treeViewObj.destroy();\n      this.treeViewObj = null;\n    }\n\n    if (this.treePopup) {\n      this.treePopup.destroy();\n      this.treePopup = null;\n      remove(this.parent.element.querySelector('.' + RESOURCE_TREE_POPUP));\n      remove(this.parent.element.querySelector('.' + RESOURCE_TREE_POPUP_OVERLAY));\n    }\n\n    var resToolBarEle = this.parent.element.querySelector('.' + RESOURCE_TOOLBAR_CONTAINER);\n\n    if (resToolBarEle) {\n      remove(resToolBarEle);\n    }\n  };\n\n  return ResourceBase;\n}();\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Represents the Schedule component that displays a list of events scheduled against specific date and timings,\n * thus helping us to plan and manage it properly.\n * ```html\n * <div id=\"schedule\"></div>\n * ```\n * ```typescript\n * <script>\n *   var scheduleObj = new Schedule();\n *   scheduleObj.appendTo(\"#schedule\");\n * </script>\n * ```\n */\n\n\nvar Schedule =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends(Schedule, _super);\n  /**\n   * Constructor for creating the Schedule widget\n   *\n   * @param {ScheduleModel} options Accepts the schedule model properties to initiate the rendering\n   * @param {string | HTMLElement} element Accepts the DOM element reference\n   */\n\n\n  function Schedule(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\n   * Core method that initializes the control rendering.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Schedule.prototype.render = function () {\n    var addClasses = [];\n    var removeClasses = [];\n    addClasses.push(ROOT);\n\n    if (this.enableRtl) {\n      addClasses.push(RTL);\n    } else {\n      removeClasses.push(RTL);\n    }\n\n    if (this.isAdaptive) {\n      addClasses.push(DEVICE_CLASS);\n    } else {\n      removeClasses.push(DEVICE_CLASS);\n    }\n\n    if (this.allowMultiDrag) {\n      addClasses.push(MULTI_DRAG);\n    } else {\n      removeClasses.push(MULTI_DRAG);\n    }\n\n    if (this.cssClass) {\n      var cssClass = this.cssClass.split(' ');\n\n      for (var _i = 0, cssClass_1 = cssClass; _i < cssClass_1.length; _i++) {\n        var cls_1 = cssClass_1[_i];\n        addClasses.push(cls_1);\n      }\n    }\n\n    classList(this.element, addClasses, removeClasses);\n    this.validateDate();\n    createSpinner({\n      target: this.element\n    });\n    this.scrollModule = new Scroll(this);\n    this.scrollModule.setWidth();\n    this.scrollModule.setHeight();\n    this.renderModule = new Render(this);\n    this.eventBase = new EventBase(this);\n    this.workCellAction = new WorkCellInteraction(this);\n\n    if (this.allowKeyboardInteraction) {\n      this.keyboardInteractionModule = new KeyboardInteraction(this);\n    }\n\n    this.inlineModule = new InlineEdit(this);\n    this.initializeDataModule();\n    this.renderTableContainer();\n    this.activeViewOptions = this.getActiveViewOptions();\n    this.initializeResources();\n    this.wireEvents();\n  };\n\n  Schedule.prototype.renderTableContainer = function () {\n    if (!this.element.querySelector('.' + TABLE_CONTAINER_CLASS)) {\n      this.element.appendChild(this.createElement('div', {\n        className: TABLE_CONTAINER_CLASS\n      }));\n    }\n  };\n  /**\n   * Method to render react templates\n   *\n   * @param {Function} callback - Specifies the callBack method\n   * @returns {void}\n   * @private\n   */\n\n\n  Schedule.prototype.renderTemplates = function (callback) {\n    if (this.isReact) {\n      this.renderReactTemplates(callback);\n    } else if (callback) {\n      callback();\n    }\n  };\n  /**\n   * Method to reset react templates\n   *\n   * @param {string[]} templates Accepts the template ID\n   * @returns {void}\n   * @private\n   */\n\n\n  Schedule.prototype.resetTemplates = function (templates) {\n    if (this.isAngular || this.isReact) {\n      this.clearTemplate(templates);\n    }\n  };\n  /**\n   * This method renders untrusted strings and scripts securely by sanitizing them first.\n   *\n   * @param {string} value - A string value representing the HTML string value to be sanitized.\n   * @param {HTMLElement} element - An HTML element to which the sanitized or unsanitized HTML string will be assigned.\n   * @returns {void}\n   * @private\n   */\n\n\n  Schedule.prototype.sanitize = function (value, element) {\n    if (this.enableHtmlSanitizer) {\n      element.innerText = SanitizeHtmlHelper.sanitize(value);\n    } else {\n      element.innerHTML = value;\n    }\n  };\n\n  Schedule.prototype.initializeResources = function (isSetModel) {\n    if (isSetModel === void 0) {\n      isSetModel = false;\n    }\n\n    if (this.resources.length > 0) {\n      this.resourceBase = new ResourceBase(this);\n      this.resourceBase.bindResourcesData(isSetModel);\n    } else {\n      this.resourceBase = null;\n      this.resourceCollection = [];\n      this.renderElements(isSetModel);\n    }\n  };\n  /**\n   * Method to render the layout elements\n   *\n   * @param {boolean} isLayoutOnly Accepts the boolean value to render layout or not\n   * @returns {void}\n   * @private\n   */\n\n\n  Schedule.prototype.renderElements = function (isLayoutOnly) {\n    if (isLayoutOnly) {\n      this.initializeView(this.currentView);\n      this.eventWindow.refresh();\n      return;\n    }\n\n    this.destroyHeaderModule();\n\n    if (this.showHeaderBar) {\n      this.headerModule = new HeaderRenderer(this);\n    }\n\n    this.renderTableContainer();\n\n    if (Browser.isDevice || Browser.isTouch) {\n      this.scheduleTouchModule = new ScheduleTouch(this);\n    }\n\n    this.initializeView(this.currentView);\n    this.destroyPopups();\n\n    if (!this.isPrinting) {\n      this.initializePopups();\n    }\n  };\n\n  Schedule.prototype.validateDate = function (selectedDate) {\n    if (selectedDate === void 0) {\n      selectedDate = this.selectedDate;\n    } // persist the selected date value\n\n\n    var date = selectedDate instanceof Date ? new Date(selectedDate.getTime()) : new Date(selectedDate);\n    var minDate = this.minDate instanceof Date ? new Date(this.minDate.getTime()) : new Date(this.minDate);\n    var maxDate = this.maxDate instanceof Date ? new Date(this.maxDate.getTime()) : new Date(this.maxDate);\n\n    if (minDate <= maxDate) {\n      if (date < minDate) {\n        date = minDate;\n      }\n\n      if (date > maxDate) {\n        date = maxDate;\n      }\n\n      this.setProperties({\n        selectedDate: new Date('' + date),\n        minDate: new Date('' + minDate),\n        maxDate: new Date('' + maxDate)\n      }, true);\n\n      if (this.eventWindow) {\n        this.eventWindow.updateMinMaxDateToEditor();\n      }\n    } else {\n      throw Error('minDate should be equal or less than maxDate');\n    }\n  };\n\n  Schedule.prototype.getViewIndex = function (viewName) {\n    for (var item = 0; item < this.viewCollections.length; item++) {\n      var checkIndex = this.viewCollections[parseInt(item.toString(), 10)].option;\n\n      if (checkIndex === viewName) {\n        return item;\n      }\n    }\n\n    return -1;\n  };\n\n  Schedule.prototype.setViewOptions = function (isModuleLoad) {\n    if (isModuleLoad === void 0) {\n      isModuleLoad = false;\n    }\n\n    this.viewOptions = {};\n    this.viewCollections = [];\n    var viewName;\n    var selectedView;\n    var prevIndex = this.viewIndex;\n    var count = 0;\n    this.viewIndex = -1;\n\n    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n      var view = _a[_i];\n      var isOptions = typeof view === 'string' ? false : true;\n\n      if (typeof view === 'string') {\n        viewName = view;\n\n        if (this.currentView === viewName) {\n          selectedView = viewName;\n          this.viewIndex = count;\n        }\n      } else {\n        viewName = view.option;\n\n        if (view.isSelected) {\n          selectedView = viewName;\n          this.viewIndex = count;\n        }\n      }\n\n      var obj = extend({\n        option: viewName\n      }, isOptions ? view : {});\n      var fieldViewName = viewName.charAt(0).toLowerCase() + viewName.slice(1);\n      obj.cellHeaderTemplateName = obj.cellHeaderTemplate ? obj.option : '';\n      obj.dateHeaderTemplateName = obj.dateHeaderTemplate ? obj.option : '';\n      obj.dateRangeTemplateName = obj.dateRangeTemplate ? obj.option : '';\n      obj.cellTemplateName = obj.cellTemplate ? obj.option : '';\n      obj.dayHeaderTemplateName = obj.dayHeaderTemplate ? obj.option : '';\n      obj.monthHeaderTemplateName = obj.monthHeaderTemplate ? obj.option : '';\n      obj.resourceHeaderTemplateName = obj.resourceHeaderTemplate ? obj.option : '';\n      obj.headerIndentTemplateName = obj.headerIndentTemplate ? obj.option : '';\n      obj.eventTemplateName = obj.eventTemplate ? obj.option : '';\n\n      if (!isNullOrUndefined(obj.firstDayOfWeek) && obj.firstDayOfWeek === 0) {\n        delete obj.firstDayOfWeek;\n      }\n\n      if (!isNullOrUndefined(obj.interval) && obj.interval === 1) {\n        delete obj.interval;\n      }\n\n      this.viewCollections.push(obj);\n\n      if (isNullOrUndefined(this.viewOptions[\"\" + fieldViewName])) {\n        this.viewOptions[\"\" + fieldViewName] = [obj];\n      } else {\n        this.viewOptions[\"\" + fieldViewName].push(obj);\n      }\n\n      count++;\n    }\n\n    if (!isModuleLoad && selectedView) {\n      this.setProperties({\n        currentView: selectedView\n      }, true);\n    }\n\n    if (this.viewIndex === -1) {\n      var currentIndex = this.getViewIndex(this.currentView);\n      this.viewIndex = typeof this.views[0] !== 'string' && !isNullOrUndefined(prevIndex) && prevIndex !== -1 ? prevIndex : currentIndex === -1 ? 0 : currentIndex;\n    }\n  };\n\n  Schedule.prototype.getActiveViewOptions = function () {\n    var timeScale = {\n      enable: this.timeScale.enable,\n      interval: this.timeScale.interval,\n      slotCount: this.timeScale.slotCount,\n      majorSlotTemplate: this.timeScale.majorSlotTemplate,\n      minorSlotTemplate: this.timeScale.minorSlotTemplate\n    };\n    var isYearView = this.viewCollections[this.viewIndex].option.indexOf('Year') > -1;\n    var group = {\n      byDate: isYearView ? false : this.group.byDate,\n      byGroupID: this.group.byGroupID,\n      allowGroupEdit: this.group.allowGroupEdit,\n      resources: this.group.resources,\n      headerTooltipTemplate: this.group.headerTooltipTemplate,\n      enableCompactView: this.group.enableCompactView,\n      hideNonWorkingDays: ['Day', 'Week', 'WorkWeek', 'Month'].indexOf(this.currentView) > -1 ? this.group.hideNonWorkingDays : false\n    };\n    var workDays = this.viewCollections[this.viewIndex].workDays ? [] : this.workDays;\n    var scheduleOptions = {\n      dateFormat: this.dateFormat,\n      endHour: this.endHour,\n      isSelected: false,\n      option: null,\n      readonly: this.readonly,\n      startHour: this.startHour,\n      allowVirtualScrolling: false,\n      cellHeaderTemplate: this.cellHeaderTemplate,\n      dayHeaderTemplate: this.dayHeaderTemplate,\n      monthHeaderTemplate: this.monthHeaderTemplate,\n      cellTemplate: this.cellTemplate,\n      eventTemplate: this.eventSettings.template,\n      dateHeaderTemplate: this.dateHeaderTemplate,\n      dateRangeTemplate: this.dateRangeTemplate,\n      resourceHeaderTemplate: this.resourceHeaderTemplate,\n      headerIndentTemplate: this.headerIndentTemplate,\n      firstMonthOfYear: this.firstMonthOfYear,\n      firstDayOfWeek: this.firstDayOfWeek,\n      workDays: workDays,\n      monthsCount: this.monthsCount,\n      showWeekend: this.showWeekend,\n      showWeekNumber: this.showWeekNumber,\n      displayName: null,\n      interval: 1,\n      timeScale: timeScale,\n      timeFormat: this.internalTimeFormat,\n      group: group,\n      headerRows: this.headerRows,\n      orientation: 'Horizontal',\n      numberOfWeeks: 0,\n      displayDate: null\n    };\n    var viewOptions = this.viewCollections[this.viewIndex];\n    var viewsData = extend(scheduleOptions, viewOptions, undefined, true);\n\n    if (this.firstDayOfWeek !== 0 && viewOptions.firstDayOfWeek && this.firstDayOfWeek !== viewOptions.firstDayOfWeek) {\n      viewsData.firstDayOfWeek = this.firstDayOfWeek;\n    }\n\n    if (viewsData.displayDate) {\n      viewsData.displayDate = viewsData.displayDate instanceof Date ? new Date(viewsData.displayDate.getTime()) : new Date(viewsData.displayDate);\n    }\n\n    return viewsData;\n  };\n\n  Schedule.prototype.initializeDataModule = function () {\n    this.eventFields = {\n      id: this.eventSettings.fields.id,\n      isBlock: this.eventSettings.fields.isBlock,\n      subject: this.eventSettings.fields.subject.name,\n      startTime: this.eventSettings.fields.startTime.name,\n      endTime: this.eventSettings.fields.endTime.name,\n      startTimezone: this.eventSettings.fields.startTimezone.name,\n      endTimezone: this.eventSettings.fields.endTimezone.name,\n      location: this.eventSettings.fields.location.name,\n      description: this.eventSettings.fields.description.name,\n      isAllDay: this.eventSettings.fields.isAllDay.name,\n      recurrenceID: this.eventSettings.fields.recurrenceID.name,\n      recurrenceRule: this.eventSettings.fields.recurrenceRule.name,\n      recurrenceException: this.eventSettings.fields.recurrenceException.name,\n      isReadonly: this.eventSettings.fields.isReadonly,\n      followingID: this.eventSettings.fields.followingID\n    };\n    this.setEditorTitles();\n    this.dataModule = new Data(this, this.eventSettings.dataSource, this.eventSettings.query);\n    this.crudModule = new Crud(this);\n  };\n\n  Schedule.prototype.setEditorTitles = function () {\n    this.editorTitles = {\n      subject: this.eventSettings.fields.subject.title || this.localeObj.getConstant('title'),\n      startTime: this.eventSettings.fields.startTime.title || this.localeObj.getConstant('start'),\n      endTime: this.eventSettings.fields.endTime.title || this.localeObj.getConstant('end'),\n      isAllDay: this.eventSettings.fields.isAllDay.title || this.localeObj.getConstant('allDay'),\n      startTimezone: this.eventSettings.fields.startTimezone.title || this.localeObj.getConstant('startTimezone'),\n      endTimezone: this.eventSettings.fields.endTimezone.title || this.localeObj.getConstant('endTimezone'),\n      location: this.eventSettings.fields.location.title || this.localeObj.getConstant('location'),\n      description: this.eventSettings.fields.description.title || this.localeObj.getConstant('description'),\n      recurrenceRule: this.eventSettings.fields.recurrenceRule.title || this.localeObj.getConstant('repeat')\n    };\n  };\n\n  Schedule.prototype.initializeView = function (viewName) {\n    this.showSpinner();\n    this.activeViewOptions = this.getActiveViewOptions();\n\n    if (this.resourceBase) {\n      this.resourceBase.setResourceCollection();\n    }\n\n    this.initializeTemplates();\n    this.renderModule.render(viewName);\n  };\n\n  Schedule.prototype.initializeTemplates = function () {\n    this.cellHeaderTemplateFn = this.templateParser(this.activeViewOptions.cellHeaderTemplate);\n    this.dayHeaderTemplateFn = this.templateParser(this.activeViewOptions.dayHeaderTemplate);\n    this.monthHeaderTemplateFn = this.templateParser(this.activeViewOptions.monthHeaderTemplate);\n    this.cellTemplateFn = this.templateParser(this.activeViewOptions.cellTemplate);\n    this.dateHeaderTemplateFn = this.templateParser(this.activeViewOptions.dateHeaderTemplate);\n    this.dateRangeTemplateFn = this.templateParser(this.activeViewOptions.dateRangeTemplate);\n    this.majorSlotTemplateFn = this.templateParser(this.activeViewOptions.timeScale.majorSlotTemplate);\n    this.minorSlotTemplateFn = this.templateParser(this.activeViewOptions.timeScale.minorSlotTemplate);\n    this.appointmentTemplateFn = this.templateParser(this.activeViewOptions.eventTemplate);\n    this.resourceHeaderTemplateFn = this.templateParser(this.activeViewOptions.resourceHeaderTemplate);\n    this.headerIndentTemplateFn = this.templateParser(this.activeViewOptions.headerIndentTemplate);\n    this.headerTooltipTemplateFn = this.templateParser(this.activeViewOptions.group.headerTooltipTemplate);\n    this.eventTooltipTemplateFn = this.templateParser(this.eventSettings.tooltipTemplate);\n    this.editorTemplateFn = this.templateParser(this.editorTemplate);\n    this.quickInfoTemplatesHeaderFn = this.templateParser(this.quickInfoTemplates.header);\n    this.quickInfoTemplatesContentFn = this.templateParser(this.quickInfoTemplates.content);\n    this.quickInfoTemplatesFooterFn = this.templateParser(this.quickInfoTemplates.footer);\n  };\n\n  Schedule.prototype.initializePopups = function () {\n    this.eventWindow = new EventWindow(this);\n    this.quickPopup = new QuickPopups(this);\n  };\n  /**\n   * Method to get day names\n   *\n   * @param {string} type Accepts the day name\n   * @returns {string[]} Returns the collection of day names\n   * @private\n   */\n\n\n  Schedule.prototype.getDayNames = function (type) {\n    var culShortNames = [];\n    var cldrObj;\n    var nameSpace = '';\n\n    if (this.locale === 'en' || this.locale === 'en-US') {\n      nameSpace = 'days.stand-alone.';\n      cldrObj = getValue(nameSpace + type, getDefaultDateObject(this.getCalendarMode()));\n    } else {\n      nameSpace = 'main.' + '' + this.locale + '.dates.calendars.' + this.getCalendarMode() + '.days.format.' + type;\n      cldrObj = getValue(nameSpace, cldrData);\n    }\n\n    for (var _i = 0, _a = Object.keys(cldrObj); _i < _a.length; _i++) {\n      var obj = _a[_i];\n      culShortNames.push(getValue(obj, cldrObj));\n    }\n\n    return culShortNames;\n  };\n\n  Schedule.prototype.setCldrTimeFormat = function () {\n    if (!isNullOrUndefined(this.timeFormat)) {\n      this.internalTimeFormat = this.timeFormat;\n      return;\n    }\n\n    if (this.locale === 'en' || this.locale === 'en-US') {\n      this.internalTimeFormat = getValue('timeFormats.short', getDefaultDateObject(this.getCalendarMode()));\n    } else {\n      this.internalTimeFormat = getValue('main.' + '' + this.locale + '.dates.calendars.' + this.getCalendarMode() + '.timeFormats.short', cldrData);\n    }\n  };\n  /**\n   * Method to get calendar mode\n   *\n   * @returns {string} Returns the calendar mode\n   * @private\n   */\n\n\n  Schedule.prototype.getCalendarMode = function () {\n    return this.calendarMode.toLowerCase();\n  };\n  /**\n   * Method to get time in string\n   *\n   * @param {Date} date Accepts the date object\n   * @returns {string} Returns the time in string\n   * @private\n   */\n\n\n  Schedule.prototype.getTimeString = function (date) {\n    var time = this.globalize.formatDate(date, {\n      format: this.activeViewOptions.timeFormat,\n      type: 'time',\n      calendar: this.getCalendarMode()\n    });\n    return time.toLocaleUpperCase();\n  };\n  /**\n   * Method to get  date object\n   *\n   * @param {Date} date Accepts the date object\n   * @returns {Date} Returns the date object\n   * @private\n   */\n\n\n  Schedule.prototype.getDateTime = function (date) {\n    return date instanceof Date ? new Date(date.getTime()) : new Date(date);\n  };\n\n  Schedule.prototype.setCalendarMode = function () {\n    if (this.calendarMode === 'Islamic') {\n      this.calendarUtil = new Islamic();\n    } else {\n      this.calendarUtil = new Gregorian();\n    }\n  };\n  /**\n   * Method to change the current view\n   *\n   * @param {View} view Accepts the view name\n   * @param {Event} event Accepts the event object\n   * @param {boolean} muteOnChange Accepts the value to enable or disable mute on change\n   * @param {number} index Accepts the index value\n   * @returns {void}\n   * @private\n   */\n\n\n  Schedule.prototype.changeView = function (view, event, muteOnChange, index) {\n    var _this = this;\n\n    if (isNullOrUndefined(index)) {\n      index = this.getViewIndex(view);\n    }\n\n    if (!muteOnChange && index === this.viewIndex && this.currentView === view || index < 0) {\n      return;\n    }\n\n    var previousView = this.activeViewOptions ? this.activeViewOptions.option : this.currentView;\n    var args = {\n      requestType: 'viewNavigate',\n      cancel: false,\n      event: event\n    };\n    this.trigger(actionBegin, args, function (actionArgs) {\n      if (!actionArgs.cancel) {\n        var navArgs = {\n          action: 'view',\n          cancel: false,\n          currentDate: _this.selectedDate,\n          previousView: previousView,\n          currentView: view,\n          viewIndex: index\n        };\n\n        _this.trigger(navigating, navArgs, function (navigationArgs) {\n          if (!navigationArgs.cancel) {\n            var isVertical = ['Day', 'Week', 'WorkWeek'].indexOf(view) > -1 && ['Day', 'Week', 'WorkWeek'].indexOf(previousView) < 0;\n            _this.uiStateValues.isInitial = isVertical || view.indexOf('Timeline') > -1 || view.indexOf('Year') > -1;\n            _this.uiStateValues.top = view.indexOf('Timeline') > -1 && previousView.indexOf('Timeline') < 0 ? 0 : _this.uiStateValues.top;\n            _this.viewIndex = navigationArgs.viewIndex;\n\n            _this.setProperties({\n              currentView: view\n            }, true);\n\n            if (_this.headerModule) {\n              _this.headerModule.updateActiveView();\n\n              _this.headerModule.setCalendarDate(_this.selectedDate);\n\n              _this.headerModule.setCalendarView();\n            }\n\n            _this.initializeView(_this.currentView);\n\n            _this.animateLayout();\n\n            args = {\n              requestType: 'viewNavigate',\n              cancel: false,\n              event: event\n            };\n\n            _this.trigger(actionComplete, args);\n          } else {\n            _this.currentView = previousView;\n          }\n        });\n      } else {\n        _this.currentView = previousView;\n      }\n    });\n  };\n  /**\n   * Method to change the view date\n   *\n   * @param {Date} selectedDate Accepts the selected date\n   * @param {Event} event Accepts the event object\n   * @returns {void}\n   * @private\n   */\n\n\n  Schedule.prototype.changeDate = function (selectedDate, event) {\n    var _this = this;\n\n    var args = {\n      requestType: 'dateNavigate',\n      cancel: false,\n      event: event\n    };\n    this.trigger(actionBegin, args, function (actionArgs) {\n      if (!actionArgs.cancel) {\n        var navArgs = {\n          action: 'date',\n          cancel: false,\n          previousDate: _this.selectedDate,\n          currentDate: selectedDate\n        };\n\n        _this.trigger(navigating, navArgs, function (navigationArgs) {\n          if (!navigationArgs.cancel) {\n            _this.uiStateValues.isInitial = _this.activeView.isTimelineView() && _this.currentView !== 'TimelineYear';\n\n            _this.validateDate(navigationArgs.currentDate);\n\n            if (_this.headerModule) {\n              _this.headerModule.setCalendarDate(navigationArgs.currentDate);\n            }\n\n            if (_this.currentView === 'MonthAgenda' && _this.monthAgendaModule) {\n              _this.monthAgendaModule.monthAgendaDate = new Date('' + _this.selectedDate);\n            }\n\n            _this.initializeView(_this.currentView);\n\n            _this.animateLayout();\n\n            args = {\n              requestType: 'dateNavigate',\n              cancel: false,\n              event: event\n            };\n\n            _this.trigger(actionComplete, args);\n          }\n        });\n      }\n    });\n  };\n  /**\n   * Method to validate min and max date\n   *\n   * @param {Date} date Accepts the date object\n   * @returns {boolean} Returns the boolean result to validate the min and max date\n   * @private\n   */\n\n\n  Schedule.prototype.isMinMaxDate = function (date) {\n    if (date === void 0) {\n      date = this.selectedDate;\n    }\n\n    return date.getTime() >= this.minDate.getTime() && date.getTime() <= this.maxDate.getTime();\n  };\n  /**\n   * Method to validate the selected date\n   *\n   * @param {Date} date Accepts the date object\n   * @returns {boolean} Returns the boolean value for given date is selected date or not\n   * @private\n   */\n\n\n  Schedule.prototype.isSelectedDate = function (date) {\n    return date.setHours(0, 0, 0, 0) === new Date('' + this.selectedDate).setHours(0, 0, 0, 0);\n  };\n  /**\n   * Method to get the current time\n   *\n   * @param {Date} date Accepts the date object\n   * @returns {Date} Returns the date object after performing the timezone conversion\n   * @private\n   */\n\n\n  Schedule.prototype.getCurrentTime = function (date) {\n    if (date === void 0) {\n      date = new Date();\n    }\n\n    if (this.timezone) {\n      return this.tzModule.convert(date, this.tzModule.getLocalTimezoneName(), this.timezone);\n    }\n\n    return date;\n  };\n  /** Method to get navigate view\n   *\n   * @returns {View} Return the navigate view name\n   * @private\n   */\n\n\n  Schedule.prototype.getNavigateView = function () {\n    if (this.activeView.isTimelineView()) {\n      return this.currentView === 'TimelineMonth' || this.currentView === 'TimelineYear' ? 'TimelineDay' : 'Agenda';\n    }\n\n    return 'Day';\n  };\n\n  Schedule.prototype.animateLayout = function () {\n    if (!this.activeView.element) {\n      return;\n    }\n\n    new Animation({\n      duration: 600,\n      name: 'FadeIn',\n      timingFunction: 'easeIn'\n    }).animate(this.activeView.element);\n  };\n  /**\n   * To provide the array of modules needed for control rendering\n   *\n   * @returns {ModuleDeclaration[]} Returns the declared modules\n   * @private\n   */\n\n\n  Schedule.prototype.requiredModules = function () {\n    var modules = [];\n    this.setViewOptions(true);\n\n    for (var _i = 0, _a = Object.keys(this.viewOptions); _i < _a.length; _i++) {\n      var view = _a[_i];\n      view = view === 'timelineDay' || view === 'timelineWeek' || view === 'timelineWorkWeek' ? 'timelineViews' : view;\n      modules.push({\n        member: view,\n        args: [this]\n      });\n    }\n\n    if (this.allowDragAndDrop) {\n      modules.push({\n        member: 'dragAndDrop',\n        args: [this]\n      });\n    }\n\n    if (this.allowResizing) {\n      modules.push({\n        member: 'resize',\n        args: [this]\n      });\n    }\n\n    modules.push({\n      member: 'excelExport',\n      args: [this]\n    });\n    modules.push({\n      member: 'iCalendarExport',\n      args: [this]\n    });\n    modules.push({\n      member: 'iCalendarImport',\n      args: [this]\n    });\n    modules.push({\n      member: 'print',\n      args: [this]\n    });\n    return modules;\n  };\n  /**\n   * Initializes the values of private members.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Schedule.prototype.preRender = function () {\n    this.isAdaptive = Browser.isDevice || isIPadDevice();\n    this.globalize = new Internationalization(this.locale);\n    this.tzModule = new Timezone();\n\n    if (this && isNullOrUndefined(this.uiStateValues) || !this.enablePersistence) {\n      this.uiStateValues = {\n        expand: false,\n        isInitial: true,\n        left: 0,\n        top: 0,\n        isGroupAdaptive: false,\n        isIgnoreOccurrence: false,\n        groupIndex: 0,\n        action: false,\n        isBlock: false,\n        isCustomMonth: true,\n        isPreventTimezone: false\n      };\n    }\n\n    this.currentTimezoneDate = this.getCurrentTime();\n    this.activeCellsData = {\n      startTime: new Date(this.currentTimezoneDate),\n      endTime: new Date(this.currentTimezoneDate),\n      isAllDay: false\n    };\n    this.activeEventData = {\n      event: undefined,\n      element: undefined\n    };\n    this.getDefaultLocale();\n    this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);\n    this.setCldrTimeFormat();\n    this.setCalendarMode();\n    this.eventsData = [];\n    this.eventsProcessed = [];\n    this.blockData = [];\n    this.blockProcessed = [];\n    this.resourceCollection = [];\n    this.currentAction = null;\n    this.selectedElements = [];\n    this.setViewOptions();\n  };\n\n  Schedule.prototype.getDefaultLocale = function () {\n    this.defaultLocale = {\n      day: 'Day',\n      week: 'Week',\n      workWeek: 'Work Week',\n      month: 'Month',\n      year: 'Year',\n      agenda: 'Agenda',\n      weekAgenda: 'Week Agenda',\n      workWeekAgenda: 'Work Week Agenda',\n      monthAgenda: 'Month Agenda',\n      today: 'Today',\n      noEvents: 'No events',\n      emptyContainer: 'There are no events scheduled on this day.',\n      allDay: 'All day',\n      start: 'Start',\n      end: 'End',\n      more: 'more',\n      close: 'Close',\n      cancel: 'Cancel',\n      noTitle: '(No Title)',\n      delete: 'Delete',\n      deleteEvent: 'Delete Event',\n      deleteMultipleEvent: 'Delete Multiple Events',\n      selectedItems: 'Items selected',\n      deleteSeries: 'Entire Series',\n      edit: 'Edit',\n      editSeries: 'Entire Series',\n      editEvent: 'Edit Event',\n      createEvent: 'Create',\n      subject: 'Subject',\n      addTitle: 'Add title',\n      moreDetails: 'More Details',\n      save: 'Save',\n      editContent: 'How would you like to change the appointment in the series?',\n      deleteContent: 'Are you sure you want to delete this event?',\n      deleteMultipleContent: 'Are you sure you want to delete the selected events?',\n      newEvent: 'New Event',\n      title: 'Title',\n      location: 'Location',\n      description: 'Description',\n      timezone: 'Timezone',\n      startTimezone: 'Start Timezone',\n      endTimezone: 'End Timezone',\n      repeat: 'Repeat',\n      saveButton: 'Save',\n      cancelButton: 'Cancel',\n      deleteButton: 'Delete',\n      recurrence: 'Recurrence',\n      wrongPattern: 'The recurrence pattern is not valid.',\n      seriesChangeAlert: 'Do you want to cancel the changes made to specific ' + 'instances of this series and match it to the whole series again?',\n      createError: 'The duration of the event must be shorter than how frequently it occurs. ' + 'Shorten the duration, or change the recurrence pattern in the recurrence event editor.',\n      sameDayAlert: 'Two occurrences of the same event cannot occur on the same day.',\n      occurenceAlert: 'Cannot reschedule an occurrence of the recurring appointment if it skips over ' + 'a later occurrence of the same appointment.',\n      editRecurrence: 'Edit Recurrence',\n      repeats: 'Repeats',\n      alert: 'Alert',\n      startEndError: 'The selected end date occurs before the start date.',\n      invalidDateError: 'The entered date value is invalid.',\n      blockAlert: 'Events cannot be scheduled within the blocked time range.',\n      ok: 'Ok',\n      yes: 'Yes',\n      no: 'No',\n      occurrence: 'Occurrence',\n      series: 'Series',\n      previous: 'Previous',\n      next: 'Next',\n      timelineDay: 'Timeline Day',\n      timelineWeek: 'Timeline Week',\n      timelineWorkWeek: 'Timeline Work Week',\n      timelineMonth: 'Timeline Month',\n      timelineYear: 'Timeline Year',\n      editFollowingEvent: 'Following Events',\n      deleteTitle: 'Delete Event',\n      editTitle: 'Edit Event',\n      beginFrom: 'Begin From',\n      endAt: 'Ends At',\n      expandAllDaySection: 'Expand-all-day-section',\n      collapseAllDaySection: 'Collapse-all-day-section',\n      searchTimezone: 'Search Timezone',\n      noRecords: 'No records found'\n    };\n  };\n\n  Schedule.prototype.wireEvents = function () {\n    EventHandler.add(window, 'resize', this.onScheduleResize, this);\n    EventHandler.add(window, 'orientationchange', this.onScheduleResize, this);\n    EventHandler.add(document, Browser.touchStartEvent, this.onDocumentClick, this);\n  };\n  /**\n   * Method to remove selected class\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Schedule.prototype.removeSelectedClass = function () {\n    var selectedCells = this.getSelectedCells();\n\n    for (var _i = 0, selectedCells_1 = selectedCells; _i < selectedCells_1.length; _i++) {\n      var cell = selectedCells_1[_i];\n\n      if (this.currentView !== 'Year') {\n        cell.setAttribute('aria-selected', 'false');\n      }\n\n      cell.removeAttribute('tabindex');\n    }\n\n    removeClass(selectedCells, SELECTED_CELL_CLASS);\n\n    if (this.keyboardInteractionModule && this.keyboardInteractionModule.selectedCells.length > 0) {\n      this.keyboardInteractionModule.selectedCells = [];\n    }\n  };\n  /**\n   * Method to add selected class\n   *\n   * @param {HTMLTableCellElement[]} cells Accepts the collection of elements\n   * @param {HTMLTableCellElement} focusCell Accepts the focus element\n   * @param {boolean} isPreventScroll Accepts the boolean value to prevent scroll\n   * @returns {void}\n   * @private\n   */\n\n\n  Schedule.prototype.addSelectedClass = function (cells, focusCell, isPreventScroll) {\n    if (this.currentView !== 'Year') {\n      for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {\n        var cell = cells_1[_i];\n        cell.setAttribute('aria-selected', 'true');\n      }\n    }\n\n    addClass(cells, SELECTED_CELL_CLASS);\n\n    if (focusCell) {\n      focusCell.setAttribute('tabindex', '0');\n      focusCell.focus({\n        preventScroll: isPreventScroll || false\n      });\n    }\n  };\n  /**\n   * Method to select cell\n   *\n   * @param {HTMLElement | HTMLTableCellElement} element Accepts the select element\n   * @returns {void}\n   * @private\n   */\n\n\n  Schedule.prototype.selectCell = function (element) {\n    this.removeSelectedClass();\n    this.addSelectedClass([element], element);\n  };\n  /**\n   * Method to get all day row element\n   *\n   * @returns {Element} Returns the all day row element\n   * @private\n   */\n\n\n  Schedule.prototype.getAllDayRow = function () {\n    return this.element.querySelector('.' + ALLDAY_ROW_CLASS);\n  };\n  /**\n   * Method to get content table element\n   *\n   * @returns {HTMLElement} Returns the content table element\n   * @private\n   */\n\n\n  Schedule.prototype.getContentTable = function () {\n    return this.activeView.element.querySelector('.' + CONTENT_TABLE_CLASS + ' tbody');\n  };\n  /**\n   * Method to get all content table rows\n   *\n   * @returns {HTMLElement[]} Returns the content table rows\n   * @private\n   */\n\n\n  Schedule.prototype.getTableRows = function () {\n    return [].slice.call(this.element.querySelectorAll('.' + CONTENT_TABLE_CLASS + ' tbody tr:not(.' + HIDDEN_CLASS + ')'));\n  };\n  /**\n   * Method to get work cell elements\n   *\n   * @returns {Element[]} Returns the all work cell elements\n   * @private\n   */\n\n\n  Schedule.prototype.getWorkCellElements = function () {\n    return [].slice.call(this.element.querySelectorAll('.' + WORK_CELLS_CLASS));\n  };\n  /**\n   * Method to get the index from date collection\n   *\n   * @param {Date[]} collection Accepts the collections of date\n   * @param {Date} date Accepts the date object\n   * @returns {number} Returns the index compared date with date collections\n   * @private\n   */\n\n\n  Schedule.prototype.getIndexOfDate = function (collection, date) {\n    return collection.map(Number).indexOf(+date);\n  };\n  /**\n   * Method to find all day cell\n   *\n   * @param {Element} td Accepts the DOM Element\n   * @returns {boolean} Returns the boolean value\n   * @private\n   */\n\n\n  Schedule.prototype.isAllDayCell = function (td) {\n    if (['Month', 'TimelineMonth', 'TimelineYear', 'MonthAgenda'].indexOf(this.currentView) > -1 || td.classList.contains(ALLDAY_CELLS_CLASS) || td.classList.contains(HEADER_CELLS_CLASS) || !this.activeViewOptions.timeScale.enable) {\n      return true;\n    }\n\n    if (this.activeView.isTimelineView() && this.activeViewOptions.headerRows.length > 0 && this.activeViewOptions.headerRows.slice(-1)[0].option !== 'Hour') {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Method to get date from element\n   *\n   * @param {Element} td Accepts the DOM element\n   * @returns {Date} Returns the date object\n   * @private\n   */\n\n\n  Schedule.prototype.getDateFromElement = function (td) {\n    var dateString;\n\n    if (!isNullOrUndefined(td)) {\n      dateString = td.getAttribute('data-date');\n    }\n\n    if (!isNullOrUndefined(dateString)) {\n      var dateInMS = parseInt(dateString, 10);\n      var date = new Date(dateInMS);\n      return date;\n    }\n\n    return undefined;\n  };\n  /**\n   * Method to get target element from given selector\n   *\n   * @param {string} selector Accepts the element selector\n   * @param {number} left Accepts the pageX value\n   * @param {number} top Accepts the pageY value\n   * @returns {Element[]} Returns the collection of elements based on the given selector\n   * @private\n   */\n\n\n  Schedule.prototype.getTargetElement = function (selector, left, top) {\n    var element = document.elementFromPoint(left, top);\n    var targetElement;\n\n    if (element) {\n      targetElement = element.closest(selector);\n    }\n\n    return targetElement ? [targetElement] : null;\n  };\n  /**\n   * Method to process cell header template\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getCellHeaderTemplate = function () {\n    return this.cellHeaderTemplateFn;\n  };\n  /**\n   * Method to process cell header template in year view.\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getDayHeaderTemplate = function () {\n    return this.dayHeaderTemplateFn;\n  };\n  /**\n   * Method to process cell header template in year view.\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getMonthHeaderTemplate = function () {\n    return this.monthHeaderTemplateFn;\n  };\n  /**\n   * Method to process cell template\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getCellTemplate = function () {\n    return this.cellTemplateFn;\n  };\n  /**\n   * Method to process date header template\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getDateHeaderTemplate = function () {\n    return this.dateHeaderTemplateFn;\n  };\n  /**\n   * Method to process date range template\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getDateRangeTemplate = function () {\n    return this.dateRangeTemplateFn;\n  };\n  /**\n   * Method to process major slot template\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getMajorSlotTemplate = function () {\n    return this.majorSlotTemplateFn;\n  };\n  /**\n   * Method to process minor slot template\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getMinorSlotTemplate = function () {\n    return this.minorSlotTemplateFn;\n  };\n  /**\n   * Method to process appointment template\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getAppointmentTemplate = function () {\n    return this.appointmentTemplateFn;\n  };\n  /**\n   * Method to process appointment tooltip template\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getEventTooltipTemplate = function () {\n    return this.eventTooltipTemplateFn;\n  };\n  /**\n   * Method to process header tooltip template\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getHeaderTooltipTemplate = function () {\n    return this.headerTooltipTemplateFn;\n  };\n  /**\n   * Method to process editor template\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getEditorTemplate = function () {\n    return this.editorTemplateFn;\n  };\n  /**\n   * Method to process quick info header template\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getQuickInfoTemplatesHeader = function () {\n    return this.quickInfoTemplatesHeaderFn;\n  };\n  /**\n   * Method to process quick info content template\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getQuickInfoTemplatesContent = function () {\n    return this.quickInfoTemplatesContentFn;\n  };\n  /**\n   * Method to process quick info footer template\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getQuickInfoTemplatesFooter = function () {\n    return this.quickInfoTemplatesFooterFn;\n  };\n  /**\n   * Method to process resource header template\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getResourceHeaderTemplate = function () {\n    return this.resourceHeaderTemplateFn;\n  };\n  /**\n   * Method to process indent template\n   *\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.getHeaderIndentTemplate = function () {\n    return this.headerIndentTemplateFn;\n  };\n  /**\n   * Method to get dynamic CSS properties\n   *\n   * @returns {ScrollCss} Returns the CSS properties dynamically\n   * @private\n   */\n\n\n  Schedule.prototype.getCssProperties = function () {\n    var cssProps = {\n      border: this.enableRtl ? 'borderLeftWidth' : 'borderRightWidth',\n      padding: this.enableRtl ? 'paddingLeft' : 'paddingRight',\n      rtlBorder: this.enableRtl ? 'borderRightWidth' : 'borderLeftWidth',\n      rtlPadding: this.enableRtl ? 'paddingRight' : 'paddingLeft'\n    };\n    return cssProps;\n  };\n  /**\n   * Method to remove new event element in adaptive mode\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Schedule.prototype.removeNewEventElement = function () {\n    var eventClone = this.element.querySelector('.' + NEW_EVENT_CLASS);\n\n    if (!isNullOrUndefined(eventClone)) {\n      remove(eventClone);\n    }\n  };\n  /**\n   * Method to get start end time from string\n   *\n   * @param {string} startEndTime Accepts the start end time string value\n   * @returns {Date} Returns the date object\n   * @private\n   */\n\n\n  Schedule.prototype.getStartEndTime = function (startEndTime) {\n    if (!isNullOrUndefined(startEndTime) && startEndTime !== '') {\n      var startEndDate = resetTime(new Date(this.currentTimezoneDate) || this.getCurrentTime());\n      var timeString = startEndTime.split(':');\n\n      if (timeString.length === 2) {\n        startEndDate.setHours(parseInt(timeString[0], 10), parseInt(timeString[1], 10), 0);\n      }\n\n      return startEndDate;\n    }\n\n    return null;\n  };\n\n  Schedule.prototype.onDocumentClick = function (args) {\n    this.notify(documentClick, {\n      event: args\n    });\n  };\n\n  Schedule.prototype.onScheduleResize = function () {\n    if (isNullOrUndefined(this.activeView) || (this.isAdaptive || isMobile()) && document.activeElement && document.activeElement.classList.contains(SUBJECT_CLASS)) {\n      return;\n    }\n\n    if (this.activeViewOptions.timeScale.enable && this.activeView) {\n      this.activeView.highlightCurrentTime();\n    }\n\n    if (this.quickPopup) {\n      this.quickPopup.onClosePopup();\n    }\n\n    if (this.currentView === 'Month' || this.currentView !== 'Agenda' && this.currentView !== 'MonthAgenda' && !this.activeViewOptions.timeScale.enable || this.activeView.isTimelineView()) {\n      this.activeView.resetColWidth();\n      this.notify(scrollUiUpdate, {\n        cssProperties: this.getCssProperties(),\n        isPreventScrollUpdate: true\n      });\n      this.refreshEvents(false);\n    } else {\n      this.notify(contentReady, {});\n    }\n  };\n  /**\n   * Method to process the templates\n   *\n   * @param {string} template Accepts the template in string\n   * @returns {CallbackFunction} Returns the callback function\n   * @private\n   */\n\n\n  Schedule.prototype.templateParser = function (template) {\n    if (template) {\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        } else {\n          return compile(template);\n        }\n      } catch (error) {\n        return compile(template);\n      }\n    }\n\n    return undefined;\n  };\n  /**\n   * Retrieves the selected cells.\n   *\n   * @returns {Element[]} The elements of currently selected cells will be returned.\n   * @private\n   */\n\n\n  Schedule.prototype.getSelectedCells = function () {\n    return [].slice.call(this.element.querySelectorAll('.' + SELECTED_CELL_CLASS));\n  };\n  /**\n   * Method to generate the announcement string\n   *\n   * @param {Object} event Accepts the event object\n   * @param {string} subject Accepts the subject text\n   * @returns {string} Returns the announcement string\n   * @private\n   */\n\n\n  Schedule.prototype.getAnnouncementString = function (event, subject) {\n    var resourceName;\n\n    if (this.quickPopup && this.activeViewOptions.group.resources.length > 0) {\n      var constantText = '\"s event - ';\n      resourceName = this.quickPopup.getResourceText({\n        event: event\n      }, 'event') + constantText;\n    }\n\n    var recordSubject = subject || event[this.eventFields.subject] || this.eventSettings.fields.subject.default;\n    var skeleton = 'full';\n    var startDateText = this.globalize.formatDate(event[this.eventFields.startTime], {\n      type: 'dateTime',\n      skeleton: skeleton,\n      calendar: this.getCalendarMode()\n    });\n    var endDateText = this.globalize.formatDate(event[this.eventFields.endTime], {\n      type: 'dateTime',\n      skeleton: skeleton,\n      calendar: this.getCalendarMode()\n    });\n    var announcementString = recordSubject + ' ' + this.localeObj.getConstant('beginFrom') + ' ' + startDateText + ' ' + this.localeObj.getConstant('endAt') + ' ' + endDateText;\n\n    if (resourceName) {\n      announcementString = resourceName + ' ' + announcementString;\n    }\n\n    return announcementString;\n  };\n  /**\n   * Method to process the element boundary validation\n   *\n   * @param {number} pageY Accepts the pageY value\n   * @param {number} pageX Accepts the pageX value\n   * @returns {ResizeEdges} Returns the boundary validation object\n   * @private\n   */\n\n\n  Schedule.prototype.boundaryValidation = function (pageY, pageX) {\n    var autoScrollDistance = 30;\n    var scrollEdges = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false\n    };\n    var viewBoundaries = this.element.querySelector('.' + CONTENT_WRAP_CLASS).getBoundingClientRect();\n\n    if (pageY < viewBoundaries.top + autoScrollDistance + window.pageYOffset && pageY > viewBoundaries.top + window.pageYOffset) {\n      scrollEdges.top = true;\n    }\n\n    if (pageY > viewBoundaries.bottom - autoScrollDistance + window.pageYOffset && pageY < viewBoundaries.bottom + window.pageYOffset) {\n      scrollEdges.bottom = true;\n    }\n\n    if (pageX < viewBoundaries.left + autoScrollDistance + window.pageXOffset && pageX > viewBoundaries.left + window.pageXOffset) {\n      scrollEdges.left = true;\n    }\n\n    if (pageX > viewBoundaries.right - autoScrollDistance + window.pageXOffset && pageX < viewBoundaries.right + window.pageXOffset) {\n      scrollEdges.right = true;\n    }\n\n    return scrollEdges;\n  };\n  /**\n   * Method to get the week number.\n   *\n   * @param {Date[]} dates Accepts the date collections\n   * @returns {number} Returns the week number\n   * @private\n   */\n\n\n  Schedule.prototype.getWeekNumberContent = function (dates) {\n    var weekNumber;\n\n    if (this.weekRule === 'FirstDay') {\n      var weekNumberDate = getWeekLastDate(dates.slice(-1)[0], this.firstDayOfWeek);\n      weekNumber = this.globalize.formatNumber(getWeekNumber(weekNumberDate));\n    } else if (this.weekRule === 'FirstFourDayWeek') {\n      var weekFirstDate = getWeekFirstDate(dates.slice(-1)[0], this.firstDayOfWeek);\n      var weekLastDate = getWeekLastDate(dates.slice(-1)[0], this.firstDayOfWeek);\n      var weekMidDate = getWeekMiddleDate(weekFirstDate, weekLastDate);\n      weekNumber = this.globalize.formatNumber(getWeekNumber(weekMidDate));\n    } else if (this.weekRule === 'FirstFullWeek') {\n      var weekFirstDate = getWeekFirstDate(dates.slice(-1)[0], this.firstDayOfWeek);\n      weekNumber = this.globalize.formatNumber(getWeekNumber(weekFirstDate));\n    }\n\n    return weekNumber;\n  };\n  /**\n   * Method to render the header indent template.\n   *\n   * @param {TdData} data Accepts the td data\n   * @param {Element} td Accepts the td element\n   * @returns {void}\n   * @private\n   */\n\n\n  Schedule.prototype.renderHeaderIndentTemplate = function (data, td) {\n    if (this.activeViewOptions.headerIndentTemplate) {\n      var scheduleId = this.element.id + '_';\n      var viewName = this.activeViewOptions.headerIndentTemplateName;\n      var templateId = scheduleId + viewName + 'headerIndentTemplate';\n      var indentTemplate = [].slice.call(this.getHeaderIndentTemplate()(data, this, 'headerIndentTemplate', templateId, false));\n      append(indentTemplate, td);\n    }\n  };\n  /**\n   * Method to check for refreshing the targeted resource row events.\n   *\n   * @returns {boolean} Returns the boolean value\n   * @private\n   */\n\n\n  Schedule.prototype.isSpecificResourceEvents = function () {\n    return this.activeViewOptions.group.resources.length > 0 && !this.activeViewOptions.group.allowGroupEdit && !this.rowAutoHeight && !this.virtualScrollModule && this.activeViewOptions.group.byGroupID;\n  };\n\n  Schedule.prototype.unWireEvents = function () {\n    EventHandler.remove(window, 'resize', this.onScheduleResize);\n    EventHandler.remove(window, 'orientationchange', this.onScheduleResize);\n    EventHandler.remove(document, Browser.touchStartEvent, this.onDocumentClick);\n  };\n  /**\n   * Core method to return the component name.\n   *\n   * @returns {string} Returns the module name\n   * @private\n   */\n\n\n  Schedule.prototype.getModuleName = function () {\n    return 'schedule';\n  };\n  /**\n   * Returns the properties to be maintained in the persisted state.\n   *\n   * @returns {string} Returns the persistance data\n   * @private\n   */\n\n\n  Schedule.prototype.getPersistData = function () {\n    return this.addOnPersist(['currentView', 'selectedDate', 'scrollTop', 'scrollLeft']);\n  };\n  /**\n   * Called internally, if any of the property value changed.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Schedule.prototype.onPropertyChanged = function (newProp, oldProp) {\n    if (this.isReact && isNullOrUndefined(this.activeView)) {\n      return;\n    }\n\n    var state = {\n      isRefresh: false,\n      isResource: false,\n      isDate: false,\n      isView: false,\n      isLayout: false,\n      isDataManager: false\n    };\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'views':\n          this.setViewOptions();\n\n          if (this.headerModule) {\n            this.headerModule.updateItems();\n          }\n\n          state.isView = true;\n          break;\n\n        case 'currentView':\n          state.isView = true;\n          break;\n\n        case 'minDate':\n        case 'maxDate':\n        case 'selectedDate':\n          state.isDate = true;\n          break;\n\n        case 'dateFormat':\n          this.activeViewOptions = this.getActiveViewOptions();\n\n          if (this.headerModule) {\n            this.headerModule.updateDateRange();\n          }\n\n          break;\n\n        case 'showHeaderBar':\n          this.destroyHeaderModule();\n\n          if (newProp.showHeaderBar) {\n            this.headerModule = new HeaderRenderer(this);\n            this.headerModule.updateDateRange();\n          }\n\n          this.notify(scrollUiUpdate, {\n            cssProperties: this.getCssProperties()\n          });\n\n          if (this.activeView.isTimelineView()) {\n            this.refreshEvents(false);\n          }\n\n          break;\n\n        case 'workDays':\n          if (JSON.stringify(oldProp.workDays) !== JSON.stringify(newProp.workDays)) {\n            state.isLayout = true;\n          }\n\n          break;\n\n        case 'showWeekend':\n        case 'startHour':\n        case 'endHour':\n        case 'workHours':\n        case 'readonly':\n        case 'headerRows':\n        case 'showWeekNumber':\n        case 'rowAutoHeight':\n          state.isLayout = true;\n          break;\n\n        case 'locale':\n        case 'calendarMode':\n          this.globalize = new Internationalization(this.locale);\n          this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale);\n          this.setCldrTimeFormat();\n          this.setCalendarMode();\n          state.isRefresh = true;\n          break;\n\n        case 'firstDayOfWeek':\n          this.activeViewOptions.firstDayOfWeek = newProp.firstDayOfWeek;\n\n          if (this.eventWindow) {\n            this.eventWindow.refreshRecurrenceEditor();\n          }\n\n          state.isLayout = true;\n          break;\n\n        case 'showTimeIndicator':\n          if (this.activeViewOptions.timeScale.enable && this.activeView) {\n            this.activeView.highlightCurrentTime();\n          }\n\n          break;\n\n        case 'cellHeaderTemplate':\n          this.activeViewOptions.cellHeaderTemplate = newProp.cellHeaderTemplate;\n          this.cellHeaderTemplateFn = this.templateParser(this.activeViewOptions.cellHeaderTemplate);\n          state.isLayout = true;\n          break;\n\n        case 'cellTemplate':\n          this.activeViewOptions.cellTemplate = newProp.cellTemplate;\n          this.cellTemplateFn = this.templateParser(this.activeViewOptions.cellTemplate);\n          state.isLayout = true;\n          break;\n\n        case 'dateHeaderTemplate':\n          this.activeViewOptions.dateHeaderTemplate = newProp.dateHeaderTemplate;\n          this.dateHeaderTemplateFn = this.templateParser(this.activeViewOptions.dateHeaderTemplate);\n          state.isLayout = true;\n          break;\n\n        case 'dateRangeTemplate':\n          this.activeViewOptions.dateRangeTemplate = newProp.dateRangeTemplate;\n          this.dateRangeTemplateFn = this.templateParser(this.activeViewOptions.dateRangeTemplate);\n\n          if (this.headerModule) {\n            this.headerModule.updateDateRange();\n          }\n\n          break;\n\n        case 'dayHeaderTemplate':\n          this.activeViewOptions.dayHeaderTemplate = newProp.dayHeaderTemplate;\n          this.dayHeaderTemplateFn = this.templateParser(this.activeViewOptions.dayHeaderTemplate);\n          state.isLayout = true;\n          break;\n\n        case 'monthHeaderTemplate':\n          this.activeViewOptions.monthHeaderTemplate = newProp.monthHeaderTemplate;\n          this.monthHeaderTemplateFn = this.templateParser(this.activeViewOptions.monthHeaderTemplate);\n          state.isLayout = true;\n          break;\n\n        case 'resourceHeaderTemplate':\n          this.activeViewOptions.resourceHeaderTemplate = newProp.resourceHeaderTemplate;\n          this.resourceHeaderTemplateFn = this.templateParser(this.activeViewOptions.resourceHeaderTemplate);\n          state.isLayout = true;\n          break;\n\n        case 'timezone':\n          this.eventBase.timezonePropertyChange(oldProp.timezone);\n          this.headerModule.setCalendarTimezone();\n          break;\n\n        case 'enableRtl':\n          this.setRtlClass();\n          state.isRefresh = true;\n          break;\n\n        default:\n          this.extendedPropertyChange(prop, newProp, oldProp, state);\n          break;\n      }\n    }\n\n    this.propertyChangeAction(state);\n  };\n\n  Schedule.prototype.propertyChangeAction = function (state) {\n    if (state.isRefresh) {\n      this.refresh();\n    } else if (state.isResource) {\n      this.initializeResources(true);\n    } else if (state.isView) {\n      this.changeView(this.currentView, null, true);\n    } else if (state.isDate) {\n      this.changeDate(this.selectedDate);\n    } else if (state.isLayout) {\n      this.activeCellsData = null;\n      this.initializeView(this.currentView);\n    } else if (state.isDataManager && this.crudModule) {\n      if (this.dragAndDropModule) {\n        this.dragAndDropModule.actionObj.action = '';\n        removeClass([this.element], EVENT_ACTION_CLASS);\n      }\n\n      this.crudModule.refreshDataManager();\n    }\n  };\n\n  Schedule.prototype.allDayRowScrollUpdate = function () {\n    var dateHeader = this.element.querySelector('.' + DATE_HEADER_WRAP_CLASS);\n    var allDayRow = this.element.querySelector('.' + ALLDAY_ROW_CLASS);\n\n    if (this.height === 'auto' || !this.enableAllDayScroll) {\n      addClass([dateHeader], ALLDAY_APPOINTMENT_AUTO);\n\n      if (dateHeader.classList.contains(ALLDAY_APPOINTMENT_SCROLL)) {\n        removeClass([dateHeader], ALLDAY_APPOINTMENT_SCROLL);\n      }\n\n      if (this.uiStateValues.expand) {\n        var allDayCells = [].slice.call(this.element.querySelectorAll('.' + ALLDAY_CELLS_CLASS));\n        allDayCells[0].style.height = allDayRow.style.height ? allDayRow.style.height : allDayCells[1].style.height;\n      }\n    } else {\n      if (dateHeader.classList.contains(ALLDAY_APPOINTMENT_AUTO)) {\n        removeClass([dateHeader], ALLDAY_APPOINTMENT_AUTO);\n      }\n\n      this.eventBase.allDayExpandScroll(dateHeader);\n    }\n\n    if (!this.uiStateValues.expand) {\n      allDayRow.style.height = '';\n    }\n  };\n\n  Schedule.prototype.extendedPropertyChange = function (prop, newProp, oldProp, state) {\n    switch (prop) {\n      case 'width':\n      case 'height':\n      case 'enableAllDayScroll':\n        if (['Day', 'Week', 'WorkWeek'].indexOf(this.currentView) > -1) {\n          this.allDayRowScrollUpdate();\n        }\n\n        this.notify(uiUpdate, {\n          module: 'scroll',\n          properties: {\n            width: newProp.width,\n            height: newProp.height\n          }\n        });\n        break;\n\n      case 'cssClass':\n        if (oldProp.cssClass) {\n          removeClass([this.element], oldProp.cssClass.split(' '));\n        }\n\n        if (newProp.cssClass) {\n          addClass([this.element], newProp.cssClass.split(' '));\n        }\n\n        break;\n\n      case 'hideEmptyAgendaDays':\n      case 'agendaDaysCount':\n        this.activeViewOptions = this.getActiveViewOptions();\n        state.isView = true;\n        break;\n\n      case 'eventSettings':\n        this.onEventSettingsPropertyChanged(newProp.eventSettings, oldProp.eventSettings, state);\n        break;\n\n      case 'allowKeyboardInteraction':\n        if (this.keyboardInteractionModule) {\n          this.keyboardInteractionModule.destroy();\n          this.keyboardInteractionModule = null;\n        }\n\n        if (newProp.allowKeyboardInteraction) {\n          this.keyboardInteractionModule = new KeyboardInteraction(this);\n        }\n\n        break;\n\n      case 'timezoneDataSource':\n        if (this.eventWindow) {\n          this.eventWindow.refresh();\n        }\n\n        break;\n\n      case 'editorTemplate':\n        if (!isNullOrUndefined(this.editorTemplate)) {\n          this.editorTemplateFn = this.templateParser(this.editorTemplate);\n        }\n\n        if (this.eventWindow) {\n          this.eventWindow.setDialogContent();\n        }\n\n        break;\n\n      case 'quickInfoTemplates':\n        if (this.quickInfoTemplates.header) {\n          this.quickInfoTemplatesHeaderFn = this.templateParser(this.quickInfoTemplates.header);\n        }\n\n        if (this.quickInfoTemplates.content) {\n          this.quickInfoTemplatesContentFn = this.templateParser(this.quickInfoTemplates.content);\n        }\n\n        if (this.quickInfoTemplates.footer) {\n          this.quickInfoTemplatesFooterFn = this.templateParser(this.quickInfoTemplates.footer);\n        }\n\n        break;\n\n      case 'group':\n        this.onGroupSettingsPropertyChanged(newProp.group, oldProp.group, state);\n        break;\n\n      case 'resources':\n        state.isResource = true;\n        break;\n\n      case 'timeScale':\n        this.activeViewOptions.timeScale.interval = newProp.timeScale.interval || this.activeViewOptions.timeScale.interval;\n        this.activeViewOptions.timeScale.slotCount = newProp.timeScale.slotCount || this.activeViewOptions.timeScale.slotCount;\n\n        if (this.eventWindow) {\n          this.eventWindow.refreshDateTimePicker();\n        }\n\n        state.isLayout = true;\n        break;\n\n      case 'allowDragAndDrop':\n      case 'allowResizing':\n      case 'eventDragArea':\n        this.refreshEvents(false);\n        break;\n\n      case 'weekRule':\n        state.isLayout = true;\n        break;\n\n      case 'firstMonthOfYear':\n        this.activeViewOptions.firstMonthOfYear = newProp.firstMonthOfYear;\n        this.viewIndex = this.activeView.viewIndex;\n        state.isLayout = true;\n        break;\n\n      case 'monthsCount':\n        this.activeViewOptions.monthsCount = newProp.monthsCount;\n        this.viewIndex = this.activeView.viewIndex;\n        state.isLayout = true;\n        break;\n\n      case 'timeFormat':\n        this.internalTimeFormat = newProp.timeFormat || this.activeViewOptions.timeFormat;\n\n        if (this.eventWindow) {\n          this.eventWindow.refreshDateTimePicker();\n        }\n\n        state.isLayout = true;\n        break;\n\n      case 'enableAdaptiveUI':\n        if (this.showHeaderBar && this.headerModule) {\n          this.destroyHeaderModule();\n          this.headerModule = new HeaderRenderer(this);\n          this.headerModule.updateDateRange();\n        }\n\n        state.isLayout = true;\n        break;\n\n      case 'headerIndentTemplate':\n        this.activeViewOptions.headerIndentTemplate = newProp.headerIndentTemplate;\n        this.headerIndentTemplateFn = this.templateParser(this.activeViewOptions.headerIndentTemplate);\n        state.isLayout = true;\n        break;\n    }\n  };\n\n  Schedule.prototype.setRtlClass = function () {\n    if (this.enableRtl) {\n      addClass([this.element], 'e-rtl');\n    } else {\n      removeClass([this.element], 'e-rtl');\n    }\n  };\n\n  Schedule.prototype.onGroupSettingsPropertyChanged = function (newProp, oldProp, state) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      if (prop === 'headerTooltipTemplate') {\n        this.headerTooltipTemplateFn = this.templateParser(newProp.headerTooltipTemplate);\n      } else {\n        state.isLayout = true;\n\n        if (this.eventWindow) {\n          this.eventWindow.refresh();\n        }\n      }\n    }\n  };\n\n  Schedule.prototype.onEventSettingsPropertyChanged = function (newProp, oldProp, state) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'dataSource':\n        case 'query':\n        case 'fields':\n        case 'includeFiltersInQuery':\n          this.initializeDataModule();\n          state.isDataManager = true;\n          break;\n\n        case 'template':\n          this.activeViewOptions.eventTemplate = newProp.template;\n          this.appointmentTemplateFn = this.templateParser(this.activeViewOptions.eventTemplate);\n          state.isDataManager = true;\n          break;\n\n        case 'enableTooltip':\n          if (this.eventTooltip) {\n            this.eventTooltip.destroy();\n            this.eventTooltip = null;\n          }\n\n          if (newProp.enableTooltip) {\n            this.eventTooltip = new EventTooltip(this);\n          }\n\n          break;\n\n        case 'tooltipTemplate':\n          this.eventTooltipTemplateFn = this.templateParser(this.eventSettings.tooltipTemplate);\n          break;\n\n        case 'resourceColorField':\n          if (this.resourceBase) {\n            this.resourceBase.setResourceCollection();\n          }\n\n          state.isDataManager = true;\n          break;\n\n        case 'editFollowingEvents':\n          if (this.quickPopup) {\n            this.quickPopup.refreshQuickDialog();\n          }\n\n          break;\n\n        case 'allowAdding':\n        case 'allowEditing':\n        case 'allowDeleting':\n          if (this.showHeaderBar && this.headerModule) {\n            this.headerModule.updateAddIcon();\n          }\n\n          if (this.eventWindow) {\n            this.eventWindow.refresh();\n          }\n\n          break;\n\n        case 'spannedEventPlacement':\n        case 'minimumEventDuration':\n        case 'enableMaxHeight':\n        case 'enableIndicator':\n          this.refreshEvents(false);\n          break;\n\n        case 'ignoreWhitespace':\n          state.isLayout = true;\n          break;\n      }\n    }\n  };\n\n  Schedule.prototype.destroyHeaderModule = function () {\n    if (this.headerModule) {\n      this.headerModule.destroy();\n      this.headerModule = null;\n    }\n  };\n\n  Schedule.prototype.destroyPopups = function () {\n    if (this.quickPopup) {\n      this.quickPopup.destroy();\n      this.quickPopup = null;\n    }\n\n    if (this.eventWindow) {\n      this.eventWindow.destroy();\n      this.eventWindow = null;\n    }\n  };\n  /**\n   * Allows to show the spinner on schedule at the required scenarios.\n   *\n   * @function showSpinner\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.showSpinner = function () {\n    showSpinner(this.element);\n  };\n  /**\n   * When the spinner is shown manually using `showSpinner` method, it can be hidden using this `hideSpinner` method.\n   *\n   * @function hideSpinner\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.hideSpinner = function () {\n    hideSpinner(this.element);\n  };\n  /**\n   * Sets different working hours on the required working days by accepting the required start and end time as well as the date collection\n   *  as its parameters.\n   *\n   * @function setWorkHours\n   * @param {Date} dates Collection of dates on which the given start and end hour range needs to be applied.\n   * @param {string} start Defines the work start hour.\n   * @param {string} end Defines the work end hour.\n   * @param {number} groupIndex Defines the resource index from last level.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.setWorkHours = function (dates, start, end, groupIndex) {\n    var cells = [];\n    cells = this.getWorkHourCells(dates, start, end, groupIndex);\n    addClass(cells, WORK_HOURS_CLASS);\n  };\n  /**\n   * Removes or resets different working hours on the required working days by accepting the required start and end time as well as the\n   * date collection as its parameters.\n   * if no parameters has been passed to this function, it will remove all the work hours.\n   *\n   * @param {Date} dates Collection of dates on which the given start and end hour range need to be applied.\n   * @param {string} start Defines the work start hour.\n   * @param {string} end Defines the work end hour.\n   * @param {number} groupIndex Defines the resource index from last level.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.resetWorkHours = function (dates, start, end, groupIndex) {\n    if (dates === void 0) {\n      dates = this.activeView.renderDates;\n    }\n\n    if (dates && start && end) {\n      var cells = this.getWorkHourCells(dates, start, end, groupIndex);\n      removeClass(cells, WORK_HOURS_CLASS);\n    } else {\n      var workHourCells = [].slice.call(this.element.querySelectorAll('.' + WORK_HOURS_CLASS));\n      removeClass(workHourCells, WORK_HOURS_CLASS);\n    }\n  };\n\n  Schedule.prototype.getWorkHourCells = function (dates, start, end, groupIndex) {\n    if (['Agenda', 'MonthAgenda', 'Month', 'TimelineMonth'].indexOf(this.currentView) > -1) {\n      return [];\n    }\n\n    var startHour = this.getStartEndTime(start);\n    var endHour = this.getStartEndTime(end);\n    var tableEle = this.getContentTable();\n\n    if (isNullOrUndefined(startHour) || isNullOrUndefined(endHour) || !tableEle) {\n      return [];\n    }\n\n    startHour.setMilliseconds(0);\n    endHour.setMilliseconds(0);\n    var viewStartHour = this.activeView.getStartHour();\n\n    if (startHour < viewStartHour) {\n      startHour = viewStartHour;\n    }\n\n    var viewEndHour = this.activeView.getEndHour();\n\n    if (endHour > viewEndHour) {\n      endHour = viewEndHour;\n    }\n\n    var msMajorInterval = this.activeViewOptions.timeScale.interval * MS_PER_MINUTE;\n    var msInterval = msMajorInterval / this.activeViewOptions.timeScale.slotCount;\n    var startIndex = Math.round((startHour.getTime() - viewStartHour.getTime()) / msInterval);\n    var endIndex = Math.ceil((endHour.getTime() - viewStartHour.getTime()) / msInterval);\n    var tempStartIndex = startIndex;\n    var tempEndIndex = endIndex;\n    var cells = [];\n\n    for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {\n      var date = dates_1[_i];\n      date = this.getDateTime(date);\n      resetTime(date);\n      var renderDates = this.activeView.renderDates;\n\n      if (!isNullOrUndefined(groupIndex) && this.resourceBase && !this.activeView.isTimelineView()) {\n        renderDates = this.resourceBase.lastResourceLevel[parseInt(groupIndex.toString(), 10)].renderDates;\n      }\n\n      var colIndex = this.getIndexOfDate(renderDates, date);\n\n      if (colIndex >= 0) {\n        if (this.activeView.isTimelineView()) {\n          var slotsPerDay = Math.round((viewEndHour.getTime() - viewStartHour.getTime()) / msInterval);\n          startIndex = tempStartIndex + colIndex * slotsPerDay;\n          endIndex = tempEndIndex + colIndex * slotsPerDay;\n        }\n\n        for (var i = startIndex; i < endIndex; i++) {\n          if (this.activeView.isTimelineView()) {\n            var rowIndex = !isNullOrUndefined(groupIndex) ? groupIndex : 0;\n            cells.push(tableEle.rows[parseInt(rowIndex.toString(), 10)].cells[parseInt(i.toString(), 10)]);\n          } else {\n            if (!isNullOrUndefined(groupIndex)) {\n              var selector = '.' + WORK_CELLS_CLASS + '[data-group-index=\"' + groupIndex + '\"]';\n              var tds = [].slice.call(tableEle.rows[parseInt(i.toString(), 10)].querySelectorAll(selector));\n              cells.push(tds[parseInt(colIndex.toString(), 10)]);\n            } else {\n              cells.push(tableEle.rows[parseInt(i.toString(), 10)].cells[parseInt(colIndex.toString(), 10)]);\n            }\n          }\n        }\n      }\n    }\n\n    return cells;\n  };\n  /**\n   * Retrieves the start and end time information of the specific cell element.\n   *\n   * @function getCellDetails\n   * @param {Element | Element[]} tdCol Accepts the single or collection of elements.\n   * @returns {CellClickEventArgs} Object An object holding the startTime, endTime and all-day information along with the target HTML element will be returned.\n   */\n\n\n  Schedule.prototype.getCellDetails = function (tdCol) {\n    var td = tdCol instanceof Array ? tdCol : [tdCol];\n    var firstTd = getElement(td[0]);\n    var lastTd = getElement(td.slice(-1)[0]);\n    var startTime = this.getDateFromElement(firstTd);\n    var endTime = this.getDateFromElement(lastTd);\n\n    if (isNullOrUndefined(startTime) || isNullOrUndefined(endTime)) {\n      return undefined;\n    }\n\n    var endDateFromColSpan = this.activeView.isTimelineView() && !isNullOrUndefined(lastTd.getAttribute('colSpan')) && this.headerRows.length > 0;\n    var duration = endDateFromColSpan ? parseInt(lastTd.getAttribute('colSpan'), 10) : 1;\n\n    if (!this.activeViewOptions.timeScale.enable || endDateFromColSpan || lastTd.classList.contains(ALLDAY_CELLS_CLASS) || lastTd.classList.contains(HEADER_CELLS_CLASS)) {\n      endTime = addDays(new Date(endTime.getTime()), duration);\n    } else {\n      endTime = this.activeView.getEndDateFromStartDate(endTime);\n    }\n\n    var data = {\n      startTime: startTime,\n      endTime: endTime,\n      isAllDay: this.isAllDayCell(firstTd),\n      element: tdCol\n    };\n    var groupIndex = firstTd.getAttribute('data-group-index');\n\n    if (!isNullOrUndefined(groupIndex)) {\n      data.groupIndex = parseInt(groupIndex, 10);\n    }\n\n    return data;\n  };\n  /**\n   * Retrieves the selected cell elements.\n   *\n   * @function getSelectedElements\n   * @returns {Element[]} The elements of currently selected cells will be returned.\n   */\n\n\n  Schedule.prototype.getSelectedElements = function () {\n    if (this.keyboardInteractionModule && this.keyboardInteractionModule.selectedCells.length > 0) {\n      return this.keyboardInteractionModule.selectedCells;\n    }\n\n    return this.getSelectedCells();\n  };\n  /**\n   * To get the resource collection\n   *\n   * @function getResourceCollections\n   * @returns {ResourcesModel[]} Returns the resource collections\n   */\n\n\n  Schedule.prototype.getResourceCollections = function () {\n    return this.resourceCollection;\n  };\n  /**\n   * To set the resource collection\n   *\n   * @function setResourceCollections\n   * @param {ResourcesModel[]} resourceCol Accepts the resource collections in ResourcesModel type\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.setResourceCollections = function (resourceCol) {\n    this.setProperties({\n      resources: resourceCol\n    }, false);\n  };\n  /**\n   * Current View could be change based on the provided parameters.\n   *\n   * @function changeCurrentView\n   * @param {View} viewName Accept the view in the viewCollections.\n   * @param {number} viewIndex Accept the viewIndex in the viewCollections.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.changeCurrentView = function (viewName, viewIndex) {\n    var index = this.getViewIndex(viewName);\n    var view = viewName.charAt(0).toLowerCase() + viewName.slice(1);\n    var viewOptions = this.viewOptions[\"\" + view];\n\n    if (viewOptions) {\n      index = this.viewCollections.indexOf(viewOptions[viewIndex || 0]);\n    }\n\n    if (index === -1 || index === this.viewIndex) {\n      return;\n    }\n\n    this.changeView(viewName, null, null, index);\n  };\n  /**\n   * Return the current view Index.\n   *\n   * @function getCurrentViewIndex\n   * @returns {number} Returns the view index\n   */\n\n\n  Schedule.prototype.getCurrentViewIndex = function () {\n    return this.viewIndex;\n  };\n  /**\n   * Retrieves the resource details based on the provided resource index.\n   *\n   * @param {number} index index of the resources at the last level.\n   * @returns {ResourceDetails} Object An object holding the details of resource and resourceData.\n   */\n\n\n  Schedule.prototype.getResourcesByIndex = function (index) {\n    if (this.resourceBase && this.resourceBase.lastResourceLevel) {\n      if (index < 0 || index >= this.resourceBase.lastResourceLevel.length) {\n        return undefined;\n      }\n\n      var data = this.resourceBase.lastResourceLevel[parseInt(index.toString(), 10)];\n      var groupData = {};\n      this.resourceBase.setResourceValues(groupData, index);\n      return {\n        resource: data.resource,\n        resourceData: data.resourceData,\n        groupData: groupData\n      };\n    }\n\n    return undefined;\n  };\n  /**\n   * This method allows to expand the resource that available on the scheduler.\n   *\n   * @function expandResource\n   * @param {string | number} resourceId Accepts the resource id in either string or number type\n   * @param {string} name Accepts the name of the resource collection\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.expandResource = function (resourceId, name) {\n    if (this.activeView.isTimelineView() && this.resourceBase && this.resourceCollection.length > 1) {\n      this.resourceBase.resourceExpand(resourceId, name, false);\n    }\n  };\n  /**\n   * This method allows to collapse the resource that available on the scheduler.\n   *\n   * @function collapseResource\n   * @param {string | number} resourceId Accepts the resource id in either string or number type\n   * @param {string} name Accepts the name of the resource collection\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.collapseResource = function (resourceId, name) {\n    if (this.activeView.isTimelineView() && this.resourceBase && this.resourceCollection.length > 1) {\n      this.resourceBase.resourceExpand(resourceId, name, true);\n    }\n  };\n  /**\n   * Scrolls the Schedule content area to the specified time.\n   *\n   * @function scrollTo\n   * @param {string} hour Accepts the time value in the skeleton format of 'Hm'.\n   * @param {Date} scrollDate Accepts the date object value.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.scrollTo = function (hour, scrollDate) {\n    if (this.activeView.scrollToDate && isNullOrUndefined(hour) && scrollDate) {\n      this.activeView.scrollToDate(scrollDate);\n    } else if (this.activeView.scrollToHour) {\n      this.activeView.scrollToHour(hour, scrollDate);\n    }\n  };\n  /**\n   * This method allows scroll to the position of the any resources that available on the scheduler.\n   * This method is applicable for without Agenda and Month agenda views of the schedule.\n   *\n   * @function scrollToResource\n   * @param {string | number} resourceId Accepts the resource id in either string or number type\n   * @param {string} groupName Accepts the name of the resource collection\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.scrollToResource = function (resourceId, groupName) {\n    if (this.resourceBase && this.resourceBase.lastResourceLevel) {\n      this.resourceBase.resourceScroll(resourceId, groupName);\n    }\n  };\n  /**\n   * Exports the Scheduler events to a calendar (.ics) file. By default, the calendar is exported with a file name `Calendar.ics`.\n   * To change this file name on export, pass the custom string value as `fileName` to get the file downloaded with this provided name.\n   *\n   * @function exportToICalendar\n   * @param {string} fileName Accepts the string value.\n   * @param {Object[]} customData Accepts the collection of objects.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.exportToICalendar = function (fileName, customData) {\n    if (this.iCalendarExportModule) {\n      this.iCalendarExportModule.initializeCalendarExport(fileName, customData);\n    } else {\n      throw Error('Inject ICalendarExport module');\n    }\n  };\n  /**\n   * Imports the events from an .ics file downloaded from any of the calendars like Google or Outlook into the Scheduler.\n   * This method accepts the blob object or string format of an .ics file to be imported as a mandatory argument.\n   *\n   * @function importICalendar\n   * @param {Blob | string} fileContent Accepts the file object or string format of an .ics file.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.importICalendar = function (fileContent) {\n    if (this.iCalendarImportModule) {\n      this.iCalendarImportModule.initializeCalendarImport(fileContent);\n    } else {\n      throw Error('Inject ICalendarImport module');\n    }\n  };\n  /**\n   * Adds the newly created event into the Schedule dataSource.\n   *\n   * @function addEvent\n   * @param {Object | Object[]} data Single or collection of event objects to be added into Schedule.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.addEvent = function (data) {\n    this.crudModule.addEvent(data);\n  };\n  /**\n   * Generates the occurrences of a single recurrence event based on the provided event.\n   *\n   * @function generateEventOccurrences\n   * @param {Object} event Accepts the parent recurrence event from which the occurrences are generated.\n   * @param {Date} startDate Accepts the start date for the event occurrences. If not provided, the event's start date will be used.\n   * @returns {Object[]} Returns the collection of occurrence event objects.\n   */\n\n\n  Schedule.prototype.generateEventOccurrences = function (event, startDate) {\n    return this.eventBase ? this.eventBase.generateOccurrence(event, startDate) : [];\n  };\n  /**\n   * Allows the Scheduler events data to be exported as an Excel file either in .xlsx or .csv file formats.\n   * By default, the whole event collection bound to the Scheduler gets exported as an Excel file.\n   * To export only the specific events of Scheduler, you need to pass the custom data collection as\n   * a parameter to this `exportToExcel` method. This method accepts the export options as arguments such as fileName,\n   * exportType, fields, customData, and includeOccurrences. The `fileName` denotes the name to be given for the exported\n   * file and the `exportType` allows you to set the format of an Excel file to be exported either as .xlsx or .csv.\n   * The custom or specific field collection of event dataSource to be exported can be provided through `fields` option\n   * and the custom data collection can be exported by passing them through the `customData` option. There also exists\n   * option to export each individual instances of the recurring events to an Excel file, by setting true or false to the\n   * `includeOccurrences` option, denoting either to include or exclude the occurrences as separate instances on an exported Excel file.\n   *\n   * @function exportToExcel\n   * @param {ExportOptions} excelExportOptions The export options to be set before start with exporting the Scheduler events to an Excel file.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.exportToExcel = function (excelExportOptions) {\n    if (this.excelExportModule) {\n      this.excelExportModule.initializeExcelExport(excelExportOptions);\n    } else {\n      throw Error('Inject ExcelExport module');\n    }\n  };\n  /**\n   * Method allows to print the scheduler.\n   *\n   * @function print\n   * @param {ScheduleModel} printOptions The export options to be set before start with exporting\n   * the Scheduler events to the print window.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.print = function (printOptions) {\n    if (this.printModule) {\n      this.printModule.print(printOptions);\n    } else {\n      throw Error('Inject Print module');\n    }\n  };\n  /**\n   * Updates the changes made in the event object by passing it as an parameter into the dataSource.\n   *\n   * @function saveEvent\n   * @param {Object | Object[]} data Single or collection of event objects to be saved into Schedule.\n   * @param {CurrentAction} currentAction Denotes the action that takes place either for editing occurrence or series.\n   *  The valid current action names are `EditOccurrence` or `EditSeries`.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.saveEvent = function (data, currentAction) {\n    this.crudModule.saveEvent(data, currentAction);\n  };\n  /**\n   * Deletes the events based on the provided ID or event collection in the argument list.\n   *\n   * @function deleteEvent\n   * @param {string | number | Object | Object[]} id Accepts the ID as string or number type or single or collection of the event object which needs to be removed from the Schedule.\n   * @param {CurrentAction} currentAction Denotes the delete action that takes place either on occurrence or series events.\n   *  The valid current action names are `Delete`, `DeleteOccurrence` or `DeleteSeries`.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.deleteEvent = function (id, currentAction) {\n    this.crudModule.deleteEvent(id, currentAction);\n  };\n  /**\n   * Retrieves the entire collection of events bound to the Schedule.\n   *\n   * @function getEvents\n   * @param {Date} startDate Accepts the start date.\n   * @param {Date} endDate Accepts te end date.\n   * @param {boolean} includeOccurrences Accepts the boolean value to process the occurrence from recurrence series.\n   * @returns {Object[]} Returns the collection of event objects from the Schedule.\n   */\n\n\n  Schedule.prototype.getEvents = function (startDate, endDate, includeOccurrences) {\n    var eventCollections = [];\n\n    if (includeOccurrences) {\n      eventCollections = this.eventBase.getProcessedEvents();\n    } else {\n      eventCollections = this.eventsData;\n    }\n\n    if (startDate) {\n      startDate = this.getDateTime(startDate);\n    }\n\n    if (endDate) {\n      endDate = this.getDateTime(endDate);\n    }\n\n    eventCollections = this.eventBase.filterEventsByRange(eventCollections, startDate, endDate);\n    return eventCollections;\n  };\n  /**\n   * Retrieves the entire collection of block events bound to the Schedule.\n   *\n   * @function getBlockEvents\n   * @param {Date} startDate Accepts the start date.\n   * @param {Date} endDate Accepts te end date.\n   * @param {boolean} includeOccurrences Accepts the boolean value to process the occurrence from recurrence series.\n   * @returns {Object[]} Returns the collection of block event objects from the Schedule.\n   */\n\n\n  Schedule.prototype.getBlockEvents = function (startDate, endDate, includeOccurrences) {\n    var eventCollections = [];\n\n    if (includeOccurrences) {\n      eventCollections = this.eventBase.getProcessedEvents(this.blockData);\n    } else {\n      eventCollections = this.blockData;\n    }\n\n    if (startDate) {\n      startDate = this.getDateTime(startDate);\n    }\n\n    if (endDate) {\n      endDate = this.getDateTime(endDate);\n    }\n\n    eventCollections = this.eventBase.filterEventsByRange(eventCollections, startDate, endDate);\n    return eventCollections;\n  };\n  /**\n   * Retrieves the occurrences of a single recurrence event based on the provided parent ID.\n   *\n   * @function getOccurrencesByID\n   * @param {number} eventID ID of the parent recurrence data from which the occurrences are fetched.\n   * @returns {Object[]} Returns the collection of occurrence event objects.\n   */\n\n\n  Schedule.prototype.getOccurrencesByID = function (eventID) {\n    return this.eventBase.getOccurrencesByID(eventID);\n  };\n  /**\n   * Retrieves all the occurrences that lies between the specific start and end time range.\n   *\n   * @function getOccurrencesByRange\n   * @param {Date} startTime Denotes the start time range.\n   * @param {Date} endTime Denotes the end time range.\n   * @returns {Object[]} Returns the collection of occurrence event objects that lies between the provided start and end time.\n   */\n\n\n  Schedule.prototype.getOccurrencesByRange = function (startTime, endTime) {\n    startTime = this.getDateTime(startTime);\n    endTime = this.getDateTime(endTime);\n    return this.eventBase.getOccurrencesByRange(startTime, endTime);\n  };\n  /**\n   * Retrieves the dates that lies on active view of Schedule.\n   *\n   * @function getCurrentViewDates\n   * @returns {Date[]} Returns the collection of dates.\n   */\n\n\n  Schedule.prototype.getCurrentViewDates = function () {\n    return this.activeView ? this.activeView.renderDates : [];\n  };\n  /**\n   * Set the recurrence editor instance from custom editor template.\n   *\n   * @function setRecurrenceEditor\n   * @param {RecurrenceEditor} recurrenceEditor instance has passed to fetch the instance in event window.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.setRecurrenceEditor = function (recurrenceEditor) {\n    this.eventWindow.setRecurrenceEditor(recurrenceEditor);\n  };\n  /**\n   * Get the maximum id of an event.\n   *\n   * @function getEventMaxID\n   * @returns {number | string} Returns the maximum ID from scheduler data collections.\n   */\n\n\n  Schedule.prototype.getEventMaxID = function () {\n    return this.eventBase.getEventMaxID();\n  };\n  /**\n   * Get deleted occurrences from given recurrence series.\n   *\n   * @function getDeletedOccurrences\n   * @param {string | number | Object} recurrenceData Accepts the parent ID of the event object or parent event object\n   * @returns {Object[]} Returns the collection of deleted occurrence events.\n   */\n\n\n  Schedule.prototype.getDeletedOccurrences = function (recurrenceData) {\n    return this.eventBase.getDeletedOccurrences(recurrenceData);\n  };\n  /**\n   * Retrieves the events that lies on the current date range of the active view of Schedule.\n   *\n   * @function getCurrentViewEvents\n   * @returns {Object[]} Returns the collection of events.\n   */\n\n\n  Schedule.prototype.getCurrentViewEvents = function () {\n    return this.eventsProcessed;\n  };\n  /**\n   * Refreshes the event dataSource. This method may be useful when the events alone in the schedule needs to be re-rendered.\n   *\n   * @function refreshEvents\n   * @param {boolean} isRemoteRefresh Accepts the boolean to refresh data from remote or local\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.refreshEvents = function (isRemoteRefresh) {\n    if (isRemoteRefresh === void 0) {\n      isRemoteRefresh = true;\n    }\n\n    if (isRemoteRefresh) {\n      if (this.dragAndDropModule) {\n        this.dragAndDropModule.actionObj.action = '';\n        removeClass([this.element], EVENT_ACTION_CLASS);\n      }\n\n      this.crudModule.refreshDataManager();\n    } else {\n      if (this.uiStateValues) {\n        this.uiStateValues.isPreventTimezone = true;\n      }\n\n      if (this.crudModule) {\n        this.crudModule.refreshProcessedData();\n      }\n\n      if (this.uiStateValues) {\n        this.uiStateValues.isPreventTimezone = false;\n      }\n    }\n  };\n  /**\n   * Method to refresh the given Schedule templates\n   *\n   * @param {string} templateName Accepts the template name\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.refreshTemplates = function (templateName) {\n    if (templateName) {\n      this.resetTemplates([templateName]);\n    } else {\n      this.resetTemplates();\n    }\n\n    switch (templateName) {\n      case 'eventTemplate':\n        this.appointmentTemplateFn = this.templateParser(this.activeViewOptions.eventTemplate);\n        this.refreshEvents(false);\n        break;\n\n      case 'dateHeaderTemplate':\n        this.dateHeaderTemplateFn = this.templateParser(this.activeViewOptions.dateHeaderTemplate);\n        this.activeView.refreshHeader();\n        break;\n\n      case 'dateRangeTemplate':\n        this.dateRangeTemplateFn = this.templateParser(this.activeViewOptions.dateRangeTemplate);\n\n        if (this.headerModule) {\n          this.headerModule.refresh();\n        }\n\n        break;\n\n      case 'resourceHeaderTemplate':\n        this.resourceHeaderTemplateFn = this.templateParser(this.activeViewOptions.resourceHeaderTemplate);\n\n        if (this.activeView.isTimelineView()) {\n          this.activeView.refreshResourceHeader();\n        } else {\n          this.activeView.refreshHeader();\n        }\n\n        break;\n\n      case 'quickInfoTemplates':\n        if (this.quickPopup) {\n          this.quickPopup.destroy();\n          this.quickPopup = null;\n        }\n\n        this.quickPopup = new QuickPopups(this);\n        this.quickInfoTemplatesHeaderFn = this.templateParser(this.quickInfoTemplates.header);\n        this.quickInfoTemplatesContentFn = this.templateParser(this.quickInfoTemplates.content);\n        this.quickInfoTemplatesFooterFn = this.templateParser(this.quickInfoTemplates.footer);\n        break;\n\n      case 'editorTemplate':\n        if (this.eventWindow) {\n          this.eventWindow.destroy();\n          this.eventWindow = null;\n        }\n\n        this.eventWindow = new EventWindow(this);\n        this.editorTemplateFn = this.templateParser(this.editorTemplate);\n        break;\n\n      case 'tooltipTemplate':\n      case 'headerTooltipTemplate':\n        if (this.eventTooltip) {\n          this.eventTooltip.destroy();\n          this.eventTooltip = null;\n        }\n\n        this.eventTooltip = new EventTooltip(this);\n        this.eventTooltipTemplateFn = this.templateParser(this.eventSettings.tooltipTemplate);\n        this.headerTooltipTemplateFn = this.templateParser(this.activeViewOptions.group.headerTooltipTemplate);\n        break;\n\n      default:\n        this.initializeView(this.currentView);\n        break;\n    }\n  };\n  /**\n   * Refreshes the Schedule layout without re-render.\n   *\n   * @function refreshLayout\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.refreshLayout = function () {\n    this.onScheduleResize();\n\n    if (this.headerModule) {\n      this.headerModule.refresh();\n    }\n\n    if (this.eventWindow) {\n      this.eventWindow.refresh();\n    }\n  };\n  /**\n   * To retrieve the appointment object from element.\n   *\n   * @function getEventDetails\n   * @param {Element} element Denotes the event UI element on the Schedule.\n   * @returns {Object} Returns the event details.\n   */\n\n\n  Schedule.prototype.getEventDetails = function (element) {\n    element = getElement(element);\n    var guid = element.getAttribute('data-guid');\n\n    if (guid) {\n      return this.eventBase.getEventByGuid(guid);\n    }\n\n    return {};\n  };\n  /**\n   * To check whether the given time range slots are available for event creation or already occupied by other events.\n   *\n   * @function isSlotAvailable\n   * @param {Date | Object} startTime Denotes the start time of the slot.\n   * @param {Date} endTime Denotes the end time of the slot.\n   * @param {number} groupIndex Defines the resource index from last level.\n   * @returns {boolean} Returns true, if the slot that lies in the provided time range does not contain any other events.\n   */\n\n\n  Schedule.prototype.isSlotAvailable = function (startTime, endTime, groupIndex) {\n    var _this = this;\n\n    var eventStart;\n    var eventEnd;\n    var eventObj = this.activeEventData.event;\n\n    if (startTime instanceof Date || typeof startTime === 'string') {\n      eventStart = startTime;\n      eventEnd = endTime;\n    } else {\n      eventObj = startTime;\n      eventStart = startTime[this.eventFields.startTime];\n      eventEnd = startTime[this.eventFields.endTime];\n\n      if (this.resourceBase) {\n        groupIndex = this.eventBase.getGroupIndexFromEvent(startTime);\n      }\n    }\n\n    if (isNullOrUndefined(eventStart) || isNullOrUndefined(eventEnd)) {\n      return true;\n    }\n\n    eventStart = this.getDateTime(eventStart);\n    eventEnd = this.getDateTime(eventEnd);\n    var eventCollection = this.eventBase.filterEvents(eventStart, eventEnd);\n\n    if (!isNullOrUndefined(groupIndex) && this.resourceBase && this.resourceBase.lastResourceLevel.length > 0) {\n      eventCollection = this.eventBase.filterEventsByResource(this.resourceBase.lastResourceLevel[parseInt(groupIndex.toString(), 10)], eventCollection);\n    }\n\n    if (eventObj) {\n      if (eventObj.Guid) {\n        eventCollection = eventCollection.filter(function (event) {\n          return event.Guid !== eventObj.Guid;\n        });\n      } else {\n        eventCollection = eventCollection.filter(function (event) {\n          return event[_this.eventFields.id] !== eventObj[_this.eventFields.id];\n        });\n      }\n    }\n\n    return eventCollection.length > 0 ? false : true;\n  };\n  /**\n   * To manually open the event editor on specific time or on certain events.\n   *\n   * @function openEditor\n   * @param {Object} data It can be either cell data or event data.\n   * @param {CurrentAction} action Defines the action for which the editor needs to be opened such as either for new event creation or\n   *  for editing of existing events. The applicable action names that can be used here are `Add`, `Save`, `EditOccurrence`\n   *  and `EditSeries`.\n   * @param {boolean} isEventData It allows to decide whether the editor needs to be opened with the clicked cell details or with the\n   *  passed event details.\n   * @param {number} repeatType It opens the editor with the recurrence options based on the provided repeat type.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.openEditor = function (data, action, isEventData, repeatType) {\n    if (action === 'Add' && !isEventData) {\n      data.startTime = this.getDateTime(data.startTime);\n      data.endTime = this.getDateTime(data.endTime);\n\n      if (!isNullOrUndefined(data.element)) {\n        data.element = getElement(data.element);\n      }\n    } else {\n      data[this.eventFields.startTime] = this.getDateTime(data[this.eventFields.startTime]);\n      data[this.eventFields.endTime] = this.getDateTime(data[this.eventFields.endTime]);\n    }\n\n    this.currentAction = action;\n\n    if (action !== 'Add') {\n      this.activeEventData.event = data;\n    }\n\n    this.eventWindow.openEditor(data, action, isEventData, repeatType);\n  };\n  /**\n   * To manually close the event editor window\n   *\n   * @function closeEditor\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.closeEditor = function () {\n    if (this.eventWindow) {\n      this.eventWindow.dialogClose();\n    }\n  };\n  /**\n   * To manually open the quick info popup based on cell or event details.\n   *\n   * @param {object} data Defines the cell or event data. If the data contains valid ID, it will open event quick info popup,\n   * otherwise cell quick info popup displayed.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.openQuickInfoPopup = function (data) {\n    var _this = this;\n\n    if (this.currentView === 'Year' || isNullOrUndefined(data)) {\n      return;\n    }\n\n    if (isNullOrUndefined(data[this.eventFields.id])) {\n      if (this.currentView === 'Agenda' || this.currentView === 'MonthAgenda' || isNullOrUndefined(this.activeView)) {\n        return;\n      }\n\n      var cellData = {\n        startTime: this.activeCellsData.startTime = this.getDateTime(data[this.eventFields.startTime]),\n        endTime: this.activeCellsData.endTime = this.getDateTime(data[this.eventFields.endTime]),\n        isAllDay: this.activeCellsData.isAllDay = !isNullOrUndefined(data[this.eventFields.isAllDay]) ? data[this.eventFields.isAllDay] : false\n      };\n      var startTime = this.activeView.getAdjustedDate(new Date(cellData.startTime));\n\n      if (startTime) {\n        var query = '.' + WORK_CELLS_CLASS + '[data-date=\"' + startTime.getTime() + '\"]';\n\n        if (this.activeViewOptions.group.resources.length > 0 && !this.uiStateValues.isGroupAdaptive && this.resourceBase && this.eventBase) {\n          cellData.groupIndex = this.eventBase.getGroupIndexFromEvent(data);\n          query = '.' + WORK_CELLS_CLASS + '[data-date=\"' + startTime.getTime() + '\"][data-group-index=\"' + cellData.groupIndex + '\"]';\n        }\n\n        var workCell = this.element.querySelector(query);\n\n        if (workCell) {\n          workCell.focus();\n          cellData.element = workCell;\n          this.notify(cellClick, cellData);\n        }\n      }\n    } else {\n      var app = this.getCurrentViewEvents().filter(function (item) {\n        return data[_this.eventFields.id] === item[_this.eventFields.id];\n      });\n\n      if (app.length <= 0) {\n        return;\n      }\n\n      var selectEvent = app[0];\n\n      if (data[this.eventFields.recurrenceRule]) {\n        var occurence = app.filter(function (x) {\n          return x[_this.eventFields.startTime].getTime() === data[_this.eventFields.startTime].getTime();\n        });\n\n        if (occurence.length > 0) {\n          selectEvent = occurence[0];\n        }\n      }\n\n      var element = this.element.querySelector('div[data-guid=\"' + selectEvent.Guid + '\"]');\n\n      if (element) {\n        this.eventBase.removeSelectedAppointmentClass();\n        this.eventBase.addSelectedAppointments([element], false);\n        this.activeEventData = {\n          event: selectEvent,\n          element: element\n        };\n\n        if (this.currentView === 'Agenda' || this.currentView === 'MonthAgenda') {\n          addClass([this.activeEventData.element], AGENDA_SELECTED_CELL);\n        }\n\n        this.notify(eventClick, this.activeEventData);\n      }\n    }\n  };\n  /**\n   * To manually close the quick info popup\n   *\n   * @function closeQuickInfoPopup\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.closeQuickInfoPopup = function () {\n    if (this.quickPopup) {\n      this.quickPopup.quickPopupHide(true);\n    }\n  };\n  /**\n   * Closes the tooltip.\n   * For example, when the context menu is opened for an event,\n   * the tooltip can be closed by calling this method.\n   *\n   * @function closeTooltip\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.closeTooltip = function () {\n    if (this.eventTooltip) {\n      this.eventTooltip.close();\n    }\n  };\n  /**\n   * Select the resource based on group index in mobile mode.\n   *\n   * @param {number} groupIndex Defines the resource index based on last level.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.selectResourceByIndex = function (groupIndex) {\n    if (this.resourceBase && this.uiStateValues.isGroupAdaptive) {\n      this.resourceBase.selectResourceByIndex(groupIndex);\n    }\n  };\n  /**\n   * Select the resources to the based on id.\n   *\n   * @param {string | number} id id of the resource defined in resources collection.\n   * @param {string} name Name of the resource defined in resources collection.\n   * @returns {number} Returns the group index\n   */\n\n\n  Schedule.prototype.getIndexFromResourceId = function (id, name) {\n    if (this.resourceBase) {\n      return this.resourceBase.getIndexFromResourceId(id, name);\n    }\n\n    return null;\n  };\n  /**\n   * Adds the resources to the specified index.\n   *\n   * @param {Object | Object[]} resources Accepts the resource data in single or collection of data.\n   * @param {string} name Name of the resource defined in resources collection.\n   * @param {number} index Index or position where the resource should be added.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.addResource = function (resources, name, index) {\n    this.resourceBase.addResource(resources, name, index);\n  };\n  /**\n   * Removes the specified resource.\n   *\n   * @param {string | string[] | number | number[]} resourceId Specifies the resource id to be removed.\n   * @param {string} name Specifies the resource name from which the id should be referred.\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.removeResource = function (resourceId, name) {\n    this.resourceBase.removeResource(resourceId, name);\n  };\n  /**\n   * Destroys the Schedule component.\n   *\n   * @function destroy\n   * @returns {void}\n   */\n\n\n  Schedule.prototype.destroy = function () {\n    if (this.eventTooltip) {\n      this.eventTooltip.destroy();\n      this.eventTooltip = null;\n    }\n\n    this.destroyPopups();\n    this.hideSpinner();\n    this.unWireEvents();\n    this.destroyHeaderModule();\n\n    if (this.eventBase) {\n      this.eventBase.destroy();\n      this.eventBase = null;\n    }\n\n    if (this.workCellAction) {\n      this.workCellAction.destroy();\n      this.workCellAction = null;\n    }\n\n    if (this.inlineModule) {\n      this.inlineModule.destroy();\n      this.inlineModule = null;\n    }\n\n    if (this.keyboardInteractionModule) {\n      this.keyboardInteractionModule.destroy();\n      this.keyboardInteractionModule = null;\n    }\n\n    if (this.scrollModule) {\n      this.scrollModule.destroy();\n      this.scrollModule = null;\n    }\n\n    if (this.printModule) {\n      this.printModule.destroy();\n    }\n\n    if (this.activeView) {\n      this.resetTemplates();\n      this.activeView.removeEventListener();\n      this.activeView.destroy();\n      this.activeView = null;\n    }\n\n    if (this.scheduleTouchModule) {\n      this.scheduleTouchModule.destroy();\n      this.scheduleTouchModule = null;\n    }\n\n    if (this.crudModule) {\n      this.crudModule.destroy();\n      this.crudModule = null;\n    }\n\n    if (this.dataModule) {\n      this.dataModule.destroy();\n      this.dataModule = null;\n    }\n\n    _super.prototype.destroy.call(this);\n\n    var modules = ['dayModule', 'weekModule', 'workWeekModule', 'monthModule', 'monthAgendaModule', 'yearModule', 'agendaModule', 'timelineViewsModule', 'timelineMonthModule', 'timelineYearModule', 'resizeModule', 'dragAndDropModule', 'excelExportModule', 'printModule', 'iCalendarExportModule', 'iCalendarImportModule', 'tzModule', 'eventsData', 'eventsProcessed', 'blockData', 'blockProcessed', 'uiStateValues', 'viewCollections', 'viewOptions', 'defaultLocale', 'localeObj', 'selectedElements', 'resourceCollection', 'editorTitles', 'eventFields', 'activeViewOptions', 'activeEventData', 'activeCellsData', 'renderModule'];\n\n    for (var _i = 0, modules_1 = modules; _i < modules_1.length; _i++) {\n      var module = modules_1[_i];\n      this[\"\" + module] = null;\n    }\n\n    removeChildren(this.element);\n    var removeClasses = [ROOT, RTL, DEVICE_CLASS, MULTI_DRAG];\n\n    if (this.cssClass) {\n      removeClasses = removeClasses.concat(this.cssClass.split(' '));\n    }\n\n    removeClass([this.element], removeClasses);\n  };\n\n  __decorate([Property('auto')], Schedule.prototype, \"width\", void 0);\n\n  __decorate([Property('auto')], Schedule.prototype, \"height\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"showHeaderBar\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"showTimeIndicator\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"allowSwiping\", void 0);\n\n  __decorate([Property('Week')], Schedule.prototype, \"currentView\", void 0);\n\n  __decorate([Property(['Day', 'Week', 'WorkWeek', 'Month', 'Agenda'])], Schedule.prototype, \"views\", void 0);\n\n  __decorate([Property(new Date())], Schedule.prototype, \"selectedDate\", void 0);\n\n  __decorate([Property(new Date(1900, 0, 1))], Schedule.prototype, \"minDate\", void 0);\n\n  __decorate([Property(new Date(2099, 11, 31))], Schedule.prototype, \"maxDate\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"dateFormat\", void 0);\n\n  __decorate([Property('Gregorian')], Schedule.prototype, \"calendarMode\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"showWeekend\", void 0);\n\n  __decorate([Property(0)], Schedule.prototype, \"firstDayOfWeek\", void 0);\n\n  __decorate([Property('FirstDay')], Schedule.prototype, \"weekRule\", void 0);\n\n  __decorate([Property([1, 2, 3, 4, 5])], Schedule.prototype, \"workDays\", void 0);\n\n  __decorate([Property(12)], Schedule.prototype, \"monthsCount\", void 0);\n\n  __decorate([Property('00:00')], Schedule.prototype, \"startHour\", void 0);\n\n  __decorate([Property('24:00')], Schedule.prototype, \"endHour\", void 0);\n\n  __decorate([Property(null)], Schedule.prototype, \"timeFormat\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Property(false)], Schedule.prototype, \"enableAllDayScroll\", void 0);\n\n  __decorate([Property(false)], Schedule.prototype, \"enableAdaptiveUI\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"allowResizing\", void 0);\n\n  __decorate([Complex({}, WorkHours)], Schedule.prototype, \"workHours\", void 0);\n\n  __decorate([Complex({}, TimeScale)], Schedule.prototype, \"timeScale\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"allowKeyboardInteraction\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"allowDragAndDrop\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"dateHeaderTemplate\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"dateRangeTemplate\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"cellHeaderTemplate\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"dayHeaderTemplate\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"monthHeaderTemplate\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"cellTemplate\", void 0);\n\n  __decorate([Property(false)], Schedule.prototype, \"readonly\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"showQuickInfo\", void 0);\n\n  __decorate([Property(false)], Schedule.prototype, \"allowInline\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"allowMultiCellSelection\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"allowMultiRowSelection\", void 0);\n\n  __decorate([Property(false)], Schedule.prototype, \"quickInfoOnSelectionEnd\", void 0);\n\n  __decorate([Property(false)], Schedule.prototype, \"showWeekNumber\", void 0);\n\n  __decorate([Property(false)], Schedule.prototype, \"rowAutoHeight\", void 0);\n\n  __decorate([Property(false)], Schedule.prototype, \"allowMultiDrag\", void 0);\n\n  __decorate([Property(0)], Schedule.prototype, \"firstMonthOfYear\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"editorTemplate\", void 0);\n\n  __decorate([Complex({}, QuickInfoTemplates)], Schedule.prototype, \"quickInfoTemplates\", void 0);\n\n  __decorate([Property(7)], Schedule.prototype, \"agendaDaysCount\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"hideEmptyAgendaDays\", void 0);\n\n  __decorate([Property(true)], Schedule.prototype, \"enableRecurrenceValidation\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"timezone\", void 0);\n\n  __decorate([Complex({}, EventSettings)], Schedule.prototype, \"eventSettings\", void 0);\n\n  __decorate([Property(timezoneData)], Schedule.prototype, \"timezoneDataSource\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"resourceHeaderTemplate\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"headerIndentTemplate\", void 0);\n\n  __decorate([Complex({}, Group)], Schedule.prototype, \"group\", void 0);\n\n  __decorate([Collection([], Resources)], Schedule.prototype, \"resources\", void 0);\n\n  __decorate([Collection([], HeaderRows)], Schedule.prototype, \"headerRows\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"cssClass\", void 0);\n\n  __decorate([Property()], Schedule.prototype, \"eventDragArea\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"created\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"destroyed\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"cellClick\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"cellDoubleClick\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"moreEventsClick\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"hover\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"select\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"actionBegin\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"actionComplete\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"actionFailure\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"navigating\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"renderCell\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"eventClick\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"eventRendered\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"dataBinding\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"popupOpen\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"popupClose\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"dragStart\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"drag\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"dragStop\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"resizeStart\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"resizing\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"resizeStop\", void 0);\n\n  __decorate([Event()], Schedule.prototype, \"dataBound\", void 0);\n\n  Schedule = __decorate([NotifyPropertyChanges], Schedule);\n  return Schedule;\n}(Component);\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Base class for the common drag and resize related actions\n */\n\n\nvar ActionBase =\n/** @__PURE__ @class */\nfunction () {\n  function ActionBase(parent) {\n    this.daysVariation = 0;\n    this.parent = parent;\n    this.actionObj = {\n      X: 0,\n      Y: 0,\n      groupIndex: 0,\n      cellWidth: 0,\n      cellHeight: 0,\n      slotInterval: 0,\n      interval: 0,\n      actionIndex: 0,\n      cloneElement: [],\n      originalElement: [],\n      action: null,\n      isAllDay: null,\n      excludeSelectors: null,\n      index: 0,\n      navigationInterval: null,\n      scrollInterval: null\n    };\n    this.scrollArgs = {\n      element: null,\n      width: 0,\n      height: 0\n    };\n    this.resizeEdges = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false\n    };\n    this.scrollEdges = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false\n    };\n  }\n\n  ActionBase.prototype.getChangedData = function (multiData) {\n    var _this = this;\n\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    eventObj[this.parent.eventFields.startTime] = this.actionObj.start;\n    eventObj[this.parent.eventFields.endTime] = this.actionObj.end;\n\n    if (!isNullOrUndefined(this.actionObj.isAllDay)) {\n      eventObj[this.parent.eventFields.isAllDay] = this.actionObj.isAllDay;\n    }\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      var originalElement = this.getOriginalElement(this.actionObj.element);\n\n      if (originalElement) {\n        var indexCol_1 = originalElement.map(function (element) {\n          return parseInt(element.getAttribute('data-group-index'), 10);\n        });\n\n        if (indexCol_1.indexOf(this.actionObj.groupIndex) === -1 || !isNullOrUndefined(multiData) && multiData.length > 0) {\n          var cloneIndex_1 = parseInt(this.actionObj.clone.getAttribute('data-group-index'), 10);\n          indexCol_1 = indexCol_1.filter(function (index) {\n            return index !== cloneIndex_1;\n          });\n          indexCol_1.push(this.actionObj.groupIndex);\n\n          if (multiData && multiData.length > 0) {\n            multiData.forEach(function (data) {\n              _this.parent.resourceBase.getResourceData(data, _this.actionObj.groupIndex, indexCol_1);\n            });\n          } else {\n            this.parent.resourceBase.getResourceData(eventObj, this.actionObj.groupIndex, indexCol_1);\n          }\n        }\n      }\n    }\n\n    return eventObj;\n  };\n\n  ActionBase.prototype.saveChangedData = function (eventArgs, isMultiSelect) {\n    if (isMultiSelect === void 0) {\n      isMultiSelect = false;\n    }\n\n    this.parent.activeEventData.event = this.actionObj.event;\n    this.parent.currentAction = 'Save';\n    var currentAction;\n    var eventsCollection = [eventArgs.data];\n\n    if (isMultiSelect) {\n      eventsCollection = eventArgs.selectedData;\n    }\n\n    for (var _i = 0, eventsCollection_1 = eventsCollection; _i < eventsCollection_1.length; _i++) {\n      var eventObj = eventsCollection_1[_i];\n      var isSameResource = this.parent.activeViewOptions.group.resources.length > 0 ? parseInt(this.actionObj.element.getAttribute('data-group-index'), 10) === this.actionObj.groupIndex : true;\n\n      if (+eventObj[this.parent.eventFields.startTime] === +this.actionObj.event[this.parent.eventFields.startTime] && +eventObj[this.parent.eventFields.endTime] === +this.actionObj.event[this.parent.eventFields.endTime] && isSameResource) {\n        this.parent.crudModule.crudObj.isCrudAction = false;\n        return;\n      }\n\n      if (eventObj[this.parent.eventFields.recurrenceRule]) {\n        var eveId = eventObj[this.parent.eventFields.recurrenceID] || eventObj[this.parent.eventFields.id];\n\n        if (eventObj[this.parent.eventFields.id] === eventObj[this.parent.eventFields.recurrenceID]) {\n          eventObj[this.parent.eventFields.id] = this.parent.eventBase.getEventMaxID();\n          currentAction = 'EditOccurrence';\n        }\n\n        if (this.parent.enableRecurrenceValidation && this.parent.eventWindow.editOccurrenceValidation(eveId, eventObj, this.actionObj.event)) {\n          return;\n        }\n      } else {\n        currentAction = null;\n      }\n\n      if (eventObj[this.parent.eventFields.startTimezone] || eventObj[this.parent.eventFields.endTimezone]) {\n        this.parent.eventBase.timezoneConvert(eventObj);\n      }\n\n      this.parent.crudModule.saveEvent(eventObj, currentAction);\n    }\n  };\n\n  ActionBase.prototype.calculateIntervalTime = function (date) {\n    var intervalTime = new Date(+date);\n    intervalTime.setMinutes(Math.floor(intervalTime.getMinutes() / this.actionObj.interval) * this.actionObj.interval);\n    return intervalTime;\n  };\n\n  ActionBase.prototype.getContentAreaDimension = function () {\n    var viewElement = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n    var trElement = [].slice.call(viewElement.querySelector('tr').children);\n\n    if (!this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.isAdaptive && !this.parent.enableAdaptiveUI && !this.parent.virtualScrollModule) {\n      trElement = this.getResourceElements(trElement);\n    }\n\n    var leftOffset = trElement[0].getBoundingClientRect();\n    var rightOffset = trElement.slice(-1)[0].getBoundingClientRect();\n    var viewDimension = {\n      bottom: viewElement.scrollHeight - 5,\n      left: this.parent.enableRtl ? rightOffset.left : leftOffset.left,\n      right: this.parent.enableRtl ? leftOffset.right : rightOffset.right,\n      top: 0,\n      leftOffset: this.parent.enableRtl ? rightOffset.right : leftOffset.right,\n      rightOffset: this.parent.enableRtl ? leftOffset.left : rightOffset.left\n    };\n    return viewDimension;\n  };\n\n  ActionBase.prototype.getIndex = function (index) {\n    var contentElements = [].slice.call(this.parent.getContentTable().querySelector('tr').children);\n    var indexes = {\n      minIndex: 0,\n      maxIndex: contentElements.length - 1\n    };\n\n    if (this.actionObj.action === 'resize' && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive && !this.parent.activeView.isTimelineView()) {\n      var groupElements = this.getResourceElements(contentElements);\n      indexes.minIndex = groupElements[0].cellIndex;\n      indexes.maxIndex = groupElements.slice(-1)[0].cellIndex;\n    }\n\n    if (index < indexes.minIndex) {\n      index = indexes.minIndex;\n    }\n\n    if (index > indexes.maxIndex) {\n      index = indexes.maxIndex;\n    }\n\n    return index;\n  };\n\n  ActionBase.prototype.updateTimePosition = function (date, multiData) {\n    var index = 0;\n\n    for (var _i = 0, _a = this.actionObj.cloneElement; _i < _a.length; _i++) {\n      var cloneElement = _a[_i];\n      var timeElement = cloneElement.querySelector('.' + APPOINTMENT_TIME);\n\n      if (timeElement) {\n        var startTime = this.actionObj.start;\n        var endTime = this.actionObj.end;\n\n        if (multiData && multiData.length > 0) {\n          startTime = multiData[parseInt(index.toString(), 10)][this.parent.eventFields.startTime];\n          endTime = multiData[parseInt(index.toString(), 10)][this.parent.eventFields.endTime];\n        }\n\n        timeElement.innerHTML = this.parent.getTimeString(startTime) + ' - ' + this.parent.getTimeString(endTime);\n      }\n\n      index++;\n    }\n\n    if (!this.parent.activeViewOptions.timeScale.enable || !this.parent.isAdaptive || this.parent.currentView === 'Month' || this.parent.currentView === 'TimelineMonth') {\n      return;\n    }\n\n    var timeIndicator = this.parent.element.querySelector('.' + CLONE_TIME_INDICATOR_CLASS);\n\n    if (!timeIndicator) {\n      timeIndicator = createElement('div', {\n        className: CLONE_TIME_INDICATOR_CLASS\n      });\n      var wrapperClass = this.parent.activeView.isTimelineView() ? DATE_HEADER_WRAP_CLASS : TIME_CELLS_WRAP_CLASS;\n      this.parent.element.querySelector('.' + wrapperClass).appendChild(timeIndicator);\n    }\n\n    timeIndicator.innerHTML = this.parent.getTimeString(date);\n    var offsetValue = 0;\n\n    if (this.parent.activeView.isTimelineView()) {\n      if (this.parent.enableRtl) {\n        var rightValue = parseInt(this.actionObj.clone.style.right, 10);\n        offsetValue = this.actionObj.action === 'drag' || this.resizeEdges.left ? rightValue + this.actionObj.clone.offsetWidth : rightValue;\n        timeIndicator.style.right = formatUnit(offsetValue);\n      } else {\n        var leftValue = parseInt(this.actionObj.clone.style.left, 10);\n        offsetValue = this.actionObj.action === 'drag' || this.resizeEdges.left ? leftValue : leftValue + this.actionObj.clone.offsetWidth;\n        timeIndicator.style.left = formatUnit(offsetValue);\n      }\n    } else {\n      offsetValue = this.actionObj.action === 'drag' || this.resizeEdges.top ? this.actionObj.clone.offsetTop : this.actionObj.clone.offsetTop + this.actionObj.clone.offsetHeight;\n      timeIndicator.style.top = formatUnit(offsetValue);\n    }\n  };\n\n  ActionBase.prototype.getResourceElements = function (table) {\n    var _this = this;\n\n    return table.filter(function (element) {\n      return parseInt(element.getAttribute('data-group-index'), 10) === _this.actionObj.groupIndex;\n    });\n  };\n\n  ActionBase.prototype.getOriginalElement = function (element) {\n    var originalElement;\n    var guid = element.getAttribute('data-guid');\n    var isMorePopup = element.offsetParent && element.offsetParent.classList.contains(MORE_EVENT_POPUP_CLASS);\n\n    if (isMorePopup || this.parent.activeView.isTimelineView() || this.actionObj.action !== 'resize' && this.parent.virtualScrollModule) {\n      originalElement = [].slice.call(this.parent.element.querySelectorAll('[data-guid=\"' + guid + '\"]'));\n    } else {\n      var tr = closest(element, 'tr');\n\n      if (tr) {\n        originalElement = [].slice.call(tr.querySelectorAll('[data-guid=\"' + guid + '\"]'));\n      }\n    }\n\n    return originalElement;\n  };\n\n  ActionBase.prototype.createCloneElement = function (element) {\n    var cloneWrapper = createElement('div', {\n      innerHTML: element.outerHTML\n    });\n    var cloneElement = cloneWrapper.children[0];\n    var cloneClassLists = [CLONE_ELEMENT_CLASS];\n    cloneClassLists.push(this.actionObj.action === 'drag' ? DRAG_CLONE_CLASS : RESIZE_CLONE_CLASS);\n\n    if (this.parent.currentView === 'Month' || this.parent.currentView === 'TimelineMonth') {\n      cloneClassLists.push(MONTH_CLONE_ELEMENT_CLASS);\n    }\n\n    addClass([cloneElement], cloneClassLists);\n    addClass([element], EVENT_ACTION_CLASS);\n\n    if (!isNullOrUndefined(element.parentElement)) {\n      element.parentElement.appendChild(cloneElement);\n    }\n\n    cloneElement.style.width = formatUnit(cloneElement.offsetWidth - 2);\n    var dragElement = document.querySelector(this.parent.eventDragArea);\n\n    if (this.parent.eventDragArea && this.actionObj.action === 'drag' && dragElement) {\n      dragElement.appendChild(cloneElement);\n    }\n\n    setStyleAttribute(cloneElement, {\n      border: '0px'\n    });\n    return cloneElement;\n  };\n\n  ActionBase.prototype.removeCloneElementClasses = function () {\n    var elements = this.actionObj.originalElement;\n\n    if (this.parent.currentView === 'Month' || this.parent.currentView === 'TimelineYear' || this.parent.currentView === 'Day' || this.parent.currentView === 'Week' || this.parent.currentView === 'WorkWeek') {\n      elements = [].slice.call(this.parent.element.querySelectorAll('.' + EVENT_ACTION_CLASS));\n    }\n\n    removeClass(elements, EVENT_ACTION_CLASS);\n  };\n\n  ActionBase.prototype.removeCloneElement = function () {\n    this.actionObj.originalElement = [];\n    var dynamicEle = [].slice.call(this.parent.element.querySelectorAll('.e-dynamic-clone'));\n\n    for (var _i = 0, dynamicEle_1 = dynamicEle; _i < dynamicEle_1.length; _i++) {\n      var cloneEle = dynamicEle_1[_i];\n      remove(cloneEle);\n    }\n\n    for (var _a = 0, _b = this.actionObj.cloneElement; _a < _b.length; _a++) {\n      var cloneElement = _b[_a];\n\n      if (!isNullOrUndefined(cloneElement.parentNode)) {\n        remove(cloneElement);\n      }\n    }\n\n    this.actionObj.cloneElement = [];\n    var timeIndicator = this.parent.element.querySelector('.' + CLONE_TIME_INDICATOR_CLASS);\n\n    if (timeIndicator) {\n      remove(timeIndicator);\n    }\n  };\n\n  ActionBase.prototype.getCursorElement = function (e) {\n    var pages = this.parent.eventBase.getPageCoordinates(e);\n    return document.elementFromPoint(pages.clientX, pages.clientY);\n  };\n\n  ActionBase.prototype.autoScroll = function () {\n    var parent = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n    var yIsScrollable = parent.offsetHeight <= parent.scrollHeight;\n    var xIsScrollable = parent.offsetWidth <= parent.scrollWidth;\n    var yInBounds = yIsScrollable && parent.scrollTop >= 0 && parent.scrollTop + parent.offsetHeight <= parent.scrollHeight;\n    var xInBounds = xIsScrollable && parent.scrollLeft >= 0 && parent.scrollLeft + parent.offsetWidth <= parent.scrollWidth;\n\n    if (this.actionObj.action === 'resize' && this.scrollEdges.right && parent.scrollLeft + parent.offsetWidth > parent.scrollWidth) {\n      var tdCollections = [].slice.call(this.parent.getContentTable().querySelector('tr').children).length - 1;\n      var cellIndex = Math.ceil((this.actionObj.clone.offsetLeft + this.actionObj.clone.offsetWidth) / this.actionObj.cellWidth);\n      xInBounds = cellIndex === tdCollections;\n    }\n\n    if (yInBounds && (this.scrollEdges.top || this.scrollEdges.bottom)) {\n      parent.scrollTop += this.scrollEdges.top ? -this.actionObj.scroll.scrollBy : this.actionObj.scroll.scrollBy;\n\n      if (this.actionObj.action === 'resize') {\n        if (parent.scrollHeight !== parent.offsetHeight + parent.scrollTop && parent.scrollTop > 0) {\n          this.actionObj.Y += this.scrollEdges.top ? this.actionObj.scroll.scrollBy : -this.actionObj.scroll.scrollBy;\n        }\n      }\n    }\n\n    if (xInBounds && (this.scrollEdges.left || this.scrollEdges.right)) {\n      parent.scrollLeft += this.scrollEdges.left ? -this.actionObj.scroll.scrollBy : this.actionObj.scroll.scrollBy;\n\n      if (this.actionObj.action === 'resize') {\n        if (parent.scrollWidth !== parent.offsetWidth + parent.scrollLeft && parent.scrollLeft > 0) {\n          this.actionObj.X += this.scrollEdges.left ? this.actionObj.scroll.scrollBy : -this.actionObj.scroll.scrollBy;\n        }\n      }\n    }\n  };\n\n  ActionBase.prototype.autoScrollValidation = function () {\n    if (!this.actionObj.scroll.enable) {\n      return false;\n    }\n\n    var res = this.parent.boundaryValidation(this.actionObj.pageY, this.actionObj.pageX);\n    this.scrollEdges = res;\n    return res.bottom || res.top || res.left || res.right;\n  };\n\n  ActionBase.prototype.actionClass = function (type) {\n    if (type === 'addClass') {\n      addClass([this.parent.element], EVENT_ACTION_CLASS);\n    } else {\n      removeClass([this.parent.element], EVENT_ACTION_CLASS);\n    }\n  };\n\n  ActionBase.prototype.updateScrollPosition = function (e) {\n    var _this = this;\n\n    this.scrollEventArgs = e;\n\n    if (this.actionObj.scroll.enable && isNullOrUndefined(this.actionObj.scrollInterval)) {\n      this.actionObj.scrollInterval = window.setInterval(function () {\n        if (_this.autoScrollValidation() && !_this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {\n          if (_this.parent.activeView.isTimelineView() && _this.parent.activeViewOptions.group.resources.length > 0 && _this.actionObj.groupIndex < 0) {\n            return;\n          }\n\n          _this.autoScroll();\n\n          if (_this.actionObj.action === 'drag') {\n            _this.parent.dragAndDropModule.updateDraggingDateTime(_this.scrollEventArgs);\n          } else {\n            _this.parent.resizeModule.updateResizingDirection(_this.scrollEventArgs);\n          }\n        }\n      }, this.actionObj.scroll.timeDelay);\n    }\n  };\n\n  ActionBase.prototype.updateOriginalElement = function (cloneElement) {\n    var query = '[data-id=\"' + cloneElement.getAttribute('data-id') + '\"]';\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      query = query.concat('[data-group-index = \"' + cloneElement.getAttribute('data-group-index') + '\"]');\n    }\n\n    var elements = [].slice.call(this.parent.element.querySelectorAll(query));\n    addClass(elements, EVENT_ACTION_CLASS);\n    var eventWrappers = [].slice.call(this.parent.element.querySelectorAll('.' + CLONE_ELEMENT_CLASS));\n    removeClass(eventWrappers, EVENT_ACTION_CLASS);\n  };\n\n  ActionBase.prototype.getUpdatedEvent = function (startTime, endTime, eventObj) {\n    var event = JSON.parse(JSON.stringify(eventObj));\n    event[this.parent.eventFields.startTime] = startTime;\n    event[this.parent.eventFields.endTime] = endTime;\n    return event;\n  };\n\n  ActionBase.prototype.dynamicYearlyEventsRendering = function (event, isResize) {\n    if (isResize === void 0) {\n      isResize = false;\n    }\n\n    var appWidth = this.actionObj.cellWidth - 7;\n\n    if (isResize && (this.resizeEdges.left || this.resizeEdges.right)) {\n      appWidth = this.actionObj.cellWidth * event.count;\n    }\n\n    if (!isResize && this.parent.activeViewOptions.orientation === 'Horizontal' && this.parent.activeViewOptions.group.resources.length === 0) {\n      var eventObj = this.yearEvent.isSpannedEvent(event, event[this.parent.eventFields.startTime]);\n\n      if (eventObj[this.parent.eventFields.startTime].getTime() === eventObj[this.parent.eventFields.endTime].getTime()) {\n        eventObj.isSpanned.count = 1;\n      }\n\n      appWidth = eventObj.isSpanned.count * this.actionObj.cellWidth;\n    }\n\n    if (!isResize && this.parent.activeViewOptions.orientation === 'Vertical' && this.parent.activeViewOptions.group.resources.length !== 0) {\n      var eventObj = this.yearEvent.isSpannedEvent(event, event[this.parent.eventFields.startTime]);\n      appWidth = eventObj.isSpanned.count * this.actionObj.cellWidth;\n    }\n\n    var appointmentElement = this.createAppointmentElement(this.actionObj.groupIndex, event[this.parent.eventFields.subject]);\n    appointmentElement.setAttribute('drag', 'true');\n    addClass([appointmentElement], CLONE_ELEMENT_CLASS);\n    setStyleAttribute(appointmentElement, {\n      'width': appWidth + 'px',\n      'border': '0px',\n      'pointer-events': 'none',\n      'position': 'absolute',\n      'overflow': 'hidden',\n      'padding': '3px'\n    });\n\n    if (this.actionObj.clone.style.backgroundColor !== '') {\n      setStyleAttribute(appointmentElement, {\n        'backgroundColor': this.actionObj.clone.style.backgroundColor\n      });\n    }\n\n    var date = resetTime(event[this.parent.eventFields.startTime]).getTime();\n    var query = '.' + WORK_CELLS_CLASS + '[data-date=\"' + date + '\"]';\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      query = '.' + WORK_CELLS_CLASS + '[data-date=\"' + date + '\"][data-group-index=\"' + this.actionObj.groupIndex + '\"]';\n    }\n\n    var cellTd = this.parent.element.querySelector(query);\n\n    if (isNullOrUndefined(cellTd)) {\n      return;\n    }\n\n    if (isResize) {\n      var dateHeader = cellTd.querySelector('.' + DATE_HEADER_CLASS);\n      var appHeight = this.actionObj.cellHeight * event.count - (dateHeader ? dateHeader.offsetHeight : 0) - 7;\n\n      if (this.resizeEdges.right || this.resizeEdges.left) {\n        appHeight = parseInt(this.actionObj.clone.style.height, 10);\n      }\n\n      setStyleAttribute(appointmentElement, {\n        'height': appHeight + 'px'\n      });\n    }\n\n    this.renderDynamicElement(cellTd, appointmentElement, true);\n    this.actionObj.cloneElement.push(appointmentElement);\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  ActionBase.prototype.renderDynamicElement = function (cellTd, element, isAppointment) {\n    if (isAppointment === void 0) {\n      isAppointment = false;\n    }\n\n    if (cellTd.querySelector('.' + APPOINTMENT_WRAPPER_CLASS)) {\n      cellTd.querySelector('.' + APPOINTMENT_WRAPPER_CLASS).appendChild(element);\n    } else {\n      var wrapper = createElement('div', {\n        className: APPOINTMENT_WRAPPER_CLASS\n      });\n      wrapper.appendChild(element);\n      cellTd.appendChild(wrapper);\n    }\n  };\n\n  ActionBase.prototype.createAppointmentElement = function (resIndex, innerText) {\n    var appointmentWrapper = createElement('div', {\n      className: APPOINTMENT_CLASS,\n      innerHTML: innerText\n    });\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      appointmentWrapper.setAttribute('data-group-index', resIndex.toString());\n    }\n\n    return appointmentWrapper;\n  };\n\n  ActionBase.prototype.dynamicEventsRendering = function (event) {\n    var _this = this;\n\n    var dateRender = this.parent.activeView.renderDates;\n    var workCells = [].slice.call(this.parent.element.querySelectorAll('.' + WORK_CELLS_CLASS));\n    var workDays = this.parent.activeViewOptions.workDays;\n    var groupOrder;\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      var renderedResource = this.parent.virtualScrollModule && this.parent.virtualScrollModule.isHorizontalScroll ? this.parent.resourceBase.renderedResources : this.parent.resourceBase.lastResourceLevel;\n      var resources = renderedResource.filter(function (res) {\n        return res.groupIndex === _this.actionObj.groupIndex;\n      });\n      dateRender = resources[0].renderDates;\n      var elementSelector = \".\" + WORK_CELLS_CLASS + \"[data-group-index=\\\"\" + this.actionObj.groupIndex + \"\\\"]\";\n      workCells = [].slice.call(this.parent.element.querySelectorAll(elementSelector));\n      workDays = resources[0].workDays;\n      groupOrder = resources[0].groupOrder;\n    }\n\n    this.monthEvent.dateRender = dateRender;\n    this.monthEvent.getSlotDates(workDays);\n\n    if (this.resizeEdges.left || this.resizeEdges.right) {\n      var eventWrappers = [].slice.call(this.parent.element.querySelectorAll('.' + CLONE_ELEMENT_CLASS));\n\n      for (var _i = 0, eventWrappers_1 = eventWrappers; _i < eventWrappers_1.length; _i++) {\n        var wrapper = eventWrappers_1[_i];\n        remove(wrapper);\n      }\n    }\n\n    var spannedEvents = this.monthEvent.splitEvent(event, dateRender);\n\n    for (var _a = 0, spannedEvents_1 = spannedEvents; _a < spannedEvents_1.length; _a++) {\n      var event_1 = spannedEvents_1[_a];\n      var day = this.parent.getIndexOfDate(dateRender, resetTime(event_1[this.monthEvent.fields.startTime]));\n      var diffInDays = event_1.data.count;\n      var appWidth = diffInDays * this.actionObj.cellWidth - 7;\n      var appointmentElement = this.monthEvent.createAppointmentElement(event_1, this.actionObj.groupIndex, true);\n      appointmentElement.setAttribute('drag', 'true');\n      addClass([appointmentElement], CLONE_ELEMENT_CLASS);\n      this.monthEvent.applyResourceColor(appointmentElement, event_1, 'backgroundColor', groupOrder);\n      setStyleAttribute(appointmentElement, {\n        'width': appWidth + 'px',\n        'border': '0px',\n        'pointer-events': 'none'\n      });\n      var cellTd = workCells[parseInt(day.toString(), 10)];\n\n      if (cellTd && isNullOrUndefined(this.parent.eventDragArea)) {\n        this.monthEvent.renderElement(cellTd, appointmentElement, true);\n        this.actionObj.cloneElement.push(appointmentElement);\n      }\n    }\n  };\n\n  ActionBase.prototype.destroy = function () {\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    this.actionObj = {};\n    this.scrollArgs = {};\n    this.resizeEdges = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false\n    };\n    this.scrollEdges = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false\n    };\n  };\n\n  return ActionBase;\n}();\n\nvar __extends$14 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Schedule events resize actions\n */\n\n\nvar Resize =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$14(Resize, _super);\n\n  function Resize() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Resize.prototype.wireResizeEvent = function (element) {\n    var resizeElement = [].slice.call(element.querySelectorAll('.' + EVENT_RESIZE_CLASS));\n\n    for (var _i = 0, resizeElement_1 = resizeElement; _i < resizeElement_1.length; _i++) {\n      var element_1 = resizeElement_1[_i];\n      EventHandler.add(element_1, Browser.touchStartEvent, this.resizeStart, this);\n    }\n  };\n\n  Resize.prototype.resizeHelper = function () {\n    if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.activeViewOptions.group.allowGroupEdit) {\n      for (var i = 0, len = this.actionObj.originalElement.length; i < len; i++) {\n        var cloneElement = this.createCloneElement(this.actionObj.originalElement[parseInt(i.toString(), 10)]);\n        this.actionObj.cloneElement[parseInt(i.toString(), 10)] = cloneElement;\n\n        if (this.actionObj.element === this.actionObj.originalElement[parseInt(i.toString(), 10)]) {\n          this.actionObj.clone = cloneElement;\n        }\n      }\n    } else {\n      if (this.actionObj.element) {\n        this.actionObj.clone = this.createCloneElement(this.actionObj.element);\n      }\n\n      this.actionObj.cloneElement = [this.actionObj.clone];\n      this.actionObj.originalElement = [this.actionObj.element];\n    }\n  };\n\n  Resize.prototype.resizeStart = function (e) {\n    var _this = this;\n\n    this.actionObj.action = 'resize';\n    this.actionObj.slotInterval = this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount;\n    this.actionObj.interval = this.actionObj.slotInterval;\n    var resizeTarget = closest(e.target, '.' + EVENT_RESIZE_CLASS);\n    this.actionObj.element = closest(resizeTarget, '.' + APPOINTMENT_CLASS);\n    this.actionObj.event = this.parent.eventBase.getEventByGuid(this.actionObj.element.getAttribute('data-guid'));\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    var resizeArgs = {\n      cancel: false,\n      data: eventObj,\n      element: this.actionObj.element,\n      event: e,\n      interval: this.actionObj.interval,\n      scroll: {\n        enable: true,\n        scrollBy: 30,\n        timeDelay: 100\n      }\n    };\n    this.parent.trigger(resizeStart, resizeArgs, function (resizeEventArgs) {\n      if (resizeEventArgs.cancel) {\n        return;\n      }\n\n      _this.actionClass('addClass');\n\n      _this.parent.uiStateValues.action = true;\n      _this.resizeEdges = {\n        left: resizeTarget.classList.contains(LEFT_RESIZE_HANDLER),\n        right: resizeTarget.classList.contains(RIGHT_RESIZE_HANDLER),\n        top: resizeTarget.classList.contains(TOP_RESIZE_HANDLER),\n        bottom: resizeTarget.classList.contains(BOTTOM_RESIZE_HANDLER)\n      };\n      _this.actionObj.groupIndex = _this.parent.uiStateValues.isGroupAdaptive ? _this.parent.uiStateValues.groupIndex : 0;\n\n      var workCell = _this.parent.element.querySelector('.' + WORK_CELLS_CLASS).getBoundingClientRect();\n\n      _this.actionObj.cellWidth = workCell.width;\n      _this.actionObj.cellHeight = workCell.height;\n\n      var hRows = _this.parent.activeViewOptions.headerRows.map(function (row) {\n        return row.option;\n      });\n\n      if (_this.parent.activeView.isTimelineView() && hRows.length > 0 && ['Date', 'Hour'].indexOf(hRows.slice(-1)[0]) < 0) {\n        var tr = _this.parent.getContentTable().querySelector('tr');\n\n        var noOfDays = 0;\n        var tdCollections = [].slice.call(tr.children);\n\n        for (var _i = 0, tdCollections_1 = tdCollections; _i < tdCollections_1.length; _i++) {\n          var td = tdCollections_1[_i];\n          noOfDays += parseInt(td.getAttribute('colspan'), 10);\n        }\n\n        var trRect = tr.getBoundingClientRect();\n        _this.actionObj.cellWidth = trRect.width / noOfDays;\n        _this.actionObj.cellHeight = trRect.height;\n      }\n\n      var pages = _this.parent.eventBase.getPageCoordinates(e);\n\n      _this.actionObj.X = pages.pageX;\n      _this.actionObj.Y = pages.pageY;\n      _this.actionObj.groupIndex = parseInt(_this.actionObj.element.getAttribute('data-group-index') || '0', 10);\n      _this.actionObj.interval = resizeEventArgs.interval;\n      _this.actionObj.scroll = resizeEventArgs.scroll;\n      _this.actionObj.start = new Date(eventObj[_this.parent.eventFields.startTime].getTime());\n      _this.actionObj.end = new Date(eventObj[_this.parent.eventFields.endTime].getTime());\n      _this.actionObj.originalElement = _this.getOriginalElement(_this.actionObj.element);\n\n      if (_this.parent.currentView === 'Month') {\n        _this.daysVariation = -1;\n        _this.monthEvent = new MonthEvent(_this.parent);\n      }\n\n      var viewElement = _this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n\n      _this.scrollArgs = {\n        element: viewElement,\n        width: viewElement.scrollWidth,\n        height: viewElement.scrollHeight\n      };\n      EventHandler.add(document, Browser.touchMoveEvent, _this.resizing, _this);\n      EventHandler.add(document, Browser.touchEndEvent, _this.resizeStop, _this);\n    });\n  };\n\n  Resize.prototype.resizing = function (e) {\n    if (this.parent.quickPopup) {\n      this.parent.quickPopup.quickPopupHide();\n    }\n\n    if (this.parent.element.querySelectorAll('.' + RESIZE_CLONE_CLASS).length === 0) {\n      this.resizeHelper();\n    }\n\n    if (!isNullOrUndefined(e.target) && e.target.classList.contains(DISABLE_DATES)) {\n      return;\n    }\n\n    var pages = this.parent.eventBase.getPageCoordinates(e);\n\n    if (this.parent.currentView === 'Month' || this.parent.currentView === 'TimelineYear') {\n      var doc = document.documentElement;\n      var left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n      var top_1 = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n      this.actionObj.pageX = pages.pageX - left;\n      this.actionObj.pageY = pages.pageY - top_1;\n    } else {\n      this.actionObj.pageX = pages.pageX;\n      this.actionObj.pageY = pages.pageY;\n    }\n\n    this.updateScrollPosition(e);\n    this.updateResizingDirection(e);\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    var resizeArgs = {\n      cancel: false,\n      data: eventObj,\n      element: this.actionObj.element,\n      event: e,\n      startTime: this.actionObj.start,\n      endTime: this.actionObj.end\n    };\n\n    if (this.parent.group.resources.length > 0) {\n      resizeArgs.groupIndex = this.actionObj.groupIndex;\n    }\n\n    this.parent.trigger(resizing, resizeArgs);\n  };\n\n  Resize.prototype.updateResizingDirection = function (e) {\n    if (this.parent.currentView === 'Month' || this.parent.currentView === 'TimelineYear') {\n      this.monthResizing();\n      return;\n    }\n\n    var resizeValidation = this.resizeValidation(e);\n\n    if (this.resizeEdges.left) {\n      if (resizeValidation) {\n        var leftStyles = this.getLeftRightStyles(e, true);\n\n        if (parseInt(leftStyles.width, 10) < 1) {\n          return;\n        }\n\n        for (var _i = 0, _a = this.actionObj.cloneElement; _i < _a.length; _i++) {\n          var cloneElement = _a[_i];\n          setStyleAttribute(cloneElement, leftStyles);\n          addClass([cloneElement], LEFT_RESIZE_HANDLER);\n        }\n      }\n\n      this.horizontalResizing(!this.parent.enableRtl);\n    }\n\n    if (this.resizeEdges.right) {\n      if (resizeValidation) {\n        var rightStyles = this.getLeftRightStyles(e, false);\n\n        if (parseInt(rightStyles.width, 10) < 1) {\n          return;\n        }\n\n        for (var _b = 0, _c = this.actionObj.cloneElement; _b < _c.length; _b++) {\n          var cloneElement = _c[_b];\n          setStyleAttribute(cloneElement, rightStyles);\n          addClass([cloneElement], RIGHT_RESIZE_HANDLER);\n        }\n      }\n\n      this.horizontalResizing(this.parent.enableRtl);\n    }\n\n    if (this.resizeEdges.top) {\n      if (resizeValidation) {\n        var topStyles = this.getTopBottomStyles(e, true);\n\n        if (parseInt(topStyles.height, 10) < 1) {\n          return;\n        }\n\n        for (var _d = 0, _e = this.actionObj.cloneElement; _d < _e.length; _d++) {\n          var cloneElement = _e[_d];\n          setStyleAttribute(cloneElement, topStyles);\n          addClass([cloneElement], TOP_RESIZE_HANDLER);\n        }\n      }\n\n      this.verticalResizing(true);\n    }\n\n    if (this.resizeEdges.bottom) {\n      if (resizeValidation) {\n        var bottomStyles = this.getTopBottomStyles(e, false);\n\n        if (parseInt(bottomStyles.height, 10) < 1) {\n          return;\n        }\n\n        for (var _f = 0, _g = this.actionObj.cloneElement; _f < _g.length; _f++) {\n          var cloneElement = _g[_f];\n          setStyleAttribute(cloneElement, bottomStyles);\n          addClass([cloneElement], BOTTOM_RESIZE_HANDLER);\n        }\n      }\n\n      this.verticalResizing(false);\n    }\n  };\n\n  Resize.prototype.monthResizing = function () {\n    this.removeCloneElement();\n\n    if (isNullOrUndefined(this.actionObj.pageX) || isNullOrUndefined(this.actionObj.pageY)) {\n      return;\n    }\n\n    var td = document.elementFromPoint(this.actionObj.pageX, this.actionObj.pageY);\n\n    if (isNullOrUndefined(td)) {\n      return;\n    }\n\n    var resizeTime = this.parent.getDateFromElement(td);\n    var isSameCell = this.parent.activeViewOptions.group.resources.length > 0 ? parseInt(td.getAttribute('data-group-index'), 10) === this.actionObj.groupIndex : true;\n    var startTime = new Date(this.actionObj.event[this.parent.eventFields.startTime].getTime());\n    var endTime = new Date(this.actionObj.event[this.parent.eventFields.endTime].getTime());\n\n    if (!this.parent.enableRtl && this.resizeEdges.left || this.parent.enableRtl && this.resizeEdges.right || this.resizeEdges.top) {\n      startTime = resizeTime;\n    } else if (!this.parent.enableRtl && this.resizeEdges.right || this.parent.enableRtl && this.resizeEdges.left || this.resizeEdges.bottom) {\n      endTime = addDays(resizeTime, 1);\n    }\n\n    if (isSameCell && startTime < endTime) {\n      this.actionObj.start = startTime;\n      this.actionObj.end = endTime;\n      var event_1 = this.getUpdatedEvent(this.actionObj.start, this.actionObj.end, this.actionObj.event);\n\n      if (this.parent.currentView === 'TimelineYear') {\n        this.yearEventsRendering(event_1);\n      } else {\n        this.dynamicEventsRendering(event_1);\n      }\n\n      this.updateOriginalElement(this.actionObj.clone);\n    }\n  };\n\n  Resize.prototype.yearEventsRendering = function (event) {\n    var eventWrappers = [].slice.call(this.parent.element.querySelectorAll('.' + CLONE_ELEMENT_CLASS));\n\n    for (var _i = 0, eventWrappers_1 = eventWrappers; _i < eventWrappers_1.length; _i++) {\n      var wrapper = eventWrappers_1[_i];\n      remove(wrapper);\n    }\n\n    var endDate = new Date(event[this.parent.eventFields.endTime]);\n    var monthDiff = 0;\n\n    if (this.parent.activeViewOptions.group.resources.length === 0) {\n      monthDiff = this.getMonthDiff(event[this.parent.eventFields.startTime], addDays(endDate, -1));\n    }\n\n    for (var i = 0; i <= monthDiff; i++) {\n      var eventObj = void 0;\n\n      if (this.parent.activeViewOptions.group.resources.length === 0) {\n        eventObj = this.getEventCount(event, this.actionObj.start.getMonth() + i);\n      } else {\n        eventObj = extend({}, event, null, true);\n        endDate = this.resizeEdges.left || this.resizeEdges.right ? addDays(endDate, -1) : endDate;\n        eventObj.count = this.getMonthDiff(event[this.parent.eventFields.startTime], endDate) + 1;\n      }\n\n      this.dynamicYearlyEventsRendering(eventObj, true);\n    }\n  };\n\n  Resize.prototype.getMonthDiff = function (startDate, endDate) {\n    var months;\n    months = (endDate.getFullYear() - startDate.getFullYear()) * 12;\n    months -= startDate.getMonth();\n    months += endDate.getMonth();\n    return months <= 0 ? 0 : months;\n  };\n\n  Resize.prototype.getEventCount = function (eventObj, month) {\n    var eventData = extend({}, eventObj, null, true);\n    var eventStart = eventData[this.parent.eventFields.startTime];\n    var eventEnd = eventData[this.parent.eventFields.endTime];\n    var monthStart = new Date(this.parent.selectedDate.getFullYear(), month, 1);\n    var monthEnd = addDays(new Date(this.parent.selectedDate.getFullYear(), month + 1, 0), 1);\n    var count = 1;\n\n    if (eventStart.getTime() < monthStart.getTime()) {\n      eventData[this.parent.eventFields.startTime] = monthStart;\n    }\n\n    if (eventEnd.getTime() > monthEnd.getTime()) {\n      eventData[this.parent.eventFields.endTime] = monthEnd;\n    }\n\n    if (this.parent.activeViewOptions.group.resources.length === 0) {\n      count = Math.ceil((eventData[this.parent.eventFields.endTime].getTime() - eventData[this.parent.eventFields.startTime].getTime()) / MS_PER_DAY);\n    }\n\n    eventData.count = count;\n    return eventData;\n  };\n\n  Resize.prototype.resizeStop = function (e) {\n    var _this = this;\n\n    EventHandler.remove(document, Browser.touchMoveEvent, this.resizing);\n    EventHandler.remove(document, Browser.touchEndEvent, this.resizeStop);\n    clearInterval(this.actionObj.scrollInterval);\n    this.actionObj.scrollInterval = null;\n    this.removeCloneElementClasses();\n    this.removeCloneElement();\n    this.actionClass('removeClass');\n    this.parent.uiStateValues.action = false;\n    var resizeArgs = {\n      cancel: false,\n      data: this.getChangedData(),\n      element: this.actionObj.element,\n      event: e\n    };\n    this.parent.trigger(resizeStop, resizeArgs, function (resizeEventArgs) {\n      if (resizeEventArgs.cancel) {\n        return;\n      }\n\n      if (_this.parent.isSpecificResourceEvents()) {\n        _this.parent.crudModule.crudObj.sourceEvent = [_this.parent.resourceBase.lastResourceLevel[parseInt(resizeEventArgs.element.getAttribute('data-group-index'), 10)]];\n        _this.parent.crudModule.crudObj.targetEvent = _this.parent.crudModule.crudObj.sourceEvent;\n        _this.parent.crudModule.crudObj.isCrudAction = true;\n      }\n\n      _this.saveChangedData(resizeEventArgs);\n    });\n  };\n\n  Resize.prototype.verticalResizing = function (isTop) {\n    var offsetValue = this.actionObj.clone.offsetTop;\n\n    if (!isTop) {\n      offsetValue += this.actionObj.clone.offsetHeight;\n    }\n\n    var minutes = offsetValue / this.actionObj.cellHeight * this.actionObj.slotInterval;\n    var element = this.actionObj.clone.offsetParent;\n\n    if (isNullOrUndefined(element)) {\n      return;\n    }\n\n    var resizeTime = resetTime(this.parent.getDateFromElement(element));\n    resizeTime.setHours(this.parent.activeView.getStartHour().getHours());\n    resizeTime.setMinutes(minutes + this.parent.activeView.getStartHour().getMinutes());\n\n    if (isTop) {\n      this.actionObj.start = this.calculateIntervalTime(resizeTime);\n    } else {\n      this.actionObj.end = this.calculateIntervalTime(resizeTime);\n    }\n\n    this.updateTimePosition(resizeTime);\n  };\n\n  Resize.prototype.horizontalResizing = function (isLeft) {\n    var eventStart = new Date(this.actionObj.event[this.parent.eventFields.startTime].getTime());\n    var eventEnd = new Date(this.actionObj.event[this.parent.eventFields.endTime].getTime());\n    var resizeTime;\n    var isDateHeader = false;\n    var headerName = this.parent.currentView;\n    var isTimeViews = ['TimelineDay', 'TimelineWeek', 'TimelineWorkWeek'].indexOf(this.parent.currentView) > -1;\n    var isTimelineMonth = this.parent.currentView === 'TimelineMonth';\n    var isWithoutScale = isTimelineMonth || isTimeViews && !this.parent.activeViewOptions.timeScale.enable;\n\n    if (this.parent.activeView.isTimelineView()) {\n      var tr = this.parent.getContentTable().querySelector('tr');\n\n      if (this.parent.activeViewOptions.headerRows.length > 0) {\n        var rows = this.parent.activeViewOptions.headerRows.map(function (row) {\n          return row.option;\n        });\n        headerName = rows.slice(-1)[0];\n\n        if (isTimelineMonth && headerName === 'Hour') {\n          headerName = rows.slice(-2)[0] || 'Month';\n        }\n      }\n\n      resizeTime = isLeft ? eventStart : eventEnd;\n      var cellIndex = 0;\n      var tdCollections = [].slice.call(tr.children);\n      var isLastCell = false;\n      var pixelsPerMinute = this.actionObj.cellWidth / (this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount);\n      var offset = parseFloat(this.parent.enableRtl ? this.actionObj.clone.style.right : this.actionObj.clone.style.left);\n      offset = Math.round(offset / pixelsPerMinute) * pixelsPerMinute;\n\n      if (['Year', 'Month', 'Week', 'Date'].indexOf(headerName) !== -1) {\n        var noOfDays = 0;\n\n        for (var _i = 0, tdCollections_2 = tdCollections; _i < tdCollections_2.length; _i++) {\n          var td = tdCollections_2[_i];\n          noOfDays += parseInt(td.getAttribute('colspan'), 10);\n        }\n\n        var offsetValue = this.parent.enableRtl ? parseInt(this.actionObj.clone.style.right, 10) : parseInt(this.actionObj.clone.style.left, 10);\n        offsetValue = Math.round(offsetValue / this.actionObj.cellWidth) * this.actionObj.cellWidth;\n\n        if (!isLeft) {\n          offsetValue += this.actionObj.clone.getBoundingClientRect().width - this.actionObj.cellWidth;\n        }\n\n        cellIndex = Math.floor(offsetValue / Math.floor(tr.getBoundingClientRect().width / noOfDays));\n        isDateHeader = isTimeViews && headerName === 'Date';\n        cellIndex = isLeft ? cellIndex : isTimelineMonth ? cellIndex + 1 : cellIndex;\n        isLastCell = cellIndex === tdCollections.length;\n        cellIndex = cellIndex < 0 ? 0 : cellIndex >= noOfDays ? noOfDays - 1 : cellIndex;\n      } else {\n        var cellWidth = this.actionObj.cellWidth;\n        cellIndex = isLeft ? Math.floor(offset / this.actionObj.cellWidth) : Math.ceil((offset + (this.actionObj.clone.getBoundingClientRect().width - cellWidth)) / this.actionObj.cellWidth);\n\n        if (this.parent.enableRtl) {\n          var cellOffsetWidth = 0;\n\n          if (headerName === 'TimelineMonth' || !this.parent.activeViewOptions.timeScale.enable && !isTimelineMonth) {\n            cellOffsetWidth = this.actionObj.cellWidth;\n          }\n\n          var offsetWidth = Math.floor(offset / this.actionObj.cellWidth) * this.actionObj.cellWidth + (isLeft ? 0 : this.actionObj.clone.getBoundingClientRect().width - cellOffsetWidth);\n          cellIndex = Math.floor(offsetWidth / this.actionObj.cellWidth);\n        }\n\n        isLastCell = cellIndex === tdCollections.length;\n        cellIndex = this.getIndex(cellIndex);\n      }\n\n      var resizeDate = void 0;\n\n      if (['Year', 'Month', 'Week', 'Date'].indexOf(headerName) !== -1) {\n        resizeDate = new Date(this.parent.activeView.renderDates[parseInt(cellIndex.toString(), 10)].getTime());\n      } else {\n        resizeDate = this.parent.getDateFromElement(tr.children[parseInt(cellIndex.toString(), 10)]);\n      }\n\n      if (['TimelineMonth', 'Year', 'Month', 'Week', 'Date'].indexOf(headerName) !== -1 || !this.parent.activeViewOptions.timeScale.enable) {\n        resizeTime = new Date(resizeDate.setHours(resizeTime.getHours(), resizeTime.getMinutes(), resizeTime.getSeconds()));\n      } else {\n        if (!isLeft) {\n          offset += this.actionObj.clone.getBoundingClientRect().width;\n        }\n\n        var spanMinutes = Math.ceil(this.actionObj.slotInterval / this.actionObj.cellWidth * (offset - Math.floor(offset / this.actionObj.cellWidth) * this.actionObj.cellWidth));\n        spanMinutes = isLastCell || !isLeft && spanMinutes === 0 ? this.actionObj.slotInterval : spanMinutes;\n        resizeTime = new Date(resizeDate.getTime());\n        resizeTime.setMinutes(resizeTime.getMinutes() + spanMinutes);\n        this.updateTimePosition(resizeTime);\n      }\n    } else {\n      var cloneIndex = closest(this.actionObj.clone, 'td').cellIndex;\n      var originalWidth = Math.ceil((isLeft ? this.actionObj.element.getBoundingClientRect().width : 0) / this.actionObj.cellWidth) * this.actionObj.cellWidth;\n      var noOfDays = Math.ceil((this.actionObj.clone.getBoundingClientRect().width - originalWidth) / this.actionObj.cellWidth);\n      var tr = closest(this.actionObj.clone, 'tr');\n      var dayIndex = isLeft ? cloneIndex - noOfDays : cloneIndex + noOfDays - 1;\n      dayIndex = this.getIndex(dayIndex);\n      resizeTime = this.parent.getDateFromElement(tr.children[parseInt(dayIndex.toString(), 10)]);\n\n      if (isLeft) {\n        resizeTime.setHours(eventStart.getHours(), eventStart.getMinutes(), eventStart.getSeconds());\n      } else {\n        resizeTime.setHours(eventEnd.getHours(), eventEnd.getMinutes(), eventEnd.getSeconds());\n      }\n    }\n\n    var isNotHourSlot = ['TimelineMonth', 'Year', 'Month', 'Week', 'Date'].indexOf(headerName) !== -1 || !this.parent.activeViewOptions.timeScale.enable;\n\n    if (isLeft) {\n      if (eventEnd.getTime() - resizeTime.getTime() <= 0) {\n        resizeTime = isWithoutScale ? resetTime(eventEnd) : eventStart;\n      }\n\n      this.actionObj.start = !isNotHourSlot ? this.calculateIntervalTime(resizeTime) : resizeTime;\n    } else {\n      var isTimeScaleViews = isTimeViews && this.parent.activeViewOptions.timeScale.enable;\n      var resizeEnd = (!isTimeScaleViews || isDateHeader || isTimeViews && ['Week', 'Month', 'Year'].indexOf(headerName) > -1) && resizeTime.getHours() === 0 && resizeTime.getMinutes() === 0 ? addDays(resizeTime, 1) : resizeTime;\n\n      if (isWithoutScale && resizeEnd.getTime() - eventStart.getTime() <= 0) {\n        resizeEnd = addDays(resetTime(eventStart), 1);\n      }\n\n      this.actionObj.end = !isNotHourSlot ? this.calculateIntervalTime(resizeEnd) : resizeEnd;\n    }\n  };\n\n  Resize.prototype.getTopBottomStyles = function (e, isTop) {\n    var viewElement = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n    var slotInterval = this.actionObj.cellHeight / this.actionObj.slotInterval * this.actionObj.interval;\n    var clnHeight = isTop ? this.actionObj.element.offsetHeight + (this.actionObj.Y - this.actionObj.pageY) : this.actionObj.element.offsetHeight + (this.actionObj.pageY - this.actionObj.Y);\n    var clnTop = isTop ? this.actionObj.element.offsetTop - (this.actionObj.Y - this.actionObj.pageY) : this.actionObj.clone.offsetTop;\n    clnHeight = clnTop < 0 ? this.actionObj.clone.offsetHeight : this.actionObj.clone.offsetTop + this.actionObj.clone.offsetHeight > this.scrollArgs.height ? this.actionObj.clone.offsetHeight : clnHeight;\n    clnTop = clnTop < 0 ? 0 : clnTop;\n    clnTop = isTop ? Math.floor(clnTop / slotInterval) * slotInterval : clnTop;\n    clnHeight = clnTop + clnHeight >= viewElement.scrollHeight ? viewElement.scrollHeight - clnTop : Math.ceil(clnHeight / slotInterval) * slotInterval;\n\n    if (!isTop && this.actionObj.clone.offsetTop + clnHeight >= this.parent.getContentTable().offsetHeight) {\n      clnHeight = this.parent.getContentTable().offsetHeight - this.actionObj.clone.offsetTop;\n    }\n\n    var styles = {\n      height: formatUnit(clnHeight < this.actionObj.cellHeight ? Math.floor(clnHeight / slotInterval) * slotInterval : clnHeight),\n      top: formatUnit(clnHeight < this.actionObj.cellHeight && isTop ? Math.ceil(clnTop / slotInterval) * slotInterval : clnTop),\n      left: '0px',\n      right: '0px',\n      width: '100%'\n    };\n    return styles;\n  };\n\n  Resize.prototype.getLeftRightStyles = function (e, isLeft) {\n    var styles = {};\n    var isTimelineView = this.parent.activeView.isTimelineView();\n    var isTimeViews = ['TimelineDay', 'TimelineWeek', 'TimelineWorkWeek'].indexOf(this.parent.currentView) > -1 && this.parent.activeViewOptions.timeScale.enable;\n    var slotInterval = this.actionObj.cellWidth / this.actionObj.slotInterval * this.actionObj.interval;\n    var pageWidth = isLeft ? this.actionObj.X - this.actionObj.pageX : this.actionObj.pageX - this.actionObj.X;\n    var targetWidth = isTimelineView ? this.actionObj.element.getBoundingClientRect().width / this.actionObj.cellWidth * this.actionObj.cellWidth : this.parent.currentView === 'Month' ? this.actionObj.element.getBoundingClientRect().width : Math.ceil(this.actionObj.element.getBoundingClientRect().width / this.actionObj.cellWidth) * this.actionObj.cellWidth;\n    var offsetWidth = targetWidth + Math.ceil(pageWidth / this.actionObj.cellWidth) * this.actionObj.cellWidth;\n    var left = this.parent.enableRtl ? parseInt(this.actionObj.element.style.right, 10) : this.actionObj.clone.offsetLeft;\n\n    if (isTimeViews) {\n      offsetWidth = targetWidth + Math.ceil(pageWidth / slotInterval) * slotInterval;\n      offsetWidth = Math.round((left + offsetWidth) / slotInterval) * slotInterval - left;\n      this.actionObj.event[this.parent.eventFields.isAllDay] = false;\n    }\n\n    var width = !isLeft && offsetWidth + this.actionObj.clone.offsetLeft > this.scrollArgs.width ? this.actionObj.clone.getBoundingClientRect().width : offsetWidth < this.actionObj.cellWidth ? offsetWidth : offsetWidth;\n\n    if (this.parent.enableRtl) {\n      var rightValue = isTimelineView ? parseInt(this.actionObj.element.style.right, 10) : -(offsetWidth - this.actionObj.cellWidth);\n      rightValue = isTimelineView ? rightValue : isLeft ? 0 : rightValue > 0 ? 0 : rightValue;\n\n      if (isTimelineView && !isLeft) {\n        rightValue = Math.ceil((this.actionObj.element.offsetLeft + (this.actionObj.element.getBoundingClientRect().width + (this.actionObj.pageX - this.actionObj.X))) / slotInterval) * slotInterval;\n        rightValue = rightValue < 0 ? Math.abs(rightValue) : -rightValue;\n      }\n\n      rightValue = rightValue >= this.scrollArgs.width ? this.scrollArgs.width - this.actionObj.cellWidth : rightValue;\n      styles.right = formatUnit(rightValue);\n      width = width + rightValue > this.scrollArgs.width ? this.actionObj.clone.getBoundingClientRect().width : width;\n    } else {\n      var offsetLeft = isLeft ? this.actionObj.element.offsetLeft - (this.actionObj.X - this.actionObj.pageX) : this.parent.enableRtl ? this.actionObj.element.offsetLeft : 0;\n\n      if (isTimelineView) {\n        offsetLeft = isLeft ? offsetLeft : parseInt(this.actionObj.clone.style.left, 10);\n\n        if (this.parent.enableRtl) {\n          offsetLeft = !isLeft ? this.actionObj.pageX < this.actionObj.X - this.actionObj.clone.getBoundingClientRect().width ? parseInt(this.actionObj.clone.style.right, 10) : offsetLeft : offsetLeft;\n        } else {\n          offsetLeft = isLeft ? this.actionObj.pageX > this.actionObj.X + this.actionObj.clone.getBoundingClientRect().width && this.actionObj.clone.getBoundingClientRect().width === this.actionObj.cellWidth ? parseInt(this.actionObj.clone.style.left, 10) : offsetLeft : offsetLeft;\n        }\n      }\n\n      var leftValue = offsetLeft;\n      offsetLeft = isTimelineView ? isTimeViews ? isLeft ? Math.floor(offsetLeft / slotInterval) * slotInterval : offsetLeft : Math.floor(offsetLeft / this.actionObj.cellWidth) * this.actionObj.cellWidth : Math.ceil(Math.abs(offsetLeft) / this.actionObj.cellWidth) * this.actionObj.cellWidth;\n\n      if (offsetLeft < 0) {\n        offsetLeft = 0;\n        width = this.actionObj.clone.getBoundingClientRect().width;\n      }\n\n      var cloneWidth = Math.ceil(this.actionObj.clone.getBoundingClientRect().width / this.actionObj.cellWidth) * this.actionObj.cellWidth;\n\n      if (isLeft) {\n        styles.left = formatUnit(isTimelineView ? offsetLeft : isLeft ? leftValue < 0 ? -offsetLeft : Math.ceil((targetWidth - cloneWidth) / this.actionObj.cellWidth) * this.actionObj.cellWidth : offsetLeft);\n      }\n    }\n\n    styles.width = formatUnit(width);\n    return styles;\n  };\n\n  Resize.prototype.resizeValidation = function (e) {\n    var pages = this.parent.eventBase.getPageCoordinates(e);\n    var viewDimension = this.getContentAreaDimension();\n    var isTimeScale = this.parent.activeView.isTimelineView() && this.parent.activeViewOptions.timeScale.enable;\n    var cellWidth = this.actionObj.cellWidth;\n    var resizeValidation = false;\n\n    if (this.resizeEdges.left) {\n      if (pages.pageX < viewDimension.leftOffset && pages.pageX >= viewDimension.left && isTimeScale) {\n        cellWidth = 0;\n      }\n\n      resizeValidation = pages.pageX - cellWidth >= viewDimension.left;\n    }\n\n    if (this.resizeEdges.right) {\n      if (pages.pageX > viewDimension.rightOffset && pages.pageX <= viewDimension.right && isTimeScale) {\n        cellWidth = 0;\n      }\n\n      resizeValidation = pages.pageX + cellWidth <= viewDimension.right;\n    }\n\n    if (this.resizeEdges.top) {\n      resizeValidation = this.actionObj.clone.offsetTop >= viewDimension.top;\n    }\n\n    if (this.resizeEdges.bottom) {\n      resizeValidation = this.actionObj.clone.offsetTop + this.actionObj.clone.offsetHeight <= this.scrollArgs.height;\n    }\n\n    return resizeValidation;\n  };\n  /**\n   * Get module name\n   *\n   * @returns {string} Returns the module name..\n   */\n\n\n  Resize.prototype.getModuleName = function () {\n    return 'resize';\n  };\n\n  return Resize;\n}(ActionBase);\n\nvar __extends$16 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nvar EVENT_GAP$2 = 2;\n/**\n * Year view events render\n */\n\nvar YearEvent =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$16(YearEvent, _super);\n\n  function YearEvent(parent) {\n    var _this = _super.call(this, parent, 'day') || this;\n\n    _this.isResource = false;\n    return _this;\n  }\n\n  YearEvent.prototype.renderAppointments = function () {\n    if (this.parent.dragAndDropModule) {\n      this.parent.dragAndDropModule.setDragArea();\n    }\n\n    this.fields = this.parent.eventFields;\n    var elementSelector = this.parent.currentView === 'Year' ? '.' + APPOINTMENT_CLASS : '.' + APPOINTMENT_WRAPPER_CLASS + ',.' + MORE_INDICATOR_CLASS;\n    var eventWrappers = [].slice.call(this.parent.element.querySelectorAll(elementSelector));\n\n    for (var _i = 0, eventWrappers_1 = eventWrappers; _i < eventWrappers_1.length; _i++) {\n      var wrapper = eventWrappers_1[_i];\n      remove(wrapper);\n    }\n\n    this.renderedEvents = [];\n\n    if (this.parent.currentView === 'Year') {\n      this.yearViewEvents();\n    } else {\n      this.removeCellHeight();\n\n      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n        this.isResource = true;\n        this.timelineResourceEvents();\n      } else {\n        this.timelineYearViewEvents();\n      }\n    }\n\n    this.parent.renderTemplates();\n    this.parent.notify(contentReady, {});\n  };\n\n  YearEvent.prototype.yearViewEvents = function () {\n    var months = this.getMonths();\n\n    for (var _i = 0, months_1 = months; _i < months_1.length; _i++) {\n      var month = months_1[_i];\n      var queryString = \".e-month-calendar:nth-child(\" + (months.indexOf(month) + 1) + \") td.e-work-cells\";\n      var workCells = [].slice.call(this.parent.element.querySelectorAll(queryString));\n      var monthDate = new Date(this.parent.selectedDate.getFullYear(), month, 1);\n      var monthStart = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));\n      var monthEnd = this.parent.calendarUtil.getMonthEndDate(new Date(monthDate.getTime()));\n      var startDate = getWeekFirstDate(monthStart, this.parent.firstDayOfWeek);\n      var endDate = addDays(getWeekLastDate(monthEnd, this.parent.firstDayOfWeek), 1);\n\n      for (var index = 0; startDate.getTime() < endDate.getTime(); index++) {\n        var start = resetTime(new Date(startDate.getTime()));\n        var end = addDays(new Date(start.getTime()), 1);\n        startDate = addDays(new Date(startDate.getTime()), 1);\n\n        if (!this.parent.isMinMaxDate(start)) {\n          continue;\n        }\n\n        var filterEvents = this.parent.eventBase.filterEvents(start, end);\n\n        if (filterEvents.length > 0) {\n          var workCell = workCells[parseInt(index.toString(), 10)];\n\n          if (workCell) {\n            workCell.appendChild(createElement('div', {\n              className: APPOINTMENT_CLASS\n            }));\n          }\n        }\n      }\n    }\n  };\n\n  YearEvent.prototype.timelineYearViewEvents = function () {\n    var _this = this;\n\n    var workCell = this.parent.element.querySelector('.' + WORK_CELLS_CLASS + ':not(.' + OTHERMONTH_CLASS + ')');\n    this.cellWidth = workCell.getBoundingClientRect().width;\n    this.cellHeader = getOuterHeight(workCell.querySelector('.' + DATE_HEADER_CLASS));\n    var eventTable = this.parent.element.querySelector('.' + EVENT_TABLE_CLASS);\n    this.eventHeight = getElementHeightFromClass(eventTable, APPOINTMENT_CLASS);\n    var wrapperCollection = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CONTAINER_CLASS));\n    var months = this.getMonths();\n    var groupIndex = this.parent.activeViewOptions.group.resources.length > 0 && this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : undefined;\n\n    for (var row = 0; row < months.length; row++) {\n      var wrapper = wrapperCollection[parseInt(row.toString(), 10)];\n      var td = row + 1;\n      var eventWrapper = createElement('div', {\n        className: APPOINTMENT_WRAPPER_CLASS\n      });\n      wrapper.appendChild(eventWrapper);\n      var monthStart = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(row.toString(), 10)], 1);\n      var monthEnd = new Date(monthStart.getFullYear(), monthStart.getMonth() + 1, 0);\n      var dayIndex = monthStart.getDay();\n      var isSpannedCollection = [];\n\n      if (this.parent.activeViewOptions.orientation === 'Horizontal') {\n        this.renderedEvents = [];\n      }\n\n      while (monthStart.getTime() <= monthEnd.getTime()) {\n        var leftValue = void 0;\n        var rightValue = void 0;\n\n        if (this.parent.activeViewOptions.orientation === 'Vertical') {\n          var wrapper_1 = wrapperCollection[parseInt(dayIndex.toString(), 10)];\n          td = dayIndex + 1;\n          eventWrapper = wrapper_1.querySelector('.' + APPOINTMENT_WRAPPER_CLASS);\n\n          if (!eventWrapper) {\n            eventWrapper = createElement('div', {\n              className: APPOINTMENT_WRAPPER_CLASS\n            });\n            wrapper_1.appendChild(eventWrapper);\n          }\n\n          if (this.parent.enableRtl) {\n            rightValue = row * this.cellWidth;\n          } else {\n            leftValue = row * this.cellWidth;\n          }\n        } else {\n          if (this.parent.enableRtl) {\n            rightValue = (dayIndex + monthStart.getDate() - 1) * this.cellWidth;\n          } else {\n            leftValue = (dayIndex + monthStart.getDate() - 1) * this.cellWidth;\n          }\n        }\n\n        var rowTd = this.parent.element.querySelector(\".e-content-wrap tr:nth-child(\" + td + \") td\");\n        this.cellHeight = rowTd.offsetHeight;\n        var dayStart = resetTime(new Date(monthStart.getTime()));\n        var dayEnd = addDays(new Date(dayStart.getTime()), 1);\n        var resource = void 0;\n\n        if (this.parent.uiStateValues.isGroupAdaptive) {\n          resource = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];\n        }\n\n        var dayEvents = this.parent.eventBase.filterEvents(dayStart, dayEnd, undefined, resource);\n        dayEvents = this.parent.eventBase.sortByDateTime(dayEvents);\n\n        var _loop_1 = function (index, count) {\n          var eventData = extend({}, dayEvents[parseInt(index.toString(), 10)], null, true);\n          this_1.updateSpannedEvents(eventData, dayStart, dayEnd);\n          var overlapIndex = this_1.getIndex(dayStart);\n          eventData.Index = overlapIndex;\n          var availedHeight = this_1.cellHeader + this_1.eventHeight * (overlapIndex + 1) + EVENT_GAP$2 + this_1.moreIndicatorHeight;\n          var appArea = this_1.cellHeight - this_1.cellHeader - this_1.moreIndicatorHeight;\n          var renderedAppCount = Math.floor(appArea / (this_1.eventHeight + EVENT_GAP$2));\n          var moreIndicatorCount = count - renderedAppCount <= 0 ? 1 : count - renderedAppCount;\n\n          if (this_1.parent.activeViewOptions.orientation === 'Horizontal') {\n            var isRendered = this_1.renderedEvents.filter(function (eventObj) {\n              return eventObj.Guid === eventData.Guid;\n            });\n            var isSpanned = isSpannedCollection.filter(function (eventObj) {\n              return eventObj.Guid === eventData.Guid;\n            });\n\n            if (isRendered.length > 0 && isRendered[0].MoreIndicator || isSpanned.length > 0 && isSpanned[0].MoreIndicator) {\n              var moreIndex = this_1.parent.activeViewOptions.orientation === 'Horizontal' ? row : dayIndex;\n              this_1.renderMoreIndicator(eventWrapper, moreIndicatorCount, dayStart, moreIndex, leftValue, rightValue, groupIndex);\n              return \"continue\";\n            } else if (isRendered.length > 0 || isSpanned.length > 0) {\n              return \"continue\";\n            }\n          }\n\n          if (this_1.parent.rowAutoHeight || this_1.cellHeight > availedHeight) {\n            this_1.renderEvent(eventWrapper, eventData, row, leftValue, rightValue, monthStart, dayIndex);\n            this_1.updateCellHeight(rowTd, availedHeight);\n            isSpannedCollection.push(eventData);\n          } else {\n            var moreIndex = this_1.parent.activeViewOptions.orientation === 'Horizontal' ? row : dayIndex;\n            this_1.renderMoreIndicator(eventWrapper, moreIndicatorCount, dayStart, moreIndex, leftValue, rightValue, groupIndex);\n\n            if (this_1.parent.activeViewOptions.orientation === 'Horizontal') {\n              eventData.MoreIndicator = true;\n              this_1.renderedEvents.push(eventData);\n              isSpannedCollection.push(eventData);\n            }\n          }\n        };\n\n        var this_1 = this;\n\n        for (var index = 0, count = dayEvents.length; index < count; index++) {\n          _loop_1(index, count);\n        }\n\n        monthStart = addDays(new Date(monthStart.getTime()), 1);\n\n        if (this.parent.activeViewOptions.orientation === 'Vertical') {\n          dayIndex++;\n          this.renderedEvents = [];\n        }\n      }\n    }\n\n    if (this.parent.rowAutoHeight && this.parent.activeViewOptions.orientation === 'Vertical') {\n      var appContainer = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CONTAINER_CLASS));\n      var tr_1 = [].slice.call(this.parent.element.querySelectorAll('.' + CONTENT_TABLE_CLASS + ' tbody tr'));\n      appContainer.forEach(function (ele, index) {\n        var app = [].slice.call(ele.querySelectorAll('.' + APPOINTMENT_CLASS));\n        var appTop = tr_1[parseInt(index.toString(), 10)].offsetTop + _this.cellHeader + EVENT_GAP$2;\n        app.forEach(function (app) {\n          var overlap = parseInt(app.getAttribute('data-index'), 10);\n          app.style.top = appTop + overlap * _this.eventHeight + 'px';\n          app.removeAttribute('data-index');\n        });\n      });\n    }\n  };\n\n  YearEvent.prototype.updateSpannedEvents = function (eventObj, dayStart, dayEnd) {\n    var isLeftRightResize = this.isResource && this.parent.activeViewOptions.orientation === 'Vertical' || !this.isResource && this.parent.activeViewOptions.orientation === 'Horizontal';\n    var data = {\n      isLeft: true,\n      isRight: true,\n      isBottom: true,\n      isTop: true\n    };\n\n    if (dayStart.getTime() <= eventObj[this.fields.startTime].getTime()) {\n      if (isLeftRightResize) {\n        data.isLeft = false;\n      } else {\n        data.isTop = false;\n      }\n    }\n\n    if (dayEnd.getTime() >= eventObj[this.fields.endTime].getTime() || isLeftRightResize && !this.isResource && addDays(dayEnd, -1).getMonth() === eventObj[this.fields.endTime].getMonth() || isLeftRightResize && this.isResource && dayEnd.getTime() <= eventObj[this.fields.endTime].getTime()) {\n      if (isLeftRightResize) {\n        data.isRight = false;\n      } else {\n        data.isBottom = false;\n      }\n    }\n\n    eventObj.data = data;\n  };\n\n  YearEvent.prototype.timelineResourceEvents = function () {\n    var _this = this;\n\n    var contentTable = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n    var isVerticalScrollbarAvail = contentTable.offsetWidth > contentTable.clientWidth;\n    var workCell = this.parent.element.querySelector('.' + WORK_CELLS_CLASS);\n    this.cellWidth = workCell.getBoundingClientRect().width;\n    this.cellHeader = 0;\n    var eventTable = this.parent.element.querySelector('.' + EVENT_TABLE_CLASS);\n    this.eventHeight = getElementHeightFromClass(eventTable, APPOINTMENT_CLASS);\n    var wrapperCollection = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CONTAINER_CLASS));\n    var resources = this.parent.uiStateValues.isGroupAdaptive ? [this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex]] : this.parent.activeViewOptions.allowVirtualScrolling ? this.parent.resourceBase.renderedResources : this.parent.resourceBase.lastResourceLevel;\n    var months = this.getMonths();\n\n    if (this.parent.activeViewOptions.orientation === 'Horizontal') {\n      for (var month = 0; month < months.length; month++) {\n        var monthStart = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(month.toString(), 10)], 1);\n\n        for (var i = 0, len = resources.length; i < len; i++) {\n          this.renderedEvents = [];\n          this.renderResourceEvent(wrapperCollection[parseInt(month.toString(), 10)], resources[parseInt(i.toString(), 10)], month, i, monthStart);\n        }\n      }\n    } else {\n      for (var i = 0, len = resources.length; i < len; i++) {\n        this.renderedEvents = [];\n\n        for (var month = 0; month < months.length; month++) {\n          var monthStart = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(month.toString(), 10)], 1);\n          this.renderResourceEvent(wrapperCollection[parseInt(i.toString(), 10)], resources[parseInt(i.toString(), 10)], month, i, monthStart);\n        }\n      }\n    }\n\n    if (this.parent.rowAutoHeight && !isVerticalScrollbarAvail && contentTable.offsetWidth > contentTable.clientWidth) {\n      var appointments = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CLASS));\n      appointments.forEach(function (ele) {\n        ele.style.removeProperty('left');\n        ele.style.removeProperty('right');\n      });\n      var appContainer = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CONTAINER_CLASS));\n      var conTable_1 = this.parent.element.querySelector('.' + CONTENT_TABLE_CLASS);\n      var tr_2 = [].slice.call(conTable_1.querySelectorAll('tbody tr'));\n      appContainer.forEach(function (ele, index) {\n        var appWrapper = [].slice.call(ele.children);\n        var row = tr_2[parseInt(index.toString(), 10)];\n        appWrapper.forEach(function (appWrap, cellIndex) {\n          var td = row.querySelector(\"td:nth-child(\" + (cellIndex + 1) + \")\");\n          var app = [].slice.call(appWrap.children);\n          var width = td.getBoundingClientRect().width;\n          var left = td.offsetLeft;\n\n          if (_this.parent.enableRtl) {\n            var right_1 = conTable_1.offsetWidth - left - td.offsetWidth;\n            app.forEach(function (app) {\n              app.style.width = Math.floor(parseInt(app.style.width, 10) / width) * width + 'px';\n              app.style.right = right_1 + 'px';\n            });\n          } else {\n            app.forEach(function (app) {\n              app.style.width = Math.floor(parseInt(app.style.width, 10) / width) * width + 'px';\n              app.style.left = left + 'px';\n            });\n          }\n        });\n      });\n    }\n  };\n\n  YearEvent.prototype.renderResourceEvent = function (wrapper, resource, month, index, monthStart) {\n    var eventWrapper = createElement('div', {\n      className: APPOINTMENT_WRAPPER_CLASS\n    });\n    wrapper.appendChild(eventWrapper);\n    var monthEnd = addDays(lastDateOfMonth(new Date(monthStart.getTime())), 1);\n    var eventDatas = this.parent.eventBase.filterEvents(monthStart, monthEnd, undefined, resource);\n    var rowIndex = this.parent.activeViewOptions.orientation === 'Vertical' ? index : month;\n    var td = this.parent.element.querySelector(\".e-content-wrap tr:nth-child(\" + (rowIndex + 1) + \") td\");\n    this.cellHeight = td.offsetHeight;\n    this.groupOrder = resource.groupOrder;\n    var isSpannedCollection = [];\n\n    var _loop_2 = function (a) {\n      var data = eventDatas[parseInt(a.toString(), 10)];\n      var overlapIndex = void 0;\n      var eventData = extend({}, data, null, true);\n\n      if (this_2.parent.activeViewOptions.group.resources.length > 0) {\n        var eventObj = this_2.isSpannedEvent(eventData, monthStart);\n        overlapIndex = this_2.getIndex(eventObj[this_2.fields.startTime]);\n        eventData.Index = overlapIndex;\n      } else {\n        overlapIndex = this_2.getIndex(eventData[this_2.fields.startTime]);\n        eventData.Index = overlapIndex;\n      }\n\n      var availedHeight = this_2.cellHeader + this_2.eventHeight * (a + 1) + EVENT_GAP$2 + this_2.moreIndicatorHeight;\n      var leftValue = this_2.parent.activeViewOptions.orientation === 'Vertical' ? month * this_2.cellWidth : index * this_2.cellWidth;\n\n      if (!this_2.parent.isMinMaxDate(eventData[this_2.fields.startTime])) {\n        return {\n          value: void 0\n        };\n      }\n\n      if (this_2.parent.activeViewOptions.orientation === 'Vertical' && this_2.parent.activeViewOptions.group.resources.length > 0) {\n        var isRendered = this_2.renderedEvents.filter(function (eventObj) {\n          return eventObj.Guid === eventData.Guid;\n        });\n        var isSpanned = isSpannedCollection.filter(function (eventObj) {\n          return eventObj.Guid === eventData.Guid;\n        });\n\n        if (isRendered.length > 0 || isSpanned.length > 0) {\n          return \"continue\";\n        }\n      }\n\n      if (this_2.parent.rowAutoHeight || this_2.cellHeight > availedHeight) {\n        this_2.renderEvent(eventWrapper, eventData, month, leftValue, leftValue, monthStart, index);\n        this_2.updateCellHeight(td, availedHeight);\n        isSpannedCollection.push(eventData);\n      } else {\n        var moreIndex = this_2.parent.activeViewOptions.orientation === 'Horizontal' ? month : index;\n        this_2.renderMoreIndicator(eventWrapper, eventDatas.length - a, monthStart, moreIndex, leftValue, leftValue, index);\n\n        if (this_2.parent.activeViewOptions.orientation === 'Horizontal') {\n          for (var i = index; i < eventDatas.length; i++) {\n            this_2.renderedEvents.push(extend({}, eventDatas[parseInt(i.toString(), 10)], {\n              Index: overlapIndex + i\n            }, true));\n          }\n        }\n\n        return \"break\";\n      }\n    };\n\n    var this_2 = this;\n\n    for (var a = 0; a < eventDatas.length; a++) {\n      var state_1 = _loop_2(a);\n\n      if (typeof state_1 === \"object\") return state_1.value;\n      if (state_1 === \"break\") break;\n    }\n  }; // eslint-disable-next-line max-len\n\n\n  YearEvent.prototype.renderEvent = function (wrapper, eventData, row, left, right, monthDate, rowIndex) {\n    var _this = this;\n\n    var eventObj = this.isSpannedEvent(eventData, monthDate);\n    var wrap = this.createEventElement(eventObj);\n    var width;\n    var index;\n\n    if (eventObj.isSpanned.count === 1) {\n      var endTime = addDays(eventObj[this.fields.endTime], -1);\n      eventObj[this.fields.endTime] = endTime > eventObj[this.fields.startTime] ? endTime : eventObj[this.fields.endTime];\n    }\n\n    if (eventObj[this.fields.startTime] > eventObj[this.fields.endTime]) {\n      return;\n    }\n\n    if (this.parent.activeViewOptions.orientation === 'Horizontal') {\n      index = row + 1;\n\n      if (eventObj[this.fields.startTime].getTime() === eventObj[this.fields.endTime].getTime()) {\n        eventObj.isSpanned.count = 1;\n      }\n\n      width = eventObj.isSpanned.count * this.cellWidth;\n    } else {\n      index = rowIndex + 1;\n      width = this.isResource ? eventObj.isSpanned.count * this.cellWidth : this.cellWidth;\n    }\n\n    var rowTd = this.parent.element.querySelector(\".e-content-wrap tr:nth-child(\" + index + \") td\");\n    var top = rowTd.offsetTop + this.cellHeader + this.eventHeight * eventObj.Index + EVENT_GAP$2;\n    setStyleAttribute(wrap, {\n      'width': width + 'px',\n      'height': this.eventHeight + 'px',\n      'left': left + 'px',\n      'right': right + 'px',\n      'top': top + 'px'\n    });\n\n    if (!this.isResource && this.parent.rowAutoHeight && this.parent.activeViewOptions.orientation === 'Vertical') {\n      wrap.setAttribute('data-index', eventObj.Index.toString());\n    }\n\n    var args = {\n      data: eventObj,\n      element: wrap,\n      cancel: false,\n      type: 'event'\n    };\n    this.parent.trigger(eventRendered, args, function (eventArgs) {\n      if (!eventArgs.cancel) {\n        wrapper.appendChild(wrap);\n\n        _this.wireAppointmentEvents(wrap, eventObj);\n\n        if (_this.parent.activeViewOptions.group.resources.length > 0) {\n          _this.renderedEvents.push(extend({}, eventObj, null, true));\n        } else if (_this.parent.activeViewOptions.orientation === 'Vertical') {\n          _this.renderedEvents.push(extend({}, eventObj, null, true));\n        } else if ((eventObj.isSpanned.isRight || eventObj.isSpanned.isLeft) && _this.parent.activeViewOptions.orientation === 'Horizontal' || !eventObj.isSpanned.isRight) {\n          _this.renderedEvents.push(extend({}, eventObj, null, true));\n        }\n      }\n    });\n  }; // eslint-disable-next-line max-len\n\n\n  YearEvent.prototype.renderMoreIndicator = function (wrapper, count, startDate, row, left, right, index) {\n    if (this.parent.activeViewOptions.group.resources.length === 0 && wrapper.querySelector('[data-start-date=\"' + startDate.getTime() + '\"]')) {\n      return;\n    }\n\n    var endDate;\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      endDate = addDays(lastDateOfMonth(new Date(startDate.getTime())), 1);\n    } else {\n      endDate = addDays(new Date(startDate.getTime()), 1);\n    }\n\n    var moreIndicator = this.getMoreIndicatorElement(count, startDate, endDate);\n    var rowTr = this.parent.element.querySelector(\".e-content-wrap tr:nth-child(\" + (row + 1) + \")\");\n    var top = rowTr.offsetTop + (this.cellHeight - this.moreIndicatorHeight);\n    left = Math.floor(left / this.cellWidth) * this.cellWidth;\n    right = Math.floor(right / this.cellWidth) * this.cellWidth;\n    setStyleAttribute(moreIndicator, {\n      'width': this.cellWidth + 'px',\n      'left': left + 'px',\n      'right': right + 'px',\n      'top': top + 'px'\n    });\n\n    if (!isNullOrUndefined(index)) {\n      moreIndicator.setAttribute('data-group-index', index.toString());\n    }\n\n    wrapper.appendChild(moreIndicator);\n    EventHandler.add(moreIndicator, 'click', this.moreIndicatorClick, this);\n  };\n\n  YearEvent.prototype.createEventElement = function (record) {\n    var eventSubject = record[this.fields.subject] || this.parent.eventSettings.fields.subject.default || this.parent.localeObj.getConstant('addTitle');\n    var eventWrapper = createElement('div', {\n      className: APPOINTMENT_CLASS,\n      attrs: {\n        'data-id': 'Appointment_' + record[this.fields.id],\n        'data-guid': record.Guid,\n        'role': 'button',\n        'tabindex': '0',\n        'aria-disabled': this.parent.eventBase.getReadonlyAttribute(record),\n        'aria-label': this.parent.getAnnouncementString(record)\n      }\n    });\n\n    if (this.cssClass) {\n      addClass([eventWrapper], this.cssClass);\n    }\n\n    if (record[this.fields.isReadonly]) {\n      addClass([eventWrapper], READ_ONLY);\n    }\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      var resIndex = this.getGroupIndexFromEvent(record);\n      eventWrapper.setAttribute('data-group-index', resIndex.toString());\n    }\n\n    var templateElement = [];\n    var eventObj = extend({}, record, null, true);\n\n    if (this.parent.activeViewOptions.eventTemplate) {\n      var templateId = this.parent.element.id + '_' + this.parent.activeViewOptions.eventTemplateName + 'eventTemplate';\n      templateElement = this.parent.getAppointmentTemplate()(eventObj, this.parent, 'eventTemplate', templateId, false);\n    } else {\n      var locationEle = record[this.fields.location] || this.parent.eventSettings.fields.location.default || '';\n      var subjectEle = createElement('div', {\n        className: SUBJECT_CLASS,\n        innerHTML: eventSubject + (locationEle ? ';&nbsp' + locationEle : '')\n      });\n      var startTimeEle = createElement('div', {\n        className: APPOINTMENT_TIME + (this.parent.isAdaptive ? ' ' + DISABLE_CLASS : ''),\n        innerHTML: this.parent.getTimeString(eventObj[this.fields.startTime])\n      });\n      var endTimeEle = createElement('div', {\n        className: APPOINTMENT_TIME + (this.parent.isAdaptive ? ' ' + DISABLE_CLASS : ''),\n        innerHTML: this.parent.getTimeString(eventObj[this.fields.endTime])\n      });\n      addClass([subjectEle], 'e-text-center');\n\n      if (record[this.fields.isAllDay]) {\n        templateElement = [subjectEle];\n      } else if (!eventObj.isLeft && !eventObj.isRight) {\n        templateElement = [startTimeEle, subjectEle, endTimeEle];\n      } else {\n        if (!eventObj.isLeft) {\n          templateElement.push(startTimeEle);\n        }\n\n        templateElement.push(subjectEle);\n\n        if (!eventObj.isRight) {\n          templateElement.push(endTimeEle);\n        }\n      }\n    }\n\n    var appointmentDetails = createElement('div', {\n      className: APPOINTMENT_DETAILS\n    });\n    append(templateElement, appointmentDetails);\n    eventWrapper.appendChild(appointmentDetails);\n    this.parent.eventBase.renderSpannedIcon(eventWrapper, record.isSpanned);\n    this.renderResizeHandler(eventWrapper, record.data, record[this.fields.isReadonly]);\n    this.applyResourceColor(eventWrapper, eventObj, 'backgroundColor', this.groupOrder);\n    return eventWrapper;\n  };\n\n  YearEvent.prototype.isSpannedEvent = function (eventObj, monthDate) {\n    var monthStart = new Date(monthDate.getFullYear(), monthDate.getMonth(), 1);\n    var monthEnd = addDays(new Date(monthDate.getFullYear(), monthDate.getMonth() + 1, 0), 1);\n    var eventData = extend({}, eventObj, null, true);\n    var eventStart = eventData[this.fields.startTime];\n    var eventEnd = eventData[this.fields.endTime];\n    var isSpanned = {\n      isLeft: false,\n      isRight: false,\n      count: 1\n    };\n    var yearStart = new Date(this.parent.selectedDate.getFullYear(), this.parent.firstMonthOfYear, 1);\n    var yearEnd = addMonths(yearStart, this.parent.monthsCount);\n\n    if (this.isResource) {\n      this.updateSpannedEvents(eventObj, monthStart, monthEnd);\n    }\n\n    if (this.parent.activeViewOptions.orientation === 'Vertical' && this.parent.activeViewOptions.group.resources.length > 0) {\n      this.updateSpannedEventDetails(eventStart, eventEnd, yearStart, yearEnd, eventData, isSpanned);\n      var originalStartTime = eventData[this.fields.startTime];\n      var originalEndTime = new Date(eventData[this.fields.endTime] - 1);\n      isSpanned.count = originalEndTime.getMonth() - originalStartTime.getMonth() + this.parent.monthsCount * (originalEndTime.getFullYear() - originalStartTime.getFullYear()) + 1;\n    } else {\n      this.updateSpannedEventDetails(eventStart, eventEnd, monthStart, monthEnd, eventData, isSpanned);\n\n      if (this.parent.activeViewOptions.group.resources.length === 0 || this.parent.uiStateValues.isGroupAdaptive) {\n        var end = resetTime(eventData[this.fields.endTime]).getTime();\n        var start = resetTime(eventData[this.fields.startTime]).getTime();\n\n        if (eventObj[this.fields.isAllDay] && end === eventObj[this.fields.endTime].getTime() || isSpanned.isRight) {\n          end = addDays(new Date(end), -1).getTime();\n        }\n\n        isSpanned.count = Math.ceil((end - start) / MS_PER_DAY) + 1;\n      }\n    }\n\n    eventData.isSpanned = isSpanned;\n\n    if (resetTime(eventStart).getTime() < resetTime(this.parent.minDate).getTime()) {\n      eventData[this.fields.startTime] = this.parent.minDate;\n    }\n\n    if (resetTime(eventEnd).getTime() > resetTime(this.parent.maxDate).getTime()) {\n      eventData[this.fields.endTime] = this.parent.maxDate;\n    }\n\n    return eventData;\n  };\n\n  YearEvent.prototype.updateSpannedEventDetails = function (eventStart, eventEnd, viewStart, viewEnd, eventObj, isSpanned) {\n    if (eventStart.getTime() < viewStart.getTime()) {\n      eventObj[this.fields.startTime] = viewStart;\n      isSpanned.isLeft = true;\n    }\n\n    if (eventEnd.getTime() > viewEnd.getTime()) {\n      eventObj[this.fields.endTime] = viewEnd;\n      isSpanned.isRight = true;\n    }\n  };\n\n  YearEvent.prototype.getOverlapEvents = function (date, appointments) {\n    var appointmentsList = [];\n    var dateStart;\n    var dateEnd;\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      var monthStart = this.parent.calendarUtil.getMonthStartDate(new Date(date.getTime()));\n      var monthEnd = addDays(this.parent.calendarUtil.getMonthEndDate(new Date(date.getTime())), -1);\n      dateStart = resetTime(new Date(monthStart.getTime())).getTime();\n      dateEnd = resetTime(new Date(monthEnd.getTime())).getTime();\n    } else {\n      if (this.parent.rowAutoHeight) {\n        dateStart = resetTime(new Date(date.getTime())).getTime();\n        dateEnd = addDays(resetTime(new Date(date.getTime())), 1).getTime();\n      } else {\n        dateStart = dateEnd = resetTime(new Date(date.getTime())).getTime();\n      }\n    }\n\n    for (var _i = 0, appointments_1 = appointments; _i < appointments_1.length; _i++) {\n      var app = appointments_1[_i];\n      var appStart = new Date(app[this.fields.startTime].getTime());\n      var appEnd = new Date(app[this.fields.endTime].getTime());\n      var timeCondition = app[this.fields.isAllDay] ? resetTime(appEnd).getTime() > dateStart : resetTime(appEnd).getTime() >= dateStart;\n\n      if (resetTime(appStart).getTime() <= dateStart && timeCondition || resetTime(appStart).getTime() >= dateStart && resetTime(appEnd).getTime() <= dateEnd) {\n        appointmentsList.push(app);\n      }\n    }\n\n    return appointmentsList;\n  };\n\n  YearEvent.prototype.getMonths = function () {\n    var _this = this; // eslint-disable-next-line prefer-spread\n\n\n    return Array.apply(null, {\n      length: this.parent.monthsCount\n    }).map(function (value, index) {\n      return _this.parent.firstMonthOfYear + index;\n    });\n  };\n\n  YearEvent.prototype.removeCellHeight = function () {\n    var elementSelector = \".\" + MONTH_HEADER_WRAPPER + \" tbody tr,.\" + RESOURCE_COLUMN_TABLE_CLASS + \" tbody tr,.\" + CONTENT_TABLE_CLASS + \" tbody tr\";\n    var rows = [].slice.call(this.element.querySelectorAll(elementSelector));\n\n    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n      var row = rows_1[_i];\n      row.firstElementChild.style.height = '';\n    }\n  };\n\n  YearEvent.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.parent = null;\n  };\n\n  return YearEvent;\n}(TimelineEvent);\n\nvar __extends$15 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nvar MINUTES_PER_DAY = 1440;\n/**\n * Schedule events drag actions\n */\n\nvar DragAndDrop =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$15(DragAndDrop, _super);\n\n  function DragAndDrop() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.widthUptoCursorPoint = 0;\n    _this.heightUptoCursorPoint = 0;\n    _this.cursorPointIndex = 0;\n    _this.isHeaderRows = false;\n    _this.isTimelineDayProcess = false;\n    _this.widthPerMinute = 0;\n    _this.heightPerMinute = 0;\n    _this.minDiff = 0;\n    _this.isStepDragging = false;\n    _this.isMorePopupOpened = false;\n    _this.isAllDayDrag = false;\n    _this.isMultiSelect = false;\n    _this.multiData = [];\n    _this.updatedData = [];\n    _this.swagData = [];\n    _this.startTime = 0;\n    _this.isAllDayTarget = false;\n    _this.targetTd = null;\n    _this.isCursorAhead = false;\n    return _this;\n  }\n\n  DragAndDrop.prototype.wireDragEvent = function (element) {\n    new Draggable(element, {\n      abort: '.' + EVENT_RESIZE_CLASS,\n      clone: true,\n      isDragScroll: true,\n      enableTapHold: this.parent.isAdaptive,\n      enableTailMode: this.parent.eventDragArea ? true : false,\n      cursorAt: this.parent.eventDragArea ? {\n        left: -20,\n        top: -20\n      } : {\n        left: 0,\n        top: 0\n      },\n      dragArea: this.dragArea,\n      dragStart: this.dragStart.bind(this),\n      drag: this.drag.bind(this),\n      dragStop: this.dragStop.bind(this),\n      enableAutoScroll: false,\n      helper: this.dragHelper.bind(this),\n      queryPositionInfo: this.dragPosition.bind(this)\n    });\n  };\n\n  DragAndDrop.prototype.setDragArea = function () {\n    var dragElement = document.querySelector(this.parent.eventDragArea);\n    this.dragArea = this.parent.eventDragArea && dragElement ? dragElement : this.parent.element.querySelector('.' + CONTENT_TABLE_CLASS);\n  };\n\n  DragAndDrop.prototype.dragHelper = function (e) {\n    var _this = this;\n\n    this.setDragActionDefaultValues();\n    this.actionObj.element = e.element;\n    this.actionObj.action = 'drag';\n    var elements = [];\n\n    if (!this.parent.allowMultiDrag || isNullOrUndefined(this.parent.selectedElements) || this.parent.selectedElements.length === 0 || this.parent.selectedElements.length > 0 && this.parent.selectedElements.indexOf(this.actionObj.element) === -1) {\n      elements = [e.element];\n    } else {\n      elements = this.parent.selectedElements;\n      this.isMultiSelect = true;\n    }\n\n    elements.forEach(function (ele) {\n      var cloneElement = _this.createCloneElement(ele);\n\n      if (ele.getAttribute('data-guid') === _this.actionObj.element.getAttribute('data-guid')) {\n        _this.actionObj.clone = cloneElement;\n\n        if (!_this.parent.eventDragArea && _this.parent.currentView !== 'Month' && _this.parent.activeViewOptions.timeScale.enable && !_this.parent.activeView.isTimelineView() && !_this.actionObj.element.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {\n          setStyleAttribute(_this.actionObj.clone, {\n            cursor: 'move',\n            left: '0%',\n            right: '0%',\n            width: '100%'\n          });\n        }\n\n        _this.actionObj.clone.style.top = formatUnit(_this.actionObj.element.offsetTop);\n      }\n\n      _this.actionObj.cloneElement.push(cloneElement);\n\n      _this.actionObj.originalElement.push(ele);\n    });\n    return this.actionObj.clone;\n  };\n\n  DragAndDrop.prototype.dragPosition = function (e) {\n    if (this.parent.eventDragArea) {\n      return {\n        left: e.left,\n        top: e.top\n      };\n    }\n\n    var cellHeight = this.actionObj.cellHeight / this.actionObj.slotInterval * this.actionObj.interval;\n    var leftValue = formatUnit(0);\n\n    if (this.parent.currentView === 'Month') {\n      leftValue = e.left;\n    }\n\n    var cloneRight;\n\n    if (this.isStepDragging) {\n      cloneRight = Math.ceil(this.actionObj.clone.getBoundingClientRect().right) + this.actionObj.interval;\n    } else {\n      cloneRight = this.actionObj.clone.getBoundingClientRect().right;\n    }\n\n    var dragArea = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n    var contentWrapRight = dragArea.getBoundingClientRect().right;\n\n    if (this.parent.activeView.isTimelineView() && this.parent.currentView !== 'TimelineYear' && !this.parent.enableRtl && this.actionObj.pageX > cloneRight && !this.isMorePopupOpened && !(this.actionObj.pageX > contentWrapRight)) {\n      this.isCursorAhead = true;\n    }\n\n    if (this.parent.activeView.isTimelineView()) {\n      leftValue = formatUnit(this.actionObj.clone.offsetLeft);\n    }\n\n    var topValue;\n\n    if (this.parent.activeView.isTimelineView() || !this.parent.timeScale.enable || !isNullOrUndefined(this.actionObj.clone.offsetParent) && this.actionObj.clone.offsetParent.classList.contains(MORE_EVENT_POPUP_CLASS)) {\n      topValue = formatUnit(this.actionObj.clone.offsetTop);\n    } else if (this.parent.currentView === 'Month') {\n      topValue = formatUnit(0);\n    } else if (this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {\n      topValue = formatUnit(this.parent.element.querySelector('.' + ALLDAY_ROW_CLASS).offsetTop);\n      setStyleAttribute(this.actionObj.clone, {\n        width: formatUnit(Math.ceil(this.actionObj.clone.offsetWidth / this.actionObj.cellWidth) * this.actionObj.cellWidth),\n        right: this.parent.enableRtl && formatUnit(0)\n      });\n    } else {\n      if (this.actionObj.element.classList.contains(ALLDAY_APPOINTMENT_CLASS) && !this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {\n        setStyleAttribute(this.actionObj.clone, {\n          height: formatUnit(this.actionObj.cellHeight),\n          width: formatUnit(this.actionObj.cellWidth - 1),\n          pointerEvents: 'none'\n        });\n      }\n\n      var top_1 = parseInt(e.top, 10);\n      top_1 = top_1 < 0 ? 0 : top_1;\n      topValue = formatUnit(Math.ceil(top_1 / cellHeight) * cellHeight);\n      var scrollHeight = this.parent.element.querySelector('.e-content-wrap').scrollHeight;\n      var cloneBottom = parseInt(topValue, 10) + this.actionObj.clone.offsetHeight;\n\n      if (cloneBottom > scrollHeight) {\n        topValue = parseInt(topValue, 10) - (cloneBottom - scrollHeight) + 'px';\n      }\n    }\n\n    return {\n      left: leftValue,\n      top: topValue\n    };\n  };\n\n  DragAndDrop.prototype.setDragActionDefaultValues = function () {\n    this.actionObj.action = 'drag';\n    this.actionObj.isAllDay = null;\n    this.actionObj.slotInterval = this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount;\n    this.actionObj.interval = this.actionObj.slotInterval;\n    var workCell = this.parent.element.querySelector('.' + WORK_CELLS_CLASS);\n    this.actionObj.cellWidth = workCell.offsetWidth;\n    this.actionObj.cellHeight = workCell.offsetHeight;\n  };\n\n  DragAndDrop.prototype.dragStart = function (e) {\n    var _this = this;\n\n    var eventGuid = this.actionObj.element.getAttribute('data-guid');\n    this.actionObj.event = this.parent.eventBase.getEventByGuid(eventGuid);\n    var eventObj = extend({}, this.actionObj.event, null, true);\n\n    if (!isNullOrUndefined(eventObj)) {\n      this.startTime = eventObj[this.parent.eventFields.startTime].getTime();\n    }\n\n    var dragArgs = {\n      cancel: false,\n      data: eventObj,\n      selectedData: this.getSelectedData(),\n      event: e,\n      excludeSelectors: null,\n      element: this.actionObj.element,\n      interval: this.actionObj.interval,\n      navigation: {\n        enable: false,\n        timeDelay: 2000\n      },\n      scroll: {\n        enable: true,\n        scrollBy: 30,\n        timeDelay: 100\n      }\n    };\n    this.parent.trigger(dragStart, dragArgs, function (dragEventArgs) {\n      if (dragEventArgs.cancel || !isNullOrUndefined(_this.actionObj.element) && isNullOrUndefined(_this.actionObj.element.parentElement)) {\n        var dragObj = _this.actionObj.element.ej2_instances[0];\n\n        if (!isNullOrUndefined(dragObj)) {\n          dragObj.intDestroy(e.event);\n        }\n\n        _this.actionObj.action = '';\n\n        _this.removeCloneElementClasses();\n\n        _this.removeCloneElement();\n\n        return;\n      }\n\n      _this.actionClass('addClass');\n\n      _this.parent.uiStateValues.action = true;\n      _this.actionObj.start = eventObj[_this.parent.eventFields.startTime];\n      _this.actionObj.end = eventObj[_this.parent.eventFields.endTime];\n      _this.actionObj.groupIndex = parseInt(_this.actionObj.element.getAttribute('data-group-index') || '0', 10);\n      _this.actionObj.interval = dragEventArgs.interval;\n      _this.actionObj.navigation = dragEventArgs.navigation;\n      _this.actionObj.scroll = dragEventArgs.scroll;\n      _this.actionObj.excludeSelectors = dragEventArgs.excludeSelectors;\n\n      var viewElement = _this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n\n      _this.scrollArgs = {\n        element: viewElement,\n        width: viewElement.scrollWidth,\n        height: viewElement.scrollHeight\n      };\n      _this.widthPerMinute = _this.actionObj.cellWidth / _this.actionObj.slotInterval * _this.actionObj.interval;\n      _this.heightPerMinute = _this.actionObj.cellHeight / _this.actionObj.slotInterval * _this.actionObj.interval;\n      _this.widthUptoCursorPoint = 0;\n      _this.heightUptoCursorPoint = 0;\n      _this.cursorPointIndex = -1;\n      _this.isHeaderRows = false;\n      _this.isTimelineDayProcess = false;\n      _this.minDiff = 0;\n      _this.isMorePopupOpened = false;\n      _this.daysVariation = -1;\n      _this.isAllDayTarget = _this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS);\n\n      if ((_this.parent.activeView.isTimelineView() || !_this.parent.timeScale.enable) && _this.parent.currentView !== 'TimelineYear') {\n        if (!isNullOrUndefined(_this.actionObj.clone.offsetParent) && _this.actionObj.clone.offsetParent.classList.contains(MORE_EVENT_POPUP_CLASS)) {\n          _this.isMorePopupOpened = true;\n        }\n\n        _this.actionObj.pageX = e.event.pageX;\n        var rows = _this.parent.activeViewOptions.headerRows;\n        _this.isHeaderRows = rows.length > 0 && rows[rows.length - 1].option !== 'Hour' && rows[rows.length - 1].option !== 'Date';\n        _this.isTimelineDayProcess = !_this.parent.activeViewOptions.timeScale.enable || _this.isHeaderRows || _this.parent.currentView === 'TimelineMonth' || rows.length > 0 && rows[rows.length - 1].option === 'Date';\n        _this.isStepDragging = !_this.isTimelineDayProcess && _this.actionObj.slotInterval !== _this.actionObj.interval;\n\n        if (_this.isTimelineDayProcess) {\n          _this.timelineEventModule = new TimelineEvent(_this.parent, 'day');\n        } else {\n          _this.timelineEventModule = new TimelineEvent(_this.parent, 'hour');\n        }\n      }\n\n      if (_this.parent.currentView === 'TimelineYear') {\n        _this.yearEvent = new YearEvent(_this.parent);\n      }\n\n      if (_this.parent.currentView === 'Month') {\n        _this.startTime = resetTime(new Date(_this.startTime)).getTime();\n\n        _this.updateOriginalElement(_this.actionObj.clone);\n\n        _this.monthEvent = new MonthEvent(_this.parent);\n      }\n\n      if (_this.parent.currentView === 'Day' || _this.parent.currentView === 'Week' || _this.parent.currentView === 'WorkWeek') {\n        _this.verticalEvent = new VerticalEvent(_this.parent);\n\n        _this.verticalEvent.initializeValues();\n\n        var splitEvents = _this.splitEvent(_this.actionObj.event);\n\n        splitEvents.forEach(function (event) {\n          var query = \".e-day-wrapper[data-date=\\\"\" + resetTime(event[_this.parent.eventFields.startTime]).getTime() + \"\\\"]\";\n\n          if (_this.parent.activeViewOptions.group.resources.length > 0) {\n            query = query.concat('[data-group-index = \"' + _this.actionObj.groupIndex + '\"]');\n          }\n\n          var appWrap = _this.parent.element.querySelector(query);\n\n          if (appWrap) {\n            var appEle = appWrap.querySelector('[data-id=\"' + _this.actionObj.clone.getAttribute('data-id') + '\"]');\n\n            if (appEle) {\n              addClass([appEle], EVENT_ACTION_CLASS);\n            }\n          }\n        });\n      }\n    });\n  };\n\n  DragAndDrop.prototype.getSelectedData = function () {\n    if (this.isMultiSelect && this.multiData.length === 0 && this.parent.selectedElements.length > 0) {\n      for (var _i = 0, _a = this.parent.selectedElements; _i < _a.length; _i++) {\n        var element = _a[_i];\n        var eventGuid = element.getAttribute('data-guid');\n        var data = this.parent.eventBase.getEventByGuid(eventGuid);\n        this.multiData.push(extend({}, data, null, true));\n      }\n    }\n\n    return this.multiData;\n  };\n\n  DragAndDrop.prototype.drag = function (e) {\n    if (this.parent.quickPopup) {\n      this.parent.quickPopup.quickPopupHide(true);\n    }\n\n    if (!isNullOrUndefined(e.target) && e.target.classList.contains(DISABLE_DATES)) {\n      return;\n    }\n\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    var eventArgs = this.parent.eventBase.getPageCoordinates(e);\n    this.actionObj.Y = this.actionObj.pageY = eventArgs.pageY;\n    this.actionObj.X = this.actionObj.pageX = eventArgs.pageX;\n    this.actionObj.target = e.target;\n    this.widthUptoCursorPoint = this.widthUptoCursorPoint === 0 ? Math.ceil(Math.abs(this.actionObj.clone.getBoundingClientRect().left - this.actionObj.X) / this.widthPerMinute) * this.widthPerMinute : this.widthUptoCursorPoint;\n    this.widthUptoCursorPoint = this.isMorePopupOpened ? this.actionObj.cellWidth : this.widthUptoCursorPoint;\n    this.heightUptoCursorPoint = this.heightUptoCursorPoint === 0 ? Math.ceil(Math.abs(this.actionObj.clone.getBoundingClientRect().top - this.actionObj.Y) / this.heightPerMinute) * this.heightPerMinute : this.heightUptoCursorPoint;\n    this.isAllDayDrag = this.parent.activeViewOptions.timeScale.enable ? this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS) : this.actionObj.event[this.parent.eventFields.isAllDay];\n\n    if (this.isStepDragging && this.minDiff === 0) {\n      this.calculateMinutesDiff(eventObj);\n    }\n\n    if ((this.parent.currentView === 'Month' || this.isAllDayDrag) && this.daysVariation < 0) {\n      var date = this.parent.getDateFromElement(this.actionObj.target);\n\n      if (!isNullOrUndefined(date)) {\n        var currentDate = resetTime(date);\n        var startDate = resetTime(new Date(eventObj[this.parent.eventFields.startTime].getTime()));\n        this.daysVariation = (currentDate.getTime() - startDate.getTime()) / MS_PER_DAY;\n      } else {\n        this.daysVariation = 0;\n      }\n    } else {\n      this.daysVariation = 0;\n    }\n\n    if (this.parent.eventDragArea) {\n      var targetElement = eventArgs.target;\n      this.actionObj.clone.style.top = formatUnit(targetElement.offsetTop);\n      this.actionObj.clone.style.left = formatUnit(targetElement.offsetLeft);\n      var currentTarget = closest(targetElement, '.' + ROOT);\n\n      if (!currentTarget) {\n        this.actionObj.clone.style.height = '';\n        this.actionObj.clone.style.width = '';\n      } else {\n        if (!(this.parent.currentView === 'Week' || this.parent.currentView === 'WorkWeek' || this.parent.currentView === 'Day')) {\n          this.actionObj.clone.style.width = formatUnit(this.actionObj.element.offsetWidth);\n        }\n      }\n    }\n\n    this.updateScrollPosition(e);\n    this.updateNavigatingPosition(e);\n    this.updateDraggingDateTime(e);\n    var dragArgs = {\n      data: eventObj,\n      event: e,\n      element: this.actionObj.element,\n      startTime: this.actionObj.start,\n      endTime: this.actionObj.end,\n      selectedData: this.updatedData\n    };\n\n    if (this.parent.group.resources.length > 0) {\n      dragArgs.groupIndex = this.actionObj.groupIndex;\n    }\n\n    this.parent.trigger(drag, dragArgs);\n  };\n\n  DragAndDrop.prototype.calculateMinutesDiff = function (eventObj) {\n    if (this.parent.enableRtl) {\n      this.minDiff = (this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint) / this.widthPerMinute * this.actionObj.interval;\n    } else {\n      this.minDiff = this.widthUptoCursorPoint / this.widthPerMinute * this.actionObj.interval;\n    }\n\n    var startDate = eventObj[this.parent.eventFields.startTime];\n    var startTime = this.parent.activeView.renderDates[0];\n    var startEndHours = getStartEndHours(startTime, this.parent.activeView.getStartHour(), this.parent.activeView.getEndHour());\n\n    if (startEndHours.startHour.getTime() > startDate.getTime()) {\n      this.minDiff = this.minDiff + (startEndHours.startHour.getTime() - startDate.getTime()) / MS_PER_MINUTE;\n    }\n  };\n\n  DragAndDrop.prototype.dragStop = function (e) {\n    var _this = this;\n\n    this.isCursorAhead = false;\n    this.removeCloneElementClasses();\n    this.removeCloneElement();\n    clearInterval(this.actionObj.navigationInterval);\n    this.actionObj.navigationInterval = null;\n    clearInterval(this.actionObj.scrollInterval);\n    this.actionObj.scrollInterval = null;\n    this.actionClass('removeClass');\n    this.parent.uiStateValues.action = false;\n\n    if (this.isAllowDrop(e)) {\n      return;\n    }\n\n    var target = !e.target.classList.contains('e-work-cells') && this.parent.cellTemplate ? closest(e.target, '.e-work-cells') : e.target;\n    var dragArgs = {\n      cancel: false,\n      data: this.getChangedData(this.updatedData),\n      selectedData: this.updatedData,\n      event: e,\n      element: this.actionObj.element,\n      target: target\n    };\n    this.actionObj.action = null;\n    this.parent.trigger(dragStop, dragArgs, function (dragEventArgs) {\n      if (dragEventArgs.cancel) {\n        return;\n      }\n\n      if (_this.parent.isSpecificResourceEvents()) {\n        _this.parent.crudModule.crudObj.isCrudAction = true;\n        _this.parent.crudModule.crudObj.sourceEvent = [_this.parent.resourceBase.lastResourceLevel[parseInt(dragArgs.element.getAttribute('data-group-index'), 10)]];\n\n        var currentGroupIndex = parseInt(dragArgs.target.getAttribute('data-group-index'), 10) || _this.actionObj.groupIndex;\n\n        _this.parent.crudModule.crudObj.targetEvent = [_this.parent.resourceBase.lastResourceLevel[parseInt(currentGroupIndex.toString(), 10)]];\n      }\n\n      _this.saveChangedData(dragEventArgs, _this.isMultiSelect);\n    });\n    this.updatedData = [];\n    this.multiData = [];\n    this.isMultiSelect = false;\n    this.parent.selectedElements = [];\n  };\n\n  DragAndDrop.prototype.updateNavigatingPosition = function (e) {\n    var _this = this;\n\n    if (this.actionObj.navigation.enable) {\n      var currentDate_1 = this.parent.getCurrentTime();\n\n      if (isNullOrUndefined(this.actionObj.navigationInterval)) {\n        this.actionObj.navigationInterval = window.setInterval(function () {\n          if (currentDate_1) {\n            var crtDate = _this.parent.getCurrentTime();\n\n            var end = crtDate.getSeconds();\n            var start = currentDate_1.getSeconds() + _this.actionObj.navigation.timeDelay / 1000;\n            start = start >= 60 ? start - 60 : start;\n\n            if (start === end) {\n              currentDate_1 = _this.parent.getCurrentTime();\n\n              _this.viewNavigation(e);\n\n              _this.updateDraggingDateTime(e);\n            }\n          }\n        }, this.actionObj.navigation.timeDelay);\n      }\n    }\n  };\n\n  DragAndDrop.prototype.updateDraggingDateTime = function (e) {\n    if (!isNullOrUndefined(this.actionObj.clone.offsetParent) && this.actionObj.clone.offsetParent.classList.contains(MORE_EVENT_POPUP_CLASS)) {\n      this.morePopupEventDragging(e);\n    } else if (this.parent.activeView.isTimelineView() && this.parent.currentView !== 'TimelineYear') {\n      this.timelineEventModule.dateRender = this.parent.activeView.renderDates;\n      this.timelineEventModule.cellWidth = this.actionObj.cellWidth;\n      this.timelineEventModule.getSlotDates();\n      this.actionObj.cellWidth = this.isHeaderRows ? this.timelineEventModule.cellWidth : this.parent.element.querySelector('.' + WORK_CELLS_CLASS).getBoundingClientRect().width;\n      this.calculateTimelineTime(e);\n    } else {\n      if (this.parent.currentView === 'Month' || this.parent.currentView === 'TimelineYear') {\n        this.calculateVerticalDate(e);\n      } else {\n        this.calculateVerticalTime(e);\n      }\n    }\n  };\n\n  DragAndDrop.prototype.navigationWrapper = function () {\n    if (!this.parent.activeView.isTimelineView()) {\n      if (this.parent.currentView === 'Month' || !this.parent.timeScale.enable) {\n        var outerWrapperCls = [].slice.call(this.parent.element.querySelectorAll('.' + WORK_CELLS_CLASS));\n        this.actionObj.index = this.parent.activeView.renderDates.length < this.actionObj.index ? this.parent.activeView.renderDates.length - 1 : this.actionObj.index;\n        var targetWrapper = outerWrapperCls[this.actionObj.index].querySelector('.' + APPOINTMENT_WRAPPER_CLASS);\n\n        if (!targetWrapper) {\n          targetWrapper = createElement('div', {\n            className: APPOINTMENT_WRAPPER_CLASS\n          });\n          outerWrapperCls[this.actionObj.index].appendChild(targetWrapper);\n        }\n\n        targetWrapper.appendChild(this.actionObj.clone);\n      } else {\n        var wrapperClass = this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS) ? '.' + ALLDAY_APPOINTMENT_WRAPPER_CLASS : '.' + APPOINTMENT_WRAPPER_CLASS;\n        this.parent.element.querySelectorAll(wrapperClass).item(this.actionObj.index).appendChild(this.actionObj.clone);\n\n        if (wrapperClass === '.' + ALLDAY_APPOINTMENT_WRAPPER_CLASS) {\n          var elementHeight = this.getAllDayEventHeight();\n          var event_2 = [].slice.call(this.parent.element.querySelectorAll('.' + ALLDAY_CELLS_CLASS + ':first-child'));\n\n          if (event_2[0].offsetHeight < elementHeight) {\n            for (var _i = 0, event_1 = event_2; _i < event_1.length; _i++) {\n              var e = event_1[_i];\n              e.style.height = (elementHeight + 2) / 12 + 'em';\n            }\n          }\n\n          this.actionObj.clone.style.height = formatUnit(elementHeight);\n        }\n\n        this.actionObj.height = parseInt(this.actionObj.clone.style.height, 10);\n      }\n    } else {\n      var outWrapper = void 0;\n\n      if (this.parent.activeViewOptions.group.resources.length > 0) {\n        outWrapper = this.parent.element.querySelectorAll('.e-appointment-container:not(.e-hidden)').item(this.actionObj.index);\n      } else {\n        outWrapper = this.parent.element.querySelector('.' + APPOINTMENT_CONTAINER_CLASS);\n      }\n\n      if (!isNullOrUndefined(outWrapper)) {\n        var tarWrapper_1 = outWrapper.querySelector('.' + APPOINTMENT_WRAPPER_CLASS);\n\n        if (!tarWrapper_1) {\n          tarWrapper_1 = createElement('div', {\n            className: APPOINTMENT_WRAPPER_CLASS\n          });\n          outWrapper.appendChild(tarWrapper_1);\n        }\n\n        this.actionObj.cloneElement.forEach(function (ele) {\n          tarWrapper_1.appendChild(ele);\n        });\n      }\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  DragAndDrop.prototype.viewNavigation = function (e) {\n    var navigationType;\n    var dragArea = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n\n    if (dragArea && (!this.scrollEdges.top && !this.scrollEdges.bottom || closest(this.actionObj.clone, '.' + ALLDAY_APPOINTMENT_WRAPPER_CLASS))) {\n      if (dragArea.scrollLeft === 0 && Math.round(this.actionObj.X) <= Math.round(dragArea.getBoundingClientRect().left + this.actionObj.cellWidth + window.pageXOffset)) {\n        navigationType = this.parent.enableRtl ? 'next' : 'previous';\n      } else if (Math.round(dragArea.scrollLeft) + dragArea.clientWidth === dragArea.scrollWidth && Math.round(this.actionObj.X) >= Math.round(dragArea.getBoundingClientRect().right - this.actionObj.cellWidth + window.pageXOffset)) {\n        navigationType = this.parent.enableRtl ? 'previous' : 'next';\n      }\n\n      if (navigationType) {\n        this.parent.changeDate(this.parent.activeView.getNextPreviousDate(navigationType));\n      }\n    }\n  };\n\n  DragAndDrop.prototype.morePopupEventDragging = function (e) {\n    if (isNullOrUndefined(e.target) || e.target && isNullOrUndefined(closest(e.target, 'td'))) {\n      return;\n    }\n\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    var eventDuration = eventObj[this.parent.eventFields.endTime].getTime() - eventObj[this.parent.eventFields.startTime].getTime();\n    var td = closest(e.target, 'td');\n\n    if (this.parent.currentView === 'TimelineYear' && (!td.classList.contains(WORK_CELLS_CLASS) || td.classList.contains(OTHERMONTH_CLASS))) {\n      return;\n    }\n\n    var dragStart$$1 = this.parent.getDateFromElement(td);\n    var dragEnd = new Date(dragStart$$1.getTime());\n    dragEnd.setMilliseconds(eventDuration);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.actionObj.groupIndex = parseInt(td.getAttribute('data-group-index'), 10);\n    }\n\n    this.actionObj.start = new Date(dragStart$$1.getTime());\n    this.actionObj.end = new Date(dragEnd.getTime());\n    this.actionObj.clone.style.top = formatUnit(td.offsetParent.offsetTop);\n    this.actionObj.clone.style.left = formatUnit(td.offsetLeft);\n    this.actionObj.clone.style.width = formatUnit(td.offsetWidth);\n    var eventContainer = td;\n    var eventWrapper;\n\n    if (this.parent.activeView.isTimelineView()) {\n      var rowIndex = closest(td, 'tr').rowIndex;\n      eventContainer = this.parent.element.querySelectorAll('.e-appointment-container').item(rowIndex);\n    }\n\n    eventWrapper = eventContainer.querySelector('.' + APPOINTMENT_WRAPPER_CLASS);\n\n    if (!eventWrapper) {\n      eventWrapper = createElement('div', {\n        className: APPOINTMENT_WRAPPER_CLASS\n      });\n      eventContainer.appendChild(eventWrapper);\n    }\n\n    this.appendCloneElement(eventWrapper);\n  };\n\n  DragAndDrop.prototype.calculateVerticalTime = function (e) {\n    var _this = this;\n\n    if (isNullOrUndefined(this.actionObj.target) || this.actionObj.target && isNullOrUndefined(closest(this.actionObj.target, 'tr')) || !closest(this.actionObj.target, 'td').classList.contains(WORK_CELLS_CLASS) && !closest(this.actionObj.target, 'td').classList.contains(ALLDAY_CELLS_CLASS)) {\n      return;\n    }\n\n    if (this.parent.activeViewOptions.timeScale.enable) {\n      this.swapDragging(e);\n    }\n\n    var dragArea = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    var eventStart = eventObj[this.parent.eventFields.startTime];\n    var eventEnd = eventObj[this.parent.eventFields.endTime];\n    var eventDuration = getUniversalTime(eventEnd) - getUniversalTime(eventStart);\n    var offsetTop = Math.floor(parseInt(this.actionObj.clone.style.top, 10) / this.actionObj.cellHeight) * this.actionObj.cellHeight;\n    offsetTop = offsetTop < 0 ? 0 : offsetTop;\n\n    if (this.scrollEdges.top || this.scrollEdges.bottom) {\n      offsetTop = this.scrollEdges.top ? dragArea.scrollTop - this.heightUptoCursorPoint + this.actionObj.cellHeight + window.pageYOffset : dragArea.scrollTop + dragArea.offsetHeight - this.actionObj.clone.offsetHeight + window.pageYOffset + (this.actionObj.clone.offsetHeight - this.heightUptoCursorPoint);\n      offsetTop = Math.round(offsetTop / this.actionObj.cellHeight) * this.actionObj.cellHeight;\n      this.actionObj.clone.style.top = formatUnit(offsetTop);\n    }\n\n    var rowIndex = this.parent.activeViewOptions.timeScale.enable ? offsetTop / this.actionObj.cellHeight : 0;\n    var heightPerMinute = this.actionObj.cellHeight / this.actionObj.slotInterval;\n    var diffInMinutes = parseInt(this.actionObj.clone.style.top, 10) - offsetTop;\n    var tr;\n\n    if (this.isAllDayDrag) {\n      tr = this.parent.element.querySelector('.' + ALLDAY_ROW_CLASS);\n    } else {\n      var trCollections = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n      tr = trCollections[parseInt(rowIndex.toString(), 10)];\n    }\n\n    var index;\n\n    if (closest(this.actionObj.target, 'td').classList.contains(WORK_CELLS_CLASS) || closest(this.actionObj.target, 'td').classList.contains(ALLDAY_CELLS_CLASS)) {\n      index = closest(this.actionObj.target, 'td').cellIndex;\n    }\n\n    var colIndex = isNullOrUndefined(index) ? closest(this.actionObj.clone, 'td').cellIndex : index;\n    this.actionObj.index = colIndex;\n\n    if (isNullOrUndefined(tr)) {\n      return;\n    }\n\n    var td = tr.children[parseInt(colIndex.toString(), 10)];\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      this.actionObj.groupIndex = parseInt(td.getAttribute('data-group-index'), 10);\n    }\n\n    var dragStart$$1;\n    var dragEnd;\n\n    if (this.parent.activeViewOptions.timeScale.enable && !this.isAllDayDrag) {\n      this.appendCloneElement(this.getEventWrapper(colIndex));\n      dragStart$$1 = this.parent.getDateFromElement(td);\n      dragStart$$1.setMinutes(dragStart$$1.getMinutes() + diffInMinutes / heightPerMinute);\n      dragEnd = new Date(dragStart$$1.getTime());\n\n      if (this.actionObj.element.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {\n        dragEnd.setMinutes(dragEnd.getMinutes() + this.actionObj.slotInterval);\n      } else {\n        dragEnd.setMilliseconds(eventDuration);\n      }\n    } else {\n      dragStart$$1 = this.parent.getDateFromElement(td);\n      dragStart$$1.setDate(dragStart$$1.getDate() - this.daysVariation);\n      dragStart$$1.setHours(eventStart.getHours(), eventStart.getMinutes(), eventStart.getSeconds());\n      dragEnd = new Date(dragStart$$1.getTime());\n      dragEnd.setMilliseconds(eventDuration);\n\n      if (!this.actionObj.element.classList.contains(ALLDAY_APPOINTMENT_CLASS) && this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS)) {\n        dragEnd = addDays(resetTime(dragEnd), 1);\n      }\n\n      var index_1 = this.parent.activeViewOptions.group.byDate || this.parent.virtualScrollModule && !this.parent.activeViewOptions.timeScale.enable ? colIndex : undefined;\n      this.updateAllDayEvents(dragStart$$1, dragEnd, index_1);\n    }\n\n    this.actionObj.start = new Date(+dragStart$$1);\n    this.actionObj.end = new Date(+dragEnd);\n    var event = this.getUpdatedEvent(this.actionObj.start, this.actionObj.end, this.actionObj.event);\n    var dynamicWrappers = [].slice.call(this.parent.element.querySelectorAll('.e-dynamic-clone'));\n\n    for (var _i = 0, dynamicWrappers_1 = dynamicWrappers; _i < dynamicWrappers_1.length; _i++) {\n      var wrapper = dynamicWrappers_1[_i];\n      remove(wrapper);\n    }\n\n    if (this.multiData.length > 0) {\n      if (this.isAllDayTarget && this.isAllDayDrag && !isNullOrUndefined(this.actionObj.isAllDay) && !this.actionObj.isAllDay) {\n        var targetCellTime_1 = parseInt(closest(this.actionObj.target, 'td').getAttribute('data-date'), 10);\n        this.multiData.forEach(function (data) {\n          _this.swagData.push(extend({}, data, null, true));\n\n          if (data[_this.parent.eventFields.isAllDay]) {\n            data[_this.parent.eventFields.startTime] = new Date(data[_this.parent.eventFields.startTime].getTime() + (targetCellTime_1 - _this.startTime));\n            var startTime = new Date(data[_this.parent.eventFields.startTime]);\n            var endTime = new Date(startTime.setMinutes(startTime.getMinutes() + _this.actionObj.slotInterval));\n            data[_this.parent.eventFields.endTime] = endTime;\n            data[_this.parent.eventFields.isAllDay] = false;\n          }\n        });\n        this.startTime = targetCellTime_1;\n      }\n\n      if (this.isAllDayTarget && this.isAllDayDrag && !isNullOrUndefined(this.actionObj.isAllDay) && this.actionObj.isAllDay && this.swagData.length > 0) {\n        this.multiData = this.swagData;\n        this.swagData = [];\n        var eventObj_1 = extend({}, this.actionObj.event, null, true);\n        this.startTime = eventObj_1[this.parent.eventFields.startTime].getTime();\n      }\n\n      var startTimeDiff = event[this.parent.eventFields.startTime].getTime() - this.startTime;\n\n      for (var index_2 = 0; index_2 < this.multiData.length; index_2++) {\n        this.updatedData[parseInt(index_2.toString(), 10)] = this.updateMultipleData(this.multiData[parseInt(index_2.toString(), 10)], startTimeDiff);\n        var dayIndex = this.getDayIndex(this.updatedData[parseInt(index_2.toString(), 10)]);\n\n        if (dayIndex >= 0) {\n          var wrapper = this.getEventWrapper(dayIndex, this.updatedData[parseInt(index_2.toString(), 10)][this.parent.eventFields.isAllDay]);\n          this.appendCloneElement(wrapper, this.actionObj.cloneElement[parseInt(index_2.toString(), 10)]);\n          this.updateEventHeight(this.updatedData[parseInt(index_2.toString(), 10)], index_2, dayIndex);\n        } else {\n          if (!isNullOrUndefined(this.actionObj.cloneElement[parseInt(index_2.toString(), 10)].parentNode)) {\n            remove(this.actionObj.cloneElement[parseInt(index_2.toString(), 10)]);\n          }\n        }\n      }\n    } else {\n      this.updateEventHeight(event);\n    }\n\n    this.updateTimePosition(this.actionObj.start, this.updatedData);\n  };\n\n  DragAndDrop.prototype.splitEvent = function (event) {\n    var eventFields = this.parent.eventFields;\n    var eventData = [];\n    var startTime = event[eventFields.startTime];\n    var endTime = event[eventFields.endTime];\n\n    if (resetTime(new Date(startTime.getTime())) < resetTime(new Date(endTime.getTime()))) {\n      var startReferenceDate = resetTime(new Date(startTime.getTime()));\n      var endReferenceDate = new Date(startReferenceDate.getTime());\n\n      for (var i = 0; startReferenceDate < new Date(endTime.getTime()); i++) {\n        endReferenceDate = new Date(endReferenceDate.setDate(startReferenceDate.getDate() + 1));\n        var eventObj = extend({}, event, null, true);\n        eventObj[eventFields.startTime] = new Date(startReferenceDate);\n        eventObj[eventFields.endTime] = new Date(endReferenceDate);\n        startReferenceDate = new Date(startReferenceDate.setDate(startReferenceDate.getDate() + 1));\n        eventData.push(eventObj);\n      }\n\n      var index = eventData.length - 1;\n      eventData[0][eventFields.startTime] = startTime;\n      eventData[parseInt(index.toString(), 10)][eventFields.endTime] = endTime;\n    } else {\n      eventData.push(event);\n    }\n\n    return eventData;\n  };\n\n  DragAndDrop.prototype.updateMultipleData = function (data, timeDifference) {\n    var eventObj = extend({}, data, null, true);\n\n    if (!isNullOrUndefined(this.actionObj.isAllDay) && this.parent.activeViewOptions.timeScale.enable && (this.isAllDayTarget && eventObj[this.parent.eventFields.isAllDay] || !this.isAllDayTarget && !eventObj[this.parent.eventFields.isAllDay])) {\n      eventObj[this.parent.eventFields.isAllDay] = this.actionObj.isAllDay;\n    }\n\n    var endTimeDiff = eventObj[this.parent.eventFields.endTime].getTime() - eventObj[this.parent.eventFields.startTime].getTime();\n\n    if (eventObj[this.parent.eventFields.isAllDay]) {\n      var differInDays = Math.ceil(timeDifference / (1000 * 3600 * 24));\n      var day = Math.ceil(endTimeDiff / (1000 * 3600 * 24));\n      var startTime = new Date(eventObj[this.parent.eventFields.startTime]);\n      eventObj[this.parent.eventFields.startTime] = resetTime(new Date(startTime.setDate(startTime.getDate() + differInDays)));\n      eventObj[this.parent.eventFields.endTime] = addDays(eventObj[this.parent.eventFields.startTime], day);\n    } else {\n      eventObj[this.parent.eventFields.startTime] = new Date(eventObj[this.parent.eventFields.startTime].getTime() + timeDifference);\n      eventObj[this.parent.eventFields.endTime] = new Date(eventObj[this.parent.eventFields.startTime].getTime() + endTimeDiff);\n    }\n\n    return eventObj;\n  };\n\n  DragAndDrop.prototype.getDayIndex = function (event) {\n    var eventObj = extend({}, event, null, true);\n    var startDate = resetTime(eventObj[this.parent.eventFields.startTime]);\n\n    if (this.parent.activeViewOptions.timeScale.enable && !eventObj[this.parent.eventFields.isAllDay]) {\n      var startHour = this.parent.activeView.getStartHour();\n      startDate.setMilliseconds(startHour.getTime() - resetTime(startHour).getTime());\n    }\n\n    var startTime = startDate.getTime();\n    var query = '';\n    var wrapper = DAY_WRAPPER_CLASS;\n\n    if (this.parent.activeViewOptions.timeScale.enable && eventObj[this.parent.eventFields.isAllDay]) {\n      wrapper = ALLDAY_APPOINTMENT_WRAPPER_CLASS;\n    } else {\n      wrapper = WORK_CELLS_CLASS;\n    }\n\n    query = '.' + wrapper + '[data-date=\"' + startTime + '\"]';\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      query = query + '[data-group-index=\"' + this.actionObj.groupIndex + '\"]';\n    }\n\n    this.targetTd = this.parent.element.querySelector(query);\n\n    if (isNullOrUndefined(this.targetTd)) {\n      return -1;\n    }\n\n    return this.targetTd.cellIndex;\n  };\n\n  DragAndDrop.prototype.updateEventHeight = function (event, index, colIndex) {\n    this.verticalEvent.initializeValues();\n    var datesCount = this.verticalEvent.getStartCount();\n\n    if (!this.parent.uiStateValues.isGroupAdaptive) {\n      for (var i = 0; i < this.actionObj.groupIndex; i++) {\n        if (this.verticalEvent.dateRender[parseInt(i.toString(), 10)]) {\n          datesCount = datesCount + this.verticalEvent.dateRender[parseInt(i.toString(), 10)].length;\n        }\n      }\n    }\n\n    var indexGroup = this.parent.uiStateValues.isGroupAdaptive ? datesCount : this.actionObj.groupIndex;\n    var target = this.parent.activeViewOptions.group.byDate && !isNullOrUndefined(this.parent.getDateFromElement(this.actionObj.target)) ? true : false;\n\n    if (target || !this.parent.activeViewOptions.group.byDate) {\n      var dynamicIndex = -1;\n      var dayIndex = !this.parent.activeViewOptions.group.byDate ? isNullOrUndefined(index) ? this.actionObj.index - datesCount : colIndex - datesCount : this.parent.getIndexOfDate(this.verticalEvent.dateRender[parseInt(indexGroup.toString(), 10)], resetTime( // eslint-disable-next-line max-len\n      this.parent.getDateFromElement(isNullOrUndefined(index) ? this.actionObj.target : this.targetTd)));\n      var splitEvents = this.splitEvent(event);\n      var events_1 = this.parent.eventBase.isAllDayAppointment(event) || splitEvents.length > 2 || this.parent.eventSettings.spannedEventPlacement !== 'TimeSlot' ? [event] : splitEvents;\n\n      for (var i = 0; i < events_1.length; i++) {\n        if (i > 0) {\n          var filterQuery = \".e-day-wrapper[data-date=\\\"\" + resetTime(events_1[parseInt(i.toString(), 10)][this.parent.eventFields.startTime]).getTime() + \"\\\"]\";\n\n          if (this.parent.activeViewOptions.group.resources.length > 0) {\n            filterQuery = filterQuery.concat('[data-group-index = \"' + this.actionObj.groupIndex + '\"]');\n          }\n\n          var appWrap = this.parent.element.querySelector(filterQuery);\n\n          if (appWrap) {\n            dayIndex = dayIndex + 1;\n            dynamicIndex = appWrap.cellIndex;\n          } else {\n            dayIndex = -1;\n          }\n        }\n\n        if (dayIndex >= 0) {\n          var record = this.verticalEvent.isSpannedEvent(events_1[parseInt(i.toString(), 10)], dayIndex, indexGroup);\n          var eStart = record[this.verticalEvent.fields.startTime];\n          var eEnd = record[this.verticalEvent.fields.endTime];\n          var appHeight = this.parent.activeViewOptions.timeScale.enable ? this.verticalEvent.getHeight(eStart, eEnd) : this.actionObj.element.offsetHeight;\n          var topValue = this.parent.activeViewOptions.timeScale.enable ? this.verticalEvent.getTopValue(eStart, dayIndex, indexGroup) : this.actionObj.element.offsetTop;\n\n          if (isNullOrUndefined(index)) {\n            if (i === 0) {\n              this.actionObj.clone.style.top = formatUnit(topValue);\n              this.actionObj.clone.style.height = formatUnit(appHeight);\n            } else {\n              this.renderSpannedEvents(record, dynamicIndex, topValue, appHeight);\n            }\n          } else {\n            var appWidth = this.actionObj.cellWidth;\n\n            if (event[this.parent.eventFields.isAllDay]) {\n              topValue = this.parent.element.querySelector('.' + ALLDAY_ROW_CLASS).offsetTop;\n              appHeight = this.getAllDayEventHeight();\n              var timeDiff = event[this.parent.eventFields.endTime].getTime() - event[this.parent.eventFields.startTime].getTime();\n              var allDayDifference = Math.ceil(timeDiff / (1000 * 3600 * 24));\n\n              if (allDayDifference >= 0) {\n                appWidth = allDayDifference * this.actionObj.cellWidth;\n              }\n            }\n\n            if (this.actionObj.cloneElement[parseInt(index.toString(), 10)]) {\n              if (i === 0) {\n                this.actionObj.cloneElement[parseInt(index.toString(), 10)].style.top = formatUnit(topValue);\n                this.actionObj.cloneElement[parseInt(index.toString(), 10)].style.height = formatUnit(appHeight);\n                this.actionObj.cloneElement[parseInt(index.toString(), 10)].style.width = formatUnit(appWidth);\n                this.actionObj.cloneElement[parseInt(index.toString(), 10)].style.left = formatUnit(0);\n              } else {\n                this.renderSpannedEvents(record, dynamicIndex, topValue, appHeight);\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n\n  DragAndDrop.prototype.renderSpannedEvents = function (record, index, top, height) {\n    var startTime = record[this.parent.eventFields.startTime].getTime();\n    var endTime = record[this.parent.eventFields.endTime].getTime();\n\n    if (startTime !== endTime) {\n      var appointmentElement = this.verticalEvent.createAppointmentElement(record, false, record.isSpanned, this.actionObj.groupIndex);\n      addClass([appointmentElement], [CLONE_ELEMENT_CLASS, 'e-dynamic-clone']);\n      setStyleAttribute(appointmentElement, {\n        'width': '100%',\n        'height': height + 'px',\n        'top': top + 'px',\n        'border': '0px'\n      });\n      var appointmentWrap = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_WRAPPER_CLASS));\n      appointmentWrap[parseInt(index.toString(), 10)].appendChild(appointmentElement);\n    }\n  };\n\n  DragAndDrop.prototype.getRenderedDates = function () {\n    var _this = this;\n\n    var _a, _b;\n\n    var renderDates = this.parent.activeView.renderDates;\n\n    (_a = this.parent.eventBase.slots).push.apply(_a, this.parent.activeView.renderDates.map(function (date) {\n      return +date;\n    }));\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.parent.eventBase.slots = [];\n      var resources = this.parent.resourceBase.lastResourceLevel.filter(function (res) {\n        return res.groupIndex === _this.actionObj.groupIndex;\n      });\n      renderDates = resources[0].renderDates;\n\n      (_b = this.parent.eventBase.slots).push.apply(_b, renderDates.map(function (date) {\n        return +date;\n      }));\n    }\n\n    return renderDates;\n  };\n\n  DragAndDrop.prototype.updateAllDayEvents = function (startDate, endDate, colIndex) {\n    this.parent.eventBase.slots = [];\n    var event = this.getUpdatedEvent(startDate, endDate, this.actionObj.event);\n    var renderDates = this.getRenderedDates();\n    var events = this.parent.eventBase.splitEvent(event, renderDates);\n    var query = \".e-all-day-cells[data-date=\\\"\" + events[0][this.parent.eventFields.startTime].getTime() + \"\\\"]\";\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      query = query.concat('[data-group-index = \"' + this.actionObj.groupIndex + '\"]');\n    }\n\n    var cell = [].slice.call(this.parent.element.querySelectorAll(query));\n\n    if (cell.length > 0 || !isNullOrUndefined(colIndex)) {\n      var cellIndex = !isNullOrUndefined(colIndex) ? colIndex : cell[0].cellIndex;\n      this.appendCloneElement(this.getEventWrapper(cellIndex)); // eslint-disable-next-line max-len\n\n      this.actionObj.clone.style.width = formatUnit(events[0].data.count * this.actionObj.cellWidth);\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  DragAndDrop.prototype.swapDragging = function (e) {\n    var colIndex = closest(this.actionObj.target, 'td').cellIndex;\n\n    if (closest(this.actionObj.target, '.' + DATE_HEADER_WRAP_CLASS) && !closest(this.actionObj.clone, '.' + ALLDAY_APPOINTMENT_WRAPPER_CLASS)) {\n      addClass([this.actionObj.clone], ALLDAY_APPOINTMENT_CLASS);\n      this.appendCloneElement(this.getEventWrapper(colIndex));\n      this.actionObj.isAllDay = true;\n      var eventHeight = this.getAllDayEventHeight();\n      var allDayElement = [].slice.call(this.parent.element.querySelectorAll('.' + ALLDAY_CELLS_CLASS + ':first-child'));\n\n      if (allDayElement[0].offsetHeight < eventHeight) {\n        for (var _i = 0, allDayElement_1 = allDayElement; _i < allDayElement_1.length; _i++) {\n          var element = allDayElement_1[_i];\n          element.style.height = (eventHeight + 2) / 12 + 'em';\n        }\n      }\n\n      setStyleAttribute(this.actionObj.clone, {\n        width: formatUnit(this.actionObj.cellWidth),\n        height: formatUnit(eventHeight),\n        top: formatUnit(this.parent.element.querySelector('.' + ALLDAY_ROW_CLASS).offsetTop)\n      });\n    }\n\n    if (closest(this.actionObj.target, '.' + WORK_CELLS_CLASS) && !closest(this.actionObj.clone, '.' + DAY_WRAPPER_CLASS)) {\n      removeClass([this.actionObj.clone], ALLDAY_APPOINTMENT_CLASS);\n      this.appendCloneElement(this.getEventWrapper(colIndex));\n      this.actionObj.isAllDay = false; // eslint-disable-next-line max-len\n\n      var height = this.actionObj.element.offsetHeight === 0 ? this.actionObj.height : this.actionObj.element.offsetHeight;\n      setStyleAttribute(this.actionObj.clone, {\n        left: formatUnit(0),\n        height: formatUnit(height),\n        width: formatUnit(this.actionObj.cellWidth)\n      });\n    }\n  };\n\n  DragAndDrop.prototype.calculateVerticalDate = function (e) {\n    if (isNullOrUndefined(e.target) || e.target && isNullOrUndefined(closest(e.target, 'tr')) || e.target && e.target.tagName === 'DIV') {\n      return;\n    }\n\n    var eventObj = extend({}, this.actionObj.event, null, true);\n\n    if (isNullOrUndefined(this.parent.eventDragArea)) {\n      this.removeCloneElement();\n    }\n\n    var eventDuration = getUniversalTime(eventObj[this.parent.eventFields.endTime]) - getUniversalTime(eventObj[this.parent.eventFields.startTime]);\n    var td = closest(this.actionObj.target, 'td');\n\n    if (!isNullOrUndefined(td)) {\n      var tr = td.parentElement;\n      this.actionObj.index = tr.rowIndex * tr.children.length + td.cellIndex;\n      var workCells = [].slice.call(this.parent.element.querySelectorAll('.' + WORK_CELLS_CLASS));\n      td = workCells[this.actionObj.index];\n      var currentDate = this.parent.getDateFromElement(td);\n\n      if (!isNullOrUndefined(currentDate)) {\n        if (this.parent.activeViewOptions.group.resources.length > 0) {\n          this.actionObj.groupIndex = parseInt(td.getAttribute('data-group-index'), 10);\n        }\n\n        var timeString = new Date(currentDate.setDate(currentDate.getDate() - this.daysVariation));\n        var dragStart$$1 = new Date(timeString.getTime());\n        var startTimeDiff = getUniversalTime(eventObj[this.parent.eventFields.startTime]) - getUniversalTime(resetTime(new Date(+eventObj[this.parent.eventFields.startTime])));\n        dragStart$$1.setMilliseconds(startTimeDiff);\n        var dragEnd = new Date(dragStart$$1.getTime());\n        dragEnd.setMilliseconds(eventDuration);\n        this.actionObj.start = new Date(dragStart$$1.getTime());\n        this.actionObj.end = new Date(dragEnd.getTime());\n      }\n    }\n\n    var event = this.getUpdatedEvent(this.actionObj.start, this.actionObj.end, this.actionObj.event);\n    var eventWrappers = [].slice.call(this.parent.element.querySelectorAll('.' + CLONE_ELEMENT_CLASS));\n\n    for (var _i = 0, eventWrappers_1 = eventWrappers; _i < eventWrappers_1.length; _i++) {\n      var wrapper = eventWrappers_1[_i];\n      remove(wrapper);\n    }\n\n    if (this.multiData && this.multiData.length > 0) {\n      var startTime = resetTime(new Date(event[this.parent.eventFields.startTime]));\n      var startTimeDiff = startTime.getTime() - this.startTime;\n\n      if (this.parent.currentView === 'TimelineYear' && this.parent.group.resources.length > 0) {\n        startTimeDiff = (startTime.getFullYear() - new Date(this.startTime).getFullYear()) * 12;\n        startTimeDiff -= new Date(this.startTime).getMonth();\n        startTimeDiff += startTime.getMonth();\n      }\n\n      for (var index = 0; index < this.multiData.length; index++) {\n        this.updatedData[parseInt(index.toString(), 10)] = this.updateMultipleVerticalDate(this.multiData[parseInt(index.toString(), 10)], startTimeDiff);\n\n        if (this.parent.currentView === 'TimelineYear') {\n          this.dynamicYearlyEventsRendering(this.updatedData[parseInt(index.toString(), 10)]);\n        } else {\n          this.dynamicEventsRendering(this.updatedData[parseInt(index.toString(), 10)]);\n        }\n      }\n    } else {\n      if (this.parent.currentView === 'TimelineYear') {\n        this.dynamicYearlyEventsRendering(event);\n      } else {\n        this.dynamicEventsRendering(event);\n      }\n    }\n  };\n\n  DragAndDrop.prototype.updateMultipleVerticalDate = function (data, timeDifference) {\n    var eventObj = extend({}, data, null, true);\n    var eventDuration = eventObj[this.parent.eventFields.endTime].getTime() - eventObj[this.parent.eventFields.startTime].getTime();\n    var startDate = new Date(eventObj[this.parent.eventFields.startTime]);\n\n    if (this.parent.currentView === 'TimelineYear' && this.parent.group.resources.length > 0) {\n      eventObj[this.parent.eventFields.startTime] = new Date(startDate.setMonth(startDate.getMonth() + timeDifference));\n    } else {\n      var differInDays = Math.ceil(timeDifference / MS_PER_DAY);\n      eventObj[this.parent.eventFields.startTime] = new Date(startDate.setDate(startDate.getDate() + differInDays));\n    }\n\n    eventObj[this.parent.eventFields.endTime] = new Date(eventObj[this.parent.eventFields.startTime].getTime() + eventDuration);\n    return eventObj;\n  };\n\n  DragAndDrop.prototype.calculateTimelineTime = function (e) {\n    var eventObj = extend({}, this.actionObj.event, null, true);\n    var eventDuration = getUniversalTime(eventObj[this.parent.eventFields.endTime]) - getUniversalTime(eventObj[this.parent.eventFields.startTime]);\n    var offsetLeft = this.parent.enableRtl ? Math.abs(this.actionObj.clone.offsetLeft) - this.actionObj.clone.offsetWidth : parseInt(this.actionObj.clone.style.left, 10);\n    offsetLeft = Math.floor(offsetLeft / Math.trunc(this.actionObj.cellWidth)) * this.actionObj.cellWidth;\n    var rightOffset;\n\n    if (this.parent.enableRtl) {\n      rightOffset = Math.abs(parseInt(this.actionObj.clone.style.right, 10));\n      this.actionObj.clone.style.right = formatUnit(rightOffset);\n    }\n\n    offsetLeft = this.getOffsetValue(offsetLeft, rightOffset);\n    var colIndex = this.getColumnIndex(offsetLeft);\n    var dragArea = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n    var contentWrapRight = dragArea.getBoundingClientRect().right;\n    var cursorDrag = this.parent.activeView.isTimelineView() && !this.parent.enableRtl && this.actionObj.pageX > this.actionObj.clone.getBoundingClientRect().right && !this.isMorePopupOpened && !(this.actionObj.pageX > contentWrapRight);\n    var leftVal = this.parent.eventDragArea ? dragArea.scrollLeft - dragArea.offsetLeft : 0;\n\n    if ((this.isCursorAhead || cursorDrag) && !this.isStepDragging) {\n      this.isCursorAhead = true;\n    }\n\n    var cloneIndex = Math.floor((this.actionObj.pageX - this.actionObj.clone.getBoundingClientRect().left + leftVal) / this.actionObj.cellWidth);\n\n    if (this.parent.enableRtl) {\n      cloneIndex = Math.abs(Math.floor((this.actionObj.pageX - this.actionObj.clone.getBoundingClientRect().right) / this.actionObj.cellWidth)) - 1;\n    }\n\n    if (this.cursorPointIndex < 0) {\n      this.cursorIndex(e, eventObj, offsetLeft, cloneIndex);\n    }\n\n    var tr = this.parent.getContentTable().querySelector('tr');\n    var index = this.getCursorCurrentIndex(colIndex, cloneIndex, tr);\n    index = index < 0 ? 0 : index;\n    var eventStart = this.isHeaderRows ? new Date(this.timelineEventModule.dateRender[parseInt(index.toString(), 10)].getTime()) : this.parent.getDateFromElement(tr.children[parseInt(index.toString(), 10)]);\n\n    if (this.isStepDragging) {\n      var widthDiff = this.getWidthDiff(tr, index);\n\n      if (widthDiff !== 0) {\n        var timeDiff = Math.round(widthDiff / this.widthPerMinute);\n        eventStart.setMinutes(eventStart.getMinutes() + timeDiff * this.actionObj.interval);\n\n        if (this.isCursorAhead || cursorDrag) {\n          eventStart.setMilliseconds(-eventDuration);\n        } else {\n          eventStart.setMinutes(eventStart.getMinutes() - this.minDiff);\n        }\n      } else {\n        eventStart = this.actionObj.start;\n      }\n    } else {\n      if (this.isCursorAhead || cursorDrag) {\n        eventStart.setMinutes(eventStart.getMinutes() + (this.isTimelineDayProcess ? MINUTES_PER_DAY : this.actionObj.slotInterval));\n        eventStart.setMilliseconds(-eventDuration);\n      } else {\n        eventStart.setMinutes(eventStart.getMinutes() - this.cursorPointIndex * (this.isTimelineDayProcess ? MINUTES_PER_DAY : this.actionObj.slotInterval));\n      }\n    }\n\n    eventStart = this.calculateIntervalTime(eventStart);\n\n    if (this.isTimelineDayProcess) {\n      var eventSrt = eventObj[this.parent.eventFields.startTime];\n      eventStart.setHours(eventSrt.getHours(), eventSrt.getMinutes(), eventSrt.getSeconds());\n    }\n\n    if (this.parent.eventDragArea) {\n      var targetDate = this.parent.getDateFromElement(e.target);\n\n      if (!isNullOrUndefined(targetDate)) {\n        if (!this.parent.activeViewOptions.timeScale.enable || this.parent.currentView === 'TimelineMonth') {\n          var eventSrt = eventObj[this.parent.eventFields.startTime];\n          eventStart = new Date(targetDate.setHours(eventSrt.getHours(), eventSrt.getMinutes(), eventSrt.getSeconds()));\n        } else {\n          eventStart = targetDate;\n        }\n      }\n    }\n\n    var eventEnd = new Date(eventStart.getTime());\n    eventEnd.setMilliseconds(eventDuration);\n    var eventsData = [this.getUpdatedEvent(eventStart, eventEnd, this.actionObj.event)];\n\n    if (this.multiData.length > 0) {\n      var startTimeDiff = eventsData[0][this.parent.eventFields.startTime].getTime() - this.startTime;\n\n      for (var i = 0; i < this.multiData.length; i++) {\n        this.updatedData[parseInt(i.toString(), 10)] = this.updateMultipleData(this.multiData[parseInt(i.toString(), 10)], startTimeDiff);\n      }\n\n      eventsData = this.updatedData;\n    }\n\n    for (var dataIndex = 0; dataIndex < eventsData.length; dataIndex++) {\n      var cloneElement = this.multiData.length > 0 ? this.actionObj.cloneElement[parseInt(dataIndex.toString(), 10)] : this.actionObj.clone;\n\n      if (isNullOrUndefined(this.parent.eventDragArea)) {\n        var events_2 = this.timelineEventModule.splitEvent(eventsData[parseInt(dataIndex.toString(), 10)], this.timelineEventModule.dateRender);\n        var eventData = events_2[0].data;\n        var startTime = this.timelineEventModule.getStartTime(events_2[0], eventData);\n        var endTime = this.timelineEventModule.getEndTime(events_2[0], eventData); // eslint-disable-next-line max-len\n\n        var width = this.timelineEventModule.getEventWidth(startTime, endTime, eventObj[this.parent.eventFields.isAllDay], eventData.count); // eslint-disable-next-line max-len\n\n        var day = this.parent.getIndexOfDate(this.timelineEventModule.dateRender, resetTime(new Date(startTime.getTime())));\n        day = day < 0 ? 0 : day;\n        var left = this.timelineEventModule.getPosition(startTime, endTime, eventObj[this.parent.eventFields.isAllDay], day);\n\n        if (this.parent.enableRtl) {\n          cloneElement.style.right = formatUnit(left);\n        } else {\n          cloneElement.style.left = formatUnit(left);\n        }\n\n        if (!this.isMorePopupOpened) {\n          cloneElement.style.width = formatUnit(width);\n        }\n      }\n\n      if (this.parent.activeViewOptions.group.resources.length > 0) {\n        this.calculateResourceGroupingPosition(e, cloneElement);\n      }\n\n      this.actionObj.start = new Date(eventStart.getTime());\n      this.actionObj.end = new Date(eventEnd.getTime());\n      this.updateTimePosition(this.actionObj.start, this.updatedData);\n    }\n  };\n\n  DragAndDrop.prototype.getOffsetValue = function (offsetLeft, rightOffset) {\n    if (this.scrollEdges.left || this.scrollEdges.right) {\n      var viewEle = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n\n      if (this.parent.enableRtl) {\n        rightOffset = viewEle.offsetWidth - viewEle.scrollLeft;\n\n        if (this.scrollEdges.right) {\n          rightOffset = rightOffset - viewEle.offsetWidth + this.actionObj.clone.offsetWidth - (this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint);\n        } else {\n          rightOffset = rightOffset + this.widthUptoCursorPoint;\n\n          if (rightOffset - this.widthUptoCursorPoint >= viewEle.scrollWidth) {\n            this.actionObj.clone.style.width = formatUnit(this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint + this.actionObj.cellWidth);\n            rightOffset = viewEle.scrollLeft - viewEle.scrollWidth;\n          }\n        }\n\n        if (isNullOrUndefined(this.parent.eventDragArea)) {\n          this.actionObj.clone.style.left = formatUnit(rightOffset);\n        }\n      } else {\n        if (this.scrollEdges.left) {\n          offsetLeft = viewEle.scrollLeft - this.widthUptoCursorPoint + this.actionObj.cellWidth;\n\n          if (viewEle.scrollLeft + viewEle.offsetWidth >= viewEle.offsetWidth) {\n            viewEle.scrollLeft = viewEle.scrollLeft - 1;\n          } else if (this.actionObj.clone.offsetLeft === 0) {\n            offsetLeft = viewEle.scrollLeft;\n          }\n        } else {\n          offsetLeft = viewEle.scrollLeft + viewEle.offsetWidth - this.actionObj.clone.offsetWidth + (this.actionObj.clone.offsetWidth - this.widthUptoCursorPoint);\n        }\n\n        offsetLeft = offsetLeft < 0 ? 0 : offsetLeft;\n\n        if (isNullOrUndefined(this.parent.eventDragArea)) {\n          this.actionObj.clone.style.left = formatUnit(offsetLeft);\n        }\n      }\n    }\n\n    return offsetLeft;\n  };\n\n  DragAndDrop.prototype.getWidthDiff = function (tr, index) {\n    var pages = this.scrollArgs.element.getBoundingClientRect();\n\n    if (pages.left <= this.actionObj.pageX && pages.right >= this.actionObj.pageX) {\n      var targetLeft = tr.children[parseInt(index.toString(), 10)].offsetLeft;\n      var pageX = this.actionObj.pageX - pages.left;\n\n      if (this.parent.enableRtl) {\n        return targetLeft + this.actionObj.cellWidth - (this.scrollArgs.element.scrollLeft + pageX);\n      } else {\n        return this.scrollArgs.element.scrollLeft + pageX - targetLeft;\n      }\n    }\n\n    return 0;\n  };\n\n  DragAndDrop.prototype.getColumnIndex = function (offsetLeft) {\n    var index = Math.floor(offsetLeft / Math.trunc(this.actionObj.cellWidth));\n\n    if (this.isHeaderRows) {\n      return index;\n    }\n\n    return this.getIndex(index);\n  };\n\n  DragAndDrop.prototype.getCursorCurrentIndex = function (colIndex, cloneIndex, tr) {\n    var index = colIndex + cloneIndex;\n\n    if (this.isHeaderRows) {\n      var dateLength = Math.floor(tr.offsetWidth / this.actionObj.cellWidth);\n      return index > dateLength - 1 ? dateLength - 1 : index;\n    }\n\n    return index > tr.children.length - 1 ? tr.children.length - 1 : index;\n  };\n\n  DragAndDrop.prototype.cursorIndex = function (e, event, left, index) {\n    var td = closest(e.target, '.e-work-cells');\n\n    if (!isNullOrUndefined(td) && !this.isMorePopupOpened) {\n      var targetDate = this.parent.getDateFromElement(td);\n\n      if (this.isHeaderRows) {\n        var currentIndex = Math.floor(left / this.actionObj.cellWidth);\n        targetDate = new Date(this.timelineEventModule.dateRender[currentIndex + index].getTime());\n      }\n\n      var timeDiff = targetDate.getTime() - event[this.parent.eventFields.startTime].getTime();\n\n      if (this.isTimelineDayProcess) {\n        this.cursorPointIndex = Math.abs(Math.ceil(timeDiff / MS_PER_DAY));\n      } else {\n        var widthDiff = Math.floor(timeDiff / MS_PER_MINUTE / (this.actionObj.slotInterval / this.actionObj.cellWidth));\n        this.cursorPointIndex = Math.floor(widthDiff / this.actionObj.cellWidth);\n        this.cursorPointIndex = this.cursorPointIndex < 0 ? 0 : this.cursorPointIndex;\n      }\n    } else {\n      this.cursorPointIndex = 0;\n    }\n  };\n\n  DragAndDrop.prototype.calculateResourceGroupingPosition = function (e, cloneElement) {\n    var dragArea = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS);\n    var trCollection = [].slice.call(this.parent.element.querySelectorAll('.e-content-wrap .e-content-table tr:not(.e-hidden)'));\n    var translateY = getTranslateY(dragArea.querySelector('table'));\n    translateY = isNullOrUndefined(translateY) ? 0 : translateY;\n    var rowHeight = this.parent.rowAutoHeight ? ~~(dragArea.querySelector('table').offsetHeight / trCollection.length) : this.actionObj.cellHeight;\n    var rowIndex = Math.floor(Math.floor(this.actionObj.Y + (dragArea.scrollTop - translateY - (window.scrollY || window.pageYOffset)) - dragArea.getBoundingClientRect().top) / rowHeight);\n    rowIndex = rowIndex < 0 ? 0 : rowIndex > trCollection.length - 1 ? trCollection.length - 1 : rowIndex;\n    this.actionObj.index = rowIndex;\n    var eventContainer = this.parent.element.querySelectorAll('.e-appointment-container:not(.e-hidden)').item(rowIndex);\n    var eventWrapper = eventContainer.querySelector('.' + APPOINTMENT_WRAPPER_CLASS);\n\n    if (!eventWrapper) {\n      eventWrapper = createElement('div', {\n        className: APPOINTMENT_WRAPPER_CLASS\n      });\n      eventContainer.appendChild(eventWrapper);\n    }\n\n    this.appendCloneElement(eventWrapper, cloneElement);\n    var td = closest(this.actionObj.target, 'td');\n    this.actionObj.groupIndex = td && !isNaN(parseInt(td.getAttribute('data-group-index'), 10)) ? parseInt(td.getAttribute('data-group-index'), 10) : this.actionObj.groupIndex;\n\n    if (!isNullOrUndefined(this.parent.eventDragArea)) {\n      return;\n    }\n\n    var top = trCollection[parseInt(rowIndex.toString(), 10)].getBoundingClientRect().height * rowIndex;\n\n    if (this.parent.rowAutoHeight) {\n      var cursorElement = this.getCursorElement(e);\n\n      if (cursorElement) {\n        top = cursorElement.classList.contains(WORK_CELLS_CLASS) ? cursorElement.offsetTop : cursorElement.offsetParent && cursorElement.offsetParent.classList.contains(APPOINTMENT_CLASS) ? cursorElement.offsetParent.offsetTop : top;\n      }\n    }\n\n    cloneElement.style.top = formatUnit(top);\n  };\n\n  DragAndDrop.prototype.appendCloneElement = function (element, cloneElement) {\n    if (cloneElement === void 0) {\n      cloneElement = null;\n    }\n\n    cloneElement = isNullOrUndefined(cloneElement) ? this.actionObj.clone : cloneElement;\n    var dragElement = document.querySelector(this.parent.eventDragArea);\n\n    if (this.parent.eventDragArea && dragElement) {\n      dragElement.appendChild(cloneElement);\n    } else {\n      element.appendChild(cloneElement);\n    }\n  };\n\n  DragAndDrop.prototype.getEventWrapper = function (index, isAllDayDrag) {\n    var eventWrapper;\n\n    if (isNullOrUndefined(isAllDayDrag)) {\n      isAllDayDrag = this.actionObj.clone.classList.contains(ALLDAY_APPOINTMENT_CLASS);\n    }\n\n    if (this.parent.activeViewOptions.timeScale.enable) {\n      var wrapperClass = isAllDayDrag ? '.' + ALLDAY_APPOINTMENT_WRAPPER_CLASS : '.' + APPOINTMENT_WRAPPER_CLASS;\n      eventWrapper = this.parent.element.querySelectorAll(wrapperClass).item(index);\n    } else {\n      var targetWrapper = this.parent.element.querySelectorAll('.' + WORK_CELLS_CLASS).item(index);\n      eventWrapper = targetWrapper.querySelector('.' + APPOINTMENT_WRAPPER_CLASS);\n\n      if (!eventWrapper) {\n        eventWrapper = createElement('div', {\n          className: APPOINTMENT_WRAPPER_CLASS\n        });\n        targetWrapper.appendChild(eventWrapper);\n      }\n    }\n\n    return eventWrapper;\n  };\n\n  DragAndDrop.prototype.getAllDayEventHeight = function () {\n    var eventWrapper = createElement('div', {\n      className: APPOINTMENT_CLASS\n    });\n    this.parent.element.querySelector('.' + ALLDAY_APPOINTMENT_WRAPPER_CLASS).appendChild(eventWrapper);\n    var eventHeight = eventWrapper.offsetHeight;\n    remove(eventWrapper);\n    return eventHeight;\n  };\n\n  DragAndDrop.prototype.isAllowDrop = function (e) {\n    if (!this.actionObj.excludeSelectors) {\n      return false;\n    }\n\n    var dropSelectors = this.actionObj.excludeSelectors.split(',');\n    var isAllowDrop = false;\n\n    for (var _i = 0, dropSelectors_1 = dropSelectors; _i < dropSelectors_1.length; _i++) {\n      var selector = dropSelectors_1[_i];\n\n      if (e.target.classList.contains(selector)) {\n        isAllowDrop = true;\n        break;\n      }\n    }\n\n    return isAllowDrop;\n  };\n  /**\n   * Get module name.\n   *\n   * @returns {string} Returns the module name\n   */\n\n\n  DragAndDrop.prototype.getModuleName = function () {\n    return 'dragAndDrop';\n  };\n\n  return DragAndDrop;\n}(ActionBase);\n/**\n * view base\n */\n\n\nvar ViewBase =\n/** @__PURE__ @class */\nfunction () {\n  /**\n   * Constructor\n   *\n   * @param {Schedule} parent Accepts the schedule instance\n   */\n  function ViewBase(parent) {\n    this.previousNextAction = 'next';\n    this.parent = parent;\n  }\n\n  ViewBase.prototype.isTimelineView = function () {\n    return this.parent.currentView.indexOf('Timeline') !== -1;\n  };\n\n  ViewBase.prototype.getContentRows = function () {\n    return [];\n  };\n\n  ViewBase.prototype.refreshHeader = function () {// Method to refresh the date header\n  };\n\n  ViewBase.prototype.refreshResourceHeader = function () {\n    remove(this.element.querySelector('tbody').lastElementChild.firstElementChild);\n    var resTd = createElement('td');\n    resTd.appendChild(this.parent.resourceBase.createResourceColumn());\n    prepend([resTd], this.element.querySelector('tbody').lastElementChild);\n    this.parent.notify(contentReady, {});\n  };\n\n  ViewBase.prototype.getDayName = function (date) {\n    return this.parent.getDayNames('abbreviated')[date.getDay()];\n  };\n\n  ViewBase.prototype.getDate = function (date) {\n    return this.parent.globalize.formatDate(date, {\n      format: 'd',\n      calendar: this.parent.getCalendarMode()\n    });\n  };\n\n  ViewBase.prototype.getTime = function (date) {\n    if (this.parent.isAdaptive) {\n      if (this.parent.activeViewOptions.timeFormat === 'HH:mm' || this.parent.activeViewOptions.timeFormat === 'HH.mm') {\n        return this.parent.globalize.formatDate(date, {\n          format: 'H',\n          calendar: this.parent.getCalendarMode()\n        });\n      }\n\n      return this.parent.globalize.formatDate(date, {\n        skeleton: 'h',\n        calendar: this.parent.getCalendarMode()\n      });\n    }\n\n    return this.parent.getTimeString(date);\n  };\n\n  ViewBase.prototype.getTimelineDate = function (date) {\n    var text = this.parent.globalize.formatDate(date, {\n      skeleton: 'MMMd',\n      calendar: this.parent.getCalendarMode()\n    }) + ', ' + this.parent.getDayNames('wide')[date.getDay()];\n    return capitalizeFirstWord(text, 'multiple');\n  };\n\n  ViewBase.prototype.createEventTable = function (trCount) {\n    var eventTable = createElement('div', {\n      className: EVENT_TABLE_CLASS\n    });\n    append(this.getEventRows(trCount), eventTable);\n    return eventTable;\n  };\n\n  ViewBase.prototype.getEventRows = function (trCount) {\n    var eventRows = [];\n    var eventContainer;\n\n    for (var row = 0; row < trCount; row++) {\n      eventContainer = createElement('div', {\n        className: APPOINTMENT_CONTAINER_CLASS\n      });\n\n      if (this.parent.resourceBase && !this.parent.uiStateValues.isGroupAdaptive && this.parent.resourceBase.renderedResources) {\n        eventContainer.setAttribute('data-group-index', this.parent.resourceBase.renderedResources[parseInt(row.toString(), 10)].groupIndex.toString());\n      }\n\n      eventRows.push(eventContainer);\n    }\n\n    return eventRows;\n  };\n\n  ViewBase.prototype.collapseRows = function (wrap) {\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      this.parent.resourceBase.hideResourceRows(wrap.querySelector('tbody'));\n      this.parent.resourceBase.hideResourceRows(wrap.querySelector('.' + EVENT_TABLE_CLASS));\n    }\n  };\n\n  ViewBase.prototype.createTableLayout = function (className) {\n    var clsName = className || '';\n    var table = createElement('table', {\n      className: SCHEDULE_TABLE_CLASS + ' ' + clsName\n    });\n    var tbody = createElement('tbody');\n    table.appendChild(tbody);\n    return table;\n  };\n\n  ViewBase.prototype.setAriaAttributes = function (table) {\n    table.setAttribute('role', 'grid');\n    table.setAttribute('aria-label', this.getLabelText(this.parent.currentView));\n  };\n\n  ViewBase.prototype.createColGroup = function (table, lastRow) {\n    var length = lastRow.length;\n\n    if (lastRow[0] && lastRow[0].colSpan) {\n      length = lastRow.map(function (value) {\n        return value.colSpan;\n      }).reduce(function (prev, next) {\n        return prev + next;\n      });\n    }\n\n    var colGroupEle = createElement('colgroup');\n\n    for (var i = 0; i < length; i++) {\n      colGroupEle.appendChild(createElement('col'));\n    }\n\n    prepend([colGroupEle], table);\n  };\n\n  ViewBase.prototype.getScrollXIndent = function (content) {\n    return content.offsetHeight - content.clientHeight > 0 ? getScrollBarWidth() : 0;\n  };\n\n  ViewBase.prototype.scrollTopPanel = function (target) {\n    this.getDatesHeaderElement().firstElementChild.scrollLeft = target.scrollLeft;\n  };\n\n  ViewBase.prototype.scrollHeaderLabels = function (target) {\n    var headerTable = this.element.querySelector('.e-date-header-wrap table');\n    var colWidth = headerTable.offsetWidth / headerTable.querySelectorAll('colgroup col').length;\n\n    var applyLeft = function (headerCells, isRtl) {\n      var currentCell;\n      var tdLeft = 0;\n      var colSpan = 0;\n      var hiddenLeft = isRtl ? -target.scrollLeft : target.scrollLeft;\n\n      for (var _i = 0, headerCells_2 = headerCells; _i < headerCells_2.length; _i++) {\n        var cell = headerCells_2[_i];\n        colSpan += parseInt(cell.getAttribute('colSpan'), 10);\n\n        if (colSpan > Math.floor(hiddenLeft / colWidth)) {\n          currentCell = cell;\n          break;\n        }\n\n        tdLeft += cell.offsetWidth;\n      }\n\n      if (!isNullOrUndefined(currentCell)) {\n        currentCell.children[0].style[isRtl ? 'right' : 'left'] = hiddenLeft - tdLeft + 'px';\n      }\n    };\n\n    var classNames = ['.e-header-year-cell', '.e-header-month-cell', '.e-header-week-cell', '.e-header-cells'];\n\n    for (var _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++) {\n      var className = classNames_1[_i];\n      var headerCells = [].slice.call(this.element.querySelectorAll(className));\n\n      if (headerCells.length > 0) {\n        for (var _a = 0, headerCells_1 = headerCells; _a < headerCells_1.length; _a++) {\n          var element = headerCells_1[_a];\n          element.children[0].style[this.parent.enableRtl ? 'right' : 'left'] = '';\n        }\n\n        applyLeft(headerCells, this.parent.enableRtl);\n      }\n    }\n  };\n\n  ViewBase.prototype.addAttributes = function (td, element) {\n    if (td.template) {\n      append(td.template, element);\n    }\n\n    if (td.colSpan) {\n      element.setAttribute('colspan', td.colSpan.toString());\n    }\n\n    if (td.className) {\n      addClass([element], td.className);\n    }\n  };\n\n  ViewBase.prototype.getHeaderBarHeight = function () {\n    var headerBarHeight = 2;\n\n    if (this.parent.headerModule) {\n      headerBarHeight += getOuterHeight(this.parent.headerModule.getHeaderElement());\n    }\n\n    if (this.parent.uiStateValues.isGroupAdaptive) {\n      var resHeader = this.parent.element.querySelector('.' + RESOURCE_HEADER_TOOLBAR);\n\n      if (resHeader) {\n        headerBarHeight += resHeader.offsetHeight;\n      }\n    }\n\n    return headerBarHeight;\n  };\n\n  ViewBase.prototype.renderPanel = function (type) {\n    if (type === PREVIOUS_PANEL_CLASS) {\n      prepend([this.element], this.parent.element.querySelector('.' + TABLE_CONTAINER_CLASS));\n    } else {\n      this.parent.element.querySelector('.' + TABLE_CONTAINER_CLASS).appendChild(this.element);\n    }\n  };\n\n  ViewBase.prototype.setPanel = function (panel) {\n    this.element = panel;\n  };\n\n  ViewBase.prototype.getPanel = function () {\n    return this.element;\n  };\n\n  ViewBase.prototype.getDatesHeaderElement = function () {\n    return this.element.querySelector('.' + DATE_HEADER_CONTAINER_CLASS);\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  ViewBase.prototype.getDateSlots = function (renderDates, workDays) {\n    return []; // Here getDateSlots only need in vertical and month views\n  };\n\n  ViewBase.prototype.generateColumnLevels = function () {\n    return []; // Here generateColumnLevels only need in vertical and month views\n  };\n\n  ViewBase.prototype.getColumnLevels = function () {\n    return this.colLevels;\n  };\n\n  ViewBase.prototype.highlightCurrentTime = function () {// Here showTimeIndicator functionalities\n  };\n\n  ViewBase.prototype.getStartDate = function () {\n    return this.renderDates[0];\n  };\n\n  ViewBase.prototype.getEndDate = function () {\n    return this.renderDates[this.renderDates.length - 1];\n  };\n\n  ViewBase.prototype.startDate = function () {\n    return this.renderDates[0];\n  };\n\n  ViewBase.prototype.endDate = function () {\n    return addDays(this.renderDates[this.renderDates.length - 1], 1);\n  };\n\n  ViewBase.prototype.getStartHour = function () {\n    var startHour = this.parent.getStartEndTime(this.parent.activeViewOptions.startHour);\n\n    if (isNullOrUndefined(startHour)) {\n      startHour = new Date(2000, 0, 0, 0);\n    }\n\n    return startHour;\n  };\n\n  ViewBase.prototype.getEndHour = function () {\n    var endHour = this.parent.getStartEndTime(this.parent.activeViewOptions.endHour);\n\n    if (isNullOrUndefined(endHour)) {\n      endHour = new Date(2000, 0, 0, 0);\n    }\n\n    return endHour;\n  };\n\n  ViewBase.prototype.isCurrentDate = function (date) {\n    return date.setHours(0, 0, 0, 0) === new Date(this.parent.currentTimezoneDate).setHours(0, 0, 0, 0);\n  };\n\n  ViewBase.prototype.isCurrentMonth = function (date) {\n    if (this.parent.activeViewOptions.displayDate || this.parent.activeViewOptions.numberOfWeeks > 0) {\n      return this.parent.activeView.getStartDate().getTime() <= this.parent.getCurrentTime().getTime() && this.parent.activeView.getEndDate().getTime() >= this.parent.getCurrentTime().getTime();\n    }\n\n    return date.getFullYear() === this.parent.getCurrentTime().getFullYear() && date.getMonth() === this.parent.getCurrentTime().getMonth();\n  };\n\n  ViewBase.prototype.isWorkDay = function (date, workDays) {\n    if (workDays === void 0) {\n      workDays = this.parent.activeViewOptions.workDays;\n    }\n\n    if (workDays.indexOf(date.getDay()) >= 0) {\n      return true;\n    }\n\n    return false;\n  };\n\n  ViewBase.prototype.isWorkHour = function (date, startHour, endHour, workDays) {\n    if (isNullOrUndefined(startHour) || isNullOrUndefined(endHour)) {\n      return false;\n    }\n\n    startHour.setMilliseconds(0);\n    endHour.setMilliseconds(0);\n    return !(getDateInMs(date) < getDateInMs(startHour) || getDateInMs(date) >= getDateInMs(endHour) || !this.isWorkDay(date, workDays));\n  };\n\n  ViewBase.prototype.getRenderDates = function (workDays) {\n    var renderDates = []; // Due to same code for vertical and time line, week & work week views, if condition has used\n\n    if (this.parent.currentView === 'Week' || this.parent.currentView === 'TimelineWeek') {\n      var selectedDate = resetTime(this.parent.selectedDate);\n      var start = getWeekFirstDate(selectedDate, this.parent.activeViewOptions.firstDayOfWeek);\n\n      for (var i = 0, length_1 = WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_1; i++) {\n        if (this.parent.activeViewOptions.showWeekend) {\n          renderDates.push(start);\n        } else {\n          if (this.isWorkDay(start, workDays)) {\n            renderDates.push(start);\n          }\n        }\n\n        start = addDays(start, 1);\n      }\n    } else if (this.parent.currentView === 'WorkWeek' || this.parent.currentView === 'TimelineWorkWeek') {\n      var start = getWeekFirstDate(resetTime(this.parent.selectedDate), this.parent.activeViewOptions.firstDayOfWeek);\n\n      for (var i = 0, length_2 = WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_2; i++) {\n        if (this.isWorkDay(start, workDays)) {\n          renderDates.push(start);\n        }\n\n        start = addDays(start, 1);\n      }\n    } else {\n      var dayCount = this.parent.currentView === 'Agenda' ? this.parent.agendaDaysCount : this.parent.activeViewOptions.interval;\n      var start = resetTime(this.parent.selectedDate);\n\n      do {\n        if (this.parent.activeViewOptions.showWeekend) {\n          renderDates.push(start);\n        } else {\n          if (this.isWorkDay(start, workDays)) {\n            renderDates.push(start);\n          }\n        }\n\n        start = addDays(start, 1);\n      } while (dayCount !== renderDates.length);\n    }\n\n    if (!workDays) {\n      this.renderDates = renderDates;\n    }\n\n    if (this.parent.headerModule) {\n      this.parent.headerModule.previousNextIconHandler();\n    }\n\n    return renderDates;\n  };\n\n  ViewBase.prototype.getNextPreviousDate = function (type) {\n    this.previousNextAction = type;\n\n    if (this.parent.currentView === 'Day' || this.parent.currentView === 'TimelineDay') {\n      if (this.parent.activeViewOptions.showWeekend) {\n        var daysCount = this.parent.activeViewOptions.interval;\n        return addDays(this.parent.selectedDate, type === 'next' ? daysCount : -daysCount);\n      } else {\n        var date = void 0;\n\n        if (type === 'next') {\n          date = addDays(this.renderDates.slice(-1)[0], 1);\n\n          while (!this.isWorkDay(date)) {\n            date = addDays(date, 1);\n          }\n        } else {\n          date = addDays(this.renderDates[0], -1);\n          var count = 0;\n\n          do {\n            if (this.isWorkDay(date)) {\n              count += 1;\n            }\n\n            if (this.parent.activeViewOptions.interval !== count) {\n              date = addDays(date, -1);\n            }\n          } while (this.parent.activeViewOptions.interval !== count);\n        }\n\n        return date;\n      }\n    }\n\n    var weekLength = type === 'next' ? WEEK_LENGTH : -WEEK_LENGTH;\n    return addDays(this.parent.selectedDate, weekLength * this.parent.activeViewOptions.interval);\n  };\n\n  ViewBase.prototype.getLabelText = function (view) {\n    var viewStr = view.charAt(0).toLowerCase() + view.substring(1);\n    return this.parent.localeObj.getConstant(viewStr) + ' of ' + capitalizeFirstWord(this.parent.globalize.formatDate(this.parent.selectedDate, {\n      skeleton: 'long',\n      calendar: this.parent.getCalendarMode()\n    }), 'single');\n  };\n\n  ViewBase.prototype.getDateRangeText = function () {\n    if (this.parent.isAdaptive) {\n      var formatDate = this.parent.activeViewOptions.dateFormat ? this.parent.activeViewOptions.dateFormat : 'MMMM y';\n      return capitalizeFirstWord(this.parent.globalize.formatDate(this.parent.selectedDate, {\n        format: formatDate,\n        calendar: this.parent.getCalendarMode()\n      }), 'single');\n    }\n\n    return this.formatDateRange(this.renderDates[0], this.renderDates[this.renderDates.length - 1]);\n  };\n\n  ViewBase.prototype.formatDateRange = function (startDate, endDate) {\n    var globalize = this.parent.globalize;\n    var mode = this.parent.getCalendarMode();\n\n    if (startDate === endDate) {\n      endDate = null;\n    }\n\n    if (!isNullOrUndefined(this.parent.activeViewOptions.dateFormat)) {\n      var text = '';\n\n      if (!endDate) {\n        text = globalize.formatDate(startDate, {\n          format: this.parent.activeViewOptions.dateFormat,\n          calendar: mode\n        });\n        return capitalizeFirstWord(text, 'multiple');\n      }\n\n      text = globalize.formatDate(startDate, {\n        format: this.parent.activeViewOptions.dateFormat,\n        calendar: mode\n      }) + ' - ' + globalize.formatDate(endDate, {\n        format: this.parent.activeViewOptions.dateFormat,\n        calendar: mode\n      });\n      return capitalizeFirstWord(text, 'multiple');\n    }\n\n    var formattedStr;\n    var longDateFormat;\n\n    if (this.parent.locale === 'en' || this.parent.locale === 'en-US') {\n      longDateFormat = getValue('dateFormats.long', getDefaultDateObject(mode));\n    } else {\n      longDateFormat = getValue('main.' + '' + this.parent.locale + '.dates.calendars.' + mode + '.dateFormats.long', cldrData);\n    }\n\n    if (!endDate) {\n      return capitalizeFirstWord(globalize.formatDate(startDate, {\n        format: longDateFormat,\n        calendar: mode\n      }), 'single');\n    }\n\n    var dateFormat = longDateFormat.trim().toLocaleLowerCase();\n\n    if (dateFormat.substr(0, 1) === 'd') {\n      if (startDate.getFullYear() === endDate.getFullYear()) {\n        if (startDate.getMonth() === endDate.getMonth()) {\n          formattedStr = globalize.formatDate(startDate, {\n            format: 'dd',\n            calendar: mode\n          }) + ' - ' + globalize.formatDate(endDate, {\n            format: 'dd MMMM yyyy',\n            calendar: mode\n          });\n        } else {\n          formattedStr = globalize.formatDate(startDate, {\n            format: 'dd MMM',\n            calendar: mode\n          }) + ' - ' + globalize.formatDate(endDate, {\n            format: 'dd MMM yyyy',\n            calendar: mode\n          });\n        }\n      } else {\n        formattedStr = globalize.formatDate(startDate, {\n          format: 'dd MMM yyyy',\n          calendar: mode\n        }) + ' - ' + globalize.formatDate(endDate, {\n          format: 'dd MMM yyyy',\n          calendar: mode\n        });\n      }\n    } else if (dateFormat.substr(0, 1) === 'm') {\n      if (startDate.getFullYear() === endDate.getFullYear()) {\n        if (startDate.getMonth() === endDate.getMonth()) {\n          formattedStr = globalize.formatDate(startDate, {\n            format: 'MMMM dd',\n            calendar: mode\n          }) + ' - ' + globalize.formatDate(endDate, {\n            format: 'dd, yyyy',\n            calendar: mode\n          });\n        } else {\n          formattedStr = globalize.formatDate(startDate, {\n            format: 'MMM dd',\n            calendar: mode\n          }) + ' - ' + globalize.formatDate(endDate, {\n            format: 'MMM dd, yyyy',\n            calendar: mode\n          });\n        }\n      } else {\n        formattedStr = globalize.formatDate(startDate, {\n          format: 'MMM dd, yyyy',\n          calendar: mode\n        }) + ' - ' + globalize.formatDate(endDate, {\n          format: 'MMM dd, yyyy',\n          calendar: mode\n        });\n      }\n    } else {\n      formattedStr = globalize.formatDate(startDate, {\n        format: longDateFormat,\n        calendar: mode\n      }) + ' - ' + globalize.formatDate(endDate, {\n        format: longDateFormat,\n        calendar: mode\n      });\n    }\n\n    return capitalizeFirstWord(formattedStr, 'multiple');\n  };\n\n  ViewBase.prototype.getMobileDateElement = function (date, className) {\n    var wrap = createElement('div', {\n      className: className,\n      innerHTML: '<div class=\"e-m-date\">' + this.parent.globalize.formatDate(date, {\n        format: 'd',\n        calendar: this.parent.getCalendarMode()\n      }) + '</div>' + '<div class=\"e-m-day\">' + capitalizeFirstWord(this.parent.globalize.formatDate(date, {\n        format: 'E',\n        calendar: this.parent.getCalendarMode()\n      }), 'single') + '</div>'\n    });\n    return wrap;\n  };\n\n  ViewBase.prototype.setResourceHeaderContent = function (tdElement, tdData, className) {\n    if (className === void 0) {\n      className = TEXT_ELLIPSIS;\n    }\n\n    if (this.parent.activeViewOptions.resourceHeaderTemplate) {\n      var data = {\n        resource: tdData.resource,\n        resourceData: tdData.resourceData\n      };\n      var scheduleId = this.parent.element.id + '_';\n      var viewName = this.parent.activeViewOptions.resourceHeaderTemplateName;\n      var templateId = scheduleId + viewName + 'resourceHeaderTemplate';\n      var quickTemplate = [].slice.call(this.parent.getResourceHeaderTemplate()(data, this.parent, 'resourceHeaderTemplate', templateId, false));\n      append(quickTemplate, tdElement);\n    } else {\n      var resourceText = createElement('div', {\n        className: className\n      });\n      this.parent.sanitize(tdData.resourceData[tdData.resource.textField], resourceText);\n      tdElement.appendChild(resourceText);\n    }\n  };\n\n  ViewBase.prototype.renderResourceMobileLayout = function () {\n    if (this.parent.resourceBase.lastResourceLevel && this.parent.resourceBase.lastResourceLevel.length <= 0) {\n      return;\n    }\n\n    this.parent.resourceBase.renderResourceHeader();\n    this.parent.resourceBase.renderResourceTree();\n  };\n\n  ViewBase.prototype.addAutoHeightClass = function (element) {\n    if (!this.parent.uiStateValues.isGroupAdaptive && this.parent.rowAutoHeight && this.isTimelineView() && this.parent.activeViewOptions.group.resources.length > 0) {\n      addClass([element], AUTO_HEIGHT);\n    }\n  };\n\n  ViewBase.prototype.getColElements = function () {\n    return [].slice.call(this.element.querySelectorAll('.' + CONTENT_WRAP_CLASS + ' col, .' + DATE_HEADER_WRAP_CLASS + ' col'));\n  };\n\n  ViewBase.prototype.setColWidth = function (content) {\n    if (this.isTimelineView()) {\n      var colElements = this.getColElements();\n      var contentBody = this.element.querySelector('.' + CONTENT_TABLE_CLASS + ' tbody');\n      var colWidth_1 = contentBody.getBoundingClientRect().width / (colElements.length / 2);\n\n      if (content.offsetHeight !== content.clientHeight) {\n        var resourceColumn = this.parent.element.querySelector('.' + RESOURCE_COLUMN_WRAP_CLASS);\n\n        if (!isNullOrUndefined(resourceColumn)) {\n          setStyleAttribute(resourceColumn, {\n            'height': formatUnit(content.clientHeight)\n          });\n        }\n      }\n\n      var cssClass = \".\" + HEADER_CELLS_CLASS + \",.\" + TIME_SLOT_CLASS + \",.\" + HEADER_WEEK_CELLS_CLASS + \",.\" + HEADER_MONTH_CELLS_CLASS + \",.\" + HEADER_YEAR_CELLS_CLASS;\n      var headerCellElements = [].slice.call(this.element.querySelectorAll(cssClass));\n      headerCellElements.forEach(function (ele) {\n        var colSpan = isNullOrUndefined(ele.getAttribute('colspan')) ? '1' : ele.getAttribute('colspan');\n        var headerCellColSpan = parseInt(colSpan, 10);\n        setStyleAttribute(ele, {\n          'width': formatUnit(colWidth_1 * headerCellColSpan)\n        });\n      });\n    }\n  };\n\n  ViewBase.prototype.resetColWidth = function () {\n    var colElements = this.getColElements();\n\n    for (var _i = 0, colElements_1 = colElements; _i < colElements_1.length; _i++) {\n      var col = colElements_1[_i];\n      col.style.width = '';\n    }\n  };\n\n  ViewBase.prototype.getContentAreaElement = function () {\n    return this.element.querySelector('.' + CONTENT_WRAP_CLASS);\n  };\n\n  ViewBase.prototype.wireExpandCollapseIconEvents = function () {\n    if (this.parent.resourceBase && this.parent.resourceBase.resourceCollection.length > 1) {\n      var treeIcons = [].slice.call(this.element.querySelectorAll('.' + RESOURCE_TREE_ICON_CLASS));\n\n      for (var _i = 0, treeIcons_1 = treeIcons; _i < treeIcons_1.length; _i++) {\n        var icon = treeIcons_1[_i];\n        EventHandler.clearEvents(icon);\n        EventHandler.add(icon, 'click', this.parent.resourceBase.onTreeIconClick, this.parent.resourceBase);\n      }\n    }\n  };\n\n  ViewBase.prototype.scrollToDate = function (scrollDate) {\n    if (['Month', 'TimelineMonth'].indexOf(this.parent.currentView) === -1 || isNullOrUndefined(scrollDate)) {\n      return;\n    }\n\n    var scrollWrap = this.getContentAreaElement();\n    var tdDate = new Date(resetTime(new Date(+scrollDate)).getTime()).getTime();\n    var dateElement = scrollWrap.querySelector(\".\" + WORK_CELLS_CLASS + \"[data-date=\\\"\" + tdDate + \"\\\"]\");\n\n    if (this.parent.currentView === 'Month' && dateElement) {\n      if (scrollWrap.scrollWidth > scrollWrap.clientWidth) {\n        if (!this.parent.enableRtl) {\n          scrollWrap.scrollLeft = dateElement.offsetLeft;\n        } else {\n          scrollWrap.scrollLeft = -(this.parent.getContentTable().offsetWidth - dateElement.offsetLeft - dateElement.offsetWidth);\n        }\n      }\n\n      scrollWrap.scrollTop = dateElement.offsetTop;\n    }\n\n    if (this.parent.currentView === 'TimelineMonth' && dateElement) {\n      if (!this.parent.enableRtl) {\n        scrollWrap.scrollLeft = dateElement.offsetLeft;\n      } else {\n        scrollWrap.scrollLeft = -(this.parent.getContentTable().offsetWidth - dateElement.offsetLeft - dateElement.offsetWidth);\n      }\n    }\n  };\n\n  ViewBase.prototype.setPersistence = function () {\n    if (this.parent.enablePersistence) {\n      var contentWrap = this.element.querySelector('.e-content-wrap');\n\n      if (!isNullOrUndefined(contentWrap)) {\n        this.parent.scrollLeft = contentWrap.scrollLeft;\n        this.parent.scrollTop = contentWrap.scrollTop;\n      }\n    }\n  };\n\n  ViewBase.prototype.retainScrollPosition = function () {\n    if (this.parent.enablePersistence) {\n      var conWrap = this.parent.element.querySelector('.e-content-wrap');\n\n      if (!isNullOrUndefined(conWrap) && !isNullOrUndefined(this.parent.scrollLeft) && !isNullOrUndefined(this.parent.scrollTop)) {\n        conWrap.scrollTop = this.parent.scrollTop;\n        conWrap.scrollLeft = this.parent.scrollLeft;\n      }\n    }\n  };\n\n  ViewBase.prototype.getViewStartDate = function () {\n    var startDate = this.renderDates[0];\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.resourceBase.lastResourceLevel.length > 0) {\n      startDate = this.parent.resourceBase.getResourceRenderDates()[0];\n    }\n\n    return startDate;\n  };\n\n  ViewBase.prototype.getViewEndDate = function () {\n    var endDate = addDays(this.renderDates[this.renderDates.length - 1], 1);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && this.parent.resourceBase.lastResourceLevel.length > 0) {\n      endDate = addDays(this.parent.resourceBase.getResourceRenderDates().slice(-1)[0], 1);\n    }\n\n    return endDate;\n  };\n\n  ViewBase.prototype.getAdjustedDate = function (startTime) {\n    if (!this.parent.activeViewOptions.timeScale.enable || this.parent.currentView === 'Month' || this.parent.currentView === 'TimelineYear' && this.parent.activeViewOptions.group.resources.length === 0) {\n      return new Date(startTime.setHours(0, 0, 0, 0));\n    } else if (this.parent.currentView === 'TimelineYear' && this.parent.activeViewOptions.group.resources.length > 0) {\n      startTime.setHours(0, 0, 0, 0);\n      return new Date(startTime.setDate(1));\n    }\n\n    return null;\n  };\n\n  ViewBase.prototype.resetColLevels = function () {\n    this.parent.resourceBase.expandedResources = [];\n    var renderedCount = this.parent.virtualScrollModule.getRenderedCount();\n    var lastLevel = this.parent.activeViewOptions.group.byDate ? this.colLevels[0] : this.parent.resourceBase.renderedResources;\n    var index = 0;\n\n    for (var i = 0; i < lastLevel.length; i++) {\n      if (index >= renderedCount) {\n        break;\n      }\n\n      index += lastLevel[parseInt(i.toString(), 10)].colSpan;\n      this.parent.resourceBase.expandedResources.push(lastLevel[parseInt(i.toString(), 10)]);\n    }\n\n    if (this.parent.activeViewOptions.group.byDate) {\n      this.colLevels[0] = this.parent.resourceBase.expandedResources;\n      this.parent.virtualScrollModule.setRenderedDates(this.parent.resourceBase.expandedResources);\n    } else {\n      this.colLevels[this.colLevels.length - 2] = this.parent.resourceBase.expandedResources;\n      this.parent.resourceBase.renderedResources = this.parent.resourceBase.expandedResources;\n    }\n\n    if (this.parent.currentView !== 'Month') {\n      this.colLevels[this.colLevels.length - 1] = this.colLevels[this.colLevels.length - 1].slice(0, index);\n      this.parent.resourceBase.expandedResources = this.colLevels[this.colLevels.length - 1];\n    }\n  };\n\n  ViewBase.prototype.destroy = function () {\n    if (this.element && this.element.parentNode) {\n      remove(this.element);\n    }\n\n    this.element = null;\n    this.renderDates = null;\n    this.colLevels = null;\n  };\n\n  return ViewBase;\n}();\n\nvar __extends$18 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * vertical view\n */\n\n\nvar VerticalView =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$18(VerticalView, _super);\n\n  function VerticalView(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.viewClass = 'e-day-view';\n    _this.isInverseTableSelect = true;\n    _this.baseCssClass = 'e-vertical-view';\n    _this.appointment = null;\n    return _this;\n  }\n\n  VerticalView.prototype.getModuleName = function () {\n    return 'verticalView';\n  };\n\n  VerticalView.prototype.addEventListener = function () {\n    this.parent.on(scrollUiUpdate, this.scrollUiUpdate, this);\n    this.parent.on(dataReady, this.renderEvents, this);\n  };\n\n  VerticalView.prototype.removeEventListener = function () {\n    if (this.parent) {\n      this.parent.off(scrollUiUpdate, this.scrollUiUpdate);\n      this.parent.off(dataReady, this.renderEvents);\n    }\n  };\n\n  VerticalView.prototype.renderEvents = function () {\n    this.appointment = this.parent.activeViewOptions.timeScale.enable ? new VerticalEvent(this.parent) : new MonthEvent(this.parent);\n    this.appointment.renderAppointments();\n    this.parent.notify(eventsLoaded, {});\n  };\n\n  VerticalView.prototype.onContentScroll = function (e) {\n    this.parent.removeNewEventElement();\n    var target = e.target;\n    this.parent.notify(virtualScroll, e);\n    this.scrollLeftPanel(target);\n    this.scrollTopPanel(target);\n\n    if (!this.parent.isAdaptive) {\n      this.parent.uiStateValues.top = target.scrollTop;\n    }\n\n    this.parent.uiStateValues.left = target.scrollLeft;\n\n    if (!isNullOrUndefined(this.parent.quickPopup)) {\n      this.parent.quickPopup.quickPopupHide();\n    }\n\n    this.setPersistence();\n  };\n\n  VerticalView.prototype.onAdaptiveMove = function (e) {\n    if (this.parent.uiStateValues.action) {\n      e.preventDefault();\n    }\n  };\n\n  VerticalView.prototype.onAdaptiveScroll = function (e) {\n    if (this.parent && !this.parent.isDestroyed) {\n      this.parent.removeNewEventElement();\n      this.parent.uiStateValues.top = e.target.scrollTop;\n    }\n  };\n\n  VerticalView.prototype.scrollLeftPanel = function (target) {\n    var leftPanel = this.getLeftPanelElement();\n\n    if (!isNullOrUndefined(leftPanel)) {\n      leftPanel.scrollTop = target.scrollTop;\n    }\n  };\n\n  VerticalView.prototype.scrollUiUpdate = function (args) {\n    if (!this.parent) {\n      return;\n    }\n\n    var dateHeader = this.parent.element.querySelector('.' + DATE_HEADER_WRAP_CLASS);\n    var headerBarHeight = this.getHeaderBarHeight();\n    var timeCells = this.getLeftPanelElement();\n    var content = this.getScrollableElement();\n    var header = this.getDatesHeaderElement();\n    var scrollerHeight = this.parent.element.offsetHeight - headerBarHeight - header.offsetHeight;\n    this.setContentHeight(content, timeCells, scrollerHeight);\n    this.setColWidth(content);\n    var scrollBarWidth = getScrollBarWidth(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    header.firstElementChild.style[args.cssProperties.rtlBorder] = ''; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    header.style[args.cssProperties.rtlPadding] = '';\n    var isDateHeaderScroll = this.parent.enableAllDayScroll ? !(content.offsetWidth - content.clientWidth <= dateHeader.offsetWidth - dateHeader.clientWidth && dateHeader.classList.contains('e-all-day-scroll')) : true;\n\n    if (content.offsetWidth - content.clientWidth > 0 && isDateHeaderScroll) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      header.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? '1px' : '0px'; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      header.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + 'px' : '0px';\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      header.firstElementChild.style[args.cssProperties.border] = ''; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      header.style[args.cssProperties.padding] = '';\n    }\n\n    if (!args.isPreventScrollUpdate) {\n      if (this.parent.uiStateValues.isInitial) {\n        if (this.parent.currentView.indexOf('Timeline') > -1) {\n          content.scrollTop = this.parent.uiStateValues.top;\n        }\n\n        this.scrollToWorkHour();\n        this.parent.uiStateValues.isInitial = false;\n      } else {\n        if (timeCells) {\n          timeCells.scrollTop = this.parent.uiStateValues.top;\n        }\n\n        content.scrollTop = this.parent.uiStateValues.top;\n        content.scrollLeft = this.parent.uiStateValues.left;\n      }\n    }\n\n    if (this.parent.activeViewOptions.timeScale.enable) {\n      this.highlightCurrentTime();\n    }\n\n    this.retainScrollPosition();\n  };\n\n  VerticalView.prototype.setContentHeight = function (element, leftPanelElement, height) {\n    if (this.parent.isAdaptive && !this.isTimelineView()) {\n      element.style.height = this.parent.height === 'auto' ? 'auto' : formatUnit(height);\n    } else {\n      if (!isNullOrUndefined(leftPanelElement)) {\n        leftPanelElement.style.height = this.parent.height === 'auto' ? 'auto' : formatUnit(height - this.getScrollXIndent(element));\n      }\n\n      element.style.height = this.parent.height === 'auto' ? 'auto' : formatUnit(height);\n    }\n  };\n\n  VerticalView.prototype.scrollToWorkHour = function () {\n    if (this.parent.workHours.highlight) {\n      var firstWorkHourCell = this.element.querySelector('.' + WORK_HOURS_CLASS);\n\n      if (firstWorkHourCell) {\n        this.getScrollableElement().scrollTop = firstWorkHourCell.offsetTop;\n        this.parent.uiStateValues.top = firstWorkHourCell.offsetTop;\n        this.parent.uiStateValues.left = 0;\n      }\n    }\n  };\n\n  VerticalView.prototype.scrollToHour = function (hour, scrollDate) {\n    var date = this.parent.getStartEndTime(hour);\n\n    if (!isNullOrUndefined(scrollDate)) {\n      var headerElement = this.element.querySelector('.' + HEADER_CELLS_CLASS + '[data-date=\"' + new Date(resetTime(scrollDate)).getTime() + '\"]');\n\n      if (headerElement) {\n        if (this.parent.enableRtl) {\n          var conWrap = this.element.querySelector('.' + CONTENT_TABLE_CLASS);\n          this.getScrollableElement().scrollLeft = -(conWrap.offsetWidth - headerElement.offsetLeft - headerElement.offsetWidth);\n        } else {\n          this.getScrollableElement().scrollLeft = headerElement.offsetLeft;\n        }\n      }\n    }\n\n    if (isNullOrUndefined(date)) {\n      return;\n    }\n\n    this.getScrollableElement().scrollTop = this.getTopFromDateTime(date);\n  };\n\n  VerticalView.prototype.scrollToDate = function (scrollDate) {\n    this.scrollToHour(null, scrollDate);\n  };\n\n  VerticalView.prototype.generateColumnLevels = function () {\n    var level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);\n    var columnLevels = [];\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      columnLevels = this.parent.resourceBase.generateResourceLevels(level);\n\n      if (this.parent.activeViewOptions.group.hideNonWorkingDays) {\n        while (columnLevels[0].length === 0) {\n          this.parent.setProperties({\n            selectedDate: this.parent.activeView.getNextPreviousDate(this.previousNextAction)\n          }, true);\n          this.parent.activeView.getRenderDates();\n\n          if (this.parent.headerModule) {\n            this.parent.headerModule.setCalendarDate(this.parent.selectedDate);\n            this.parent.headerModule.updateDateRange();\n          }\n\n          level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);\n          columnLevels = this.parent.resourceBase.generateResourceLevels(level);\n        }\n      }\n\n      if (this.parent.uiStateValues.isGroupAdaptive && this.parent.resourceBase.lastResourceLevel.length > 0) {\n        var resourceLevel = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];\n        var resStartHour = resourceLevel.resourceData[resourceLevel.resource.startHourField];\n        var resEndHour = resourceLevel.resourceData[resourceLevel.resource.endHourField];\n        var dateSlots = this.getDateSlots(resourceLevel.renderDates, resourceLevel.workDays, resStartHour, resEndHour);\n        columnLevels = [dateSlots];\n      }\n    } else {\n      columnLevels.push(level);\n    }\n\n    this.colLevels = columnLevels;\n    return columnLevels;\n  }; // eslint-disable-next-line max-len\n\n\n  VerticalView.prototype.getDateSlots = function (renderDates, workDays, workStartHour, workEndHour) {\n    if (workStartHour === void 0) {\n      workStartHour = this.parent.workHours.start;\n    }\n\n    if (workEndHour === void 0) {\n      workEndHour = this.parent.workHours.end;\n    }\n\n    var dateCol = [];\n    var start = this.parent.getStartEndTime(workStartHour);\n    var end = this.parent.getStartEndTime(workEndHour);\n\n    for (var _i = 0, renderDates_1 = renderDates; _i < renderDates_1.length; _i++) {\n      var col = renderDates_1[_i];\n      var classList$$1 = [HEADER_CELLS_CLASS];\n\n      if (this.isCurrentDate(col)) {\n        classList$$1.push(CURRENT_DAY_CLASS);\n      }\n\n      dateCol.push({\n        date: col,\n        type: 'dateHeader',\n        className: classList$$1,\n        colSpan: 1,\n        workDays: workDays,\n        startHour: new Date(+start),\n        endHour: new Date(+end)\n      });\n    }\n\n    return dateCol;\n  };\n\n  VerticalView.prototype.isWorkHourRange = function (date) {\n    return this.getStartHour().getTime() <= date.getTime() && this.getEndHour().getTime() >= date.getTime();\n  };\n\n  VerticalView.prototype.highlightCurrentTime = function () {\n    var _this = this;\n\n    if (this.parent.activeViewOptions.headerRows.length > 0 && this.parent.activeViewOptions.headerRows.slice(-1)[0].option !== 'Hour') {\n      return;\n    }\n\n    var currentDate = this.parent.getCurrentTime();\n\n    if (this.parent.showTimeIndicator && this.isWorkHourRange(currentDate)) {\n      var currentDateIndex = this.getCurrentTimeIndicatorIndex();\n\n      if (currentDateIndex.length > 0) {\n        var workCells = [].slice.call(this.element.querySelectorAll('.' + WORK_CELLS_CLASS));\n\n        if (workCells.length > 0) {\n          this.changeCurrentTimePosition();\n        }\n\n        if (isNullOrUndefined(this.currentTimeIndicatorTimer)) {\n          var interval = MS_PER_MINUTE - (currentDate.getSeconds() * 1000 + currentDate.getMilliseconds());\n\n          if (interval <= MS_PER_MINUTE - 1000) {\n            window.setTimeout(function () {\n              if (!isNullOrUndefined(_this.currentTimeIndicatorTimer)) {\n                _this.clearCurrentTimeIndicatorTimer();\n\n                _this.changeCurrentTimePosition();\n\n                _this.updateCurrentTimeIndicatorTimer();\n              }\n            }, interval);\n          }\n\n          this.updateCurrentTimeIndicatorTimer();\n        }\n      } else {\n        this.clearCurrentTimeIndicatorTimer();\n      }\n    } else {\n      this.clearCurrentTimeIndicatorTimer();\n    }\n  };\n\n  VerticalView.prototype.getCurrentTimeIndicatorIndex = function () {\n    var currentDateIndex = [];\n\n    if (!isNullOrUndefined(this.parent.resourceBase) && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      var count = 0;\n      var currentDate = resetTime(this.parent.getCurrentTime());\n\n      if (this.parent.virtualScrollModule && this.parent.activeViewOptions.allowVirtualScrolling && this.parent.activeViewOptions.group.byDate) {\n        for (var _i = 0, _a = this.parent.resourceBase.expandedResources; _i < _a.length; _i++) {\n          var resource = _a[_i];\n\n          if (resetTime(resource.date).getTime() === currentDate.getTime()) {\n            currentDateIndex.push(count);\n          }\n\n          count += 1;\n        }\n      } else {\n        for (var _b = 0, _c = this.parent.resourceBase.renderedResources; _b < _c.length; _b++) {\n          var resource = _c[_b];\n          var index = this.parent.getIndexOfDate(resource.renderDates, currentDate);\n\n          if (index >= 0) {\n            var resIndex = this.parent.activeViewOptions.group.byDate ? this.parent.resourceBase.lastResourceLevel.length * index + count : count + index;\n            currentDateIndex.push(resIndex);\n          }\n\n          count += this.parent.activeViewOptions.group.byDate ? 1 : resource.renderDates.length;\n        }\n      }\n    } else {\n      var renderDates = this.parent.uiStateValues.isGroupAdaptive && this.parent.resourceBase.lastResourceLevel.length > 0 ? this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex].renderDates : this.renderDates;\n      var index = this.parent.getIndexOfDate(renderDates, resetTime(this.parent.getCurrentTime()));\n\n      if (index >= 0) {\n        currentDateIndex.push(index);\n      }\n    }\n\n    return currentDateIndex;\n  };\n\n  VerticalView.prototype.clearCurrentTimeIndicatorTimer = function () {\n    if (!isNullOrUndefined(this.currentTimeIndicatorTimer)) {\n      window.clearInterval(this.currentTimeIndicatorTimer);\n      this.currentTimeIndicatorTimer = null;\n      this.removeCurrentTimeIndicatorElements();\n    }\n  };\n\n  VerticalView.prototype.updateCurrentTimeIndicatorTimer = function () {\n    var _this = this;\n\n    this.currentTimeIndicatorTimer = window.setInterval(function () {\n      _this.changeCurrentTimePosition();\n    }, MS_PER_MINUTE);\n  };\n\n  VerticalView.prototype.removeCurrentTimeIndicatorElements = function () {\n    var queryString = '.' + PREVIOUS_TIMELINE_CLASS + ',.' + CURRENT_TIMELINE_CLASS + ',.' + CURRENT_TIME_CLASS;\n    var timeIndicator = [].slice.call(this.element.querySelectorAll(queryString));\n\n    for (var _i = 0, timeIndicator_1 = timeIndicator; _i < timeIndicator_1.length; _i++) {\n      var indicator = timeIndicator_1[_i];\n      remove(indicator);\n    }\n  };\n\n  VerticalView.prototype.changeCurrentTimePosition = function () {\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeCurrentTimeIndicatorElements();\n    var currentDateIndex = this.getCurrentTimeIndicatorIndex();\n    var firstRow = this.parent.getContentTable().rows[0];\n    var top = this.getTopFromDateTime(this.parent.getCurrentTime());\n    var topInPx = formatUnit(top);\n    var rowIndex = Math.floor(top / firstRow.cells[0].offsetHeight);\n    var timeCellsWrap = this.getLeftPanelElement();\n    var timeTrs = [].slice.call(timeCellsWrap.querySelectorAll('tr'));\n\n    if (isNullOrUndefined(rowIndex) || isNaN(rowIndex) || rowIndex === timeTrs.length) {\n      return;\n    }\n\n    var curTimeWrap = [].slice.call(this.element.querySelectorAll('.' + TIMELINE_WRAPPER_CLASS));\n\n    for (var i = 0, length_1 = currentDateIndex[0]; i < length_1; i++) {\n      curTimeWrap[parseInt(i.toString(), 10)].appendChild(createElement('div', {\n        className: PREVIOUS_TIMELINE_CLASS,\n        styles: 'top:' + topInPx\n      }));\n    }\n\n    for (var _i = 0, currentDateIndex_1 = currentDateIndex; _i < currentDateIndex_1.length; _i++) {\n      var day = currentDateIndex_1[_i];\n      curTimeWrap[parseInt(day.toString(), 10)].appendChild(createElement('div', {\n        className: CURRENT_TIMELINE_CLASS,\n        styles: 'top:' + topInPx\n      }));\n    }\n\n    var currentTimeEle = createElement('div', {\n      innerHTML: this.parent.getTimeString(this.parent.getCurrentTime()),\n      className: CURRENT_TIME_CLASS,\n      styles: 'top:' + topInPx\n    });\n\n    if (rowIndex <= timeTrs.length) {\n      removeClass(timeCellsWrap.querySelectorAll('.' + HIDE_CHILDS_CLASS), HIDE_CHILDS_CLASS);\n\n      if (timeTrs[parseInt(rowIndex.toString(), 10)]) {\n        addClass([timeTrs[parseInt(rowIndex.toString(), 10)].lastElementChild], HIDE_CHILDS_CLASS);\n      }\n\n      prepend([currentTimeEle], timeCellsWrap);\n      currentTimeEle.style.top = formatUnit(currentTimeEle.offsetTop - currentTimeEle.offsetHeight / 2);\n    }\n  };\n\n  VerticalView.prototype.getTopFromDateTime = function (date) {\n    var startHour = this.getStartHour();\n    var diffInMinutes = (date.getHours() - startHour.getHours()) * 60 + (date.getMinutes() - startHour.getMinutes());\n    return diffInMinutes * this.getWorkCellHeight() * this.parent.activeViewOptions.timeScale.slotCount / this.parent.activeViewOptions.timeScale.interval;\n  };\n\n  VerticalView.prototype.getWorkCellHeight = function () {\n    return parseFloat(this.element.querySelector('.' + WORK_CELLS_CLASS).getBoundingClientRect().height.toFixed(2));\n  };\n\n  VerticalView.prototype.getTdContent = function (date, type, groupIndex) {\n    var cntEle;\n    var wrapper = createElement('div');\n    var templateName = '';\n    var templateId = this.parent.element.id + '_';\n\n    switch (type) {\n      case 'dateHeader':\n        if (this.parent.activeViewOptions.dateHeaderTemplate) {\n          templateName = 'dateHeaderTemplate';\n          var args = {\n            date: date,\n            type: type\n          };\n          var viewName = this.parent.activeViewOptions.dateHeaderTemplateName;\n          cntEle = [].slice.call(this.parent.getDateHeaderTemplate()(args, this.parent, templateName, templateId + viewName + templateName, false));\n        } else {\n          wrapper.innerHTML = this.parent.activeView.isTimelineView() ? \"<span class=\\\"e-header-date e-navigate\\\">\" + this.getTimelineDate(date) + \"</span>\" : \"<div class=\\\"e-header-day\\\">\" + capitalizeFirstWord(this.getDayName(date), 'single') + \"</div>\" + (\"<div class=\\\"e-header-date e-navigate\\\" role=\\\"link\\\">\" + this.getDate(date) + \"</div>\");\n          cntEle = [].slice.call(wrapper.childNodes);\n        }\n\n        break;\n\n      case 'majorSlot':\n        if (this.parent.activeViewOptions.timeScale.majorSlotTemplate) {\n          templateName = 'majorSlotTemplate';\n          var args = {\n            date: date,\n            type: type\n          };\n          cntEle = [].slice.call(this.parent.getMajorSlotTemplate()(args, this.parent, templateName, templateId + templateName, false));\n        } else {\n          wrapper.innerHTML = \"<span>\" + this.getTime(date) + \"</span>\";\n          cntEle = [].slice.call(wrapper.childNodes);\n        }\n\n        break;\n\n      case 'minorSlot':\n        if (this.parent.activeViewOptions.timeScale.minorSlotTemplate) {\n          templateName = 'minorSlotTemplate';\n          var args = {\n            date: date,\n            type: type\n          };\n          cntEle = [].slice.call(this.parent.getMinorSlotTemplate()(args, this.parent, templateName, templateId + templateName, false));\n        } else {\n          cntEle = [].slice.call(wrapper.childNodes);\n        }\n\n        break;\n\n      case 'alldayCells':\n        if (this.parent.activeViewOptions.cellTemplate) {\n          var viewName = this.parent.activeViewOptions.cellTemplateName;\n          templateName = 'cellTemplate';\n          var args = {\n            date: date,\n            type: type,\n            groupIndex: groupIndex\n          };\n          cntEle = [].slice.call(this.parent.getCellTemplate()(args, this.parent, templateName, templateId + viewName + templateName, false));\n        }\n\n        break;\n    }\n\n    return cntEle;\n  };\n\n  VerticalView.prototype.refreshHeader = function () {\n    remove(this.element.querySelector('tbody tr'));\n    this.renderHeader();\n    this.parent.notify(contentReady, {});\n  };\n\n  VerticalView.prototype.renderLayout = function (type) {\n    this.setPanel(createElement('div', {\n      className: TABLE_WRAP_CLASS\n    }));\n    var clsList = [this.baseCssClass, this.viewClass];\n    clsList.push(type);\n\n    if (this.parent.activeViewOptions.group.byDate) {\n      clsList.push('e-by-date');\n    }\n\n    if (!this.parent.activeViewOptions.timeScale.enable) {\n      addClass([this.element], [TIMESCALE_DISABLE, this.viewClass]);\n    }\n\n    if (this.parent.activeViewOptions.allowVirtualScrolling && !this.parent.uiStateValues.isGroupAdaptive) {\n      clsList.push(VIRTUAL_SCROLL_CLASS);\n    }\n\n    if (this.parent.rowAutoHeight && this.parent.eventSettings.ignoreWhitespace) {\n      clsList.push(IGNORE_WHITESPACE);\n    }\n\n    this.renderPanel(type);\n    addClass([this.element], clsList);\n    this.element.appendChild(this.createTableLayout(OUTER_TABLE_CLASS));\n    this.element.querySelector('table').setAttribute('role', 'presentation');\n    this.colLevels = this.generateColumnLevels();\n    this.renderHeader();\n    this.renderContent();\n\n    if (this.parent.uiStateValues.isGroupAdaptive && !this.parent.element.querySelector('.' + RESOURCE_TOOLBAR_CONTAINER)) {\n      this.renderResourceMobileLayout();\n    }\n\n    this.parent.notify(contentReady, {});\n  };\n\n  VerticalView.prototype.renderHeader = function () {\n    var tr = createElement('tr');\n    var dateTd = createElement('td');\n    dateTd.appendChild(this.renderDatesHeader());\n\n    if (this.parent.activeViewOptions.timeScale.enable) {\n      var indentTd = createElement('td', {\n        className: LEFT_INDENT_CLASS\n      });\n      indentTd.appendChild(this.renderLeftIndent());\n      tr.appendChild(indentTd);\n    }\n\n    tr.appendChild(dateTd);\n    prepend([tr], this.element.querySelector('tbody'));\n  };\n\n  VerticalView.prototype.renderContent = function () {\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.parent.resourceBase.renderedResources = extend([], this.parent.resourceBase.lastResourceLevel, null, true);\n    }\n\n    var tr = createElement('tr');\n    var workTd = createElement('td');\n\n    if (this.parent.isAdaptive) {\n      workTd.setAttribute('colspan', this.parent.activeViewOptions.timeScale.enable ? '2' : '1');\n      var scrollContainer = createElement('div', {\n        className: SCROLL_CONTAINER_CLASS\n      });\n\n      if (this.parent.activeViewOptions.timeScale.enable) {\n        scrollContainer.appendChild(this.renderTimeCells());\n      }\n\n      scrollContainer.appendChild(this.renderContentArea());\n      workTd.appendChild(scrollContainer);\n      EventHandler.add(scrollContainer, 'scroll', this.onAdaptiveScroll, this);\n      EventHandler.add(scrollContainer, Browser.touchMoveEvent, this.onAdaptiveMove, this);\n      tr.appendChild(workTd);\n    } else {\n      var levels = this.colLevels.slice(0);\n\n      if (this.parent.virtualScrollModule) {\n        this.resetColLevels();\n      }\n\n      var wrap = this.renderContentArea();\n      workTd.appendChild(wrap);\n\n      if (this.parent.activeViewOptions.timeScale.enable) {\n        var timesTd = createElement('td');\n        timesTd.appendChild(this.renderTimeCells());\n        tr.appendChild(timesTd);\n      }\n\n      tr.appendChild(workTd);\n\n      if (this.parent.virtualScrollModule) {\n        this.colLevels = levels;\n        this.parent.virtualScrollModule.renderVirtualTrack(wrap);\n      }\n    }\n\n    this.element.querySelector('tbody').appendChild(tr);\n  };\n\n  VerticalView.prototype.renderLeftIndent = function () {\n    var wrap = createElement('div', {\n      className: LEFT_INDENT_WRAP_CLASS\n    });\n    var tbl = this.createTableLayout();\n    var trEle = createElement('tr');\n    var rowCount = this.colLevels.length;\n    var nth;\n\n    for (var i = 0; i < rowCount; i++) {\n      var ntr_1 = trEle.cloneNode();\n      var data_1 = {\n        className: [this.colLevels[parseInt(i.toString(), 10)][0] && this.colLevels[parseInt(i.toString(), 10)][0].className[0]],\n        type: 'emptyCells'\n      };\n\n      if (this.parent.activeViewOptions.showWeekNumber && data_1.className.indexOf(HEADER_CELLS_CLASS) !== -1) {\n        data_1.className.push(WEEK_NUMBER_CLASS);\n        var weekNo = this.parent.getWeekNumberContent(this.renderDates);\n        data_1.template = [createElement('span', {\n          innerHTML: '' + weekNo,\n          attrs: {\n            title: this.parent.localeObj.getConstant('week') + ' ' + weekNo\n          }\n        })];\n      }\n\n      nth = this.createTd(data_1);\n      this.parent.renderHeaderIndentTemplate(data_1, nth);\n      ntr_1.appendChild(nth);\n      tbl.querySelector('tbody').appendChild(ntr_1);\n    }\n\n    var ntr = trEle.cloneNode();\n    var appointmentExpandCollapse = createElement('div', {\n      attrs: {\n        'tabindex': '0',\n        'role': 'list',\n        title: this.parent.localeObj.getConstant('expandAllDaySection'),\n        'aria-disabled': 'false',\n        'aria-label': 'Expand section'\n      },\n      className: ALLDAY_APPOINTMENT_SECTION_CLASS + ' ' + APPOINTMENT_ROW_EXPAND_CLASS + ' ' + ICON + ' ' + DISABLE_CLASS\n    });\n    var data = {\n      className: [ALLDAY_CELLS_CLASS],\n      type: 'emptyCells'\n    };\n    nth = this.createTd(data);\n    nth.appendChild(appointmentExpandCollapse);\n    this.parent.renderHeaderIndentTemplate(data, nth);\n    ntr.appendChild(nth);\n    tbl.querySelector('tbody').appendChild(ntr);\n    wrap.appendChild(tbl);\n    return wrap;\n  };\n\n  VerticalView.prototype.renderDatesHeader = function () {\n    var container = createElement('div', {\n      className: DATE_HEADER_CONTAINER_CLASS\n    });\n    var wrap = createElement('div', {\n      className: DATE_HEADER_WRAP_CLASS\n    });\n    container.appendChild(wrap);\n    var tbl = this.createTableLayout();\n    var trEle = createElement('tr', {\n      className: HEADER_ROW_CLASS\n    });\n    var rowCount = this.colLevels.length;\n    var lastLevel = this.colLevels[rowCount - 1];\n\n    for (var i = 0; i < rowCount; i++) {\n      var ntr = trEle.cloneNode();\n      var level = this.colLevels[parseInt(i.toString(), 10)];\n\n      for (var j = 0; j < level.length; j++) {\n        ntr.appendChild(this.createTd(level[parseInt(j.toString(), 10)]));\n      }\n\n      tbl.querySelector('tbody').appendChild(ntr);\n    }\n\n    this.createAllDayRow(tbl, lastLevel);\n    this.createColGroup(tbl, lastLevel);\n    wrap.appendChild(tbl);\n    return container;\n  };\n\n  VerticalView.prototype.createAllDayRow = function (table, tdData) {\n    var ntr = createElement('tr', {\n      className: ALLDAY_ROW_CLASS\n    });\n\n    for (var j = 0; j < tdData.length; j++) {\n      var td = extend({}, tdData[parseInt(j.toString(), 10)]);\n      td.className = [ALLDAY_CELLS_CLASS];\n      td.type = 'alldayCells';\n      var ntd = this.createTd(td);\n      ntd.setAttribute('data-date', td.date.getTime().toString());\n\n      if (!isNullOrUndefined(td.groupIndex)) {\n        ntd.setAttribute('data-group-index', '' + td.groupIndex);\n      } else if (this.parent.uiStateValues.isGroupAdaptive) {\n        ntd.setAttribute('data-group-index', '' + this.parent.uiStateValues.groupIndex);\n      }\n\n      this.wireCellEvents(ntd);\n      ntr.appendChild(ntd);\n    }\n\n    table.querySelector('tbody').appendChild(ntr);\n    var thead = createElement('thead');\n    thead.appendChild(this.parent.eventBase.createEventWrapper('allDay'));\n    prepend([thead], table);\n  };\n\n  VerticalView.prototype.createTd = function (td) {\n    var tdEle = createElement('td');\n    this.addAttributes(td, tdEle);\n\n    if (td.date && td.type) {\n      var ele = this.getTdContent(td.date, td.type, td.groupIndex);\n\n      if (ele && ele.length) {\n        append(ele, tdEle);\n      }\n    }\n\n    if (!this.parent.isMinMaxDate(resetTime(new Date('' + td.date)))) {\n      addClass([tdEle], DISABLE_DATES);\n    }\n\n    if (td.type === 'resourceHeader') {\n      this.setResourceHeaderContent(tdEle, td);\n    }\n\n    if (td.type === 'dateHeader' && td.className.indexOf(HEADER_CELLS_CLASS) >= 0) {\n      tdEle.setAttribute('data-date', td.date.getTime().toString());\n\n      if (!isNullOrUndefined(td.groupIndex)) {\n        tdEle.setAttribute('data-group-index', '' + td.groupIndex);\n      }\n\n      this.wireMouseEvents(tdEle);\n    }\n\n    var args = {\n      elementType: td.type,\n      element: tdEle,\n      date: td.date,\n      groupIndex: td.groupIndex\n    };\n    this.parent.trigger(renderCell, args);\n    return tdEle;\n  };\n\n  VerticalView.prototype.wireCellEvents = function (element) {\n    EventHandler.add(element, 'mousedown', this.parent.workCellAction.cellMouseDown, this.parent.workCellAction);\n    this.wireMouseEvents(element);\n  };\n\n  VerticalView.prototype.wireMouseEvents = function (element) {\n    EventHandler.add(element, 'click', this.parent.workCellAction.cellClick, this.parent.workCellAction);\n\n    if (!this.parent.isAdaptive) {\n      EventHandler.add(element, 'dblclick', this.parent.workCellAction.cellDblClick, this.parent.workCellAction);\n    }\n  };\n\n  VerticalView.prototype.renderTimeCells = function () {\n    var _this = this;\n\n    var wrap = createElement('div', {\n      className: TIME_CELLS_WRAP_CLASS\n    });\n    var tbl = this.createTableLayout();\n    var trEle = createElement('tr');\n\n    var handler = function (r) {\n      r.type = r.first ? 'majorSlot' : 'minorSlot';\n      r.className = r.last ? [TIME_CELLS_CLASS, TIME_SLOT_CLASS] : [TIME_SLOT_CLASS];\n      var ntr = trEle.cloneNode();\n      var data = {\n        date: r.date,\n        type: r.type,\n        className: r.className\n      };\n      ntr.appendChild(_this.createTd(data));\n      tbl.querySelector('tbody').appendChild(ntr);\n      return r;\n    };\n\n    this.getTimeSlotRows(handler);\n    wrap.appendChild(tbl);\n    return wrap;\n  };\n\n  VerticalView.prototype.renderContentArea = function () {\n    var wrap = createElement('div', {\n      className: CONTENT_WRAP_CLASS\n    });\n    var tbl = this.createTableLayout(CONTENT_TABLE_CLASS);\n    this.setAriaAttributes(tbl);\n    this.addAutoHeightClass(tbl);\n    this.renderContentTable(tbl);\n    this.createColGroup(tbl, this.colLevels.slice(-1)[0]);\n    wrap.appendChild(tbl);\n    this.wireCellEvents(tbl.querySelector('tbody'));\n    EventHandler.add(wrap, 'scroll', this.onContentScroll, this);\n    EventHandler.add(wrap, Browser.touchMoveEvent, this.onAdaptiveMove, this);\n    return wrap;\n  };\n\n  VerticalView.prototype.renderContentTable = function (table) {\n    var tBody = table.querySelector('tbody');\n    append(this.getContentRows(), tBody);\n    this.renderContentTableHeader(table);\n  };\n\n  VerticalView.prototype.getContentRows = function () {\n    var _this = this;\n\n    var rows = [];\n    var tr = createElement('tr');\n    var td = createElement('td', {\n      attrs: {\n        'aria-selected': 'false'\n      }\n    });\n\n    var handler = function (r) {\n      var ntr = tr.cloneNode();\n\n      for (var _i = 0, _a = _this.colLevels[_this.colLevels.length - 1]; _i < _a.length; _i++) {\n        var tdData = _a[_i];\n\n        var ntd = _this.createContentTd(tdData, r, td);\n\n        ntr.appendChild(ntd);\n      }\n\n      rows.push(ntr);\n      return r;\n    };\n\n    this.getTimeSlotRows(handler);\n    return rows;\n  };\n\n  VerticalView.prototype.createContentTd = function (tdData, r, td) {\n    var ntd = td.cloneNode();\n\n    if (tdData.colSpan) {\n      ntd.setAttribute('colspan', tdData.colSpan.toString());\n    }\n\n    var clsName = this.getContentTdClass(r);\n    var cellDate = resetTime(tdData.date);\n\n    if (!this.parent.isMinMaxDate(cellDate)) {\n      clsName.push(DISABLE_DATES);\n    }\n\n    setTime(cellDate, getDateInMs(r.date));\n    var type = 'workCells';\n\n    if (tdData.className.indexOf(RESOURCE_PARENT_CLASS) !== -1) {\n      clsName.push(RESOURCE_GROUP_CELLS_CLASS);\n      type = 'resourceGroupCells';\n    }\n\n    if (this.parent.workHours.highlight && (this.parent.activeViewOptions.timeScale.enable && this.isWorkHour(cellDate, tdData.startHour, tdData.endHour, tdData.workDays) || !this.parent.activeViewOptions.timeScale.enable && this.isWorkDay(cellDate, tdData.workDays))) {\n      clsName.push(WORK_HOURS_CLASS);\n    }\n\n    addClass([ntd], clsName);\n\n    if (this.parent.activeViewOptions.cellTemplate) {\n      var args_1 = {\n        date: cellDate,\n        type: type,\n        groupIndex: tdData.groupIndex\n      };\n      var scheduleId = this.parent.element.id + '_';\n      var viewName = this.parent.activeViewOptions.cellTemplateName;\n      var templateId = scheduleId + viewName + 'cellTemplate';\n      var tooltipTemplate = [].slice.call(this.parent.getCellTemplate()(args_1, this.parent, 'cellTemplate', templateId, false));\n      append(tooltipTemplate, ntd);\n    }\n\n    ntd.setAttribute('data-date', cellDate.getTime().toString());\n\n    if (!isNullOrUndefined(tdData.groupIndex) || this.parent.uiStateValues.isGroupAdaptive) {\n      var groupIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : tdData.groupIndex;\n      ntd.setAttribute('data-group-index', '' + groupIndex);\n    }\n\n    var args = {\n      elementType: type,\n      element: ntd,\n      date: cellDate,\n      groupIndex: tdData.groupIndex\n    };\n    this.parent.trigger(renderCell, args);\n    return ntd;\n  };\n\n  VerticalView.prototype.getContentTdClass = function (r) {\n    return r.last ? [WORK_CELLS_CLASS] : [WORK_CELLS_CLASS, ALTERNATE_CELLS_CLASS];\n  };\n\n  VerticalView.prototype.renderContentTableHeader = function (table) {\n    var thead = createElement('thead');\n    thead.appendChild(this.parent.eventBase.createEventWrapper());\n\n    if (this.parent.activeViewOptions.timeScale.enable) {\n      thead.appendChild(this.parent.eventBase.createEventWrapper('timeIndicator'));\n    }\n\n    prepend([thead], table);\n  };\n\n  VerticalView.prototype.getScrollableElement = function () {\n    if (this.parent.isAdaptive && !this.isTimelineView()) {\n      return this.element.querySelector('.' + SCROLL_CONTAINER_CLASS);\n    } else {\n      return this.getContentAreaElement();\n    }\n  };\n\n  VerticalView.prototype.getLeftPanelElement = function () {\n    return this.element.querySelector('.' + TIME_CELLS_WRAP_CLASS);\n  };\n\n  VerticalView.prototype.getEndDateFromStartDate = function (start) {\n    var msMajorInterval = this.parent.activeViewOptions.timeScale.interval * MS_PER_MINUTE;\n    var msInterval = msMajorInterval / this.parent.activeViewOptions.timeScale.slotCount;\n    var end = new Date(start.getTime());\n    end.setMilliseconds(end.getMilliseconds() + msInterval);\n    return end;\n  };\n\n  VerticalView.prototype.getTimeSlotRows = function (handler) {\n    var rows = [];\n    var startHour = this.getStartHour();\n    var endHour = this.getEndHour();\n    var msMajorInterval = this.parent.activeViewOptions.timeScale.interval * MS_PER_MINUTE;\n    var msInterval = msMajorInterval / this.parent.activeViewOptions.timeScale.slotCount;\n    var length = Math.round(MS_PER_DAY / msInterval);\n    var msStartHour = startHour.getTime();\n    var msEndHour = endHour.getTime();\n\n    if (msStartHour !== msEndHour) {\n      var duration = this.parent.activeViewOptions.timeScale.interval / this.parent.activeViewOptions.timeScale.slotCount;\n      length = Math.abs(msEndHour - msStartHour) / msInterval - (new Date(msEndHour).getTimezoneOffset() - new Date(msStartHour).getTimezoneOffset()) / duration;\n    }\n\n    if (!this.parent.activeViewOptions.timeScale.enable) {\n      length = 1;\n    }\n\n    var start = this.parent.getStartEndTime(this.parent.workHours.start);\n    var end = this.parent.getStartEndTime(this.parent.workHours.end);\n\n    for (var i = 0; i < length; i++) {\n      var dt = new Date(msStartHour + msInterval * i);\n\n      if (isDaylightSavingTime(dt) || new Date(msStartHour).getTimezoneOffset() !== dt.getTimezoneOffset()) {\n        var timeOffset = new Date(msStartHour).getTimezoneOffset() - dt.getTimezoneOffset();\n        dt = new Date(dt.getTime() - 1000 * 60 * timeOffset);\n      }\n\n      var majorTickDivider = i % (msMajorInterval / msInterval);\n      var row = {\n        date: new Date('' + dt),\n        startHour: start,\n        endHour: end,\n        first: majorTickDivider === 0,\n        middle: majorTickDivider < this.parent.activeViewOptions.timeScale.slotCount - 1,\n        last: majorTickDivider === this.parent.activeViewOptions.timeScale.slotCount - 1,\n        type: ''\n      };\n\n      if (handler) {\n        handler(row);\n      }\n\n      rows.push(row);\n    }\n\n    return rows;\n  };\n\n  VerticalView.prototype.getAdjustedDate = function (startTime) {\n    if (!this.parent.activeViewOptions.timeScale.enable) {\n      return new Date(startTime.setHours(0, 0, 0, 0));\n    } else {\n      var timeSlots = this.getTimeSlotRows();\n      var startDate = new Date(new Date(timeSlots[0].date.getTime()).setHours(startTime.getHours(), startTime.getMinutes(), startTime.getMilliseconds()));\n\n      for (var i = 0; i < timeSlots.length; i++) {\n        if (timeSlots[parseInt(i.toString(), 10)].date.getTime() > startDate.getTime()) {\n          startTime.setHours(timeSlots[i - 1].date.getHours(), timeSlots[i - 1].date.getMinutes(), timeSlots[i - 1].date.getMilliseconds());\n          return new Date(startTime);\n        }\n      }\n    }\n\n    return null;\n  };\n\n  VerticalView.prototype.destroy = function () {\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    this.clearCurrentTimeIndicatorTimer();\n\n    if (this.element) {\n      if (this.appointment) {\n        this.appointment.destroy();\n        this.appointment = null;\n      }\n\n      var contentScrollableEle = this.getContentAreaElement();\n\n      if (contentScrollableEle) {\n        EventHandler.remove(contentScrollableEle, 'scroll', this.onContentScroll);\n        EventHandler.remove(contentScrollableEle, Browser.touchMoveEvent, this.onAdaptiveMove);\n      }\n\n      if (this.parent.resourceBase) {\n        this.parent.resourceBase.destroy();\n      }\n\n      if (this.parent.scheduleTouchModule) {\n        this.parent.scheduleTouchModule.resetValues();\n      }\n\n      _super.prototype.destroy.call(this);\n    }\n  };\n\n  return VerticalView;\n}(ViewBase);\n\nvar __extends$17 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * day view\n */\n\n\nvar Day =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$17(Day, _super);\n  /**\n   * Constructor for day view\n   *\n   * @param {Schedule} parent Accepts the schedule instance\n   */\n\n\n  function Day(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.viewClass = 'e-day-view';\n    return _this;\n  }\n  /**\n   * Get module name.\n   *\n   * @returns {string} Returns the module name.\n   */\n\n\n  Day.prototype.getModuleName = function () {\n    return 'day';\n  };\n\n  return Day;\n}(VerticalView);\n\nvar __extends$19 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * week view\n */\n\n\nvar Week =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$19(Week, _super);\n  /**\n   * Constructor for week view\n   *\n   * @param {Schedule} parent Accepts the schedule instance\n   */\n\n\n  function Week(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.viewClass = 'e-week-view';\n    return _this;\n  }\n\n  Week.prototype.startDate = function () {\n    return this.getViewStartDate();\n  };\n\n  Week.prototype.endDate = function () {\n    return this.getViewEndDate();\n  };\n  /**\n   * Get module name.\n   *\n   * @returns {string} Returns the module name.\n   */\n\n\n  Week.prototype.getModuleName = function () {\n    return 'week';\n  };\n\n  return Week;\n}(VerticalView);\n\nvar __extends$20 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * work week view\n */\n\n\nvar WorkWeek =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$20(WorkWeek, _super);\n  /**\n   * Constructor for work week view\n   *\n   * @param {Schedule} parent Accepts the schedule instance\n   */\n\n\n  function WorkWeek(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.viewClass = 'e-work-week-view';\n    return _this;\n  }\n\n  WorkWeek.prototype.startDate = function () {\n    return this.getViewStartDate();\n  };\n\n  WorkWeek.prototype.endDate = function () {\n    return this.getViewEndDate();\n  };\n  /**\n   * Get module name.\n   *\n   * @returns {string} Returns the module name.\n   */\n\n\n  WorkWeek.prototype.getModuleName = function () {\n    return 'workWeek';\n  };\n\n  return WorkWeek;\n}(VerticalView);\n\nvar __extends$21 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * month view\n */\n\n\nvar Month =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$21(Month, _super);\n\n  function Month(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.dayNameFormat = 'wide';\n    _this.viewClass = 'e-month-view';\n    _this.isInverseTableSelect = false;\n    _this.monthEvent = null;\n    _this.monthDates = {};\n    return _this;\n  }\n\n  Month.prototype.addEventListener = function () {\n    this.parent.on(scrollUiUpdate, this.onScrollUIUpdate, this);\n    this.parent.on(dataReady, this.onDataReady, this);\n    this.parent.on(cellClick, this.onCellClick, this);\n  };\n\n  Month.prototype.removeEventListener = function () {\n    if (this.parent) {\n      this.parent.off(scrollUiUpdate, this.onScrollUIUpdate);\n      this.parent.off(dataReady, this.onDataReady);\n      this.parent.off(cellClick, this.onCellClick);\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Month.prototype.onDataReady = function (args) {\n    this.monthEvent = new MonthEvent(this.parent);\n    this.monthEvent.renderAppointments();\n    this.parent.notify(eventsLoaded, {});\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Month.prototype.onCellClick = function (event) {};\n\n  Month.prototype.onContentScroll = function (e) {\n    this.parent.removeNewEventElement();\n    this.parent.notify(virtualScroll, e);\n    this.scrollTopPanel(e.target);\n    this.scrollLeftPanel(e.target);\n    this.parent.uiStateValues.top = e.target.scrollTop;\n    this.parent.uiStateValues.left = e.target.scrollLeft;\n    this.setPersistence();\n  };\n\n  Month.prototype.scrollLeftPanel = function (target) {\n    var leftPanel = this.getLeftPanelElement();\n\n    if (leftPanel) {\n      leftPanel.scrollTop = target.scrollTop;\n    }\n  };\n\n  Month.prototype.getLeftPanelElement = function () {\n    return this.element.querySelector('.' + WEEK_NUMBER_WRAPPER_CLASS);\n  };\n\n  Month.prototype.onScrollUIUpdate = function (args) {\n    var headerHeight = this.getHeaderBarHeight();\n    var header = this.getDatesHeaderElement();\n    var content = this.getContentAreaElement();\n    var height = this.parent.element.offsetHeight - headerHeight - header.offsetHeight;\n    var leftPanel = this.getLeftPanelElement();\n\n    if (this.parent.height !== 'auto') {\n      this.setContentHeight(content, leftPanel, height);\n    }\n\n    var scrollBarWidth = getScrollBarWidth();\n    header.firstElementChild.style[args.cssProperties.rtlBorder] = '';\n    header.style[args.cssProperties.rtlPadding] = '';\n\n    if (content.offsetWidth - content.clientWidth > 0) {\n      header.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? '1px' : '0px';\n      header.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + 'px' : '0px';\n    } else {\n      header.firstElementChild.style[args.cssProperties.border] = '';\n      header.style[args.cssProperties.padding] = '';\n    }\n\n    this.setColWidth(content);\n\n    if (args.scrollPosition || !args.isPreventScrollUpdate && this.parent.currentView === 'TimelineMonth') {\n      var top_1 = this.parent.currentView === 'TimelineMonth' ? this.parent.uiStateValues.top : args.scrollPosition.top;\n\n      if (leftPanel) {\n        leftPanel.scrollTop = top_1;\n      }\n\n      content.scrollTop = top_1;\n\n      if (this.parent.uiStateValues.isInitial) {\n        this.scrollToSelectedDate();\n        this.parent.uiStateValues.isInitial = false;\n      } else {\n        content.scrollLeft = this.parent.currentView === 'TimelineMonth' ? this.parent.uiStateValues.left : args.scrollPosition.left;\n      }\n    } else {\n      this.scrollToSelectedDate();\n    }\n\n    this.retainScrollPosition();\n  };\n\n  Month.prototype.scrollToSelectedDate = function () {\n    var headerCell = this.element.querySelector('.' + HEADER_CELLS_CLASS + '[data-date=\"' + this.parent.selectedDate.getTime().toString() + '\"]');\n    var content = this.getContentAreaElement();\n\n    if (!isNullOrUndefined(headerCell)) {\n      content.scrollLeft = !this.parent.enableRtl ? headerCell.offsetLeft : -(this.parent.getContentTable().offsetWidth - headerCell.offsetLeft - headerCell.offsetWidth);\n    } else {\n      content.scrollLeft = 0;\n    }\n\n    if (content.scrollLeft === 0 && this.parent.uiStateValues.isInitial) {\n      this.parent.uiStateValues.left = 0;\n    }\n  };\n\n  Month.prototype.setContentHeight = function (content, leftPanelElement, height) {\n    content.style.height = 'auto';\n\n    if (this.parent.currentView === 'Month') {\n      content.style.height = formatUnit(height);\n    }\n\n    if (leftPanelElement) {\n      if (this.parent.currentView === 'MonthAgenda') {\n        height = this.parent.activeViewOptions.interval > 1 ? this.getContentAreaElement().firstElementChild.offsetHeight : this.element.querySelector('.' + CONTENT_TABLE_CLASS).offsetHeight;\n      }\n\n      leftPanelElement.style.height = 'auto';\n      leftPanelElement.style.height = formatUnit(height - this.getScrollXIndent(content));\n    }\n  };\n\n  Month.prototype.generateColumnLevels = function () {\n    var colLevels = [];\n    var level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      colLevels = this.parent.resourceBase.generateResourceLevels(level);\n\n      if (this.parent.currentView === 'MonthAgenda') {\n        colLevels = [level];\n      }\n\n      if (this.parent.uiStateValues.isGroupAdaptive && this.parent.resourceBase.lastResourceLevel.length > 0) {\n        var resourceLevel = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];\n        var levels_1 = this.getDateSlots(resourceLevel.renderDates, resourceLevel.workDays);\n\n        if (this.parent.activeViewOptions.group.byDate && this.parent.activeViewOptions.group.hideNonWorkingDays) {\n          var index = levels_1.findIndex(function (x, index) {\n            return index !== 0 && x.date.getDay() === levels_1[0].date.getDay();\n          });\n          levels_1 = index > -1 ? levels_1.slice(0, index) : levels_1;\n        }\n\n        colLevels = [levels_1];\n      }\n    } else {\n      colLevels.push(level);\n    }\n\n    this.colLevels = colLevels;\n    return colLevels;\n  };\n\n  Month.prototype.getDateSlots = function (renderDates, workDays) {\n    var count = this.parent.activeViewOptions.showWeekend ? WEEK_LENGTH : workDays.length;\n    var dateSlots = [];\n    var isCurrentMonth = this.isCurrentMonth(this.parent.selectedDate);\n\n    for (var col = 0; col < count; col++) {\n      var classList$$1 = [HEADER_CELLS_CLASS];\n      var currentDateIndex = renderDates.slice(0, count).map(function (date) {\n        return date.getDay();\n      });\n\n      if (isCurrentMonth && currentDateIndex.indexOf(this.parent.currentTimezoneDate.getDay()) === col) {\n        classList$$1.push(CURRENT_DAY_CLASS);\n      }\n\n      dateSlots.push({\n        date: renderDates[parseInt(col.toString(), 10)],\n        type: 'monthDay',\n        className: classList$$1,\n        colSpan: 1,\n        workDays: workDays\n      });\n    }\n\n    return dateSlots;\n  };\n\n  Month.prototype.getDayNameFormat = function () {\n    if (this.parent.isAdaptive || this.parent.activeViewOptions.group.resources.length > 0) {\n      return 'abbreviated';\n    }\n\n    return 'wide';\n  };\n\n  Month.prototype.renderLayout = function (type) {\n    this.dayNameFormat = this.getDayNameFormat();\n    this.setPanel(createElement('div', {\n      className: TABLE_WRAP_CLASS\n    }));\n    var clsList = [this.viewClass];\n    clsList.push(type);\n\n    if (this.parent.activeViewOptions.group.byDate) {\n      clsList.push('e-by-date');\n\n      if (this.parent.currentView !== 'Month') {\n        this.parent.activeViewOptions.group.hideNonWorkingDays = false;\n      }\n    }\n\n    if (this.parent.activeViewOptions.allowVirtualScrolling && !this.parent.uiStateValues.isGroupAdaptive) {\n      clsList.push(VIRTUAL_SCROLL_CLASS);\n    }\n\n    if (this.parent.rowAutoHeight && this.parent.eventSettings.ignoreWhitespace) {\n      clsList.push(IGNORE_WHITESPACE);\n    }\n\n    addClass([this.element], clsList);\n    this.renderPanel(type);\n    this.element.appendChild(this.createTableLayout(OUTER_TABLE_CLASS));\n    this.element.querySelector('table').setAttribute('role', 'presentation');\n    this.colLevels = this.generateColumnLevels();\n    this.renderHeader();\n    this.renderContent();\n    var target = this.parent.currentView === 'MonthAgenda' ? this.parent.activeView.getPanel() : this.parent.element;\n\n    if (this.parent.uiStateValues.isGroupAdaptive && !target.querySelector('.' + RESOURCE_TOOLBAR_CONTAINER)) {\n      this.renderResourceMobileLayout();\n    }\n\n    this.parent.notify(contentReady, {});\n\n    if (this.parent.uiStateValues.isCustomMonth) {\n      this.parent.uiStateValues.isCustomMonth = false;\n    }\n  };\n\n  Month.prototype.refreshHeader = function () {\n    remove(this.element.querySelector('tbody tr'));\n    this.renderHeader();\n    this.parent.notify(contentReady, {});\n  };\n\n  Month.prototype.wireCellEvents = function (element) {\n    EventHandler.add(element, 'mousedown', this.parent.workCellAction.cellMouseDown, this.parent.workCellAction);\n    EventHandler.add(element, 'click', this.parent.workCellAction.cellClick, this.parent.workCellAction);\n\n    if (!this.parent.isAdaptive) {\n      EventHandler.add(element, 'dblclick', this.parent.workCellAction.cellDblClick, this.parent.workCellAction);\n    }\n  };\n\n  Month.prototype.renderHeader = function () {\n    var tr = createElement('tr');\n    this.renderLeftIndent(tr);\n    var dateTd = createElement('td');\n    dateTd.appendChild(this.renderDatesHeader());\n    tr.appendChild(dateTd);\n    prepend([tr], this.element.querySelector('tbody'));\n  };\n\n  Month.prototype.renderLeftIndent = function (tr) {\n    if (this.parent.activeViewOptions.showWeekNumber) {\n      tr.appendChild(createElement('td', {\n        className: 'e-left-indent'\n      }));\n    }\n  };\n\n  Month.prototype.renderContent = function () {\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.parent.resourceBase.renderedResources = extend([], this.parent.resourceBase.lastResourceLevel, null, true);\n    }\n\n    var tr = createElement('tr');\n\n    if (this.parent.activeViewOptions.showWeekNumber) {\n      tr.appendChild(this.renderWeekNumberContent());\n    }\n\n    var workTd = createElement('td');\n    var levels = this.colLevels.slice(0);\n\n    if (this.parent.virtualScrollModule) {\n      this.resetColLevels();\n    }\n\n    var wrap = createElement('div', {\n      className: CONTENT_WRAP_CLASS\n    });\n    var contentArea = this.renderContentArea();\n\n    if (this.parent.currentView === 'Month') {\n      wrap.appendChild(contentArea);\n    } else {\n      var monthAgendaWrapper = createElement('div', {\n        className: TABLE_CONTAINER_CLASS\n      });\n      monthAgendaWrapper.appendChild(contentArea);\n      wrap.appendChild(monthAgendaWrapper);\n    }\n\n    EventHandler.add(wrap, 'scroll', this.onContentScroll, this);\n    workTd.appendChild(wrap);\n    tr.appendChild(workTd);\n\n    if (this.parent.virtualScrollModule) {\n      this.colLevels = levels;\n      this.parent.virtualScrollModule.renderVirtualTrack(wrap);\n    }\n\n    this.element.querySelector('tbody').appendChild(tr);\n    this.renderAppointmentContainer();\n  };\n\n  Month.prototype.renderWeekNumberContent = function () {\n    var dateCol = this.renderDates.map(function (date) {\n      return new Date(+date);\n    });\n    var td = createElement('td');\n    var contentWrapper = createElement('div', {\n      className: WEEK_NUMBER_WRAPPER_CLASS\n    });\n    td.appendChild(contentWrapper);\n    var contentWrapTable = this.createTableLayout();\n    contentWrapper.appendChild(contentWrapTable);\n    var noOfDays = this.parent.activeViewOptions.showWeekend ? WEEK_LENGTH : this.parent.activeViewOptions.workDays.length;\n\n    for (var i = 0, length_1 = this.renderDates.length / noOfDays; i < length_1; i++) {\n      var dates = dateCol.splice(0, noOfDays);\n      var weekNumber = this.parent.getWeekNumberContent(dates);\n      contentWrapTable.querySelector('tbody').appendChild(this.createWeekNumberElement(weekNumber));\n    }\n\n    return td;\n  };\n\n  Month.prototype.renderAppointmentContainer = function () {//Here needs to render mobile view appointment details on selected date\n  };\n\n  Month.prototype.renderDatesHeader = function () {\n    var container = createElement('div', {\n      className: DATE_HEADER_CONTAINER_CLASS\n    });\n    var wrap = createElement('div', {\n      className: DATE_HEADER_WRAP_CLASS\n    });\n    container.appendChild(wrap);\n    var table = this.createTableLayout();\n\n    if (this.parent.currentView === 'Month') {\n      var thead = createElement('thead');\n      thead.appendChild(createElement('tr'));\n      prepend([thead], table);\n    }\n\n    this.createColGroup(table, this.colLevels[this.colLevels.length - 1]);\n    var trEle = createElement('tr');\n\n    for (var i = 0; i < this.colLevels.length; i++) {\n      var level = this.colLevels[parseInt(i.toString(), 10)];\n      var ntr = trEle.cloneNode();\n\n      for (var j = 0; j < level.length; j++) {\n        var td = level[parseInt(j.toString(), 10)];\n        ntr.appendChild(this.createHeaderCell(td));\n      }\n\n      table.querySelector('tbody').appendChild(ntr);\n    }\n\n    wrap.appendChild(table);\n    return container;\n  };\n\n  Month.prototype.createHeaderCell = function (td) {\n    var tdEle = createElement('td');\n    this.addAttributes(td, tdEle);\n\n    if (td.type === 'monthDay') {\n      var ele = createElement('span', {\n        innerHTML: capitalizeFirstWord(this.parent.getDayNames(this.dayNameFormat)[td.date.getDay()], 'single')\n      });\n      tdEle.appendChild(ele);\n    }\n\n    if (td.type === 'resourceHeader') {\n      this.setResourceHeaderContent(tdEle, td);\n    }\n\n    if (td.type === 'dateHeader') {\n      addClass([tdEle], DATE_HEADER_CLASS);\n      tdEle.setAttribute('data-date', td.date.getTime().toString());\n\n      if (this.parent.activeViewOptions.dateHeaderTemplate) {\n        var cellArgs = {\n          date: td.date,\n          type: td.type\n        };\n        var elementId = this.parent.element.id + '_';\n        var viewName = this.parent.activeViewOptions.dateHeaderTemplateName;\n        var templateId = elementId + viewName + 'dateHeaderTemplate';\n        var dateTemplate = [].slice.call(this.parent.getDateHeaderTemplate()(cellArgs, this.parent, 'dateHeaderTemplate', templateId, false));\n\n        if (dateTemplate && dateTemplate.length) {\n          append(dateTemplate, tdEle);\n        }\n      } else {\n        var ele = createElement('span', {\n          className: NAVIGATE_CLASS\n        });\n        var skeleton = 'full';\n        var title = this.parent.globalize.formatDate(td.date, {\n          skeleton: skeleton,\n          calendar: this.parent.getCalendarMode()\n        });\n        ele.setAttribute('title', capitalizeFirstWord(title, 'multiple'));\n        var innerText = this.parent.calendarUtil.isMonthStart(td.date) && !this.isCurrentDate(td.date) && !this.parent.isAdaptive ? this.parent.globalize.formatDate(td.date, {\n          format: 'MMM d',\n          calendar: this.parent.getCalendarMode()\n        }) : this.parent.globalize.formatDate(td.date, {\n          skeleton: 'd',\n          calendar: this.parent.getCalendarMode()\n        });\n        ele.innerHTML = capitalizeFirstWord(innerText, 'single');\n        tdEle.appendChild(ele);\n      }\n\n      this.wireCellEvents(tdEle);\n    }\n\n    var args = {\n      elementType: td.type,\n      element: tdEle,\n      date: td.date,\n      groupIndex: td.groupIndex\n    };\n    this.parent.trigger(renderCell, args);\n    return tdEle;\n  };\n\n  Month.prototype.getContentSlots = function () {\n    if (!(this.colLevels[this.colLevels.length - 1] && this.colLevels[this.colLevels.length - 1][0])) {\n      return [];\n    }\n\n    var slotDatas = [];\n\n    var prepareSlots = function (rowIndex, renderDate, resData, classList$$1) {\n      var data = {\n        date: new Date(+renderDate),\n        groupIndex: resData.groupIndex,\n        workDays: resData.workDays,\n        type: 'monthCells',\n        className: classList$$1 || [WORK_CELLS_CLASS]\n      };\n\n      if (!slotDatas[parseInt(rowIndex.toString(), 10)]) {\n        slotDatas[parseInt(rowIndex.toString(), 10)] = [];\n      }\n\n      slotDatas[parseInt(rowIndex.toString(), 10)].push(data);\n    };\n\n    var includeResource = this.parent.currentView !== 'MonthAgenda' && this.parent.activeViewOptions.group.resources.length > 0;\n\n    if (includeResource && !this.parent.uiStateValues.isGroupAdaptive && !this.parent.activeViewOptions.group.byDate) {\n      for (var _i = 0, _a = this.colLevels[this.colLevels.length - 2]; _i < _a.length; _i++) {\n        var res = _a[_i];\n        var dates = res.renderDates.map(function (date) {\n          return new Date(+date);\n        });\n        var count = this.parent.activeViewOptions.showWeekend ? WEEK_LENGTH : res.workDays.length;\n\n        for (var i = 0; i < res.renderDates.length / count; i++) {\n          var colDates = dates.splice(0, count);\n\n          for (var _b = 0, colDates_1 = colDates; _b < colDates_1.length; _b++) {\n            var colDate = colDates_1[_b];\n            prepareSlots(i, colDate, res);\n          }\n        }\n      }\n    } else {\n      var dates = this.renderDates.map(function (date) {\n        return new Date(+date);\n      });\n      var count = this.parent.activeViewOptions.showWeekend ? WEEK_LENGTH : this.parent.activeViewOptions.workDays.length;\n      var level = this.colLevels.slice(0, 1)[0];\n      var startIndex = this.renderDates.map(Number).indexOf(+level[0].date);\n\n      for (var i = 0; i < this.renderDates.length / count; i++) {\n        var colDates = dates.splice(0, count);\n        var k = startIndex;\n\n        var _loop_1 = function (j) {\n          var colDate = colDates[parseInt(k.toString(), 10)];\n          k++;\n\n          if (includeResource) {\n            var lastRow = this_1.colLevels[this_1.colLevels.length - 1];\n            var rowCount = lastRow.length / count;\n            var resourcesTd = lastRow.slice(0, rowCount);\n\n            if (this_1.parent.activeViewOptions.group.hideNonWorkingDays) {\n              resourcesTd = lastRow.filter(function (x) {\n                return x.date.getDay() === colDate.getDay();\n              });\n\n              if (resourcesTd.length === 0) {\n                j = j - 1;\n                return out_j_1 = j, \"continue\";\n              }\n            }\n\n            for (var resIndex = 0; resIndex < resourcesTd.length; resIndex++) {\n              var clsList = void 0;\n\n              if (resIndex !== 0) {\n                clsList = [WORK_CELLS_CLASS, DISABLE_DATE];\n              }\n\n              prepareSlots(i, colDate, resourcesTd[parseInt(resIndex.toString(), 10)], clsList);\n            }\n          } else {\n            prepareSlots(i, colDate, this_1.colLevels[this_1.colLevels.length - 1][0]);\n          }\n\n          out_j_1 = j;\n        };\n\n        var this_1 = this,\n            out_j_1;\n\n        for (var j = startIndex; j < this.colLevels[0].length + startIndex && j < colDates.length; j++) {\n          _loop_1(j);\n\n          j = out_j_1;\n        }\n      }\n    }\n\n    return slotDatas;\n  };\n\n  Month.prototype.updateClassList = function (data) {\n    if (!this.isCustomMonth() && this.isOtherMonth(data.date)) {\n      data.className.push(OTHERMONTH_CLASS);\n    }\n\n    if (!this.parent.isMinMaxDate(data.date)) {\n      data.className.push(DISABLE_DATES);\n    }\n\n    this.updateSelectedCellClass(data);\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Month.prototype.updateSelectedCellClass = function (data) {\n    return;\n  };\n\n  Month.prototype.isOtherMonth = function (date) {\n    return date.getTime() < this.monthDates.start.getTime() || date.getTime() > this.monthDates.end.getTime();\n  };\n\n  Month.prototype.renderContentArea = function () {\n    var tbl = this.createTableLayout(CONTENT_TABLE_CLASS);\n    this.setAriaAttributes(tbl);\n    this.addAutoHeightClass(tbl);\n\n    if (this.parent.currentView === 'TimelineMonth') {\n      this.createColGroup(tbl, this.colLevels[this.colLevels.length - 1]);\n    }\n\n    var monthDate = new Date(this.parent.selectedDate.getTime());\n    this.monthDates = {\n      start: this.parent.calendarUtil.firstDateOfMonth(monthDate),\n      end: this.parent.calendarUtil.lastDateOfMonth(addMonths(monthDate, this.parent.activeViewOptions.interval - 1))\n    };\n    var tBody = tbl.querySelector('tbody');\n    append(this.getContentRows(), tBody);\n    this.wireCellEvents(tBody);\n    return tbl;\n  };\n\n  Month.prototype.getContentRows = function () {\n    var trows = [];\n    var tr = createElement('tr');\n    var td = createElement('td', {\n      attrs: {\n        'aria-selected': 'false'\n      }\n    });\n    var slotDatas = this.getContentSlots();\n\n    for (var row = 0; row < slotDatas.length; row++) {\n      var ntr = tr.cloneNode();\n\n      for (var col = 0; col < slotDatas[parseInt(row.toString(), 10)].length; col++) {\n        var ntd = this.createContentTd(slotDatas[parseInt(row.toString(), 10)][parseInt(col.toString(), 10)], td);\n        ntr.appendChild(ntd);\n      }\n\n      trows.push(ntr);\n    }\n\n    return trows;\n  };\n\n  Month.prototype.createContentTd = function (data, td) {\n    var ntd = td.cloneNode();\n\n    if (data.colSpan) {\n      ntd.setAttribute('colspan', data.colSpan.toString());\n    }\n\n    this.updateClassList(data);\n    var type = data.type;\n\n    if (data.className.indexOf(RESOURCE_PARENT_CLASS) !== -1) {\n      data.className.push(RESOURCE_GROUP_CELLS_CLASS);\n      type = 'resourceGroupCells';\n    }\n\n    if (this.parent.workHours.highlight && this.isWorkDay(data.date, data.workDays)) {\n      data.className.push(WORKDAY_CLASS);\n    }\n\n    if (this.isCurrentDate(data.date)) {\n      data.className.push(CURRENTDATE_CLASS);\n    }\n\n    addClass([ntd], data.className);\n    ntd.setAttribute('data-date', data.date.getTime().toString());\n\n    if (!isNullOrUndefined(data.groupIndex) || this.parent.uiStateValues.isGroupAdaptive) {\n      var groupIndex = this.parent.uiStateValues.isGroupAdaptive ? this.parent.uiStateValues.groupIndex : data.groupIndex;\n      ntd.setAttribute('data-group-index', '' + groupIndex);\n    }\n\n    this.renderDateHeaderElement(data, ntd);\n\n    if (this.parent.activeViewOptions.cellTemplate) {\n      var args_1 = {\n        date: data.date,\n        type: type,\n        groupIndex: data.groupIndex\n      };\n      var scheduleId = this.parent.element.id + '_';\n      var viewName = this.parent.activeViewOptions.cellTemplateName;\n      var templateId = scheduleId + viewName + 'cellTemplate';\n      var cellTemplate = [].slice.call(this.parent.getCellTemplate()(args_1, this.parent, 'cellTemplate', templateId, false));\n      append(cellTemplate, ntd);\n    }\n\n    var args = {\n      elementType: type,\n      element: ntd,\n      date: data.date,\n      groupIndex: data.groupIndex\n    };\n    this.parent.trigger(renderCell, args);\n    return ntd;\n  };\n\n  Month.prototype.renderDateHeaderElement = function (data, ntd) {\n    if (this.parent.currentView === 'TimelineMonth') {\n      return;\n    }\n\n    var dateHeader = createElement('div', {\n      className: DATE_HEADER_CLASS\n    });\n\n    if (this.parent.activeViewOptions.cellHeaderTemplate) {\n      var args = {\n        date: data.date,\n        type: data.type,\n        groupIndex: data.groupIndex\n      };\n      var scheduleId = this.parent.element.id + '_';\n      var viewName = this.parent.activeViewOptions.cellHeaderTemplateName;\n      var templateId = scheduleId + viewName + 'cellHeaderTemplate';\n      var cellHeaderTemplate = [].slice.call(this.parent.getCellHeaderTemplate()(args, this.parent, 'cellHeaderTemplate', templateId, false));\n      append(cellHeaderTemplate, dateHeader);\n    } else {\n      var innerText = this.parent.calendarUtil.isMonthStart(data.date) && !this.isCurrentDate(data.date) && !this.parent.isAdaptive ? this.parent.globalize.formatDate(data.date, {\n        format: 'MMM d',\n        calendar: this.parent.getCalendarMode()\n      }) : this.parent.globalize.formatDate(data.date, {\n        skeleton: 'd',\n        calendar: this.parent.getCalendarMode()\n      });\n      dateHeader.innerHTML = capitalizeFirstWord(innerText, 'single');\n    }\n\n    ntd.appendChild(dateHeader);\n\n    if (this.getModuleName() === 'month') {\n      addClass([dateHeader], NAVIGATE_CLASS);\n      var skeleton = 'full';\n      var announcementText = this.parent.globalize.formatDate(data.date, {\n        skeleton: skeleton,\n        calendar: this.parent.getCalendarMode()\n      });\n      ntd.setAttribute('aria-label', announcementText);\n    }\n  };\n\n  Month.prototype.getMonthStart = function (currentDate) {\n    var useDisplayDate = this.parent.currentView === 'Month' && !isNullOrUndefined(this.parent.activeViewOptions.displayDate) && (this.parent.uiStateValues.isCustomMonth || this.isCustomRange());\n    var date = useDisplayDate ? this.parent.activeViewOptions.displayDate : !(this.parent.uiStateValues.isCustomMonth || this.isCustomRange()) && this.isCustomMonth() ? currentDate : this.parent.calendarUtil.firstDateOfMonth(currentDate);\n    var monthStart = getWeekFirstDate(date, this.parent.activeViewOptions.firstDayOfWeek);\n    return new Date(monthStart.getFullYear(), monthStart.getMonth(), monthStart.getDate());\n  };\n\n  Month.prototype.getMonthEnd = function (currentDate) {\n    if (this.isCustomMonth()) {\n      var start = this.getMonthStart(currentDate);\n      var numberOfDays = WEEK_LENGTH * (this.parent.activeViewOptions.numberOfWeeks > 0 ? this.parent.activeViewOptions.numberOfWeeks : DEFAULT_WEEKS);\n      return addDays(start, numberOfDays - 1);\n    } else {\n      var endDate = addMonths(currentDate, this.parent.activeViewOptions.interval - 1);\n      var lastWeekOfMonth = getWeekFirstDate(this.parent.calendarUtil.lastDateOfMonth(endDate), this.parent.activeViewOptions.firstDayOfWeek);\n      return addDays(lastWeekOfMonth, WEEK_LENGTH - 1);\n    }\n  };\n\n  Month.prototype.isCustomRange = function () {\n    var dates = this.parent.getCurrentViewDates();\n\n    if (dates && dates.length > 0) {\n      var selectedTime = resetTime(this.parent.selectedDate).getTime();\n      var weekFirstDate = getWeekFirstDate(dates[dates.length - 1], this.parent.activeViewOptions.firstDayOfWeek);\n      return !(selectedTime >= getWeekFirstDate(dates[0], this.parent.activeViewOptions.firstDayOfWeek).getTime() && selectedTime <= addDays(weekFirstDate, 6).getTime());\n    }\n\n    return false;\n  };\n\n  Month.prototype.getRenderDates = function (workDays) {\n    var renderDates = [];\n    var currentDate = resetTime(this.parent.selectedDate);\n    var start = this.getMonthStart(currentDate);\n    var monthEnd = this.getMonthEnd(currentDate);\n\n    do {\n      if (this.parent.activeViewOptions.showWeekend) {\n        renderDates.push(start);\n      } else {\n        if (this.isWorkDay(start, workDays)) {\n          renderDates.push(start);\n        }\n      }\n\n      start = addDays(start, 1);\n\n      if (start.getHours() > 0) {\n        start = resetTime(start);\n      }\n    } while (start.getTime() <= monthEnd.getTime());\n\n    if (!workDays) {\n      this.renderDates = renderDates;\n    }\n\n    if (this.parent.headerModule) {\n      this.parent.headerModule.previousNextIconHandler();\n    }\n\n    return renderDates;\n  };\n\n  Month.prototype.getNextPreviousDate = function (type) {\n    if (this.isCustomMonth()) {\n      var dates = this.parent.getCurrentViewDates();\n      var date = getWeekFirstDate(type === 'next' ? dates[dates.length - 1] : dates[0], this.parent.activeViewOptions.firstDayOfWeek);\n      return addDays(date, type === 'next' ? WEEK_LENGTH : -(this.parent.activeViewOptions.numberOfWeeks > 0 ? this.parent.activeViewOptions.numberOfWeeks : DEFAULT_WEEKS) * WEEK_LENGTH);\n    } else {\n      return addMonths(this.parent.selectedDate, (type === 'next' ? 1 : -1) * this.parent.activeViewOptions.interval);\n    }\n  };\n\n  Month.prototype.getStartDate = function () {\n    return this.getMonthStart(this.parent.selectedDate);\n  };\n\n  Month.prototype.getEndDate = function () {\n    return this.getMonthEnd(this.parent.selectedDate);\n  };\n\n  Month.prototype.getEndDateFromStartDate = function (start) {\n    return addDays(new Date(start.getTime()), 1);\n  };\n\n  Month.prototype.getDateRangeText = function () {\n    if (this.parent.isAdaptive || isNullOrUndefined(this.parent.activeViewOptions.dateFormat)) {\n      var startDate = this.parent.selectedDate;\n      var endDate = void 0;\n      var updateCustomRange = false;\n\n      if (this.isCustomMonth()) {\n        var dates = this.parent.getCurrentViewDates();\n        updateCustomRange = dates[0].getMonth() !== dates[dates.length - 1].getMonth() || dates[0].getFullYear() !== dates[dates.length - 1].getFullYear();\n\n        if (updateCustomRange) {\n          startDate = dates[0];\n          endDate = dates[dates.length - 1];\n        }\n      }\n\n      var isUpdateDateRange = this.parent.currentView !== 'Month' || !this.isCustomMonth();\n\n      if (this.parent.activeViewOptions.interval > 1 && isUpdateDateRange || updateCustomRange) {\n        endDate = endDate ? endDate : addMonths(lastDateOfMonth(startDate), this.parent.activeViewOptions.interval - 1);\n\n        if (startDate.getFullYear() === endDate.getFullYear()) {\n          var monthNames = this.parent.globalize.formatDate(startDate, {\n            format: 'MMMM',\n            calendar: this.parent.getCalendarMode()\n          }) + ' - ' + this.parent.globalize.formatDate(endDate, {\n            format: 'MMMM ',\n            calendar: this.parent.getCalendarMode()\n          }) + this.parent.globalize.formatDate(endDate, {\n            skeleton: 'y',\n            calendar: this.parent.getCalendarMode()\n          });\n          return capitalizeFirstWord(monthNames, 'single');\n        }\n\n        var text = this.parent.globalize.formatDate(startDate, {\n          format: 'MMMM',\n          calendar: this.parent.getCalendarMode()\n        }) + ' ' + startDate.getFullYear() + ' - ' + this.parent.globalize.formatDate(endDate, {\n          format: 'MMMM ',\n          calendar: this.parent.getCalendarMode()\n        }) + this.parent.globalize.formatDate(endDate, {\n          skeleton: 'y',\n          calendar: this.parent.getCalendarMode()\n        });\n        return capitalizeFirstWord(text, 'single');\n      }\n\n      var format = this.parent.activeViewOptions.dateFormat ? this.parent.activeViewOptions.dateFormat : 'MMMM y';\n      return capitalizeFirstWord(this.parent.globalize.formatDate(startDate, {\n        format: format,\n        calendar: this.parent.getCalendarMode()\n      }), 'single');\n    }\n\n    return this.formatDateRange(this.parent.selectedDate);\n  };\n\n  Month.prototype.getLabelText = function (view) {\n    return this.parent.localeObj.getConstant(view) + ' of ' + capitalizeFirstWord(this.parent.globalize.formatDate(this.parent.selectedDate, {\n      format: 'MMMM y',\n      calendar: this.parent.getCalendarMode()\n    }), 'single');\n  };\n\n  Month.prototype.createWeekNumberElement = function (text) {\n    var tr = createElement('tr');\n    var td = createElement('td', {\n      className: WEEK_NUMBER_CLASS,\n      attrs: {\n        'title': text ? this.parent.localeObj.getConstant('week') + ' ' + text : ''\n      },\n      innerHTML: text || ''\n    });\n    tr.appendChild(td);\n    var args = {\n      elementType: 'weekNumberCell',\n      element: td\n    };\n    this.parent.trigger(renderCell, args);\n    return tr;\n  };\n\n  Month.prototype.unWireEvents = function () {\n    var contentScrollableEle = this.element.querySelector('.' + CONTENT_WRAP_CLASS);\n\n    if (contentScrollableEle) {\n      EventHandler.remove(contentScrollableEle, 'scroll', this.onContentScroll);\n    }\n  };\n\n  Month.prototype.isCustomMonth = function () {\n    return this.parent.currentView === 'Month' && (!isNullOrUndefined(this.parent.activeViewOptions.displayDate) || this.parent.activeViewOptions.numberOfWeeks > 0);\n  };\n\n  Month.prototype.getModuleName = function () {\n    return 'month';\n  };\n\n  Month.prototype.destroy = function () {\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    if (this.element) {\n      if (this.monthEvent) {\n        this.monthEvent.destroy();\n        this.monthEvent = null;\n      }\n\n      this.unWireEvents();\n\n      if (this.parent.resourceBase) {\n        this.parent.resourceBase.destroy();\n      }\n\n      if (this.parent.scheduleTouchModule) {\n        this.parent.scheduleTouchModule.resetValues();\n      }\n\n      _super.prototype.destroy.call(this);\n    }\n  };\n\n  return Month;\n}(ViewBase);\n\nvar __extends$22 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * year view\n */\n\n\nvar Year =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$22(Year, _super);\n\n  function Year(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.viewClass = 'e-year-view';\n    _this.isInverseTableSelect = false;\n    _this.yearEventModule = null;\n    return _this;\n  }\n\n  Year.prototype.getModuleName = function () {\n    return 'year';\n  };\n\n  Year.prototype.renderLayout = function (className) {\n    if (this.parent.resourceBase) {\n      this.parent.resourceBase.generateResourceLevels([{\n        renderDates: this.parent.activeView.renderDates\n      }]);\n    }\n\n    this.setPanel(createElement('div', {\n      className: TABLE_WRAP_CLASS\n    }));\n    var viewTypeClass = this.parent.activeViewOptions.orientation === 'Horizontal' ? 'e-horizontal' : 'e-vertical';\n    addClass([this.element], [this.viewClass, viewTypeClass, className]);\n    this.renderPanel(className);\n\n    if (this.parent.activeViewOptions.allowVirtualScrolling) {\n      addClass([this.element], [VIRTUAL_SCROLL_CLASS]);\n    }\n\n    var calendarTable = this.createTableLayout(OUTER_TABLE_CLASS);\n    this.element.appendChild(calendarTable);\n    this.element.querySelector('table').setAttribute('role', 'presentation');\n    var calendarTBody = calendarTable.querySelector('tbody');\n    this.rowCount = this.getRowColumnCount('row');\n    this.columnCount = this.getRowColumnCount('column');\n    this.renderHeader(calendarTBody);\n    this.renderContent(calendarTBody);\n\n    if (this.parent.currentView !== 'Year' && this.parent.uiStateValues.isGroupAdaptive) {\n      this.generateColumnLevels();\n      this.renderResourceMobileLayout();\n    }\n\n    EventHandler.add(this.element.querySelector('.' + CONTENT_WRAP_CLASS), 'scroll', this.onContentScroll, this);\n    this.parent.notify(contentReady, {});\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Year.prototype.renderHeader = function (headerWrapper) {};\n\n  Year.prototype.renderContent = function (content) {\n    var tr = createElement('tr');\n    content.appendChild(tr);\n    var td = createElement('td');\n    tr.appendChild(td);\n    this.element.querySelector('tbody').appendChild(tr);\n    var contentWrapper = createElement('div', {\n      className: CONTENT_WRAP_CLASS\n    });\n    td.appendChild(contentWrapper);\n    var calendarTable = this.createTableLayout('e-calendar-table');\n    contentWrapper.appendChild(calendarTable);\n    var cTr = createElement('tr');\n    calendarTable.querySelector('tbody').appendChild(cTr);\n    var cTd = createElement('td');\n    cTr.appendChild(cTd);\n    var calendarWrapper = createElement('div', {\n      className: 'e-calendar-wrapper'\n    });\n    cTd.appendChild(calendarWrapper);\n    var months = this.getMonths();\n\n    for (var _i = 0, months_1 = months; _i < months_1.length; _i++) {\n      var month = months_1[_i];\n      var currentMonth = new Date(this.parent.selectedDate.getFullYear(), month, 1);\n      var calendarElement = createElement('div', {\n        className: 'e-month-calendar e-calendar',\n        attrs: {\n          'data-role': 'calendar'\n        }\n      });\n      calendarElement.appendChild(this.renderCalendarHeader(currentMonth));\n      calendarElement.appendChild(this.renderCalendarContent(currentMonth));\n      calendarWrapper.appendChild(calendarElement);\n    }\n\n    this.renderDates.splice(0, 1);\n  };\n\n  Year.prototype.renderCalendarHeader = function (currentDate) {\n    var headerWrapper = createElement('div', {\n      className: 'e-header e-month'\n    });\n    var headerContent = createElement('div', {\n      className: 'e-day e-title'\n    });\n\n    if (this.parent.activeViewOptions.monthHeaderTemplate) {\n      var args = {\n        date: currentDate,\n        type: 'monthHeader'\n      };\n      this.renderTemplates(this.parent.getMonthHeaderTemplate(), args, 'monthHeaderTemplate', this.parent.activeViewOptions.monthHeaderTemplateName, headerContent);\n    } else {\n      headerContent.innerHTML = this.getMonthName(currentDate);\n    }\n\n    headerWrapper.appendChild(headerContent);\n    this.parent.trigger(renderCell, {\n      elementType: 'headerCells',\n      element: headerContent,\n      date: currentDate\n    });\n    return headerWrapper;\n  };\n\n  Year.prototype.renderCalendarContent = function (currentDate) {\n    var dateCollection = this.getMonthDates(currentDate);\n    var contentWrapper = createElement('div', {\n      className: 'e-content e-month'\n    });\n    var contentTable = this.createTableLayout('e-calendar-table ' + CONTENT_TABLE_CLASS);\n    contentWrapper.appendChild(contentTable);\n    this.setAriaAttributes(contentTable);\n    var thead = createElement('thead', {\n      className: 'e-week-header'\n    });\n    var tr = createElement('tr');\n    var currentWeek = getWeekFirstDate(firstDateOfMonth(currentDate), this.parent.firstDayOfWeek);\n\n    if (this.parent.activeViewOptions.showWeekNumber) {\n      tr.appendChild(createElement('th'));\n    }\n\n    for (var i = 0; i < WEEK_LENGTH; i++) {\n      if (this.parent.activeViewOptions.dayHeaderTemplate) {\n        var th = createElement('th');\n        var args = {\n          date: currentWeek,\n          type: 'dayHeader'\n        };\n        this.renderTemplates(this.parent.getDayHeaderTemplate(), args, 'dayHeaderTemplate', this.parent.activeViewOptions.dayHeaderTemplateName, th);\n        tr.appendChild(th);\n      } else {\n        tr.appendChild(createElement('th', {\n          innerHTML: this.parent.getDayNames('narrow')[currentWeek.getDay()]\n        }));\n      }\n\n      currentWeek = new Date(currentWeek.getTime() + MS_PER_DAY);\n    }\n\n    thead.appendChild(tr);\n    prepend([thead], contentTable);\n    var tbody = contentTable.querySelector('tbody');\n\n    while (dateCollection.length > 0) {\n      var weekDates = dateCollection.splice(0, WEEK_LENGTH);\n      var tr_1 = createElement('tr');\n\n      if (this.parent.activeViewOptions.showWeekNumber) {\n        var weekNumber = this.parent.getWeekNumberContent(weekDates);\n        var td = createElement('td', {\n          className: 'e-week-number',\n          attrs: {\n            'title': this.parent.localeObj.getConstant('week') + ' ' + weekNumber\n          },\n          innerHTML: weekNumber\n        });\n        tr_1.appendChild(td);\n        this.parent.trigger(renderCell, {\n          elementType: 'weekNumberCells',\n          element: td\n        });\n      }\n\n      for (var _i = 0, weekDates_1 = weekDates; _i < weekDates_1.length; _i++) {\n        var date = weekDates_1[_i];\n        var td = createElement('td', {\n          className: 'e-cell ' + WORK_CELLS_CLASS,\n          attrs: {\n            'data-date': date.getTime().toString()\n          }\n        });\n\n        if (this.parent.activeViewOptions.cellHeaderTemplate) {\n          var args = {\n            date: date,\n            type: 'monthCells'\n          };\n          this.renderTemplates(this.parent.getCellHeaderTemplate(), args, 'cellHeaderTemplate', this.parent.activeViewOptions.cellHeaderTemplateName, td);\n        } else {\n          var span = createElement('span', {\n            className: 'e-day',\n            innerHTML: this.parent.globalize.formatDate(date, {\n              skeleton: 'd',\n              calendar: this.parent.getCalendarMode()\n            }),\n            attrs: {\n              title: this.parent.globalize.formatDate(date, {\n                type: 'date',\n                skeleton: 'full'\n              })\n            }\n          });\n          td.appendChild(span);\n        }\n\n        if (this.parent.activeViewOptions.cellTemplate) {\n          var args = {\n            date: date,\n            type: 'monthCells'\n          };\n          this.renderTemplates(this.parent.getCellTemplate(), args, 'cellTemplate', this.parent.activeViewOptions.cellTemplateName, td);\n        }\n\n        var classList$$1 = [];\n\n        if (currentDate.getMonth() !== date.getMonth()) {\n          classList$$1.push(OTHERMONTH_CLASS);\n        }\n\n        if (this.isCurrentDate(date) && currentDate.getMonth() === date.getMonth()) {\n          classList$$1 = classList$$1.concat(['e-today', 'e-selected']);\n        }\n\n        if (classList$$1.length > 0) {\n          addClass([td], classList$$1);\n        }\n\n        tr_1.appendChild(td);\n\n        if (currentDate.getMonth() === date.getMonth()) {\n          this.renderDates.push(new Date(date));\n        }\n\n        if (!this.parent.isMinMaxDate(date)) {\n          addClass([td], DISABLE_DATES);\n        } else {\n          EventHandler.add(td, 'click', this.onCellClick, this);\n\n          if (!this.parent.isAdaptive) {\n            EventHandler.add(td, 'dblclick', this.parent.workCellAction.cellDblClick, this.parent.workCellAction);\n          }\n        }\n\n        this.parent.trigger(renderCell, {\n          elementType: 'workCells',\n          element: td,\n          date: date\n        });\n      }\n\n      tbody.appendChild(tr_1);\n    }\n\n    return contentWrapper;\n  };\n\n  Year.prototype.createTableColGroup = function (count) {\n    var colGroupEle = createElement('colgroup');\n\n    for (var i = 0; i < count; i++) {\n      colGroupEle.appendChild(createElement('col'));\n    }\n\n    return colGroupEle;\n  };\n\n  Year.prototype.getMonthName = function (date) {\n    var month = this.parent.globalize.formatDate(date, {\n      format: this.parent.activeViewOptions.dateFormat || 'MMMM y',\n      calendar: this.parent.getCalendarMode()\n    });\n    return capitalizeFirstWord(month, 'multiple');\n  };\n\n  Year.prototype.generateColumnLevels = function () {\n    var colLevels = [];\n    var level = this.getDateSlots([this.parent.selectedDate], this.parent.activeViewOptions.workDays);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      colLevels = this.parent.resourceBase.generateResourceLevels(level);\n\n      if (this.parent.uiStateValues.isGroupAdaptive) {\n        var resourceLevel = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];\n        colLevels = [this.getDateSlots([this.parent.selectedDate], resourceLevel.workDays)];\n      }\n    } else {\n      colLevels.push(level);\n    }\n\n    colLevels.pop();\n    this.colLevels = colLevels;\n    return colLevels;\n  }; // eslint-disable-next-line max-len\n\n\n  Year.prototype.getDateSlots = function (renderDates, workDays, startHour, endHour) {\n    if (startHour === void 0) {\n      startHour = this.parent.workHours.start;\n    }\n\n    if (endHour === void 0) {\n      endHour = this.parent.workHours.end;\n    }\n\n    var dateCol = [{\n      date: renderDates[0],\n      type: 'dateHeader',\n      className: [HEADER_CELLS_CLASS],\n      colSpan: 1,\n      workDays: workDays,\n      startHour: new Date(+this.parent.globalize.parseDate(startHour, {\n        skeleton: 'Hm'\n      })),\n      endHour: new Date(+this.parent.globalize.parseDate(endHour, {\n        skeleton: 'Hm'\n      }))\n    }];\n    return dateCol;\n  };\n\n  Year.prototype.getMonthDates = function (date) {\n    var startDate = getWeekFirstDate(firstDateOfMonth(date), this.parent.firstDayOfWeek);\n    var endDate = addDays(new Date(+startDate), 6 * WEEK_LENGTH);\n    var dateCollection = [];\n\n    for (var start = startDate; start.getTime() < endDate.getTime(); start = addDays(start, 1)) {\n      dateCollection.push(resetTime(new Date(start)));\n    }\n\n    return dateCollection;\n  };\n\n  Year.prototype.getRowColumnCount = function (type) {\n    var months = this.getMonths();\n    var year = this.parent.selectedDate.getFullYear();\n    var monthDaysCount = [];\n\n    for (var _i = 0, months_2 = months; _i < months_2.length; _i++) {\n      var month = months_2[_i];\n      monthDaysCount.push(new Date(year, month, 1).getDay() + new Date(year, month + 1, 0).getDate());\n    }\n\n    var maxCount = Math.max.apply(Math, monthDaysCount);\n    var count;\n\n    if (type === 'row') {\n      count = this.parent.activeViewOptions.orientation === 'Horizontal' ? months.length : maxCount;\n    } else {\n      count = this.parent.activeViewOptions.orientation === 'Horizontal' ? maxCount : months.length;\n    }\n\n    return count;\n  };\n\n  Year.prototype.isCurrentDate = function (date) {\n    return resetTime(new Date()).getTime() === resetTime(new Date(date.getTime())).getTime();\n  };\n\n  Year.prototype.getMonths = function () {\n    var _this = this; // eslint-disable-next-line prefer-spread\n\n\n    return Array.apply(null, {\n      length: this.parent.activeViewOptions.monthsCount\n    }).map(function (value, index) {\n      return _this.parent.firstMonthOfYear + index;\n    });\n  };\n\n  Year.prototype.renderTemplates = function (fn, args, tName, vName, ele) {\n    var templateId = this.parent.element.id + '_' + vName + tName;\n    var template = [].slice.call(fn(args, this.parent, tName, templateId, false));\n    append(template, ele);\n  };\n\n  Year.prototype.onCellClick = function (e) {\n    var target = closest(e.target, '.' + WORK_CELLS_CLASS);\n    var startDate = this.parent.getDateFromElement(target);\n    this.parent.activeCellsData = this.parent.getCellDetails(target);\n    var isPrevious = startDate.getTime() < this.getStartDate().getTime();\n\n    if (isPrevious || startDate.getTime() > this.getEndDate().getTime()) {\n      this.parent.changeDate(this.parent.activeView.getNextPreviousDate(isPrevious ? 'previous' : 'next'), e);\n      var activeDate = this.parent.activeCellsData.startTime.getTime();\n      var inRange = activeDate >= this.getStartDate().getTime() && activeDate <= this.getEndDate().getTime();\n      var dateAttr = inRange ? activeDate : (isPrevious ? this.getEndDate() : this.getStartDate()).getTime();\n      var selectedCell = this.parent.element.querySelector(':not(.' + OTHERMONTH_CLASS + ')[data-date=\"' + dateAttr + '\"]');\n      this.parent.selectCell(selectedCell);\n      this.parent.activeCellsData = this.parent.getCellDetails(selectedCell);\n    } else {\n      var endDate = addDays(new Date(startDate.getTime()), 1);\n      var filteredEvents = this.parent.eventBase.filterEvents(startDate, endDate);\n      var moreEventArgs = {\n        date: startDate,\n        event: filteredEvents,\n        element: e.target\n      };\n\n      if (target.classList.contains(OTHERMONTH_CLASS)) {\n        target = this.parent.element.querySelector(':not(.' + OTHERMONTH_CLASS + ')[data-date=\"' + target.getAttribute('data-date') + '\"]');\n      }\n\n      this.parent.activeCellsData = this.parent.getCellDetails(target);\n      var args = extend(this.parent.activeCellsData, {\n        cancel: false,\n        event: e,\n        name: 'cellClick'\n      });\n      this.parent.trigger(cellClick, args);\n      this.parent.quickPopup.moreEventClick(moreEventArgs, endDate);\n    }\n  };\n\n  Year.prototype.onContentScroll = function (e) {\n    var target = e.target;\n    var headerWrapper = this.getDatesHeaderElement();\n    this.parent.notify(virtualScroll, e);\n\n    if (headerWrapper) {\n      headerWrapper.firstElementChild.scrollLeft = target.scrollLeft;\n    }\n\n    var scrollTopSelector = \".\" + MONTH_HEADER_WRAPPER + \",.\" + RESOURCE_COLUMN_WRAP_CLASS;\n    var scrollTopElement = this.element.querySelector(scrollTopSelector);\n\n    if (scrollTopElement) {\n      scrollTopElement.scrollTop = target.scrollTop;\n    }\n\n    if (!this.parent.isAdaptive) {\n      this.parent.uiStateValues.top = e.target.scrollTop;\n    }\n\n    this.parent.uiStateValues.left = e.target.scrollLeft;\n    this.setPersistence();\n  };\n\n  Year.prototype.onScrollUiUpdate = function (args) {\n    var height = this.parent.element.offsetHeight - this.getHeaderBarHeight();\n    var headerWrapper = this.element.querySelector('.' + DATE_HEADER_CONTAINER_CLASS);\n\n    if (headerWrapper) {\n      height -= headerWrapper.offsetHeight;\n    }\n\n    var contentWrapper = this.element.querySelector('.' + CONTENT_WRAP_CLASS);\n\n    if (contentWrapper) {\n      contentWrapper.style.height = formatUnit(height);\n    }\n\n    if (!this.parent.isAdaptive && headerWrapper) {\n      var scrollBarWidth = getScrollBarWidth();\n\n      if (contentWrapper.offsetWidth - contentWrapper.clientWidth > 0) {\n        headerWrapper.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? '1px' : '0px';\n        headerWrapper.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + 'px' : '0px';\n      } else {\n        headerWrapper.firstElementChild.style[args.cssProperties.border] = '';\n        headerWrapper.style[args.cssProperties.padding] = '';\n      }\n    }\n\n    this.setColWidth(this.getContentAreaElement());\n    var leftPanelSelector = \".\" + MONTH_HEADER_WRAPPER + \",.\" + RESOURCE_COLUMN_WRAP_CLASS;\n    var leftPanelElement = this.element.querySelector(leftPanelSelector);\n\n    if (leftPanelElement) {\n      var isYScroll = contentWrapper.scrollWidth > contentWrapper.clientWidth;\n      leftPanelElement.style.height = formatUnit(height - (isYScroll ? 17 : 0));\n    }\n\n    if (!args.isPreventScrollUpdate) {\n      if (this.parent.uiStateValues.isInitial) {\n        this.parent.uiStateValues.isInitial = false;\n        this.parent.uiStateValues.top = this.parent.uiStateValues.left = 0;\n      } else {\n        if (leftPanelElement) {\n          leftPanelElement.scrollTop = this.parent.uiStateValues.top;\n        }\n\n        contentWrapper.scrollTop = this.parent.uiStateValues.top;\n        contentWrapper.scrollLeft = this.parent.uiStateValues.left;\n      }\n    }\n\n    this.retainScrollPosition();\n  };\n\n  Year.prototype.getStartDate = function () {\n    return new Date(this.parent.selectedDate.getFullYear(), this.parent.firstMonthOfYear % 12, 1);\n  };\n\n  Year.prototype.getEndDate = function () {\n    return addDays(addMonths(this.getStartDate(), this.parent.monthsCount), -1);\n  };\n\n  Year.prototype.startDate = function () {\n    return this.parent.currentView === 'Year' ? getWeekFirstDate(this.getStartDate(), this.parent.firstDayOfWeek) : this.getStartDate();\n  };\n\n  Year.prototype.endDate = function () {\n    return this.parent.currentView === 'Year' ? addDays(getWeekLastDate(this.getEndDate(), this.parent.firstDayOfWeek), 1) : addDays(this.getEndDate(), 1);\n  };\n\n  Year.prototype.getEndDateFromStartDate = function (start) {\n    var date = new Date(start.getTime());\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      date = lastDateOfMonth(date);\n    }\n\n    return addDays(new Date(date.getTime()), 1);\n  };\n\n  Year.prototype.getNextPreviousDate = function (type) {\n    return addYears(this.parent.selectedDate, type === 'next' ? 1 : -1);\n  };\n\n  Year.prototype.getDateRangeText = function () {\n    var startDate = this.getStartDate();\n    var endDate = this.getEndDate();\n\n    if (startDate.getFullYear() !== endDate.getFullYear()) {\n      return this.parent.globalize.formatDate(startDate, {\n        skeleton: 'yMMM'\n      }) + ' - ' + this.parent.globalize.formatDate(endDate, {\n        skeleton: 'yMMM'\n      });\n    } else {\n      return this.parent.globalize.formatDate(this.parent.selectedDate, {\n        skeleton: 'y'\n      });\n    }\n  };\n\n  Year.prototype.addEventListener = function () {\n    this.parent.on(scrollUiUpdate, this.onScrollUiUpdate, this);\n    this.parent.on(dataReady, this.onDataReady, this);\n  };\n\n  Year.prototype.removeEventListener = function () {\n    if (this.parent) {\n      this.parent.off(scrollUiUpdate, this.onScrollUiUpdate);\n      this.parent.off(dataReady, this.onDataReady);\n    }\n  };\n\n  Year.prototype.onDataReady = function (args) {\n    this.yearEventModule = new YearEvent(this.parent);\n    this.yearEventModule.renderAppointments();\n    this.parent.notify(eventsLoaded, args);\n  };\n\n  Year.prototype.scrollToDate = function (scrollDate) {\n    var date = +new Date(resetTime(scrollDate));\n    var element = this.element.querySelector('.' + WORK_CELLS_CLASS + ':not(.' + OTHERMONTH_CLASS + ')[data-date=\"' + date + '\"]');\n\n    if (element) {\n      element = closest(element, '.e-month-calendar');\n      this.getContentAreaElement().scrollTop = element.offsetTop;\n    }\n  };\n\n  Year.prototype.destroy = function () {\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    if (this.element) {\n      var contentScroll = this.element.querySelector('.' + CONTENT_WRAP_CLASS);\n\n      if (contentScroll) {\n        EventHandler.remove(contentScroll, 'scroll', this.onContentScroll);\n      }\n\n      if (this.yearEventModule) {\n        this.yearEventModule.destroy();\n        this.yearEventModule = null;\n      }\n\n      if (this.parent.resourceBase) {\n        this.parent.resourceBase.destroy();\n      }\n\n      _super.prototype.destroy.call(this);\n    }\n  };\n\n  return Year;\n}(ViewBase);\n\nvar __extends$24 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nvar AgendaBase =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$24(AgendaBase, _super);\n\n  function AgendaBase(parent) {\n    return _super.call(this, parent) || this;\n  } // eslint-disable-next-line max-len\n\n\n  AgendaBase.prototype.createAgendaContentElement = function (type, listData, aTd, groupOrder, groupIndex) {\n    var _this = this;\n\n    var listElement;\n    var fieldMapping = this.parent.eventFields;\n\n    if (type === 'noEvents') {\n      var noEvents = [{\n        'subject': this.parent.localeObj.getConstant('noEvents')\n      }];\n      listElement = ListBase.createList(this.parent.createElement, noEvents, {\n        moduleName: 'agenda',\n        listClass: this.parent.activeView.viewClass,\n        itemClass: this.parent.activeView.viewClass,\n        template: \"<div class=\\\"\" + AGENDA_NO_EVENT_CLASS + \"\\\">\" + this.parent.localeObj.getConstant('noEvents') + \"</div>\"\n      });\n\n      if (listElement.querySelector('.e-agenda-item').children.length === 0) {\n        listElement.firstElementChild.appendChild(createElement('div', {\n          className: AGENDA_NO_EVENT_CLASS,\n          innerHTML: this.parent.localeObj.getConstant('noEvents')\n        }));\n      }\n    } else {\n      listElement = ListBase.createList(this.parent.createElement, listData, {\n        moduleName: 'agenda',\n        listClass: this.parent.activeView.viewClass,\n        itemClass: this.parent.activeView.viewClass\n      });\n      var listElements = [].slice.call(listElement.children);\n      listElements.forEach(function (element, li) {\n        var appWrapper = createElement('div', {\n          className: APPOINTMENT_CLASS,\n          attrs: {\n            'data-id': 'Appointment_' + listData[parseInt(li.toString(), 10)][\"\" + _this.parent.eventFields.id],\n            'data-guid': listData[parseInt(li.toString(), 10)].Guid,\n            'role': 'button',\n            'tabindex': '0',\n            'aria-disabled': _this.parent.eventBase.getReadonlyAttribute(listData[parseInt(li.toString(), 10)]),\n            'aria-label': _this.parent.getAnnouncementString(listData[parseInt(li.toString(), 10)])\n          }\n        });\n\n        if (!isNullOrUndefined(groupIndex)) {\n          appWrapper.setAttribute('data-group-index', groupIndex.toString());\n        }\n\n        _this.parent.eventBase.applyResourceColor(appWrapper, listData[parseInt(li.toString(), 10)], 'borderColor', groupOrder);\n\n        var templateEle;\n\n        if (!isNullOrUndefined(_this.parent.activeViewOptions.eventTemplate)) {\n          addClass([appWrapper], EVENT_TEMPLATE);\n          var scheduleId = _this.parent.element.id + '_';\n          var viewName = _this.parent.activeViewOptions.eventTemplateName;\n          var templateId = scheduleId + viewName + 'eventTemplate';\n          templateEle = _this.parent.getAppointmentTemplate()(listData[parseInt(li.toString(), 10)], _this.parent, 'eventTemplate', templateId, false);\n\n          if (!isNullOrUndefined(listData[parseInt(li.toString(), 10)][fieldMapping.recurrenceRule])) {\n            var iconClass = listData[parseInt(li.toString(), 10)][fieldMapping.id] === listData[parseInt(li.toString(), 10)][fieldMapping.recurrenceID] ? EVENT_RECURRENCE_ICON_CLASS : EVENT_RECURRENCE_EDIT_ICON_CLASS;\n            appWrapper.appendChild(createElement('div', {\n              className: ICON + ' ' + iconClass\n            }));\n          }\n        } else {\n          templateEle = _this.createAppointment(listData[parseInt(li.toString(), 10)]);\n        }\n\n        append([].slice.call(templateEle), appWrapper);\n        removeChildren(element);\n        element.appendChild(appWrapper);\n        var args = {\n          data: extend({}, listData[parseInt(li.toString(), 10)], null, true),\n          element: element,\n          cancel: false\n        };\n\n        _this.parent.trigger(eventRendered, args, function (eventArgs) {\n          if (eventArgs.cancel) {\n            remove(element);\n          }\n        });\n      });\n    }\n\n    aTd.appendChild(listElement);\n\n    if (this.parent.currentView === 'MonthAgenda' && this.parent.activeViewOptions.group.resources.length > 0 || this.parent.currentView === 'Agenda') {\n      addClass([aTd], AGENDA_DAY_BORDER_CLASS);\n    }\n\n    this.parent.renderTemplates();\n    return aTd;\n  };\n\n  AgendaBase.prototype.createAppointment = function (event) {\n    var fieldMapping = this.parent.eventFields;\n    var eventSubject = event[fieldMapping.subject] || this.parent.eventSettings.fields.subject.default || this.parent.localeObj.getConstant('addTitle');\n    var eventLocation = event[fieldMapping.location] || this.parent.eventSettings.fields.location.default;\n    var appSubjectWrap = createElement('div', {\n      className: SUBJECT_WRAP\n    });\n\n    if (!isNullOrUndefined(eventLocation) && eventLocation !== '') {\n      eventSubject += ',';\n    }\n\n    var appSubjectText = createElement('div', {\n      className: SUBJECT_CLASS\n    });\n    this.parent.sanitize(eventSubject, appSubjectText);\n    appSubjectWrap.appendChild(appSubjectText);\n\n    if (!isNullOrUndefined(eventLocation) && eventLocation !== '') {\n      var appLocation = createElement('div', {\n        className: LOCATION_CLASS\n      });\n      this.parent.sanitize(eventLocation, appLocation);\n      appSubjectWrap.appendChild(appLocation);\n    }\n\n    if (!isNullOrUndefined(event[fieldMapping.recurrenceRule])) {\n      var iconClass = event[fieldMapping.id] === event[fieldMapping.recurrenceID] ? EVENT_RECURRENCE_ICON_CLASS : EVENT_RECURRENCE_EDIT_ICON_CLASS;\n      appSubjectWrap.appendChild(createElement('div', {\n        className: ICON + ' ' + iconClass\n      }));\n    }\n\n    var strDate = event[fieldMapping.startTime];\n    var endDate = event[fieldMapping.endTime];\n    var isAllDay = event[fieldMapping.isAllDay];\n    var allDayStr = this.parent.localeObj.getConstant('allDay');\n    var timeStr = this.parent.getTimeString(strDate) + ' - ' + this.parent.getTimeString(endDate);\n\n    if (!isNullOrUndefined(event.data)) {\n      var milliSeconds = endDate.getTimezoneOffset() !== strDate.getTimezoneOffset() ? endDate.getTime() - strDate.getTime() + 3600000 : endDate.getTime() - strDate.getTime();\n      var eventString = milliSeconds / MS_PER_DAY >= 1 ? allDayStr : timeStr;\n      allDayStr = eventString + ' (' + this.parent.localeObj.getConstant('day') + ' ' + event.data.index + '/' + event.data.count + ')';\n    }\n\n    var displayStr = !isNullOrUndefined(event.data) || isAllDay ? allDayStr : timeStr;\n    var appDateTime = createElement('div', {\n      className: DATE_TIME_CLASS,\n      innerHTML: displayStr\n    });\n    return [appSubjectWrap, appDateTime];\n  };\n\n  AgendaBase.prototype.processAgendaEvents = function (events) {\n    var eventsProcessed = [];\n\n    if (isNullOrUndefined(events)) {\n      return eventsProcessed;\n    }\n\n    for (var _i = 0, events_1 = events; _i < events_1.length; _i++) {\n      var event_1 = events_1[_i];\n      var spanned = this.parent.eventBase.splitEventByDay(event_1);\n      eventsProcessed = eventsProcessed.concat(spanned.length > 1 ? spanned : event_1);\n    }\n\n    return eventsProcessed;\n  };\n\n  AgendaBase.prototype.wireEventActions = function () {\n    var eventElement = [].slice.call(this.parent.element.querySelectorAll('.' + APPOINTMENT_CLASS));\n\n    for (var _i = 0, eventElement_1 = eventElement; _i < eventElement_1.length; _i++) {\n      var element = eventElement_1[_i];\n      this.parent.eventBase.wireAppointmentEvents(element, this.parent.getEventDetails(element), true);\n    }\n\n    var dateHeaderElement = [].slice.call(this.parent.element.querySelectorAll('.e-m-date'));\n\n    for (var _a = 0, dateHeaderElement_1 = dateHeaderElement; _a < dateHeaderElement_1.length; _a++) {\n      var element = dateHeaderElement_1[_a];\n      EventHandler.add(element, 'click', this.parent.agendaModule.dayNavigationClick, this);\n    }\n  };\n\n  AgendaBase.prototype.calculateResourceTableElement = function (tBody, noOfDays, agendaDate) {\n    if (isNullOrUndefined(this.parent.resourceBase.lastResourceLevel)) {\n      var level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);\n      this.parent.resourceBase.generateResourceLevels(level);\n    }\n\n    var agendaLastDate = addDays(new Date(agendaDate.getTime()), noOfDays);\n    var days = this.parent.activeViewOptions.group.byDate || this.parent.currentView === 'MonthAgenda' ? noOfDays : 1;\n    var resColl = this.parent.resourceBase.resourceCollection;\n    var resData = this.parent.resourceBase.lastResourceLevel;\n    var initialDate = agendaDate;\n\n    for (var i = 0; i < days; i++) {\n      var lastLevelInfo = [];\n      var tempLastLevelInfo = [];\n      var tempIndex = 0;\n      var eventObj = void 0;\n      var dateObj = void 0;\n      var firstDate = addDays(initialDate, i);\n      var finalDate = this.parent.activeViewOptions.group.byDate || this.parent.currentView === 'MonthAgenda' ? addDays(firstDate, 1) : agendaLastDate;\n      var agendaCollection = this.parent.eventBase.filterEvents(firstDate, finalDate);\n\n      if (agendaCollection.length > 0 || !this.parent.hideEmptyAgendaDays || this.parent.currentView === 'MonthAgenda') {\n        for (var res = 0; res < resData.length; res++) {\n          noOfDays = !this.parent.activeViewOptions.group.byDate || this.parent.currentView === 'MonthAgenda' ? noOfDays : 1;\n          var data = [];\n          agendaDate = firstDate; // eslint-disable-next-line max-len\n\n          var resDataCollection = this.parent.eventBase.filterEvents(agendaDate, agendaLastDate, agendaCollection, resData[parseInt(res.toString(), 10)]);\n\n          if (resDataCollection.length > 0 || !this.parent.hideEmptyAgendaDays || this.parent.currentView === 'MonthAgenda') {\n            for (var r = 0; r < noOfDays; r++) {\n              // eslint-disable-next-line max-len\n              var resDayCollection = this.parent.eventBase.filterEvents(agendaDate, addDays(agendaDate, 1), resDataCollection, undefined);\n\n              if (resDayCollection.length > 0 || !this.parent.hideEmptyAgendaDays || this.parent.currentView === 'MonthAgenda') {\n                data.push(resDayCollection[0]);\n                eventObj = {\n                  rowSpan: 1,\n                  type: 'eventColumn',\n                  resource: resColl[resColl.length - 1],\n                  groupIndex: resData[parseInt(res.toString(), 10)].groupIndex,\n                  groupOrder: resData[parseInt(res.toString(), 10)].groupOrder,\n                  resourceData: resData[parseInt(res.toString(), 10)].resourceData,\n                  eventData: resDayCollection,\n                  date: agendaDate\n                };\n                dateObj = {\n                  rowSpan: 1,\n                  type: 'dateColumn',\n                  resource: resColl[parseInt((resColl.length - 1).toString(), 10)],\n                  groupOrder: resData[parseInt(res.toString(), 10)].groupOrder,\n                  resourceData: resData[parseInt(res.toString(), 10)].resourceData,\n                  date: agendaDate\n                };\n\n                if (!lastLevelInfo[parseInt(tempIndex.toString(), 10)]) {\n                  lastLevelInfo[parseInt(tempIndex.toString(), 10)] = [];\n                }\n\n                lastLevelInfo[parseInt(tempIndex.toString(), 10)].push(eventObj);\n                lastLevelInfo[parseInt(tempIndex.toString(), 10)].push(dateObj);\n                tempIndex++;\n              }\n\n              agendaDate = addDays(agendaDate, 1);\n\n              if (agendaDate.getTime() >= agendaLastDate.getTime() || this.parent.activeViewOptions.group.byDate || this.parent.currentView === 'MonthAgenda') {\n                lastLevelInfo[lastLevelInfo.length - 1][1].cssClass = AGENDA_DAY_BORDER_CLASS;\n                var tempObj = {\n                  rowSpan: data.length,\n                  type: 'resourceColumn',\n                  resource: resColl[parseInt((resColl.length - 1).toString(), 10)],\n                  groupOrder: resData[parseInt(res.toString(), 10)].groupOrder.slice(0, -1),\n                  resourceData: resData[parseInt(res.toString(), 10)].resourceData,\n                  groupIndex: lastLevelInfo.length - data.length,\n                  className: [RESOURCE_NAME],\n                  date: agendaDate\n                };\n                lastLevelInfo[parseInt((lastLevelInfo.length - data.length).toString(), 10)].push(tempObj);\n                tempLastLevelInfo.push(extend({}, tempObj, null, true));\n                break;\n              }\n            }\n          }\n        }\n\n        var topResources = resColl.slice(0, -1);\n        var tempGroupedData = [];\n        var totalRowSpan = 0;\n\n        for (var y = 0; y < topResources.length; y++) {\n          var data = topResources[topResources.length - (y + 1)].dataSource;\n\n          for (var x = 0; x < data.length; x++) {\n            var z = 0;\n\n            for (var u = 0; u < tempLastLevelInfo.length; u++) {\n              // eslint-disable-next-line max-len\n              if (tempLastLevelInfo[parseInt(u.toString(), 10)].groupOrder[topResources.length - (y + 1)] === data[parseInt(x.toString(), 10)][topResources[topResources.length - (y + 1)].idField]) {\n                totalRowSpan = totalRowSpan + tempLastLevelInfo[parseInt(u.toString(), 10)].rowSpan;\n                tempGroupedData.push(extend({}, tempLastLevelInfo[parseInt(u.toString(), 10)], null, true));\n              }\n\n              if (++z === tempLastLevelInfo.length && tempGroupedData.length > 0) {\n                tempGroupedData[0].rowSpan = totalRowSpan;\n                tempGroupedData[0].type = 'parentColumnLevel_' + (y + 1);\n                tempGroupedData[0].resource = topResources[topResources.length - (y + 1)];\n                tempGroupedData[0].resourceData = data[parseInt(x.toString(), 10)];\n                tempGroupedData[0].date = agendaDate;\n                lastLevelInfo[tempGroupedData[0].groupIndex].push(tempGroupedData[0]);\n                tempGroupedData = [];\n                totalRowSpan = 0;\n              }\n            }\n          }\n        }\n\n        this.createResourceTableRow(lastLevelInfo, tBody);\n      }\n    }\n\n    var totalCollection = this.parent.eventBase.filterEvents(initialDate, agendaLastDate);\n\n    if (totalCollection.length === 0 && !this.parent.activeViewOptions.allowVirtualScrolling && this.parent.hideEmptyAgendaDays) {\n      this.renderEmptyContent(tBody, initialDate);\n    }\n  };\n\n  AgendaBase.prototype.createResourceTableRow = function (tContent, tBody) {\n    var tr = createElement('tr');\n    var ntr;\n    var td = createElement('td', {\n      attrs: {\n        'aria-selected': 'false'\n      }\n    });\n    var tempData;\n    var rowSpan = 0;\n    var level;\n\n    if (this.parent.activeViewOptions.group.byDate || this.parent.currentView === 'MonthAgenda') {\n      var tContentCollection = [];\n      var parentCollection = this.parent.resourceBase.resourceCollection.slice(0, -1);\n\n      for (var w = 0; w < tContent.length; w++) {\n        tContentCollection = tContentCollection.concat(tContent[parseInt(w.toString(), 10)]);\n      }\n\n      level = parentCollection.length > 0 ? 'parentColumnLevel_' + parentCollection.length : 'resourceColumn';\n      var rowSpanCollection = tContentCollection.filter(function (data) {\n        return data.type === level;\n      });\n\n      for (var x = 0; x < rowSpanCollection.length; x++) {\n        rowSpan = rowSpan + rowSpanCollection[parseInt(x.toString(), 10)].rowSpan;\n      }\n    }\n\n    for (var row = 0; row < tContent.length; row++) {\n      ntr = tr.cloneNode();\n\n      for (var col = tContent[parseInt(row.toString(), 10)].length - 1; col >= 0; col--) {\n        var data = tContent[parseInt(row.toString(), 10)][parseInt(col.toString(), 10)];\n        var ntd = td.cloneNode();\n\n        if (data.type === 'dateColumn') {\n          if (this.parent.activeViewOptions.group.byDate || this.parent.currentView === 'MonthAgenda') {\n            tempData = tContent[parseInt(row.toString(), 10)][parseInt(col.toString(), 10)];\n            continue;\n          }\n\n          ntd.setAttribute('data-date', data.date.getTime().toString());\n          ntd.appendChild(this.createDateHeaderElement(data.date));\n          var className = [AGENDA_CELLS_CLASS, AGENDA_DATE_CLASS];\n\n          if (data.cssClass) {\n            className.push(data.cssClass);\n          }\n\n          addClass([ntd], className);\n          ntr.appendChild(ntd);\n        } else if (data.type === 'eventColumn') {\n          var elementType = data.eventData.length === 0 ? 'noEvents' : 'data';\n          ntd = this.createAgendaContentElement(elementType, data.eventData, ntd, data.groupOrder, data.groupIndex);\n          ntd.setAttribute('data-date', data.date.getTime().toString());\n\n          if (this.parent.activeViewOptions.group.byDate || this.parent.currentView === 'MonthAgenda') {\n            addClass([ntd], [AGENDA_CELLS_CLASS, AGENDA_DAY_PADDING_CLASS]);\n          }\n\n          ntr.appendChild(ntd);\n        } else {\n          ntd.setAttribute('rowspan', data.rowSpan.toString());\n          addClass([ntd], AGENDA_RESOURCE_CLASS);\n          this.setResourceHeaderContent(ntd, data, data.className[0]);\n          ntr.appendChild(ntd);\n        }\n      }\n\n      if (this.parent.activeViewOptions.group.byDate && row === 0 && this.parent.currentView !== 'MonthAgenda') {\n        var ntd = td.cloneNode();\n        ntd.setAttribute('data-date', tempData.date.getTime().toString());\n        ntd.setAttribute('rowspan', rowSpan.toString());\n        ntd.appendChild(this.createDateHeaderElement(tempData.date));\n        addClass([ntd], [AGENDA_CELLS_CLASS, AGENDA_DATE_CLASS, DATE_BORDER_CLASS]);\n        var daysCount = getDaysCount(this.parent.selectedDate.getTime(), tempData.date.getTime());\n        ntr.setAttribute('data-row-index', daysCount.toString());\n\n        if (this.parent.element.querySelector(\".e-agenda-view tr[data-row-index=\\\"\" + daysCount + \"\\\"]\")) {\n          break;\n        }\n\n        ntr.insertBefore(ntd, ntr.childNodes[0]);\n      }\n\n      tBody.appendChild(ntr);\n    }\n  };\n\n  AgendaBase.prototype.createDateHeaderElement = function (date) {\n    var dateHeader;\n\n    if (this.parent.activeViewOptions.dateHeaderTemplate) {\n      dateHeader = createElement('div', {\n        className: AGENDA_HEADER_CLASS\n      });\n      var args = {\n        date: date,\n        type: 'dateHeader'\n      };\n      var scheduleId = this.parent.element.id + '_';\n      var viewName = this.parent.activeViewOptions.dateHeaderTemplateName;\n      var templateId = scheduleId + viewName + 'dateHeaderTemplate';\n      var dateTemplate = [].slice.call(this.parent.getDateHeaderTemplate()(args, this.parent, 'dateHeaderTemplate', templateId, false));\n      append(dateTemplate, dateHeader);\n    } else {\n      dateHeader = this.getMobileDateElement(date, AGENDA_HEADER_CLASS);\n    }\n\n    return dateHeader;\n  };\n\n  AgendaBase.prototype.renderEmptyContent = function (tBody, agendaDate) {\n    var eTr = this.createTableRowElement(agendaDate, 'noEvents');\n    var eTd = eTr.children[0];\n    var noEvents = createElement('div', {\n      className: AGENDA_EMPTY_EVENT_CLASS,\n      innerHTML: this.parent.localeObj.getConstant('noEvents')\n    });\n    eTd.appendChild(noEvents);\n    tBody.appendChild(eTr);\n  };\n\n  AgendaBase.prototype.createTableRowElement = function (date, type) {\n    var daysCount = getDaysCount(this.parent.selectedDate.getTime(), date.getTime());\n    var tr = createElement('tr', {\n      attrs: {\n        'data-row-index': daysCount.toString()\n      }\n    });\n    var td = createElement('td', {\n      attrs: {\n        'class': type === 'monthHeader' ? MONTH_HEADER_CLASS : AGENDA_CELLS_CLASS,\n        'aria-selected': 'false',\n        'data-column-index': daysCount.toString(),\n        'data-date': date.getTime().toString()\n      }\n    });\n    var dTd = td.cloneNode();\n    var aTd = td.cloneNode();\n    tr.appendChild(dTd);\n\n    if (type !== 'noEvents') {\n      tr.appendChild(aTd);\n    }\n\n    return tr;\n  };\n\n  AgendaBase.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n  };\n\n  return AgendaBase;\n}(ViewBase);\n\nvar __extends$23 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * agenda view\n */\n\n\nvar Agenda =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$23(Agenda, _super);\n\n  function Agenda(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.viewClass = 'e-agenda-view';\n    _this.isInverseTableSelect = false;\n    _this.agendaDates = {};\n    _this.virtualScrollTop = 1;\n    return _this;\n  }\n\n  Agenda.prototype.getModuleName = function () {\n    return 'agenda';\n  };\n\n  Agenda.prototype.renderLayout = function () {\n    this.agendaDates = {};\n    this.element = createElement('div', {\n      className: TABLE_WRAP_CLASS\n    });\n    addClass([this.element], this.viewClass);\n    this.element.appendChild(this.createTableLayout(OUTER_TABLE_CLASS));\n    this.element.querySelector('table').setAttribute('role', 'presentation');\n    this.parent.element.querySelector('.' + TABLE_CONTAINER_CLASS).appendChild(this.element);\n    var eTr = createElement('tr');\n    this.element.querySelector('tbody').appendChild(eTr);\n    var workTd = createElement('td');\n    eTr.appendChild(workTd);\n    var wrap = createElement('div', {\n      className: CONTENT_WRAP_CLASS\n    });\n    workTd.appendChild(wrap);\n    var tbl = this.createTableLayout(CONTENT_TABLE_CLASS);\n    this.setAriaAttributes(tbl);\n    wrap.appendChild(tbl);\n    var tBody = tbl.querySelector('tbody');\n    var agendaDate = resetTime(this.parent.selectedDate);\n    this.renderEmptyContent(tBody, agendaDate);\n    this.wireEvents();\n\n    if (this.parent.resourceBase) {\n      this.parent.resourceBase.generateResourceLevels([{\n        renderDates: this.parent.activeView.renderDates\n      }]);\n    }\n\n    if (this.parent.uiStateValues.isGroupAdaptive && !this.parent.element.querySelector('.' + RESOURCE_TOOLBAR_CONTAINER)) {\n      this.renderResourceMobileLayout();\n    }\n\n    this.parent.notify(contentReady, {});\n  };\n\n  Agenda.prototype.eventLoad = function (args) {\n    this.dataSource = extend([], this.parent.eventsData, null, true);\n\n    for (var _i = 0, _a = this.parent.eventsData; _i < _a.length; _i++) {\n      var event_1 = _a[_i];\n      delete event_1.generatedDates;\n    }\n\n    var eventCollection = this.parent.activeViewOptions.allowVirtualScrolling ? args.processedData : this.parent.eventsProcessed;\n\n    if (this.parent.uiStateValues.isGroupAdaptive) {\n      var resource = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];\n      this.dataSource = this.parent.eventBase.filterEventsByResource(resource, this.dataSource);\n      eventCollection = this.parent.eventBase.filterEventsByResource(resource, eventCollection);\n    }\n\n    this.parent.eventsProcessed = this.processAgendaEvents(eventCollection);\n    var agendaDate = resetTime(this.parent.selectedDate);\n    var tBody = this.element.querySelector('.' + CONTENT_TABLE_CLASS + ' tbody');\n    removeChildren(tBody);\n    this.renderInitialContent(tBody, agendaDate);\n    this.wireEventActions();\n    var contentArea = closest(tBody, '.' + CONTENT_WRAP_CLASS);\n    contentArea.scrollTop = 1;\n    this.parent.notify(eventsLoaded, {});\n\n    if (!this.parent.activeViewOptions.allowVirtualScrolling) {\n      this.retainScrollPosition();\n    }\n  };\n\n  Agenda.prototype.refreshEvent = function (refreshDate) {\n    var processedData = [];\n    var fields = this.parent.eventFields;\n\n    for (var _i = 0, _a = this.dataSource; _i < _a.length; _i++) {\n      var data = _a[_i];\n\n      if (isNullOrUndefined(data[fields.recurrenceID]) && !isNullOrUndefined(data[fields.recurrenceRule]) && !isNullOrUndefined(data.generatedDates) && refreshDate >= data.generatedDates.end) {\n        processedData = processedData.concat(this.parent.eventBase.generateOccurrence(data, refreshDate));\n      }\n    }\n\n    this.parent.eventsProcessed = this.parent.eventsProcessed.concat(this.processAgendaEvents(processedData));\n  };\n\n  Agenda.prototype.refreshHeader = function () {\n    var tBody = this.element.querySelector('.' + CONTENT_TABLE_CLASS + ' tbody');\n\n    if (this.parent.activeViewOptions.group.byDate) {\n      removeChildren(tBody);\n    } else {\n      remove(tBody.firstElementChild);\n    }\n\n    var agendaDate = resetTime(this.parent.selectedDate);\n    var emptyTBody = createElement('tbody');\n    var firstDate = new Date(agendaDate.getTime());\n    var lastDate = this.parent.activeViewOptions.allowVirtualScrolling && this.parent.hideEmptyAgendaDays ? this.getEndDateFromStartDate(firstDate) : addDays(firstDate, this.parent.agendaDaysCount);\n    this.renderContent(emptyTBody, firstDate, lastDate);\n    append([].slice.call(emptyTBody.childNodes), tBody);\n  };\n\n  Agenda.prototype.renderInitialContent = function (tBody, agendaDate) {\n    var emptyTBody = createElement('tbody');\n    var firstDate = new Date(agendaDate.getTime());\n    var lastDate = this.parent.activeViewOptions.allowVirtualScrolling && this.parent.hideEmptyAgendaDays ? this.getEndDateFromStartDate(firstDate) : addDays(firstDate, this.parent.agendaDaysCount);\n    this.renderContent(emptyTBody, firstDate, lastDate);\n    append([].slice.call(emptyTBody.childNodes), tBody); // Initial rendering, to load previous date events upto scroll bar enable\n\n    if (this.parent.activeViewOptions.allowVirtualScrolling && this.parent.hideEmptyAgendaDays && this.parent.eventsData.length > 0) {\n      var contentArea = this.getContentAreaElement();\n      var contentChild = contentArea.querySelector('.e-content-table');\n\n      while (contentArea.offsetWidth <= contentArea.clientWidth) {\n        if (this.parent.isAdaptive && contentChild.offsetHeight >= contentArea.clientHeight) {\n          break;\n        }\n\n        var emptyTBody_1 = createElement('tbody');\n        lastDate = firstDate;\n        firstDate = addDays(lastDate, -this.parent.agendaDaysCount);\n        this.renderContent(emptyTBody_1, firstDate, lastDate);\n        prepend([].slice.call(emptyTBody_1.childNodes), tBody);\n\n        if (firstDate <= this.parent.minDate) {\n          break;\n        }\n      }\n    }\n\n    if (tBody.childNodes.length <= 0) {\n      this.renderEmptyContent(tBody, agendaDate);\n    }\n  };\n\n  Agenda.prototype.renderContent = function (tBody, agendaDate, lastDate) {\n    var fieldMapping = this.parent.eventFields;\n    var firstDate = new Date(agendaDate.getTime());\n    var isObject = this.appointmentFiltering(firstDate, lastDate);\n\n    if (isObject.length > 0 && this.parent.activeViewOptions.allowVirtualScrolling && this.parent.hideEmptyAgendaDays) {\n      agendaDate = isObject[0][fieldMapping.startTime];\n      agendaDate = new Date(new Date(agendaDate.getTime()).setHours(0, 0, 0, 0));\n      this.updateHeaderText(isObject[0][fieldMapping.startTime]);\n    }\n\n    var endDate;\n\n    if (!this.parent.hideEmptyAgendaDays || this.parent.agendaDaysCount > 0 && isObject.length > 0) {\n      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n        var date = agendaDate;\n\n        if (!this.parent.activeViewOptions.group.byDate) {\n          this.parent.activeViewOptions.allowVirtualScrolling = false;\n          date = firstDate;\n\n          if (this.parent.headerModule) {\n            this.parent.headerModule.updateDateRange();\n            this.parent.headerModule.updateHeaderItems('remove');\n          }\n        }\n\n        this.calculateResourceTableElement(tBody, this.parent.agendaDaysCount, date);\n      } else {\n        for (var day = 0; day < this.parent.agendaDaysCount; day++) {\n          var filterData = this.appointmentFiltering(agendaDate);\n          var nTr = this.createTableRowElement(agendaDate, 'data');\n\n          if (this.element.querySelector('tr[data-row-index=\"' + parseInt(nTr.getAttribute('data-row-index'), 10) + '\"]')) {\n            agendaDate = addDays(agendaDate, 1);\n            continue;\n          }\n\n          var dTd = nTr.children[0];\n          var aTd = nTr.children[1];\n\n          if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays && filterData.length === 0) {\n            var elementType = !this.parent.hideEmptyAgendaDays && filterData.length === 0 ? 'noEvents' : 'data';\n            dTd.appendChild(this.createDateHeaderElement(agendaDate));\n            nTr.appendChild(dTd);\n            var cTd = this.createAgendaContentElement(elementType, filterData, aTd);\n            nTr.appendChild(cTd);\n\n            if (cTd.querySelectorAll('li').length > 0) {\n              tBody.appendChild(nTr);\n            }\n          } else if (this.parent.activeViewOptions.allowVirtualScrolling) {\n            day--;\n          }\n\n          if (this.isCurrentDate(new Date(agendaDate.getTime()))) {\n            addClass(dTd.childNodes, AGENDA_CURRENT_DAY_CLASS);\n          }\n\n          agendaDate = addDays(agendaDate, 1);\n\n          if (agendaDate.getTime() > lastDate.getTime()) {\n            break;\n          }\n        }\n      }\n\n      endDate = new Date(agendaDate.getTime() - MS_PER_DAY);\n    }\n\n    this.agendaDates = {\n      start: firstDate,\n      end: endDate\n    };\n  };\n\n  Agenda.prototype.agendaScrolling = function (event) {\n    if (this.parent.quickPopup) {\n      this.parent.quickPopup.quickPopupHide();\n    }\n\n    if (this.parent.activeViewOptions.allowVirtualScrolling) {\n      this.virtualScrolling(event);\n    }\n\n    if (!this.parent.activeViewOptions.allowVirtualScrolling) {\n      this.setPersistence();\n    }\n  };\n\n  Agenda.prototype.virtualScrolling = function (event) {\n    var target = event.target;\n    var scrollTop = target.scrollTop;\n    var scrollHeight = target.scrollHeight;\n    var offsetHeight = target.clientHeight;\n    var totalHeight = scrollTop + offsetHeight;\n    var direction = this.virtualScrollTop < scrollTop ? 'next' : 'previous';\n    var tBody = target.querySelector('tbody');\n    var emptyTBody = createElement('tbody');\n    var topElement = this.getElementFromScrollerPosition(event);\n    var scrollDate = this.parent.getDateFromElement(topElement);\n    var filterDate;\n    var filterData;\n\n    if (scrollTop === 0) {\n      filterDate = this.getPreviousNextDate(addDays(scrollDate, -1), direction);\n      filterData = this.appointmentFiltering(filterDate.start, filterDate.end);\n\n      if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays) {\n        this.renderContent(emptyTBody, filterDate.start, filterDate.end);\n        prepend([].slice.call(emptyTBody.childNodes), tBody);\n        this.wireEventActions();\n\n        for (var s = 0, element = tBody.children; s < element.length; s++) {\n          if (element[parseInt(s.toString(), 10)].getAttribute('data-row-index') === topElement.getAttribute('data-column-index')) {\n            var scrollToValue = element[parseInt(s.toString(), 10)].offsetTop - this.element.querySelector('.e-agenda-item').offsetHeight;\n            target.scrollTop = scrollToValue;\n            break;\n          }\n        }\n\n        this.updateHeaderText(scrollDate);\n      }\n    } else if (totalHeight >= scrollHeight - 5) {\n      filterDate = this.getPreviousNextDate(addDays(scrollDate, 1), direction);\n      filterData = this.appointmentFiltering(filterDate.start, filterDate.end);\n\n      if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays) {\n        this.renderContent(emptyTBody, filterDate.start, filterDate.end);\n        append([].slice.call(emptyTBody.childNodes), tBody);\n        this.wireEventActions();\n        this.updateHeaderText(scrollDate);\n      }\n    } else {\n      this.updateHeaderText(scrollDate);\n    }\n\n    this.virtualScrollTop = scrollTop;\n    var selectedElements = this.parent.eventBase.getSelectedAppointments();\n\n    if (selectedElements.length > 0) {\n      selectedElements[selectedElements.length - 1].focus();\n    }\n  };\n\n  Agenda.prototype.getElementFromScrollerPosition = function (event) {\n    var filterElement;\n    var target = event.target;\n    var scrollTop = target.scrollTop;\n    var scrollHeight = target.scrollHeight;\n    var offsetHeight = target.clientHeight;\n    var totalHeight = scrollTop + offsetHeight;\n    var liCollection = [].slice.call(target.querySelectorAll('.e-agenda-item'));\n    var li;\n    var liDetails;\n\n    if (liCollection.length > 0) {\n      if (scrollTop === 0) {\n        li = liCollection[0];\n        filterElement = closest(li, '.' + AGENDA_CELLS_CLASS);\n      } else if (totalHeight === scrollHeight) {\n        li = liCollection[liCollection.length - 1];\n        filterElement = closest(li, '.' + AGENDA_CELLS_CLASS);\n      } else {\n        for (var a = 0, length_1 = liCollection.length; a < length_1; a++) {\n          li = liCollection[parseInt(a.toString(), 10)];\n          liDetails = li.getBoundingClientRect();\n\n          if (liDetails.top >= 0) {\n            filterElement = closest(li, '.' + AGENDA_CELLS_CLASS);\n            break;\n          }\n        }\n      }\n    }\n\n    return filterElement;\n  };\n\n  Agenda.prototype.updateHeaderText = function (date) {\n    if (this.parent.showHeaderBar) {\n      this.parent.headerModule.updateDateRange(date);\n    }\n  };\n\n  Agenda.prototype.getPreviousNextDate = function (date, type) {\n    var currentDate = new Date(date.getTime());\n    var firstDate = this.getStartDateFromEndDate(date);\n    var lastDate = this.getEndDateFromStartDate(date);\n    var daysCount = 0;\n\n    do {\n      var filterData = this.appointmentFiltering(currentDate);\n\n      if (filterData.length > 0 || !this.parent.hideEmptyAgendaDays) {\n        daysCount++;\n      }\n\n      currentDate = addDays(currentDate, type === 'next' ? 1 : -1);\n\n      if (currentDate < firstDate || currentDate > lastDate) {\n        break;\n      }\n    } while (daysCount !== this.parent.agendaDaysCount);\n\n    var endDate = addDays(currentDate, type === 'next' ? -1 : 1);\n    return type === 'next' ? {\n      start: date,\n      end: addDays(endDate, 1)\n    } : {\n      start: endDate,\n      end: addDays(date, 1)\n    };\n  };\n\n  Agenda.prototype.appointmentFiltering = function (startDate, endDate) {\n    var dateStart;\n    var dateEnd;\n\n    if (!isNullOrUndefined(startDate) && isNullOrUndefined(endDate)) {\n      dateStart = resetTime(new Date(startDate.getTime()));\n      dateEnd = setTime(new Date(dateStart.getTime()), MS_PER_DAY);\n    } else {\n      dateStart = new Date(startDate.getTime());\n      dateEnd = new Date(endDate.getTime());\n    }\n\n    var filterData = this.parent.eventBase.filterEvents(dateStart, dateEnd);\n\n    if (filterData.length === 0) {\n      this.refreshEvent(startDate);\n      filterData = this.parent.eventBase.filterEvents(dateStart, dateEnd);\n    }\n\n    return filterData;\n  };\n\n  Agenda.prototype.getStartDateFromEndDate = function (endDate) {\n    var filterDate;\n    var fields = this.parent.eventFields;\n\n    if (this.parent.eventsProcessed.length > 0) {\n      var firstDate = Math.min.apply(Math, this.parent.eventsProcessed.map(function (a) {\n        return a[fields.startTime].getTime();\n      }));\n      filterDate = this.parent.hideEmptyAgendaDays ? new Date(firstDate) : this.parent.minDate;\n    } else {\n      filterDate = this.parent.hideEmptyAgendaDays ? addMonths(endDate, -1) : this.parent.minDate;\n    }\n\n    return resetTime(filterDate);\n  };\n\n  Agenda.prototype.getEndDateFromStartDate = function (startDate) {\n    var filterDate;\n    var fieldMapping = this.parent.eventFields;\n\n    if (this.parent.eventsProcessed.length > 0) {\n      var lastDate = Math.max.apply(Math, this.parent.eventsProcessed.map(function (a) {\n        return a[fieldMapping.endTime].getTime();\n      }));\n      filterDate = this.parent.hideEmptyAgendaDays ? new Date(lastDate) : this.parent.maxDate;\n    } else {\n      filterDate = this.parent.hideEmptyAgendaDays ? addMonths(startDate, 1) : this.parent.maxDate;\n    }\n\n    return resetTime(addDays(filterDate, 1));\n  };\n\n  Agenda.prototype.getNextPreviousDate = function (type) {\n    var noOfDays = type === 'next' ? 1 : -1;\n    return addDays(this.parent.selectedDate, noOfDays);\n  };\n\n  Agenda.prototype.startDate = function () {\n    return resetTime(this.parent.selectedDate);\n  };\n\n  Agenda.prototype.endDate = function () {\n    if (this.parent.activeViewOptions.allowVirtualScrolling) {\n      return this.getEndDateFromStartDate(this.startDate());\n    } else {\n      return addDays(this.startDate(), this.parent.agendaDaysCount);\n    }\n  };\n\n  Agenda.prototype.getDateRangeText = function (date) {\n    var formatDate = this.parent.activeViewOptions.dateFormat ? this.parent.activeViewOptions.dateFormat : 'MMMM y';\n\n    if (this.parent.activeViewOptions.allowVirtualScrolling || this.parent.isAdaptive) {\n      var currentDate = isNullOrUndefined(date) ? this.parent.selectedDate : date;\n      return capitalizeFirstWord(this.parent.globalize.formatDate(currentDate, {\n        format: formatDate,\n        calendar: this.parent.getCalendarMode()\n      }), 'multiple');\n    } else {\n      var startDate = this.parent.selectedDate;\n      var endDate = addDays(startDate, this.parent.agendaDaysCount - 1);\n      return this.formatDateRange(startDate, endDate);\n    }\n  };\n\n  Agenda.prototype.dayNavigationClick = function (e) {\n    var element = closest(e.currentTarget, '.' + AGENDA_CELLS_CLASS);\n    var date = this.parent.getDateFromElement(element);\n\n    if (!isNullOrUndefined(date) && !this.parent.isAdaptive && this.parent.isMinMaxDate(date)) {\n      this.parent.setProperties({\n        selectedDate: date\n      }, true);\n      this.parent.changeView('Day', e);\n    }\n  };\n\n  Agenda.prototype.wireEvents = function () {\n    EventHandler.add(this.element.querySelector('.' + CONTENT_WRAP_CLASS), scroll, this.agendaScrolling, this);\n  };\n\n  Agenda.prototype.unWireEvents = function () {\n    EventHandler.remove(this.element.querySelector('.' + CONTENT_WRAP_CLASS), scroll, this.agendaScrolling);\n    var dateHeaderElement = [].slice.call(this.element.querySelectorAll('.e-m-date'));\n\n    for (var _i = 0, dateHeaderElement_1 = dateHeaderElement; _i < dateHeaderElement_1.length; _i++) {\n      var element = dateHeaderElement_1[_i];\n      EventHandler.remove(element, 'click', this.dayNavigationClick);\n    }\n  };\n\n  Agenda.prototype.addEventListener = function () {\n    this.parent.on(scrollUiUpdate, this.onAgendaScrollUiUpdate, this);\n    this.parent.on(dataReady, this.eventLoad, this);\n  };\n\n  Agenda.prototype.removeEventListener = function () {\n    if (this.parent) {\n      this.parent.off(scrollUiUpdate, this.onAgendaScrollUiUpdate);\n      this.parent.off(dataReady, this.eventLoad);\n    }\n  };\n\n  Agenda.prototype.onAgendaScrollUiUpdate = function () {\n    var headerHeight = this.getHeaderBarHeight();\n\n    if (this.parent.headerModule) {\n      if (this.parent.activeViewOptions.allowVirtualScrolling) {\n        this.parent.headerModule.updateHeaderItems('add');\n      } else {\n        this.parent.headerModule.updateHeaderItems('remove');\n      }\n    }\n\n    var contentArea = this.element.querySelector('.' + CONTENT_WRAP_CLASS);\n\n    if (this.parent.height !== 'auto') {\n      contentArea.style.height = formatUnit(this.parent.element.offsetHeight - headerHeight);\n    }\n  };\n\n  Agenda.prototype.scrollToDate = function (scrollDate) {\n    var date = new Date(+resetTime(scrollDate));\n\n    if (this.parent.activeViewOptions.allowVirtualScrolling) {\n      if (!this.parent.hideEmptyAgendaDays || this.parent.getEvents(date, addDays(date, 1), true).length > 0) {\n        this.parent.changeDate(date);\n      }\n    } else {\n      var dateElement = this.element.querySelector('.' + AGENDA_CELLS_CLASS + '[data-date=\"' + date.getTime() + '\"]');\n\n      if (dateElement) {\n        this.getContentAreaElement().scrollTop = dateElement.offsetTop;\n      }\n    }\n  };\n\n  Agenda.prototype.destroy = function () {\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    if (this.element) {\n      this.unWireEvents();\n\n      if (this.parent.resourceBase) {\n        this.parent.resourceBase.destroy();\n      }\n\n      if (this.parent.headerModule && this.parent.activeViewOptions.allowVirtualScrolling) {\n        this.parent.headerModule.updateHeaderItems('remove');\n      }\n\n      _super.prototype.destroy.call(this);\n    }\n  };\n\n  return Agenda;\n}(AgendaBase);\n\nvar __extends$25 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * month agenda view\n */\n\n\nvar MonthAgenda =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$25(MonthAgenda, _super);\n\n  function MonthAgenda(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.dayNameFormat = 'narrow';\n    _this.viewClass = 'e-month-agenda-view';\n    _this.monthAgendaDate = new Date('' + parent.selectedDate);\n    return _this;\n  }\n\n  MonthAgenda.prototype.getModuleName = function () {\n    return 'monthAgenda';\n  };\n\n  MonthAgenda.prototype.renderAppointmentContainer = function () {\n    var contentArea = this.getContentAreaElement();\n    var wrapperContainer = createElement('div', {\n      className: WRAPPER_CONTAINER_CLASS\n    });\n    contentArea.appendChild(wrapperContainer);\n    var appWrap = createElement('div', {\n      className: APPOINTMENT_WRAP_CLASS\n    });\n    wrapperContainer.appendChild(appWrap);\n    this.appendAppContainer(appWrap);\n    this.setEventWrapperHeight();\n  };\n\n  MonthAgenda.prototype.getDayNameFormat = function () {\n    if (this.parent.isAdaptive) {\n      return 'narrow';\n    }\n\n    return 'abbreviated';\n  };\n\n  MonthAgenda.prototype.updateSelectedCellClass = function (data) {\n    if (resetTime(data.date).getTime() === resetTime(this.monthAgendaDate).getTime()) {\n      data.className.push(SELECTED_CELL_CLASS);\n    }\n  };\n\n  MonthAgenda.prototype.setEventWrapperHeight = function () {\n    var headerHeight = (this.parent.headerModule ? this.parent.headerModule.getHeaderElement().offsetHeight : 0) + 2;\n    var resourceWrapper = this.parent.element.querySelector('.' + RESOURCE_HEADER_TOOLBAR);\n\n    if (resourceWrapper) {\n      headerHeight += resourceWrapper.offsetHeight;\n    }\n\n    var contentArea = this.getContentAreaElement().firstElementChild;\n    var dateHeader = this.element.querySelector('.' + DATE_HEADER_WRAP_CLASS);\n    var availHeight = this.parent.element.offsetHeight - headerHeight - dateHeader.offsetHeight;\n    var contentAreaHeight = this.parent.activeViewOptions.interval > 1 ? Math.round(availHeight * 0.8) : contentArea.offsetHeight;\n    var appContainerHeight = availHeight - contentAreaHeight;\n    var wrapperContainer = this.element.querySelector('.' + WRAPPER_CONTAINER_CLASS);\n    var eventWrapper = this.element.querySelector('.' + APPOINTMENT_WRAP_CLASS);\n\n    if (this.parent.height !== 'auto') {\n      if (this.parent.activeViewOptions.interval > 1) {\n        contentArea.style.height = formatUnit(contentAreaHeight);\n        EventHandler.add(contentArea, 'scroll', this.onContentScroll, this);\n      }\n\n      wrapperContainer.style.height = eventWrapper.style.height = formatUnit(appContainerHeight);\n    }\n  };\n\n  MonthAgenda.prototype.onDataReady = function (args) {\n    this.setEventWrapperHeight();\n    this.clearElements();\n    var eventCollection = args.processedData;\n\n    if (this.parent.uiStateValues.isGroupAdaptive) {\n      var resource = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];\n      eventCollection = this.parent.eventBase.filterEventsByResource(resource, eventCollection);\n    }\n\n    this.agendaBase = this.getAgendaBase();\n    this.parent.eventsProcessed = this.agendaBase.processAgendaEvents(eventCollection);\n    var count = 0;\n\n    for (var _i = 0, _a = this.renderDates; _i < _a.length; _i++) {\n      var date = _a[_i];\n      var filterData = this.appointmentFiltering(date);\n      var workCell = this.element.querySelectorAll('.' + WORK_CELLS_CLASS)[parseInt(count.toString(), 10)];\n\n      if (filterData.length > 0) {\n        if (!workCell.querySelector('.' + APPOINTMENT_INDICATOR_CLASS)) {\n          workCell.appendChild(createElement('div', {\n            className: APPOINTMENT_INDICATOR_CLASS\n          }));\n        }\n\n        if (date.getTime() === resetTime(new Date(this.monthAgendaDate.getTime())).getTime()) {\n          this.onEventRender(filterData, date);\n        }\n      }\n\n      count++;\n    }\n\n    this.parent.notify(eventsLoaded, {});\n  };\n\n  MonthAgenda.prototype.onCellClick = function (event) {\n    if (this.parent.quickPopup) {\n      this.parent.quickPopup.quickPopupHide();\n    }\n\n    var filterData = this.appointmentFiltering(event.startTime);\n    this.onEventRender(filterData, event.startTime);\n    this.parent.notify(eventsLoaded, {});\n    this.monthAgendaDate = new Date('' + event.startTime);\n  };\n\n  MonthAgenda.prototype.onEventRender = function (events, date) {\n    this.agendaBase = this.getAgendaBase();\n    var appWrap = this.element.querySelector('.' + APPOINTMENT_WRAP_CLASS);\n    removeChildren(appWrap);\n\n    if (this.parent.activeViewOptions.group.resources.length === 0 || this.parent.uiStateValues.isGroupAdaptive) {\n      if (events.length > 0) {\n        var appContainer = createElement('div', {\n          className: APPOINTMENT_CONTAINER_CLASS\n        });\n        appWrap.appendChild(this.agendaBase.createAgendaContentElement('data', events, appContainer));\n      } else {\n        this.appendAppContainer(appWrap);\n      }\n    } else {\n      if (events.length > 0) {\n        var table = this.createTableLayout();\n        var tBody = table.querySelector('tbody');\n        this.agendaBase.calculateResourceTableElement(tBody, 1, date);\n        table.appendChild(tBody);\n        appWrap.appendChild(table);\n      } else {\n        this.appendAppContainer(appWrap);\n      }\n    }\n\n    this.agendaBase.wireEventActions();\n  };\n\n  MonthAgenda.prototype.appointmentFiltering = function (date) {\n    var dateStart = resetTime(new Date(date.getTime()));\n    var dateEnd = setTime(new Date(dateStart.getTime()), MS_PER_DAY);\n    return this.parent.eventBase.filterEvents(dateStart, dateEnd);\n  };\n\n  MonthAgenda.prototype.clearElements = function () {\n    var appointmentIndicators = [].slice.call(this.element.querySelectorAll('.' + APPOINTMENT_INDICATOR_CLASS));\n\n    for (var _i = 0, appointmentIndicators_1 = appointmentIndicators; _i < appointmentIndicators_1.length; _i++) {\n      var appointmentIndicator = appointmentIndicators_1[_i];\n      remove(appointmentIndicator);\n    }\n\n    this.appendAppContainer(this.element.querySelector('.' + APPOINTMENT_WRAP_CLASS));\n  };\n\n  MonthAgenda.prototype.appendAppContainer = function (appWrap) {\n    var app = createElement('div', {\n      className: APPOINTMENT_CONTAINER_CLASS\n    });\n    addClass([app], AGENDA_NO_EVENT_CLASS);\n    app.innerHTML = this.parent.localeObj.getConstant('noEvents');\n    removeChildren(appWrap);\n    appWrap.appendChild(app);\n  };\n\n  MonthAgenda.prototype.getNextPreviousDate = function (type) {\n    var selectedDate = this.parent.selectedDate;\n    var interval = type === 'next' ? this.parent.activeViewOptions.interval : -this.parent.activeViewOptions.interval;\n    var navigateDate = addMonths(this.parent.selectedDate, interval);\n    var month = type === 'next' ? 2 : 0;\n    var lastDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + month, 0).getDate();\n    var date = lastDate >= this.monthAgendaDate.getDate() ? this.monthAgendaDate.getDate() : lastDate;\n    this.monthAgendaDate = new Date(navigateDate.getFullYear(), navigateDate.getMonth(), date);\n    return this.monthAgendaDate;\n  };\n\n  MonthAgenda.prototype.getAgendaBase = function () {\n    return this.agendaBase || new AgendaBase(this.parent);\n  };\n\n  MonthAgenda.prototype.destroy = function () {\n    if (this.agendaBase) {\n      this.agendaBase.destroy();\n      this.agendaBase = null;\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n\n  return MonthAgenda;\n}(Month);\n/**\n * timeline header rows\n */\n\n\nvar TimelineHeaderRow =\n/** @__PURE__ @class */\nfunction () {\n  function TimelineHeaderRow(parent, renderDates) {\n    this.parent = parent;\n    this.renderDates = renderDates;\n  }\n\n  TimelineHeaderRow.prototype.groupByYear = function (dates) {\n    var result = {};\n\n    for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {\n      var d = dates_1[_i];\n      var key = d.getFullYear();\n      result[parseInt(key.toString(), 10)] = result[parseInt(key.toString(), 10)] || [];\n      result[parseInt(key.toString(), 10)].push(d);\n    }\n\n    return result;\n  };\n\n  TimelineHeaderRow.prototype.groupByMonth = function (dates) {\n    var result = {};\n\n    for (var _i = 0, dates_2 = dates; _i < dates_2.length; _i++) {\n      var d = dates_2[_i];\n      var key = (d.getFullYear() - 1970) * 12 + d.getMonth();\n      result[parseInt(key.toString(), 10)] = result[parseInt(key.toString(), 10)] || [];\n      result[parseInt(key.toString(), 10)].push(d);\n    }\n\n    return result;\n  };\n\n  TimelineHeaderRow.prototype.groupByWeek = function (dates) {\n    var result = {};\n\n    for (var _i = 0, dates_3 = dates; _i < dates_3.length; _i++) {\n      var d = dates_3[_i];\n      var jsDate = +new Date(1970, 0, 1);\n      var tzOffsetDiff = d.getTimezoneOffset() - new Date(1970, 0, 1).getTimezoneOffset();\n      var key = Math.ceil(((+d - jsDate - tzOffsetDiff * 60 * 1000) / MS_PER_DAY + new Date(jsDate).getDay() + 1) / 7);\n\n      if (this.parent.firstDayOfWeek && this.parent.firstDayOfWeek > new Date(+d).getDay()) {\n        key = key - 1;\n      }\n\n      result[parseInt(key.toString(), 10)] = result[parseInt(key.toString(), 10)] || [];\n      result[parseInt(key.toString(), 10)].push(d);\n    }\n\n    return result;\n  };\n\n  TimelineHeaderRow.prototype.generateSlots = function (data, colspan, row, cls, type) {\n    var _this = this;\n\n    var dateParser = function (date, format) {\n      return _this.parent.globalize.formatDate(date, {\n        format: format,\n        calendar: _this.parent.getCalendarMode()\n      });\n    };\n\n    var tdDatas = [];\n    var keys = Object.keys(data);\n\n    for (var i = 0; i < keys.length; i++) {\n      var dates = data[keys[parseInt(i.toString(), 10)]];\n      var htmlCol = void 0;\n\n      if (row.template) {\n        var args = {\n          date: dates[0],\n          type: type\n        };\n        var templateId = this.parent.element.id + '_headerRowTemplate';\n        htmlCol = [].slice.call(this.parent.templateParser(row.template)(args, this.parent, 'template', templateId, false));\n      } else {\n        var viewTemplate = void 0;\n\n        switch (row.option) {\n          case 'Year':\n            viewTemplate = \"<span class=\\\"e-header-year\\\">\" + dateParser(dates[0], 'y') + \"</span>\";\n            break;\n\n          case 'Month':\n            viewTemplate = \"<span class=\\\"e-header-month\\\">\" + capitalizeFirstWord(dateParser(dates[0], 'MMMM'), 'single') + \"</span>\";\n            break;\n\n          case 'Week':\n            viewTemplate = \"<span class=\\\"e-header-week\\\">\" + this.parent.getWeekNumberContent(dates) + \"</span>\";\n        }\n\n        var headerWrapper = createElement('div', {\n          innerHTML: viewTemplate\n        });\n        htmlCol = [].slice.call(headerWrapper.childNodes);\n      }\n\n      tdDatas.push({\n        date: dates[0],\n        type: type,\n        className: [cls],\n        colSpan: dates.length * colspan,\n        template: htmlCol\n      });\n    }\n\n    return tdDatas;\n  };\n\n  TimelineHeaderRow.prototype.generateColumnLevels = function (dateSlots, hourSlots) {\n    var levels = [];\n    var rows = this.parent.activeViewOptions.headerRows;\n    var lastLevelColspan = 1;\n\n    if (rows[rows.length - 1].option === 'Hour' && hourSlots.length > 0) {\n      lastLevelColspan = hourSlots.length / dateSlots.length;\n    }\n\n    var tdDatas = [];\n    var byYear;\n    var byMonth;\n    var byWeek;\n\n    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n      var row = rows_1[_i];\n\n      switch (row.option) {\n        case 'Year':\n          byYear = this.groupByYear(this.renderDates);\n          tdDatas = this.generateSlots(byYear, lastLevelColspan, row, 'e-header-year-cell', 'yearHeader');\n          levels.push(tdDatas);\n          break;\n\n        case 'Month':\n          byMonth = this.groupByMonth(this.renderDates);\n          tdDatas = this.generateSlots(byMonth, lastLevelColspan, row, 'e-header-month-cell', 'monthHeader');\n          levels.push(tdDatas);\n          break;\n\n        case 'Week':\n          byWeek = this.groupByWeek(this.renderDates);\n          tdDatas = this.generateSlots(byWeek, lastLevelColspan, row, 'e-header-week-cell', 'weekHeader');\n          levels.push(tdDatas);\n          break;\n\n        case 'Date':\n          tdDatas = dateSlots;\n          tdDatas = tdDatas.map(function (value) {\n            value.colSpan = lastLevelColspan;\n            return value;\n          });\n          levels.push(tdDatas);\n          break;\n\n        case 'Hour':\n          if (hourSlots.length > 0) {\n            levels.push(hourSlots);\n          }\n\n          break;\n      }\n    }\n\n    return levels;\n  };\n\n  return TimelineHeaderRow;\n}();\n\nvar __extends$26 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * timeline views\n */\n\n\nvar TimelineViews =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$26(TimelineViews, _super);\n\n  function TimelineViews(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.timelineAppointment = null;\n    _this.baseCssClass = 'e-timeline-view';\n    return _this;\n  }\n\n  TimelineViews.prototype.getModuleName = function () {\n    return 'timelineViews';\n  };\n\n  TimelineViews.prototype.getLeftPanelElement = function () {\n    return this.element.querySelector('.' + RESOURCE_COLUMN_WRAP_CLASS);\n  };\n\n  TimelineViews.prototype.scrollTopPanel = function (target) {\n    _super.prototype.scrollTopPanel.call(this, target);\n\n    this.scrollHeaderLabels(target);\n  };\n\n  TimelineViews.prototype.scrollToWorkHour = function () {\n    var start = this.parent.getStartEndTime(this.parent.workHours.start);\n    var currDateTime = this.isWorkDay(this.parent.selectedDate) && this.parent.workHours.highlight && !isNullOrUndefined(start) ? new Date(+this.parent.selectedDate).setHours(start.getHours(), start.getMinutes(), 0, 0) : new Date(+this.parent.selectedDate).setHours(0, 0, 0, 0);\n    var queryString = '[data-date=\"' + new Date(currDateTime).getTime().toString() + '\"]';\n    var firstWorkHourCell = this.element.querySelector(queryString);\n\n    if (firstWorkHourCell) {\n      this.getContentAreaElement().scrollLeft = !this.parent.enableRtl ? firstWorkHourCell.offsetLeft : -(this.parent.getContentTable().offsetWidth - firstWorkHourCell.offsetLeft - firstWorkHourCell.offsetWidth);\n    }\n  };\n\n  TimelineViews.prototype.scrollToHour = function (hour, scrollDate) {\n    var date;\n    var index;\n\n    if (scrollDate) {\n      index = this.parent.getIndexOfDate(this.renderDates, resetTime(scrollDate));\n\n      if (index >= 0) {\n        date = scrollDate;\n\n        if (!isNullOrUndefined(hour)) {\n          var timeString = hour.split(':');\n\n          if (timeString.length === 2) {\n            date = new Date(scrollDate.setHours(parseInt(timeString[0], 10), parseInt(timeString[1], 10), 0));\n          }\n        }\n      }\n    }\n\n    date = isNullOrUndefined(scrollDate) ? this.parent.getStartEndTime(hour) : date;\n\n    if (isNullOrUndefined(date)) {\n      return;\n    }\n\n    var scrollLeft;\n\n    if (isNullOrUndefined(hour) || !this.parent.activeViewOptions.timeScale.enable) {\n      scrollLeft = index * this.getWorkCellWidth();\n    } else {\n      scrollLeft = isNullOrUndefined(scrollDate) ? this.getLeftFromDateTime(null, date) : this.getLeftFromDateTime([index], date);\n    }\n\n    this.getScrollableElement().scrollLeft = !this.parent.enableRtl ? scrollLeft : -scrollLeft;\n  };\n\n  TimelineViews.prototype.generateColumnLevels = function () {\n    var levels = [];\n    var dateSlots = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);\n    levels.push(dateSlots);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.parent.resourceBase.generateResourceLevels(dateSlots, !this.parent.uiStateValues.isGroupAdaptive);\n    }\n\n    var hourSlots = [];\n\n    if (this.parent.activeViewOptions.timeScale.enable) {\n      hourSlots = this.generateTimeSlots(levels[levels.length - 1]);\n      levels.push(hourSlots);\n    }\n\n    if (this.parent.activeViewOptions.headerRows.length > 0) {\n      var renderGn = new TimelineHeaderRow(this.parent, this.renderDates);\n      levels = renderGn.generateColumnLevels(dateSlots, hourSlots);\n    }\n\n    return levels;\n  };\n\n  TimelineViews.prototype.generateTimeSlots = function (dateSlots) {\n    var _this = this;\n\n    var handler = function (r) {\n      r.type = r.first ? 'majorSlot' : 'minorSlot';\n      r.className = r.first ? [TIME_SLOT_CLASS] : [TIME_SLOT_CLASS, TIME_CELLS_CLASS];\n      r.workDays = _this.parent.activeViewOptions.workDays;\n      return r;\n    };\n\n    var timeSlotData = this.getTimeSlotRows(handler);\n    var slots = [];\n\n    for (var _i = 0, dateSlots_1 = dateSlots; _i < dateSlots_1.length; _i++) {\n      var data = dateSlots_1[_i];\n      data.colSpan = timeSlotData.length;\n      var tempTimeSlots = extend([], timeSlotData, null, true);\n\n      for (var _a = 0, tempTimeSlots_1 = tempTimeSlots; _a < tempTimeSlots_1.length; _a++) {\n        var slot = tempTimeSlots_1[_a];\n        var cellDate = resetTime(new Date('' + data.date));\n        slot.date = setTime(cellDate, getDateInMs(slot.date));\n        slots.push(slot);\n      }\n    }\n\n    return slots;\n  };\n\n  TimelineViews.prototype.changeCurrentTimePosition = function () {\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    this.removeCurrentTimeIndicatorElements();\n    var currentDateIndex = this.getCurrentTimeIndicatorIndex();\n    var left = this.getLeftFromDateTime(currentDateIndex, this.parent.getCurrentTime());\n    var height = this.element.querySelector('.' + CONTENT_TABLE_CLASS).offsetHeight;\n    var headerWrap = this.element.querySelector('.' + DATE_HEADER_WRAP_CLASS);\n    var contentWrap = this.element.querySelector('.' + CONTENT_WRAP_CLASS);\n    contentWrap.appendChild(createElement('div', {\n      className: CURRENT_TIMELINE_CLASS,\n      styles: (this.parent.enableRtl ? 'right' : 'left') + ':' + formatUnit(left) + '; height:' + formatUnit(height)\n    }));\n\n    if (this.parent.virtualScrollModule) {\n      var timeIndicator = this.parent.element.querySelector('.' + CURRENT_TIMELINE_CLASS);\n      var element = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS + ' table');\n      setStyleAttribute(timeIndicator, {\n        transform: element.style.transform\n      });\n    }\n\n    var currentTimeEle = createElement('div', {\n      innerHTML: this.parent.getTimeString(this.parent.getCurrentTime()),\n      className: CURRENT_TIME_CLASS\n    });\n    headerWrap.appendChild(currentTimeEle);\n    currentTimeEle.style[this.parent.enableRtl ? 'right' : 'left'] = formatUnit(left - currentTimeEle.offsetWidth / 2);\n  };\n\n  TimelineViews.prototype.getLeftFromDateTime = function (currentDateIndex, date) {\n    var startHour = this.getStartHour();\n    var endHour = this.getEndHour();\n    var diffInDates = 0;\n    var diffInMinutes = (date.getHours() - startHour.getHours()) * 60 + (date.getMinutes() - startHour.getMinutes());\n\n    if (!isNullOrUndefined(currentDateIndex)) {\n      var end = endHour.getHours() === 0 ? 24 : endHour.getHours();\n\n      if (currentDateIndex[0] !== 0) {\n        diffInDates = currentDateIndex[0] * ((end - startHour.getHours()) * 60) + (endHour.getMinutes() - startHour.getMinutes());\n      }\n\n      diffInMinutes = diffInDates + diffInMinutes;\n    }\n\n    return diffInMinutes * this.getWorkCellWidth() * this.parent.activeViewOptions.timeScale.slotCount / this.parent.activeViewOptions.timeScale.interval;\n  };\n\n  TimelineViews.prototype.getWorkCellWidth = function () {\n    return this.element.querySelector('.e-work-cells').getBoundingClientRect().width;\n  };\n\n  TimelineViews.prototype.renderHeader = function () {\n    var tr = createElement('tr');\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      this.parent.resourceBase.renderResourceHeaderIndent(tr);\n    }\n\n    var dateTd = createElement('td');\n    dateTd.appendChild(this.renderDatesHeader());\n    tr.appendChild(dateTd);\n    prepend([tr], this.element.querySelector('tbody'));\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  TimelineViews.prototype.createAllDayRow = function (table, tdData) {};\n\n  TimelineViews.prototype.getCurrentTimeIndicatorIndex = function () {\n    var currentDateIndex = [];\n    var index = this.parent.getIndexOfDate(this.renderDates, resetTime(this.parent.getCurrentTime()));\n\n    if (index >= 0) {\n      currentDateIndex.push(index);\n    }\n\n    return currentDateIndex;\n  };\n\n  TimelineViews.prototype.renderContent = function () {\n    var tr = createElement('tr');\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      var resTd = createElement('td');\n      resTd.appendChild(this.parent.resourceBase.createResourceColumn());\n      tr.appendChild(resTd);\n    }\n\n    var workTd = createElement('td');\n    var wrap = this.renderContentArea();\n    wrap.appendChild(this.createEventTable(this.getRowCount()));\n    this.collapseRows(wrap);\n    workTd.appendChild(wrap);\n    tr.appendChild(workTd);\n\n    if (this.parent.virtualScrollModule) {\n      this.parent.virtualScrollModule.renderVirtualTrack(wrap);\n    }\n\n    this.element.querySelector('tbody').appendChild(tr);\n  };\n\n  TimelineViews.prototype.getRowCount = function () {\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      return this.parent.resourceBase.renderedResources.length;\n    }\n\n    return 1;\n  };\n\n  TimelineViews.prototype.getResourceTdData = function (i, tdData) {\n    var resLevel = this.parent.resourceBase.renderedResources[parseInt(i.toString(), 10)];\n    var resSHr = resLevel.resourceData[resLevel.resource.startHourField] || this.parent.workHours.start;\n    var resEHr = resLevel.resourceData[resLevel.resource.endHourField] || this.parent.workHours.end;\n    tdData.startHour = this.parent.getStartEndTime(resSHr);\n    tdData.endHour = this.parent.getStartEndTime(resEHr);\n    tdData.workDays = resLevel.resourceData[resLevel.resource.workDaysField] || this.parent.workDays;\n    tdData.className = resLevel.className;\n    tdData.groupIndex = resLevel.groupIndex;\n    tdData.groupOrder = resLevel.groupOrder;\n    return tdData;\n  };\n\n  TimelineViews.prototype.renderContentTable = function (table) {\n    var tBody = table.querySelector('tbody');\n    append(this.getContentRows(), tBody);\n  };\n\n  TimelineViews.prototype.getContentRows = function () {\n    var rows = [];\n    var tr = createElement('tr');\n    var td = createElement('td', {\n      attrs: {\n        'aria-selected': 'false'\n      }\n    });\n    var trCount = this.getRowCount();\n\n    for (var i = 0; i < trCount; i++) {\n      var ntr = tr.cloneNode();\n\n      for (var _i = 0, _a = this.colLevels[this.colLevels.length - 1]; _i < _a.length; _i++) {\n        var tdData = _a[_i];\n\n        if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n          tdData = this.getResourceTdData(i, tdData);\n        }\n\n        var ntd = this.createContentTd(tdData, tdData, td);\n        ntr.appendChild(ntd);\n      }\n\n      rows.push(ntr);\n    }\n\n    return rows;\n  };\n\n  TimelineViews.prototype.getContentTdClass = function (r) {\n    return r.first || !this.parent.activeViewOptions.timeScale.enable ? [WORK_CELLS_CLASS] : [WORK_CELLS_CLASS, ALTERNATE_CELLS_CLASS];\n  };\n\n  TimelineViews.prototype.renderEvents = function () {\n    this.timelineAppointment = new TimelineEvent(this.parent, this.parent.activeViewOptions.timeScale.enable ? 'hour' : 'day');\n    this.timelineAppointment.renderAppointments();\n    this.parent.notify(eventsLoaded, {});\n  };\n\n  TimelineViews.prototype.getAdjustedDate = function (date) {\n    if (!this.parent.activeViewOptions.timeScale.enable) {\n      return new Date(date.setHours(0, 0, 0, 0));\n    } else {\n      var timeSlots = this.colLevels[this.colLevels.length - 1];\n\n      for (var i = 0; i < timeSlots.length; i++) {\n        if (timeSlots[parseInt(i.toString(), 10)].date.getTime() > date.getTime()) {\n          return timeSlots[i - 1].date;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  TimelineViews.prototype.destroy = function () {\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    if (this.timelineAppointment) {\n      this.timelineAppointment.destroy();\n      this.timelineAppointment = null;\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n\n  return TimelineViews;\n}(VerticalView);\n\nvar __extends$27 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * timeline month view\n */\n\n\nvar TimelineMonth =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$27(TimelineMonth, _super);\n\n  function TimelineMonth(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.viewClass = 'e-timeline-month-view';\n    _this.isInverseTableSelect = true;\n    _this.appointment = null;\n    return _this;\n  }\n\n  TimelineMonth.prototype.getModuleName = function () {\n    return 'timelineMonth';\n  };\n\n  TimelineMonth.prototype.onDataReady = function () {\n    this.appointment = new TimelineEvent(this.parent, 'day');\n    this.appointment.renderAppointments();\n    this.parent.notify(eventsLoaded, {});\n  };\n\n  TimelineMonth.prototype.getLeftPanelElement = function () {\n    return this.element.querySelector('.' + RESOURCE_COLUMN_WRAP_CLASS);\n  };\n\n  TimelineMonth.prototype.scrollTopPanel = function (target) {\n    _super.prototype.scrollTopPanel.call(this, target);\n\n    this.scrollHeaderLabels(target);\n  };\n\n  TimelineMonth.prototype.setContentHeight = function (content, leftPanelElement, height) {\n    if (leftPanelElement) {\n      leftPanelElement.style.height = formatUnit(height - this.getScrollXIndent(content));\n    }\n\n    content.style.height = formatUnit(height);\n  };\n\n  TimelineMonth.prototype.getDateSlots = function (renderDates, workDays) {\n    var dateSlots = [];\n\n    for (var _i = 0, renderDates_1 = renderDates; _i < renderDates_1.length; _i++) {\n      var col = renderDates_1[_i];\n      var classList$$1 = [HEADER_CELLS_CLASS];\n\n      if (this.isCurrentDate(col)) {\n        classList$$1.push(CURRENT_DAY_CLASS);\n      }\n\n      dateSlots.push({\n        date: col,\n        type: 'dateHeader',\n        className: classList$$1,\n        colSpan: 1,\n        workDays: workDays\n      });\n    }\n\n    return dateSlots;\n  };\n\n  TimelineMonth.prototype.renderLeftIndent = function (tr) {\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      this.parent.resourceBase.renderResourceHeaderIndent(tr);\n    }\n  };\n\n  TimelineMonth.prototype.renderContent = function () {\n    var contentTr = createElement('tr');\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      var resTd = createElement('td');\n      resTd.appendChild(this.parent.resourceBase.createResourceColumn());\n      contentTr.appendChild(resTd);\n    }\n\n    var contentTd = createElement('td');\n    this.element.querySelector('tbody').appendChild(contentTr);\n    var wrap = createElement('div', {\n      className: CONTENT_WRAP_CLASS\n    });\n    wrap.appendChild(this.renderContentArea());\n    wrap.appendChild(this.createEventTable(this.getRowCount()));\n    this.collapseRows(wrap);\n    EventHandler.add(wrap, 'scroll', this.onContentScroll, this);\n    contentTd.appendChild(wrap);\n\n    if (this.parent.virtualScrollModule) {\n      this.parent.virtualScrollModule.renderVirtualTrack(wrap);\n    }\n\n    contentTr.appendChild(contentTd);\n  };\n\n  TimelineMonth.prototype.getRowCount = function () {\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      return this.parent.resourceBase.renderedResources.length;\n    }\n\n    return 1;\n  };\n\n  TimelineMonth.prototype.getContentSlots = function () {\n    var slotDatas = [];\n\n    for (var row = 0; row < this.getRowCount(); row++) {\n      for (var _i = 0, _a = this.colLevels[this.colLevels.length - 1]; _i < _a.length; _i++) {\n        var data = _a[_i];\n        data.className = [WORK_CELLS_CLASS];\n\n        if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n          var resLevel = this.parent.resourceBase.renderedResources[parseInt(row.toString(), 10)];\n          data.workDays = resLevel.resourceData[resLevel.resource.workDaysField] || this.parent.workDays;\n          data.className = data.className.concat(resLevel.className);\n          data.groupIndex = resLevel.groupIndex;\n          data.groupOrder = resLevel.groupOrder;\n        }\n\n        var slotData = {\n          date: new Date(+data.date),\n          colSpan: data.colSpan,\n          groupIndex: data.groupIndex,\n          workDays: data.workDays,\n          type: 'monthCells',\n          className: data.className\n        };\n\n        if (!slotDatas[parseInt(row.toString(), 10)]) {\n          slotDatas[parseInt(row.toString(), 10)] = [];\n        }\n\n        slotDatas[parseInt(row.toString(), 10)].push(slotData);\n      }\n    }\n\n    return slotDatas;\n  };\n\n  TimelineMonth.prototype.updateClassList = function (data) {\n    if (!this.parent.isMinMaxDate(data.date)) {\n      data.className.push(DISABLE_DATES);\n    }\n  };\n\n  TimelineMonth.prototype.unWireEvents = function () {\n    EventHandler.remove(this.getContentAreaElement(), 'scroll', this.onContentScroll);\n  };\n\n  TimelineMonth.prototype.getMonthStart = function (currentDate) {\n    var monthStart = this.parent.calendarUtil.firstDateOfMonth(resetTime(currentDate));\n    return new Date(monthStart.getFullYear(), monthStart.getMonth(), monthStart.getDate());\n  };\n\n  TimelineMonth.prototype.getMonthEnd = function (currentDate) {\n    var monthStart = this.parent.calendarUtil.firstDateOfMonth(resetTime(currentDate));\n    return this.parent.calendarUtil.lastDateOfMonth(addMonths(new Date(+monthStart), this.parent.activeViewOptions.interval - 1));\n  };\n\n  TimelineMonth.prototype.generateColumnLevels = function () {\n    var colLevels = [];\n    var level = this.getDateSlots(this.renderDates, this.parent.activeViewOptions.workDays);\n    colLevels.push(level);\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.parent.resourceBase.generateResourceLevels(level, !this.parent.uiStateValues.isGroupAdaptive);\n    }\n\n    var hourSlots = [];\n\n    if (this.parent.activeViewOptions.headerRows.length > 0) {\n      var renderGn = new TimelineHeaderRow(this.parent, this.renderDates);\n      colLevels = renderGn.generateColumnLevels(level, hourSlots);\n    }\n\n    this.colLevels = colLevels;\n    return colLevels;\n  };\n\n  TimelineMonth.prototype.getAdjustedDate = function (startTime) {\n    var timeSlots = this.colLevels[this.colLevels.length - 1];\n\n    for (var i = 0; i < timeSlots.length; i++) {\n      if (timeSlots[parseInt(i.toString(), 10)].date.getTime() > startTime.getTime()) {\n        return timeSlots[i - 1].date;\n      }\n    }\n\n    return null;\n  };\n\n  TimelineMonth.prototype.destroy = function () {\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    if (this.element) {\n      var contentScrollableEle = this.element.querySelector('.' + CONTENT_WRAP_CLASS);\n\n      if (contentScrollableEle) {\n        EventHandler.remove(contentScrollableEle, 'scroll', this.onContentScroll);\n      }\n    }\n\n    if (this.appointment) {\n      this.appointment.destroy();\n      this.appointment = null;\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n\n  return TimelineMonth;\n}(Month);\n\nvar __extends$28 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * timeline year view\n */\n\n\nvar TimelineYear =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$28(TimelineYear, _super);\n\n  function TimelineYear(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.viewClass = 'e-timeline-year-view';\n    _this.isInverseTableSelect = true;\n    return _this;\n  }\n\n  TimelineYear.prototype.getModuleName = function () {\n    return 'timelineYear';\n  };\n\n  TimelineYear.prototype.renderHeader = function (headerWrapper) {\n    var tr = createElement('tr');\n    headerWrapper.appendChild(tr);\n\n    if (this.parent.activeViewOptions.orientation === 'Vertical' && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      this.parent.resourceBase.renderResourceHeaderIndent(tr);\n    } else {\n      var leftHeaderCells = createElement('td', {\n        className: LEFT_INDENT_CLASS\n      });\n      tr.appendChild(leftHeaderCells);\n      leftHeaderCells.appendChild(this.renderResourceHeader(LEFT_INDENT_WRAP_CLASS));\n    }\n\n    var isHorizontal = this.parent.activeViewOptions.orientation === 'Horizontal';\n    var isGroup = this.parent.activeViewOptions.group.resources.length > 0;\n    this.isInverseTableSelect = isHorizontal && !isGroup ? false : true;\n    var td = createElement('td');\n    tr.appendChild(td);\n    var container = createElement('div', {\n      className: DATE_HEADER_CONTAINER_CLASS\n    });\n    td.appendChild(container);\n\n    if (this.parent.activeViewOptions.orientation === 'Horizontal' && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      container.appendChild(this.renderResourceHeader(DATE_HEADER_WRAP_CLASS));\n      this.columnCount = this.colLevels.slice(-1)[0].length;\n    } else {\n      var wrapper = createElement('div', {\n        className: DATE_HEADER_WRAP_CLASS\n      });\n      container.appendChild(wrapper);\n      var table = this.createTableLayout();\n      wrapper.appendChild(table);\n      table.appendChild(this.createTableColGroup(this.columnCount));\n      var innerTr = createElement('tr');\n      table.querySelector('tbody').appendChild(innerTr);\n      var months = this.getMonths();\n      var dayHeaderDates = this.getMonthDates(new Date(this.parent.selectedDate.getFullYear(), months[0], 1));\n\n      for (var column = 0; column < this.columnCount; column++) {\n        var date = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(column.toString(), 10)], 1);\n        var innerTd = createElement('td', {\n          className: HEADER_CELLS_CLASS\n        });\n\n        if (this.parent.activeViewOptions.orientation === 'Horizontal') {\n          if (this.parent.dayHeaderTemplate) {\n            append(this.renderDayMonthHeaderTemplate(dayHeaderDates[parseInt(column.toString(), 10)], column, 'dayHeaderTemplate'), innerTd);\n          } else {\n            innerTd.innerHTML = \"<span>\" + this.parent.getDayNames('abbreviated')[column % 7] + \"</span>\";\n          }\n        } else {\n          if (this.parent.monthHeaderTemplate) {\n            append(this.renderDayMonthHeaderTemplate(date, months[parseInt(column.toString(), 10)], 'monthHeaderTemplate'), innerTd);\n          } else {\n            innerTd.innerHTML = \"<span>\" + this.getMonthName(date) + \"</span>\";\n          }\n\n          innerTd.setAttribute('data-date', date.getTime().toString());\n        }\n\n        innerTr.appendChild(innerTd);\n        this.parent.trigger(renderCell, {\n          elementType: 'headerCells',\n          element: innerTd\n        });\n      }\n    }\n  };\n\n  TimelineYear.prototype.renderResourceHeader = function (className) {\n    var wrap = createElement('div', {\n      className: className\n    });\n    var tbl = this.createTableLayout();\n    wrap.appendChild(tbl);\n    var trEle = createElement('tr');\n\n    if (this.parent.activeViewOptions.group.resources.length > 0) {\n      this.colLevels = this.generateColumnLevels();\n    } else {\n      var colData = [{\n        className: [HEADER_CELLS_CLASS],\n        type: 'headerCell'\n      }];\n      this.colLevels = [colData];\n    }\n\n    for (var _i = 0, _a = this.colLevels; _i < _a.length; _i++) {\n      var col = _a[_i];\n      var ntr = trEle.cloneNode();\n      var count = className === DATE_HEADER_WRAP_CLASS ? col : [col[0]];\n\n      for (var _b = 0, count_1 = count; _b < count_1.length; _b++) {\n        var c = count_1[_b];\n        var tdEle = createElement('td');\n\n        if (c.className) {\n          addClass([tdEle], c.className);\n        }\n\n        if (className === DATE_HEADER_WRAP_CLASS) {\n          if (c.template) {\n            append(c.template, tdEle);\n          }\n\n          if (c.colSpan) {\n            tdEle.setAttribute('colspan', c.colSpan.toString());\n          }\n\n          if (c.groupIndex > -1) {\n            tdEle.setAttribute('data-group-index', c.groupIndex.toString());\n          }\n\n          this.setResourceHeaderContent(tdEle, c);\n        }\n\n        if (className === LEFT_INDENT_WRAP_CLASS) {\n          this.parent.renderHeaderIndentTemplate(c, tdEle);\n        }\n\n        var args = {\n          elementType: c.type,\n          element: tdEle,\n          date: c.date,\n          groupIndex: c.groupIndex\n        };\n        this.parent.trigger(renderCell, args);\n        ntr.appendChild(tdEle);\n      }\n\n      tbl.querySelector('tbody').appendChild(ntr);\n    }\n\n    if (className === DATE_HEADER_WRAP_CLASS) {\n      tbl.appendChild(this.createTableColGroup(this.colLevels.slice(-1)[0].length));\n    }\n\n    return wrap;\n  };\n\n  TimelineYear.prototype.renderContent = function (contentWrapper) {\n    var tr = createElement('tr');\n    contentWrapper.appendChild(tr);\n    var firstTd = createElement('td');\n    var lastTd = createElement('td');\n    var tdCollection = [];\n    var monthTBody;\n\n    if (this.parent.activeViewOptions.orientation === 'Vertical' && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      tdCollection.push(firstTd);\n      firstTd.appendChild(this.parent.resourceBase.createResourceColumn());\n      this.rowCount = this.parent.resourceBase.renderedResources.length;\n    } else {\n      tdCollection.push(firstTd);\n      var monthWrapper = createElement('div', {\n        className: MONTH_HEADER_WRAPPER\n      });\n      firstTd.appendChild(monthWrapper);\n      monthWrapper.appendChild(this.createTableLayout());\n      monthTBody = monthWrapper.querySelector('tbody');\n    }\n\n    tdCollection.push(lastTd);\n    append(tdCollection, tr);\n    var content = createElement('div', {\n      className: CONTENT_WRAP_CLASS\n    });\n    lastTd.appendChild(content);\n    var contentTable = this.createTableLayout(CONTENT_TABLE_CLASS);\n    this.setAriaAttributes(contentTable);\n    content.appendChild(contentTable);\n    var eventWrapper = createElement('div', {\n      className: EVENT_TABLE_CLASS\n    });\n    content.appendChild(eventWrapper);\n\n    if (this.parent.virtualScrollModule) {\n      this.parent.virtualScrollModule.renderVirtualTrack(content);\n    }\n\n    var contentTBody = contentTable.querySelector('tbody');\n\n    if (this.parent.rowAutoHeight) {\n      var addClassTable = [contentTable];\n      var monthHeader = this.parent.element.querySelector('.' + MONTH_HEADER_WRAPPER + ' .' + SCHEDULE_TABLE_CLASS);\n\n      if (monthHeader) {\n        addClassTable.push(monthHeader);\n      }\n\n      addClass(addClassTable, AUTO_HEIGHT);\n    }\n\n    if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      var colCount = this.parent.activeViewOptions.orientation === 'Horizontal' ? this.colLevels.slice(-1)[0].length : this.columnCount;\n      contentTable.appendChild(this.createTableColGroup(colCount));\n      this.renderResourceContent(eventWrapper, monthTBody, contentTBody);\n    } else {\n      contentTable.appendChild(this.createTableColGroup(this.columnCount));\n      this.renderDefaultContent(eventWrapper, monthTBody, contentTBody);\n    }\n  };\n\n  TimelineYear.prototype.renderDefaultContent = function (wrapper, monthBody, contentBody) {\n    var months = this.getMonths();\n    var dayHeaderDates = this.getMonthDates(new Date(this.parent.selectedDate.getFullYear(), months[0], 1));\n\n    for (var month = 0; month < this.rowCount; month++) {\n      wrapper.appendChild(createElement('div', {\n        className: APPOINTMENT_CONTAINER_CLASS\n      }));\n      var monthDate = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(month.toString(), 10)], 1);\n      var monthStart = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));\n      var monthEnd = this.parent.calendarUtil.getMonthEndDate(new Date(monthDate.getTime()));\n      var tr = createElement('tr');\n      var monthTr = tr.cloneNode();\n      monthBody.appendChild(monthTr);\n      var contentTr = tr.cloneNode();\n      contentBody.appendChild(contentTr);\n      var monthTd = createElement('td', {\n        className: MONTH_HEADER_CLASS\n      });\n\n      if (this.parent.activeViewOptions.orientation === 'Horizontal') {\n        if (this.parent.monthHeaderTemplate) {\n          append(this.renderDayMonthHeaderTemplate(monthStart, month, 'monthHeaderTemplate'), monthTd);\n        } else {\n          monthTd.innerHTML = \"<span>\" + this.getMonthName(monthDate) + \"</span>\";\n        }\n\n        monthTd.setAttribute('data-date', monthDate.getTime().toString());\n      } else {\n        if (this.parent.dayHeaderTemplate) {\n          append(this.renderDayMonthHeaderTemplate(dayHeaderDates[parseInt(month.toString(), 10)], month, 'dayHeaderTemplate'), monthTd);\n        } else {\n          monthTd.innerHTML = \"<span>\" + this.parent.getDayNames('abbreviated')[month % 7] + \"</span>\";\n        }\n      }\n\n      monthTr.appendChild(monthTd);\n      this.parent.trigger(renderCell, {\n        elementType: 'leftHeaderCells',\n        element: monthTd\n      });\n      var date = new Date(monthStart.getTime());\n\n      for (var column = 0; column < this.columnCount; column++) {\n        var isDateAvail = void 0;\n\n        if (this.parent.activeViewOptions.orientation === 'Vertical') {\n          monthDate = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(column.toString(), 10)], 1);\n          monthStart = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));\n          monthEnd = this.parent.calendarUtil.getMonthEndDate(new Date(monthDate.getTime()));\n          var dayDate = month - monthStart.getDay() + 1;\n          date = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(column.toString(), 10)], dayDate);\n          isDateAvail = dayDate > 0 && date.getTime() < monthEnd.getTime();\n        } else {\n          isDateAvail = column >= monthStart.getDay() && date.getTime() < monthEnd.getTime();\n        }\n\n        var announcementText = this.parent.globalize.formatDate(date, {\n          skeleton: 'full',\n          calendar: this.parent.getCalendarMode()\n        });\n        var td = createElement('td', {\n          className: WORK_CELLS_CLASS,\n          attrs: {\n            'aria-selected': 'false',\n            'aria-label': announcementText\n          }\n        });\n        contentTr.appendChild(td);\n        var dateHeader = createElement('div', {\n          className: DATE_HEADER_CLASS + ' ' + NAVIGATE_CLASS,\n          innerHTML: isDateAvail ? this.parent.globalize.formatDate(date, {\n            skeleton: 'd',\n            calendar: this.parent.getCalendarMode()\n          }) : ''\n        });\n\n        if (isDateAvail) {\n          var tds = [td];\n          var classList$$1 = [];\n\n          if (this.parent.activeViewOptions.workDays.indexOf(date.getDay()) > -1) {\n            classList$$1.push(WORKDAY_CLASS);\n          }\n\n          if (!this.parent.isMinMaxDate(date)) {\n            addClass([td], DISABLE_DATES);\n          }\n\n          if (this.isCurrentDate(date)) {\n            classList$$1.push(CURRENT_DAY_CLASS);\n\n            if (this.parent.activeViewOptions.orientation === 'Horizontal') {\n              tds.push(this.element.querySelector('.' + HEADER_CELLS_CLASS + (\":nth-child(\" + (column + 1) + \")\")));\n            } else {\n              tds.push(this.element.querySelectorAll('.' + MONTH_HEADER_CLASS).item(month));\n            }\n          }\n\n          if (classList$$1.length > 0) {\n            addClass(tds, classList$$1);\n          }\n        } else {\n          addClass([td], OTHERMONTH_CLASS);\n\n          if (!this.parent.isMinMaxDate(date)) {\n            addClass([td], DISABLE_DATES);\n          }\n        }\n\n        if (td.classList.contains(OTHERMONTH_CLASS)) {\n          continue;\n        } else {\n          this.renderDates.push(new Date(date));\n        }\n\n        td.appendChild(dateHeader);\n\n        if (isDateAvail) {\n          td.setAttribute('data-date', date.getTime().toString());\n          this.wireEvents(td);\n        }\n\n        this.renderCellTemplate({\n          date: date,\n          type: 'workCells'\n        }, td);\n        this.parent.trigger(renderCell, {\n          elementType: 'workCells',\n          element: td,\n          date: date\n        });\n\n        if (isDateAvail) {\n          if (this.parent.activeViewOptions.orientation === 'Horizontal') {\n            date = addDays(new Date(date.getTime()), 1);\n          }\n        }\n      }\n    }\n\n    this.renderDates.splice(0, 1);\n  };\n\n  TimelineYear.prototype.getContentRows = function () {\n    var tRow = [];\n    var monthCells = this.getMonths();\n\n    for (var row = 0; row < this.parent.resourceBase.renderedResources.length; row++) {\n      var tr = createElement('tr');\n      tRow.push(tr);\n      var resData = void 0;\n\n      if (this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n        resData = this.parent.resourceBase.renderedResources[parseInt(row.toString(), 10)];\n      }\n\n      var monthDate = new Date(this.parent.selectedDate.getFullYear(), monthCells[parseInt(row.toString(), 10)], 1);\n      var date = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));\n\n      for (var month = 0; month < this.columnCount; month++) {\n        var classList$$1 = [];\n        var groupIndex = resData.groupIndex;\n        classList$$1 = classList$$1.concat(resData.className);\n\n        if (classList$$1.indexOf(RESOURCE_PARENT_CLASS) > -1) {\n          classList$$1.push(RESOURCE_GROUP_CELLS_CLASS);\n        } else {\n          classList$$1.push(WORKDAY_CLASS);\n        }\n\n        monthDate = new Date(this.parent.selectedDate.getFullYear(), monthCells[parseInt(month.toString(), 10)], 1);\n        date = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));\n        var tdELe = createElement('td', {\n          className: WORK_CELLS_CLASS,\n          attrs: {\n            'aria-selected': 'false',\n            'data-date': date.getTime().toString()\n          }\n        });\n        addClass([tdELe], classList$$1);\n        tdELe.setAttribute('data-group-index', groupIndex.toString());\n        this.renderCellTemplate({\n          date: date,\n          type: 'resourceGroupCells',\n          groupIndex: groupIndex\n        }, tdELe);\n        this.wireEvents(tdELe);\n        this.parent.trigger(renderCell, {\n          elementType: 'resourceGroupCells',\n          element: tdELe,\n          date: date\n        });\n        tr.appendChild(tdELe);\n      }\n    }\n\n    return tRow;\n  };\n\n  TimelineYear.prototype.renderResourceContent = function (wrapper, monthBody, contentBody) {\n    var months = this.getMonths();\n\n    for (var row = 0; row < this.rowCount; row++) {\n      wrapper.appendChild(createElement('div', {\n        className: APPOINTMENT_CONTAINER_CLASS\n      }));\n      var tr = createElement('tr');\n      contentBody.appendChild(tr);\n      var resData = void 0;\n\n      if (this.parent.activeViewOptions.orientation === 'Vertical' && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n        resData = this.parent.resourceBase.renderedResources[parseInt(row.toString(), 10)];\n      }\n\n      var monthDate = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(row.toString(), 10)], 1);\n      var date = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));\n\n      if (this.parent.activeViewOptions.orientation === 'Horizontal') {\n        var monthTr = tr.cloneNode();\n        monthBody.appendChild(monthTr);\n        var monthTd = createElement('td', {\n          className: MONTH_HEADER_CLASS,\n          attrs: {\n            'data-date': date.getTime().toString()\n          }\n        });\n\n        if (this.parent.monthHeaderTemplate) {\n          append(this.renderDayMonthHeaderTemplate(monthDate, row, 'monthHeaderTemplate'), monthTd);\n        } else {\n          monthTd.innerHTML = \"<span>\" + this.getMonthName(monthDate) + \"</span>\";\n        }\n\n        monthTr.appendChild(monthTd);\n      }\n\n      for (var month = 0; month < this.columnCount; month++) {\n        var classList$$1 = [];\n        var groupIndex = void 0;\n\n        if (this.parent.activeViewOptions.orientation === 'Vertical') {\n          groupIndex = resData.groupIndex;\n          classList$$1 = classList$$1.concat(resData.className);\n\n          if (classList$$1.indexOf(RESOURCE_PARENT_CLASS) > -1) {\n            classList$$1.push(RESOURCE_GROUP_CELLS_CLASS);\n          } else {\n            classList$$1.push(WORKDAY_CLASS);\n          }\n\n          monthDate = new Date(this.parent.selectedDate.getFullYear(), months[parseInt(month.toString(), 10)], 1);\n          date = this.parent.calendarUtil.getMonthStartDate(new Date(monthDate.getTime()));\n        } else {\n          groupIndex = this.colLevels.slice(-1)[0][parseInt(month.toString(), 10)].groupIndex;\n          classList$$1.push(WORKDAY_CLASS);\n        }\n\n        var td = createElement('td', {\n          className: WORK_CELLS_CLASS,\n          attrs: {\n            'aria-selected': 'false',\n            'data-date': date.getTime().toString()\n          }\n        });\n        addClass([td], classList$$1);\n        td.setAttribute('data-group-index', groupIndex.toString());\n        this.renderCellTemplate({\n          date: date,\n          type: 'resourceGroupCells',\n          groupIndex: groupIndex\n        }, td);\n        this.wireEvents(td);\n        tr.appendChild(td);\n        this.parent.trigger(renderCell, {\n          elementType: 'resourceGroupCells',\n          element: td,\n          date: date\n        });\n      }\n    }\n\n    if (this.parent.activeViewOptions.orientation === 'Vertical') {\n      this.collapseRows(this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS));\n    }\n  };\n\n  TimelineYear.prototype.renderDayMonthHeaderTemplate = function (date, column, type) {\n    var args = {\n      date: date,\n      type: type === 'dayHeaderTemplate' ? 'dayHeader' : 'monthHeader'\n    };\n    var dayId = \"schedule_\" + this.parent.activeViewOptions.dayHeaderTemplateName + \"dayHeaderTemplate\";\n    var monthId = \"schedule_\" + this.parent.activeViewOptions.dayHeaderTemplateName + \"monthHeaderTemplate\";\n\n    if (type === 'dayHeaderTemplate') {\n      args.day = this.parent.getDayNames('wide')[column % 7];\n      return [].slice.call(this.parent.getDayHeaderTemplate()(args, this.parent, 'dayHeaderTemplate', dayId, false));\n    } else {\n      return [].slice.call(this.parent.getMonthHeaderTemplate()(args, this.parent, 'monthHeaderTemplate', monthId, false));\n    }\n  };\n\n  TimelineYear.prototype.renderCellTemplate = function (data, td) {\n    if (!this.parent.activeViewOptions.cellTemplate || td.classList.contains(OTHERMONTH_CLASS)) {\n      return;\n    }\n\n    var args = {\n      date: data.date,\n      type: data.type\n    };\n\n    if (data.groupIndex) {\n      args.groupIndex = data.groupIndex;\n    }\n\n    var scheduleId = this.parent.element.id + '_';\n    var viewName = this.parent.activeViewOptions.cellTemplateName;\n    var templateId = scheduleId + viewName + 'cellTemplate';\n    var cellTemplate = [].slice.call(this.parent.getCellTemplate()(args, this.parent, 'cellTemplate', templateId, false));\n    append(cellTemplate, td);\n  };\n\n  TimelineYear.prototype.scrollToDate = function (scrollDate) {\n    var date;\n\n    if (this.parent.activeViewOptions.group.resources !== null && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {\n      date = +new Date(resetTime(firstDateOfMonth(scrollDate)));\n    } else {\n      date = +new Date(resetTime(scrollDate));\n    }\n\n    var element = this.element.querySelector('[data-date=\"' + date + '\"]');\n\n    if (element) {\n      var wrap = this.getScrollableElement();\n\n      if (this.parent.enableRtl) {\n        var conTable = this.element.querySelector('.' + CONTENT_TABLE_CLASS);\n        wrap.scrollLeft = -(conTable.offsetWidth - element.offsetLeft - element.offsetWidth);\n      } else {\n        wrap.scrollLeft = element.offsetLeft;\n      }\n\n      wrap.scrollTop = element.offsetTop;\n    }\n  };\n\n  TimelineYear.prototype.getScrollableElement = function () {\n    if (this.parent.isAdaptive && !this.isTimelineView()) {\n      return this.element.querySelector('.' + SCROLL_CONTAINER_CLASS);\n    } else {\n      return this.getContentAreaElement();\n    }\n  };\n\n  TimelineYear.prototype.wireEvents = function (element) {\n    EventHandler.add(element, 'mousedown', this.parent.workCellAction.cellMouseDown, this.parent.workCellAction);\n    EventHandler.add(element, 'click', this.parent.workCellAction.cellClick, this.parent.workCellAction);\n\n    if (!this.parent.isAdaptive) {\n      EventHandler.add(element, 'dblclick', this.parent.workCellAction.cellDblClick, this.parent.workCellAction);\n    }\n  };\n\n  return TimelineYear;\n}(Year);\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * ICalendar Export Module\n */\n\n\nvar ICalendarExport =\n/** @__PURE__ @class */\nfunction () {\n  function ICalendarExport(parent) {\n    this.parent = parent;\n  }\n\n  ICalendarExport.prototype.initializeCalendarExport = function (fileName, customData) {\n    var icsString = this.getCalendarString(fileName, customData);\n    this.download(icsString, fileName);\n  };\n\n  ICalendarExport.prototype.getCalendarString = function (fileName, customData) {\n    var _this = this;\n\n    var eventsData = customData ? customData : extend([], this.parent.eventsData, null, true);\n    eventsData = this.parent.eventBase.sortByTime(eventsData);\n    var SEPARATOR = navigator.appVersion.indexOf('Win') !== -1 ? '\\r\\n' : '\\n';\n    var iCalendarEvents = [];\n    var filterCollection = [];\n    var timeZone = this.parent.timezone || this.parent.tzModule.getLocalTimezoneName();\n    var fields = this.parent.eventFields;\n    eventsData.forEach(function (eventObj) {\n      var uId = eventObj[fields.id] || eventObj.Guid || _this.parent.eventBase.generateGuid();\n\n      var editedExDate = [];\n\n      if (eventObj[fields.recurrenceID]) {\n        var filter = _this.filterEvents(filterCollection, fields.id, eventObj[fields.recurrenceID]);\n\n        uId = filter.length > 0 ? filter[0].UID : uId;\n      }\n\n      if (!eventObj[fields.recurrenceID] && eventObj[fields.recurrenceRule] && eventObj[fields.recurrenceException]) {\n        var exDate = eventObj[fields.recurrenceException].split(',');\n\n        var editedObj = _this.filterEvents(eventsData, fields.recurrenceID, eventObj[fields.id]);\n\n        editedObj.forEach(function (edited) {\n          editedExDate.push(getRecurrenceStringFromDate(edited[fields.startTime]));\n        });\n        var exceptionDateList = exDate.filter(function (value) {\n          return editedExDate.indexOf(value) === -1;\n        });\n        eventObj[fields.recurrenceException] = exceptionDateList.length > 0 ? exceptionDateList.join(',') + ',' : '';\n      }\n\n      var startZone = eventObj[fields.startTimezone] || timeZone;\n      var endZone = eventObj[fields.endTimezone] || timeZone;\n      var readonly = eventObj[fields.isReadonly] ? eventObj[fields.isReadonly] : false;\n      var calendarEvent = ['BEGIN:VEVENT', 'LOCATION:' + (eventObj[fields.location] || ''), 'SUMMARY:' + (eventObj[fields.subject] || ''), 'UID:' + uId, 'DESCRIPTION:' + (eventObj[fields.description] || ''), 'ISREADONLY:' + readonly, 'END:VEVENT'];\n\n      if (eventObj[fields.isAllDay]) {\n        calendarEvent.splice(4, 0, 'DTEND;VALUE=DATE:' + _this.convertDateToString(eventObj[fields.endTime], true));\n        calendarEvent.splice(4, 0, 'DTSTART;VALUE=DATE:' + _this.convertDateToString(eventObj[fields.startTime], true));\n      } else if (!eventObj[fields.isAllDay] && !eventObj[fields.recurrenceRule]) {\n        calendarEvent.splice(4, 0, 'DTEND:' + _this.convertDateToString(eventObj[fields.endTime]));\n        calendarEvent.splice(4, 0, 'DTSTART:' + _this.convertDateToString(eventObj[fields.startTime]));\n      } else {\n        calendarEvent.splice(4, 0, 'DTEND;TZID=\"' + endZone + '\":' + _this.convertDateToString(eventObj[fields.endTime]));\n        calendarEvent.splice(4, 0, 'DTSTART;TZID=\"' + startZone + '\":' + _this.convertDateToString(eventObj[fields.startTime]));\n      }\n\n      if (eventObj[fields.recurrenceRule]) {\n        calendarEvent.splice(4, 0, 'RRULE:' + eventObj[fields.recurrenceRule]);\n      }\n\n      if (eventObj[fields.recurrenceException]) {\n        var exDate = eventObj[fields.recurrenceException].split(',');\n\n        for (var i = 0; i < exDate.length - 1; i++) {\n          calendarEvent.splice(5, 0, 'EXDATE:' + _this.convertDateToString(getDateFromRecurrenceDateString(exDate[parseInt(i.toString(), 10)]), eventObj[fields.isAllDay]));\n        }\n      }\n\n      if (eventObj[fields.recurrenceID]) {\n        calendarEvent.splice(4, 0, 'RECURRENCE-ID;TZID=\"' + startZone + '\":' + _this.convertDateToString(eventObj[fields.startTime], eventObj[fields.isAllDay]));\n      }\n\n      var customFields = _this.customFieldFilter(eventObj, fields);\n\n      if (customFields.length > 0) {\n        customFields.forEach(function (customField) {\n          return calendarEvent.splice(4, 0, customField + ':' + (eventObj[\"\" + customField] || ''));\n        });\n      }\n\n      var app = extend({}, eventObj);\n      app.UID = uId;\n      filterCollection.push(app);\n      iCalendarEvents.push(calendarEvent.join(SEPARATOR));\n    });\n    var iCalendar = ['BEGIN:VCALENDAR', 'PRODID:-//Syncfusion Inc//Scheduler//EN', 'VERSION:2.0', 'CALSCALE:GREGORIAN', 'METHOD:PUBLISH', 'X-WR-CALNAME:' + (fileName || 'Calendar'), 'X-WR-TIMEZONE:' + timeZone].join(SEPARATOR);\n    var icsString = iCalendar + SEPARATOR + iCalendarEvents.join(SEPARATOR) + SEPARATOR + 'END:VCALENDAR';\n    return icsString;\n  };\n\n  ICalendarExport.prototype.customFieldFilter = function (eventObj, fields) {\n    var defaultFields = Object.keys(fields).map(function (key) {\n      return fields[\"\" + key];\n    });\n    var eventFields = Object.keys(eventObj);\n    return eventFields.filter(function (value) {\n      return defaultFields.indexOf(value) === -1 && value !== 'Guid';\n    });\n  };\n\n  ICalendarExport.prototype.convertDateToString = function (eventDate, allDay) {\n    var year = ('0000' + eventDate.getFullYear().toString()).slice(-4);\n    var month = ('00' + (eventDate.getMonth() + 1).toString()).slice(-2);\n    var date = ('00' + eventDate.getDate().toString()).slice(-2);\n    var hours = ('00' + eventDate.getHours().toString()).slice(-2);\n    var minutes = ('00' + eventDate.getMinutes().toString()).slice(-2);\n    var seconds = ('00' + eventDate.getSeconds().toString()).slice(-2);\n    var timeString = allDay ? year + month + date : year + month + date + 'T' + hours + minutes + seconds;\n    return timeString;\n  };\n\n  ICalendarExport.prototype.download = function (icsString, fileName) {\n    var buffer = new Blob([icsString], {\n      type: 'data:text/calendar;charset=utf8'\n    });\n    fileName = (fileName || 'Calendar') + '.ics';\n\n    if (navigator.msSaveBlob) {\n      navigator.msSaveBlob(buffer, fileName);\n    } else {\n      var downloadLink_1 = document.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n      downloadLink_1.download = fileName;\n      downloadLink_1.href = URL.createObjectURL(buffer);\n      var event_1 = document.createEvent('MouseEvent');\n      event_1.initEvent('click', true, true);\n      downloadLink_1.dispatchEvent(event_1);\n      setTimeout(function () {\n        URL.revokeObjectURL(downloadLink_1.href);\n        downloadLink_1.href = undefined;\n      });\n    }\n  };\n\n  ICalendarExport.prototype.filterEvents = function (data, field, value) {\n    return data.filter(function (e) {\n      return e[\"\" + field] === value;\n    });\n  };\n\n  ICalendarExport.prototype.getModuleName = function () {\n    return 'iCalendarExport';\n  };\n\n  ICalendarExport.prototype.destroy = function () {\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent = null;\n  };\n\n  return ICalendarExport;\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * ICalendar Import Module\n */\n\n\nvar ICalendarImport =\n/** @__PURE__ @class */\nfunction () {\n  function ICalendarImport(parent) {\n    this.allDay = false;\n    this.parent = parent;\n  }\n\n  ICalendarImport.prototype.initializeCalendarImport = function (fileContent) {\n    var _this = this;\n\n    if (fileContent && fileContent instanceof Blob) {\n      var fileReader_1 = new FileReader();\n\n      fileReader_1.onload = function () {\n        var iCalString = fileReader_1.result;\n\n        _this.iCalendarParser(iCalString);\n      };\n\n      fileReader_1.readAsText(fileContent, 'UTF-8');\n    } else if (fileContent && typeof fileContent === 'string') {\n      this.iCalendarParser(fileContent);\n    }\n  };\n\n  ICalendarImport.prototype.iCalendarParser = function (iCalString) {\n    var _this = this;\n\n    var fields = this.parent.eventFields;\n    var events = [];\n    var uId = 'UID';\n    var calArray = iCalString.replace(new RegExp('\\\\r', 'g'), '').split('\\n');\n    var isEvent = false;\n    var curEvent; // eslint-disable-next-line prefer-const\n\n    var id = this.parent.eventBase.getEventMaxID();\n    var count = 0;\n    calArray.forEach(function (element) {\n      var index;\n      var type;\n      var value;\n\n      if (!isEvent && element === 'BEGIN:VEVENT') {\n        isEvent = true;\n        curEvent = {};\n      }\n\n      if (isEvent && element === 'END:VEVENT') {\n        isEvent = false;\n        events.push(curEvent);\n        curEvent = null;\n      }\n\n      if (isEvent) {\n        index = element.indexOf(':');\n        type = element.substr(0, index).replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n        value = element.substr(index + 1, element.length - (index + 1)).replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n\n        if (element.indexOf('SUMMARY') !== -1) {\n          type = 'SUMMARY';\n        }\n\n        if (element.indexOf('DTSTART') !== -1) {\n          curEvent[fields.startTime] = _this.dateParsing(element);\n          curEvent[fields.isAllDay] = _this.allDay;\n          _this.allDay = false;\n        } else if (element.indexOf('DTEND') !== -1) {\n          curEvent[fields.endTime] = _this.dateParsing(element);\n        } else if (element.indexOf('EXDATE') !== -1) {\n          value = getRecurrenceStringFromDate(_this.dateParsing(element));\n          curEvent[fields.recurrenceException] = isNullOrUndefined(curEvent[fields.recurrenceException]) ? value : curEvent[fields.recurrenceException] + ',' + value;\n        } else if (element.indexOf('RECURRENCE-ID') !== -1) {\n          value = getRecurrenceStringFromDate(_this.dateParsing(element));\n          curEvent[fields.recurrenceException] = value;\n          curEvent[fields.recurrenceID] = value;\n        } else {\n          switch (type) {\n            case 'BEGIN':\n              break;\n\n            case 'UID':\n              curEvent[\"\" + uId] = value;\n\n              if (typeof id == 'number') {\n                curEvent[fields.id] = parseInt(value, 10);\n\n                if (isNaN(curEvent[fields.id])) {\n                  curEvent[fields.id] = id + count;\n                  count++;\n                }\n              } else {\n                curEvent[fields.id] = value;\n              }\n\n              break;\n\n            case 'SUMMARY':\n              curEvent[fields.subject] = value;\n              break;\n\n            case 'LOCATION':\n              curEvent[fields.location] = value;\n              break;\n\n            case 'DESCRIPTION':\n              curEvent[fields.description] = value;\n              break;\n\n            case 'ISREADONLY':\n              curEvent[fields.isReadonly] = value.indexOf('true') > -1;\n              break;\n\n            case 'RRULE':\n              curEvent[fields.recurrenceRule] = value;\n              break;\n\n            default:\n              if (_this.parent.resourceCollection.length > 0) {\n                var resData = _this.parent.resourceCollection.filter(function (data) {\n                  return data.field === type;\n                });\n\n                curEvent[\"\" + type] = resData.length > 0 && typeof resData[0].dataSource[0][resData[0].idField] == 'number' ? parseInt(value, 10) : value;\n              } else {\n                curEvent[\"\" + type] = value;\n              }\n\n          }\n        }\n      }\n    });\n    var app = extend([], events, null, true);\n    this.parent.addEvent(this.processOccurrence(app, id));\n  };\n\n  ICalendarImport.prototype.processOccurrence = function (app, maxId) {\n    var _this = this;\n\n    var appoint = [];\n    var uId = 'UID';\n    var fields = this.parent.eventFields;\n    var appointmentIds = [];\n    this.parent.eventsData.forEach(function (eventObj) {\n      appointmentIds.push(eventObj[fields.id]);\n    });\n    app.forEach(function (eventObj) {\n      var parentObj;\n      var id; // eslint-disable-next-line no-prototype-builtins\n\n      if (!eventObj.hasOwnProperty(fields.recurrenceID)) {\n        parentObj = eventObj;\n        id = eventObj[fields.id];\n      }\n\n      if (appointmentIds.indexOf(eventObj[fields.id]) < 0) {\n        var data = app.filter(function (data) {\n          return data.UID === eventObj[\"\" + uId];\n        });\n\n        if (data.length > 1 && isNullOrUndefined(eventObj[fields.recurrenceID])) {\n          id = typeof maxId === 'number' ? maxId++ : id;\n\n          for (var i = 0; i < data.length; i++) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (data[parseInt(i.toString(), 10)].hasOwnProperty(fields.recurrenceID)) {\n              var exdate = data[parseInt(i.toString(), 10)][fields.recurrenceID];\n              data[parseInt(i.toString(), 10)][fields.id] = typeof maxId === 'number' ? maxId++ : _this.parent.eventBase.generateGuid();\n              data[parseInt(i.toString(), 10)][fields.recurrenceID] = id;\n              data[parseInt(i.toString(), 10)][fields.recurrenceException] = null;\n              parentObj[fields.recurrenceException] = _this.getExcludeDateString(parentObj[fields.recurrenceException], exdate);\n              delete data[parseInt(i.toString(), 10)][\"\" + uId];\n              appoint.push(data[parseInt(i.toString(), 10)]);\n            }\n          }\n\n          delete parentObj[\"\" + uId];\n          parentObj[fields.id] = id;\n          appoint.push(parentObj); // eslint-disable-next-line no-prototype-builtins\n        } else if (!eventObj.hasOwnProperty(fields.recurrenceID)) {\n          delete eventObj[\"\" + uId];\n          eventObj[fields.id] = typeof maxId === 'number' ? maxId++ : id;\n          appoint.push(eventObj);\n        }\n      }\n    });\n    return appoint;\n  };\n\n  ICalendarImport.prototype.getExcludeDateString = function (parentException, occurrenceException) {\n    if (isNullOrUndefined(parentException)) {\n      return occurrenceException;\n    } else if (isNullOrUndefined(occurrenceException)) {\n      return parentException;\n    }\n\n    var parentExDate = parentException.split(',').map(function (x) {\n      return x.split('T')[0];\n    });\n    var childExDate = occurrenceException.split(',').map(function (x) {\n      return x.split('T')[0];\n    });\n    var exDate = parentExDate.filter(function (x) {\n      return childExDate.indexOf(x) > -1;\n    });\n\n    if (exDate.length > 0) {\n      return parentException;\n    }\n\n    return parentException + ',' + occurrenceException;\n  };\n\n  ICalendarImport.prototype.getDateString = function (value) {\n    value = value || ''; // eslint-disable-next-line no-useless-escape\n\n    return value.replace(/\\\\\\,/g, ',').replace(/\\\\\\;/g, ';').replace(/\\\\[nN]/g, '\\n').replace(/\\\\\\\\/g, '\\\\');\n  };\n\n  ICalendarImport.prototype.dateParsing = function (element) {\n    var split = element.split(':');\n    var value = split[split.length - 1];\n    var newDate = new Date(this.getDateString(value));\n\n    if (element && (element.indexOf('VALUE=DATE') > -1 || element.indexOf('RECURRENCE-ID;TZID') > -1)) {\n      var data_1 = /^(\\d{4})(\\d{2})(\\d{2})$/.exec(value);\n\n      if (data_1 !== null) {\n        newDate = new Date(parseInt(data_1[1], 10), parseInt(data_1[2], 10) - 1, parseInt(data_1[3], 10));\n      }\n\n      if (element.indexOf('DTSTART') > -1) {\n        this.allDay = true;\n      }\n    }\n\n    var data = /^(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2})(Z)?$/.exec(value);\n\n    if (data !== null) {\n      if (data[7] === 'Z') {\n        newDate = new Date(Date.UTC(parseInt(data[1], 10), parseInt(data[2], 10) - 1, parseInt(data[3], 10), parseInt(data[4], 10), parseInt(data[5], 10), parseInt(data[6], 10)));\n      } else {\n        newDate = new Date(parseInt(data[1], 10), parseInt(data[2], 10) - 1, parseInt(data[3], 10), parseInt(data[4], 10), parseInt(data[5], 10), parseInt(data[6], 10));\n      }\n    }\n\n    return newDate;\n  };\n\n  ICalendarImport.prototype.getModuleName = function () {\n    return 'iCalendarImport';\n  };\n\n  ICalendarImport.prototype.destroy = function () {\n    if (!this.parent || this.parent && this.parent.isDestroyed) {\n      return;\n    }\n  };\n\n  return ICalendarImport;\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Excel Export Module\n */\n\n\nvar ExcelExport =\n/** @__PURE__ @class */\nfunction () {\n  function ExcelExport(parent) {\n    this.parent = parent;\n  }\n\n  ExcelExport.prototype.initializeExcelExport = function (excelExportOptions) {\n    if (excelExportOptions === void 0) {\n      excelExportOptions = {};\n    }\n\n    var exportColumns = this.getExportColumns(excelExportOptions);\n    var exportName = excelExportOptions.fileName || 'Schedule';\n    var exportType = excelExportOptions.exportType || 'xlsx';\n    var isIncludeOccurrences = excelExportOptions.includeOccurrences || false;\n    var separator;\n\n    if (!isNullOrUndefined(excelExportOptions.separator) && excelExportOptions.separator !== ',') {\n      separator = excelExportOptions.separator;\n    }\n\n    var eventCollection;\n\n    if (excelExportOptions.customData) {\n      eventCollection = !isIncludeOccurrences ? excelExportOptions.customData : this.parent.eventBase.getProcessedEvents(excelExportOptions.customData);\n    } else {\n      eventCollection = !isIncludeOccurrences ? this.parent.eventsData : this.parent.eventsProcessed;\n    }\n\n    this.processWorkbook(exportColumns, exportName, exportType, eventCollection, separator);\n  };\n\n  ExcelExport.prototype.processWorkbook = function (fields, name, type, eventCollection, separator) {\n    var _this = this;\n\n    var columns = [];\n    var rows = [];\n    var columnHeader = [];\n    fields.forEach(function (field, i) {\n      columns.push({\n        index: i + 1,\n        width: field.name === 'Id' ? 50 : 150\n      });\n    });\n    var style = {\n      fontSize: 12,\n      borders: {\n        color: '#E0E0E0'\n      },\n      bold: true\n    };\n    fields.forEach(function (field, i) {\n      columnHeader.push({\n        index: i + 1,\n        value: field.text,\n        style: style\n      });\n    });\n    rows.push({\n      index: 1,\n      cells: columnHeader\n    });\n    eventCollection.forEach(function (event, i) {\n      var columnData = [];\n      fields.forEach(function (field, n) {\n        var columnRule = {\n          index: n + 1,\n          value: event[field.name] || ''\n        };\n\n        if (field.name === _this.parent.eventFields.startTime || field.name === _this.parent.eventFields.endTime) {\n          var styleRule = {\n            fontSize: 12,\n            numberFormat: 'm/d/yyyy h:mm AM/PM'\n          };\n          columnRule = extend({}, columnRule, {\n            style: styleRule\n          }, true);\n        }\n\n        columnData.push(columnRule);\n      });\n      rows.push({\n        index: i + 2,\n        cells: columnData\n      });\n    });\n    var workSheet = [{\n      columns: columns,\n      rows: rows\n    }];\n    var book = new Workbook({\n      worksheets: workSheet\n    }, type, this.parent.locale, undefined, separator);\n    book.save(name + '.' + type);\n  };\n\n  ExcelExport.prototype.getExportColumns = function (exportOptions) {\n    var _this = this;\n\n    var exportColumns = exportOptions.fieldsInfo || [];\n\n    if (exportColumns.length === 0) {\n      var fields = exportOptions.fields || Object.keys(this.parent.eventFields).map(function (field) {\n        return _this.parent.eventFields[\"\" + field];\n      });\n      fields.forEach(function (field) {\n        exportColumns.push({\n          name: field,\n          text: field\n        });\n      });\n    }\n\n    return exportColumns;\n  };\n\n  ExcelExport.prototype.getModuleName = function () {\n    return 'excelExport';\n  };\n\n  ExcelExport.prototype.destroy = function () {\n    this.parent = null;\n  };\n\n  return ExcelExport;\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Print Module\n */\n\n\nvar Print =\n/** @__PURE__ @class */\nfunction () {\n  function Print(parent) {\n    this.parent = parent;\n  }\n\n  Print.prototype.print = function (printOptions) {\n    if (isNullOrUndefined(printOptions)) {\n      this.printScheduler();\n    } else {\n      this.printSchedulerWithModel(printOptions);\n    }\n  };\n\n  Print.prototype.printScheduler = function () {\n    var clone = this.parent.element.cloneNode(true);\n    clone.id = this.parent.element.id + '_print';\n    document.body.appendChild(clone);\n    var className = this.parent.currentView === 'MonthAgenda' ? '.e-appointment-wrap' : '.e-content-wrap';\n    var scrollableEle = this.parent.element.querySelector(className);\n    var links = [].slice.call(document.getElementsByTagName('head')[0].querySelectorAll('link, style'));\n    var reference = '';\n\n    for (var _i = 0, links_1 = links; _i < links_1.length; _i++) {\n      var link = links_1[_i];\n      reference += link.outerHTML;\n    }\n\n    var div = createElement('div');\n    clone.style.width = this.parent.element.offsetWidth + 'px';\n    var elementWidth = Math.round(parseInt(clone.style.width, 10) / 100) * 100;\n    div.appendChild(clone);\n    var printWindow = window.open('', 'print', 'height=550,width=' + elementWidth + ',tabbar=no');\n    printWindow.document.write('<!DOCTYPE html><html><head>' + reference + '</head><body>' + div.innerHTML + '<script>(function() { window.ready = true; })();</script></body></html>');\n    printWindow.document.close();\n    printWindow.focus();\n    setTimeout(function () {\n      if (printWindow.ready && scrollableEle) {\n        // eslint-disable-next-line no-self-assign\n        scrollableEle.scrollLeft = scrollableEle.scrollLeft; // eslint-disable-next-line no-self-assign\n\n        scrollableEle.scrollTop = scrollableEle.scrollTop;\n        var headerTimeCellsScroll = printWindow.document.querySelector('.e-date-header-wrap');\n\n        if (headerTimeCellsScroll) {\n          headerTimeCellsScroll.scrollLeft = scrollableEle.scrollLeft;\n        }\n\n        var timeCellsScroll = printWindow.document.querySelector('.e-time-cells-wrap');\n\n        if (timeCellsScroll) {\n          timeCellsScroll.scrollTop = scrollableEle.scrollTop;\n        }\n\n        printWindow.print();\n        printWindow.close();\n      }\n    }, 500);\n  };\n\n  Print.prototype.printSchedulerWithModel = function (printOptions) {\n    var element = createElement('div', {\n      id: this.parent.element.id + '_print',\n      className: 'e-print-schedule'\n    });\n    document.body.appendChild(element);\n    Schedule.Inject(Day, Week, WorkWeek, Month, Agenda, MonthAgenda, TimelineViews, TimelineMonth, Year, TimelineYear);\n    this.printInstance = new Schedule(this.getPrintScheduleModel(printOptions));\n    this.printInstance.isPrinting = true;\n    this.printInstance.appendTo(element);\n    this.printInstance.on(print$1, this.contentReady, this);\n    this.printWindow = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');\n    this.printWindow.moveTo(0, 0);\n    this.printWindow.resizeTo(screen.availWidth, screen.availHeight);\n  };\n\n  Print.prototype.getPrintScheduleModel = function (printOptions) {\n    var printModel = {};\n    var scheduleProps = ['agendaDaysCount', 'calendarMode', 'cssClass', 'currentView', 'dateFormat', 'enableRtl', 'endHour', 'eventSettings', 'firstDayOfWeek', 'firstMonthOfYear', 'group', 'height', 'locale', 'maxDate', 'minDate', 'readonly', 'resources', 'rowAutoHeight', 'selectedDate', 'showHeaderBar', 'showTimeIndicator', 'showWeekNumber', 'showWeekend', 'startHour', 'timeFormat', 'timeScale', 'timezone', 'views', 'width', 'workDays', 'workHours', 'dateHeaderTemplate', 'dateRangeTemplate', 'cellHeaderTemplate', 'dayHeaderTemplate', 'monthHeaderTemplate', 'cellTemplate', 'resourceHeaderTemplate', 'headerIndentTemplate', 'actionBegin', 'actionComplete', 'actionFailure', 'created', 'dataBinding', 'dataBound', 'destroyed', 'eventRendered', 'moreEventsClick', 'navigating', 'popupOpen', 'popupClose', 'renderCell'];\n    var scheduleTemplates = ['cellHeaderTemplate', 'dayHeaderTemplate', 'monthHeaderTemplate', 'cellTemplate', 'dateHeaderTemplate', 'dateRangeTemplate', 'eventTemplate', 'resourceHeaderTemplate', 'headerIndentTemplate'];\n    var scheduleEvents = ['actionBegin', 'actionComplete', 'actionFailure', 'created', 'dataBinding', 'dataBound', 'destroyed', 'eventRendered', 'moreEventsClick', 'navigating', 'popupOpen', 'popupClose', 'renderCell'];\n    var eventSettings;\n    var group;\n    var timeScale;\n    var views;\n\n    for (var _i = 0, scheduleProps_1 = scheduleProps; _i < scheduleProps_1.length; _i++) {\n      var key = scheduleProps_1[_i];\n\n      switch (key) {\n        case 'eventSettings':\n          {\n            eventSettings = Object.assign({}, this.parent.eventSettings.properties);\n            eventSettings.dataSource = this.parent.eventsData;\n            var eventTemplate = !isNullOrUndefined(printOptions.eventSettings) && !isNullOrUndefined(printOptions.eventSettings.template) ? printOptions.eventSettings.template : eventSettings.template;\n            eventSettings.template = typeof eventTemplate === 'function' ? null : eventTemplate;\n            printModel.eventSettings = eventSettings;\n            break;\n          }\n\n        case 'group':\n          group = isNullOrUndefined(printOptions.group) ? this.parent.group : printOptions.group;\n          group.headerTooltipTemplate = null;\n          printModel.group = group;\n          break;\n\n        case 'timeScale':\n          timeScale = isNullOrUndefined(printOptions.timeScale) ? this.parent.timeScale : printOptions.timeScale;\n          timeScale.majorSlotTemplate = typeof timeScale.majorSlotTemplate === 'function' ? null : timeScale.majorSlotTemplate;\n          timeScale.minorSlotTemplate = typeof timeScale.minorSlotTemplate === 'function' ? null : timeScale.minorSlotTemplate;\n          printOptions.timeScale = timeScale;\n          break;\n\n        case 'views':\n          views = isNullOrUndefined(printOptions.views) ? this.parent.views : printOptions.views;\n\n          if (views && views.length > 0 && typeof views[0] === 'object') {\n            var _loop_1 = function (view) {\n              scheduleTemplates.forEach(function (x) {\n                if (!isNullOrUndefined(view[\"\" + x])) {\n                  view[\"\" + x] = typeof view[\"\" + x] === 'function' ? null : view[\"\" + x];\n                }\n              });\n            };\n\n            for (var _a = 0, views_1 = views; _a < views_1.length; _a++) {\n              var view = views_1[_a];\n\n              _loop_1(view);\n            }\n          }\n\n          printModel.views = views;\n          break;\n\n        default:\n          if (scheduleTemplates.indexOf(key) > -1) {\n            printModel[\"\" + key] = isNullOrUndefined(printOptions[\"\" + key]) ? typeof this.parent[\"\" + key] === 'function' ? null : this.parent[\"\" + key] : typeof printOptions[\"\" + key] === 'function' ? null : printOptions[\"\" + key];\n            break;\n          }\n\n          if (scheduleEvents.indexOf(key) > -1) {\n            printModel[\"\" + key] = printOptions[\"\" + key];\n            break;\n          }\n\n          printModel[\"\" + key] = isNullOrUndefined(printOptions[\"\" + key]) ? this.parent[\"\" + key] : printOptions[\"\" + key];\n          break;\n      }\n    }\n\n    return printModel;\n  };\n\n  Print.prototype.contentReady = function () {\n    var _this = this;\n\n    this.printWindow = print(this.printInstance.element, this.printWindow);\n\n    this.printWindow.onbeforeunload = function () {\n      _this.printInstance.off(print$1, _this.contentReady);\n\n      _this.printInstance.element.remove();\n\n      _this.printInstance.destroy();\n\n      _this.printInstance = null;\n      _this.printWindow = null;\n    };\n  };\n\n  Print.prototype.getModuleName = function () {\n    return 'print';\n  };\n\n  Print.prototype.destroy = function () {\n    this.parent = null;\n  };\n\n  return Print;\n}();\n/**\n * Exporting modules\n */\n\n/**\n * Schedule component exported items\n */\n\n/**\n * Recurrence-Editor component exported items\n */\n\n/**\n * Calendar util exported items\n */\n\n/**\n * Export Schedule components\n */\n\n\nexport { Schedule, cellClick, cellDoubleClick, moreEventsClick, select, hover, actionBegin, actionComplete, actionFailure, navigating, renderCell, eventClick, eventRendered, dataBinding, dataBound, popupOpen, popupClose, dragStart, drag, dragStop, resizeStart, resizing, resizeStop, inlineClick, cellSelect, initialLoad, initialEnd, print$1 as print, dataReady, eventsLoaded, contentReady, scroll, virtualScroll, scrollUiUpdate, uiUpdate, documentClick, cellMouseDown, WEEK_LENGTH, DEFAULT_WEEKS, MS_PER_DAY, MS_PER_MINUTE, getElementHeightFromClass, getElementWidthFromClass, getTranslateY, getTranslateX, getWeekFirstDate, getWeekLastDate, firstDateOfMonth, lastDateOfMonth, getWeekNumber, getWeekMiddleDate, setTime, resetTime, getDateInMs, getDateCount, addDays, addMonths, addYears, getStartEndHours, getMaxDays, getDaysCount, getDateFromString, getScrollBarWidth, findIndexInData, getOuterHeight, removeChildren, isDaylightSavingTime, getUniversalTime, isMobile, isIPadDevice, capitalizeFirstWord, Resize, DragAndDrop, HeaderRenderer, ViewBase, Day, Week, WorkWeek, Month, Year, Agenda, MonthAgenda, TimelineViews, TimelineMonth, TimelineYear, Timezone, timezoneData, ICalendarExport, ICalendarImport, ExcelExport, Print, RecurrenceEditor, generateSummary, generate, getDateFromRecurrenceDateString, extractObjectFromRule, getCalendarUtil, getRecurrenceStringFromDate, Gregorian, Islamic }; //# sourceMappingURL=ej2-schedule.es5.js.map","map":null,"metadata":{},"sourceType":"module"}