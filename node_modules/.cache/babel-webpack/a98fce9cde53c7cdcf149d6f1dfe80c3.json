{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ArticleService = /*#__PURE__*/(() => {\n  class ArticleService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.baseURL = \"http://localhost:8080/articles\";\n    }\n\n    getArticleList() {\n      return this.httpClient.get(`${this.baseURL}`).pipe(tap(articles => {\n        articles.forEach(article => {\n          article.imageUrl = `${this.baseURL}/${article.id}/picture`;\n        });\n      }));\n    }\n\n    createArticle(article, file) {\n      const formData = new FormData();\n      formData.append('title', article.title);\n      formData.append('content', article.content);\n      formData.append('tags', article.tags);\n      formData.append('imageFile', file, file.name);\n      return this.httpClient.post(`${this.baseURL}/addArticle`, formData);\n    }\n\n    getArticleById(id) {\n      const articleUrl = `${this.baseURL}/${id}`;\n      return this.httpClient.get(articleUrl).pipe(tap(article => {\n        article.imageUrl = `${this.baseURL}/${id}/picture`;\n      }));\n    }\n\n    updateArticle(id, article, file) {\n      const formData = new FormData();\n      formData.append('title', article.title);\n      formData.append('content', article.content);\n      formData.append('tags', article.tags);\n\n      if (file) {\n        formData.append('media', file, file.name);\n      }\n\n      return this.httpClient.put(`${this.baseURL + \"/updateArticle\"}/${id}`, formData);\n    }\n\n    deleteArticle(id) {\n      return this.httpClient.delete(`${this.baseURL + \"/deleteArticle/\"}${id}`);\n    }\n\n    getArticleCount() {\n      return this.httpClient.get(`${this.baseURL + \"/count\"}`);\n    }\n\n    getCommentsForArticle(id) {\n      return this.httpClient.get(`${this.baseURL}/${id}/comments`);\n    }\n\n    incrementLikes(id) {\n      const url = `${this.baseURL}/${id}/likes`;\n      return this.httpClient.post(url, {});\n    }\n\n    addComment(articleId, commentContent) {\n      const comment = {\n        content: commentContent,\n        articleId: articleId\n      };\n      return this.httpClient.post(`${this.baseURL}/${articleId}/addComment`, comment);\n    }\n\n  }\n\n  ArticleService.ɵfac = function ArticleService_Factory(t) {\n    return new (t || ArticleService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ArticleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ArticleService,\n    factory: ArticleService.ɵfac,\n    providedIn: 'root'\n  });\n  return ArticleService;\n})();","map":null,"metadata":{},"sourceType":"module"}