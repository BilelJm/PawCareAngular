{"ast":null,"code":"import { DayService, WeekService, WorkWeekService, MonthService, AgendaService } from '@syncfusion/ej2-angular-schedule';\nimport { DropDownList } from '@syncfusion/ej2-angular-dropdowns';\nimport { DateTimePicker } from '@syncfusion/ej2-calendars';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./appointment.service\";\nimport * as i2 from \"src/app/views/admin/apt/back/pet/pet.service\";\nimport * as i3 from \"src/app/views/auth/_services/storage.service\";\nimport * as i4 from \"../../../../components/navbars/index-navbar/index-navbar.component\";\nimport * as i5 from \"@syncfusion/ej2-angular-schedule\";\nimport * as i6 from \"../../../../components/footers/footer/footer.component\";\nconst _c0 = [\"scheduleObj\"];\nexport let CalendrierComponent = /*#__PURE__*/(() => {\n  class CalendrierComponent {\n    constructor(appointmentService, petService, storageService) {\n      this.appointmentService = appointmentService;\n      this.petService = petService;\n      this.storageService = storageService;\n      this.data = [];\n      this.pets = [];\n      this.availableDoctors = [];\n      this.doctorDropdown = new DropDownList();\n      this.selectedDate = new Date();\n      this.eventSettings = {\n        dataSource: this.data,\n        fields: {\n          subject: {\n            title: 'Reason'\n          },\n          location: {\n            title: 'Location'\n          },\n          description: {\n            title: 'Notes'\n          },\n          isAllDay: {\n            title: 'Pet'\n          },\n          recurrenceID: {\n            title: 'Doctor'\n          }\n        }\n      };\n      this.editorTemplate = '<div class=\"e-schedule-dialog-template\" style=\"width: 100%\">' + '<table class=\"e-schedule-form-table\" style=\"width: 100%; table-layout: fixed;\">' + '<tbody>' + '<tr><td class=\"e-textlabel\">Reason</td>' + '<td colspan=\"4\"><input id=\"reason\" /></td></tr>' + '<tr><td class=\"e-textlabel\">Location</td>' + '<td colspan=\"4\"><input id=\"location\"/></td></tr>' + '<tr><td class=\"e-textlabel\">Start Time</td>' + '<td colspan=\"4\"><input id=\"startTime\" name=\"StartTime\" /></td></tr>' + '<tr><td class=\"e-textlabel\">End Time</td>' + '<td colspan=\"4\"><input id=\"endTime\" name=\"EndTime\" /></td></tr>' + '<tr><td class=\"e-textlabel\">Notes</td>' + '<td colspan=\"4\"><textarea id=\"notes\" name=\"description\" rows=\"5\" cols=\"45\" placeholder=\"Enter notes...\"></textarea></td></tr>' + '<tr><td class=\"e-textlabel\">Pet</td>' + '<td colspan=\"4\"><input id=\"pet\" /></td></tr>' + '<tr><td class=\"e-textlabel\">Doctor</td>' + '<td colspan=\"4\"><input id=\"doctor\" /></td></tr>' + '</tbody></table></div>';\n      this.idUser = this.storageService.getUser();\n    }\n\n    ngOnInit() {\n      this.fetchAppointments();\n      this.fetchPets();\n    }\n\n    fetchAppointments() {\n      this.appointmentService.getAptByUserid().subscribe(appointments => {\n        this.data = appointments.map(appointment => {\n          return {\n            Id: appointment.idAppointment,\n            Subject: appointment.reason,\n            StartTime: new Date(appointment.startDate),\n            EndTime: new Date(appointment.endDate),\n            Location: appointment.location,\n            Description: appointment.notes\n          };\n        });\n        this.eventSettings = Object.assign(Object.assign({}, this.eventSettings), {\n          dataSource: this.data\n        });\n      }, error => {\n        console.error('Error fetching appointments:', error);\n        console.log(this.idUser);\n      });\n    }\n\n    fetchPets() {\n      this.petService.getPetsList().subscribe(pets => {\n        this.pets = pets;\n      }, error => {\n        console.error('Error fetching pets:', error);\n      });\n    }\n\n    onPopupOpen(args) {\n      var _a;\n\n      if (args.type === 'Editor') {\n        // Initialize Reason DropDownList\n        const reasonInput = args.element.querySelector('#reason');\n        const locationInput = args.element.querySelector('#location');\n        const petInput = args.element.querySelector('#pet');\n        this.reasonDropdown = new DropDownList({\n          dataSource: ['RoutineCheckup', 'Vaccination', 'Surgery', 'Adoption', 'Training', 'Hotel_Reservation'],\n          value: args.data ? args.data['Subject'] : 'RoutineCheckup',\n          placeholder: 'Choose an option' // Set the placeholder text\n\n        });\n        this.reasonDropdown.appendTo(reasonInput);\n        this.locationDropdown = new DropDownList({\n          dataSource: ['Locally', 'VeterinaryOffice'],\n          value: args.data ? args.data['Location'] : 'Locally',\n          placeholder: 'Choose an option' // Set the placeholder text\n\n        });\n        this.locationDropdown.appendTo(locationInput);\n        const petOptions = this.pets.map(pet => ({\n          text: pet.name,\n          value: pet.idPet\n        }));\n        this.petDropdown = new DropDownList({\n          dataSource: petOptions,\n          fields: {\n            text: 'text',\n            value: 'value'\n          },\n          value: args.data && args.data['IsAllDay'] ? args.data['IsAllDay'] : (_a = this.pets[0]) === null || _a === void 0 ? void 0 : _a.idPet\n        });\n        this.petDropdown.appendTo(petInput); // Initialize Start Time DateTimePicker\n\n        const startTimeInput = args.element.querySelector('#startTime');\n        this.startTimePicker = new DateTimePicker({\n          value: args.data ? new Date(args.data['StartTime']) : new Date(),\n          format: \"yyyy-MM-dd'T'HH:mm\",\n          step: 30\n        });\n        this.startTimePicker.appendTo(startTimeInput); // Initialize End Time DateTimePicker\n\n        const endTimeInput = args.element.querySelector('#endTime');\n        this.endTimePicker = new DateTimePicker({\n          value: args.data ? new Date(args.data['EndTime']) : new Date(),\n          format: \"yyyy-MM-dd'T'HH:mm\",\n          step: 30\n        });\n        this.endTimePicker.appendTo(endTimeInput);\n        this.notesInput = args.element.querySelector('#notes');\n\n        if (this.notesInput) {\n          this.notesInput.value = args.data && args.data['Description'] ? args.data['Description'] : '';\n        }\n\n        const doctorInput = args.element.querySelector('#doctor');\n\n        if (doctorInput) {\n          const startDate = new Date(this.startTimePicker.value);\n          const startDateUtc = new Date(startDate.getTime() - startDate.getTimezoneOffset() * 60000);\n          const startDateString = startDateUtc.toISOString().slice(0, 16);\n          const endDate = new Date(this.endTimePicker.value);\n          const endDateUtc = new Date(endDate.getTime() - endDate.getTimezoneOffset() * 60000);\n          const endDateString = endDateUtc.toISOString().slice(0, 16);\n          this.appointmentService.getDoctors(startDateString, endDateString).subscribe(doctors => {\n            var _a, _b;\n\n            this.availableDoctors = doctors;\n            this.doctorDropdown = new DropDownList({\n              dataSource: this.availableDoctors,\n              fields: {\n                text: 'username',\n                value: 'id'\n              },\n              placeholder: 'Select a doctor'\n            });\n            this.doctorDropdown.appendTo(doctorInput);\n            (_a = this.startTimePicker) === null || _a === void 0 ? void 0 : _a.addEventListener('change', () => this.updateDoctorDropdown());\n            (_b = this.endTimePicker) === null || _b === void 0 ? void 0 : _b.addEventListener('change', () => this.updateDoctorDropdown());\n          });\n\n          if (args.data) {\n            {\n              const appointmentId = args.data['Id'];\n              this.appointmentService.getDoctorByAppointmentId(appointmentId).subscribe(doctor => {\n                // Add the new doctor to the availableDoctors array\n                this.availableDoctors.push(doctor); // Re-assign the availableDoctors array to the doctorDropdown control\n\n                this.doctorDropdown.dataSource = this.availableDoctors; // Set the selected value of the doctor dropdown to the doctor ID\n\n                this.doctorDropdown.value = doctor.id;\n              });\n            }\n          }\n        }\n      }\n    }\n\n    updateDoctorDropdown() {\n      //const doctorInput = document.querySelector('#doctor') as HTMLElement;\n      const startDate = new Date(this.startTimePicker.value);\n      const startDateUtc = new Date(startDate.getTime() - startDate.getTimezoneOffset() * 60000);\n      const startDateString = startDateUtc.toISOString().slice(0, 16);\n      const endDate = new Date(this.endTimePicker.value);\n      const endDateUtc = new Date(endDate.getTime() - endDate.getTimezoneOffset() * 60000);\n      const endDateString = endDateUtc.toISOString().slice(0, 16);\n      this.appointmentService.getDoctors(startDateString, endDateString).subscribe(doctors => {\n        this.availableDoctors = doctors;\n        this.doctorDropdown.dataSource = this.availableDoctors;\n        this.doctorDropdown.value = '';\n      });\n    }\n\n    onActionBegin(args) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n\n      const currentDate = new Date();\n      const dayAhead = new Date(currentDate.getTime() + 24 * 60 * 60 * 1000);\n\n      if (args.requestType === 'eventCreate') {\n        const eventData = args.data instanceof Array ? args.data[0] : args.data;\n\n        if (eventData) {\n          const formatDate = date => {\n            const pad = n => n < 10 ? '0' + n : n;\n\n            const y = date.getFullYear();\n            const m = pad(date.getMonth() + 1);\n            const d = pad(date.getDate());\n            const h = pad(date.getHours());\n            const min = pad(date.getMinutes());\n            return `${y}-${m}-${d}T${h}:${min}`;\n          };\n\n          const appointmentData = {\n            startDate: formatDate((_a = this.startTimePicker) === null || _a === void 0 ? void 0 : _a.value),\n            endDate: formatDate((_b = this.endTimePicker) === null || _b === void 0 ? void 0 : _b.value),\n            reason: (_c = this.reasonDropdown) === null || _c === void 0 ? void 0 : _c.value,\n            location: (_d = this.locationDropdown) === null || _d === void 0 ? void 0 : _d.value,\n            notes: this.notesInput.value,\n            prix: 0,\n            idAppointment: 0,\n            pet: {\n              idPet: (_e = this.petDropdown) === null || _e === void 0 ? void 0 : _e.value\n            },\n            doctor: {\n              id: (_f = this.doctorDropdown) === null || _f === void 0 ? void 0 : _f.value\n            },\n            patient: this.idUser\n          };\n          console.log(appointmentData);\n          this.appointmentService.createAppointment(appointmentData).subscribe(response => {\n            console.log('Appointment saved:', response);\n            this.data.push({\n              Id: response.idAppointment,\n              Subject: response.reason,\n              StartTime: new Date(response.startDate.toString()),\n              EndTime: new Date(response.endDate.toString()),\n              Location: response.location\n            });\n            this.scheduleObj.refresh();\n            this.fetchAppointments();\n          });\n        }\n      }\n\n      if (args.requestType === 'eventChange') {\n        const eventData = args.data instanceof Array ? args.data[0] : args.data;\n\n        if (eventData) {\n          const eventStartDate = new Date(eventData['StartTime']);\n\n          const formatDate = date => {\n            const pad = n => n < 10 ? '0' + n : n;\n\n            const y = date.getFullYear();\n            const m = pad(date.getMonth() + 1);\n            const d = pad(date.getDate());\n            const h = pad(date.getHours());\n            const min = pad(date.getMinutes());\n            return `${y}-${m}-${d}T${h}:${min}`;\n          };\n\n          const appointmentData = {\n            startDate: formatDate((_g = this.startTimePicker) === null || _g === void 0 ? void 0 : _g.value),\n            endDate: formatDate((_h = this.endTimePicker) === null || _h === void 0 ? void 0 : _h.value),\n            reason: (_j = this.reasonDropdown) === null || _j === void 0 ? void 0 : _j.value,\n            location: (_k = this.locationDropdown) === null || _k === void 0 ? void 0 : _k.value,\n            notes: this.notesInput.value,\n            prix: 0,\n            idAppointment: eventData['Id'],\n            pet: {\n              idPet: (_l = this.petDropdown) === null || _l === void 0 ? void 0 : _l.value\n            },\n            doctor: {\n              id: (_m = this.doctorDropdown) === null || _m === void 0 ? void 0 : _m.value\n            }\n          };\n\n          if (eventStartDate >= dayAhead) {\n            this.appointmentService.updateAppointment(eventData['Id'], appointmentData).subscribe(response => {\n              var _a, _b;\n\n              console.log('Appointment updated:', response);\n              const index = this.data.findIndex(event => event.Id === eventData['Id']);\n\n              if (index !== -1) {\n                this.data[index] = Object.assign(Object.assign({}, this.data[index]), {\n                  Subject: response.reason,\n                  StartTime: new Date(response.startDate.toString()),\n                  EndTime: new Date(response.endDate.toString()),\n                  Location: response.location,\n                  Description: response.notes,\n                  pet: {\n                    idPet: (_a = this.petDropdown) === null || _a === void 0 ? void 0 : _a.value\n                  },\n                  doctor: {\n                    id: (_b = this.doctorDropdown) === null || _b === void 0 ? void 0 : _b.value\n                  }\n                });\n                this.scheduleObj.refresh();\n              }\n            });\n          } else {\n            alert(\"You can only update or delete an appointment with a start date 24 hours ahead.\");\n            args.cancel = true; // Cancel the event action\n          }\n        }\n      }\n\n      if (args.requestType === 'eventRemove') {\n        const eventData = args.data instanceof Array ? args.data[0] : args.data;\n\n        if (eventData) {\n          const eventStartDate = new Date(eventData['StartTime']);\n          const eventId = eventData.Id;\n\n          if (eventStartDate >= dayAhead) {\n            this.appointmentService.deleteAppointment(eventId).subscribe(() => {\n              console.log('Appointment deleted:', eventId);\n            }, error => {\n              console.error('Error deleting appointment:', error);\n            });\n          } else {\n            alert(\"You can only update or delete an appointment with a start date 24 hours ahead.\");\n            args.cancel = true; // Cancel the event action\n          }\n        }\n      }\n    }\n\n  }\n\n  CalendrierComponent.ɵfac = function CalendrierComponent_Factory(t) {\n    return new (t || CalendrierComponent)(i0.ɵɵdirectiveInject(i1.AppointmentService), i0.ɵɵdirectiveInject(i2.PetService), i0.ɵɵdirectiveInject(i3.StorageService));\n  };\n\n  CalendrierComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CalendrierComponent,\n    selectors: [[\"app-root\"]],\n    viewQuery: function CalendrierComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scheduleObj = _t.first);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([DayService, WeekService, WorkWeekService, MonthService, AgendaService])],\n    decls: 5,\n    vars: 2,\n    consts: [[1, \"main-content\"], [3, \"eventSettings\", \"editorTemplate\", \"actionBegin\", \"popupOpen\"], [\"scheduleObj\", \"\"]],\n    template: function CalendrierComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-index-navbar\");\n        i0.ɵɵelementStart(1, \"div\", 0);\n        i0.ɵɵelementStart(2, \"ejs-schedule\", 1, 2);\n        i0.ɵɵlistener(\"actionBegin\", function CalendrierComponent_Template_ejs_schedule_actionBegin_2_listener($event) {\n          return ctx.onActionBegin($event);\n        })(\"popupOpen\", function CalendrierComponent_Template_ejs_schedule_popupOpen_2_listener($event) {\n          return ctx.onPopupOpen($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"app-footer\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"eventSettings\", ctx.eventSettings)(\"editorTemplate\", ctx.editorTemplate);\n      }\n    },\n    directives: [i4.IndexNavbarComponent, i5.ScheduleComponent, i6.FooterComponent],\n    encapsulation: 2\n  });\n  return CalendrierComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}