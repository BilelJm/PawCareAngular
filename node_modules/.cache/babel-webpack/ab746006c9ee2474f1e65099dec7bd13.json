{"ast":null,"code":"\"use strict\";\n\nvar ɵngcc0 = require('@angular/core');\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar core_1 = require(\"@angular/core\");\n\nvar Ng2OrderPipe = Ng2OrderPipe_1 = function () {\n  function Ng2OrderPipe() {}\n\n  Ng2OrderPipe.prototype.transform = function (value, expression, reverse) {\n    if (!value) {\n      return value;\n    }\n\n    var isArray = value instanceof Array;\n\n    if (isArray) {\n      return this.sortArray(value, expression, reverse);\n    }\n\n    if (typeof value === 'object') {\n      return this.transformObject(value, expression, reverse);\n    }\n\n    return value;\n  };\n  /**\r\n   * Sort array\r\n   *\r\n   * @param value\r\n   * @param expression\r\n   * @param reverse\r\n   * @returns {any[]}\r\n   */\n\n\n  Ng2OrderPipe.prototype.sortArray = function (value, expression, reverse) {\n    var array = value.sort(function (a, b) {\n      if (!expression) {\n        return a > b ? 1 : -1;\n      }\n\n      return a[expression] > b[expression] ? 1 : -1;\n    });\n\n    if (reverse) {\n      return array.reverse();\n    }\n\n    return array;\n  };\n  /**\r\n   * Transform Object\r\n   *\r\n   * @param value\r\n   * @param expression\r\n   * @param reverse\r\n   * @returns {any[]}\r\n   */\n\n\n  Ng2OrderPipe.prototype.transformObject = function (value, expression, reverse) {\n    var parsedExpression = Ng2OrderPipe_1.parseExpression(expression);\n    var lastPredicate = parsedExpression.pop();\n    var oldValue = Ng2OrderPipe_1.getValue(value, parsedExpression);\n\n    if (!(oldValue instanceof Array)) {\n      parsedExpression.push(lastPredicate);\n      lastPredicate = null;\n      oldValue = Ng2OrderPipe_1.getValue(value, parsedExpression);\n    }\n\n    if (!oldValue) {\n      return value;\n    }\n\n    var newValue = this.transform(oldValue, lastPredicate, reverse);\n    Ng2OrderPipe_1.setValue(value, newValue, parsedExpression);\n    return value;\n  };\n  /**\r\n   * Parse expression, split into items\r\n   * @param expression\r\n   * @returns {string[]}\r\n   */\n\n\n  Ng2OrderPipe.parseExpression = function (expression) {\n    expression = expression.replace(/\\[(\\w+)\\]/g, '.$1');\n    expression = expression.replace(/^\\./, '');\n    return expression.split('.');\n  };\n  /**\r\n   * Get value by expression\r\n   *\r\n   * @param object\r\n   * @param expression\r\n   * @returns {any}\r\n   */\n\n\n  Ng2OrderPipe.getValue = function (object, expression) {\n    for (var i = 0, n = expression.length; i < n; ++i) {\n      var k = expression[i];\n\n      if (!(k in object)) {\n        return;\n      }\n\n      object = object[k];\n    }\n\n    return object;\n  };\n  /**\r\n   * Set value by expression\r\n   *\r\n   * @param object\r\n   * @param value\r\n   * @param expression\r\n   */\n\n\n  Ng2OrderPipe.setValue = function (object, value, expression) {\n    var i;\n\n    for (i = 0; i < expression.length - 1; i++) {\n      object = object[expression[i]];\n    }\n\n    object[expression[i]] = value;\n  };\n\n  Ng2OrderPipe.ɵfac = function Ng2OrderPipe_Factory(t) {\n    return new (t || Ng2OrderPipe)();\n  };\n\n  Ng2OrderPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"orderBy\",\n    type: Ng2OrderPipe,\n    pure: true\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return Ng2OrderPipe;\n}();\n\nexports.Ng2OrderPipe = Ng2OrderPipe;\nvar Ng2OrderPipe_1; //# sourceMappingURL=ng2-order.pipe.js.map","map":null,"metadata":{},"sourceType":"script"}