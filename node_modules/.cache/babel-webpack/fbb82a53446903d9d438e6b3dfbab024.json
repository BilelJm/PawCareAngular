{"ast":null,"code":"import { Animation, Browser, ChildProperty, Collection, Complex, Component, Draggable, Event, EventHandler, L10n, NotifyPropertyChanges, Property, SanitizeHtmlHelper, Touch, addClass, append, attributes, classList, closest, compile, createElement, detach, extend, formatUnit, getUniqueID, isBlazor, isNullOrUndefined, prepend, remove, removeClass, select, selectAll, setStyleAttribute } from '@syncfusion/ej2-base';\nimport { Button } from '@syncfusion/ej2-buttons';\n/**\n * Position library\n */\n\nvar elementRect;\nvar popupRect;\nvar element;\nvar parentDocument;\nvar fixedParent = false;\n/**\n *\n * @param {HTMLElement} anchor - specifies the element\n * @param {HTMLElement} element - specifies the element\n * @returns {OffsetPosition} - returns the value\n */\n\nfunction calculateRelativeBasedPosition(anchor, element) {\n  var fixedElement = false;\n  var anchorPos = {\n    left: 0,\n    top: 0\n  };\n  var tempAnchor = anchor;\n\n  if (!anchor || !element) {\n    return anchorPos;\n  }\n\n  if (isNullOrUndefined(element.offsetParent) && element.style.position === 'fixed') {\n    fixedElement = true;\n  }\n\n  while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {\n    anchorPos.left += anchor.offsetLeft;\n    anchorPos.top += anchor.offsetTop;\n    anchor = anchor.offsetParent;\n  }\n\n  anchor = tempAnchor;\n\n  while ((element.offsetParent || fixedElement) && anchor && element.offsetParent !== anchor) {\n    anchorPos.left -= anchor.scrollLeft;\n    anchorPos.top -= anchor.scrollTop;\n    anchor = anchor.parentElement;\n  }\n\n  return anchorPos;\n}\n/**\n *\n * @param {Element} currentElement - specifies the element\n * @param {string} positionX - specifies the position\n * @param {string} positionY - specifies the position\n * @param {boolean} parentElement - specifies the boolean\n * @param {ClientRect} targetValues - specifies the client\n * @returns {OffsetPosition} - returns the position\n */\n\n\nfunction calculatePosition(currentElement, positionX, positionY, parentElement, targetValues) {\n  popupRect = undefined;\n  popupRect = targetValues;\n  fixedParent = parentElement ? true : false;\n\n  if (!currentElement) {\n    return {\n      left: 0,\n      top: 0\n    };\n  }\n\n  if (!positionX) {\n    positionX = 'left';\n  }\n\n  if (!positionY) {\n    positionY = 'top';\n  }\n\n  parentDocument = currentElement.ownerDocument;\n  element = currentElement;\n  var pos = {\n    left: 0,\n    top: 0\n  };\n  return updatePosition(positionX.toLowerCase(), positionY.toLowerCase(), pos);\n}\n/**\n *\n * @param {number} value - specifies the number\n * @param {OffsetPosition} pos - specifies the position\n * @returns {void}\n */\n\n\nfunction setPosx(value, pos) {\n  pos.left = value;\n}\n/**\n *\n * @param {number} value - specifies the number\n * @param {OffsetPosition} pos - specifies the position\n * @returns {void}\n */\n\n\nfunction setPosy(value, pos) {\n  pos.top = value;\n}\n/**\n *\n * @param {string} posX - specifies the position\n * @param {string} posY - specifies the position\n * @param {OffsetPosition} pos - specifies the position\n * @returns {OffsetPosition} - returns the postion\n */\n\n\nfunction updatePosition(posX, posY, pos) {\n  elementRect = element.getBoundingClientRect();\n\n  switch (posY + posX) {\n    case 'topcenter':\n      setPosx(getElementHCenter(), pos);\n      setPosy(getElementTop(), pos);\n      break;\n\n    case 'topright':\n      setPosx(getElementRight(), pos);\n      setPosy(getElementTop(), pos);\n      break;\n\n    case 'centercenter':\n      setPosx(getElementHCenter(), pos);\n      setPosy(getElementVCenter(), pos);\n      break;\n\n    case 'centerright':\n      setPosx(getElementRight(), pos);\n      setPosy(getElementVCenter(), pos);\n      break;\n\n    case 'centerleft':\n      setPosx(getElementLeft(), pos);\n      setPosy(getElementVCenter(), pos);\n      break;\n\n    case 'bottomcenter':\n      setPosx(getElementHCenter(), pos);\n      setPosy(getElementBottom(), pos);\n      break;\n\n    case 'bottomright':\n      setPosx(getElementRight(), pos);\n      setPosy(getElementBottom(), pos);\n      break;\n\n    case 'bottomleft':\n      setPosx(getElementLeft(), pos);\n      setPosy(getElementBottom(), pos);\n      break;\n\n    default:\n    case 'topleft':\n      setPosx(getElementLeft(), pos);\n      setPosy(getElementTop(), pos);\n      break;\n  }\n\n  element = null;\n  return pos;\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getBodyScrollTop() {\n  return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getBodyScrollLeft() {\n  return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getElementBottom() {\n  return fixedParent ? elementRect.bottom : elementRect.bottom + getBodyScrollTop();\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getElementVCenter() {\n  return getElementTop() + elementRect.height / 2;\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getElementTop() {\n  return fixedParent ? elementRect.top : elementRect.top + getBodyScrollTop();\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getElementLeft() {\n  return elementRect.left + getBodyScrollLeft();\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getElementRight() {\n  var popupWidth = element && element.classList.contains('e-date-range-wrapper') ? popupRect ? popupRect.width : 0 : popupRect && elementRect.width >= popupRect.width ? popupRect.width : 0;\n  return elementRect.right + getBodyScrollLeft() - popupWidth;\n}\n/**\n * @returns {number} - specifies the number value\n */\n\n\nfunction getElementHCenter() {\n  return getElementLeft() + elementRect.width / 2;\n}\n/**\n * Collision module.\n */\n\n\nvar parentDocument$1;\nvar targetContainer;\n/**\n *\n * @param {HTMLElement} element - specifies the element\n * @param {HTMLElement} viewPortElement - specifies the element\n * @param {CollisionCoordinates} axis - specifies the collision coordinates\n * @param {OffsetPosition} position - specifies the position\n * @returns {void}\n */\n\nfunction fit(element, viewPortElement, axis, position) {\n  if (viewPortElement === void 0) {\n    viewPortElement = null;\n  }\n\n  if (axis === void 0) {\n    axis = {\n      X: false,\n      Y: false\n    };\n  }\n\n  if (!axis.Y && !axis.X) {\n    return {\n      left: 0,\n      top: 0\n    };\n  }\n\n  var elemData = element.getBoundingClientRect();\n  targetContainer = viewPortElement;\n  parentDocument$1 = element.ownerDocument;\n\n  if (!position) {\n    position = calculatePosition(element, 'left', 'top');\n  }\n\n  if (axis.X) {\n    var containerWidth = targetContainer ? getTargetContainerWidth() : getViewPortWidth();\n    var containerLeft = ContainerLeft();\n    var containerRight = ContainerRight();\n    var overLeft = containerLeft - position.left;\n    var overRight = position.left + elemData.width - containerRight;\n\n    if (elemData.width > containerWidth) {\n      if (overLeft > 0 && overRight <= 0) {\n        position.left = containerRight - elemData.width;\n      } else if (overRight > 0 && overLeft <= 0) {\n        position.left = containerLeft;\n      } else {\n        position.left = overLeft > overRight ? containerRight - elemData.width : containerLeft;\n      }\n    } else if (overLeft > 0) {\n      position.left += overLeft;\n    } else if (overRight > 0) {\n      position.left -= overRight;\n    }\n  }\n\n  if (axis.Y) {\n    var containerHeight = targetContainer ? getTargetContainerHeight() : getViewPortHeight();\n    var containerTop = ContainerTop();\n    var containerBottom = ContainerBottom();\n    var overTop = containerTop - position.top;\n    var overBottom = position.top + elemData.height - containerBottom;\n\n    if (elemData.height > containerHeight) {\n      if (overTop > 0 && overBottom <= 0) {\n        position.top = containerBottom - elemData.height;\n      } else if (overBottom > 0 && overTop <= 0) {\n        position.top = containerTop;\n      } else {\n        position.top = overTop > overBottom ? containerBottom - elemData.height : containerTop;\n      }\n    } else if (overTop > 0) {\n      position.top += overTop;\n    } else if (overBottom > 0) {\n      position.top -= overBottom;\n    }\n  }\n\n  return position;\n}\n/**\n *\n * @param {HTMLElement} element - specifies the html element\n * @param {HTMLElement} viewPortElement - specifies the html element\n * @param {number} x - specifies the number\n * @param {number} y - specifies the number\n * @returns {string[]} - returns the string value\n */\n\n\nfunction isCollide(element, viewPortElement, x, y) {\n  if (viewPortElement === void 0) {\n    viewPortElement = null;\n  }\n\n  var elemOffset = calculatePosition(element, 'left', 'top');\n\n  if (x) {\n    elemOffset.left = x;\n  }\n\n  if (y) {\n    elemOffset.top = y;\n  }\n\n  var data = [];\n  targetContainer = viewPortElement;\n  parentDocument$1 = element.ownerDocument;\n  var elementRect = element.getBoundingClientRect();\n  var top = elemOffset.top;\n  var left = elemOffset.left;\n  var right = elemOffset.left + elementRect.width;\n  var bottom = elemOffset.top + elementRect.height; // eslint-disable-next-line\n\n  var yAxis = topCollideCheck(top, bottom);\n  var xAxis = leftCollideCheck(left, right);\n\n  if (yAxis.topSide) {\n    data.push('top');\n  }\n\n  if (xAxis.rightSide) {\n    data.push('right');\n  }\n\n  if (xAxis.leftSide) {\n    data.push('left');\n  }\n\n  if (yAxis.bottomSide) {\n    data.push('bottom');\n  }\n\n  return data;\n}\n/**\n *\n * @param {HTMLElement} element - specifies the element\n * @param {HTMLElement} target - specifies the element\n * @param {number} offsetX - specifies the number\n * @param {number} offsetY - specifies the number\n * @param {string} positionX - specifies the string value\n * @param {string} positionY - specifies the string value\n * @param {HTMLElement} viewPortElement - specifies the element\n * @param {CollisionCoordinates} axis - specifies the collision axis\n * @param {boolean} fixedParent - specifies the boolean\n * @returns {void}\n */\n\n\nfunction flip(element, target, offsetX, offsetY, positionX, positionY, viewPortElement,\n/* eslint-disable */\naxis, fixedParent) {\n  if (viewPortElement === void 0) {\n    viewPortElement = null;\n  }\n\n  if (axis === void 0) {\n    axis = {\n      X: true,\n      Y: true\n    };\n  }\n\n  if (!target || !element || !positionX || !positionY || !axis.X && !axis.Y) {\n    return;\n  }\n\n  var tEdge = {\n    TL: null,\n    TR: null,\n    BL: null,\n    BR: null\n  },\n      eEdge = {\n    TL: null,\n    TR: null,\n    BL: null,\n    BR: null\n    /* eslint-enable */\n\n  };\n  var elementRect;\n\n  if (window.getComputedStyle(element).display === 'none') {\n    var oldVisibility = element.style.visibility;\n    element.style.visibility = 'hidden';\n    element.style.display = 'block';\n    elementRect = element.getBoundingClientRect();\n    element.style.removeProperty('display');\n    element.style.visibility = oldVisibility;\n  } else {\n    elementRect = element.getBoundingClientRect();\n  }\n\n  var pos = {\n    posX: positionX,\n    posY: positionY,\n    offsetX: offsetX,\n    offsetY: offsetY,\n    position: {\n      left: 0,\n      top: 0\n    }\n  };\n  targetContainer = viewPortElement;\n  parentDocument$1 = target.ownerDocument;\n  updateElementData(target, tEdge, pos, fixedParent, elementRect);\n  setPosition(eEdge, pos, elementRect);\n\n  if (axis.X) {\n    leftFlip(target, eEdge, tEdge, pos, elementRect, true);\n  }\n\n  if (axis.Y && tEdge.TL.top > -1) {\n    topFlip(target, eEdge, tEdge, pos, elementRect, true);\n  }\n\n  setPopup(element, pos, elementRect);\n}\n/**\n *\n * @param {HTMLElement} element - specifies the element\n * @param {PositionLocation} pos - specifies the location\n * @param {ClientRect} elementRect - specifies the client rect\n * @returns {void}\n */\n\n\nfunction setPopup(element, pos, elementRect) {\n  //eslint-disable-next-line\n  var left = 0,\n      top = 0;\n\n  if (element.offsetParent != null && (getComputedStyle(element.offsetParent).position === 'absolute' || getComputedStyle(element.offsetParent).position === 'relative')) {\n    var data = calculatePosition(element.offsetParent, 'left', 'top', false, elementRect);\n    left = data.left;\n    top = data.top;\n  }\n\n  element.style.top = pos.position.top + pos.offsetY - top + 'px';\n  element.style.left = pos.position.left + pos.offsetX - left + 'px';\n}\n/**\n *\n * @param {HTMLElement} target - specifies the element\n * @param {EdgeOffset} edge - specifies the offset\n * @param {PositionLocation} pos - specifies theloaction\n * @param {boolean} fixedParent - specifies the boolean\n * @param {ClientRect} elementRect - specifies the client rect\n * @returns {void}\n */\n\n\nfunction updateElementData(target, edge, pos, fixedParent, elementRect) {\n  pos.position = calculatePosition(target, pos.posX, pos.posY, fixedParent, elementRect);\n  edge.TL = calculatePosition(target, 'left', 'top', fixedParent, elementRect);\n  edge.TR = calculatePosition(target, 'right', 'top', fixedParent, elementRect);\n  edge.BR = calculatePosition(target, 'left', 'bottom', fixedParent, elementRect);\n  edge.BL = calculatePosition(target, 'right', 'bottom', fixedParent, elementRect);\n}\n/**\n *\n * @param {EdgeOffset} eStatus - specifies the status\n * @param {PositionLocation} pos - specifies the location\n * @param {ClientRect} elementRect - specifies the client\n * @returns {void}\n */\n\n\nfunction setPosition(eStatus, pos, elementRect) {\n  eStatus.TL = {\n    top: pos.position.top + pos.offsetY,\n    left: pos.position.left + pos.offsetX\n  };\n  eStatus.TR = {\n    top: eStatus.TL.top,\n    left: eStatus.TL.left + elementRect.width\n  };\n  eStatus.BL = {\n    top: eStatus.TL.top + elementRect.height,\n    left: eStatus.TL.left\n  };\n  eStatus.BR = {\n    top: eStatus.TL.top + elementRect.height,\n    left: eStatus.TL.left + elementRect.width\n  };\n}\n/**\n *\n * @param {number} left - specifies the  number\n * @param {number} right - specifies the number\n * @returns {LeftCorners} - returns the value\n */\n\n\nfunction leftCollideCheck(left, right) {\n  //eslint-disable-next-line\n  var leftSide = false,\n      rightSide = false;\n\n  if (left - getBodyScrollLeft$1() < ContainerLeft()) {\n    leftSide = true;\n  }\n\n  if (right > ContainerRight()) {\n    rightSide = true;\n  }\n\n  return {\n    leftSide: leftSide,\n    rightSide: rightSide\n  };\n}\n/**\n *\n * @param {HTMLElement} target - specifies the element\n * @param {EdgeOffset} edge - specifes the element\n * @param {EdgeOffset} tEdge - specifies the edge offset\n * @param {PositionLocation} pos - specifes the location\n * @param {ClientRect} elementRect - specifies the client\n * @param {boolean} deepCheck - specifies the boolean value\n * @returns {void}\n */\n\n\nfunction leftFlip(target, edge, tEdge, pos, elementRect, deepCheck) {\n  var collideSide = leftCollideCheck(edge.TL.left, edge.TR.left);\n\n  if (tEdge.TL.left - getBodyScrollLeft$1() <= ContainerLeft()) {\n    collideSide.leftSide = false;\n  }\n\n  if (tEdge.TR.left > ContainerRight()) {\n    collideSide.rightSide = false;\n  }\n\n  if (collideSide.leftSide && !collideSide.rightSide || !collideSide.leftSide && collideSide.rightSide) {\n    if (pos.posX === 'right') {\n      pos.posX = 'left';\n    } else {\n      pos.posX = 'right';\n    }\n\n    pos.offsetX = pos.offsetX + elementRect.width;\n    pos.offsetX = -1 * pos.offsetX;\n    pos.position = calculatePosition(target, pos.posX, pos.posY, false);\n    setPosition(edge, pos, elementRect);\n\n    if (deepCheck) {\n      leftFlip(target, edge, tEdge, pos, elementRect, false);\n    }\n  }\n}\n/**\n *\n * @param {HTMLElement} target - specifies the element\n * @param {EdgeOffset} edge - specifies the offset\n * @param {EdgeOffset} tEdge - specifies the offset\n * @param {PositionLocation} pos - specifies the location\n * @param {ClientRect} elementRect - specifies the client rect\n * @param {boolean} deepCheck - specifies the boolean\n * @returns {void}\n */\n\n\nfunction topFlip(target, edge, tEdge, pos, elementRect, deepCheck) {\n  var collideSide = topCollideCheck(edge.TL.top, edge.BL.top);\n\n  if (tEdge.TL.top - getBodyScrollTop$1() <= ContainerTop()) {\n    collideSide.topSide = false;\n  }\n\n  if (tEdge.BL.top >= ContainerBottom() && target.getBoundingClientRect().bottom < window.innerHeight) {\n    collideSide.bottomSide = false;\n  }\n\n  if (collideSide.topSide && !collideSide.bottomSide || !collideSide.topSide && collideSide.bottomSide) {\n    if (pos.posY === 'top') {\n      pos.posY = 'bottom';\n    } else {\n      pos.posY = 'top';\n    }\n\n    pos.offsetY = pos.offsetY + elementRect.height;\n    pos.offsetY = -1 * pos.offsetY;\n    pos.position = calculatePosition(target, pos.posX, pos.posY, false, elementRect);\n    setPosition(edge, pos, elementRect);\n\n    if (deepCheck) {\n      topFlip(target, edge, tEdge, pos, elementRect, false);\n    }\n  }\n}\n/**\n *\n * @param {number} top - specifies the number\n * @param {number} bottom - specifies the number\n * @returns {TopCorners} - retyrns the value\n */\n\n\nfunction topCollideCheck(top, bottom) {\n  //eslint-disable-next-line\n  var topSide = false,\n      bottomSide = false;\n\n  if (top - getBodyScrollTop$1() < ContainerTop()) {\n    topSide = true;\n  }\n\n  if (bottom > ContainerBottom()) {\n    bottomSide = true;\n  }\n\n  return {\n    topSide: topSide,\n    bottomSide: bottomSide\n  };\n}\n/**\n * @returns {void}\n */\n\n\nfunction getTargetContainerWidth() {\n  return targetContainer.getBoundingClientRect().width;\n}\n/**\n * @returns {void}\n */\n\n\nfunction getTargetContainerHeight() {\n  return targetContainer.getBoundingClientRect().height;\n}\n/**\n * @returns {void}\n */\n\n\nfunction getTargetContainerLeft() {\n  return targetContainer.getBoundingClientRect().left;\n}\n/**\n * @returns {void}\n */\n\n\nfunction getTargetContainerTop() {\n  return targetContainer.getBoundingClientRect().top;\n} //eslint-disable-next-line\n\n\nfunction ContainerTop() {\n  if (targetContainer) {\n    return getTargetContainerTop();\n  }\n\n  return 0;\n} //eslint-disable-next-line\n\n\nfunction ContainerLeft() {\n  if (targetContainer) {\n    return getTargetContainerLeft();\n  }\n\n  return 0;\n} //eslint-disable-next-line\n\n\nfunction ContainerRight() {\n  if (targetContainer) {\n    return getBodyScrollLeft$1() + getTargetContainerLeft() + getTargetContainerWidth();\n  }\n\n  return getBodyScrollLeft$1() + getViewPortWidth();\n} //eslint-disable-next-line\n\n\nfunction ContainerBottom() {\n  if (targetContainer) {\n    return getBodyScrollTop$1() + getTargetContainerTop() + getTargetContainerHeight();\n  }\n\n  return getBodyScrollTop$1() + getViewPortHeight();\n}\n/**\n * @returns {void}\n */\n\n\nfunction getBodyScrollTop$1() {\n  // if(targetContainer)\n  //     return targetContainer.scrollTop;\n  return parentDocument$1.documentElement.scrollTop || parentDocument$1.body.scrollTop;\n}\n/**\n * @returns {void}\n */\n\n\nfunction getBodyScrollLeft$1() {\n  // if(targetContainer)\n  //     return targetContainer.scrollLeft;\n  return parentDocument$1.documentElement.scrollLeft || parentDocument$1.body.scrollLeft;\n}\n/**\n * @returns {void}\n */\n\n\nfunction getViewPortHeight() {\n  return window.innerHeight;\n}\n/**\n * @returns {void}\n */\n\n\nfunction getViewPortWidth() {\n  var windowWidth = window.innerWidth;\n  var documentReact = document.documentElement.getBoundingClientRect();\n  var offsetWidth = isNullOrUndefined(document.documentElement) ? 0 : documentReact.width;\n  return windowWidth - (windowWidth - offsetWidth);\n}\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Specifies the offset position values.\n */\n\n\nvar PositionData =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends(PositionData, _super);\n\n  function PositionData() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('left')], PositionData.prototype, \"X\", void 0);\n\n  __decorate([Property('top')], PositionData.prototype, \"Y\", void 0);\n\n  return PositionData;\n}(ChildProperty); // don't use space in classNames\n\n\nvar CLASSNAMES = {\n  ROOT: 'e-popup',\n  RTL: 'e-rtl',\n  OPEN: 'e-popup-open',\n  CLOSE: 'e-popup-close'\n};\n/**\n * Represents the Popup Component\n * ```html\n * <div id=\"popup\" style=\"position:absolute;height:100px;width:100px;\">\n * <div style=\"margin:35px 25px;\">Popup Content</div></div>\n * ```\n * ```typescript\n * <script>\n *   var popupObj = new Popup();\n *   popupObj.appendTo(\"#popup\");\n * </script>\n * ```\n */\n\nvar Popup =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends(Popup, _super);\n\n  function Popup(element, options) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param {PopupModel} newProp - specifies the new property\n   * @param {PopupModel} oldProp - specifies the old property\n   * @private\n   * @returns {void}\n   */\n\n\n  Popup.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'width':\n          setStyleAttribute(this.element, {\n            'width': formatUnit(newProp.width)\n          });\n          break;\n\n        case 'height':\n          setStyleAttribute(this.element, {\n            'height': formatUnit(newProp.height)\n          });\n          break;\n\n        case 'zIndex':\n          setStyleAttribute(this.element, {\n            'zIndex': newProp.zIndex\n          });\n          break;\n\n        case 'enableRtl':\n          this.setEnableRtl();\n          break;\n\n        case 'position':\n        case 'relateTo':\n          this.refreshPosition();\n          break;\n\n        case 'offsetX':\n          // eslint-disable-next-line\n          var x = newProp.offsetX - oldProp.offsetX;\n          this.element.style.left = (parseInt(this.element.style.left, 10) + x).toString() + 'px';\n          break;\n\n        case 'offsetY':\n          // eslint-disable-next-line\n          var y = newProp.offsetY - oldProp.offsetY;\n          this.element.style.top = (parseInt(this.element.style.top, 10) + y).toString() + 'px';\n          break;\n\n        case 'content':\n          this.setContent();\n          break;\n\n        case 'actionOnScroll':\n          if (newProp.actionOnScroll !== 'none') {\n            this.wireScrollEvents();\n          } else {\n            this.unwireScrollEvents();\n          }\n\n          break;\n      }\n    }\n  };\n  /**\n   * gets the Component module name.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Popup.prototype.getModuleName = function () {\n    return 'popup';\n  };\n  /**\n   * To resolve if any collision occurs.\n   *\n   * @returns {void}\n   */\n\n\n  Popup.prototype.resolveCollision = function () {\n    this.checkCollision();\n  };\n  /**\n   * gets the persisted state properties of the Component.\n   *\n   * @returns {void}\n   */\n\n\n  Popup.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n  /**\n   * To destroy the control.\n   *\n   * @returns {void}\n   */\n\n\n  Popup.prototype.destroy = function () {\n    if (this.element.classList.contains('e-popup-open')) {\n      this.unwireEvents();\n    }\n\n    this.element.classList.remove(CLASSNAMES.ROOT, CLASSNAMES.RTL, CLASSNAMES.OPEN, CLASSNAMES.CLOSE);\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * To Initialize the control rendering\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Popup.prototype.render = function () {\n    this.element.classList.add(CLASSNAMES.ROOT);\n    var styles = {};\n\n    if (this.zIndex !== 1000) {\n      styles.zIndex = this.zIndex;\n    }\n\n    if (this.width !== 'auto') {\n      styles.width = formatUnit(this.width);\n    }\n\n    if (this.height !== 'auto') {\n      styles.height = formatUnit(this.height);\n    }\n\n    setStyleAttribute(this.element, styles);\n    this.fixedParent = false;\n    this.setEnableRtl();\n    this.setContent();\n  };\n\n  Popup.prototype.wireEvents = function () {\n    if (Browser.isDevice) {\n      EventHandler.add(window, 'orientationchange', this.orientationOnChange, this);\n    }\n\n    if (this.actionOnScroll !== 'none') {\n      this.wireScrollEvents();\n    }\n  };\n\n  Popup.prototype.wireScrollEvents = function () {\n    if (this.getRelateToElement()) {\n      for (var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++) {\n        var parent_1 = _a[_i];\n        EventHandler.add(parent_1, 'scroll', this.scrollRefresh, this);\n      }\n    }\n  };\n\n  Popup.prototype.unwireEvents = function () {\n    if (Browser.isDevice) {\n      EventHandler.remove(window, 'orientationchange', this.orientationOnChange);\n    }\n\n    if (this.actionOnScroll !== 'none') {\n      this.unwireScrollEvents();\n    }\n  };\n\n  Popup.prototype.unwireScrollEvents = function () {\n    if (this.getRelateToElement()) {\n      for (var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++) {\n        var parent_2 = _a[_i];\n        EventHandler.remove(parent_2, 'scroll', this.scrollRefresh);\n      }\n    }\n  };\n\n  Popup.prototype.getRelateToElement = function () {\n    var relateToElement = this.relateTo === '' || isNullOrUndefined(this.relateTo) ? document.body : this.relateTo;\n    this.setProperties({\n      relateTo: relateToElement\n    }, true);\n    return typeof this.relateTo === 'string' ? document.querySelector(this.relateTo) : this.relateTo;\n  };\n\n  Popup.prototype.scrollRefresh = function (e) {\n    if (this.actionOnScroll === 'reposition') {\n      if (!isNullOrUndefined(this.element) && !(this.element.offsetParent === e.target || this.element.offsetParent && this.element.offsetParent.tagName === 'BODY' && e.target.parentElement == null)) {\n        this.refreshPosition();\n      }\n    } else if (this.actionOnScroll === 'hide') {\n      this.hide();\n    }\n\n    if (this.actionOnScroll !== 'none') {\n      if (this.getRelateToElement()) {\n        var targetVisible = this.isElementOnViewport(this.getRelateToElement(), e.target);\n\n        if (!targetVisible && !this.targetInvisibleStatus) {\n          this.trigger('targetExitViewport');\n          this.targetInvisibleStatus = true;\n        } else if (targetVisible) {\n          this.targetInvisibleStatus = false;\n        }\n      }\n    }\n  };\n  /**\n   * This method is to get the element visibility on viewport when scroll\n   * the page. This method will returns true even though 1 px of element\n   * part is in visible.\n   *\n   * @param {HTMLElement} relateToElement - specifies the element\n   * @param {HTMLElement} scrollElement - specifies the scroll element\n   * @returns {boolean} - retruns the boolean\n   */\n  // eslint-disable-next-line\n\n\n  Popup.prototype.isElementOnViewport = function (relateToElement, scrollElement) {\n    var scrollParents = this.getScrollableParent(relateToElement);\n\n    for (var parent_3 = 0; parent_3 < scrollParents.length; parent_3++) {\n      if (this.isElementVisible(relateToElement, scrollParents[parent_3])) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  Popup.prototype.isElementVisible = function (relateToElement, scrollElement) {\n    var rect = this.checkGetBoundingClientRect(relateToElement);\n\n    if (!rect.height || !rect.width) {\n      return false;\n    }\n\n    if (!isNullOrUndefined(this.checkGetBoundingClientRect(scrollElement))) {\n      var parent_4 = scrollElement.getBoundingClientRect();\n      return !(rect.bottom < parent_4.top) && !(rect.bottom > parent_4.bottom) && !(rect.right > parent_4.right) && !(rect.left < parent_4.left);\n    } else {\n      var win = window;\n      var windowView = {\n        top: win.scrollY,\n        left: win.scrollX,\n        right: win.scrollX + win.outerWidth,\n        bottom: win.scrollY + win.outerHeight\n      };\n      var off = calculatePosition(relateToElement);\n      var ele = {\n        top: off.top,\n        left: off.left,\n        right: off.left + rect.width,\n        bottom: off.top + rect.height\n      };\n      var elementView = {\n        top: windowView.bottom - ele.top,\n        left: windowView.right - ele.left,\n        bottom: ele.bottom - windowView.top,\n        right: ele.right - windowView.left\n      };\n      return elementView.top > 0 && elementView.left > 0 && elementView.right > 0 && elementView.bottom > 0;\n    }\n  };\n  /**\n   * Initialize the event handler\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Popup.prototype.preRender = function () {//There is no event handler\n  };\n\n  Popup.prototype.setEnableRtl = function () {\n    this.reposition(); // eslint-disable-next-line\n\n    this.enableRtl ? this.element.classList.add(CLASSNAMES.RTL) : this.element.classList.remove(CLASSNAMES.RTL);\n  };\n\n  Popup.prototype.setContent = function () {\n    if (!isNullOrUndefined(this.content)) {\n      this.element.innerHTML = '';\n\n      if (typeof this.content === 'string') {\n        this.element.textContent = this.content;\n      } else {\n        var relateToElem = this.getRelateToElement(); // eslint-disable-next-line\n\n        var props = this.content.props;\n\n        if (!relateToElem.classList.contains('e-dropdown-btn') || isNullOrUndefined(props)) {\n          this.element.appendChild(this.content);\n        }\n      }\n    }\n  };\n\n  Popup.prototype.orientationOnChange = function () {\n    var _this = this;\n\n    setTimeout(function () {\n      _this.refreshPosition();\n    }, 200);\n  }; // eslint-disable-next-line\n\n  /**\n   * Based on the `relative` element and `offset` values, `Popup` element position will refreshed.\n   *\n   * @returns {void}\n   */\n\n\n  Popup.prototype.refreshPosition = function (target, collision) {\n    if (!isNullOrUndefined(target)) {\n      this.checkFixedParent(target);\n    }\n\n    this.reposition();\n\n    if (!collision) {\n      this.checkCollision();\n    }\n  };\n\n  Popup.prototype.reposition = function () {\n    var pos;\n    var position;\n    var relateToElement = this.getRelateToElement();\n\n    if (typeof this.position.X === 'number' && typeof this.position.Y === 'number') {\n      pos = {\n        left: this.position.X,\n        top: this.position.Y\n      };\n    } else if (typeof this.position.X === 'string' && typeof this.position.Y === 'number' || typeof this.position.X === 'number' && typeof this.position.Y === 'string') {\n      var parentDisplay = void 0;\n      var display = this.element.style.display;\n      this.element.style.display = 'block';\n\n      if (this.element.classList.contains('e-dlg-modal')) {\n        parentDisplay = this.element.parentElement.style.display;\n        this.element.parentElement.style.display = 'block';\n      }\n\n      position = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);\n\n      if (typeof this.position.X === 'string') {\n        pos = {\n          left: position.left,\n          top: this.position.Y\n        };\n      } else {\n        pos = {\n          left: this.position.X,\n          top: position.top\n        };\n      }\n\n      this.element.style.display = display;\n\n      if (this.element.classList.contains('e-dlg-modal')) {\n        this.element.parentElement.style.display = parentDisplay;\n      }\n    } else if (relateToElement) {\n      var display = this.element.style.display;\n      this.element.style.display = 'block';\n      pos = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);\n      this.element.style.display = display;\n    } else {\n      pos = {\n        left: 0,\n        top: 0\n      };\n    }\n\n    if (!isNullOrUndefined(pos)) {\n      this.element.style.left = pos.left + 'px';\n      this.element.style.top = pos.top + 'px';\n    }\n  };\n\n  Popup.prototype.checkGetBoundingClientRect = function (ele) {\n    var eleRect;\n\n    try {\n      eleRect = ele.getBoundingClientRect();\n      return eleRect;\n    } catch (error) {\n      return null;\n    }\n  };\n\n  Popup.prototype.getAnchorPosition = function (anchorEle, ele, position, offsetX, offsetY) {\n    var eleRect = this.checkGetBoundingClientRect(ele);\n    var anchorRect = this.checkGetBoundingClientRect(anchorEle);\n\n    if (isNullOrUndefined(eleRect) || isNullOrUndefined(anchorRect)) {\n      return null;\n    }\n\n    var anchor = anchorEle;\n    var anchorPos = {\n      left: 0,\n      top: 0\n    };\n\n    if (ele.offsetParent && ele.offsetParent.tagName === 'BODY' && anchorEle.tagName === 'BODY') {\n      anchorPos = calculatePosition(anchorEle);\n    } else {\n      if (ele.classList.contains('e-dlg-modal') && anchor.tagName !== 'BODY') {\n        ele = ele.parentElement;\n      }\n\n      anchorPos = calculateRelativeBasedPosition(anchor, ele);\n    }\n\n    switch (position.X) {\n      default:\n      case 'left':\n        break;\n\n      case 'center':\n        if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {\n          anchorPos.left += window.innerWidth / 2 - eleRect.width / 2;\n        } else if (this.targetType === 'container') {\n          anchorPos.left += anchorRect.width / 2 - eleRect.width / 2;\n        } else {\n          anchorPos.left += anchorRect.width / 2;\n        }\n\n        break;\n\n      case 'right':\n        if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {\n          anchorPos.left += window.innerWidth - eleRect.width;\n        } else if (this.targetType === 'container') {\n          anchorPos.left += anchorRect.width - eleRect.width;\n        } else {\n          anchorPos.left += anchorRect.width;\n        }\n\n        break;\n    }\n\n    switch (position.Y) {\n      default:\n      case 'top':\n        break;\n\n      case 'center':\n        if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {\n          anchorPos.top += window.innerHeight / 2 - eleRect.height / 2;\n        } else if (this.targetType === 'container') {\n          anchorPos.top += anchorRect.height / 2 - eleRect.height / 2;\n        } else {\n          anchorPos.top += anchorRect.height / 2;\n        }\n\n        break;\n\n      case 'bottom':\n        if (ele.classList.contains('e-dlg-modal') && anchor.tagName === 'BODY' && this.targetType === 'container') {\n          anchorPos.top += window.innerHeight - eleRect.height;\n        } else if (this.targetType === 'container') {\n          anchorPos.top += anchorRect.height - eleRect.height;\n        } else {\n          anchorPos.top += anchorRect.height;\n        }\n\n        break;\n    }\n\n    anchorPos.left += offsetX;\n    anchorPos.top += offsetY;\n    return anchorPos;\n  };\n\n  Popup.prototype.callFlip = function (param) {\n    var relateToElement = this.getRelateToElement();\n    flip(this.element, relateToElement, this.offsetX, this.offsetY, this.position.X, this.position.Y, this.viewPortElement, param, this.fixedParent);\n  };\n\n  Popup.prototype.callFit = function (param) {\n    if (isCollide(this.element, this.viewPortElement).length !== 0) {\n      if (isNullOrUndefined(this.viewPortElement)) {\n        var data = fit(this.element, this.viewPortElement, param);\n\n        if (param.X) {\n          this.element.style.left = data.left + 'px';\n        }\n\n        if (param.Y) {\n          this.element.style.top = data.top + 'px';\n        }\n      } else {\n        var elementRect = this.checkGetBoundingClientRect(this.element);\n        var viewPortRect = this.checkGetBoundingClientRect(this.viewPortElement);\n\n        if (isNullOrUndefined(elementRect) || isNullOrUndefined(viewPortRect)) {\n          return null;\n        }\n\n        if (param && param.Y === true) {\n          if (viewPortRect.top > elementRect.top) {\n            this.element.style.top = '0px';\n          } else if (viewPortRect.bottom < elementRect.bottom) {\n            this.element.style.top = parseInt(this.element.style.top, 10) - (elementRect.bottom - viewPortRect.bottom) + 'px';\n          }\n        }\n\n        if (param && param.X === true) {\n          if (viewPortRect.right < elementRect.right) {\n            this.element.style.left = parseInt(this.element.style.left, 10) - (elementRect.right - viewPortRect.right) + 'px';\n          } else if (viewPortRect.left > elementRect.left) {\n            this.element.style.left = parseInt(this.element.style.left, 10) + (viewPortRect.left - elementRect.left) + 'px';\n          }\n        }\n      }\n    }\n  };\n\n  Popup.prototype.checkCollision = function () {\n    var horz = this.collision.X;\n    var vert = this.collision.Y;\n\n    if (horz === 'none' && vert === 'none') {\n      return;\n    }\n\n    if (horz === 'flip' && vert === 'flip') {\n      this.callFlip({\n        X: true,\n        Y: true\n      });\n    } else if (horz === 'fit' && vert === 'fit') {\n      this.callFit({\n        X: true,\n        Y: true\n      });\n    } else {\n      if (horz === 'flip') {\n        this.callFlip({\n          X: true,\n          Y: false\n        });\n      } else if (vert === 'flip') {\n        this.callFlip({\n          Y: true,\n          X: false\n        });\n      }\n\n      if (horz === 'fit') {\n        this.callFit({\n          X: true,\n          Y: false\n        });\n      } else if (vert === 'fit') {\n        this.callFit({\n          X: false,\n          Y: true\n        });\n      }\n    }\n  };\n  /**\n   * Shows the popup element from screen.\n   *\n   * @returns {void}\n   * @param {AnimationModel} animationOptions - specifies the model\n   * @param { HTMLElement } relativeElement - To calculate the zIndex value dynamically.\n   */\n\n\n  Popup.prototype.show = function (animationOptions, relativeElement) {\n    var _this = this;\n\n    var relateToElement = this.getRelateToElement();\n\n    if (relateToElement.classList.contains('e-filemanager')) {\n      this.fmDialogContainer = this.element.getElementsByClassName('e-file-select-wrap')[0];\n    }\n\n    this.wireEvents();\n\n    if (!isNullOrUndefined(this.fmDialogContainer) && Browser.isIos) {\n      this.fmDialogContainer.style.display = 'block';\n    }\n\n    if (this.zIndex === 1000 || !isNullOrUndefined(relativeElement)) {\n      var zIndexElement = isNullOrUndefined(relativeElement) ? this.element : relativeElement;\n      this.zIndex = getZindexPartial(zIndexElement);\n      setStyleAttribute(this.element, {\n        'zIndex': this.zIndex\n      });\n    }\n\n    animationOptions = !isNullOrUndefined(animationOptions) && typeof animationOptions === 'object' ? animationOptions : this.showAnimation;\n\n    if (this.collision.X !== 'none' || this.collision.Y !== 'none') {\n      removeClass([this.element], CLASSNAMES.CLOSE);\n      addClass([this.element], CLASSNAMES.OPEN);\n      this.checkCollision();\n      removeClass([this.element], CLASSNAMES.OPEN);\n      addClass([this.element], CLASSNAMES.CLOSE);\n    }\n\n    if (!isNullOrUndefined(animationOptions)) {\n      animationOptions.begin = function () {\n        if (!_this.isDestroyed) {\n          removeClass([_this.element], CLASSNAMES.CLOSE);\n          addClass([_this.element], CLASSNAMES.OPEN);\n        }\n      };\n\n      animationOptions.end = function () {\n        if (!_this.isDestroyed) {\n          _this.trigger('open');\n        }\n      };\n\n      new Animation(animationOptions).animate(this.element);\n    } else {\n      removeClass([this.element], CLASSNAMES.CLOSE);\n      addClass([this.element], CLASSNAMES.OPEN);\n      this.trigger('open');\n    }\n  };\n  /**\n   * Hides the popup element from screen.\n   *\n   * @param {AnimationModel} animationOptions - To give the animation options.\n   * @returns {void}\n   */\n\n\n  Popup.prototype.hide = function (animationOptions) {\n    var _this = this;\n\n    animationOptions = !isNullOrUndefined(animationOptions) && typeof animationOptions === 'object' ? animationOptions : this.hideAnimation;\n\n    if (!isNullOrUndefined(animationOptions)) {\n      animationOptions.end = function () {\n        if (!_this.isDestroyed) {\n          removeClass([_this.element], CLASSNAMES.OPEN);\n          addClass([_this.element], CLASSNAMES.CLOSE);\n\n          _this.trigger('close');\n        }\n      };\n\n      new Animation(animationOptions).animate(this.element);\n    } else {\n      removeClass([this.element], CLASSNAMES.OPEN);\n      addClass([this.element], CLASSNAMES.CLOSE);\n      this.trigger('close');\n    }\n\n    this.unwireEvents();\n  };\n  /**\n   * Gets scrollable parent elements for the given element.\n   *\n   * @returns {void}\n   * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.\n   */\n\n\n  Popup.prototype.getScrollableParent = function (element) {\n    this.checkFixedParent(element);\n    return getScrollableParent(element, this.fixedParent);\n  };\n\n  Popup.prototype.checkFixedParent = function (element) {\n    var parent = element.parentElement;\n\n    while (parent && parent.tagName !== 'HTML') {\n      var parentStyle = getComputedStyle(parent);\n\n      if (parentStyle.position === 'fixed' && !isNullOrUndefined(this.element) && this.element.offsetParent && this.element.offsetParent.tagName === 'BODY' && getComputedStyle(this.element.offsetParent).overflow !== 'hidden') {\n        this.element.style.top = window.scrollY > parseInt(this.element.style.top, 10) ? formatUnit(window.scrollY - parseInt(this.element.style.top, 10)) : formatUnit(parseInt(this.element.style.top, 10) - window.scrollY);\n        this.element.style.position = 'fixed';\n        this.fixedParent = true;\n      }\n\n      parent = parent.parentElement;\n\n      if (!isNullOrUndefined(this.element) && isNullOrUndefined(this.element.offsetParent) && parentStyle.position === 'fixed' && this.element.style.position === 'fixed') {\n        this.fixedParent = true;\n      }\n    }\n  };\n\n  __decorate([Property('auto')], Popup.prototype, \"height\", void 0);\n\n  __decorate([Property('auto')], Popup.prototype, \"width\", void 0);\n\n  __decorate([Property(null)], Popup.prototype, \"content\", void 0);\n\n  __decorate([Property('container')], Popup.prototype, \"targetType\", void 0);\n\n  __decorate([Property(null)], Popup.prototype, \"viewPortElement\", void 0);\n\n  __decorate([Property({\n    X: 'none',\n    Y: 'none'\n  })], Popup.prototype, \"collision\", void 0);\n\n  __decorate([Property('')], Popup.prototype, \"relateTo\", void 0);\n\n  __decorate([Complex({}, PositionData)], Popup.prototype, \"position\", void 0);\n\n  __decorate([Property(0)], Popup.prototype, \"offsetX\", void 0);\n\n  __decorate([Property(0)], Popup.prototype, \"offsetY\", void 0);\n\n  __decorate([Property(1000)], Popup.prototype, \"zIndex\", void 0);\n\n  __decorate([Property(false)], Popup.prototype, \"enableRtl\", void 0);\n\n  __decorate([Property('reposition')], Popup.prototype, \"actionOnScroll\", void 0);\n\n  __decorate([Property(null)], Popup.prototype, \"showAnimation\", void 0);\n\n  __decorate([Property(null)], Popup.prototype, \"hideAnimation\", void 0);\n\n  __decorate([Event()], Popup.prototype, \"open\", void 0);\n\n  __decorate([Event()], Popup.prototype, \"close\", void 0);\n\n  __decorate([Event()], Popup.prototype, \"targetExitViewport\", void 0);\n\n  Popup = __decorate([NotifyPropertyChanges], Popup);\n  return Popup;\n}(Component);\n/**\n * Gets scrollable parent elements for the given element.\n *\n * @param { HTMLElement } element - Specify the element to get the scrollable parents of it.\n * @param {boolean} fixedParent - specifies the parent element\n * @private\n * @returns {void}\n */\n\n\nfunction getScrollableParent(element, fixedParent) {\n  var eleStyle = getComputedStyle(element);\n  var scrollParents = [];\n  var overflowRegex = /(auto|scroll)/;\n  var parent = element.parentElement;\n\n  while (parent && parent.tagName !== 'HTML') {\n    var parentStyle = getComputedStyle(parent);\n\n    if (!(eleStyle.position === 'absolute' && parentStyle.position === 'static') && overflowRegex.test(parentStyle.overflow + parentStyle.overflowY + parentStyle.overflowX)) {\n      scrollParents.push(parent);\n    }\n\n    parent = parent.parentElement;\n  }\n\n  if (!fixedParent) {\n    scrollParents.push(document);\n  }\n\n  return scrollParents;\n}\n/**\n * Gets the maximum z-index of the given element.\n *\n * @returns {void}\n * @param { HTMLElement } element - Specify the element to get the maximum z-index of it.\n * @private\n */\n\n\nfunction getZindexPartial(element) {\n  // upto body traversal\n  var parent = element.parentElement;\n  var parentZindex = [];\n\n  while (parent) {\n    if (parent.tagName !== 'BODY') {\n      var index = document.defaultView.getComputedStyle(parent, null).getPropertyValue('z-index');\n      var position = document.defaultView.getComputedStyle(parent, null).getPropertyValue('position');\n\n      if (index !== 'auto' && position !== 'static') {\n        parentZindex.push(index);\n      }\n\n      parent = parent.parentElement;\n    } else {\n      break;\n    }\n  }\n\n  var childrenZindex = [];\n\n  for (var i = 0; i < document.body.children.length; i++) {\n    if (!element.isEqualNode(document.body.children[i])) {\n      var index = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('z-index');\n      var position = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue('position');\n\n      if (index !== 'auto' && position !== 'static') {\n        childrenZindex.push(index);\n      }\n    }\n  }\n\n  childrenZindex.push('999');\n  var siblingsZindex = [];\n\n  if (!isNullOrUndefined(element.parentElement) && element.parentElement.tagName !== 'BODY') {\n    var childNodes = [].slice.call(element.parentElement.children);\n\n    for (var i = 0; i < childNodes.length; i++) {\n      if (!element.isEqualNode(childNodes[i])) {\n        var index = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue('z-index');\n        var position = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue('position');\n\n        if (index !== 'auto' && position !== 'static') {\n          siblingsZindex.push(index);\n        }\n      }\n    }\n  }\n\n  var finalValue = parentZindex.concat(childrenZindex, siblingsZindex); // eslint-disable-next-line\n\n  var currentZindexValue = Math.max.apply(Math, finalValue) + 1;\n  return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;\n}\n/**\n * Gets the maximum z-index of the page.\n *\n * @returns {void}\n * @param { HTMLElement } tagName - Specify the tagName to get the maximum z-index of it.\n * @private\n */\n\n\nfunction getMaxZindex(tagName) {\n  if (tagName === void 0) {\n    tagName = ['*'];\n  }\n\n  var maxZindex = [];\n\n  for (var i = 0; i < tagName.length; i++) {\n    var elements = document.getElementsByTagName(tagName[i]);\n\n    for (var i_1 = 0; i_1 < elements.length; i_1++) {\n      var index = document.defaultView.getComputedStyle(elements[i_1], null).getPropertyValue('z-index');\n      var position = document.defaultView.getComputedStyle(elements[i_1], null).getPropertyValue('position');\n\n      if (index !== 'auto' && position !== 'static') {\n        maxZindex.push(index);\n      }\n    }\n  } // eslint-disable-next-line\n\n\n  var currentZindexValue = Math.max.apply(Math, maxZindex) + 1;\n  return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;\n}\n/**\n * Popup Components\n */\n\n/**\n * Popup Components\n */\n\n/**\n * Resize library\n */\n\n/* eslint-disable */\n\n\nvar elementClass = ['north-west', 'north', 'north-east', 'west', 'east', 'south-west', 'south', 'south-east'];\nvar RESIZE_HANDLER = 'e-resize-handle';\nvar FOCUSED_HANDLER = 'e-focused-handle';\nvar DIALOG_RESIZABLE = 'e-dlg-resizable';\nvar RESTRICT_LEFT = ['e-restrict-left'];\nvar RESIZE_WITHIN_VIEWPORT = 'e-resize-viewport';\nvar dialogBorderResize = ['north', 'west', 'east', 'south'];\nvar targetElement;\nvar selectedHandler;\nvar originalWidth = 0;\nvar originalHeight = 0;\nvar originalX = 0;\nvar originalY = 0;\nvar originalMouseX = 0;\nvar originalMouseY = 0;\nvar minHeight;\nvar maxHeight;\nvar minWidth;\nvar maxWidth;\nvar containerElement;\nvar resizeStart = null;\nvar resize = null;\nvar resizeEnd = null;\n/* eslint-enable */\n\nvar resizeWestWidth;\nvar setLeft = true;\nvar previousWidth = 0;\nvar setWidth = true; // eslint-disable-next-line\n\nvar proxy;\n/**\n *\n * @param {ResizeArgs} args - specifies the resize args\n * @returns {void}\n */\n\nfunction createResize(args) {\n  resizeStart = args.resizeBegin;\n  resize = args.resizing;\n  resizeEnd = args.resizeComplete;\n  targetElement = getDOMElement(args.element);\n  containerElement = getDOMElement(args.boundary);\n  var directions = args.direction.split(' ');\n\n  for (var i = 0; i < directions.length; i++) {\n    if (dialogBorderResize.indexOf(directions[i]) >= 0 && directions[i]) {\n      setBorderResizeElm(directions[i]);\n    } else if (directions[i].trim() !== '') {\n      var resizeHandler = createElement('div', {\n        className: 'e-icons ' + RESIZE_HANDLER + ' ' + 'e-' + directions[i]\n      });\n      targetElement.appendChild(resizeHandler);\n    }\n  }\n\n  minHeight = args.minHeight;\n  minWidth = args.minWidth;\n  maxWidth = args.maxWidth;\n  maxHeight = args.maxHeight;\n\n  if (args.proxy && args.proxy.element && args.proxy.element.classList.contains('e-dialog')) {\n    wireEvents(args.proxy);\n  } else {\n    wireEvents();\n  }\n}\n/**\n *\n * @param {string} direction - specifies the string\n * @returns {void}\n */\n\n\nfunction setBorderResizeElm(direction) {\n  calculateValues();\n  var borderBottom = createElement('span', {\n    attrs: {\n      'unselectable': 'on',\n      'contenteditable': 'false'\n    }\n  });\n  borderBottom.setAttribute('class', 'e-dialog-border-resize e-' + direction);\n\n  if (direction === 'south') {\n    borderBottom.style.height = '2px';\n    borderBottom.style.width = '100%';\n    borderBottom.style.bottom = '0px';\n    borderBottom.style.left = '0px';\n  }\n\n  if (direction === 'north') {\n    borderBottom.style.height = '2px';\n    borderBottom.style.width = '100%';\n    borderBottom.style.top = '0px';\n    borderBottom.style.left = '0px';\n  }\n\n  if (direction === 'east') {\n    borderBottom.style.height = '100%';\n    borderBottom.style.width = '2px';\n    borderBottom.style.right = '0px';\n    borderBottom.style.top = '0px';\n  }\n\n  if (direction === 'west') {\n    borderBottom.style.height = '100%';\n    borderBottom.style.width = '2px';\n    borderBottom.style.left = '0px';\n    borderBottom.style.top = '0px';\n  }\n\n  targetElement.appendChild(borderBottom);\n}\n/**\n *\n * @param {string} element - specifies the element\n * @returns {HTMLElement} - returns the element\n */\n\n\nfunction getDOMElement(element) {\n  var domElement;\n\n  if (!isNullOrUndefined(element)) {\n    if (typeof element === 'string') {\n      domElement = document.querySelector(element);\n    } else {\n      domElement = element;\n    }\n  }\n\n  return domElement;\n} // eslint-disable-next-line\n\n\nfunction wireEvents(args) {\n  if (isNullOrUndefined(args)) {\n    args = this;\n  }\n\n  var resizers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);\n\n  for (var i = 0; i < resizers.length; i++) {\n    selectedHandler = resizers[i];\n    EventHandler.add(selectedHandler, 'mousedown', onMouseDown, args);\n    var eventName = Browser.info.name === 'msie' ? 'pointerdown' : 'touchstart';\n    EventHandler.add(selectedHandler, eventName, onTouchStart, args);\n  }\n\n  var borderResizers = targetElement.querySelectorAll('.e-dialog-border-resize');\n\n  if (!isNullOrUndefined(borderResizers)) {\n    for (var i = 0; i < borderResizers.length; i++) {\n      selectedHandler = borderResizers[i];\n      EventHandler.add(selectedHandler, 'mousedown', onMouseDown, args);\n      var eventName = Browser.info.name === 'msie' ? 'pointerdown' : 'touchstart';\n      EventHandler.add(selectedHandler, eventName, onTouchStart, args);\n    }\n  }\n}\n/* istanbul ignore next */\n\n/**\n *\n * @param {string} e - specifies the string\n * @returns {string} - returns the string\n */\n\n\nfunction getEventType(e) {\n  return e.indexOf('mouse') > -1 ? 'mouse' : 'touch';\n}\n/* istanbul ignore next */\n\n/**\n *\n * @param {MouseEvent} e - specifies the mouse event\n * @returns {void}\n */\n\n\nfunction onMouseDown(e) {\n  e.preventDefault();\n  targetElement = e.target.parentElement;\n  calculateValues();\n  originalMouseX = e.pageX;\n  originalMouseY = e.pageY;\n  e.target.classList.add(FOCUSED_HANDLER);\n\n  if (!isNullOrUndefined(resizeStart)) {\n    proxy = this;\n\n    if (resizeStart(e, proxy) === true) {\n      return;\n    }\n  }\n\n  if (this.targetEle && targetElement && targetElement.querySelector('.' + DIALOG_RESIZABLE)) {\n    containerElement = this.target === ('body' || 'document.body' || document.body) ? null : this.targetEle;\n    maxWidth = this.targetEle.clientWidth;\n    maxHeight = this.targetEle.clientHeight;\n  }\n\n  var target = isNullOrUndefined(containerElement) ? document : containerElement;\n  EventHandler.add(target, 'mousemove', onMouseMove, this);\n  EventHandler.add(document, 'mouseup', onMouseUp, this);\n\n  for (var i = 0; i < RESTRICT_LEFT.length; i++) {\n    if (targetElement.classList.contains(RESTRICT_LEFT[i])) {\n      setLeft = false;\n    } else {\n      setLeft = true;\n    }\n  }\n}\n/* istanbul ignore next */\n\n/**\n *\n * @param {MouseEvent} e - specifies the event\n * @returns {void}\n */\n\n\nfunction onMouseUp(e) {\n  var touchMoveEvent = Browser.info.name === 'msie' ? 'pointermove' : 'touchmove';\n  var touchEndEvent = Browser.info.name === 'msie' ? 'pointerup' : 'touchend';\n  var target = isNullOrUndefined(containerElement) ? document : containerElement;\n  var eventName = Browser.info.name === 'msie' ? 'pointerdown' : 'touchstart';\n  EventHandler.remove(target, 'mousemove', onMouseMove);\n  EventHandler.remove(target, touchMoveEvent, onMouseMove);\n  EventHandler.remove(target, eventName, onMouseMove);\n\n  if (!isNullOrUndefined(document.body.querySelector('.' + FOCUSED_HANDLER))) {\n    document.body.querySelector('.' + FOCUSED_HANDLER).classList.remove(FOCUSED_HANDLER);\n  }\n\n  if (!isNullOrUndefined(resizeEnd)) {\n    proxy = this;\n    resizeEnd(e, proxy);\n  }\n\n  EventHandler.remove(document, 'mouseup', onMouseUp);\n  EventHandler.remove(document, touchEndEvent, onMouseUp);\n}\n/* istanbul ignore next */\n\n/**\n * @returns {void}\n */\n\n\nfunction calculateValues() {\n  originalWidth = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('width').replace('px', ''));\n  originalHeight = parseFloat(getComputedStyle(targetElement, null).getPropertyValue('height').replace('px', ''));\n  originalX = targetElement.getBoundingClientRect().left;\n  originalY = targetElement.getBoundingClientRect().top;\n}\n/* istanbul ignore next */\n\n/**\n *\n * @param {MouseEvent} e - specifies the event\n * @returns {void}\n */\n\n\nfunction onTouchStart(e) {\n  targetElement = e.target.parentElement;\n  calculateValues();\n  var dialogResizeElement = targetElement.classList.contains('e-dialog');\n\n  if ((e.target.classList.contains(RESIZE_HANDLER) || e.target.classList.contains('e-dialog-border-resize')) && dialogResizeElement) {\n    e.target.classList.add(FOCUSED_HANDLER);\n  }\n\n  var coordinates = e.touches ? e.changedTouches[0] : e;\n  originalMouseX = coordinates.pageX;\n  originalMouseY = coordinates.pageY;\n\n  if (!isNullOrUndefined(resizeStart)) {\n    proxy = this;\n\n    if (resizeStart(e, proxy) === true) {\n      return;\n    }\n  }\n\n  var touchMoveEvent = Browser.info.name === 'msie' ? 'pointermove' : 'touchmove';\n  var touchEndEvent = Browser.info.name === 'msie' ? 'pointerup' : 'touchend';\n  var target = isNullOrUndefined(containerElement) ? document : containerElement;\n  EventHandler.add(target, touchMoveEvent, onMouseMove, this);\n  EventHandler.add(document, touchEndEvent, onMouseUp, this);\n}\n/* istanbul ignore next */\n\n/**\n *\n * @param {MouseEvent} e - specifies the event\n * @returns {void}\n */\n\n\nfunction onMouseMove(e) {\n  if (e.target.classList.contains(RESIZE_HANDLER) && e.target.classList.contains(FOCUSED_HANDLER)) {\n    selectedHandler = e.target;\n  } else if (!isNullOrUndefined(document.body.querySelector('.' + FOCUSED_HANDLER))) {\n    selectedHandler = document.body.querySelector('.' + FOCUSED_HANDLER);\n  }\n\n  if (!isNullOrUndefined(selectedHandler)) {\n    var resizeTowards = '';\n\n    for (var i = 0; i < elementClass.length; i++) {\n      if (selectedHandler.classList.contains('e-' + elementClass[i])) {\n        resizeTowards = elementClass[i];\n      }\n    }\n\n    if (!isNullOrUndefined(resize)) {\n      proxy = this;\n      resize(e, proxy);\n    }\n\n    switch (resizeTowards) {\n      case 'south':\n        resizeSouth(e);\n        break;\n\n      case 'north':\n        resizeNorth(e);\n        break;\n\n      case 'west':\n        resizeWest(e);\n        break;\n\n      case 'east':\n        resizeEast(e);\n        break;\n\n      case 'south-east':\n        resizeSouth(e);\n        resizeEast(e);\n        break;\n\n      case 'south-west':\n        resizeSouth(e);\n        resizeWest(e);\n        break;\n\n      case 'north-east':\n        resizeNorth(e);\n        resizeEast(e);\n        break;\n\n      case 'north-west':\n        resizeNorth(e);\n        resizeWest(e);\n        break;\n\n      default:\n        break;\n    }\n  }\n}\n/* istanbul ignore next */\n\n/**\n *\n * @param {HTMLElement} element - specifies the eleemnt\n * @returns {ClientRect} - returns the client\n */\n\n\nfunction getClientRectValues(element) {\n  return element.getBoundingClientRect();\n}\n/* istanbul ignore next */\n// eslint-disable-next-line\n\n\nfunction resizeSouth(e) {\n  var documentHeight = document.documentElement.clientHeight;\n  var calculateValue = false;\n  var coordinates = e.touches ? e.changedTouches[0] : e;\n  var currentpageY = coordinates.pageY;\n  var targetRectValues = getClientRectValues(targetElement);\n  var containerRectValues;\n\n  if (!isNullOrUndefined(containerElement)) {\n    containerRectValues = getClientRectValues(containerElement);\n  }\n\n  if (!isNullOrUndefined(containerElement)) {\n    calculateValue = true;\n  } else if (isNullOrUndefined(containerElement) && (documentHeight - currentpageY >= 0 || targetRectValues.top < 0)) {\n    calculateValue = true;\n  }\n\n  var calculatedHeight = originalHeight + (currentpageY - originalMouseY);\n  calculatedHeight = calculatedHeight > minHeight ? calculatedHeight : minHeight;\n  var containerTop = 0;\n\n  if (!isNullOrUndefined(containerElement)) {\n    containerTop = containerRectValues.top;\n  }\n\n  var borderValue = isNullOrUndefined(containerElement) ? 0 : containerElement.offsetHeight - containerElement.clientHeight;\n  var topWithoutborder = targetRectValues.top - containerTop - borderValue / 2;\n  topWithoutborder = topWithoutborder < 0 ? 0 : topWithoutborder;\n\n  if (targetRectValues.top > 0 && topWithoutborder + calculatedHeight > maxHeight) {\n    calculateValue = false;\n\n    if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {\n      return;\n    }\n\n    targetElement.style.height = maxHeight - parseInt(topWithoutborder.toString(), 10) + 'px';\n    return;\n  }\n\n  var targetTop = 0;\n\n  if (calculateValue) {\n    if (targetRectValues.top < 0 && documentHeight + (targetRectValues.height + targetRectValues.top) > 0) {\n      targetTop = targetRectValues.top;\n\n      if (calculatedHeight + targetTop <= 30) {\n        calculatedHeight = targetRectValues.height - (targetRectValues.height + targetRectValues.top) + 30;\n      }\n    }\n\n    if (calculatedHeight + targetRectValues.top >= maxHeight) {\n      targetElement.style.height = targetRectValues.height + (documentHeight - (targetRectValues.height + targetRectValues.top)) + 'px';\n    }\n\n    var calculatedTop = isNullOrUndefined(containerElement) ? targetTop : topWithoutborder;\n\n    if (calculatedHeight >= minHeight && calculatedHeight + calculatedTop <= maxHeight) {\n      targetElement.style.height = calculatedHeight + 'px';\n    }\n  }\n}\n/* istanbul ignore next */\n// eslint-disable-next-line\n\n\nfunction resizeNorth(e) {\n  var calculateValue = false;\n  var boundaryRectValues;\n  var pageY = getEventType(e.type) === 'mouse' ? e.pageY : e.touches[0].pageY;\n  var targetRectValues = getClientRectValues(targetElement);\n\n  if (!isNullOrUndefined(containerElement)) {\n    boundaryRectValues = getClientRectValues(containerElement);\n  }\n\n  if (!isNullOrUndefined(containerElement) && targetRectValues.top - boundaryRectValues.top > 0) {\n    calculateValue = true;\n  } else if (isNullOrUndefined(containerElement) && pageY > 0) {\n    calculateValue = true;\n  }\n\n  var currentHeight = originalHeight - (pageY - originalMouseY);\n\n  if (calculateValue) {\n    if (currentHeight >= minHeight && currentHeight <= maxHeight) {\n      var containerTop = 0;\n\n      if (!isNullOrUndefined(containerElement)) {\n        containerTop = boundaryRectValues.top;\n      }\n\n      var top_1 = originalY - containerTop + (pageY - originalMouseY);\n      top_1 = top_1 > 0 ? top_1 : 1;\n      targetElement.style.height = currentHeight + 'px';\n      targetElement.style.top = top_1 + 'px';\n    }\n  }\n}\n/* istanbul ignore next */\n// eslint-disable-next-line\n\n\nfunction resizeWest(e) {\n  var documentWidth = document.documentElement.clientWidth;\n  var calculateValue = false;\n  var rectValues;\n\n  if (!isNullOrUndefined(containerElement)) {\n    rectValues = getClientRectValues(containerElement);\n  }\n\n  var pageX = getEventType(e.type) === 'mouse' ? e.pageX : e.touches[0].pageX;\n  var targetRectValues = getClientRectValues(targetElement);\n  var borderValue = isNullOrUndefined(containerElement) ? 0 : containerElement.offsetWidth - containerElement.clientWidth;\n  /* eslint-disable */\n\n  var left = isNullOrUndefined(containerElement) ? 0 : rectValues.left;\n  var containerWidth = isNullOrUndefined(containerElement) ? 0 : rectValues.width;\n  /* eslint-enable */\n\n  if (isNullOrUndefined(resizeWestWidth)) {\n    if (!isNullOrUndefined(containerElement)) {\n      resizeWestWidth = targetRectValues.left - left - borderValue / 2 + targetRectValues.width;\n      resizeWestWidth = resizeWestWidth + (containerWidth - borderValue - resizeWestWidth);\n    } else {\n      resizeWestWidth = documentWidth;\n    }\n  }\n\n  if (!isNullOrUndefined(containerElement) && Math.floor(targetRectValues.left - rectValues.left + targetRectValues.width + (rectValues.right - targetRectValues.right)) - borderValue <= maxWidth) {\n    calculateValue = true;\n  } else if (isNullOrUndefined(containerElement) && pageX >= 0) {\n    calculateValue = true;\n  }\n\n  var calculatedWidth = originalWidth - (pageX - originalMouseX);\n\n  if (setLeft) {\n    calculatedWidth = calculatedWidth > resizeWestWidth ? resizeWestWidth : calculatedWidth;\n  }\n\n  if (calculateValue) {\n    if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {\n      var containerLeft = 0;\n\n      if (!isNullOrUndefined(containerElement)) {\n        containerLeft = rectValues.left;\n      }\n\n      var left_1 = originalX - containerLeft + (pageX - originalMouseX);\n      left_1 = left_1 > 0 ? left_1 : 1;\n\n      if (calculatedWidth !== previousWidth && setWidth) {\n        targetElement.style.width = calculatedWidth + 'px';\n      }\n\n      if (setLeft) {\n        targetElement.style.left = left_1 + 'px';\n\n        if (left_1 === 1) {\n          setWidth = false;\n        } else {\n          setWidth = true;\n        }\n      }\n    }\n  }\n\n  previousWidth = calculatedWidth;\n}\n/* istanbul ignore next */\n// eslint-disable-next-line\n\n\nfunction resizeEast(e) {\n  var documentWidth = document.documentElement.clientWidth;\n  var calculateValue = false;\n  var containerRectValues;\n\n  if (!isNullOrUndefined(containerElement)) {\n    containerRectValues = getClientRectValues(containerElement);\n  }\n\n  var coordinates = e.touches ? e.changedTouches[0] : e;\n  var pageX = coordinates.pageX;\n  var targetRectValues = getClientRectValues(targetElement);\n\n  if (!isNullOrUndefined(containerElement) && (targetRectValues.left - containerRectValues.left + targetRectValues.width <= maxWidth || targetRectValues.right - containerRectValues.left >= targetRectValues.width)) {\n    calculateValue = true;\n  } else if (isNullOrUndefined(containerElement) && documentWidth - pageX > 0) {\n    calculateValue = true;\n  }\n\n  var calculatedWidth = originalWidth + (pageX - originalMouseX);\n  var containerLeft = 0;\n\n  if (!isNullOrUndefined(containerElement)) {\n    containerLeft = containerRectValues.left;\n  }\n\n  if (targetRectValues.left - containerLeft + calculatedWidth > maxWidth) {\n    calculateValue = false;\n\n    if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {\n      return;\n    }\n\n    targetElement.style.width = maxWidth - (targetRectValues.left - containerLeft) + 'px';\n  }\n\n  if (calculateValue) {\n    if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {\n      targetElement.style.width = calculatedWidth + 'px';\n    }\n  }\n}\n/* istanbul ignore next */\n\n/**\n *\n * @param {number} minimumHeight - specifies the number\n * @returns {void}\n */\n\n\nfunction setMinHeight(minimumHeight) {\n  minHeight = minimumHeight;\n}\n/**\n *\n * @param {number} value - specifies the number value\n * @returns {void}\n */\n\n\nfunction setMaxWidth(value) {\n  maxWidth = value;\n}\n/**\n *\n * @param {number} value - specifies the number value\n * @returns {void}\n */\n\n\nfunction setMaxHeight(value) {\n  maxHeight = value;\n}\n/**\n * @returns {void}\n */\n\n\nfunction removeResize() {\n  var handlers = targetElement.querySelectorAll('.' + RESIZE_HANDLER);\n\n  for (var i = 0; i < handlers.length; i++) {\n    detach(handlers[i]);\n  }\n\n  var borderResizers = targetElement.querySelectorAll('.e-dialog-border-resize');\n\n  if (!isNullOrUndefined(borderResizers)) {\n    for (var i = 0; i < borderResizers.length; i++) {\n      detach(borderResizers[i]);\n    }\n  }\n}\n\nvar __extends$1 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar ButtonProps =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$1(ButtonProps, _super);\n\n  function ButtonProps() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$1([Property(true)], ButtonProps.prototype, \"isFlat\", void 0);\n\n  __decorate$1([Property()], ButtonProps.prototype, \"buttonModel\", void 0);\n\n  __decorate$1([Property('Button')], ButtonProps.prototype, \"type\", void 0);\n\n  __decorate$1([Event()], ButtonProps.prototype, \"click\", void 0);\n\n  return ButtonProps;\n}(ChildProperty);\n/**\n * Configures the animation properties for both open and close the dialog.\n */\n\n\nvar AnimationSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$1(AnimationSettings, _super);\n\n  function AnimationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$1([Property('Fade')], AnimationSettings.prototype, \"effect\", void 0);\n\n  __decorate$1([Property(400)], AnimationSettings.prototype, \"duration\", void 0);\n\n  __decorate$1([Property(0)], AnimationSettings.prototype, \"delay\", void 0);\n\n  return AnimationSettings;\n}(ChildProperty);\n\nvar ROOT = 'e-dialog';\nvar RTL = 'e-rtl';\nvar DLG_HEADER_CONTENT = 'e-dlg-header-content';\nvar DLG_HEADER = 'e-dlg-header';\nvar DLG_FOOTER_CONTENT = 'e-footer-content';\nvar MODAL_DLG = 'e-dlg-modal';\nvar DLG_CONTENT = 'e-dlg-content';\nvar DLG_CLOSE_ICON = 'e-icon-dlg-close';\nvar DLG_OVERLAY = 'e-dlg-overlay';\nvar DLG_TARGET = 'e-dlg-target';\nvar DLG_CONTAINER = 'e-dlg-container';\nvar SCROLL_DISABLED = 'e-scroll-disabled';\nvar DLG_PRIMARY_BUTTON = 'e-primary';\nvar ICON = 'e-icons';\nvar POPUP_ROOT = 'e-popup';\nvar DEVICE = 'e-device';\nvar FULLSCREEN = 'e-dlg-fullscreen';\nvar DLG_CLOSE_ICON_BTN = 'e-dlg-closeicon-btn';\nvar DLG_HIDE = 'e-popup-close';\nvar DLG_SHOW = 'e-popup-open';\nvar DLG_UTIL_DEFAULT_TITLE = 'Information';\nvar DLG_UTIL_ROOT = 'e-scroll-disabled';\nvar DLG_UTIL_ALERT = 'e-alert-dialog';\nvar DLG_UTIL_CONFIRM = 'e-confirm-dialog';\nvar DLG_RESIZABLE = 'e-dlg-resizable';\nvar DLG_RESTRICT_LEFT_VALUE = 'e-restrict-left';\nvar DLG_RESTRICT_WIDTH_VALUE = 'e-resize-viewport';\nvar DLG_REF_ELEMENT = 'e-dlg-ref-element';\nvar DLG_USER_ACTION_CLOSED = 'user action';\nvar DLG_CLOSE_ICON_CLOSED = 'close icon';\nvar DLG_ESCAPE_CLOSED = 'escape';\nvar DLG_OVERLAYCLICK_CLOSED = 'overlayClick';\nvar DLG_DRAG = 'e-draggable';\n/**\n * Represents the dialog component that displays the information and get input from the user.\n * Two types of dialog components are `Modal and Modeless (non-modal)` depending on its interaction with parent application.\n * ```html\n * <div id=\"dialog\"></div>\n * ```\n * ```typescript\n * <script>\n *   var dialogObj = new Dialog({ header: 'Dialog' });\n *   dialogObj.appendTo(\"#dialog\");\n * </script>\n * ```\n */\n\nvar Dialog =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$1(Dialog, _super);\n  /*\n   * * Constructor for creating the widget\n   *\n   * @param\n   * @param\n   * @hidden\n   */\n\n\n  function Dialog(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.needsID = true;\n    return _this;\n  }\n  /**\n   *Initialize the control rendering\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Dialog.prototype.render = function () {\n    this.initialize();\n    this.initRender();\n    this.wireEvents();\n\n    if (this.width === '100%') {\n      this.element.style.width = '';\n    }\n\n    if (this.minHeight !== '') {\n      this.element.style.minHeight = formatUnit(this.minHeight);\n    }\n\n    if (this.enableResize) {\n      this.setResize();\n\n      if (this.animationSettings.effect === 'None') {\n        this.getMinHeight();\n      }\n    }\n\n    this.renderComplete();\n  };\n\n  Dialog.prototype.initializeValue = function () {\n    this.dlgClosedBy = DLG_USER_ACTION_CLOSED;\n  };\n  /**\n   *Initialize the event handler\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Dialog.prototype.preRender = function () {\n    var _this = this;\n\n    this.initializeValue();\n    this.headerContent = null;\n    this.allowMaxHeight = true;\n    this.preventVisibility = true;\n    this.clonedEle = this.element.cloneNode(true);\n\n    this.closeIconClickEventHandler = function (event) {\n      _this.dlgClosedBy = DLG_CLOSE_ICON_CLOSED;\n\n      _this.hide(event);\n    };\n\n    this.dlgOverlayClickEventHandler = function (event) {\n      _this.dlgClosedBy = DLG_OVERLAYCLICK_CLOSED;\n      event.preventFocus = false;\n\n      _this.trigger('overlayClick', event, function (overlayClickEventArgs) {\n        if (!overlayClickEventArgs.preventFocus) {\n          _this.focusContent();\n        }\n\n        _this.dlgClosedBy = DLG_USER_ACTION_CLOSED;\n      });\n    };\n\n    var localeText = {\n      close: 'Close'\n    };\n    this.l10n = new L10n('dialog', localeText, this.locale);\n    this.checkPositionData();\n\n    if (isNullOrUndefined(this.target)) {\n      var prevOnChange = this.isProtectedOnChange;\n      this.isProtectedOnChange = true;\n      this.target = document.body;\n      this.isProtectedOnChange = prevOnChange;\n    }\n  };\n\n  Dialog.prototype.updatePersistData = function () {\n    if (this.enablePersistence) {\n      this.setProperties({\n        width: parseFloat(this.element.style.width),\n        height: parseFloat(this.element.style.height),\n        position: {\n          X: parseFloat(this.dragObj.element.style.left),\n          Y: parseFloat(this.dragObj.element.style.top)\n        }\n      }, true);\n    }\n  };\n\n  Dialog.prototype.isNumberValue = function (value) {\n    var isNumber = /^[-+]?\\d*\\.?\\d+$/.test(value);\n    return isNumber;\n  };\n\n  Dialog.prototype.checkPositionData = function () {\n    if (!isNullOrUndefined(this.position)) {\n      if (!isNullOrUndefined(this.position.X) && typeof this.position.X !== 'number') {\n        var isNumber = this.isNumberValue(this.position.X);\n\n        if (isNumber) {\n          var prevOnChange = this.isProtectedOnChange;\n          this.isProtectedOnChange = true;\n          this.position.X = parseFloat(this.position.X);\n          this.isProtectedOnChange = prevOnChange;\n        }\n      }\n\n      if (!isNullOrUndefined(this.position.Y) && typeof this.position.Y !== 'number') {\n        var isNumber = this.isNumberValue(this.position.Y);\n\n        if (isNumber) {\n          var prevOnChange = this.isProtectedOnChange;\n          this.isProtectedOnChange = true;\n          this.position.Y = parseFloat(this.position.Y);\n          this.isProtectedOnChange = prevOnChange;\n        }\n      }\n    }\n  };\n\n  Dialog.prototype.getEle = function (list, selector) {\n    var element = undefined;\n\n    for (var i = 0; i < list.length; i++) {\n      if (list[i].classList.contains(selector)) {\n        element = list[i];\n        break;\n      }\n    }\n\n    return element;\n  };\n  /* istanbul ignore next */\n\n\n  Dialog.prototype.getMinHeight = function () {\n    var computedHeaderHeight = '0px';\n    var computedFooterHeight = '0px';\n\n    if (!isNullOrUndefined(this.element.querySelector('.' + DLG_HEADER_CONTENT))) {\n      computedHeaderHeight = getComputedStyle(this.headerContent).height;\n    }\n\n    var footerEle = this.getEle(this.element.children, DLG_FOOTER_CONTENT);\n\n    if (!isNullOrUndefined(footerEle)) {\n      computedFooterHeight = getComputedStyle(footerEle).height;\n    }\n\n    var headerHeight = parseInt(computedHeaderHeight.slice(0, computedHeaderHeight.indexOf('p')), 10);\n    var footerHeight = parseInt(computedFooterHeight.slice(0, computedFooterHeight.indexOf('p')), 10);\n    setMinHeight(headerHeight + 30 + (isNaN(footerHeight) ? 0 : footerHeight));\n    return headerHeight + 30 + footerHeight;\n  };\n\n  Dialog.prototype.onResizeStart = function (args, dialogObj) {\n    dialogObj.trigger('resizeStart', args);\n    return args.cancel;\n  };\n\n  Dialog.prototype.onResizing = function (args, dialogObj) {\n    dialogObj.trigger('resizing', args);\n  };\n\n  Dialog.prototype.onResizeComplete = function (args, dialogObj) {\n    dialogObj.trigger('resizeStop', args);\n    this.updatePersistData();\n  };\n\n  Dialog.prototype.setResize = function () {\n    if (this.enableResize) {\n      if (this.isBlazorServerRender() && !isNullOrUndefined(this.element.querySelector('.e-icons.e-resize-handle'))) {\n        return;\n      }\n\n      this.element.classList.add(DLG_RESIZABLE);\n      var computedHeight = getComputedStyle(this.element).minHeight;\n      var computedWidth = getComputedStyle(this.element).minWidth;\n      var direction = '';\n\n      for (var i = 0; i < this.resizeHandles.length; i++) {\n        if (this.resizeHandles[i] === 'All') {\n          direction = 'south north east west north-east north-west south-east south-west';\n          break;\n        } else {\n          var directionValue = '';\n\n          switch (this.resizeHandles[i].toString()) {\n            case 'SouthEast':\n              directionValue = 'south-east';\n              break;\n\n            case 'SouthWest':\n              directionValue = 'south-west';\n              break;\n\n            case 'NorthEast':\n              directionValue = 'north-east';\n              break;\n\n            case 'NorthWest':\n              directionValue = 'north-west';\n              break;\n\n            default:\n              directionValue = this.resizeHandles[i].toString();\n              break;\n          }\n\n          direction += directionValue.toLocaleLowerCase() + ' ';\n        }\n      }\n\n      if (this.enableRtl && direction.trim() === 'south-east') {\n        direction = 'south-west';\n      } else if (this.enableRtl && direction.trim() === 'south-west') {\n        direction = 'south-east';\n      }\n\n      if (this.isModal && this.enableRtl) {\n        this.element.classList.add(DLG_RESTRICT_LEFT_VALUE);\n      } else if (this.isModal && this.target === document.body) {\n        this.element.classList.add(DLG_RESTRICT_WIDTH_VALUE);\n      }\n\n      createResize({\n        element: this.element,\n        direction: direction,\n        minHeight: parseInt(computedHeight.slice(0, computedWidth.indexOf('p')), 10),\n        maxHeight: this.targetEle.clientHeight,\n        minWidth: parseInt(computedWidth.slice(0, computedWidth.indexOf('p')), 10),\n        maxWidth: this.targetEle.clientWidth,\n        boundary: this.target === document.body ? null : this.targetEle,\n        resizeBegin: this.onResizeStart.bind(this),\n        resizeComplete: this.onResizeComplete.bind(this),\n        resizing: this.onResizing.bind(this),\n        proxy: this\n      });\n      this.wireWindowResizeEvent();\n    } else {\n      removeResize();\n      this.unWireWindowResizeEvent();\n\n      if (this.isModal) {\n        this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);\n      } else {\n        this.element.classList.remove(DLG_RESTRICT_WIDTH_VALUE);\n      }\n\n      this.element.classList.remove(DLG_RESIZABLE);\n    }\n  };\n\n  Dialog.prototype.getFocusElement = function (target) {\n    var value = 'input,select,textarea,button:enabled,a,[contenteditable=\"true\"],[tabindex]';\n    var items = target.querySelectorAll(value);\n    return {\n      element: items[items.length - 1]\n    };\n  };\n  /* istanbul ignore next */\n\n\n  Dialog.prototype.keyDown = function (event) {\n    var _this = this;\n\n    if (event.keyCode === 9) {\n      if (this.isModal) {\n        var buttonObj = void 0;\n\n        if (!isNullOrUndefined(this.btnObj)) {\n          buttonObj = this.btnObj[this.btnObj.length - 1];\n        }\n\n        if (isNullOrUndefined(this.btnObj) && !isNullOrUndefined(this.ftrTemplateContent)) {\n          buttonObj = this.getFocusElement(this.ftrTemplateContent);\n        }\n\n        if (isNullOrUndefined(this.btnObj) && isNullOrUndefined(this.ftrTemplateContent) && !isNullOrUndefined(this.contentEle)) {\n          buttonObj = this.getFocusElement(this.contentEle);\n        }\n\n        if (!isNullOrUndefined(buttonObj) && document.activeElement === buttonObj.element && !event.shiftKey) {\n          event.preventDefault();\n          this.focusableElements(this.element).focus();\n        }\n\n        if (document.activeElement === this.focusableElements(this.element) && event.shiftKey) {\n          event.preventDefault();\n\n          if (!isNullOrUndefined(buttonObj)) {\n            buttonObj.element.focus();\n          }\n        }\n      }\n    }\n\n    var element = document.activeElement;\n    var isTagName = ['input', 'textarea'].indexOf(element.tagName.toLowerCase()) > -1;\n    var isContentEdit = false;\n\n    if (!isTagName) {\n      isContentEdit = element.hasAttribute('contenteditable') && element.getAttribute('contenteditable') === 'true';\n    }\n\n    if (event.keyCode === 27 && this.closeOnEscape) {\n      this.dlgClosedBy = DLG_ESCAPE_CLOSED;\n      var query = document.querySelector('.e-popup-open:not(.e-dialog)'); // 'document.querySelector' is used to find the elements rendered based on body\n\n      if (!(!isNullOrUndefined(query) && !query.classList.contains('e-toolbar-pop'))) {\n        this.hide(event);\n      }\n    }\n\n    if (event.keyCode === 13 && !event.ctrlKey && element.tagName.toLowerCase() !== 'textarea' && isTagName && !isNullOrUndefined(this.primaryButtonEle) || event.keyCode === 13 && event.ctrlKey && (element.tagName.toLowerCase() === 'textarea' || isContentEdit) && !isNullOrUndefined(this.primaryButtonEle)) {\n      var buttonIndex_1;\n      var firstPrimary = this.buttons.some(function (data, index) {\n        buttonIndex_1 = index; // eslint-disable-next-line\n\n        var buttonModel = data.buttonModel;\n        return !isNullOrUndefined(buttonModel) && buttonModel.isPrimary === true;\n      });\n\n      if (firstPrimary && typeof this.buttons[buttonIndex_1].click === 'function') {\n        setTimeout(function () {\n          _this.buttons[buttonIndex_1].click.call(_this, event);\n        });\n      }\n    }\n  };\n  /**\n   * Initialize the control rendering\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Dialog.prototype.initialize = function () {\n    if (!isNullOrUndefined(this.target)) {\n      this.targetEle = typeof this.target === 'string' ? document.querySelector(this.target) : this.target;\n    }\n\n    if (!this.isBlazorServerRender()) {\n      addClass([this.element], ROOT);\n    }\n\n    if (Browser.isDevice) {\n      addClass([this.element], DEVICE);\n    }\n\n    if (!this.isBlazorServerRender()) {\n      this.setCSSClass();\n    }\n\n    this.setMaxHeight();\n  };\n  /**\n   * Initialize the rendering\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Dialog.prototype.initRender = function () {\n    var _this = this;\n\n    this.initialRender = true;\n\n    if (!this.isBlazorServerRender()) {\n      attributes(this.element, {\n        role: 'dialog'\n      });\n    }\n\n    if (this.zIndex === 1000) {\n      this.setzIndex(this.element, false);\n      this.calculatezIndex = true;\n    } else {\n      this.calculatezIndex = false;\n    }\n\n    if (this.isBlazorServerRender() && isNullOrUndefined(this.headerContent)) {\n      this.headerContent = this.element.getElementsByClassName('e-dlg-header-content')[0];\n    }\n\n    if (this.isBlazorServerRender() && isNullOrUndefined(this.contentEle)) {\n      this.contentEle = this.element.querySelector('#' + this.element.id + '_dialog-content');\n    }\n\n    if (!this.isBlazorServerRender()) {\n      this.setTargetContent();\n\n      if (this.header !== '' && !isNullOrUndefined(this.header)) {\n        this.setHeader();\n      }\n\n      this.renderCloseIcon();\n      this.setContent();\n\n      if (this.footerTemplate !== '' && !isNullOrUndefined(this.footerTemplate)) {\n        this.setFooterTemplate();\n      } else if (!isNullOrUndefined(this.buttons[0].buttonModel)) {\n        this.setButton();\n      }\n    }\n\n    if (this.isBlazorServerRender()) {\n      if (!isNullOrUndefined(this.buttons[0].buttonModel) && this.footerTemplate === '') {\n        this.setButton();\n      }\n    }\n\n    if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {\n      this.setAllowDragging();\n    }\n\n    if (!this.isBlazorServerRender()) {\n      attributes(this.element, {\n        'aria-modal': this.isModal ? 'true' : 'false'\n      });\n\n      if (this.isModal) {\n        this.setIsModal();\n      }\n    }\n\n    if (this.isBlazorServerRender() && isNullOrUndefined(this.dlgContainer)) {\n      this.dlgContainer = this.element.parentElement;\n\n      for (var i = 0, childNodes = this.dlgContainer.children; i < childNodes.length; i++) {\n        if (childNodes[i].classList.contains('e-dlg-overlay')) {\n          this.dlgOverlay = childNodes[i];\n        }\n      }\n    }\n\n    if (this.element.classList.contains(DLG_UTIL_ALERT) !== true && this.element.classList.contains(DLG_UTIL_CONFIRM) !== true && !isNullOrUndefined(this.element.parentElement)) {\n      var parentEle = this.isModal ? this.dlgContainer.parentElement : this.element.parentElement;\n      this.refElement = this.createElement('div', {\n        className: DLG_REF_ELEMENT\n      });\n      parentEle.insertBefore(this.refElement, this.isModal ? this.dlgContainer : this.element);\n    }\n\n    if (!isNullOrUndefined(this.targetEle)) {\n      // eslint-disable-next-line\n      this.isModal ? this.targetEle.appendChild(this.dlgContainer) : this.targetEle.appendChild(this.element);\n    }\n\n    this.popupObj = new Popup(this.element, {\n      height: this.height,\n      width: this.width,\n      zIndex: this.zIndex,\n      relateTo: this.target,\n      actionOnScroll: 'none',\n      enableRtl: this.enableRtl,\n      // eslint-disable-next-line\n      open: function (event) {\n        var eventArgs = {\n          container: _this.isModal ? _this.dlgContainer : _this.element,\n          element: _this.element,\n          target: _this.target,\n          preventFocus: false\n        };\n\n        if (_this.enableResize) {\n          _this.resetResizeIcon();\n        }\n\n        _this.trigger('open', eventArgs, function (openEventArgs) {\n          if (!openEventArgs.preventFocus) {\n            _this.focusContent();\n          }\n        });\n      },\n      // eslint-disable-next-line\n      close: function (event) {\n        if (_this.isModal) {\n          addClass([_this.dlgOverlay], 'e-fade');\n        }\n\n        _this.unBindEvent(_this.element);\n\n        if (_this.isModal) {\n          _this.dlgContainer.style.display = 'none';\n        }\n\n        _this.trigger('close', _this.closeArgs);\n\n        var activeEle = document.activeElement;\n\n        if (!isNullOrUndefined(activeEle) && !isNullOrUndefined(activeEle.blur)) {\n          activeEle.blur();\n        }\n\n        if (!isNullOrUndefined(_this.storeActiveElement) && !isNullOrUndefined(_this.storeActiveElement.focus)) {\n          _this.storeActiveElement.focus();\n        }\n      }\n    });\n    this.positionChange();\n    this.setEnableRTL();\n\n    if (!this.isBlazorServerRender()) {\n      addClass([this.element], DLG_HIDE);\n\n      if (this.isModal) {\n        this.setOverlayZindex();\n      }\n    }\n\n    if (this.visible) {\n      this.show();\n    } else {\n      if (this.isModal) {\n        this.dlgOverlay.style.display = 'none';\n      }\n    }\n\n    this.initialRender = false;\n  };\n\n  Dialog.prototype.resetResizeIcon = function () {\n    var dialogConHeight = this.getMinHeight();\n\n    if (this.targetEle.offsetHeight < dialogConHeight) {\n      var className = this.enableRtl ? 'e-south-west' : 'e-south-east';\n      var resizeIcon = this.element.querySelector('.' + className);\n\n      if (!isNullOrUndefined(resizeIcon)) {\n        resizeIcon.style.bottom = '-' + dialogConHeight.toString() + 'px';\n      }\n    }\n  };\n\n  Dialog.prototype.setOverlayZindex = function (zIndexValue) {\n    var zIndex;\n\n    if (isNullOrUndefined(zIndexValue)) {\n      zIndex = parseInt(this.element.style.zIndex, 10) ? parseInt(this.element.style.zIndex, 10) : this.zIndex;\n    } else {\n      zIndex = zIndexValue;\n    }\n\n    this.dlgOverlay.style.zIndex = (zIndex - 1).toString();\n    this.dlgContainer.style.zIndex = zIndex.toString();\n  };\n\n  Dialog.prototype.positionChange = function () {\n    if (this.isModal) {\n      if (!isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {\n        this.setPopupPosition();\n      } else if (!isNaN(parseFloat(this.position.X)) && isNaN(parseFloat(this.position.Y)) || isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {\n        this.setPopupPosition();\n      } else {\n        this.element.style.top = '0px';\n        this.element.style.left = '0px';\n        this.dlgContainer.classList.add('e-dlg-' + this.position.X + '-' + this.position.Y);\n      }\n    } else {\n      this.setPopupPosition();\n    }\n  };\n\n  Dialog.prototype.setPopupPosition = function () {\n    this.popupObj.setProperties({\n      position: {\n        X: this.position.X,\n        Y: this.position.Y\n      }\n    });\n  };\n\n  Dialog.prototype.setAllowDragging = function () {\n    var _this = this;\n\n    var handleContent = '.' + DLG_HEADER_CONTENT;\n\n    if (!this.element.classList.contains(DLG_DRAG)) {\n      this.dragObj = new Draggable(this.element, {\n        clone: false,\n        isDragScroll: true,\n        abort: '.e-dlg-closeicon-btn',\n        handle: handleContent,\n        dragStart: function (event) {\n          _this.trigger('dragStart', event, function (dragEventArgs) {\n            if (isBlazor()) {\n              dragEventArgs.bindEvents(event.dragElement);\n            }\n          });\n        },\n        dragStop: function (event) {\n          if (_this.isModal) {\n            if (!isNullOrUndefined(_this.position)) {\n              _this.dlgContainer.classList.remove('e-dlg-' + _this.position.X + '-' + _this.position.Y);\n            } // Reset the dialog position after drag completion.\n\n\n            _this.element.style.position = 'relative';\n          }\n\n          _this.trigger('dragStop', event);\n\n          _this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);\n\n          _this.updatePersistData();\n        },\n        drag: function (event) {\n          _this.trigger('drag', event);\n        }\n      });\n\n      if (!isNullOrUndefined(this.targetEle)) {\n        this.dragObj.dragArea = this.targetEle;\n      }\n    }\n  };\n\n  Dialog.prototype.setButton = function () {\n    if (!this.isBlazorServerRender()) {\n      this.buttonContent = [];\n      this.btnObj = []; // eslint-disable-next-line\n\n      for (var i = 0; i < this.buttons.length; i++) {\n        var buttonType = !isNullOrUndefined(this.buttons[i].type) ? this.buttons[i].type.toLowerCase() : 'button';\n        var btn = this.createElement('button', {\n          className: this.cssClass,\n          attrs: {\n            type: buttonType\n          }\n        });\n        this.buttonContent.push(btn.outerHTML);\n      }\n\n      this.setFooterTemplate();\n    }\n\n    var footerBtn;\n\n    for (var i = 0, childNodes = this.element.children; i < childNodes.length; i++) {\n      if (childNodes[i].classList.contains(DLG_FOOTER_CONTENT)) {\n        footerBtn = childNodes[i].querySelectorAll('button');\n      }\n    }\n\n    for (var i = 0; i < this.buttons.length; i++) {\n      if (!this.isBlazorServerRender()) {\n        this.btnObj[i] = new Button(this.buttons[i].buttonModel);\n      }\n\n      if (this.isBlazorServerRender()) {\n        this.ftrTemplateContent = this.element.querySelector('.' + DLG_FOOTER_CONTENT);\n      }\n\n      if (!isNullOrUndefined(this.ftrTemplateContent) && footerBtn.length > 0) {\n        if (typeof this.buttons[i].click === 'function') {\n          EventHandler.add(footerBtn[i], 'click', this.buttons[i].click, this);\n        }\n\n        if (typeof this.buttons[i].click === 'object') {\n          EventHandler.add(footerBtn[i], 'click', this.buttonClickHandler.bind(this, i), this);\n        }\n      }\n\n      if (!this.isBlazorServerRender() && !isNullOrUndefined(this.ftrTemplateContent)) {\n        this.btnObj[i].appendTo(this.ftrTemplateContent.children[i]);\n\n        if (this.buttons[i].isFlat) {\n          this.btnObj[i].element.classList.add('e-flat');\n        }\n\n        this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];\n      }\n    }\n  };\n\n  Dialog.prototype.buttonClickHandler = function (index) {\n    this.trigger('buttons[' + index + '].click', {});\n  };\n\n  Dialog.prototype.setContent = function () {\n    this.contentEle = this.createElement('div', {\n      className: DLG_CONTENT,\n      id: this.element.id + '_dialog-content'\n    });\n\n    if (this.innerContentElement) {\n      this.contentEle.appendChild(this.innerContentElement);\n    } else if (!isNullOrUndefined(this.content) && this.content !== '' || !this.initialRender) {\n      // eslint-disable-next-line\n      if (typeof this.content === 'string' && !isBlazor()) {\n        this.setTemplate(this.content, this.contentEle, 'content');\n      } else if (this.content instanceof HTMLElement) {\n        this.contentEle.appendChild(this.content);\n      } else {\n        this.setTemplate(this.content, this.contentEle, 'content');\n      }\n    }\n\n    if (!isNullOrUndefined(this.headerContent)) {\n      this.element.insertBefore(this.contentEle, this.element.children[1]);\n    } else {\n      this.element.insertBefore(this.contentEle, this.element.children[0]);\n    }\n\n    if (this.height === 'auto') {\n      if (!this.isBlazorServerRender() && Browser.isIE && this.element.style.width === '' && !isNullOrUndefined(this.width)) {\n        this.element.style.width = formatUnit(this.width);\n      }\n\n      this.setMaxHeight();\n    }\n  };\n\n  Dialog.prototype.setTemplate = function (template, toElement, prop) {\n    var templateFn;\n    var templateProps; // eslint-disable-next-line\n\n    if (toElement.classList.contains(DLG_HEADER)) {\n      templateProps = this.element.id + 'header';\n    } else if (toElement.classList.contains(DLG_FOOTER_CONTENT)) {\n      templateProps = this.element.id + 'footerTemplate';\n    } else {\n      templateProps = this.element.id + 'content';\n    }\n\n    var templateValue;\n\n    if (!isNullOrUndefined(template.outerHTML)) {\n      toElement.appendChild(template);\n    } else if (typeof template === 'string' || typeof template !== 'string' || isBlazor() && !this.isStringTemplate) {\n      if (typeof template === 'string') {\n        template = this.sanitizeHelper(template);\n      }\n\n      if (this.isVue || typeof template !== 'string') {\n        templateFn = compile(template);\n        templateValue = template;\n      } else {\n        toElement.innerHTML = template;\n      }\n    }\n\n    var fromElements = [];\n\n    if (!isNullOrUndefined(templateFn)) {\n      var isString = isBlazor() && !this.isStringTemplate && templateValue.indexOf('<div>Blazor') === 0 ? this.isStringTemplate : true;\n\n      for (var _i = 0, _a = templateFn({}, this, prop, templateProps, isString); _i < _a.length; _i++) {\n        var item = _a[_i];\n        fromElements.push(item);\n      }\n\n      append([].slice.call(fromElements), toElement);\n    }\n  };\n  /*\n   * @returns {void}\n   * @hidden\n   * @value\n   */\n\n\n  Dialog.prototype.sanitizeHelper = function (value) {\n    if (this.enableHtmlSanitizer) {\n      var dialogItem = SanitizeHtmlHelper.beforeSanitize();\n      var beforeEvent = {\n        cancel: false,\n        helper: null\n      };\n      extend(dialogItem, dialogItem, beforeEvent);\n      this.trigger('beforeSanitizeHtml', dialogItem);\n\n      if (dialogItem.cancel && !isNullOrUndefined(dialogItem.helper)) {\n        value = dialogItem.helper(value);\n      } else if (!dialogItem.cancel) {\n        value = SanitizeHtmlHelper.serializeValue(dialogItem, value);\n      }\n    }\n\n    return value;\n  };\n\n  Dialog.prototype.setMaxHeight = function () {\n    if (!this.allowMaxHeight) {\n      return;\n    }\n\n    var display = this.element.style.display;\n    this.element.style.display = 'none';\n    this.element.style.maxHeight = !isNullOrUndefined(this.target) && this.targetEle.offsetHeight < window.innerHeight ? this.targetEle.offsetHeight - 20 + 'px' : window.innerHeight - 20 + 'px';\n    this.element.style.display = display;\n\n    if (Browser.isIE && this.height === 'auto' && !isNullOrUndefined(this.contentEle) && this.element.offsetHeight < this.contentEle.offsetHeight) {\n      this.element.style.height = 'inherit';\n    }\n  };\n\n  Dialog.prototype.setEnableRTL = function () {\n    if (!this.isBlazorServerRender()) {\n      // eslint-disable-next-line\n      this.enableRtl ? addClass([this.element], RTL) : removeClass([this.element], RTL);\n    }\n\n    if (!isNullOrUndefined(this.element.querySelector('.e-resize-handle'))) {\n      removeResize();\n      this.setResize();\n    }\n  };\n\n  Dialog.prototype.setTargetContent = function () {\n    var _this = this;\n\n    if (isNullOrUndefined(this.content) || this.content === '') {\n      var isContent = this.element.innerHTML.replace(/\\s|<(\\/?|\\/?)(!--!--)>/g, '') !== '';\n\n      if (this.element.children.length > 0 || isContent) {\n        this.innerContentElement = document.createDocumentFragment();\n        [].slice.call(this.element.childNodes).forEach(function (el) {\n          if (el.nodeType !== 8) {\n            _this.innerContentElement.appendChild(el);\n          }\n        });\n      }\n    }\n  };\n\n  Dialog.prototype.setHeader = function () {\n    if (this.headerEle) {\n      this.headerEle.innerHTML = '';\n    } else {\n      this.headerEle = this.createElement('div', {\n        id: this.element.id + '_title',\n        className: DLG_HEADER\n      });\n    }\n\n    this.createHeaderContent();\n    this.headerContent.appendChild(this.headerEle);\n    this.setTemplate(this.header, this.headerEle, 'header');\n    attributes(this.element, {\n      'aria-labelledby': this.element.id + '_title'\n    });\n    this.element.insertBefore(this.headerContent, this.element.children[0]);\n\n    if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {\n      this.setAllowDragging();\n    }\n  };\n\n  Dialog.prototype.setFooterTemplate = function () {\n    if (this.ftrTemplateContent) {\n      this.ftrTemplateContent.innerHTML = '';\n    } else {\n      this.ftrTemplateContent = this.createElement('div', {\n        className: DLG_FOOTER_CONTENT\n      });\n    }\n\n    if (this.footerTemplate !== '' && !isNullOrUndefined(this.footerTemplate)) {\n      this.setTemplate(this.footerTemplate, this.ftrTemplateContent, 'footerTemplate');\n    } else {\n      this.ftrTemplateContent.innerHTML = this.buttonContent.join('');\n    }\n\n    this.element.appendChild(this.ftrTemplateContent);\n  };\n\n  Dialog.prototype.createHeaderContent = function () {\n    if (isNullOrUndefined(this.headerContent)) {\n      this.headerContent = this.createElement('div', {\n        id: this.element.id + '_dialog-header',\n        className: DLG_HEADER_CONTENT\n      });\n    }\n  };\n\n  Dialog.prototype.renderCloseIcon = function () {\n    if (this.showCloseIcon) {\n      this.closeIcon = this.createElement('button', {\n        className: DLG_CLOSE_ICON_BTN,\n        attrs: {\n          type: 'button'\n        }\n      });\n      this.closeIconBtnObj = new Button({\n        cssClass: 'e-flat',\n        iconCss: DLG_CLOSE_ICON + ' ' + ICON\n      });\n      this.closeIconTitle();\n\n      if (!isNullOrUndefined(this.headerContent)) {\n        prepend([this.closeIcon], this.headerContent);\n      } else {\n        this.createHeaderContent();\n        prepend([this.closeIcon], this.headerContent);\n        this.element.insertBefore(this.headerContent, this.element.children[0]);\n      }\n\n      this.closeIconBtnObj.appendTo(this.closeIcon);\n    }\n  };\n\n  Dialog.prototype.closeIconTitle = function () {\n    this.l10n.setLocale(this.locale);\n    var closeIconTitle = this.l10n.getConstant('close');\n    this.closeIcon.setAttribute('title', closeIconTitle);\n    this.closeIcon.setAttribute('aria-label', closeIconTitle);\n  };\n\n  Dialog.prototype.setCSSClass = function (oldCSSClass) {\n    if (oldCSSClass) {\n      removeClass([this.element], oldCSSClass.split(' '));\n\n      if (this.isModal && !isNullOrUndefined(this.dlgContainer)) {\n        removeClass([this.dlgContainer], oldCSSClass.split(' '));\n      }\n    }\n\n    if (this.cssClass) {\n      addClass([this.element], this.cssClass.split(' '));\n\n      if (this.isModal && !isNullOrUndefined(this.dlgContainer)) {\n        addClass([this.dlgContainer], this.cssClass.split(' '));\n      }\n    }\n  };\n\n  Dialog.prototype.setIsModal = function () {\n    this.dlgContainer = this.createElement('div', {\n      className: DLG_CONTAINER\n    });\n    this.setCSSClass();\n    this.element.classList.remove(DLG_SHOW);\n    this.element.parentNode.insertBefore(this.dlgContainer, this.element);\n    this.dlgContainer.appendChild(this.element);\n    addClass([this.element], MODAL_DLG);\n    this.dlgOverlay = this.createElement('div', {\n      className: DLG_OVERLAY\n    });\n    this.dlgOverlay.style.zIndex = (this.zIndex - 1).toString();\n    this.dlgContainer.appendChild(this.dlgOverlay);\n  };\n\n  Dialog.prototype.getValidFocusNode = function (items) {\n    var node;\n\n    for (var u = 0; u < items.length; u++) {\n      node = items[u];\n\n      if ((node.clientHeight > 0 || node.tagName.toLowerCase() === 'a' && node.hasAttribute('href')) && node.tabIndex > -1 && !node.disabled && !this.disableElement(node, '[disabled],[aria-disabled=\"true\"],[type=\"hidden\"]')) {\n        return node;\n      } else {\n        node = null;\n      }\n    }\n\n    return node;\n  };\n\n  Dialog.prototype.focusableElements = function (content) {\n    if (!isNullOrUndefined(content)) {\n      var value = 'input,select,textarea,button,a,[contenteditable=\"true\"],[tabindex]';\n      var items = content.querySelectorAll(value);\n      return this.getValidFocusNode(items);\n    }\n\n    return null;\n  };\n\n  Dialog.prototype.getAutoFocusNode = function (container) {\n    var node = container.querySelector('.' + DLG_CLOSE_ICON_BTN);\n    var value = '[autofocus]';\n    var items = container.querySelectorAll(value);\n    var validNode = this.getValidFocusNode(items);\n\n    if (isBlazor()) {\n      this.primaryButtonEle = this.element.getElementsByClassName('e-primary')[0];\n    }\n\n    if (!isNullOrUndefined(validNode)) {\n      node = validNode;\n    } else {\n      validNode = this.focusableElements(this.contentEle);\n\n      if (!isNullOrUndefined(validNode)) {\n        return node = validNode;\n      } else if (!isNullOrUndefined(this.primaryButtonEle)) {\n        return this.element.querySelector('.' + DLG_PRIMARY_BUTTON);\n      }\n    }\n\n    return node;\n  };\n\n  Dialog.prototype.disableElement = function (element, t) {\n    var elementMatch = element ? element.matches || element.webkitMatchesSelector || element.msGetRegionContent : null;\n\n    if (elementMatch) {\n      for (; element; element = element.parentNode) {\n        if (element instanceof Element && elementMatch.call(element, t)) {\n          /* istanbul ignore next */\n          return element;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  Dialog.prototype.focusContent = function () {\n    var element = this.getAutoFocusNode(this.element);\n    var node = !isNullOrUndefined(element) ? element : this.element;\n    var userAgent = Browser.userAgent;\n\n    if (userAgent.indexOf('MSIE ') > 0 || userAgent.indexOf('Trident/') > 0) {\n      this.element.focus();\n    }\n\n    node.focus();\n    this.unBindEvent(this.element);\n    this.bindEvent(this.element);\n  };\n\n  Dialog.prototype.bindEvent = function (element) {\n    EventHandler.add(element, 'keydown', this.keyDown, this);\n  };\n\n  Dialog.prototype.unBindEvent = function (element) {\n    EventHandler.remove(element, 'keydown', this.keyDown);\n  };\n\n  Dialog.prototype.updateSanitizeContent = function () {\n    if (!this.isBlazorServerRender()) {\n      this.contentEle.innerHTML = this.sanitizeHelper(this.content);\n    }\n  };\n\n  Dialog.prototype.isBlazorServerRender = function () {\n    return isBlazor() && this.isServerRendered;\n  };\n  /**\n   * Module required function\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Dialog.prototype.getModuleName = function () {\n    return 'dialog';\n  };\n  /**\n   * Called internally if any of the property value changed\n   *\n   * @param {DialogModel} newProp - specifies the new property\n   * @param {DialogModel} oldProp - specifies the old property\n   * @private\n   * @returns {void}\n   */\n\n\n  Dialog.prototype.onPropertyChanged = function (newProp, oldProp) {\n    if (!this.element.classList.contains(ROOT)) {\n      return;\n    }\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'content':\n          if (!isNullOrUndefined(this.content) && this.content !== '') {\n            if (this.isBlazorServerRender()) {\n              this.contentEle = this.element.querySelector('.e-dlg-content');\n            }\n\n            if (!isNullOrUndefined(this.contentEle) && this.contentEle.getAttribute('role') !== 'dialog') {\n              if (!this.isBlazorServerRender()) {\n                this.contentEle.innerHTML = '';\n              }\n\n              if (typeof this.content === 'function') {\n                this.clearTemplate(['content']);\n                detach(this.contentEle);\n                this.contentEle = null;\n                this.setContent();\n              } else {\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                typeof this.content === 'string' ? this.isBlazorServerRender() && this.contentEle.innerText === '' ? this.contentEle.insertAdjacentHTML('beforeend', this.sanitizeHelper(this.content)) : this.updateSanitizeContent() : this.contentEle.appendChild(this.content);\n              }\n\n              this.setMaxHeight();\n            } else {\n              if (!this.isBlazorServerRender() || isNullOrUndefined(this.element.querySelector('.e-dlg-content'))) {\n                this.setContent();\n              }\n            }\n          } else if (!isNullOrUndefined(this.contentEle)) {\n            detach(this.contentEle);\n            this.contentEle = null;\n          }\n\n          break;\n\n        case 'header':\n          if (this.header === '' || isNullOrUndefined(this.header)) {\n            if (this.headerEle) {\n              detach(this.headerEle);\n              this.headerEle = null;\n            }\n          } else {\n            if (!this.isBlazorServerRender() || isNullOrUndefined(this.element.querySelector('.e-dlg-header-content'))) {\n              this.setHeader();\n            }\n          }\n\n          break;\n\n        case 'footerTemplate':\n          if (this.footerTemplate === '' || isNullOrUndefined(this.footerTemplate)) {\n            if (!this.ftrTemplateContent) {\n              return;\n            }\n\n            detach(this.ftrTemplateContent);\n            this.ftrTemplateContent = null;\n            this.buttons = [{}];\n          } else {\n            if (!this.isBlazorServerRender() || isNullOrUndefined(this.element.querySelector('.e-footer-content'))) {\n              this.setFooterTemplate();\n            }\n\n            this.buttons = [{}];\n          }\n\n          break;\n\n        case 'showCloseIcon':\n          if (this.element.getElementsByClassName(DLG_CLOSE_ICON).length > 0) {\n            if (!this.showCloseIcon && (this.header === '' || isNullOrUndefined(this.header))) {\n              detach(this.headerContent);\n              this.headerContent = null;\n            } else if (!this.showCloseIcon) {\n              detach(this.closeIcon);\n            } else {\n              if (this.isBlazorServerRender()) {\n                this.wireEvents();\n              }\n            }\n          } else {\n            if (!this.isBlazorServerRender()) {\n              this.renderCloseIcon();\n            }\n\n            this.wireEvents();\n          }\n\n          break;\n\n        case 'locale':\n          if (this.showCloseIcon) {\n            this.closeIconTitle();\n          }\n\n          break;\n\n        case 'visible':\n          // eslint-disable-next-line\n          this.visible ? this.show() : this.hide();\n          break;\n\n        case 'isModal':\n          this.updateIsModal();\n          break;\n\n        case 'height':\n          setStyleAttribute(this.element, {\n            'height': formatUnit(newProp.height)\n          });\n          this.updatePersistData();\n          break;\n\n        case 'width':\n          setStyleAttribute(this.element, {\n            'width': formatUnit(newProp.width)\n          });\n          this.updatePersistData();\n          break;\n\n        case 'zIndex':\n          this.popupObj.zIndex = this.zIndex;\n\n          if (this.isModal) {\n            this.setOverlayZindex(this.zIndex);\n          }\n\n          if (this.element.style.zIndex !== this.zIndex.toString()) {\n            this.calculatezIndex = false;\n          }\n\n          break;\n\n        case 'cssClass':\n          this.setCSSClass(oldProp.cssClass);\n          break;\n\n        case 'buttons':\n          {\n            var buttonCount = this.buttons.length;\n\n            if (!isNullOrUndefined(this.ftrTemplateContent) && !this.isBlazorServerRender()) {\n              detach(this.ftrTemplateContent);\n              this.ftrTemplateContent = null;\n            }\n\n            for (var i = 0; i < buttonCount; i++) {\n              if (!isNullOrUndefined(this.buttons[i].buttonModel)) {\n                this.footerTemplate = '';\n                this.setButton();\n              }\n            }\n\n            break;\n          }\n\n        case 'allowDragging':\n          if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {\n            this.setAllowDragging();\n          } else {\n            this.dragObj.destroy();\n          }\n\n          break;\n\n        case 'target':\n          this.setTarget(newProp.target);\n          break;\n\n        case 'position':\n          this.checkPositionData();\n\n          if (this.isModal) {\n            var positionX = isNullOrUndefined(oldProp.position.X) ? this.position.X : oldProp.position.X;\n            var positionY = isNullOrUndefined(oldProp.position.Y) ? this.position.Y : oldProp.position.Y;\n\n            if (this.dlgContainer.classList.contains('e-dlg-' + positionX + '-' + positionY)) {\n              this.dlgContainer.classList.remove('e-dlg-' + positionX + '-' + positionY);\n            }\n          }\n\n          this.positionChange();\n          this.updatePersistData();\n          break;\n\n        case 'enableRtl':\n          this.setEnableRTL();\n          break;\n\n        case 'enableResize':\n          this.setResize();\n          break;\n\n        case 'minHeight':\n          if (this.minHeight !== '') {\n            this.element.style.minHeight = formatUnit(this.minHeight);\n          }\n\n          break;\n      }\n    }\n  };\n\n  Dialog.prototype.setTarget = function (target) {\n    this.popupObj.relateTo = target;\n    this.target = target;\n    this.targetEle = typeof this.target === 'string' ? document.querySelector(this.target) : this.target;\n\n    if (this.dragObj) {\n      this.dragObj.dragArea = this.targetEle;\n    }\n\n    this.setMaxHeight();\n\n    if (this.isModal) {\n      this.updateIsModal();\n    }\n\n    if (this.enableResize) {\n      this.setResize();\n    }\n  };\n\n  Dialog.prototype.updateIsModal = function () {\n    this.element.setAttribute('aria-modal', this.isModal ? 'true' : 'false');\n\n    if (this.isModal) {\n      if (isNullOrUndefined(this.dlgOverlay)) {\n        this.setIsModal();\n        this.element.style.top = '0px';\n        this.element.style.left = '0px';\n\n        if (!isNullOrUndefined(this.targetEle)) {\n          this.targetEle.appendChild(this.dlgContainer);\n        }\n      }\n    } else {\n      removeClass([this.element], MODAL_DLG);\n      removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n      detach(this.dlgOverlay);\n\n      while (this.dlgContainer.firstChild) {\n        this.dlgContainer.parentElement.insertBefore(this.dlgContainer.firstChild, this.dlgContainer);\n      }\n\n      this.dlgContainer.parentElement.removeChild(this.dlgContainer);\n    }\n\n    if (this.visible) {\n      this.show();\n    }\n\n    this.positionChange();\n\n    if (this.isModal && this.dlgOverlay) {\n      EventHandler.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);\n    }\n  };\n\n  Dialog.prototype.setzIndex = function (zIndexElement, setPopupZindex) {\n    var prevOnChange = this.isProtectedOnChange;\n    this.isProtectedOnChange = true;\n    var currentzIndex = getZindexPartial(zIndexElement);\n    this.zIndex = currentzIndex > this.zIndex ? currentzIndex : this.zIndex;\n    this.isProtectedOnChange = prevOnChange;\n\n    if (setPopupZindex) {\n      this.popupObj.zIndex = this.zIndex;\n    }\n  };\n\n  Dialog.prototype.windowResizeHandler = function () {\n    setMaxWidth(this.targetEle.clientWidth);\n    setMaxHeight(this.targetEle.clientHeight);\n    this.setMaxHeight();\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Dialog.prototype.getPersistData = function () {\n    return this.addOnPersist(['width', 'height', 'position']);\n  };\n  /**\n   * To destroy the widget\n   *\n   * @returns {void}\n   */\n\n\n  Dialog.prototype.destroy = function () {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    var classArray = [RTL, MODAL_DLG, DLG_RESIZABLE, DLG_RESTRICT_LEFT_VALUE, FULLSCREEN, DEVICE];\n    var attrs = ['role', 'aria-modal', 'aria-labelledby', 'aria-describedby', 'aria-grabbed', 'tabindex', 'style'];\n    removeClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);\n\n    if (!isNullOrUndefined(this.element) && this.element.classList.contains(FULLSCREEN)) {\n      removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n    }\n\n    if (this.isModal) {\n      removeClass([!isNullOrUndefined(this.targetEle) ? this.targetEle : document.body], SCROLL_DISABLED);\n    }\n\n    this.unWireEvents();\n\n    if (!isNullOrUndefined(this.btnObj)) {\n      for (var i = 0; i < this.btnObj.length; i++) {\n        this.btnObj[i].destroy();\n      }\n    }\n\n    if (!isNullOrUndefined(this.closeIconBtnObj)) {\n      this.closeIconBtnObj.destroy();\n    }\n\n    if (!isNullOrUndefined(this.dragObj)) {\n      this.dragObj.destroy();\n    }\n\n    if (!isNullOrUndefined(this.popupObj.element) && this.popupObj.element.classList.contains(POPUP_ROOT)) {\n      this.popupObj.destroy();\n    }\n\n    removeClass([this.element], classArray);\n\n    if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n      removeClass([this.element], this.cssClass.split(' '));\n    }\n\n    if (!isNullOrUndefined(this.refElement) && !isNullOrUndefined(this.refElement.parentElement)) {\n      this.refElement.parentElement.insertBefore(this.isModal ? this.dlgContainer : this.element, this.refElement);\n      detach(this.refElement);\n      this.refElement = undefined;\n    }\n\n    if (this.isModal && !this.isBlazorServerRender()) {\n      detach(this.dlgOverlay);\n      this.dlgContainer.parentNode.insertBefore(this.element, this.dlgContainer);\n      detach(this.dlgContainer);\n    }\n\n    if (!this.isBlazorServerRender()) {\n      this.element.innerHTML = this.clonedEle.innerHTML;\n    }\n\n    if (this.isBlazorServerRender()) {\n      if (!isNullOrUndefined(this.element.children)) {\n        for (var i = 0; i <= this.element.children.length; i++) {\n          i = i - i;\n          detach(this.element.children[i]);\n        }\n      }\n    }\n\n    for (var i = 0; i < attrs.length; i++) {\n      this.element.removeAttribute(attrs[i]);\n    }\n\n    if (!this.isBlazorServerRender()) {\n      _super.prototype.destroy.call(this);\n    } else {\n      this.isDestroyed = true;\n    } // eslint-disable-next-line\n\n\n    if (this.isReact) {\n      this.clearTemplate();\n    }\n  };\n\n  Dialog.prototype.wireWindowResizeEvent = function () {\n    window.addEventListener('resize', this.windowResizeHandler.bind(this));\n  };\n\n  Dialog.prototype.unWireWindowResizeEvent = function () {\n    window.removeEventListener('resize', this.windowResizeHandler.bind(this));\n  };\n  /**\n   * Binding event to the element while widget creation\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  Dialog.prototype.wireEvents = function () {\n    if (this.isBlazorServerRender() && this.showCloseIcon) {\n      this.closeIcon = this.element.getElementsByClassName('e-dlg-closeicon-btn')[0];\n    }\n\n    if (this.showCloseIcon) {\n      EventHandler.add(this.closeIcon, 'click', this.closeIconClickEventHandler, this);\n    }\n\n    if (this.isModal && this.dlgOverlay) {\n      EventHandler.add(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler, this);\n    }\n  };\n  /**\n   * Unbinding event to the element while widget destroy\n   *\n   * @returns {void}\n   * @hidden\n   */\n\n\n  Dialog.prototype.unWireEvents = function () {\n    if (this.showCloseIcon) {\n      EventHandler.remove(this.closeIcon, 'click', this.closeIconClickEventHandler);\n    }\n\n    if (this.isModal) {\n      EventHandler.remove(this.dlgOverlay, 'click', this.dlgOverlayClickEventHandler);\n    }\n\n    if (this.buttons.length > 0 && !isNullOrUndefined(this.buttons[0].buttonModel) && this.footerTemplate === '') {\n      for (var i = 0; i < this.buttons.length; i++) {\n        if (typeof this.buttons[i].click === 'function') {\n          EventHandler.remove(this.ftrTemplateContent.children[i], 'click', this.buttons[i].click);\n        }\n      }\n    }\n  };\n  /**\n   * Refreshes the dialog's position when the user changes its header and footer height/width dynamically.\n   *\n   * @returns {void}\n   */\n\n\n  Dialog.prototype.refreshPosition = function () {\n    this.popupObj.refreshPosition();\n  };\n  /**\n   * Returns the current width and height of the Dialog\n   *\n   * @returns {DialogDimension}- returns the dialog element Dimension.\n   * @public\n   */\n\n\n  Dialog.prototype.getDimension = function () {\n    var dialogWidth = this.element.offsetWidth;\n    var dialogHeight = this.element.offsetHeight;\n    return {\n      width: dialogWidth,\n      height: dialogHeight\n    };\n  };\n  /**\n   * Opens the dialog if it is in hidden state.\n   * To open the dialog with full screen width, set the parameter to true.\n   *\n   * @param { boolean } isFullScreen - Enable the fullScreen Dialog.\n   * @returns {void}\n   */\n\n\n  Dialog.prototype.show = function (isFullScreen) {\n    var _this = this;\n\n    if (!this.element.classList.contains(ROOT)) {\n      return;\n    }\n\n    if (!this.element.classList.contains(DLG_SHOW) || !isNullOrUndefined(isFullScreen)) {\n      if (!isNullOrUndefined(isFullScreen)) {\n        this.fullScreen(isFullScreen);\n      }\n\n      var eventArgs_1 = isBlazor() ? {\n        cancel: false,\n        element: this.element,\n        container: this.isModal ? this.dlgContainer : this.element,\n        maxHeight: this.element.style.maxHeight\n      } : {\n        cancel: false,\n        element: this.element,\n        container: this.isModal ? this.dlgContainer : this.element,\n        target: this.target,\n        maxHeight: this.element.style.maxHeight\n      };\n      this.trigger('beforeOpen', eventArgs_1, function (beforeOpenArgs) {\n        if (!beforeOpenArgs.cancel) {\n          if (_this.element.style.maxHeight !== eventArgs_1.maxHeight) {\n            _this.allowMaxHeight = false;\n            _this.element.style.maxHeight = eventArgs_1.maxHeight;\n          }\n\n          _this.storeActiveElement = document.activeElement;\n          _this.element.tabIndex = -1;\n\n          if (_this.isModal && !isNullOrUndefined(_this.dlgOverlay)) {\n            _this.dlgOverlay.style.display = 'block';\n            _this.dlgContainer.style.display = 'flex';\n            removeClass([_this.dlgOverlay], 'e-fade');\n\n            if (!isNullOrUndefined(_this.targetEle)) {\n              if (_this.targetEle === document.body) {\n                _this.dlgContainer.style.position = 'fixed';\n              } else {\n                _this.dlgContainer.style.position = 'absolute';\n              }\n\n              _this.dlgOverlay.style.position = 'absolute';\n              _this.element.style.position = 'relative';\n              addClass([_this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);\n            } else {\n              addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n            }\n          }\n\n          var openAnimation = {\n            name: _this.animationSettings.effect + 'In',\n            duration: _this.animationSettings.duration,\n            delay: _this.animationSettings.delay\n          };\n          var zIndexElement = _this.isModal ? _this.element.parentElement : _this.element;\n\n          if (_this.calculatezIndex) {\n            _this.setzIndex(zIndexElement, true);\n\n            setStyleAttribute(_this.element, {\n              'zIndex': _this.zIndex\n            });\n\n            if (_this.isModal) {\n              _this.setOverlayZindex(_this.zIndex);\n            }\n          } // eslint-disable-next-line\n\n\n          _this.animationSettings.effect === 'None' ? _this.popupObj.show() : _this.popupObj.show(openAnimation);\n          _this.dialogOpen = true;\n          var prevOnChange = _this.isProtectedOnChange;\n          _this.isProtectedOnChange = true;\n          _this.visible = true;\n          _this.preventVisibility = true;\n          _this.isProtectedOnChange = prevOnChange;\n        }\n      });\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n  /**\n   * Closes the dialog if it is in visible state.\n   *\n   * @param { Event } event - specifies the event\n   * @returns {void}\n   */\n\n\n  Dialog.prototype.hide = function (event) {\n    var _this = this;\n\n    if (!this.element.classList.contains(ROOT)) {\n      return;\n    }\n\n    if (this.preventVisibility) {\n      var eventArgs = isBlazor() ? {\n        cancel: false,\n        isInteracted: event ? true : false,\n        element: this.element,\n        container: this.isModal ? this.dlgContainer : this.element,\n        event: event\n      } : {\n        cancel: false,\n        isInteracted: event ? true : false,\n        element: this.element,\n        target: this.target,\n        container: this.isModal ? this.dlgContainer : this.element,\n        event: event,\n        closedBy: this.dlgClosedBy\n      };\n      this.closeArgs = eventArgs;\n      this.trigger('beforeClose', eventArgs, function (beforeCloseArgs) {\n        if (!beforeCloseArgs.cancel) {\n          if (_this.isModal) {\n            if (!isNullOrUndefined(_this.targetEle)) {\n              removeClass([_this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);\n            }\n          }\n\n          if (document.body.classList.contains(DLG_TARGET) && document.body.classList.contains(SCROLL_DISABLED)) {\n            removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n          }\n\n          var closeAnimation = {\n            name: _this.animationSettings.effect + 'Out',\n            duration: _this.animationSettings.duration,\n            delay: _this.animationSettings.delay\n          }; // eslint-disable-next-line\n\n          _this.animationSettings.effect === 'None' ? _this.popupObj.hide() : _this.popupObj.hide(closeAnimation);\n          _this.dialogOpen = false;\n          var prevOnChange = _this.isProtectedOnChange;\n          _this.isProtectedOnChange = true;\n          _this.visible = false;\n          _this.preventVisibility = false;\n          _this.isProtectedOnChange = prevOnChange;\n        }\n\n        _this.dlgClosedBy = DLG_USER_ACTION_CLOSED;\n      });\n    }\n  }; // eslint-disable-next-line\n\n  /**\n   * Specifies to view the Full screen Dialog.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  Dialog.prototype.fullScreen = function (args) {\n    /* eslint-disable */\n    var top = this.element.offsetTop;\n    var left = this.element.offsetLeft;\n    /* eslint-enable */\n\n    if (args) {\n      this.element.style.top = document.scrollingElement.scrollTop + 'px';\n      addClass([this.element], FULLSCREEN);\n      var display = this.element.style.display;\n      this.element.style.display = 'none';\n      this.element.style.maxHeight = !isNullOrUndefined(this.target) ? this.targetEle.offsetHeight + 'px' : window.innerHeight + 'px';\n      this.element.style.display = display;\n      addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n\n      if (this.allowDragging && !isNullOrUndefined(this.dragObj)) {\n        this.dragObj.destroy();\n      }\n    } else {\n      removeClass([this.element], FULLSCREEN);\n      removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);\n\n      if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {\n        this.setAllowDragging();\n      }\n    }\n\n    return args;\n  };\n  /**\n   * Returns the dialog button instances.\n   * Based on that, you can dynamically change the button states.\n   *\n   * @param { number } index - Index of the button.\n   * @returns {Button} - returns the button element\n   */\n\n\n  Dialog.prototype.getButtons = function (index) {\n    if (!isNullOrUndefined(index)) {\n      return this.btnObj[index];\n    }\n\n    return this.btnObj;\n  };\n\n  __decorate$1([Property('')], Dialog.prototype, \"content\", void 0);\n\n  __decorate$1([Property(true)], Dialog.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate$1([Property(false)], Dialog.prototype, \"enablePersistence\", void 0);\n\n  __decorate$1([Property(false)], Dialog.prototype, \"showCloseIcon\", void 0);\n\n  __decorate$1([Property(false)], Dialog.prototype, \"isModal\", void 0);\n\n  __decorate$1([Property('')], Dialog.prototype, \"header\", void 0);\n\n  __decorate$1([Property(true)], Dialog.prototype, \"visible\", void 0);\n\n  __decorate$1([Property(false)], Dialog.prototype, \"enableResize\", void 0);\n\n  __decorate$1([Property(['South-East'])], Dialog.prototype, \"resizeHandles\", void 0);\n\n  __decorate$1([Property('auto')], Dialog.prototype, \"height\", void 0);\n\n  __decorate$1([Property('')], Dialog.prototype, \"minHeight\", void 0);\n\n  __decorate$1([Property('100%')], Dialog.prototype, \"width\", void 0);\n\n  __decorate$1([Property('')], Dialog.prototype, \"cssClass\", void 0);\n\n  __decorate$1([Property(1000)], Dialog.prototype, \"zIndex\", void 0);\n\n  __decorate$1([Property(null)], Dialog.prototype, \"target\", void 0);\n\n  __decorate$1([Property('')], Dialog.prototype, \"footerTemplate\", void 0);\n\n  __decorate$1([Property(false)], Dialog.prototype, \"allowDragging\", void 0);\n\n  __decorate$1([Collection([{}], ButtonProps)], Dialog.prototype, \"buttons\", void 0);\n\n  __decorate$1([Property(true)], Dialog.prototype, \"closeOnEscape\", void 0);\n\n  __decorate$1([Complex({}, AnimationSettings)], Dialog.prototype, \"animationSettings\", void 0);\n\n  __decorate$1([Complex({\n    X: 'center',\n    Y: 'center'\n  }, PositionData)], Dialog.prototype, \"position\", void 0);\n\n  __decorate$1([Event()], Dialog.prototype, \"created\", void 0);\n\n  __decorate$1([Event()], Dialog.prototype, \"open\", void 0);\n\n  __decorate$1([Event()], Dialog.prototype, \"beforeSanitizeHtml\", void 0);\n\n  __decorate$1([Event()], Dialog.prototype, \"beforeOpen\", void 0);\n\n  __decorate$1([Event()], Dialog.prototype, \"close\", void 0);\n\n  __decorate$1([Event()], Dialog.prototype, \"beforeClose\", void 0);\n\n  __decorate$1([Event()], Dialog.prototype, \"dragStart\", void 0);\n\n  __decorate$1([Event()], Dialog.prototype, \"dragStop\", void 0);\n\n  __decorate$1([Event()], Dialog.prototype, \"drag\", void 0);\n\n  __decorate$1([Event()], Dialog.prototype, \"overlayClick\", void 0);\n\n  __decorate$1([Event()], Dialog.prototype, \"resizeStart\", void 0);\n\n  __decorate$1([Event()], Dialog.prototype, \"resizing\", void 0);\n\n  __decorate$1([Event()], Dialog.prototype, \"resizeStop\", void 0);\n\n  __decorate$1([Event()], Dialog.prototype, \"destroyed\", void 0);\n\n  Dialog = __decorate$1([NotifyPropertyChanges], Dialog);\n  return Dialog;\n}(Component);\n/**\n * Base for creating Alert and Confirmation Dialog through util method.\n */\n// eslint-disable-next-line\n\n\nvar DialogUtility;\n\n(function (DialogUtility) {\n  /**\n   * An alert dialog box is used to display warning like messages to the users.\n   * ```\n   * Eg : DialogUtility.alert('Alert message');\n   *\n   * ```\n   */\n\n  /* istanbul ignore next */\n\n  /**\n   *\n   * @param {AlertDialogArgs} args - specifies the string\n   * @returns {Dialog} - returns the dialog element.\n   */\n  function alert(args) {\n    // eslint-disable-next-line\n    var dialogElement = createElement('div', {\n      'className': DLG_UTIL_ALERT\n    });\n    document.body.appendChild(dialogElement);\n    var alertDialogObj;\n    var okButtonModel = [{\n      buttonModel: {\n        isPrimary: true,\n        content: 'OK'\n      },\n      click: function () {\n        this.hide();\n      }\n    }];\n\n    if (typeof args === 'string') {\n      alertDialogObj = createDialog({\n        content: args,\n        position: {\n          X: 'center',\n          Y: 'top'\n        },\n        isModal: true,\n        header: DLG_UTIL_DEFAULT_TITLE,\n        buttons: okButtonModel\n      }, dialogElement);\n    } else {\n      alertDialogObj = createDialog(alertOptions(args), dialogElement);\n    }\n\n    alertDialogObj.close = function () {\n      if (args && args.close) {\n        args.close.apply(alertDialogObj);\n      }\n\n      alertDialogObj.destroy();\n\n      if (alertDialogObj.element.classList.contains('e-dlg-modal')) {\n        alertDialogObj.element.parentElement.remove();\n        alertDialogObj.target.classList.remove(DLG_UTIL_ROOT);\n      } else {\n        alertDialogObj.element.remove();\n      }\n    };\n\n    return alertDialogObj;\n  }\n\n  DialogUtility.alert = alert;\n  /**\n   * A confirm dialog displays a specified message along with ‘OK’ and ‘Cancel’ button.\n   * ```\n   * Eg : DialogUtility.confirm('Confirm dialog message');\n   *\n   * ```\n   */\n\n  /* istanbul ignore next */\n\n  /**\n   *\n   * @param {ConfirmDialogArgs} args - specifies the args\n   * @returns {Dialog} - returns te element\n   */\n\n  function confirm(args) {\n    // eslint-disable-next-line\n    var dialogElement = createElement('div', {\n      'className': DLG_UTIL_CONFIRM\n    });\n    document.body.appendChild(dialogElement);\n    var confirmDialogObj;\n    var okCancelButtonModel = [{\n      buttonModel: {\n        isPrimary: true,\n        content: 'OK'\n      },\n      click: function () {\n        this.hide();\n      }\n    }, {\n      buttonModel: {\n        content: 'Cancel'\n      },\n      click: function () {\n        this.hide();\n      }\n    }];\n\n    if (typeof args === 'string') {\n      confirmDialogObj = createDialog({\n        position: {\n          X: 'center',\n          Y: 'top'\n        },\n        content: args,\n        isModal: true,\n        header: DLG_UTIL_DEFAULT_TITLE,\n        buttons: okCancelButtonModel\n      }, dialogElement);\n    } else {\n      confirmDialogObj = createDialog(confirmOptions(args), dialogElement);\n    }\n\n    confirmDialogObj.close = function () {\n      if (args && args.close) {\n        args.close.apply(confirmDialogObj);\n      }\n\n      confirmDialogObj.destroy();\n\n      if (confirmDialogObj.element.classList.contains('e-dlg-modal')) {\n        confirmDialogObj.element.parentElement.remove();\n        confirmDialogObj.target.classList.remove(DLG_UTIL_ROOT);\n      } else {\n        confirmDialogObj.element.remove();\n      }\n    };\n\n    return confirmDialogObj;\n  }\n\n  DialogUtility.confirm = confirm; // eslint-disable-next-line\n\n  function createDialog(options, element) {\n    var dialogObject = new Dialog(options);\n    dialogObject.appendTo(element);\n    return dialogObject;\n  } // eslint-disable-next-line\n\n\n  function alertOptions(option) {\n    var options = {};\n    options.buttons = [];\n    options = formOptions(options, option);\n    options = setAlertButtonModel(options, option);\n    return options;\n  } // eslint-disable-next-line\n\n\n  function confirmOptions(option) {\n    var options = {};\n    options.buttons = [];\n    options = formOptions(options, option);\n    options = setConfirmButtonModel(options, option);\n    return options;\n  } // eslint-disable-next-line\n\n\n  function formOptions(options, option) {\n    options.header = !isNullOrUndefined(option.title) ? option.title : DLG_UTIL_DEFAULT_TITLE;\n    options.content = !isNullOrUndefined(option.content) ? option.content : '';\n    options.isModal = !isNullOrUndefined(option.isModal) ? option.isModal : true;\n    options.showCloseIcon = !isNullOrUndefined(option.showCloseIcon) ? option.showCloseIcon : false;\n    options.allowDragging = !isNullOrUndefined(option.isDraggable) ? option.isDraggable : false;\n    options.closeOnEscape = !isNullOrUndefined(option.closeOnEscape) ? option.closeOnEscape : false;\n    options.position = !isNullOrUndefined(option.position) ? option.position : {\n      X: 'center',\n      Y: 'top'\n    };\n    options.animationSettings = !isNullOrUndefined(option.animationSettings) ? option.animationSettings : {\n      effect: 'Fade',\n      duration: 400,\n      delay: 0\n    };\n    options.cssClass = !isNullOrUndefined(option.cssClass) ? option.cssClass : '';\n    options.zIndex = !isNullOrUndefined(option.zIndex) ? option.zIndex : 1000;\n    options.open = !isNullOrUndefined(option.open) ? option.open : null;\n    options.width = !isNullOrUndefined(option.width) ? option.width : 'auto';\n    options.height = !isNullOrUndefined(option.height) ? option.height : 'auto';\n    return options;\n  } // eslint-disable-next-line\n\n\n  function setAlertButtonModel(options, option) {\n    var alertButtonModel = [{\n      buttonModel: {\n        isPrimary: true,\n        content: 'OK'\n      },\n      click: function () {\n        this.hide();\n      }\n    }];\n\n    if (!isNullOrUndefined(option.okButton)) {\n      options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, alertButtonModel[0]);\n    } else {\n      options.buttons = alertButtonModel;\n    }\n\n    return options;\n  } // eslint-disable-next-line\n\n\n  function setConfirmButtonModel(options, option) {\n    var okButtonModel = {\n      buttonModel: {\n        isPrimary: true,\n        content: 'OK'\n      },\n      click: function () {\n        this.hide();\n      }\n    };\n    var cancelButtonModel = {\n      buttonModel: {\n        content: 'Cancel'\n      },\n      click: function () {\n        this.hide();\n      }\n    };\n\n    if (!isNullOrUndefined(option.okButton)) {\n      options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, okButtonModel);\n    } else {\n      options.buttons[0] = okButtonModel;\n    }\n\n    if (!isNullOrUndefined(option.cancelButton)) {\n      options.buttons[1] = formButtonModel(options.buttons[1], option.cancelButton, cancelButtonModel);\n    } else {\n      options.buttons[1] = cancelButtonModel;\n    }\n\n    return options;\n  } // eslint-disable-next-line\n\n\n  function formButtonModel(buttonModel, option, buttonPropModel) {\n    var buttonProps = buttonPropModel;\n\n    if (!isNullOrUndefined(option.text)) {\n      buttonProps.buttonModel.content = option.text;\n    }\n\n    if (!isNullOrUndefined(option.icon)) {\n      buttonProps.buttonModel.iconCss = option.icon;\n    }\n\n    if (!isNullOrUndefined(option.cssClass)) {\n      buttonProps.buttonModel.cssClass = option.cssClass;\n    }\n\n    if (!isNullOrUndefined(option.click)) {\n      buttonProps.click = option.click;\n    }\n\n    return buttonProps;\n  }\n})(DialogUtility || (DialogUtility = {}));\n/**\n * Dialog Component\n */\n\n\nvar __extends$2 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar TOUCHEND_HIDE_DELAY = 1500;\nvar TAPHOLD_THRESHOLD = 500;\nvar SHOW_POINTER_TIP_GAP = 0;\nvar HIDE_POINTER_TIP_GAP = 8;\nvar MOUSE_TRAIL_GAP = 2;\nvar POINTER_ADJUST = 2;\nvar ROOT$1 = 'e-tooltip';\nvar RTL$1 = 'e-rtl';\nvar DEVICE$1 = 'e-bigger';\nvar ICON$1 = 'e-icons';\nvar CLOSE = 'e-tooltip-close';\nvar TOOLTIP_WRAP = 'e-tooltip-wrap';\nvar CONTENT = 'e-tip-content';\nvar ARROW_TIP = 'e-arrow-tip';\nvar ARROW_TIP_OUTER = 'e-arrow-tip-outer';\nvar ARROW_TIP_INNER = 'e-arrow-tip-inner';\nvar TIP_BOTTOM = 'e-tip-bottom';\nvar TIP_TOP = 'e-tip-top';\nvar TIP_LEFT = 'e-tip-left';\nvar TIP_RIGHT = 'e-tip-right';\nvar POPUP_ROOT$1 = 'e-popup';\nvar POPUP_OPEN = 'e-popup-open';\nvar POPUP_CLOSE = 'e-popup-close';\nvar POPUP_LIB = 'e-lib';\nvar HIDE_POPUP = 'e-hidden';\nvar POPUP_CONTAINER = 'e-tooltip-popup-container';\n\nvar Animation$1 =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$2(Animation$$1, _super);\n\n  function Animation$$1() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$2([Property({\n    effect: 'FadeIn',\n    duration: 150,\n    delay: 0\n  })], Animation$$1.prototype, \"open\", void 0);\n\n  __decorate$2([Property({\n    effect: 'FadeOut',\n    duration: 150,\n    delay: 0\n  })], Animation$$1.prototype, \"close\", void 0);\n\n  return Animation$$1;\n}(ChildProperty);\n/**\n * Represents the Tooltip component that displays a piece of information about the target element on mouse hover.\n * ```html\n * <div id=\"tooltip\">Show Tooltip</div>\n * ```\n * ```typescript\n * <script>\n *   var tooltipObj = new Tooltip({ content: 'Tooltip text' });\n *   tooltipObj.appendTo(\"#tooltip\");\n * </script>\n * ```\n */\n\n\nvar Tooltip =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$2(Tooltip, _super);\n  /* eslint-enable */\n\n  /**\n   * Constructor for creating the Tooltip Component\n   *\n   * @param {TooltipModel} options - specifies the options for the constructor\n   * @param {string| HTMLElement} element - specifies the element for the constructor\n   *\n   */\n\n\n  function Tooltip(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.mouseMoveEvent = null;\n    _this.mouseMoveTarget = null;\n    _this.containerElement = null;\n    _this.isBodyContainer = true;\n    return _this;\n  }\n\n  Tooltip.prototype.initialize = function () {\n    this.formatPosition();\n    addClass([this.element], ROOT$1);\n  };\n\n  Tooltip.prototype.formatPosition = function () {\n    var _a, _b;\n\n    if (this.position.indexOf('Top') === 0 || this.position.indexOf('Bottom') === 0) {\n      _a = this.position.split(/(?=[A-Z])/), this.tooltipPositionY = _a[0], this.tooltipPositionX = _a[1];\n    } else {\n      _b = this.position.split(/(?=[A-Z])/), this.tooltipPositionX = _b[0], this.tooltipPositionY = _b[1];\n    }\n  };\n\n  Tooltip.prototype.renderArrow = function () {\n    this.setTipClass(this.position);\n    var tip = this.createElement('div', {\n      className: ARROW_TIP + ' ' + this.tipClass\n    });\n    tip.appendChild(this.createElement('div', {\n      className: ARROW_TIP_OUTER + ' ' + this.tipClass\n    }));\n    tip.appendChild(this.createElement('div', {\n      className: ARROW_TIP_INNER + ' ' + this.tipClass\n    }));\n    this.tooltipEle.appendChild(tip);\n  };\n\n  Tooltip.prototype.setTipClass = function (position) {\n    if (position.indexOf('Right') === 0) {\n      this.tipClass = TIP_LEFT;\n    } else if (position.indexOf('Bottom') === 0) {\n      this.tipClass = TIP_TOP;\n    } else if (position.indexOf('Left') === 0) {\n      this.tipClass = TIP_RIGHT;\n    } else {\n      this.tipClass = TIP_BOTTOM;\n    }\n  };\n\n  Tooltip.prototype.renderPopup = function (target) {\n    var elePos = this.mouseTrail ? {\n      top: 0,\n      left: 0\n    } : this.getTooltipPosition(target);\n    this.tooltipEle.classList.remove(POPUP_LIB);\n    this.popupObj = new Popup(this.tooltipEle, {\n      height: this.height,\n      width: this.width,\n      position: {\n        X: elePos.left,\n        Y: elePos.top\n      },\n      enableRtl: this.enableRtl,\n      open: this.openPopupHandler.bind(this),\n      close: this.closePopupHandler.bind(this)\n    });\n  };\n\n  Tooltip.prototype.getTooltipPosition = function (target) {\n    this.tooltipEle.style.display = 'block';\n    var pos = calculatePosition(target, this.tooltipPositionX, this.tooltipPositionY, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());\n    var offsetPos = this.calculateTooltipOffset(this.position);\n    var collisionPosition = this.calculateElementPosition(pos, offsetPos);\n    var collisionLeft = collisionPosition[0];\n    var collisionTop = collisionPosition[1];\n    var elePos = this.collisionFlipFit(target, collisionLeft, collisionTop);\n    this.tooltipEle.style.display = '';\n    return elePos;\n  };\n\n  Tooltip.prototype.windowResize = function () {\n    this.reposition(this.findTarget());\n  };\n\n  Tooltip.prototype.reposition = function (target) {\n    if (this.popupObj && target) {\n      var elePos = this.getTooltipPosition(target);\n      this.popupObj.position = {\n        X: elePos.left,\n        Y: elePos.top\n      };\n      this.popupObj.dataBind();\n    }\n  };\n\n  Tooltip.prototype.openPopupHandler = function () {\n    if (!this.mouseTrail && this.needTemplateReposition()) {\n      this.reposition(this.findTarget());\n    }\n\n    this.trigger('afterOpen', this.tooltipEventArgs);\n    this.tooltipEventArgs = null;\n  };\n\n  Tooltip.prototype.closePopupHandler = function () {\n    if (this.isReact && !(this.opensOn === 'Click' && typeof this.content === 'function')) {\n      this.clearTemplate(['content']);\n    }\n\n    this.clear();\n    this.trigger('afterClose', this.tooltipEventArgs);\n    this.tooltipEventArgs = null;\n  };\n\n  Tooltip.prototype.calculateTooltipOffset = function (position) {\n    var pos = {\n      top: 0,\n      left: 0\n    };\n    var tooltipEleWidth = this.tooltipEle.offsetWidth;\n    var tooltipEleHeight = this.tooltipEle.offsetHeight;\n    var arrowEle = select('.' + ARROW_TIP, this.tooltipEle);\n    var tipWidth = arrowEle ? arrowEle.offsetWidth : 0;\n    var tipHeight = arrowEle ? arrowEle.offsetHeight : 0;\n    var tipAdjust = this.showTipPointer ? SHOW_POINTER_TIP_GAP : HIDE_POINTER_TIP_GAP;\n    var tipHeightAdjust = tipHeight / 2 + POINTER_ADJUST + (this.tooltipEle.offsetHeight - this.tooltipEle.clientHeight);\n    var tipWidthAdjust = tipWidth / 2 + POINTER_ADJUST + (this.tooltipEle.offsetWidth - this.tooltipEle.clientWidth);\n\n    if (this.mouseTrail) {\n      tipAdjust += MOUSE_TRAIL_GAP;\n    }\n\n    switch (position) {\n      case 'RightTop':\n        pos.left += tipWidth + tipAdjust;\n        pos.top -= tooltipEleHeight - tipHeightAdjust;\n        break;\n\n      case 'RightCenter':\n        pos.left += tipWidth + tipAdjust;\n        pos.top -= tooltipEleHeight / 2;\n        break;\n\n      case 'RightBottom':\n        pos.left += tipWidth + tipAdjust;\n        pos.top -= tipHeightAdjust;\n        break;\n\n      case 'BottomRight':\n        pos.top += tipHeight + tipAdjust;\n        pos.left -= tipWidthAdjust;\n        break;\n\n      case 'BottomCenter':\n        pos.top += tipHeight + tipAdjust;\n        pos.left -= tooltipEleWidth / 2;\n        break;\n\n      case 'BottomLeft':\n        pos.top += tipHeight + tipAdjust;\n        pos.left -= tooltipEleWidth - tipWidthAdjust;\n        break;\n\n      case 'LeftBottom':\n        pos.left -= tipWidth + tooltipEleWidth + tipAdjust;\n        pos.top -= tipHeightAdjust;\n        break;\n\n      case 'LeftCenter':\n        pos.left -= tipWidth + tooltipEleWidth + tipAdjust;\n        pos.top -= tooltipEleHeight / 2;\n        break;\n\n      case 'LeftTop':\n        pos.left -= tipWidth + tooltipEleWidth + tipAdjust;\n        pos.top -= tooltipEleHeight - tipHeightAdjust;\n        break;\n\n      case 'TopLeft':\n        pos.top -= tooltipEleHeight + tipHeight + tipAdjust;\n        pos.left -= tooltipEleWidth - tipWidthAdjust;\n        break;\n\n      case 'TopRight':\n        pos.top -= tooltipEleHeight + tipHeight + tipAdjust;\n        pos.left -= tipWidthAdjust;\n        break;\n\n      default:\n        pos.top -= tooltipEleHeight + tipHeight + tipAdjust;\n        pos.left -= tooltipEleWidth / 2;\n        break;\n    }\n\n    pos.left += this.offsetX;\n    pos.top += this.offsetY;\n    return pos;\n  };\n\n  Tooltip.prototype.updateTipPosition = function (position) {\n    var selEle = selectAll('.' + ARROW_TIP + ',.' + ARROW_TIP_OUTER + ',.' + ARROW_TIP_INNER, this.tooltipEle);\n    var removeList = [TIP_BOTTOM, TIP_TOP, TIP_LEFT, TIP_RIGHT];\n    removeClass(selEle, removeList);\n    this.setTipClass(position);\n    addClass(selEle, this.tipClass);\n  };\n\n  Tooltip.prototype.adjustArrow = function (target, position, tooltipPositionX, tooltipPositionY) {\n    if (this.showTipPointer === false) {\n      return;\n    }\n\n    this.updateTipPosition(position);\n    var leftValue;\n    var topValue;\n    this.tooltipEle.style.display = 'block';\n    var tooltipWidth = this.tooltipEle.clientWidth;\n    var tooltipHeight = this.tooltipEle.clientHeight;\n    var arrowEle = select('.' + ARROW_TIP, this.tooltipEle);\n    var arrowInnerELe = select('.' + ARROW_TIP_INNER, this.tooltipEle);\n    var tipWidth = arrowEle.offsetWidth;\n    var tipHeight = arrowEle.offsetHeight;\n    this.tooltipEle.style.display = '';\n\n    if (this.tipClass === TIP_BOTTOM || this.tipClass === TIP_TOP) {\n      if (this.tipClass === TIP_BOTTOM) {\n        topValue = '99.9%'; // Arrow icon aligned -2px height from ArrowOuterTip div\n\n        arrowInnerELe.style.top = '-' + (tipHeight - 2) + 'px';\n      } else {\n        topValue = -(tipHeight - 1) + 'px'; // Arrow icon aligned -6px height from ArrowOuterTip div\n\n        arrowInnerELe.style.top = '-' + (tipHeight - 6) + 'px';\n      }\n\n      if (target) {\n        var tipPosExclude = tooltipPositionX !== 'Center' || tooltipWidth > target.offsetWidth || this.mouseTrail;\n\n        if (tipPosExclude && tooltipPositionX === 'Left' || !tipPosExclude && this.tipPointerPosition === 'End') {\n          leftValue = tooltipWidth - tipWidth - POINTER_ADJUST + 'px';\n        } else if (tipPosExclude && tooltipPositionX === 'Right' || !tipPosExclude && this.tipPointerPosition === 'Start') {\n          leftValue = POINTER_ADJUST + 'px';\n        } else if (tipPosExclude && (this.tipPointerPosition === 'End' || this.tipPointerPosition === 'Start')) {\n          leftValue = this.tipPointerPosition === 'End' ? target.offsetWidth + (this.tooltipEle.offsetWidth - target.offsetWidth) / 2 - tipWidth / 2 - POINTER_ADJUST + 'px' : (this.tooltipEle.offsetWidth - target.offsetWidth) / 2 - tipWidth / 2 + POINTER_ADJUST + 'px';\n        } else {\n          leftValue = tooltipWidth / 2 - tipWidth / 2 + 'px';\n        }\n      }\n    } else {\n      if (this.tipClass === TIP_RIGHT) {\n        leftValue = '99.9%'; // Arrow icon aligned -2px left from ArrowOuterTip div\n\n        arrowInnerELe.style.left = '-' + (tipWidth - 2) + 'px';\n      } else {\n        leftValue = -(tipWidth - 1) + 'px'; // Arrow icon aligned -2px from ArrowOuterTip width\n\n        arrowInnerELe.style.left = -tipWidth + (tipWidth - 2) + 'px';\n      }\n\n      var tipPosExclude = tooltipPositionY !== 'Center' || tooltipHeight > target.offsetHeight || this.mouseTrail;\n\n      if (tipPosExclude && tooltipPositionY === 'Top' || !tipPosExclude && this.tipPointerPosition === 'End') {\n        topValue = tooltipHeight - tipHeight - POINTER_ADJUST + 'px';\n      } else if (tipPosExclude && tooltipPositionY === 'Bottom' || !tipPosExclude && this.tipPointerPosition === 'Start') {\n        topValue = POINTER_ADJUST + 'px';\n      } else {\n        topValue = tooltipHeight / 2 - tipHeight / 2 + 'px';\n      }\n    }\n\n    arrowEle.style.top = topValue;\n    arrowEle.style.left = leftValue;\n  };\n\n  Tooltip.prototype.renderContent = function (target) {\n    var tooltipContent = select('.' + CONTENT, this.tooltipEle);\n\n    if (this.cssClass) {\n      addClass([this.tooltipEle], this.cssClass.split(' '));\n    }\n\n    if (target && !isNullOrUndefined(target.getAttribute('title'))) {\n      target.setAttribute('data-content', target.getAttribute('title'));\n      target.removeAttribute('title');\n    }\n\n    if (!isNullOrUndefined(this.content)) {\n      tooltipContent.innerHTML = '';\n\n      if (this.content instanceof HTMLElement) {\n        tooltipContent.appendChild(this.content);\n      } else if (typeof this.content === 'string') {\n        if (this.enableHtmlSanitizer) {\n          this.setProperties({\n            content: SanitizeHtmlHelper.sanitize(this.content)\n          }, true);\n        }\n\n        var tempFunction = compile(this.content);\n        var tempArr = tempFunction({}, this, 'content', this.element.id + 'content', undefined, undefined, tooltipContent);\n\n        if (tempArr) {\n          if (this.enableHtmlParse) {\n            var nodeList = tempArr.length;\n\n            for (var i = 0; i < nodeList; i++) {\n              tooltipContent[(append(tempArr, tooltipContent), 'innerHTML')] = this.content;\n            }\n          } else {\n            tooltipContent['textContent'] = this.content;\n          }\n        }\n      } else {\n        var templateFunction = compile(this.content);\n        var tempArr = templateFunction({}, this, 'content', this.element.id + 'content', undefined, undefined, tooltipContent);\n\n        if (tempArr) {\n          append(tempArr, tooltipContent);\n        }\n\n        this.renderReactTemplates();\n      }\n    } else {\n      if (target && !isNullOrUndefined(target.getAttribute('data-content'))) {\n        tooltipContent.innerHTML = target.getAttribute('data-content');\n      }\n    }\n  };\n\n  Tooltip.prototype.renderCloseIcon = function () {\n    if (!this.isSticky) {\n      return;\n    }\n\n    var tipClose = this.createElement('div', {\n      className: ICON$1 + ' ' + CLOSE\n    });\n    this.tooltipEle.appendChild(tipClose);\n    EventHandler.add(tipClose, Browser.touchStartEvent, this.onStickyClose, this);\n  };\n\n  Tooltip.prototype.addDataTooltipId = function (target, id) {\n    attributes(target, {\n      'data-tooltip-id': id\n    });\n  };\n\n  Tooltip.prototype.removeDataTooltipId = function (target) {\n    target.removeAttribute('data-tooltip-id');\n  };\n\n  Tooltip.prototype.tapHoldHandler = function (evt) {\n    clearTimeout(this.autoCloseTimer);\n    this.targetHover(evt.originalEvent);\n  };\n\n  Tooltip.prototype.touchEndHandler = function (e) {\n    var _this = this;\n\n    if (this.isSticky) {\n      return;\n    }\n\n    var close = function () {\n      _this.close();\n    };\n\n    this.autoCloseTimer = setTimeout(close, TOUCHEND_HIDE_DELAY);\n  };\n\n  Tooltip.prototype.targetClick = function (e) {\n    var target;\n\n    if (this.target) {\n      target = closest(e.target, this.target);\n    } else {\n      target = this.element;\n    }\n\n    if (isNullOrUndefined(target)) {\n      return;\n    }\n\n    if (target.getAttribute('data-tooltip-id') === null) {\n      this.targetHover(e);\n    } else if (!this.isSticky) {\n      this.hideTooltip(this.animation.close, e, target);\n    }\n  };\n\n  Tooltip.prototype.targetHover = function (e) {\n    var target;\n\n    if (this.target) {\n      target = closest(e.target, this.target);\n    } else {\n      target = this.element;\n    }\n\n    if (isNullOrUndefined(target) || target.getAttribute('data-tooltip-id') !== null && this.closeDelay === 0) {\n      return;\n    }\n\n    var targetList = [].slice.call(selectAll('[data-tooltip-id= \"' + this.ctrlId + '_content\"]', document));\n\n    for (var _i = 0, targetList_1 = targetList; _i < targetList_1.length; _i++) {\n      var target_1 = targetList_1[_i];\n      this.restoreElement(target_1);\n    }\n\n    this.showTooltip(target, this.animation.open, e);\n  };\n\n  Tooltip.prototype.mouseMoveBeforeOpen = function (e) {\n    this.mouseMoveEvent = e;\n  };\n\n  Tooltip.prototype.mouseMoveBeforeRemove = function () {\n    if (this.mouseMoveTarget) {\n      EventHandler.remove(this.mouseMoveTarget, 'mousemove touchstart', this.mouseMoveBeforeOpen);\n    }\n  };\n\n  Tooltip.prototype.showTooltip = function (target, showAnimation, e) {\n    var _this = this;\n\n    clearTimeout(this.showTimer);\n    clearTimeout(this.hideTimer);\n\n    if (this.openDelay && this.mouseTrail) {\n      this.mouseMoveBeforeRemove();\n      this.mouseMoveTarget = target;\n      EventHandler.add(this.mouseMoveTarget, 'mousemove touchstart', this.mouseMoveBeforeOpen, this);\n    }\n\n    this.tooltipEventArgs = {\n      type: e ? e.type : null,\n      cancel: false,\n      target: target,\n      event: e ? e : null,\n      element: this.tooltipEle,\n      isInteracted: !isNullOrUndefined(e)\n    };\n\n    var observeCallback = function (beforeRenderArgs) {\n      _this.beforeRenderCallback(beforeRenderArgs, target, e, showAnimation);\n    };\n\n    this.trigger('beforeRender', this.tooltipEventArgs, observeCallback.bind(this));\n  };\n\n  Tooltip.prototype.beforeRenderCallback = function (beforeRenderArgs, target, e, showAnimation) {\n    if (beforeRenderArgs.cancel) {\n      this.isHidden = true;\n      this.clear();\n      this.mouseMoveBeforeRemove();\n    } else {\n      this.isHidden = false;\n\n      if (isNullOrUndefined(this.tooltipEle)) {\n        this.ctrlId = this.element.getAttribute('id') ? getUniqueID(this.element.getAttribute('id')) : getUniqueID('tooltip');\n        this.tooltipEle = this.createElement('div', {\n          className: TOOLTIP_WRAP + ' ' + POPUP_ROOT$1 + ' ' + POPUP_LIB,\n          attrs: {\n            role: 'tooltip',\n            'aria-hidden': 'false',\n            'id': this.ctrlId + '_content'\n          },\n          styles: 'width:' + formatUnit(this.width) + ';height:' + formatUnit(this.height) + ';position:absolute;'\n        });\n\n        if (Object.keys(this.htmlAttributes).length !== 0) {\n          for (var attr in this.htmlAttributes) {\n            if (attr === \"class\") {\n              this.tooltipEle.classList.add(this.htmlAttributes[\"\" + attr]);\n            } else {\n              this.tooltipEle.setAttribute(attr, this.htmlAttributes[\"\" + attr]);\n            }\n          }\n        }\n\n        this.tooltipBeforeRender(target, this);\n        this.tooltipAfterRender(target, e, showAnimation, this);\n      } else {\n        if (target) {\n          this.adjustArrow(target, this.position, this.tooltipPositionX, this.tooltipPositionY);\n          this.addDataTooltipId(target, this.ctrlId + '_content');\n          this.renderContent(target);\n          Animation.stop(this.tooltipEle);\n          this.reposition(target);\n          this.tooltipAfterRender(target, e, showAnimation, this);\n        }\n      }\n    }\n  };\n\n  Tooltip.prototype.appendContainer = function (ctrlObj) {\n    if (typeof this.container == 'string') {\n      if (this.container === 'body') {\n        this.containerElement = document.body;\n      } else {\n        this.isBodyContainer = false;\n        this.containerElement = select(this.container, document);\n      }\n    } else if (this.container instanceof HTMLElement) {\n      this.containerElement = this.container;\n      this.isBodyContainer = this.containerElement.tagName === 'BODY';\n    }\n\n    if (!this.isBodyContainer) {\n      addClass([this.containerElement], POPUP_CONTAINER);\n    }\n\n    this.containerElement.appendChild(ctrlObj.tooltipEle);\n  };\n\n  Tooltip.prototype.tooltipBeforeRender = function (target, ctrlObj) {\n    if (target) {\n      if (Browser.isDevice) {\n        addClass([ctrlObj.tooltipEle], DEVICE$1);\n      }\n\n      if (ctrlObj.width !== 'auto') {\n        ctrlObj.tooltipEle.style.maxWidth = formatUnit(ctrlObj.width);\n      }\n\n      ctrlObj.tooltipEle.appendChild(ctrlObj.createElement('div', {\n        className: CONTENT\n      }));\n      this.appendContainer(ctrlObj);\n      removeClass([ctrlObj.tooltipEle], HIDE_POPUP);\n      ctrlObj.addDataTooltipId(target, ctrlObj.ctrlId + '_content');\n      ctrlObj.renderContent(target);\n      addClass([ctrlObj.tooltipEle], POPUP_OPEN);\n\n      if (ctrlObj.showTipPointer) {\n        ctrlObj.renderArrow();\n      }\n\n      ctrlObj.renderCloseIcon();\n      ctrlObj.renderPopup(target);\n      ctrlObj.adjustArrow(target, ctrlObj.position, ctrlObj.tooltipPositionX, ctrlObj.tooltipPositionY);\n      Animation.stop(ctrlObj.tooltipEle);\n      ctrlObj.reposition(target);\n    }\n  };\n\n  Tooltip.prototype.tooltipAfterRender = function (target, e, showAnimation, ctrlObj) {\n    if (target) {\n      removeClass([ctrlObj.tooltipEle], POPUP_OPEN);\n      addClass([ctrlObj.tooltipEle], POPUP_CLOSE);\n      ctrlObj.tooltipEventArgs = {\n        type: e ? e.type : null,\n        cancel: false,\n        target: target,\n        event: e ? e : null,\n        element: ctrlObj.tooltipEle,\n        isInteracted: !isNullOrUndefined(e)\n      };\n\n      if (ctrlObj.needTemplateReposition() && !ctrlObj.mouseTrail) {\n        ctrlObj.tooltipEle.style.display = 'none';\n      }\n\n      var observeCallback = function (observedArgs) {\n        ctrlObj.beforeOpenCallback(observedArgs, target, showAnimation, e);\n      };\n\n      ctrlObj.trigger('beforeOpen', ctrlObj.tooltipEventArgs, observeCallback.bind(ctrlObj));\n    }\n  };\n\n  Tooltip.prototype.beforeOpenCallback = function (observedArgs, target, showAnimation, e) {\n    var _this = this;\n\n    if (observedArgs.cancel) {\n      this.isHidden = true;\n      this.clear();\n      this.mouseMoveBeforeRemove();\n      this.restoreElement(target);\n    } else {\n      var openAnimation_1 = {\n        name: showAnimation.effect,\n        duration: showAnimation.duration,\n        delay: showAnimation.delay,\n        timingFunction: 'easeOut'\n      };\n\n      if (showAnimation.effect === 'None') {\n        openAnimation_1 = undefined;\n      }\n\n      if (this.openDelay > 0) {\n        var show = function () {\n          if (_this.mouseTrail) {\n            EventHandler.add(target, 'mousemove touchstart mouseenter', _this.onMouseMove, _this);\n          }\n\n          if (_this.popupObj) {\n            _this.popupObj.show(openAnimation_1, target);\n\n            if (_this.mouseMoveEvent && _this.mouseTrail) {\n              _this.onMouseMove(_this.mouseMoveEvent);\n            }\n          }\n        };\n\n        this.showTimer = setTimeout(show, this.openDelay);\n      } else {\n        if (this.popupObj) {\n          this.popupObj.show(openAnimation_1, target);\n        }\n      }\n    }\n\n    if (e) {\n      this.wireMouseEvents(e, target);\n    }\n  };\n\n  Tooltip.prototype.needTemplateReposition = function () {\n    // eslint-disable-next-line\n    var tooltip = this;\n    return !isNullOrUndefined(tooltip.viewContainerRef) && typeof tooltip.viewContainerRef !== 'string';\n  };\n\n  Tooltip.prototype.checkCollision = function (target, x, y) {\n    var elePos = {\n      left: x,\n      top: y,\n      position: this.position,\n      horizontal: this.tooltipPositionX,\n      vertical: this.tooltipPositionY\n    };\n    var affectedPos = isCollide(this.tooltipEle, this.checkCollideTarget(), x, y);\n\n    if (affectedPos.length > 0) {\n      elePos.horizontal = affectedPos.indexOf('left') >= 0 ? 'Right' : affectedPos.indexOf('right') >= 0 ? 'Left' : this.tooltipPositionX;\n      elePos.vertical = affectedPos.indexOf('top') >= 0 ? 'Bottom' : affectedPos.indexOf('bottom') >= 0 ? 'Top' : this.tooltipPositionY;\n    }\n\n    return elePos;\n  };\n\n  Tooltip.prototype.calculateElementPosition = function (pos, offsetPos) {\n    return [this.isBodyContainer ? pos.left + offsetPos.left : pos.left - this.containerElement.offsetLeft + offsetPos.left + window.pageXOffset + this.containerElement.scrollLeft, this.isBodyContainer ? pos.top + offsetPos.top : pos.top - this.containerElement.offsetTop + offsetPos.top + window.pageYOffset + this.containerElement.scrollTop];\n  };\n\n  Tooltip.prototype.collisionFlipFit = function (target, x, y) {\n    var elePos = this.checkCollision(target, x, y);\n    var newpos = elePos.position;\n\n    if (this.tooltipPositionY !== elePos.vertical) {\n      newpos = this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0 ? elePos.vertical + this.tooltipPositionX : this.tooltipPositionX + elePos.vertical;\n    }\n\n    if (this.tooltipPositionX !== elePos.horizontal) {\n      if (newpos.indexOf('Left') === 0) {\n        elePos.vertical = newpos === 'LeftTop' || newpos === 'LeftCenter' ? 'Top' : 'Bottom';\n        newpos = elePos.vertical + 'Left';\n      }\n\n      if (newpos.indexOf('Right') === 0) {\n        elePos.vertical = newpos === 'RightTop' || newpos === 'RightCenter' ? 'Top' : 'Bottom';\n        newpos = elePos.vertical + 'Right';\n      }\n\n      elePos.horizontal = this.tooltipPositionX;\n    }\n\n    this.tooltipEventArgs = {\n      type: null,\n      cancel: false,\n      target: target,\n      event: null,\n      element: this.tooltipEle,\n      collidedPosition: newpos\n    };\n    this.trigger('beforeCollision', this.tooltipEventArgs);\n    var elePosVertical = elePos.vertical;\n    var elePosHorizontal = elePos.horizontal;\n\n    if (elePos.position !== newpos) {\n      var pos = calculatePosition(target, elePosHorizontal, elePosVertical, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());\n      this.adjustArrow(target, newpos, elePosHorizontal, elePosVertical);\n      var offsetPos = this.calculateTooltipOffset(newpos);\n      offsetPos.top -= this.getOffSetPosition('TopBottom', newpos, this.offsetY);\n      offsetPos.left -= this.getOffSetPosition('RightLeft', newpos, this.offsetX);\n      elePos.position = newpos;\n      var elePosition = this.calculateElementPosition(pos, offsetPos);\n      elePos.left = elePosition[0];\n      elePos.top = elePosition[1];\n    } else {\n      this.adjustArrow(target, newpos, elePosHorizontal, elePosVertical);\n    }\n\n    var eleOffset = {\n      left: elePos.left,\n      top: elePos.top\n    };\n    var left = this.isBodyContainer ? fit(this.tooltipEle, this.checkCollideTarget(), {\n      X: true,\n      Y: false\n    }, eleOffset).left : eleOffset.left;\n    this.tooltipEle.style.display = 'block';\n\n    if (this.showTipPointer && (newpos.indexOf('Bottom') === 0 || newpos.indexOf('Top') === 0)) {\n      var arrowEle = select('.' + ARROW_TIP, this.tooltipEle);\n      var arrowleft = parseInt(arrowEle.style.left, 10) - (left - elePos.left);\n\n      if (arrowleft < 0) {\n        arrowleft = 0;\n      } else if (arrowleft + arrowEle.offsetWidth > this.tooltipEle.clientWidth) {\n        arrowleft = this.tooltipEle.clientWidth - arrowEle.offsetWidth;\n      }\n\n      arrowEle.style.left = arrowleft.toString() + 'px';\n    }\n\n    this.tooltipEle.style.display = '';\n    eleOffset.left = left;\n    return eleOffset;\n  };\n\n  Tooltip.prototype.getOffSetPosition = function (positionString, newPos, offsetType) {\n    return positionString.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1 && positionString.indexOf(newPos.split(/(?=[A-Z])/)[0]) !== -1 ? 2 * offsetType : 0;\n  };\n\n  Tooltip.prototype.checkCollideTarget = function () {\n    return !this.windowCollision && this.target ? this.element : null;\n  };\n\n  Tooltip.prototype.hideTooltip = function (hideAnimation, e, targetElement) {\n    var _this = this;\n\n    if (this.closeDelay > 0) {\n      clearTimeout(this.hideTimer);\n      clearTimeout(this.showTimer);\n\n      var hide = function () {\n        if (_this.closeDelay && _this.tooltipEle && _this.isTooltipOpen) {\n          return;\n        }\n\n        _this.tooltipHide(hideAnimation, e, targetElement);\n      };\n\n      this.hideTimer = setTimeout(hide, this.closeDelay);\n    } else {\n      this.tooltipHide(hideAnimation, e, targetElement);\n    }\n  };\n\n  Tooltip.prototype.tooltipHide = function (hideAnimation, e, targetElement) {\n    var _this = this;\n\n    var target;\n\n    if (e) {\n      target = this.target ? targetElement || e.target : this.element;\n    } else {\n      target = select('[data-tooltip-id= \"' + this.ctrlId + '_content\"]', document);\n    }\n\n    this.tooltipEventArgs = {\n      type: e ? e.type : null,\n      cancel: false,\n      target: target,\n      event: e ? e : null,\n      element: this.tooltipEle,\n      isInteracted: !isNullOrUndefined(e)\n    }; // this line commented for close the tooltip popup element even the target element destroyed in a page.\n    //if (isNullOrUndefined(target)) { return; }\n\n    this.trigger('beforeClose', this.tooltipEventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        _this.mouseMoveBeforeRemove();\n\n        _this.popupHide(hideAnimation, target);\n      } else {\n        _this.isHidden = false;\n      }\n    });\n    this.tooltipEventArgs = null;\n  };\n\n  Tooltip.prototype.popupHide = function (hideAnimation, target) {\n    if (target) {\n      this.restoreElement(target);\n    }\n\n    this.isHidden = true;\n    var closeAnimation = {\n      name: hideAnimation.effect,\n      duration: hideAnimation.duration,\n      delay: hideAnimation.delay,\n      timingFunction: 'easeIn'\n    };\n\n    if (hideAnimation.effect === 'None') {\n      closeAnimation = undefined;\n    }\n\n    if (this.popupObj) {\n      this.popupObj.hide(closeAnimation);\n    }\n  };\n\n  Tooltip.prototype.restoreElement = function (target) {\n    this.unwireMouseEvents(target);\n\n    if (!isNullOrUndefined(target.getAttribute('data-content'))) {\n      target.setAttribute('title', target.getAttribute('data-content'));\n      target.removeAttribute('data-content');\n    }\n\n    this.removeDataTooltipId(target);\n  };\n\n  Tooltip.prototype.clear = function () {\n    if (this.tooltipEle) {\n      removeClass([this.tooltipEle], POPUP_CLOSE);\n      addClass([this.tooltipEle], POPUP_OPEN);\n    }\n\n    if (this.isHidden) {\n      if (this.popupObj) {\n        this.popupObj.destroy();\n      }\n\n      if (this.tooltipEle) {\n        remove(this.tooltipEle);\n      }\n\n      this.tooltipEle = null;\n      this.popupObj = null;\n    }\n  };\n\n  Tooltip.prototype.tooltipHover = function (e) {\n    if (this.tooltipEle) {\n      this.isTooltipOpen = true;\n    }\n  };\n\n  Tooltip.prototype.tooltipMouseOut = function (e) {\n    this.isTooltipOpen = false;\n    this.hideTooltip(this.animation.close, e, this.findTarget());\n  };\n\n  Tooltip.prototype.onMouseOut = function (e) {\n    var enteredElement = e.relatedTarget; // don't close the tooltip only if it is tooltip content element\n\n    if (enteredElement && !this.mouseTrail) {\n      var checkForTooltipElement = closest(enteredElement, \".\" + TOOLTIP_WRAP + \".\" + POPUP_LIB + \".\" + POPUP_ROOT$1);\n\n      if (checkForTooltipElement) {\n        EventHandler.add(checkForTooltipElement, 'mouseleave', this.tooltipElementMouseOut, this);\n      } else {\n        this.hideTooltip(this.animation.close, e, this.findTarget());\n\n        if (this.closeDelay === 0) {\n          this.clear();\n        }\n      }\n    } else {\n      this.hideTooltip(this.animation.close, e, this.findTarget());\n      this.clear();\n    }\n  };\n\n  Tooltip.prototype.tooltipElementMouseOut = function (e) {\n    this.hideTooltip(this.animation.close, e, this.findTarget());\n    EventHandler.remove(this.element, 'mouseleave', this.tooltipElementMouseOut);\n    this.clear();\n  };\n\n  Tooltip.prototype.onStickyClose = function (e) {\n    this.close();\n  };\n\n  Tooltip.prototype.onMouseMove = function (event) {\n    var eventPageX = 0;\n    var eventPageY = 0;\n\n    if (event.type.indexOf('touch') > -1) {\n      event.preventDefault();\n      eventPageX = event.touches[0].pageX;\n      eventPageY = event.touches[0].pageY;\n    } else {\n      eventPageX = event.pageX;\n      eventPageY = event.pageY;\n    }\n\n    Animation.stop(this.tooltipEle);\n    removeClass([this.tooltipEle], POPUP_CLOSE);\n    addClass([this.tooltipEle], POPUP_OPEN);\n    this.adjustArrow(event.target, this.position, this.tooltipPositionX, this.tooltipPositionY);\n    var pos = this.calculateTooltipOffset(this.position);\n    var x = eventPageX + pos.left + this.offsetX;\n    var y = eventPageY + pos.top + this.offsetY;\n    var elePos = this.checkCollision(event.target, x, y);\n\n    if (this.tooltipPositionX !== elePos.horizontal || this.tooltipPositionY !== elePos.vertical) {\n      var newpos = this.position.indexOf('Bottom') === 0 || this.position.indexOf('Top') === 0 ? elePos.vertical + elePos.horizontal : elePos.horizontal + elePos.vertical;\n      elePos.position = newpos;\n      this.adjustArrow(event.target, elePos.position, elePos.horizontal, elePos.vertical);\n      var colpos = this.calculateTooltipOffset(elePos.position);\n      elePos.left = eventPageX + colpos.left - this.offsetX;\n      elePos.top = eventPageY + colpos.top - this.offsetY;\n    }\n\n    this.tooltipEle.style.left = elePos.left + 'px';\n    this.tooltipEle.style.top = elePos.top + 'px';\n  };\n\n  Tooltip.prototype.keyDown = function (event) {\n    if (this.tooltipEle && event.keyCode === 27) {\n      this.close();\n    }\n  };\n\n  Tooltip.prototype.touchEnd = function (e) {\n    if (this.tooltipEle && closest(e.target, '.' + ROOT$1) === null && !this.isSticky) {\n      this.close();\n    }\n  };\n\n  Tooltip.prototype.scrollHandler = function (e) {\n    if (this.tooltipEle) {\n      if (!closest(e.target, \".\" + TOOLTIP_WRAP + \".\" + POPUP_LIB + \".\" + POPUP_ROOT$1)) {\n        this.close();\n      }\n    }\n  };\n  /**\n   * Core method that initializes the control rendering.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  Tooltip.prototype.render = function () {\n    this.initialize();\n    this.wireEvents(this.opensOn);\n    this.renderComplete();\n  };\n  /**\n   * Initializes the values of private members.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  Tooltip.prototype.preRender = function () {\n    this.tipClass = TIP_BOTTOM;\n    this.tooltipPositionX = 'Center';\n    this.tooltipPositionY = 'Top';\n    this.isHidden = true;\n  };\n  /**\n   * Binding events to the Tooltip element.\n   *\n   * @hidden\n   * @param {string} trigger - specify the trigger string to the function\n   * @returns {void}\n   *\n   */\n\n\n  Tooltip.prototype.wireEvents = function (trigger) {\n    var triggerList = this.getTriggerList(trigger);\n\n    for (var _i = 0, triggerList_1 = triggerList; _i < triggerList_1.length; _i++) {\n      var opensOn = triggerList_1[_i];\n\n      if (opensOn === 'Custom') {\n        return;\n      }\n\n      if (opensOn === 'Focus') {\n        this.wireFocusEvents();\n        EventHandler.add(this.element, 'DOMNodeInserted', this.updateTarget, this);\n      }\n\n      if (opensOn === 'Click') {\n        EventHandler.add(this.element, Browser.touchStartEvent, this.targetClick, this);\n      }\n\n      if (opensOn === 'Hover') {\n        if (Browser.isDevice) {\n          this.touchModule = new Touch(this.element, {\n            tapHoldThreshold: TAPHOLD_THRESHOLD,\n            tapHold: this.tapHoldHandler.bind(this)\n          });\n          EventHandler.add(this.element, Browser.touchEndEvent, this.touchEndHandler, this);\n        } else {\n          EventHandler.add(this.element, 'mouseover', this.targetHover, this);\n        }\n      }\n    }\n\n    EventHandler.add(document, 'touchend', this.touchEnd, this);\n    EventHandler.add(document, 'scroll wheel', this.scrollHandler, this);\n    EventHandler.add(window, 'resize', this.windowResize, this);\n    EventHandler.add(document, 'keydown', this.keyDown, this);\n  };\n\n  Tooltip.prototype.updateTarget = function (e) {\n    if (!isNullOrUndefined(this.targetsList) && !isNullOrUndefined(this.target)) {\n      var target = [].slice.call(selectAll(this.target, this.element));\n\n      if (target.length !== this.targetsList.length) {\n        this.unwireEvents(this.opensOn);\n        this.wireEvents(this.opensOn);\n      }\n    }\n  };\n\n  Tooltip.prototype.getTriggerList = function (trigger) {\n    if (trigger === 'Auto') {\n      trigger = Browser.isDevice ? 'Hover' : 'Hover Focus';\n    }\n\n    return trigger.split(' ');\n  };\n\n  Tooltip.prototype.wireFocusEvents = function () {\n    if (!isNullOrUndefined(this.target)) {\n      var targetList = [].slice.call(selectAll(this.target, this.element));\n      this.targetsList = targetList;\n\n      for (var _i = 0, targetList_2 = targetList; _i < targetList_2.length; _i++) {\n        var target = targetList_2[_i];\n        EventHandler.add(target, 'focus', this.targetHover, this);\n      }\n    } else {\n      EventHandler.add(this.element, 'focus', this.targetHover, this);\n    }\n  };\n\n  Tooltip.prototype.wireMouseEvents = function (e, target) {\n    if (this.tooltipEle) {\n      if (!this.isSticky) {\n        if (e.type === 'focus') {\n          EventHandler.add(target, 'blur', this.onMouseOut, this);\n        }\n\n        if (e.type === 'mouseover') {\n          EventHandler.add(target, 'mouseleave', this.onMouseOut, this);\n        }\n\n        if (this.closeDelay) {\n          EventHandler.add(this.tooltipEle, 'mouseenter', this.tooltipHover, this);\n          EventHandler.add(this.tooltipEle, 'mouseleave', this.tooltipMouseOut, this);\n        }\n      }\n\n      if (this.mouseTrail && this.openDelay === 0) {\n        EventHandler.add(target, 'mousemove touchstart mouseenter', this.onMouseMove, this);\n      }\n    }\n  };\n  /**\n   * Unbinding events from the element on widget destroy.\n   *\n   * @hidden\n   *\n   * @param {string} trigger - specify the trigger string to the function\n   * @returns {void}\n   *\n   */\n\n\n  Tooltip.prototype.unwireEvents = function (trigger) {\n    var triggerList = this.getTriggerList(trigger);\n\n    for (var _i = 0, triggerList_2 = triggerList; _i < triggerList_2.length; _i++) {\n      var opensOn = triggerList_2[_i];\n\n      if (opensOn === 'Custom') {\n        return;\n      }\n\n      if (opensOn === 'Focus') {\n        this.unwireFocusEvents();\n        EventHandler.remove(this.element, 'DOMNodeInserted', this.updateTarget);\n      }\n\n      if (opensOn === 'Click') {\n        EventHandler.remove(this.element, Browser.touchStartEvent, this.targetClick);\n      }\n\n      if (opensOn === 'Hover') {\n        if (Browser.isDevice) {\n          if (this.touchModule) {\n            this.touchModule.destroy();\n          }\n\n          EventHandler.remove(this.element, Browser.touchEndEvent, this.touchEndHandler);\n        } else {\n          EventHandler.remove(this.element, 'mouseover', this.targetHover);\n        }\n      }\n    }\n\n    EventHandler.remove(document, 'touchend', this.touchEnd);\n    EventHandler.remove(document, 'scroll wheel', this.scrollHandler);\n    EventHandler.remove(window, 'resize', this.windowResize);\n    EventHandler.remove(document, 'keydown', this.keyDown);\n  };\n\n  Tooltip.prototype.unwireFocusEvents = function () {\n    if (!isNullOrUndefined(this.target)) {\n      var targetList = [].slice.call(selectAll(this.target, this.element));\n\n      for (var _i = 0, targetList_3 = targetList; _i < targetList_3.length; _i++) {\n        var target = targetList_3[_i];\n        EventHandler.remove(target, 'focus', this.targetHover);\n      }\n    } else {\n      EventHandler.remove(this.element, 'focus', this.targetHover);\n    }\n  };\n\n  Tooltip.prototype.unwireMouseEvents = function (target) {\n    if (!this.isSticky) {\n      var triggerList = this.getTriggerList(this.opensOn);\n\n      for (var _i = 0, triggerList_3 = triggerList; _i < triggerList_3.length; _i++) {\n        var opensOn = triggerList_3[_i];\n\n        if (opensOn === 'Focus') {\n          EventHandler.remove(target, 'blur', this.onMouseOut);\n        }\n\n        if (opensOn === 'Hover' && !Browser.isDevice) {\n          EventHandler.remove(target, 'mouseleave', this.onMouseOut);\n        }\n      }\n\n      if (this.closeDelay) {\n        EventHandler.remove(target, 'mouseenter', this.tooltipHover);\n        EventHandler.remove(target, 'mouseleave', this.tooltipMouseOut);\n      }\n    }\n\n    if (this.mouseTrail) {\n      EventHandler.remove(target, 'mousemove touchstart mouseenter', this.onMouseMove);\n    }\n  };\n\n  Tooltip.prototype.findTarget = function () {\n    var target = select('[data-tooltip-id= \"' + this.ctrlId + '_content\"]', document);\n    return target;\n  };\n  /**\n   * Core method to return the component name.\n   *\n   * @private\n   *\n   * @returns {string} - this method returns module name.\n   */\n\n\n  Tooltip.prototype.getModuleName = function () {\n    return 'tooltip';\n  };\n  /**\n   * Returns the properties to be maintained in the persisted state.\n   *\n   * @private\n   *\n   * @returns {string} - this method returns persisted data.\n   */\n\n\n  Tooltip.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n  /**\n   * Called internally, if any of the property value changed.\n   *\n   * @private\n   *\n   * @param {TooltipModel} newProp - this param gives new property values to the method\n   * @param {TooltipModel} oldProp - this param gives old property values to the method\n   * @returns {void}\n   *\n   */\n\n\n  Tooltip.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var targetElement = this.findTarget();\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'width':\n          if (this.tooltipEle && targetElement) {\n            this.tooltipEle.style.width = this.tooltipEle.style.maxWidth = formatUnit(newProp.width);\n            this.reposition(targetElement);\n          }\n\n          break;\n\n        case 'height':\n          if (this.tooltipEle && targetElement) {\n            this.tooltipEle.style.height = formatUnit(newProp.height);\n            this.reposition(targetElement);\n          }\n\n          break;\n\n        case 'content':\n          if (this.tooltipEle) {\n            this.renderContent();\n          }\n\n          break;\n\n        case 'opensOn':\n          this.unwireEvents(oldProp.opensOn);\n          this.wireEvents(newProp.opensOn);\n          break;\n\n        case 'position':\n          this.formatPosition();\n\n          if (this.tooltipEle && targetElement) {\n            var arrowInnerELe = select('.' + ARROW_TIP_INNER, this.tooltipEle);\n            arrowInnerELe.style.top = arrowInnerELe.style.left = null;\n            this.reposition(targetElement);\n          }\n\n          break;\n\n        case 'tipPointerPosition':\n          if (this.tooltipEle && targetElement) {\n            this.reposition(targetElement);\n          }\n\n          break;\n\n        case 'offsetX':\n          if (this.tooltipEle) {\n            var x = newProp.offsetX - oldProp.offsetX;\n            this.tooltipEle.style.left = (parseInt(this.tooltipEle.style.left, 10) + x).toString() + 'px';\n          }\n\n          break;\n\n        case 'offsetY':\n          if (this.tooltipEle) {\n            var y = newProp.offsetY - oldProp.offsetY;\n            this.tooltipEle.style.top = (parseInt(this.tooltipEle.style.top, 10) + y).toString() + 'px';\n          }\n\n          break;\n\n        case 'cssClass':\n          if (this.tooltipEle) {\n            if (oldProp.cssClass) {\n              removeClass([this.tooltipEle], oldProp.cssClass.split(' '));\n            }\n\n            if (newProp.cssClass) {\n              addClass([this.tooltipEle], newProp.cssClass.split(' '));\n            }\n          }\n\n          break;\n\n        case 'enableRtl':\n          if (this.tooltipEle) {\n            if (this.enableRtl) {\n              addClass([this.tooltipEle], RTL$1);\n            } else {\n              removeClass([this.tooltipEle], RTL$1);\n            }\n          }\n\n          break;\n\n        case 'container':\n          if (!isNullOrUndefined(this.containerElement)) {\n            removeClass([this.containerElement], POPUP_CONTAINER);\n          }\n\n          this.container = newProp.container;\n\n          if (this.tooltipEle && targetElement) {\n            this.appendContainer(this);\n            this.reposition(targetElement);\n          }\n\n      }\n    }\n  };\n  /**\n   * It is used to show the Tooltip on the specified target with specific animation settings.\n   *\n   * @param {HTMLElement} element - Target element where the Tooltip is to be displayed. (It is an optional parameter)\n   * @param {TooltipAnimationSettings} animation - Sets the specific animation, while showing the Tooltip on the screen. (It is an optional parameter)\n   * @returns {void}\n   */\n\n\n  Tooltip.prototype.open = function (element, animation) {\n    if (isNullOrUndefined(animation)) {\n      animation = this.animation.open;\n    }\n\n    if (isNullOrUndefined(element)) {\n      element = this.element;\n    }\n\n    if (element.style.display === 'none') {\n      return;\n    }\n\n    this.showTooltip(element, animation);\n  };\n  /**\n   * It is used to hide the Tooltip with specific animation effect.\n   *\n   * @param {TooltipAnimationSettings} animation - Sets the specific animation when hiding Tooltip from the screen. (It is an optional parameter)\n   * @returns {void}\n   */\n\n\n  Tooltip.prototype.close = function (animation) {\n    if (!animation) {\n      animation = this.animation.close;\n    }\n\n    this.hideTooltip(animation);\n  };\n  /**\n   * It is used to refresh the Tooltip content and its position.\n   *\n   * @param {HTMLElement} target - Target element where the Tooltip content or position needs to be refreshed.\n   * @returns {void}\n   */\n\n\n  Tooltip.prototype.refresh = function (target) {\n    if (this.tooltipEle) {\n      this.renderContent(target);\n    }\n\n    if (this.popupObj && target) {\n      this.reposition(target);\n    }\n  };\n  /**\n   * It is used to destroy the Tooltip component.\n   * @method destroy\n   * @returns {void}\n   * @memberof Tooltip\n   */\n\n\n  Tooltip.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    if (this.tooltipEle) {\n      remove(this.tooltipEle);\n    }\n\n    if (this.popupObj) {\n      this.popupObj.destroy();\n    }\n\n    removeClass([this.element], ROOT$1);\n    this.unwireEvents(this.opensOn);\n    this.unwireMouseEvents(this.element);\n    this.tooltipEle = null;\n    this.popupObj = null;\n    var currentTarget = selectAll('[data-tooltip-id= \"' + this.ctrlId + '_content\"]', this.element);\n\n    for (var _i = 0, currentTarget_1 = currentTarget; _i < currentTarget_1.length; _i++) {\n      var target = currentTarget_1[_i];\n      this.restoreElement(target);\n    }\n  };\n\n  __decorate$2([Property('auto')], Tooltip.prototype, \"width\", void 0);\n\n  __decorate$2([Property('auto')], Tooltip.prototype, \"height\", void 0);\n\n  __decorate$2([Property()], Tooltip.prototype, \"content\", void 0);\n\n  __decorate$2([Property('body')], Tooltip.prototype, \"container\", void 0);\n\n  __decorate$2([Property()], Tooltip.prototype, \"target\", void 0);\n\n  __decorate$2([Property('TopCenter')], Tooltip.prototype, \"position\", void 0);\n\n  __decorate$2([Property(0)], Tooltip.prototype, \"offsetX\", void 0);\n\n  __decorate$2([Property(0)], Tooltip.prototype, \"offsetY\", void 0);\n\n  __decorate$2([Property(true)], Tooltip.prototype, \"showTipPointer\", void 0);\n\n  __decorate$2([Property(true)], Tooltip.prototype, \"enableHtmlParse\", void 0);\n\n  __decorate$2([Property(false)], Tooltip.prototype, \"windowCollision\", void 0);\n\n  __decorate$2([Property('Auto')], Tooltip.prototype, \"tipPointerPosition\", void 0);\n\n  __decorate$2([Property('Auto')], Tooltip.prototype, \"opensOn\", void 0);\n\n  __decorate$2([Property(false)], Tooltip.prototype, \"mouseTrail\", void 0);\n\n  __decorate$2([Property(false)], Tooltip.prototype, \"isSticky\", void 0);\n\n  __decorate$2([Complex({}, Animation$1)], Tooltip.prototype, \"animation\", void 0);\n\n  __decorate$2([Property(0)], Tooltip.prototype, \"openDelay\", void 0);\n\n  __decorate$2([Property(0)], Tooltip.prototype, \"closeDelay\", void 0);\n\n  __decorate$2([Property()], Tooltip.prototype, \"cssClass\", void 0);\n\n  __decorate$2([Property(false)], Tooltip.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate$2([Property('')], Tooltip.prototype, \"htmlAttributes\", void 0);\n\n  __decorate$2([Event()], Tooltip.prototype, \"beforeRender\", void 0);\n\n  __decorate$2([Event()], Tooltip.prototype, \"beforeOpen\", void 0);\n\n  __decorate$2([Event()], Tooltip.prototype, \"afterOpen\", void 0);\n\n  __decorate$2([Event()], Tooltip.prototype, \"beforeClose\", void 0);\n\n  __decorate$2([Event()], Tooltip.prototype, \"afterClose\", void 0);\n\n  __decorate$2([Event()], Tooltip.prototype, \"beforeCollision\", void 0);\n\n  __decorate$2([Event()], Tooltip.prototype, \"created\", void 0);\n\n  __decorate$2([Event()], Tooltip.prototype, \"destroyed\", void 0);\n\n  Tooltip = __decorate$2([NotifyPropertyChanges], Tooltip);\n  return Tooltip;\n}(Component);\n/**\n * Tooltip modules\n */\n\n\nvar globalTimeOut = {};\nvar DEFT_MAT_WIDTH = 30;\nvar DEFT_MAT3_WIDTH = 30;\nvar DEFT_FAB_WIDTH = 30;\nvar DEFT_FLUENT_WIDTH = 30;\nvar DEFT_BOOT_WIDTH = 30;\nvar DEFT_BOOT4_WIDTH = 36;\nvar DEFT_BOOT5_WIDTH = 36;\nvar CLS_SHOWSPIN = 'e-spin-show';\nvar CLS_HIDESPIN = 'e-spin-hide';\nvar CLS_MATERIALSPIN = 'e-spin-material';\nvar CLS_MATERIAL3SPIN = 'e-spin-material3';\nvar CLS_FABRICSPIN = 'e-spin-fabric';\nvar CLS_FLUENTSPIN = 'e-spin-fluent';\nvar CLS_TAILWINDSPIN = 'e-spin-tailwind';\nvar CLS_BOOTSPIN = 'e-spin-bootstrap';\nvar CLS_BOOT4SPIN = 'e-spin-bootstrap4';\nvar CLS_BOOT5SPIN = 'e-spin-bootstrap5';\nvar CLS_HIGHCONTRASTSPIN = 'e-spin-high-contrast';\nvar CLS_SPINWRAP = 'e-spinner-pane';\nvar CLS_SPININWRAP = 'e-spinner-inner';\nvar CLS_SPINCIRCLE = 'e-path-circle';\nvar CLS_SPINARC = 'e-path-arc';\nvar CLS_SPINLABEL = 'e-spin-label';\nvar CLS_SPINTEMPLATE = 'e-spin-template';\nvar spinTemplate = null;\nvar spinCSSClass = null; // eslint-disable-next-line\n\n/**\n  * Function to change the Spinners in a page globally from application end.\n  * ```\n  * E.g : blazorSpinner({ action: \"Create\", options: {target: targetElement}, type: \"\" });\n  * ```\n  *\n  * @param {string} action - specifies the string\n  * @param {CreateArgs} options - specifies the args\n  * @param {string} target - specifies the target\n  * @param {string} type - specifes the type\n  * @returns {void}\n  * @private\n  */\n\nfunction Spinner(action, options, target, type) {\n  switch (action) {\n    case 'Create':\n      /* eslint-disable */\n      var element = document.querySelector(options.target);\n      var args = {\n        type: type,\n        target: element,\n        cssClass: options.cssClass,\n        label: options.label,\n        width: options.width\n      };\n      /* eslint-enable */\n\n      createSpinner(args);\n      break;\n\n    case 'Show':\n      showSpinner(document.querySelector(target));\n      break;\n\n    case 'Hide':\n      hideSpinner(document.querySelector(target));\n      break;\n\n    case 'Set':\n      // eslint-disable-next-line\n      var setArgs = {\n        cssClass: options.cssClass,\n        type: type\n      };\n      setSpinner(setArgs);\n      break;\n  }\n}\n/**\n * Create a spinner for the specified target element.\n * ```\n * E.g : createSpinner({ target: targetElement, width: '34px', label: 'Loading..' });\n * ```\n *\n * @param {SpinnerArgs} args - specifies the args\n * @param {CreateElementArgs} internalCreateElement - specifis the element args\n * @returns {void}\n * @private\n */\n\n\nfunction createSpinner(args, internalCreateElement) {\n  if (!args.target) {\n    return;\n  }\n\n  var radius;\n  var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement; // eslint-disable-next-line\n\n  var container = create_spinner_container(args.target, makeElement);\n\n  if (!isNullOrUndefined(args.cssClass)) {\n    container.wrap.classList.add(args.cssClass);\n  }\n\n  if (!isNullOrUndefined(args.template) || !isNullOrUndefined(spinTemplate)) {\n    var template = !isNullOrUndefined(args.template) ? args.template : spinTemplate;\n    container.wrap.classList.add(CLS_SPINTEMPLATE);\n    replaceContent(container.wrap, template, spinCSSClass);\n  } else {\n    var theme = !isNullOrUndefined(args.type) ? args.type : getTheme(container.wrap);\n    var width = !isNullOrUndefined(args.width) ? args.width : undefined;\n    radius = calculateRadius(width, theme);\n    setTheme(theme, container.wrap, radius, makeElement);\n\n    if (!isNullOrUndefined(args.label)) {\n      createLabel(container.inner_wrap, args.label, makeElement);\n    }\n  }\n\n  container.wrap.classList.add(CLS_HIDESPIN);\n  container = null;\n}\n/**\n *\n * @param {HTMLElement} container - specifies the element\n * @param {string} label - specifies the string\n * @param {createElementParams} makeElement - specifies the element\n * @returns {HTMLElement} - returns the element\n */\n\n\nfunction createLabel(container, label, makeElement) {\n  var labelEle = makeElement('div', {});\n  labelEle.classList.add(CLS_SPINLABEL);\n  labelEle.innerHTML = label;\n  container.appendChild(labelEle);\n  return labelEle;\n}\n/**\n *\n * @param {HTMLElement} container - specifies the element\n * @param {number} radius - specifies the radius\n * @param {createElementParams} makeElement - specifies the element\n * @returns {void}\n */\n\n\nfunction createMaterialSpinner(container, radius, makeElement) {\n  var uniqueID = random_generator();\n  globalTimeOut[\"\" + uniqueID] = {\n    timeOut: 0,\n    type: 'Material',\n    radius: radius\n  };\n  create_material_element(container, uniqueID, makeElement, CLS_MATERIALSPIN);\n  mat_calculate_attributes(radius, container, 'Material', CLS_MATERIALSPIN);\n}\n/**\n *\n * @param {HTMLElement} container - specifies the element\n * @param {number} radius - specifies the radius\n * @param {createElementParams} makeElement - specifies the element\n * @returns {void}\n */\n\n\nfunction createMaterial3Spinner(container, radius, makeElement) {\n  var uniqueID = random_generator();\n  globalTimeOut[\"\" + uniqueID] = {\n    timeOut: 0,\n    type: 'Material3',\n    radius: radius\n  };\n  create_material_element(container, uniqueID, makeElement, CLS_MATERIAL3SPIN);\n  mat_calculate_attributes(radius, container, 'Material3', CLS_MATERIAL3SPIN);\n}\n/**\n *\n * @param {HTMLElement} container - specifies the element\n * @param {number} radius - specifies the radius\n * @param {createElementParams} makeElement - specifies the element\n * @returns {void}\n */\n\n\nfunction createBootstrap4Spinner(container, radius, makeElement) {\n  var uniqueID = random_generator();\n  globalTimeOut[\"\" + uniqueID] = {\n    timeOut: 0,\n    type: 'Bootstrap4',\n    radius: radius\n  };\n  create_material_element(container, uniqueID, makeElement, CLS_BOOT4SPIN);\n  mat_calculate_attributes(radius, container, 'Bootstrap4', CLS_BOOT4SPIN);\n}\n/**\n *\n * @param {HTMLElement} container - specifies the element\n * @param {number} radius - specifies the radius\n * @param {createElementParams} makeElement - specifies the element\n * @returns {void}\n */\n\n\nfunction createBootstrap5Spinner(container, radius, makeElement) {\n  var uniqueID = random_generator();\n  globalTimeOut[\"\" + uniqueID] = {\n    timeOut: 0,\n    type: 'Bootstrap5',\n    radius: radius\n  };\n  create_material_element(container, uniqueID, makeElement, CLS_BOOT5SPIN);\n  mat_calculate_attributes(radius, container, 'Bootstrap5', CLS_BOOT5SPIN);\n}\n/**\n *\n * @param {HTMLElement} container - specifies the element\n * @param {string} uniqueID - specifies the id.\n * @param {number} radius - specifies the radius\n * @returns {void}\n */\n\n\nfunction startMatAnimate(container, uniqueID, radius) {\n  var globalObject = {};\n  var timeOutVar = 0;\n  globalTimeOut[\"\" + uniqueID].timeOut = 0;\n  globalObject[\"\" + uniqueID] = globalVariables(uniqueID, radius, 0, 0); // eslint-disable-next-line\n\n  var spinnerInfo = {\n    uniqueID: uniqueID,\n    container: container,\n    globalInfo: globalObject,\n    timeOutVar: timeOutVar\n  };\n  animateMaterial(spinnerInfo);\n}\n/**\n *\n * @param {HTMLElement} container - specifies the element\n * @param {number} radius - specifies the radius\n * @param {createElementParams} makeElement - specifies the element\n * @returns {void}\n */\n\n\nfunction createFabricSpinner(container, radius, makeElement) {\n  var uniqueID = random_generator();\n  globalTimeOut[\"\" + uniqueID] = {\n    timeOut: 0,\n    type: 'Fabric',\n    radius: radius\n  };\n  create_fabric_element(container, uniqueID, CLS_FABRICSPIN, makeElement);\n  fb_calculate_attributes(radius, container, CLS_FABRICSPIN);\n}\n/**\n *\n * @param {HTMLElement} container - specifies the element\n * @param {number} radius - specifies the radius\n * @param {createElementParams} makeElement - specifies the element\n * @returns {void}\n */\n\n\nfunction createFluentSinner(container, radius, makeElement) {\n  var uniqueID = random_generator();\n  globalTimeOut[\"\" + uniqueID] = {\n    timeOut: 0,\n    type: 'Fluent',\n    radius: radius\n  };\n  create_fabric_element(container, uniqueID, CLS_FLUENTSPIN, makeElement);\n  fb_calculate_attributes(radius, container, CLS_FLUENTSPIN);\n}\n/**\n *\n * @param {HTMLElement} container - specifies the element\n * @param {number} radius - specifies the radius\n * @param {createElementParams} makeElement - specifies the element\n * @returns {void}\n */\n\n\nfunction createTailwindSpinner(container, radius, makeElement) {\n  var uniqueID = random_generator();\n  globalTimeOut[\"\" + uniqueID] = {\n    timeOut: 0,\n    type: 'Tailwind',\n    radius: radius\n  };\n  create_fabric_element(container, uniqueID, CLS_TAILWINDSPIN, makeElement);\n  fb_calculate_attributes(radius, container, CLS_TAILWINDSPIN);\n}\n/**\n *\n * @param {HTMLElement} container - specifies the element\n * @param {number} radius - specifies the radius\n * @param {createElementParams} makeElement - specifies the element\n * @returns {void}\n */\n\n\nfunction createHighContrastSpinner(container, radius, makeElement) {\n  var uniqueID = random_generator();\n  globalTimeOut[\"\" + uniqueID] = {\n    timeOut: 0,\n    type: 'HighContrast',\n    radius: radius\n  };\n  create_fabric_element(container, uniqueID, CLS_HIGHCONTRASTSPIN, makeElement);\n  fb_calculate_attributes(radius, container, CLS_HIGHCONTRASTSPIN);\n}\n/**\n *\n * @param {HTMLElement} container - specifies the element\n * @returns {string} - returns the string\n */\n\n\nfunction getTheme(container) {\n  var theme = window.getComputedStyle(container, ':after').getPropertyValue('content');\n  return theme.replace(/['\"]+/g, '');\n}\n/**\n *\n * @param {string} theme - specifies the theme\n * @param {HTMLElement} container - specifies the element\n * @param {number} radius - specifies the radius\n * @param {createElementParams} makeElement - specifies the element\n * @returns {void}\n */\n\n\nfunction setTheme(theme, container, radius, makeElement) {\n  var innerContainer = container.querySelector('.' + CLS_SPININWRAP);\n  var svg = innerContainer.querySelector('svg');\n\n  if (!isNullOrUndefined(svg)) {\n    innerContainer.removeChild(svg);\n  }\n\n  switch (theme) {\n    case 'Material':\n      createMaterialSpinner(innerContainer, radius, makeElement);\n      break;\n\n    case 'Material3':\n      createMaterial3Spinner(innerContainer, radius, makeElement);\n      break;\n\n    case 'Fabric':\n      createFabricSpinner(innerContainer, radius, makeElement);\n      break;\n\n    case 'Fluent':\n      createFluentSinner(innerContainer, radius, makeElement);\n      break;\n\n    case 'Bootstrap':\n      createBootstrapSpinner(innerContainer, radius, makeElement);\n      break;\n\n    case 'HighContrast':\n      createHighContrastSpinner(innerContainer, radius, makeElement);\n      break;\n\n    case 'Bootstrap4':\n      createBootstrap4Spinner(innerContainer, radius, makeElement);\n      break;\n\n    case 'Bootstrap5':\n      createBootstrap5Spinner(innerContainer, radius, makeElement);\n      break;\n\n    case 'Tailwind':\n    case 'Tailwind-dark':\n      createTailwindSpinner(innerContainer, radius, makeElement);\n      break;\n  }\n}\n/**\n *\n * @param {HTMLElement} innerContainer - specifies the element\n * @param {number} radius - specifies the radius\n * @param {createElementParams} makeElement - specifies the element\n * @returns {void}\n */\n\n\nfunction createBootstrapSpinner(innerContainer, radius, makeElement) {\n  var uniqueID = random_generator();\n  globalTimeOut[\"\" + uniqueID] = {\n    timeOut: 0,\n    type: 'Bootstrap',\n    radius: radius\n  };\n  create_bootstrap_element(innerContainer, uniqueID, makeElement);\n  boot_calculate_attributes(innerContainer, radius);\n}\n/**\n *\n * @param {HTMLElement} innerContainer - specifies the element\n * @param {string} uniqueID - specifies the id\n * @param {createElementParams} makeElement - specifies the element\n * @returns {void}\n */\n// eslint-disable-next-line\n\n\nfunction create_bootstrap_element(innerContainer, uniqueID, makeElement) {\n  var svgBoot = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  var viewBoxValue = 64;\n  var trans = 32;\n  var defaultRadius = 2;\n  svgBoot.setAttribute('id', uniqueID);\n  svgBoot.setAttribute('class', CLS_BOOTSPIN);\n  svgBoot.setAttribute('viewBox', '0 0 ' + viewBoxValue + ' ' + viewBoxValue);\n  innerContainer.insertBefore(svgBoot, innerContainer.firstChild);\n\n  for (var item = 0; item <= 7; item++) {\n    var bootCircle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n    bootCircle.setAttribute('class', CLS_SPINCIRCLE + '_' + item);\n    bootCircle.setAttribute('r', defaultRadius + '');\n    bootCircle.setAttribute('transform', 'translate(' + trans + ',' + trans + ')');\n    svgBoot.appendChild(bootCircle);\n  }\n}\n/**\n *\n * @param {HTMLElement} innerContainer - specifies the element\n * @param {number} radius - specifies the radius\n * @returns {void}\n */\n// eslint-disable-next-line\n\n\nfunction boot_calculate_attributes(innerContainer, radius) {\n  var svg = innerContainer.querySelector('svg.e-spin-bootstrap');\n  var x = 0;\n  var y = 0;\n  var rad = 24;\n  svg.style.width = svg.style.height = radius + 'px';\n  var startArc = 90;\n\n  for (var item = 0; item <= 7; item++) {\n    var start = defineArcPoints(x, y, rad, startArc);\n    var circleEle = svg.querySelector('.' + CLS_SPINCIRCLE + '_' + item);\n    circleEle.setAttribute('cx', start.x + '');\n    circleEle.setAttribute('cy', start.y + '');\n    startArc = startArc >= 360 ? 0 : startArc;\n    startArc = startArc + 45;\n  }\n}\n/**\n *\n * @param {number} begin - specifies the number\n * @param {number} stop  - specifirs the number\n * @returns {number[]} - returns the array of number\n */\n\n\nfunction generateSeries(begin, stop) {\n  var series = [];\n  var start = begin;\n  var end = stop; // eslint-disable-next-line\n\n  var increment = false,\n      count = 1;\n  formSeries(start);\n  /**\n   *\n   * @param {number} i - specifies the number\n   * @returns {void}\n   */\n\n  function formSeries(i) {\n    series.push(i);\n\n    if (i !== end || count === 1) {\n      if (i <= start && i > 1 && !increment) {\n        i = parseFloat((i - 0.2).toFixed(2));\n      } else if (i === 1) {\n        i = 7;\n        i = parseFloat((i + 0.2).toFixed(2));\n        increment = true;\n      } else if (i < 8 && increment) {\n        i = parseFloat((i + 0.2).toFixed(2));\n\n        if (i === 8) {\n          increment = false;\n        }\n      } else if (i <= 8 && !increment) {\n        i = parseFloat((i - 0.2).toFixed(2));\n      }\n\n      ++count;\n      formSeries(i);\n    }\n  }\n\n  return series;\n}\n/**\n *\n * @param {HTMLElement} innerContainer - specifies the element\n * @returns {void}\n */\n\n\nfunction animateBootstrap(innerContainer) {\n  var svg = innerContainer.querySelector('svg.e-spin-bootstrap');\n  var id = svg.getAttribute('id');\n\n  for (var i = 1; i <= 8; i++) {\n    var circleEle = innerContainer.getElementsByClassName('e-path-circle_' + (i === 8 ? 0 : i))[0];\n    rotation(circleEle, i, i, generateSeries(i, i), id);\n  }\n  /**\n   *\n   * @param {SVGCircleElement} circle - specifies the circl element\n   * @param {number} start - specifies the number\n   * @param {number} end - specifies the end number\n   * @param {number} series - specifies the series\n   * @param {string} id - specifies the id\n   * @returns {void}\n   */\n\n\n  function rotation(circle, start, end, series, id) {\n    var count = 0;\n    boot_animate(start); // eslint-disable-next-line\n\n    function boot_animate(radius) {\n      if (globalTimeOut[\"\" + id].isAnimate) {\n        ++count;\n        circle.setAttribute('r', radius + '');\n\n        if (count >= series.length) {\n          count = 0;\n        } // eslint-disable-next-line\n\n\n        globalTimeOut[id].timeOut = setTimeout(boot_animate.bind(null, series[count]), 18);\n      }\n    }\n  }\n}\n/**\n *\n * @param {HTMLElement} container - specifies the element\n * @param {string} template - specifies the template\n * @param {string} cssClass - specifies the css class.\n * @returns {void}\n */\n\n\nfunction replaceContent(container, template, cssClass) {\n  if (!isNullOrUndefined(cssClass)) {\n    container.classList.add(cssClass);\n  }\n\n  var inner = container.querySelector('.e-spinner-inner');\n  inner.innerHTML = template;\n}\n/**\n *\n * @param {string} width - specifies the width\n * @param {string} theme - specifies the string\n * @returns {number} - returns the number\n */\n\n\nfunction calculateRadius(width, theme) {\n  var defaultSize;\n\n  switch (theme) {\n    case 'Material':\n      defaultSize = DEFT_MAT_WIDTH;\n      break;\n\n    case 'Material3':\n      defaultSize = DEFT_MAT3_WIDTH;\n      break;\n\n    case 'Fabric':\n      defaultSize = DEFT_FAB_WIDTH;\n      break;\n\n    case 'Tailwind':\n    case 'Tailwind-dark':\n      defaultSize = DEFT_FAB_WIDTH;\n      break;\n\n    case 'Fluent':\n      defaultSize = DEFT_FLUENT_WIDTH;\n      break;\n\n    case 'Bootstrap4':\n      defaultSize = DEFT_BOOT4_WIDTH;\n      break;\n\n    case 'Bootstrap5':\n      defaultSize = DEFT_BOOT5_WIDTH;\n      break;\n\n    default:\n      defaultSize = DEFT_BOOT_WIDTH;\n  }\n\n  width = width ? parseFloat(width + '') : defaultSize;\n  return theme === 'Bootstrap' ? width : width / 2;\n}\n/**\n *\n * @param {string} id - specifies the id\n * @param {number} radius - specifies the radius\n * @param {number} count - specifies the number count\n * @param {number} previousId - specifies the previous id\n * @returns {GlobalVariables} - returns the variables\n */\n\n\nfunction globalVariables(id, radius, count, previousId) {\n  return {\n    radius: radius,\n    count: count,\n    previousId: previousId\n  };\n}\n/**\n * @returns {string} - returns the string\n */\n// eslint-disable-next-line\n\n\nfunction random_generator() {\n  var random = '';\n  var combine = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  for (var i = 0; i < 5; i++) {\n    random += combine.charAt(Math.floor(Math.random() * combine.length));\n  }\n\n  return random;\n}\n/**\n *\n * @param {HTMLElement} innerCon - specifies the element\n * @param {string} uniqueID - specifies the unique id\n * @param {string} themeClass - specifies the string\n * @param {createElementParams} makeElement - specifies the element\n * @returns {void}\n */\n// eslint-disable-next-line\n\n\nfunction create_fabric_element(innerCon, uniqueID, themeClass, makeElement) {\n  var svgFabric = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  svgFabric.setAttribute('id', uniqueID);\n  svgFabric.setAttribute('class', themeClass);\n  var fabricCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n  fabricCirclePath.setAttribute('class', CLS_SPINCIRCLE);\n  var fabricCircleArc = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n  fabricCircleArc.setAttribute('class', CLS_SPINARC);\n  innerCon.insertBefore(svgFabric, innerCon.firstChild);\n  svgFabric.appendChild(fabricCirclePath);\n  svgFabric.appendChild(fabricCircleArc);\n}\n/**\n *\n * @param {HTMLElement} innerContainer - specifies the element\n * @param {string} uniqueID - specifies the unique id\n * @param {createElementParams} makeElement - specifies the element\n * @param {string} cls - specifies the string\n * @returns {void}\n */\n// eslint-disable-next-line\n\n\nfunction create_material_element(innerContainer, uniqueID, makeElement, cls) {\n  var svgMaterial = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  var matCirclePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n  svgMaterial.setAttribute('class', cls);\n  svgMaterial.setAttribute('id', uniqueID);\n  matCirclePath.setAttribute('class', CLS_SPINCIRCLE);\n  innerContainer.insertBefore(svgMaterial, innerContainer.firstChild);\n  svgMaterial.appendChild(matCirclePath);\n}\n/**\n *\n * @param {HTMLElement} target - specifies the element\n * @param {createElementParams} makeElement - specifies the element\n * @returns {void}\n */\n// eslint-disable-next-line\n\n\nfunction create_spinner_container(target, makeElement) {\n  var spinnerContainer = makeElement('div', {});\n  var spinnerInnerContainer = makeElement('div', {});\n  spinnerContainer.classList.add(CLS_SPINWRAP);\n  spinnerInnerContainer.classList.add(CLS_SPININWRAP);\n  target.appendChild(spinnerContainer);\n  spinnerContainer.appendChild(spinnerInnerContainer); // eslint-disable-next-line\n\n  return {\n    wrap: spinnerContainer,\n    inner_wrap: spinnerInnerContainer\n  };\n}\n/**\n *\n * @param {SpinnerInfo} spinnerInfo - specifies the spinner\n * @returns {void}\n */\n\n\nfunction animateMaterial(spinnerInfo) {\n  var start = 1;\n  var end = 149;\n  var duration = 1333;\n  var max = 75;\n  createCircle(start, end, easeAnimation, duration, spinnerInfo.globalInfo[spinnerInfo.uniqueID].count, max, spinnerInfo);\n  spinnerInfo.globalInfo[spinnerInfo.uniqueID].count = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].count % 4;\n}\n/**\n *\n * @param {number} start - specifies the number\n * @param {number} end - specifies the end number\n * @param {Function} easing - specifies the function\n * @param {number} duration - specifies the duration\n * @param {number} count - specifies the count\n * @param {number} max - specifies the max number\n * @param {SpinnerInfo} spinnerInfo - specifies the spinner info\n * @returns {void}\n */\n\n\nfunction createCircle(start, end, easing, duration, count, max, spinnerInfo) {\n  var id = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId;\n  var startTime = new Date().getTime();\n  var change = end - start;\n  var diameter = getSize(spinnerInfo.globalInfo[spinnerInfo.uniqueID].radius * 2 + '');\n  var strokeSize = getStrokeSize(diameter);\n  var rotate = -90 * (spinnerInfo.globalInfo[spinnerInfo.uniqueID].count || 0);\n  mat_animation(spinnerInfo); // eslint-disable-next-line\n\n  function mat_animation(spinnerInfo) {\n    var currentTime = Math.max(0, Math.min(new Date().getTime() - startTime, duration));\n    updatePath(easing(currentTime, start, change, duration), spinnerInfo.container);\n\n    if (id === spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId && currentTime < duration) {\n      // eslint-disable-next-line\n      globalTimeOut[spinnerInfo.uniqueID].timeOut = setTimeout(mat_animation.bind(null, spinnerInfo), 1);\n    } else {\n      animateMaterial(spinnerInfo);\n    }\n  }\n  /**\n   *\n   * @param {number} value - specifies the number value\n   * @param {HTMLElement} container - specifies the container\n   * @returns {void}\n   */\n\n\n  function updatePath(value, container) {\n    if (!isNullOrUndefined(container.querySelector('svg.e-spin-material')) || !isNullOrUndefined(container.querySelector('svg.e-spin-material3'))) {\n      var svg = void 0;\n\n      if (!isNullOrUndefined(container.querySelector('svg.e-spin-material')) && !isNullOrUndefined(container.querySelector('svg.e-spin-material').querySelector('path.e-path-circle'))) {\n        svg = container.querySelector('svg.e-spin-material');\n      } else if (!isNullOrUndefined(container.querySelector('svg.e-spin-material3')) && !isNullOrUndefined(container.querySelector('svg.e-spin-material3').querySelector('path.e-path-circle'))) {\n        svg = container.querySelector('svg.e-spin-material3');\n      }\n\n      if (!isNullOrUndefined(svg)) {\n        var path = svg.querySelector('path.e-path-circle');\n        path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, value, max) + '');\n        path.setAttribute('transform', 'rotate(' + rotate + ' ' + diameter / 2 + ' ' + diameter / 2 + ')');\n      }\n    }\n  }\n}\n/**\n *\n * @param {number} radius - specifies the number\n * @param {HTMLElement} container - specifies the element\n * @param {string} type - specifies the string type\n * @param {string} cls - specifies the string\n * @returns {void}\n */\n// eslint-disable-next-line\n\n\nfunction mat_calculate_attributes(radius, container, type, cls) {\n  var diameter = radius * 2;\n  var svg = container.querySelector('svg.' + cls);\n  var path = svg.querySelector('path.e-path-circle');\n  var strokeSize = getStrokeSize(diameter);\n  var transformOrigin = diameter / 2 + 'px';\n  svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);\n  svg.style.width = svg.style.height = diameter + 'px';\n  svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;\n  path.setAttribute('d', drawArc(diameter, strokeSize));\n\n  if (type === 'Material' || type === 'Material3') {\n    path.setAttribute('stroke-width', strokeSize + '');\n    path.setAttribute('stroke-dasharray', (diameter - strokeSize) * Math.PI * 0.75 + '');\n    path.setAttribute('stroke-dashoffset', getDashOffset(diameter, strokeSize, 1, 75) + '');\n  }\n}\n/**\n *\n * @param {string} value - specifies the value\n * @returns {number} - returns the number\n */\n\n\nfunction getSize(value) {\n  var parsed = parseFloat(value);\n  return parsed;\n}\n/**\n *\n * @param {number} diameter - specifies the diameter\n * @param {number} strokeSize - specifies the size\n * @returns {string} - returns the string\n */\n\n\nfunction drawArc(diameter, strokeSize) {\n  var radius = diameter / 2;\n  var offset = strokeSize / 2;\n  return 'M' + radius + ',' + offset + 'A' + (radius - offset) + ',' + (radius - offset) + ' 0 1 1 ' + offset + ',' + radius;\n}\n/**\n *\n * @param {number} diameter - specifies the number\n * @returns {number} - returns the number\n */\n\n\nfunction getStrokeSize(diameter) {\n  return 10 / 100 * diameter;\n}\n/**\n *\n * @param {number} diameter - specifies the number\n * @param {number} strokeSize - specifies the stroke size\n * @param {number} value - specifies the value\n * @param {number} max - specifies the max number\n * @returns {number} - returns the number\n */\n\n\nfunction getDashOffset(diameter, strokeSize, value, max) {\n  return (diameter - strokeSize) * Math.PI * (3 * max / 100 - value / 100);\n}\n/**\n *\n * @param {number} current - specifies the number\n * @param {number} start - specifies the stroke size\n * @param {number} change - specifies the value\n * @param {number} duration - specifies the max number\n * @returns {number} - returns the number\n */\n\n\nfunction easeAnimation(current, start, change, duration) {\n  var timestamp = (current /= duration) * current;\n  var timecount = timestamp * current;\n  return start + change * (6 * timecount * timestamp + -15 * timestamp * timestamp + 10 * timecount);\n}\n/**\n *\n * @param {number} radius - specifies the number\n * @param {HTMLElement} innerConainer - specifies the element\n * @param {string} trgClass - specifies the class\n * @returns {void}\n */\n// eslint-disable-next-line\n\n\nfunction fb_calculate_attributes(radius, innerConainer, trgClass) {\n  var centerX = radius;\n  var centerY = radius;\n  var diameter = radius * 2; // eslint-disable-next-line\n\n  var startArc = 315,\n      endArc = 45;\n  var svg = innerConainer.querySelector('.' + trgClass);\n  var circle = svg.querySelector('.e-path-circle');\n  var path = svg.querySelector('.e-path-arc');\n  var transformOrigin = diameter / 2 + 'px';\n  circle.setAttribute('d', defineCircle(centerX, centerY, radius));\n  path.setAttribute('d', defineArc(centerX, centerY, radius, startArc, endArc));\n  svg.setAttribute('viewBox', '0 0 ' + diameter + ' ' + diameter);\n  svg.style.transformOrigin = transformOrigin + ' ' + transformOrigin + ' ' + transformOrigin;\n  svg.style.width = svg.style.height = diameter + 'px';\n}\n/**\n *\n * @param {number} centerX - specifies the number\n * @param {number} centerY - specifies the stroke size\n * @param {number} radius - specifies the value\n * @param {number} angle - specifies the max number\n * @returns {number} - returns the number\n */\n\n\nfunction defineArcPoints(centerX, centerY, radius, angle) {\n  var radians = (angle - 90) * Math.PI / 180.0;\n  return {\n    x: centerX + radius * Math.cos(radians),\n    y: centerY + radius * Math.sin(radians)\n  };\n}\n/**\n *\n * @param {number} x - specifies the number\n * @param {number} y - specifies the stroke size\n * @param {number} radius - specifies the radius\n * @param {number} startArc - specifies the value\n * @param {number} endArc - specifies the max number\n * @returns {number} - returns the number\n */\n\n\nfunction defineArc(x, y, radius, startArc, endArc) {\n  var start = defineArcPoints(x, y, radius, endArc);\n  var end = defineArcPoints(x, y, radius, startArc);\n  var d = ['M', start.x, start.y, 'A', radius, radius, 0, 0, 0, end.x, end.y].join(' ');\n  return d;\n}\n/**\n *\n * @param {number} x - specifies the number\n * @param {number} y - specifies the stroke size\n * @param {number} radius - specifies the value\n * @returns {string} - returns the string\n */\n\n\nfunction defineCircle(x, y, radius) {\n  var d = ['M', x, y, 'm', -radius, 0, 'a', radius, radius, 0, 1, 0, radius * 2, 0, 'a', radius, radius, 0, 1, 0, -radius * 2, 0].join(' ');\n  return d;\n}\n/**\n * Function to show the Spinner.\n *\n * @param {HTMLElement} container - Specify the target of the Spinner.\n * @returns {void}\n * @private\n */\n\n\nfunction showSpinner(container) {\n  showHideSpinner(container, false);\n  container = null;\n}\n/**\n *\n * @param {HTMLElement} container - specifies the element\n * @param {boolean} isHide - specifies the boolean\n * @returns {void}\n */\n\n\nfunction showHideSpinner(container, isHide) {\n  var spinnerWrap;\n\n  if (container) {\n    if (container.classList.contains(CLS_SPINWRAP)) {\n      spinnerWrap = container;\n    } else {\n      var spinWrapCollection = void 0;\n      spinWrapCollection = container.querySelectorAll('.' + CLS_SPINWRAP);\n      spinnerWrap = Array.from(spinWrapCollection).find(function (wrap) {\n        return wrap.parentElement === container;\n      }) || null;\n    }\n  }\n\n  if (container && spinnerWrap) {\n    var inner = spinnerWrap.querySelector('.' + CLS_SPININWRAP);\n    var spinCheck = void 0; // eslint-disable-next-line\n\n    spinCheck = isHide ? !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_HIDESPIN) : !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_SHOWSPIN);\n\n    if (spinCheck) {\n      var svgEle = spinnerWrap.querySelector('svg');\n\n      if (isNullOrUndefined(svgEle)) {\n        return;\n      }\n\n      var id = svgEle.getAttribute('id');\n      globalTimeOut[\"\" + id].isAnimate = !isHide;\n\n      switch (globalTimeOut[\"\" + id].type) {\n        case 'Material':\n        case 'Material3':\n          // eslint-disable-next-line\n          isHide ? clearTimeout(globalTimeOut[id].timeOut) : startMatAnimate(inner, id, globalTimeOut[id].radius);\n          break;\n\n        case 'Bootstrap':\n          // eslint-disable-next-line\n          isHide ? clearTimeout(globalTimeOut[id].timeOut) : animateBootstrap(inner);\n          break;\n      }\n    } // eslint-disable-next-line\n\n\n    isHide ? classList(spinnerWrap, [CLS_HIDESPIN], [CLS_SHOWSPIN]) : classList(spinnerWrap, [CLS_SHOWSPIN], [CLS_HIDESPIN]);\n    container = null;\n  }\n}\n/**\n * Function to hide the Spinner.\n *\n * @param {HTMLElement} container - Specify the target of the Spinner.\n * @returns {void}\n * @private\n */\n\n\nfunction hideSpinner(container) {\n  showHideSpinner(container, true);\n  container = null;\n} // eslint-disable-next-line\n\n/**\n  * Function to change the Spinners in a page globally from application end.\n  * ```\n  * E.g : setSpinner({ cssClass: 'custom-css'; type: 'Material' });\n  * ```\n  *\n  * @param {SetSpinnerArgs} args - specifies the args\n  * @param {createElementParams} internalCreateElement - specifies the element params\n  * @returns {void}\n  * @private\n  */\n\n\nfunction setSpinner(args, internalCreateElement) {\n  var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n\n  if (args.template !== undefined) {\n    spinTemplate = args.template;\n\n    if (args.template !== undefined) {\n      spinCSSClass = args.cssClass;\n    }\n  }\n\n  var container = document.querySelectorAll('.' + CLS_SPINWRAP);\n\n  for (var index = 0; index < container.length; index++) {\n    ensureTemplate(args.template, container[index], args.type, args.cssClass, makeElement);\n  }\n}\n/**\n *\n * @param {string} template - specifies the string\n * @param {HTMLElement} container - specifies the container\n * @param {string} theme - specifies the theme\n * @param {string} cssClass - specifies the string class\n * @param {createElementParams} makeEle - specifies the params\n * @returns {void}\n */\n\n\nfunction ensureTemplate(template, container, theme, cssClass, makeEle) {\n  if (isNullOrUndefined(template) && !container.classList.contains(CLS_SPINTEMPLATE)) {\n    replaceTheme(container, theme, cssClass, makeEle);\n\n    if (container.classList.contains(CLS_SHOWSPIN)) {\n      container.classList.remove(CLS_SHOWSPIN);\n      showSpinner(container);\n    } else {\n      container.classList.remove(CLS_HIDESPIN);\n      hideSpinner(container);\n    }\n  } else {\n    spinTemplate = template;\n\n    if (!isNullOrUndefined(cssClass)) {\n      spinCSSClass = cssClass;\n    }\n\n    if (!isNullOrUndefined(spinTemplate)) {\n      replaceContent(container, spinTemplate, spinCSSClass);\n    }\n  }\n}\n/**\n *\n * @param {HTMLElement} container - specifies the container\n * @param {string} theme - specifies the theme\n * @param {string} cssClass - specifies the string class\n * @param {createElementParams} makeEle - specifies the params\n * @returns {void}\n */\n\n\nfunction replaceTheme(container, theme, cssClass, makeEle) {\n  if (!isNullOrUndefined(cssClass)) {\n    container.classList.add(cssClass);\n  }\n\n  var svgElement = container.querySelector('svg');\n\n  if (!isNullOrUndefined(svgElement)) {\n    var radius = theme === 'Bootstrap' ? parseFloat(svgElement.style.height) : parseFloat(svgElement.style.height) / 2;\n    var classNames = svgElement.getAttribute('class');\n    var svgClassList = classNames.split(/\\s/);\n\n    if (svgClassList.indexOf('e-spin-material') >= 0) {\n      var id = svgElement.getAttribute('id');\n      clearTimeout(globalTimeOut[\"\" + id].timeOut);\n    }\n\n    setTheme(theme, container, radius, makeEle);\n  }\n}\n/**\n * spinner modules\n */\n\n/**\n * Popup Components\n */\n\n\nexport { PositionData, Popup, getScrollableParent, getZindexPartial, getMaxZindex, calculateRelativeBasedPosition, calculatePosition, fit, isCollide, flip, ButtonProps, AnimationSettings, Dialog, DialogUtility, Animation$1 as Animation, Tooltip, Spinner, createSpinner, showSpinner, hideSpinner, setSpinner }; //# sourceMappingURL=ej2-popups.es5.js.map","map":null,"metadata":{},"sourceType":"module"}