{"ast":null,"code":"import { Animation, ChildProperty, Collection, Complex, Component, Event, EventHandler, KeyboardEvents, NotifyPropertyChanges, Property, SanitizeHtmlHelper, addClass, attributes, classList, closest, createElement, deleteObject, detach, extend, getComponent, getInstance, getUniqueID, getValue, isNullOrUndefined, isRippleEnabled, remove, removeClass, rippleEffect, select, setValue } from '@syncfusion/ej2-base';\nimport { Button } from '@syncfusion/ej2-buttons';\nimport { Popup, createSpinner, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\r\n * @param {Object} props - Specifies the properties\r\n * @param {string[]} model - Specifies the model\r\n * @returns {Object} Component Model\r\n */\n\n\nfunction getModel(props, model) {\n  var obj = extend({}, props);\n\n  for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {\n    var prop = _a[_i];\n\n    if (model.indexOf(prop) < 0) {\n      deleteObject(obj, prop);\n    }\n  }\n\n  return obj;\n}\n/** @hidden\r\n * @param {HTMLElement} ul - Specifies the UL element\r\n * @param {number} keyCode - Specifies the keycode\r\n * @returns {void}\r\n */\n\n\nfunction upDownKeyHandler(ul, keyCode) {\n  var defaultIdx = keyCode === 40 ? 0 : ul.childElementCount - 1;\n  var liIdx = defaultIdx;\n  var li;\n  var selectedLi = ul.querySelector('.e-selected');\n\n  if (selectedLi) {\n    selectedLi.classList.remove('e-selected');\n  }\n\n  for (var i = 0, len = ul.children.length; i < len; i++) {\n    if (ul.children[i].classList.contains('e-focused')) {\n      li = ul.children[i];\n      liIdx = i;\n      li.classList.remove('e-focused');\n\n      if (keyCode === 40) {\n        liIdx++;\n      } else {\n        liIdx--;\n      }\n\n      if (liIdx === (keyCode === 40 ? ul.childElementCount : -1)) {\n        liIdx = defaultIdx;\n      }\n    }\n  }\n\n  li = ul.children[liIdx];\n  liIdx = isValidLI(ul, li, liIdx, keyCode);\n\n  if (liIdx !== -1) {\n    addClass([ul.children[liIdx]], 'e-focused');\n    ul.children[liIdx].focus();\n  }\n}\n/**\r\n * Get Valid LI element\r\n *\r\n * @param {HTMLElement} ul - Specifies the UL element\r\n * @param {Element} li - Specifies the LI element\r\n * @param {number} index - Specifies the index\r\n * @param {number} keyCode - Specifies the keycode\r\n * @param {number} count - Specifies the count\r\n * @returns {number} - Index\r\n */\n\n\nfunction isValidLI(ul, li, index, keyCode, count) {\n  if (count === void 0) {\n    count = 0;\n  }\n\n  if (li.classList.contains('e-separator') || li.classList.contains('e-disabled')) {\n    if (index === (keyCode === 40 ? ul.childElementCount - 1 : 0)) {\n      index = keyCode === 40 ? 0 : ul.childElementCount - 1;\n    } else {\n      if (keyCode === 40) {\n        index++;\n      } else {\n        index--;\n      }\n    }\n  }\n\n  li = ul.children[index];\n\n  if (li.classList.contains('e-separator') || li.classList.contains('e-disabled')) {\n    count++;\n\n    if (count === ul.childElementCount) {\n      return index = -1;\n    }\n\n    index = isValidLI(ul, li, index, keyCode, count);\n  }\n\n  return index;\n}\n/** @hidden\r\n * @param {HTMLElement} popup - Specifies the popup element.\r\n * @returns {void}\r\n */\n\n\nfunction setBlankIconStyle(popup, blankIcon) {\n  var blankIconList = [].slice.call(popup.getElementsByClassName('e-blank-icon'));\n\n  if (blankIcon) {\n    var menuItem = [].slice.call(popup.getElementsByClassName('e-item'));\n    menuItem.forEach(function (li) {\n      if (li.style.paddingLeft || li.style.paddingRight) {\n        li.removeAttribute('style');\n      }\n    });\n  }\n\n  if (!blankIconList.length) {\n    return;\n  }\n\n  var iconLi = popup.querySelector('.e-item:not(.e-blank-icon):not(.e-separator)');\n\n  if (isNullOrUndefined(iconLi)) {\n    return;\n  }\n\n  if (iconLi.classList.contains('e-url')) {\n    iconLi = iconLi.querySelector('.e-menu-url');\n  }\n\n  var icon = iconLi.querySelector('.e-menu-icon');\n  var cssProp;\n  var enableRtl = popup.classList.contains('e-rtl');\n\n  if (enableRtl) {\n    cssProp = {\n      padding: 'paddingRight',\n      margin: 'marginLeft'\n    };\n  } else {\n    cssProp = {\n      padding: 'paddingLeft',\n      margin: 'marginRight'\n    };\n  }\n  /* eslint-disable */\n\n\n  var size = parseInt(getComputedStyle(icon).fontSize, 10) + parseInt(enableRtl ? getComputedStyle(icon)[cssProp.margin] : getComputedStyle(icon)[cssProp.margin], 10) + parseInt(getComputedStyle(iconLi).paddingLeft, 10) + \"px\";\n  blankIconList.forEach(function (li) {\n    if (li.classList.contains('e-url')) {\n      li.querySelector('.e-menu-url').style[cssProp.padding] = size;\n    } else {\n      li.style[cssProp.padding] = size;\n    }\n  });\n  /* eslint-enable */\n}\n/**\r\n * Defines the items of Split Button/DropDownButton.\r\n */\n\n\nvar Item =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends(Item, _super);\n\n  function Item() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('')], Item.prototype, \"iconCss\", void 0);\n\n  __decorate([Property('')], Item.prototype, \"id\", void 0);\n\n  __decorate([Property(false)], Item.prototype, \"separator\", void 0);\n\n  __decorate([Property('')], Item.prototype, \"text\", void 0);\n\n  __decorate([Property('')], Item.prototype, \"url\", void 0);\n\n  __decorate([Property(false)], Item.prototype, \"disabled\", void 0);\n\n  return Item;\n}(ChildProperty);\n/**\r\n * Common modules\r\n */\n\n\nvar __extends$1 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar classNames = {\n  DISABLED: 'e-disabled',\n  FOCUS: 'e-focused',\n  ICON: 'e-menu-icon',\n  ITEM: 'e-item',\n  POPUP: 'e-dropdown-popup',\n  RTL: 'e-rtl',\n  SEPARATOR: 'e-separator',\n  VERTICAL: 'e-vertical'\n};\n/**\r\n * DropDownButton component is used to toggle contextual overlays for displaying list of action items.\r\n * It can contain both text and images.\r\n * ```html\r\n * <button id=\"element\">DropDownButton</button>\r\n * ```\r\n * ```typescript\r\n * <script>\r\n * var dropDownButtonObj = new DropDownButton({items: [{ text: 'Action1' }, { text: 'Action2' },{ text: 'Action3' }]);\r\n * dropDownButtonObj.appendTo(\"#element\");\r\n * </script>\r\n * ```\r\n */\n\nvar DropDownButton =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$1(DropDownButton, _super);\n  /**\r\n   * Constructor for creating the widget\r\n   *\r\n   * @param  {DropDownButtonModel} options - Specifies dropdown button model\r\n   * @param  {string|HTMLButtonElement} element - Specifies element\r\n   * @hidden\r\n   */\n\n\n  function DropDownButton(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.isPopupCreated = true;\n    return _this;\n  }\n\n  DropDownButton.prototype.preRender = function () {\n    /** */\n  };\n  /**\r\n   * Get the properties to be maintained in the persisted state.\r\n   *\r\n   * @returns {string} - Persist data\r\n   */\n\n\n  DropDownButton.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n  /**\r\n   * To open/close DropDownButton popup based on current state of the DropDownButton.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  DropDownButton.prototype.toggle = function () {\n    if (this.canOpen()) {\n      this.openPopUp();\n    } else {\n      this.closePopup();\n    }\n  };\n  /**\r\n   * Initialize the Component rendering\r\n   *\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  DropDownButton.prototype.render = function () {\n    this.initialize();\n\n    if (!this.disabled) {\n      this.wireEvents();\n    }\n\n    this.renderComplete();\n  };\n  /**\r\n   * Adds a new item to the menu. By default, new item appends to the list as the last item,\r\n   * but you can insert based on the text parameter.\r\n   *\r\n   * @param  { ItemModel[] } items - Specifies an array of JSON data.\r\n   * @param { string } text - Specifies the text to insert the newly added item in the menu.\r\n   * @returns {void}.\r\n   */\n\n\n  DropDownButton.prototype.addItems = function (items, text) {\n    var newItem;\n    var idx = this.items.length;\n\n    for (var j = 0, len = this.items.length; j < len; j++) {\n      if (text === this.items[j].text) {\n        idx = j;\n        break;\n      }\n    }\n\n    for (var i = items.length - 1; i >= 0; i--) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      newItem = new Item(this, 'items', items[i], true);\n      this.items.splice(idx, 0, newItem);\n    }\n\n    if (!this.canOpen()) {\n      this.createItems();\n    }\n  };\n  /**\r\n   * Removes the items from the menu.\r\n   *\r\n   * @param  { string[] } items - Specifies an array of string to remove the items.\r\n   * @param { string } isUniqueId - Set `true` if specified items is a collection of unique id.\r\n   * @returns {void}.\r\n   */\n\n\n  DropDownButton.prototype.removeItems = function (items, isUniqueId) {\n    var refresh = false;\n\n    for (var i = 0, len = items.length; i < len; i++) {\n      for (var j = 0, len_1 = this.items.length; j < len_1; j++) {\n        if (items[i] === (isUniqueId ? this.items[j].id : this.items[j].text)) {\n          this.items.splice(j, 1);\n          refresh = true;\n          break;\n        }\n      }\n    }\n\n    if (refresh && this.getULElement()) {\n      this.createItems();\n    }\n  };\n\n  DropDownButton.prototype.createPopup = function () {\n    var _a;\n\n    var div = this.createElement('div', {\n      className: classNames.POPUP,\n      id: this.element.id + '-popup'\n    });\n    document.body.appendChild(div);\n    this.dropDown = new Popup(div, {\n      relateTo: this.element,\n      collision: {\n        X: 'fit',\n        Y: 'flip'\n      },\n      position: {\n        X: 'left',\n        Y: 'bottom'\n      },\n      targetType: 'relative',\n      content: this.target ? this.getTargetElement() : '',\n      enableRtl: this.enableRtl\n    });\n\n    if (this.dropDown.element.style.position === 'fixed') {\n      this.dropDown.refreshPosition(this.element);\n    }\n\n    this.dropDown.hide();\n    attributes(this.element, (_a = {}, _a['aria-haspopup'] = this.items.length || this.target ? 'true' : 'false', _a['aria-expanded'] = 'false', _a['type'] = 'button', _a['aria-label'] = this.element.textContent ? this.element.textContent : 'dropdownbutton', _a));\n\n    if (this.cssClass) {\n      addClass([div], this.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n    }\n\n    this.isPopupCreated = true;\n  };\n\n  DropDownButton.prototype.getTargetElement = function () {\n    return typeof this.target === 'string' ? select(this.target) : this.target;\n  };\n\n  DropDownButton.prototype.createItems = function (appendItems) {\n    var items = this.items;\n    var showIcon = this.hasIcon(this.items, 'iconCss');\n    var span;\n    var item;\n    var li;\n    var eventArgs;\n    var ul = this.getULElement();\n\n    if (ul) {\n      ul.innerHTML = '';\n    } else {\n      ul = this.createElement('ul', {\n        attrs: {\n          'role': 'menu',\n          'tabindex': '0'\n        }\n      });\n    }\n\n    for (var i = 0; i < items.length; i++) {\n      item = items[i];\n      var tempItem = item.text;\n      li = this.createElement('li', {\n        innerHTML: item.url ? '' : tempItem,\n        className: item.separator ? classNames.ITEM + ' ' + classNames.SEPARATOR : classNames.ITEM,\n        attrs: item.separator ? {\n          'role': 'separator',\n          'tabindex': '-1'\n        } : {\n          'role': 'menuitem',\n          'tabindex': '-1',\n          'aria-label': tempItem\n        },\n        id: item.id ? item.id : getUniqueID('e-' + this.getModuleName() + '-item')\n      });\n\n      if (this.enableHtmlSanitizer) {\n        li.textContent = item.url ? '' : tempItem;\n      } else {\n        li.innerHTML = item.url ? '' : tempItem;\n      }\n\n      if (item.url) {\n        li.appendChild(this.createAnchor(item));\n        li.classList.add('e-url');\n      }\n\n      if (item.iconCss) {\n        span = this.createElement('span', {\n          className: classNames.ICON + ' ' + item.iconCss\n        });\n\n        if (item.url) {\n          li.childNodes[0].appendChild(span);\n        } else {\n          li.insertBefore(span, li.childNodes[0]);\n        }\n      } else {\n        if (showIcon && !item.separator) {\n          li.classList.add('e-blank-icon');\n        }\n      }\n\n      if (item.disabled) {\n        li.classList.add('e-disabled');\n      }\n\n      eventArgs = {\n        item: item,\n        element: li\n      };\n      this.trigger('beforeItemRender', eventArgs);\n      ul.appendChild(li);\n    }\n\n    if (appendItems) {\n      this.getPopUpElement().appendChild(ul);\n    }\n\n    if (showIcon) {\n      setBlankIconStyle(this.getPopUpElement());\n    }\n  };\n\n  DropDownButton.prototype.hasIcon = function (items, field) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      if (items[i][\"\" + field]) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  DropDownButton.prototype.createAnchor = function (item) {\n    var tempItem = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(item.text) : item.text;\n    return this.createElement('a', {\n      className: 'e-menu-text e-menu-url',\n      innerHTML: tempItem,\n      attrs: {\n        'href': item.url\n      }\n    });\n  };\n\n  DropDownButton.prototype.initialize = function () {\n    this.button = new Button({\n      iconCss: this.iconCss,\n      iconPosition: this.iconPosition,\n      cssClass: this.cssClass,\n      content: this.content,\n      disabled: this.disabled,\n      enableRtl: this.enableRtl,\n      enablePersistence: this.enablePersistence\n    });\n    this.button.createElement = this.createElement;\n    this.button.appendTo(this.element);\n\n    if (!this.element.id) {\n      this.element.id = getUniqueID('e-' + this.getModuleName());\n    }\n\n    this.appendArrowSpan();\n    this.setActiveElem([this.element]);\n\n    if (this.target && !this.isColorPicker() || !this.createPopupOnClick) {\n      this.createPopup();\n    } else {\n      this.isPopupCreated = false;\n    }\n  };\n\n  DropDownButton.prototype.isColorPicker = function () {\n    if (!this.element) {\n      return false;\n    }\n\n    var prevElem = this.element.previousSibling;\n\n    if (prevElem && prevElem.classList && prevElem.classList.contains('e-split-colorpicker')) {\n      return true;\n    }\n\n    return false;\n  };\n\n  DropDownButton.prototype.appendArrowSpan = function () {\n    this.element.appendChild(this.createElement('span', {\n      className: 'e-btn-icon e-icons ' + 'e-icon-' + (this.cssClass.indexOf(classNames.VERTICAL) > -1 ? 'bottom' : 'right') + ' e-caret'\n    }));\n  };\n\n  DropDownButton.prototype.setActiveElem = function (elem) {\n    this.activeElem = elem;\n  };\n  /**\r\n   * Get component name.\r\n   *\r\n   * @returns {string} - Module Name\r\n   * @private\r\n   */\n\n\n  DropDownButton.prototype.getModuleName = function () {\n    return 'dropdown-btn';\n  };\n\n  DropDownButton.prototype.canOpen = function () {\n    var val = false;\n\n    if (this.isPopupCreated) {\n      val = this.getPopUpElement().classList.contains('e-popup-close');\n    }\n\n    return val;\n  };\n  /**\r\n   * Destroys the widget.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  DropDownButton.prototype.destroy = function () {\n    var _this = this;\n\n    _super.prototype.destroy.call(this);\n\n    if (this.getModuleName() === 'dropdown-btn') {\n      var classList_1;\n\n      if (this.element.querySelector('span.e-caret')) {\n        detach(this.element.querySelector('span.e-caret'));\n      }\n\n      if (this.cssClass) {\n        classList_1 = this.cssClass.split(' ');\n      }\n\n      this.button.destroy();\n\n      if (classList_1) {\n        removeClass([this.element], classList_1);\n      }\n\n      removeClass(this.activeElem, ['e-active']);\n      var attrList = this.element.getAttribute('class') ? ['aria-haspopup', 'aria-expanded', 'aria-owns', 'type'] : ['aria-haspopup', 'aria-expanded', 'aria-owns', 'type', 'class'];\n      attrList.forEach(function (key) {\n        _this.element.removeAttribute(key);\n      });\n      this.popupUnWireEvents();\n      this.destroyPopup();\n      this.isPopupCreated = false;\n\n      if (!this.disabled) {\n        this.unWireEvents();\n      }\n    }\n  };\n\n  DropDownButton.prototype.destroyPopup = function () {\n    if (this.isPopupCreated) {\n      this.dropDown.destroy();\n\n      if (this.getPopUpElement()) {\n        var popupEle = document.getElementById(this.getPopUpElement().id);\n\n        if (popupEle) {\n          removeClass([popupEle], ['e-popup-open', 'e-popup-close']);\n          detach(popupEle);\n        }\n      }\n\n      EventHandler.remove(this.getPopUpElement(), 'click', this.clickHandler);\n      EventHandler.remove(this.getPopUpElement(), 'keydown', this.keyBoardHandler);\n\n      if (this.isPopupCreated) {\n        this.dropDown = undefined;\n      }\n    }\n\n    this.isPopupCreated = false;\n  };\n\n  DropDownButton.prototype.getPopUpElement = function () {\n    var val = null;\n\n    if (this.dropDown) {\n      val = this.dropDown.element;\n    }\n\n    return val;\n  };\n\n  DropDownButton.prototype.getULElement = function () {\n    var val = null;\n\n    if (this.getPopUpElement()) {\n      val = this.getPopUpElement().children[0];\n    }\n\n    return val;\n  };\n\n  DropDownButton.prototype.wireEvents = function () {\n    this.delegateMousedownHandler = this.mousedownHandler.bind(this);\n\n    if (!this.createPopupOnClick) {\n      EventHandler.add(document, 'mousedown touchstart', this.delegateMousedownHandler, this);\n    }\n\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n    EventHandler.add(this.element, 'keydown', this.keyBoardHandler, this);\n  };\n\n  DropDownButton.prototype.popupWireEvents = function () {\n    var popupElement = this.getPopUpElement();\n\n    if (this.createPopupOnClick) {\n      EventHandler.add(document, 'mousedown touchstart', this.delegateMousedownHandler, this);\n    }\n\n    if (popupElement) {\n      EventHandler.add(popupElement, 'click', this.clickHandler, this);\n      EventHandler.add(popupElement, 'keydown', this.keyBoardHandler, this);\n\n      if (this.closeActionEvents) {\n        EventHandler.add(popupElement, this.closeActionEvents, this.focusoutHandler, this);\n      }\n    }\n\n    this.rippleFn = rippleEffect(popupElement, {\n      selector: '.' + classNames.ITEM\n    });\n  };\n\n  DropDownButton.prototype.popupUnWireEvents = function () {\n    var popupElement = this.getPopUpElement();\n\n    if (this.createPopupOnClick) {\n      EventHandler.remove(document, 'mousedown touchstart', this.delegateMousedownHandler);\n    }\n\n    if (popupElement && popupElement.parentElement) {\n      EventHandler.remove(popupElement, 'click', this.clickHandler);\n      EventHandler.remove(popupElement, 'keydown', this.keyBoardHandler);\n\n      if (this.closeActionEvents) {\n        EventHandler.remove(popupElement, this.closeActionEvents, this.focusoutHandler);\n      }\n    }\n\n    if (isRippleEnabled && this.rippleFn) {\n      this.rippleFn();\n    }\n  };\n  /**\r\n   * Handles the keyboard interactions.\r\n   *\r\n   * @param {KeyboardEventArgs} e - Specifies keyboard event args.\r\n   * @returns {void}\r\n   * @hidden\r\n   */\n\n\n  DropDownButton.prototype.keyBoardHandler = function (e) {\n    if (e.target === this.element && (e.keyCode === 9 || !e.altKey && e.keyCode === 40 || e.keyCode === 38)) {\n      return;\n    }\n\n    switch (e.keyCode) {\n      case 38:\n      case 40:\n        if (e.altKey && (e.keyCode === 38 || e.keyCode === 40)) {\n          this.keyEventHandler(e);\n        } else {\n          this.upDownKeyHandler(e);\n        }\n\n        break;\n\n      case 9:\n      case 13:\n      case 27:\n      case 32:\n        this.keyEventHandler(e);\n        break;\n    }\n  };\n\n  DropDownButton.prototype.upDownKeyHandler = function (e) {\n    if (this.target && (e.keyCode === 38 || e.keyCode === 40)) {\n      return;\n    }\n\n    e.preventDefault();\n    upDownKeyHandler(this.getULElement(), e.keyCode);\n  };\n\n  DropDownButton.prototype.keyEventHandler = function (e) {\n    if (this.target && (e.keyCode === 13 || e.keyCode === 9)) {\n      return;\n    }\n\n    if (e.keyCode === 13 && this.activeElem[0].classList.contains('e-split-btn')) {\n      this.activeElem[0].focus();\n      return;\n    }\n\n    if (e.target && e.target.className.indexOf('e-edit-template') > -1 && e.keyCode === 32) {\n      return;\n    }\n\n    if (e.keyCode !== 9) {\n      e.preventDefault();\n    }\n\n    if (e.keyCode === 27 || e.keyCode === 38 || e.keyCode === 9) {\n      if (!this.canOpen()) {\n        this.closePopup(e, this.element);\n      }\n    } else {\n      this.clickHandler(e);\n    }\n  };\n\n  DropDownButton.prototype.getLI = function (elem) {\n    return elem.tagName === 'LI' ? elem : closest(elem, 'li');\n  };\n\n  DropDownButton.prototype.mousedownHandler = function (e) {\n    var trgt = e.target;\n\n    if (this.dropDown && !this.canOpen() && !(closest(trgt, '[id=\"' + this.getPopUpElement().id + '\"]') || closest(trgt, '[id=\"' + this.element.id + '\"]'))) {\n      this.closePopup(e);\n    }\n  };\n\n  DropDownButton.prototype.focusoutHandler = function (e) {\n    if (this.isPopupCreated && !this.canOpen()) {\n      var liTarget = e.relatedTarget;\n\n      if (liTarget && liTarget.className.indexOf('e-item') > -1) {\n        var li = this.getLI(liTarget);\n\n        if (li) {\n          var liIdx = Array.prototype.indexOf.call(this.getULElement().children, li);\n          var item = this.items[liIdx];\n\n          if (item) {\n            var selectEventArgs = {\n              element: li,\n              item: item\n            };\n            this.trigger('select', selectEventArgs);\n          }\n        }\n      }\n\n      this.closePopup(e);\n    }\n  };\n\n  DropDownButton.prototype.clickHandler = function (e) {\n    var trgt = e.target;\n\n    if (closest(trgt, '[id=\"' + this.element.id + '\"]')) {\n      if (!this.createPopupOnClick || this.target && !this.isColorPicker()) {\n        if (this.getPopUpElement().classList.contains('e-popup-close')) {\n          this.openPopUp(e);\n        } else {\n          this.closePopup(e);\n        }\n      } else if (this.isPopupCreated) {\n        this.closePopup(e, this.activeElem[0]);\n      } else {\n        this.createPopup();\n        this.openPopUp(e);\n      }\n    } else {\n      if (closest(trgt, '[id=\"' + this.getPopUpElement().id + '\"]')) {\n        var eventArgs = void 0;\n        var liIdx = void 0;\n        var item = void 0;\n        var li = this.getLI(trgt);\n\n        if (li) {\n          liIdx = Array.prototype.indexOf.call(this.getULElement().children, li);\n          item = this.items[liIdx];\n\n          if (item) {\n            eventArgs = {\n              element: li,\n              item: item\n            };\n            this.trigger('select', eventArgs);\n          }\n\n          this.closePopup(e, this.activeElem[0]);\n        }\n      }\n    }\n  };\n\n  DropDownButton.prototype.openPopUp = function (e) {\n    var _this = this;\n\n    if (e === void 0) {\n      e = null;\n    }\n\n    var popupElem = this.getPopUpElement();\n\n    if (!this.target) {\n      this.createItems(true);\n    } else {\n      if (this.activeElem.length > 1) {\n        var splitButton = getComponent(this.activeElem[0], 'split-btn'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        if (splitButton.isReact && popupElem.childNodes.length < 1) {\n          splitButton.appendReactElement(this.getTargetElement(), this.getPopUpElement());\n          this.renderReactTemplates();\n        }\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (this.isReact && popupElem.childNodes.length < 1) {\n          this.appendReactElement(this.getTargetElement(), this.getPopUpElement());\n          this.renderReactTemplates();\n        }\n      }\n    }\n\n    var ul = this.getULElement();\n    this.popupWireEvents();\n    var beforeOpenArgs = {\n      element: ul,\n      items: this.items,\n      event: e,\n      cancel: false\n    };\n    this.trigger('beforeOpen', beforeOpenArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        var ul_1 = _this.getULElement();\n\n        _this.dropDown.show(null, _this.element);\n\n        addClass([_this.element], 'e-active');\n\n        _this.element.setAttribute('aria-expanded', 'true');\n\n        _this.element.setAttribute('aria-owns', _this.getPopUpElement().id);\n\n        if (ul_1) {\n          ul_1.focus();\n        }\n\n        var openArgs = {\n          element: ul_1,\n          items: _this.items\n        };\n\n        _this.trigger('open', openArgs);\n\n        if (_this.enableRtl && ul_1.parentElement.style.left !== '0px') {\n          var popupRect = ul_1.parentElement.offsetWidth - _this.element.offsetWidth;\n          ul_1.parentElement.style.left = parseFloat(ul_1.parentElement.style.left) - popupRect + \"px\";\n        }\n      }\n    });\n  };\n\n  DropDownButton.prototype.closePopup = function (e, focusEle) {\n    var _this = this;\n\n    if (e === void 0) {\n      e = null;\n    }\n\n    var ul = this.getULElement();\n    var beforeCloseArgs = {\n      element: ul,\n      items: this.items,\n      event: e,\n      cancel: false\n    };\n    this.trigger('beforeClose', beforeCloseArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        var popupElement = _this.getPopUpElement();\n\n        if (popupElement) {\n          EventHandler.remove(popupElement, 'keydown', _this.keyBoardHandler);\n        }\n\n        _this.popupUnWireEvents();\n\n        var ul_2 = _this.getULElement();\n\n        var selectedLi = void 0;\n\n        if (ul_2) {\n          selectedLi = ul_2.querySelector('.e-selected');\n        }\n\n        if (selectedLi) {\n          selectedLi.classList.remove('e-selected');\n        }\n\n        _this.dropDown.hide();\n\n        removeClass(_this.activeElem, 'e-active');\n\n        _this.element.setAttribute('aria-expanded', 'false');\n\n        _this.element.removeAttribute('aria-owns');\n\n        if (focusEle) {\n          focusEle.focus();\n        }\n\n        var closeArgs = {\n          element: ul_2,\n          items: _this.items\n        };\n\n        _this.trigger('close', closeArgs);\n\n        if (!_this.target && ul_2) {\n          detach(ul_2);\n        }\n\n        if (!_this.target || _this.isColorPicker()) {\n          if (_this.createPopupOnClick) {\n            _this.destroyPopup();\n          }\n        }\n\n        if (_this.target) {\n          _this.isPopupCreated = _this.createPopupOnClick ? false : true;\n        }\n      } else {\n        if (ul) {\n          ul.focus();\n        }\n      }\n    });\n  };\n\n  DropDownButton.prototype.unWireEvents = function () {\n    if (!this.createPopupOnClick) {\n      EventHandler.remove(document, 'mousedown touchstart', this.delegateMousedownHandler);\n    }\n\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n    EventHandler.remove(this.element, 'keydown', this.keyBoardHandler);\n\n    if (this.isPopupCreated) {\n      EventHandler.remove(this.getPopUpElement(), 'click', this.clickHandler);\n      EventHandler.remove(this.getPopUpElement(), 'keydown', this.keyBoardHandler);\n    }\n  };\n  /**\r\n   * Called internally if any of the property value changed.\r\n   *\r\n   * @param  {DropDownButtonModel} newProp - Specifies new properties\r\n   * @param  {DropDownButtonModel} oldProp - Specifies old properties\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  DropDownButton.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var btnModel = ['content', 'cssClass', 'iconCss', 'iconPosition', 'disabled', 'enableRtl'];\n    this.button.setProperties(getModel(newProp, btnModel));\n    var popupElement;\n\n    if (this.isPopupCreated) {\n      popupElement = this.getPopUpElement();\n      this.dropDown.setProperties(getModel(newProp, ['enableRtl']));\n    }\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'content':\n          if (!this.element.querySelector('span.e-caret')) {\n            this.appendArrowSpan();\n          }\n\n          break;\n\n        case 'disabled':\n          if (newProp.disabled) {\n            this.unWireEvents();\n\n            if (this.isPopupCreated && !this.canOpen()) {\n              this.closePopup();\n            }\n          } else {\n            this.wireEvents();\n          }\n\n          break;\n\n        case 'cssClass':\n          if (newProp.cssClass.indexOf(classNames.VERTICAL) > -1 || oldProp.cssClass.indexOf(classNames.VERTICAL) > -1) {\n            if (!this.element.querySelector('span.e-caret')) {\n              this.appendArrowSpan();\n            }\n\n            var arrowSpan = this.element.querySelector('span.e-caret');\n            newProp.cssClass.indexOf(classNames.VERTICAL) > -1 ? classList(arrowSpan, ['e-icon-bottom'], ['e-icon-right']) : classList(arrowSpan, ['e-icon-right'], ['e-icon-bottom']);\n          }\n\n          if (this.isPopupCreated) {\n            if (oldProp.cssClass) {\n              removeClass([popupElement], oldProp.cssClass.split(' '));\n            }\n\n            if (newProp.cssClass) {\n              addClass([popupElement], newProp.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n            }\n          }\n\n          break;\n\n        case 'target':\n          this.dropDown.content = this.getTargetElement();\n          this.dropDown.dataBind();\n          break;\n\n        case 'items':\n          if (this.isPopupCreated && this.getULElement()) {\n            this.createItems();\n          }\n\n          break;\n\n        case 'createPopupOnClick':\n          if (newProp.createPopupOnClick) {\n            this.destroyPopup();\n          } else {\n            this.createPopup();\n          }\n\n          break;\n      }\n    }\n  };\n  /**\r\n   * Sets the focus to DropDownButton\r\n   * its native method\r\n   *\r\n   * @public\r\n   * @returns {void}\r\n   */\n\n\n  DropDownButton.prototype.focusIn = function () {\n    this.element.focus();\n  };\n\n  __decorate$1([Property('')], DropDownButton.prototype, \"content\", void 0);\n\n  __decorate$1([Property('')], DropDownButton.prototype, \"cssClass\", void 0);\n\n  __decorate$1([Property(false)], DropDownButton.prototype, \"disabled\", void 0);\n\n  __decorate$1([Property('')], DropDownButton.prototype, \"iconCss\", void 0);\n\n  __decorate$1([Property('Left')], DropDownButton.prototype, \"iconPosition\", void 0);\n\n  __decorate$1([Property(false)], DropDownButton.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate$1([Collection([], Item)], DropDownButton.prototype, \"items\", void 0);\n\n  __decorate$1([Property(false)], DropDownButton.prototype, \"createPopupOnClick\", void 0);\n\n  __decorate$1([Property('')], DropDownButton.prototype, \"target\", void 0);\n\n  __decorate$1([Property('')], DropDownButton.prototype, \"closeActionEvents\", void 0);\n\n  __decorate$1([Event()], DropDownButton.prototype, \"beforeItemRender\", void 0);\n\n  __decorate$1([Event()], DropDownButton.prototype, \"beforeOpen\", void 0);\n\n  __decorate$1([Event()], DropDownButton.prototype, \"beforeClose\", void 0);\n\n  __decorate$1([Event()], DropDownButton.prototype, \"close\", void 0);\n\n  __decorate$1([Event()], DropDownButton.prototype, \"open\", void 0);\n\n  __decorate$1([Event()], DropDownButton.prototype, \"select\", void 0);\n\n  __decorate$1([Event()], DropDownButton.prototype, \"created\", void 0);\n\n  DropDownButton = __decorate$1([NotifyPropertyChanges], DropDownButton);\n  return DropDownButton;\n}(Component);\n/**\r\n * DropDownButton modules\r\n */\n\n\nvar __extends$2 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; // eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path='../drop-down-button/drop-down-button-model.d.ts'/>\n\n\nvar RTL = 'e-rtl';\nvar TAGNAME = 'EJS-SPLITBUTTON';\n/**\r\n * SplitButton component has primary and secondary button. Primary button is used to select\r\n * default action and secondary button is used to toggle contextual overlays for displaying list of\r\n * action items. It can contain both text and images.\r\n * ```html\r\n * <button id=\"element\"></button>\r\n * ```\r\n * ```typescript\r\n * <script>\r\n * var splitBtnObj = new SplitButton({content: 'SplitButton'});\r\n * splitBtnObj.appendTo(\"#element\");\r\n * </script>\r\n * ```\r\n */\n\nvar SplitButton =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$2(SplitButton, _super);\n  /**\r\n   * Constructor for creating the widget\r\n   *\r\n   * @param  {SplitButtonModel} options - Specifies the splitbutton model\r\n   * @param  {string|HTMLButtonElement} element - Specifies the element\r\n   * @hidden\r\n   */\n\n\n  function SplitButton(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\r\n   * Initialize Angular support.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  SplitButton.prototype.preRender = function () {\n    var ele = this.element;\n\n    if (ele.tagName === TAGNAME) {\n      var ejInstance = getValue('ej2_instances', ele);\n      var btn = this.createElement('button', {\n        attrs: {\n          'type': 'button'\n        }\n      });\n      var wrapper = this.createElement(TAGNAME, {\n        className: 'e-' + this.getModuleName() + '-wrapper'\n      });\n\n      for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {\n        btn.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);\n      }\n\n      ele.parentNode.insertBefore(wrapper, ele);\n      detach(ele);\n      ele = btn;\n      wrapper.appendChild(ele);\n      setValue('ej2_instances', ejInstance, ele);\n      this.wrapper = wrapper;\n      this.element = ele;\n    }\n\n    if (!this.element.id) {\n      this.element.id = getUniqueID('e-' + this.getModuleName());\n    }\n  };\n  /**\r\n   * Initialize the Component rendering.\r\n   *\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  SplitButton.prototype.render = function () {\n    this.initWrapper();\n    this.createPrimaryButton();\n    this.renderControl();\n  };\n\n  SplitButton.prototype.renderControl = function () {\n    this.createSecondaryButton();\n    this.setActiveElem([this.element, this.secondaryBtnObj.element]);\n    this.setAria();\n    this.wireEvents();\n    this.renderComplete();\n  };\n  /**\r\n   * Adds a new item to the menu. By default, new item appends to the list as the last item,\r\n   * but you can insert based on the text parameter.\r\n   *\r\n   * @param  { ItemModel[] } items - Specifies an array of JSON data.\r\n   * @param { string } text - Specifies the text to insert the newly added item in the menu.\r\n   * @returns {void}.\r\n   */\n\n\n  SplitButton.prototype.addItems = function (items, text) {\n    _super.prototype.addItems.call(this, items, text);\n\n    this.secondaryBtnObj.items = this.items;\n  };\n  /**\r\n   * Removes the items from the menu.\r\n   *\r\n   * @param  { string[] } items - Specifies an array of string to remove the items.\r\n   * @param { string } isUniqueId - Set `true` if specified items is a collection of unique id.\r\n   * @returns {void}.\r\n   */\n\n\n  SplitButton.prototype.removeItems = function (items, isUniqueId) {\n    _super.prototype.removeItems.call(this, items, isUniqueId);\n\n    this.secondaryBtnObj.items = this.items;\n  };\n\n  SplitButton.prototype.initWrapper = function () {\n    if (!this.wrapper) {\n      this.wrapper = this.createElement('div', {\n        className: 'e-' + this.getModuleName() + '-wrapper'\n      });\n      this.element.parentNode.insertBefore(this.wrapper, this.element);\n    }\n\n    this.element.classList.remove('e-' + this.getModuleName());\n\n    if (this.enableRtl) {\n      this.wrapper.classList.add(RTL);\n    }\n\n    if (this.cssClass) {\n      addClass([this.wrapper], this.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n    }\n  };\n\n  SplitButton.prototype.createPrimaryButton = function () {\n    var btnModel = {\n      cssClass: this.cssClass,\n      enableRtl: this.enableRtl,\n      iconCss: this.iconCss,\n      iconPosition: this.iconPosition,\n      content: this.content,\n      disabled: this.disabled\n    };\n    this.primaryBtnObj = new Button(btnModel);\n    this.primaryBtnObj.createElement = this.createElement;\n    this.primaryBtnObj.appendTo(this.element);\n    this.element.classList.add('e-' + this.getModuleName());\n    this.element.type = 'button';\n    this.wrapper.appendChild(this.element);\n  };\n\n  SplitButton.prototype.createSecondaryButton = function () {\n    var _this = this;\n\n    var btnElem = this.createElement('button', {\n      className: 'e-icon-btn',\n      attrs: {\n        'tabindex': '-1'\n      },\n      id: this.element.id + '_dropdownbtn'\n    });\n    this.wrapper.appendChild(btnElem);\n    var dropDownBtnModel = {\n      cssClass: this.cssClass,\n      disabled: this.disabled,\n      enableRtl: this.enableRtl,\n      items: this.items,\n      target: this.target,\n      createPopupOnClick: this.createPopupOnClick\n    };\n\n    dropDownBtnModel.beforeItemRender = function (args) {\n      if (_this.createPopupOnClick) {\n        _this.secondaryBtnObj.dropDown.relateTo = _this.wrapper;\n        _this.dropDown = _this.secondaryBtnObj.dropDown;\n      }\n\n      _this.trigger('beforeItemRender', args);\n    };\n\n    dropDownBtnModel.open = function (args) {\n      _this.trigger('open', args);\n    };\n\n    dropDownBtnModel.close = function (args) {\n      _this.trigger('close', args);\n    };\n\n    dropDownBtnModel.select = function (args) {\n      _this.trigger('select', args);\n    };\n\n    dropDownBtnModel.beforeOpen = function (args) {\n      if (_this.createPopupOnClick && _this.items.length == 0) {\n        _this.secondaryBtnObj.dropDown.relateTo = _this.wrapper;\n        _this.dropDown = _this.secondaryBtnObj.dropDown;\n      }\n\n      var callBackPromise = new Deferred();\n\n      _this.trigger('beforeOpen', args, function (observedArgs) {\n        callBackPromise.resolve(observedArgs);\n      });\n\n      return callBackPromise;\n    };\n\n    dropDownBtnModel.beforeClose = function (args) {\n      var callBackPromise = new Deferred();\n\n      _this.trigger('beforeClose', args, function (observedArgs) {\n        callBackPromise.resolve(observedArgs);\n      });\n\n      return callBackPromise;\n    };\n\n    this.secondaryBtnObj = new DropDownButton(dropDownBtnModel);\n    this.secondaryBtnObj.createElement = this.createElement;\n    this.secondaryBtnObj.appendTo(btnElem);\n\n    if (!this.createPopupOnClick) {\n      this.secondaryBtnObj.dropDown.relateTo = this.wrapper;\n      this.dropDown = this.secondaryBtnObj.dropDown;\n    }\n\n    this.secondaryBtnObj.activeElem = [this.element, this.secondaryBtnObj.element];\n    this.secondaryBtnObj.element.querySelector('.e-btn-icon').classList.remove('e-icon-right');\n  };\n\n  SplitButton.prototype.setAria = function () {\n    attributes(this.element, {\n      'aria-expanded': 'false',\n      'aria-haspopup': 'true',\n      'aria-label': this.element.textContent + ' splitbutton',\n      'aria-owns': this.element.id + '_dropdownbtn-popup'\n    });\n  };\n  /**\r\n   * Get component name.\r\n   *\r\n   * @returns {string} - Module Name\r\n   * @private\r\n   */\n\n\n  SplitButton.prototype.getModuleName = function () {\n    return 'split-btn';\n  };\n  /**\r\n   * To open/close SplitButton popup based on current state of the SplitButton.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  SplitButton.prototype.toggle = function () {\n    this.secondaryBtnObj.toggle();\n  };\n\n  SplitButton.prototype.destroy = function () {\n    var _this = this;\n\n    var classList$$1 = [RTL];\n\n    if (this.cssClass) {\n      classList$$1 = classList$$1.concat(this.cssClass.split(' '));\n    }\n\n    if (this.element) {\n      var element = document.getElementById(this.element.id);\n\n      if (element && element.parentElement === this.wrapper) {\n        if (this.wrapper.tagName === TAGNAME) {\n          this.wrapper.innerHTML = '';\n          removeClass([this.wrapper], ['e-rtl', 'e-' + this.getModuleName() + '-wrapper']);\n          removeClass([this.wrapper], this.cssClass.split(' '));\n        } else {\n          removeClass([this.element], classList$$1);\n          ['aria-label', 'aria-haspopup', 'aria-expanded', 'aria-owns', 'type'].forEach(function (key) {\n            _this.element.removeAttribute(key);\n          });\n          this.wrapper.parentNode.insertBefore(this.element, this.wrapper);\n          remove(this.wrapper);\n        }\n\n        this.unWireEvents();\n      }\n    }\n\n    this.primaryBtnObj.destroy();\n    this.secondaryBtnObj.destroy();\n\n    _super.prototype.destroy.call(this);\n\n    if (!this.element.getAttribute('class')) {\n      this.element.removeAttribute('class');\n    }\n  };\n\n  SplitButton.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'click', this.primaryBtnClickHandler, this);\n    new KeyboardEvents(this.element, {\n      keyAction: this.btnKeyBoardHandler.bind(this),\n      keyConfigs: {\n        altdownarrow: 'alt+downarrow',\n        enter: 'enter'\n      }\n    });\n  };\n\n  SplitButton.prototype.unWireEvents = function () {\n    EventHandler.remove(this.element, 'click', this.primaryBtnClickHandler);\n    getInstance(this.element, KeyboardEvents).destroy();\n  };\n\n  SplitButton.prototype.primaryBtnClickHandler = function () {\n    this.trigger('click', {\n      element: this.element\n    });\n  };\n\n  SplitButton.prototype.btnKeyBoardHandler = function (e) {\n    switch (e.action) {\n      case 'altdownarrow':\n        this.clickHandler(e);\n        break;\n\n      case 'enter':\n        this.clickHandler(e);\n\n        if (!this.getPopUpElement().classList.contains('e-popup-close')) {\n          this.element.classList.remove('e-active');\n          this.secondaryBtnObj.element.classList.add('e-active');\n        } else {\n          this.secondaryBtnObj.element.classList.remove('e-active');\n        }\n\n        break;\n    }\n  };\n  /**\r\n   * Called internally if any of the property value changed.\r\n   *\r\n   * @param  {SplitButtonModel} newProp - Specifies new properties\r\n   * @param  {SplitButtonModel} oldProp - Specifies old properties\r\n   * @returns {void}\r\n   */\n\n\n  SplitButton.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var model = ['content', 'iconCss', 'iconPosition', 'cssClass', 'disabled', 'enableRtl'];\n    this.primaryBtnObj.setProperties(getModel(newProp, model));\n    model = ['beforeOpen', 'beforeItemRender', 'select', 'open', 'close', 'cssClass', 'disabled', 'enableRtl', 'createPopupOnClick'];\n\n    if (Object.keys(newProp).indexOf('items') > -1) {\n      this.secondaryBtnObj.items = newProp.items;\n      this.secondaryBtnObj.dataBind();\n    }\n\n    this.secondaryBtnObj.setProperties(getModel(newProp, model));\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([this.wrapper], oldProp.cssClass.split(' '));\n          }\n\n          addClass([this.wrapper], newProp.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n          break;\n\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            addClass([this.wrapper], RTL);\n          } else {\n            removeClass([this.wrapper], RTL);\n          }\n\n          break;\n      }\n    }\n  };\n  /**\r\n   * Sets the focus to SplitButton\r\n   * its native method\r\n   *\r\n   * @public\r\n   * @returns {void}\r\n   */\n\n\n  SplitButton.prototype.focusIn = function () {\n    this.element.focus();\n  };\n\n  __decorate$2([Property('')], SplitButton.prototype, \"content\", void 0);\n\n  __decorate$2([Property('')], SplitButton.prototype, \"cssClass\", void 0);\n\n  __decorate$2([Property(false)], SplitButton.prototype, \"disabled\", void 0);\n\n  __decorate$2([Property('')], SplitButton.prototype, \"iconCss\", void 0);\n\n  __decorate$2([Property('Left')], SplitButton.prototype, \"iconPosition\", void 0);\n\n  __decorate$2([Property(false)], SplitButton.prototype, \"createPopupOnClick\", void 0);\n\n  __decorate$2([Collection([], Item)], SplitButton.prototype, \"items\", void 0);\n\n  __decorate$2([Property('')], SplitButton.prototype, \"target\", void 0);\n\n  __decorate$2([Event()], SplitButton.prototype, \"beforeItemRender\", void 0);\n\n  __decorate$2([Event()], SplitButton.prototype, \"beforeOpen\", void 0);\n\n  __decorate$2([Event()], SplitButton.prototype, \"beforeClose\", void 0);\n\n  __decorate$2([Event()], SplitButton.prototype, \"click\", void 0);\n\n  __decorate$2([Event()], SplitButton.prototype, \"close\", void 0);\n\n  __decorate$2([Event()], SplitButton.prototype, \"open\", void 0);\n\n  __decorate$2([Event()], SplitButton.prototype, \"select\", void 0);\n\n  __decorate$2([Event()], SplitButton.prototype, \"created\", void 0);\n\n  SplitButton = __decorate$2([NotifyPropertyChanges], SplitButton);\n  return SplitButton;\n}(DropDownButton);\n/**\r\n * Deferred is used to handle asynchronous operation.\r\n */\n\n\nvar Deferred =\n/** @__PURE__ @class */\nfunction () {\n  function Deferred() {\n    var _this = this;\n    /**\r\n     * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\r\n     */\n\n\n    this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n    /**\r\n     * Defines the callback function triggers when the Deferred object is rejected.\r\n     */\n\n    this.catch = this.promise.catch.bind(this.promise);\n    /**\r\n     * Defines the callback function triggers when the Deferred object is resolved.\r\n     */\n\n    this.then = this.promise.then.bind(this.promise);\n  }\n\n  return Deferred;\n}();\n/**\r\n * Split Button modules\r\n */\n\n/**\r\n * Initialize ButtonGroup CSS component with specified properties.\r\n * ```html\r\n * <div id='buttongroup'>\r\n * <button></button>\r\n * <button></button>\r\n * <button></button>\r\n * </div>\r\n * ```\r\n * ```typescript\r\n * createButtonGroup('#buttongroup', {\r\n *   cssClass: 'e-outline',\r\n *   buttons: [\r\n *       { content: 'Day' },\r\n *       { content: 'Week' },\r\n *       { content: 'Work Week'}\r\n *   ]\r\n * });\r\n * ```\r\n *\r\n * @param {string} selector\r\n * @param {CreateButtonGroupModel} options\r\n * @returns HTMLElement\r\n */\n\n/**\r\n * Creates button group.\r\n *\r\n * @param {string} selector - Specifies the selector.\r\n * @param {CreateButtonGroupModel} options - Specifies the button group model.\r\n * @param {Function} createElement - Specifies the element.\r\n * @returns {HTMLElement} - Button group element.\r\n */\n\n\nfunction createButtonGroup(selector, options, createElement$$1) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var child;\n  var btnElem;\n  var nextChild;\n  var btnModel;\n\n  if (isNullOrUndefined(createElement$$1)) {\n    createElement$$1 = createElement;\n  }\n\n  var wrapper = document.querySelector(selector);\n  addClass([wrapper], ['e-btn-group', 'e-css']);\n  wrapper.setAttribute('role', 'group');\n  var childs = wrapper.children;\n  options.buttons = options.buttons || [];\n\n  for (var i = 0, j = 0; j < childs.length; i++, j++) {\n    child = childs[j];\n    btnModel = options.buttons[i];\n\n    if (btnModel !== null) {\n      if (child.tagName === 'BUTTON') {\n        btnElem = child;\n      } else {\n        btnElem = createElement$$1('label');\n        nextChild = childs[j + 1];\n\n        if (nextChild) {\n          wrapper.insertBefore(btnElem, nextChild);\n        } else {\n          wrapper.appendChild(btnElem);\n        }\n\n        if (child.id) {\n          btnElem.setAttribute('for', child.id);\n        }\n\n        if (btnModel && btnModel.disabled) {\n          child.disabled = true;\n        }\n\n        j++;\n      }\n\n      if (options.cssClass && btnModel && !btnModel.cssClass) {\n        btnModel.cssClass = options.cssClass;\n      }\n\n      new Button(btnModel || {}, btnElem);\n    }\n  }\n\n  return wrapper;\n}\n/**\r\n * ButtonGroup modules\r\n */\n\n\nvar __extends$3 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar HIDESPINNER = 'e-hide-spinner';\nvar PROGRESS = 'e-progress';\nvar PROGRESSACTIVE = 'e-progress-active';\nvar CONTENTCLS = 'e-btn-content';\n/**\r\n * Defines the spin settings.\r\n */\n\nvar SpinSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$3(SpinSettings, _super);\n\n  function SpinSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$3([Property(null)], SpinSettings.prototype, \"template\", void 0);\n\n  __decorate$3([Property(16)], SpinSettings.prototype, \"width\", void 0);\n\n  __decorate$3([Property('Left')], SpinSettings.prototype, \"position\", void 0);\n\n  return SpinSettings;\n}(ChildProperty);\n/**\r\n * Defines the animation settings.\r\n */\n\n\nvar AnimationSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$3(AnimationSettings, _super);\n\n  function AnimationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$3([Property(400)], AnimationSettings.prototype, \"duration\", void 0);\n\n  __decorate$3([Property('None')], AnimationSettings.prototype, \"effect\", void 0);\n\n  __decorate$3([Property('ease')], AnimationSettings.prototype, \"easing\", void 0);\n\n  return AnimationSettings;\n}(ChildProperty);\n/**\r\n * The ProgressButton visualizes the progression of an operation to indicate the user\r\n * that a process is happening in the background with visual representation.\r\n * ```html\r\n * <button id=\"element\"></button>\r\n * ```\r\n * ```typescript\r\n * <script>\r\n * var progressButtonObj = new ProgressButton({ content: 'Progress Button' });\r\n * progressButtonObj.appendTo(\"#element\");\r\n * </script>\r\n * ```\r\n */\n\n\nvar ProgressButton =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$3(ProgressButton, _super);\n  /**\r\n   * Constructor for creating the widget.\r\n   *\r\n   * @param  {ProgressButtonModel} options - Specifies progress button model\r\n   * @param  {string|HTMLButtonElement} element - Specifies element\r\n   */\n\n\n  function ProgressButton(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.step = 1;\n    return _this;\n  }\n\n  ProgressButton.prototype.preRender = function () {\n    _super.prototype.preRender.call(this);\n  };\n  /**\r\n   * Initialize the Component rendering\r\n   *\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  ProgressButton.prototype.render = function () {\n    _super.prototype.render.call(this);\n\n    this.init();\n    this.wireEvents();\n    this.setAria();\n    this.renderComplete();\n  };\n  /**\r\n   * Starts the button progress at the specified percent.\r\n   *\r\n   * @param {number} percent - Starts the button progress at this percent.\r\n   * @returns {void}\r\n   */\n\n\n  ProgressButton.prototype.start = function (percent) {\n    this.isPaused = false;\n    this.startProgress(percent ? percent : this.percent, this.progressTime);\n  };\n  /**\r\n   * Stops the button progress.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ProgressButton.prototype.stop = function () {\n    this.isPaused = true;\n    cancelAnimationFrame(this.timerId);\n  };\n  /**\r\n   * Complete the button progress.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ProgressButton.prototype.progressComplete = function () {\n    this.isPaused = false;\n    this.finishProgress();\n  };\n  /**\r\n   * Get component name.\r\n   *\r\n   * @returns {string} - Module Name\r\n   * @private\r\n   */\n\n\n  ProgressButton.prototype.getModuleName = function () {\n    return 'progress-btn';\n  };\n  /**\r\n   * Destroys the widget.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  ProgressButton.prototype.destroy = function () {\n    var _this = this;\n\n    var classList$$1 = [HIDESPINNER, PROGRESSACTIVE, 'e-round-corner', 'e-' + _super.prototype.getModuleName.call(this), 'e-spin-' + this.spinSettings.position.toLowerCase()];\n\n    _super.prototype.destroy.call(this);\n\n    this.unWireEvents();\n    this.element.innerHTML = '';\n\n    if (this.cssClass) {\n      classList$$1 = classList$$1.concat(this.cssClass.split(' '));\n    }\n\n    removeClass([this.element], classList$$1);\n    var css = this.element.getAttribute('class') ? ['aria-label', 'aria-valuemin', 'aria-valuemax', 'aria-valuenow'] : ['aria-label', 'aria-valuemin', 'aria-valuemax', 'aria-valuenow', 'class'];\n    css.forEach(function (key) {\n      _this.element.removeAttribute(key);\n    });\n\n    if (this.disabled) {\n      this.element.removeAttribute('disabled');\n    }\n  };\n\n  ProgressButton.prototype.init = function () {\n    this.element.classList.add('e-' + _super.prototype.getModuleName.call(this));\n    this.setContent();\n    this.createSpinner();\n\n    if (this.enableProgress) {\n      this.createProgress();\n    }\n  };\n\n  ProgressButton.prototype.createSpinner = function () {\n    var spinner = this.createElement('span', {\n      className: 'e-spinner'\n    });\n    this.setSpinPosition(spinner);\n    createSpinner({\n      target: spinner,\n      width: this.spinSettings.width || 16,\n      template: this.spinSettings.template\n    }, this.createElement);\n  };\n\n  ProgressButton.prototype.getSpinner = function () {\n    return this.element.getElementsByClassName('e-spinner')[0];\n  };\n\n  ProgressButton.prototype.getProgress = function () {\n    return this.element.getElementsByClassName(PROGRESS)[0];\n  };\n\n  ProgressButton.prototype.setSpinPosition = function (ele) {\n    var position = this.spinSettings.position || 'Left';\n\n    if (position === 'Left' || position === 'Top') {\n      this.element.insertBefore(ele, this.element.getElementsByClassName(CONTENTCLS)[0]);\n    } else {\n      this.element.appendChild(ele);\n    }\n\n    this.element.classList.add('e-spin-' + position.toLowerCase());\n  };\n\n  ProgressButton.prototype.createProgress = function () {\n    this.element.appendChild(this.createElement('span', {\n      className: PROGRESS\n    }));\n  };\n\n  ProgressButton.prototype.setContent = function () {\n    var cont;\n    cont = this.element.innerHTML;\n\n    if (this.enableHtmlSanitizer) {\n      cont = SanitizeHtmlHelper.sanitize(this.element.innerHTML);\n    }\n\n    this.element.innerHTML = '';\n    this.element.appendChild(this.createElement('span', {\n      className: CONTENTCLS,\n      innerHTML: cont\n    }));\n  };\n\n  ProgressButton.prototype.setContentIcon = function (content) {\n    var contElem = this.createElement('span', {\n      className: CONTENTCLS,\n      innerHTML: content\n    });\n\n    if (this.iconCss) {\n      var span = this.createElement('span', {\n        className: 'e-btn-icon ' + this.iconCss\n      });\n\n      if (!this.element.textContent.trim()) {\n        this.element.classList.add('e-icon-btn');\n      } else {\n        span.classList.add('e-icon-' + this.iconPosition.toLowerCase());\n\n        if (this.iconPosition === 'Top' || this.iconPosition === 'Bottom') {\n          this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn');\n        }\n      }\n\n      var node = contElem.childNodes[0];\n\n      if (node && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {\n        contElem.insertBefore(span, node);\n      } else {\n        contElem.appendChild(span);\n      }\n    }\n\n    this.element.appendChild(contElem);\n  };\n\n  ProgressButton.prototype.clickHandler = function () {\n    if (this.element.classList.contains(PROGRESSACTIVE)) {\n      return;\n    }\n\n    this.startProgress();\n  };\n\n  ProgressButton.prototype.startProgress = function (percent, progressTime) {\n    var clsList = this.element.classList;\n    var isVertical = clsList.contains('e-vertical');\n    clsList.add(PROGRESSACTIVE);\n\n    if (!clsList.contains(HIDESPINNER)) {\n      showSpinner(this.element);\n    }\n\n    this.startAnimate(Date.now(), progressTime ? progressTime : 0, progressTime ? Date.now() - this.duration * 1 / 100 : Date.now(), percent ? percent : 0, 0, this.step, 0, isVertical);\n    this.startContAnimate();\n  };\n\n  ProgressButton.prototype.startAnimate = function (timestamp, progressTime, prevTime, percent, prevPercent, step, prevProgressTime, isVertical) {\n    var _this = this;\n\n    try {\n      var timeDiff = timestamp - prevTime;\n      var stepTime = this.duration * step / 100;\n      var timeDiffBuffer_1 = timeDiff ? timeDiff < stepTime ? timeDiff - stepTime : timeDiff % stepTime : 0;\n      this.progressTime = progressTime = progressTime + timeDiff - timeDiffBuffer_1;\n      prevTime = timestamp - timeDiffBuffer_1;\n      percent = percent + (timeDiff - timeDiffBuffer_1) / this.duration * 100;\n      prevPercent = (progressTime - prevProgressTime) % stepTime === 0 || percent === 100 ? percent : prevPercent;\n      var args = {\n        percent: prevPercent,\n        currentDuration: progressTime,\n        step: step\n      };\n      this.eIsVertical = isVertical;\n\n      if (percent === 0) {\n        this.trigger('begin', args, function (observedArgs) {\n          _this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer_1, prevTime);\n        });\n      } else if (percent === 100 || progressTime === this.duration) {\n        this.trigger('end', args, function (observedArgs) {\n          _this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer_1, prevTime);\n        });\n      } else {\n        this.trigger('progress', args, function (observedArgs) {\n          _this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer_1, prevTime);\n        });\n      }\n    } catch (e) {\n      cancelAnimationFrame(this.timerId);\n      this.trigger('fail', e);\n    }\n  };\n\n  ProgressButton.prototype.successCallback = function (args, perc, pPerc, prgTim, pPrgTim, timDif, pTim) {\n    var _this = this;\n\n    var percent = perc;\n    var prevPercent = pPerc;\n    var timeDiffBuffer = timDif;\n    var progressTime = prgTim;\n    var prevProgressTime = pPrgTim;\n    var prevTime = pTim;\n    var isVertical = this.eIsVertical;\n\n    if (percent !== args.percent && args.percent !== prevPercent) {\n      percent = args.percent;\n    }\n\n    this.percent = percent;\n    this.step = args.step;\n\n    if ((progressTime - prevProgressTime) % (this.duration * args.step / 100) === 0 || percent === 100) {\n      this.timerId = requestAnimationFrame(function () {\n        if (_this.enableProgress) {\n          _this.getProgress().style[isVertical ? 'height' : 'width'] = percent + '%';\n        }\n\n        _this.element.setAttribute('aria-valuenow', percent.toString());\n      });\n      prevPercent = percent;\n      prevProgressTime = progressTime;\n    }\n\n    if (!this.isPaused) {\n      if (progressTime < this.duration && percent < 100) {\n        this.interval = window.setTimeout(function () {\n          _this.startAnimate(Date.now(), progressTime, prevTime, percent, prevPercent, args.step, prevProgressTime, isVertical);\n        }, this.duration / 100 - timeDiffBuffer);\n      } else {\n        this.interval = window.setTimeout(function () {\n          _this.progressTime = _this.percent = 0;\n\n          if (_this.enableProgress) {\n            _this.getProgress().style[isVertical ? 'height' : 'width'] = '0%';\n          }\n\n          _this.element.setAttribute('aria-valuenow', '0');\n\n          _this.hideSpin();\n        }, 100);\n      }\n    }\n  };\n\n  ProgressButton.prototype.startContAnimate = function () {\n    var _this = this;\n\n    var ele = this.element.getElementsByClassName(CONTENTCLS)[0];\n\n    if (this.animationSettings.effect !== 'None') {\n      new Animation({}).animate(ele, {\n        duration: this.animationSettings.duration,\n        name: 'Progress' + this.animationSettings.effect,\n        timingFunction: this.animationSettings.easing,\n        begin: function () {\n          if (_this.spinSettings.position === 'Center') {\n            _this.setSpinnerSize();\n          }\n        },\n        end: function () {\n          ele.classList.add('e-animate-end');\n        }\n      });\n    } else if (this.spinSettings.position === 'Center') {\n      this.setSpinnerSize();\n    }\n  };\n\n  ProgressButton.prototype.finishProgress = function () {\n    var clsList = this.element.classList;\n    var isVertical = clsList.contains('e-vertical');\n    clsList.add(PROGRESSACTIVE);\n    var count = 100;\n\n    for (var i = this.percent; i < count; i++) {\n      i += 10;\n\n      if (i > 100) {\n        i = 100;\n      }\n\n      if (this.enableProgress) {\n        this.getProgress().style[isVertical ? 'height' : 'width'] = this.percent < 100 ? i + '%' : '100%';\n      }\n    }\n\n    this.element.setAttribute('aria-valuenow', '0');\n    this.hideSpin();\n    var args = {\n      step: this.step,\n      currentDuration: this.progressTime,\n      percent: 100\n    };\n    clearTimeout(this.interval);\n    this.trigger('end', args);\n    this.progressTime = this.percent = 0;\n  };\n\n  ProgressButton.prototype.setSpinnerSize = function () {\n    var ele = this.element.getElementsByClassName(CONTENTCLS)[0];\n    var spinner = this.getSpinner();\n    spinner.style.width = Math.max(spinner.offsetWidth, ele.offsetWidth) + 'px';\n    spinner.style.height = Math.max(spinner.offsetHeight, ele.offsetHeight) + 'px';\n    ele.classList.add('e-cont-animate');\n  };\n\n  ProgressButton.prototype.hideSpin = function () {\n    var cont = this.element.getElementsByClassName(CONTENTCLS)[0];\n\n    if (!this.element.classList.contains(HIDESPINNER)) {\n      hideSpinner(this.element);\n    }\n\n    this.element.classList.remove(PROGRESSACTIVE);\n\n    if (this.animationSettings.effect !== 'None') {\n      cont.classList.remove('e-animate-end');\n    }\n\n    if (this.spinSettings.position === 'Center') {\n      var ele = this.getSpinner();\n      cont.classList.remove('e-cont-animate');\n      ele.style.width = 'auto';\n      ele.style.height = 'auto';\n    }\n  };\n\n  ProgressButton.prototype.setIconSpan = function () {\n    var cont = this.element.getElementsByClassName(CONTENTCLS)[0];\n    var iconSpan = this.element.getElementsByClassName('e-btn-icon')[0];\n\n    if (cont.childNodes[0] && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {\n      cont.insertBefore(iconSpan, cont.childNodes[0]);\n    } else {\n      cont.appendChild(iconSpan);\n    }\n  };\n\n  ProgressButton.prototype.setAria = function () {\n    attributes(this.element, {\n      'aria-label': this.element.textContent + ' progress',\n      'aria-valuemin': '0',\n      'aria-valuemax': '100',\n      'aria-valuenow': '0'\n    });\n  };\n\n  ProgressButton.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n  };\n\n  ProgressButton.prototype.unWireEvents = function () {\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n  };\n  /**\r\n   * Called internally if any of the property value changed.\r\n   *\r\n   * @param  {ProgressButtonModel} newProp - Specifies new properties\r\n   * @param  {ProgressButtonModel} oldProp - Specifies old properties\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  ProgressButton.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var ele = this.element;\n    var isSpinning = false;\n    var clsList = this.element.querySelector('.e-spinner-pane').classList;\n\n    if (clsList.contains('e-spin-show')) {\n      isSpinning = true;\n    }\n\n    _super.prototype.onPropertyChanged.call(this, newProp, oldProp);\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'content':\n          this.setContent();\n          this.createSpinner();\n\n          if (isSpinning) {\n            showSpinner(this.element);\n            isSpinning = false;\n          }\n\n          if (this.enableProgress) {\n            this.createProgress();\n          }\n\n          ele.setAttribute('aria-label', ele.textContent + ' progress');\n          break;\n\n        case 'iconCss':\n          if (!oldProp.iconCss) {\n            this.setIconSpan();\n          }\n\n          break;\n\n        case 'iconPosition':\n          this.setIconSpan();\n          break;\n\n        case 'enableProgress':\n          if (newProp.enableProgress) {\n            this.createProgress();\n          } else {\n            remove(this.getProgress());\n          }\n\n          break;\n\n        case 'spinSettings':\n          if (newProp.spinSettings.position) {\n            ele.classList.remove('e-spin-' + oldProp.spinSettings.position.toLowerCase());\n            this.setSpinPosition(this.getSpinner());\n          }\n\n          if (newProp.spinSettings.template || newProp.spinSettings.width) {\n            ele.removeChild(this.getSpinner());\n            this.createSpinner();\n          }\n\n          break;\n      }\n    }\n  };\n  /**\r\n   * Sets the focus to ProgressButton\r\n   * its native method\r\n   *\r\n   * @public\r\n   * @returns {void}\r\n   */\n\n\n  ProgressButton.prototype.focusIn = function () {\n    this.element.focus();\n  };\n\n  __decorate$3([Property(false)], ProgressButton.prototype, \"enableProgress\", void 0);\n\n  __decorate$3([Property(2000)], ProgressButton.prototype, \"duration\", void 0);\n\n  __decorate$3([Property('Left')], ProgressButton.prototype, \"iconPosition\", void 0);\n\n  __decorate$3([Property('')], ProgressButton.prototype, \"iconCss\", void 0);\n\n  __decorate$3([Property(false)], ProgressButton.prototype, \"disabled\", void 0);\n\n  __decorate$3([Property(false)], ProgressButton.prototype, \"isPrimary\", void 0);\n\n  __decorate$3([Property('')], ProgressButton.prototype, \"cssClass\", void 0);\n\n  __decorate$3([Property('')], ProgressButton.prototype, \"content\", void 0);\n\n  __decorate$3([Property(false)], ProgressButton.prototype, \"isToggle\", void 0);\n\n  __decorate$3([Property(false)], ProgressButton.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate$3([Complex({}, SpinSettings)], ProgressButton.prototype, \"spinSettings\", void 0);\n\n  __decorate$3([Complex({}, AnimationSettings)], ProgressButton.prototype, \"animationSettings\", void 0);\n\n  __decorate$3([Event()], ProgressButton.prototype, \"created\", void 0);\n\n  __decorate$3([Event()], ProgressButton.prototype, \"begin\", void 0);\n\n  __decorate$3([Event()], ProgressButton.prototype, \"progress\", void 0);\n\n  __decorate$3([Event()], ProgressButton.prototype, \"end\", void 0);\n\n  __decorate$3([Event()], ProgressButton.prototype, \"fail\", void 0);\n\n  ProgressButton = __decorate$3([NotifyPropertyChanges], ProgressButton);\n  return ProgressButton;\n}(Button);\n/**\r\n * ProgressButton modules\r\n */\n\n/**\r\n * SplitButton all module\r\n */\n\n\nexport { getModel, upDownKeyHandler, setBlankIconStyle, Item, DropDownButton, SplitButton, Deferred, createButtonGroup, SpinSettings, AnimationSettings, ProgressButton }; //# sourceMappingURL=ej2-splitbuttons.es5.js.map","map":null,"metadata":{},"sourceType":"module"}