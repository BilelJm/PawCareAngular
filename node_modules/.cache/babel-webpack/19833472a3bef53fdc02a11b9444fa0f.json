{"ast":null,"code":"import { getValue, setValue, isNullOrUndefined, isObject } from '@syncfusion/ej2-base';\n/**\n * Angular Form Base Module\n */\n\nvar FormBase =\n/** @class */\nfunction () {\n  function FormBase() {}\n\n  FormBase.prototype.propagateChange = function (_) {\n    return;\n  };\n\n  FormBase.prototype.propagateTouch = function () {\n    return;\n  };\n\n  FormBase.prototype.localChange = function (e) {\n    //tslint:disable-next-line\n    var value = e.checked === undefined ? e.value : e.checked;\n    this.objCheck = isObject(value);\n\n    if (this.isUpdated === true) {\n      this.angularValue = this.oldValue;\n    }\n\n    if (this.objCheck === true) {\n      this.duplicateValue = JSON.stringify(value);\n      this.duplicateAngularValue = JSON.stringify(this.angularValue);\n\n      if (this.duplicateValue !== this.duplicateAngularValue && this.propagateChange !== undefined && value !== undefined) {\n        // Update angular from our control\n        this.propagateChange(value);\n        this.angularValue = value;\n      }\n    } else {\n      if (value !== this.angularValue && this.propagateChange !== undefined && value !== undefined) {\n        // While reset form using reset() method ng-dirty not get updated, so while value is empty just update angularValue only\n        if (value !== '' && value !== null) {\n          // Update angular from our control\n          this.propagateChange(value);\n          this.angularValue = value;\n        } else {\n          //tslint:disable-next-line\n          var optionalValue = value;\n          this.propagateChange(optionalValue);\n          this.angularValue = value;\n        }\n      }\n    }\n  };\n\n  FormBase.prototype.registerOnChange = function (registerFunction) {\n    this.propagateChange = registerFunction;\n  };\n\n  FormBase.prototype.registerOnTouched = function (registerFunction) {\n    this.propagateTouch = registerFunction;\n  };\n\n  FormBase.prototype.twoWaySetter = function (newVal, prop) {\n    var oldVal = this.oldValue || getValue(prop, this.properties);\n    var ele = this.inputElement || this.element;\n\n    if (ele && oldVal === newVal && this.value === newVal && (ele.value === undefined || ele.value === '')) {\n      return;\n    }\n\n    this.saveChanges(prop, newVal, oldVal);\n    setValue(prop, isNullOrUndefined(newVal) ? null : newVal, this.properties);\n    getValue(prop + 'Change', this).emit(newVal);\n  }; // tslint:disable-next-line:no-any\n\n\n  FormBase.prototype.ngAfterViewInit = function (isTempRef) {\n    // tslint:disable-next-line:no-any\n    var tempFormAfterViewThis = isTempRef || this; // Used setTimeout for template binding\n    // Refer Link: https://github.com/angular/angular/issues/6005\n    // Removed setTimeout, Because we have called markForCheck() method in Angular Template Compiler\n\n    /* istanbul ignore else */\n\n    if (typeof window !== 'undefined') {\n      tempFormAfterViewThis.appendTo(tempFormAfterViewThis.element);\n      var ele = tempFormAfterViewThis.inputElement || tempFormAfterViewThis.element;\n      ele.addEventListener('focus', tempFormAfterViewThis.ngOnFocus.bind(tempFormAfterViewThis));\n      ele.addEventListener('blur', tempFormAfterViewThis.ngOnBlur.bind(tempFormAfterViewThis));\n    }\n\n    this.isFormInit = false;\n  };\n\n  FormBase.prototype.setDisabledState = function (disabled) {\n    this.enabled = !disabled;\n    this.disabled = disabled;\n  };\n\n  FormBase.prototype.writeValue = function (value) {\n    var regExp = /ejs-radiobutton/g; //update control value from angular\n\n    if (this.checked === undefined) {\n      this.value = value;\n    } else {\n      // To resolve boolean type formControl value is not working for radio button control.\n\n      /* istanbul ignore next */\n      if (this.ngEle) {\n        if (typeof value === 'boolean') {\n          if (regExp.test(this.ngEle.nativeElement.outerHTML)) {\n            this.checked = value === this.value;\n          } else {\n            this.checked = value;\n          }\n        } else {\n          this.checked = value === this.value;\n        }\n      }\n    }\n\n    this.angularValue = value;\n    this.isUpdated = true; // When binding Html textbox value to syncfusion textbox, change event triggered dynamically.\n    // To prevent change event, trigger change in component side based on `preventChange` value\n\n    this.preventChange = this.isFormInit ? false : true;\n\n    if (value === null) {\n      return;\n    }\n  };\n\n  FormBase.prototype.ngOnFocus = function (e) {\n    /* istanbul ignore else */\n    if (this.skipFromEvent !== true) {\n      this.focus.emit(e);\n    }\n  };\n\n  FormBase.prototype.ngOnBlur = function (e) {\n    this.propagateTouch();\n    /* istanbul ignore else */\n\n    if (this.skipFromEvent !== true) {\n      this.blur.emit(e);\n    }\n  };\n\n  FormBase.isFormBase = true;\n  return FormBase;\n}();\n\nexport { FormBase };","map":null,"metadata":{},"sourceType":"module"}