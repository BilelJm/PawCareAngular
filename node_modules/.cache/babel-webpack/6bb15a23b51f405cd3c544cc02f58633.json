{"ast":null,"code":"import { Animation, Browser, ChildProperty, Collection, Complex, Component, Draggable, Droppable, Event, EventHandler, KeyboardEvents, L10n, NotifyPropertyChanges, Property, SanitizeHtmlHelper, Touch, addClass, append, attributes, classList, closest, compile, createElement, detach, extend, formatUnit, getElement, getInstance, getRandomId, getUniqueID, getValue, isBlazor, isNullOrUndefined, isRippleEnabled, isUndefined, isVisible, matches, merge, remove, removeClass, rippleEffect, select, selectAll, setStyleAttribute, setValue } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { Popup, calculatePosition, createSpinner, fit, getScrollableParent, getZindexPartial, hideSpinner, isCollide, showSpinner } from '@syncfusion/ej2-popups';\nimport { Button, createCheckBox, rippleMouseHandler } from '@syncfusion/ej2-buttons';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { Input } from '@syncfusion/ej2-inputs';\n\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar CLS_ROOT = 'e-hscroll';\nvar CLS_RTL = 'e-rtl';\nvar CLS_DISABLE = 'e-overlay';\nvar CLS_HSCROLLBAR = 'e-hscroll-bar';\nvar CLS_HSCROLLCON = 'e-hscroll-content';\nvar CLS_NAVARROW = 'e-nav-arrow';\nvar CLS_NAVRIGHTARROW = 'e-nav-right-arrow';\nvar CLS_NAVLEFTARROW = 'e-nav-left-arrow';\nvar CLS_HSCROLLNAV = 'e-scroll-nav';\nvar CLS_HSCROLLNAVRIGHT = 'e-scroll-right-nav';\nvar CLS_HSCROLLNAVLEFT = 'e-scroll-left-nav';\nvar CLS_DEVICE = 'e-scroll-device';\nvar CLS_OVERLAY = 'e-scroll-overlay';\nvar CLS_RIGHTOVERLAY = 'e-scroll-right-overlay';\nvar CLS_LEFTOVERLAY = 'e-scroll-left-overlay';\nvar OVERLAY_MAXWID = 40;\n/**\r\n * HScroll module is introduces horizontal scroller when content exceeds the current viewing area.\r\n * It can be useful for the components like Toolbar, Tab which needs horizontal scrolling alone.\r\n * Hidden content can be view by touch moving or icon click.\r\n * ```html\r\n * <div id=\"scroll\"/>\r\n * <script>\r\n *   var scrollObj = new HScroll();\r\n *   scrollObj.appendTo(\"#scroll\");\r\n * </script>\r\n * ```\r\n */\n\nvar HScroll =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends(HScroll, _super);\n  /**\r\n   * Initializes a new instance of the HScroll class.\r\n   *\r\n   * @param {HScrollModel} options  - Specifies HScroll model properties as options.\r\n   * @param {string | HTMLElement} element  - Specifies the element for which horizontal scrolling applies.\r\n   */\n\n\n  function HScroll(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\r\n   * Initialize the event handler\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  HScroll.prototype.preRender = function () {\n    this.browser = Browser.info.name;\n    this.browserCheck = this.browser === 'mozilla';\n    this.isDevice = Browser.isDevice;\n    this.customStep = true;\n    var element = this.element;\n    this.ieCheck = this.browser === 'edge' || this.browser === 'msie';\n    this.initialize();\n\n    if (element.id === '') {\n      element.id = getUniqueID('hscroll');\n      this.uniqueId = true;\n    }\n\n    element.style.display = 'block';\n\n    if (this.enableRtl) {\n      element.classList.add(CLS_RTL);\n    }\n  };\n  /**\r\n   * To Initialize the horizontal scroll  rendering\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  HScroll.prototype.render = function () {\n    this.touchModule = new Touch(this.element, {\n      scroll: this.touchHandler.bind(this),\n      swipe: this.swipeHandler.bind(this)\n    });\n    EventHandler.add(this.scrollEle, 'scroll', this.scrollHandler, this);\n\n    if (!this.isDevice) {\n      this.createNavIcon(this.element);\n    } else {\n      this.element.classList.add(CLS_DEVICE);\n      this.createOverlay(this.element);\n    }\n\n    this.setScrollState();\n  };\n\n  HScroll.prototype.setScrollState = function () {\n    if (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {\n      this.scrollStep = this.scrollEle.offsetWidth;\n      this.customStep = false;\n    } else {\n      this.customStep = true;\n    }\n  };\n\n  HScroll.prototype.initialize = function () {\n    var scrollEle = this.createElement('div', {\n      className: CLS_HSCROLLCON\n    });\n    var scrollDiv = this.createElement('div', {\n      className: CLS_HSCROLLBAR\n    });\n    scrollDiv.setAttribute('tabindex', '-1');\n    var ele = this.element;\n    var innerEle = [].slice.call(ele.children);\n\n    for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {\n      var ele_1 = innerEle_1[_i];\n      scrollEle.appendChild(ele_1);\n    }\n\n    scrollDiv.appendChild(scrollEle);\n    ele.appendChild(scrollDiv);\n    scrollDiv.style.overflowX = 'hidden';\n    this.scrollEle = scrollDiv;\n    this.scrollItems = scrollEle;\n  };\n\n  HScroll.prototype.getPersistData = function () {\n    var keyEntity = ['scrollStep'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\r\n   * Returns the current module name.\r\n   *\r\n   * @returns {string} - It returns the current module name.\r\n   * @private\r\n   */\n\n\n  HScroll.prototype.getModuleName = function () {\n    return 'hScroll';\n  };\n  /**\r\n   * Removes the control from the DOM and also removes all its related events.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  HScroll.prototype.destroy = function () {\n    var ele = this.element;\n    ele.style.display = '';\n    ele.classList.remove(CLS_ROOT);\n    ele.classList.remove(CLS_DEVICE);\n    var nav = selectAll('.e-' + ele.id + '_nav.' + CLS_HSCROLLNAV, ele);\n    var overlay = selectAll('.' + CLS_OVERLAY, ele);\n    [].slice.call(overlay).forEach(function (ele) {\n      detach(ele);\n    });\n\n    for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {\n      var elem = _a[_i];\n      ele.appendChild(elem);\n    }\n\n    if (this.uniqueId) {\n      this.element.removeAttribute('id');\n    }\n\n    detach(this.scrollEle);\n\n    if (nav.length > 0) {\n      detach(nav[0]);\n\n      if (!isNullOrUndefined(nav[1])) {\n        detach(nav[1]);\n      }\n    }\n\n    EventHandler.remove(this.scrollEle, 'scroll', this.scrollHandler);\n    this.touchModule.destroy();\n    this.touchModule = null;\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\r\n   * Specifies the value to disable/enable the HScroll component.\r\n   * When set to `true` , the component will be disabled.\r\n   *\r\n   * @param  {boolean} value - Based on this Boolean value, HScroll will be enabled (false) or disabled (true).\r\n   * @returns {void}.\r\n   */\n\n\n  HScroll.prototype.disable = function (value) {\n    var navEles = selectAll('.e-scroll-nav:not(.' + CLS_DISABLE + ')', this.element);\n\n    if (value) {\n      this.element.classList.add(CLS_DISABLE);\n    } else {\n      this.element.classList.remove(CLS_DISABLE);\n    }\n\n    [].slice.call(navEles).forEach(function (el) {\n      el.setAttribute('tabindex', !value ? '0' : '-1');\n    });\n  };\n\n  HScroll.prototype.createOverlay = function (element) {\n    var id = element.id.concat('_nav');\n    var rightOverlayEle = this.createElement('div', {\n      className: CLS_OVERLAY + ' ' + CLS_RIGHTOVERLAY\n    });\n    var clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT);\n    var rightEle = this.createElement('div', {\n      id: id.concat('_right'),\n      className: clsRight\n    });\n    var navItem = this.createElement('div', {\n      className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons'\n    });\n    rightEle.appendChild(navItem);\n    var leftEle = this.createElement('div', {\n      className: CLS_OVERLAY + ' ' + CLS_LEFTOVERLAY\n    });\n\n    if (this.ieCheck) {\n      rightEle.classList.add('e-ie-align');\n    }\n\n    element.appendChild(rightOverlayEle);\n    element.appendChild(rightEle);\n    element.insertBefore(leftEle, element.firstChild);\n    this.eventBinding([rightEle]);\n  };\n\n  HScroll.prototype.createNavIcon = function (element) {\n    var id = element.id.concat('_nav');\n    var clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT);\n    var rightAttributes = {\n      'role': 'button',\n      'id': id.concat('_right'),\n      'aria-label': 'Scroll right'\n    };\n    var nav = this.createElement('div', {\n      className: clsRight,\n      attrs: rightAttributes\n    });\n    nav.setAttribute('aria-disabled', 'false');\n    var navItem = this.createElement('div', {\n      className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons'\n    });\n    var clsLeft = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVLEFT);\n    var leftAttributes = {\n      'role': 'button',\n      'id': id.concat('_left'),\n      'aria-label': 'Scroll left'\n    };\n    var navEle = this.createElement('div', {\n      className: clsLeft + ' ' + CLS_DISABLE,\n      attrs: leftAttributes\n    });\n    navEle.setAttribute('aria-disabled', 'true');\n    var navLeftItem = this.createElement('div', {\n      className: CLS_NAVLEFTARROW + ' ' + CLS_NAVARROW + ' e-icons'\n    });\n    navEle.appendChild(navLeftItem);\n    nav.appendChild(navItem);\n    element.appendChild(nav);\n    element.insertBefore(navEle, element.firstChild);\n\n    if (this.ieCheck) {\n      nav.classList.add('e-ie-align');\n      navEle.classList.add('e-ie-align');\n    }\n\n    this.eventBinding([nav, navEle]);\n  };\n\n  HScroll.prototype.onKeyPress = function (e) {\n    var _this = this;\n\n    if (e.key === 'Enter') {\n      var timeoutFun_1 = function () {\n        _this.keyTimeout = true;\n\n        _this.eleScrolling(10, e.target, true);\n      };\n\n      this.keyTimer = window.setTimeout(function () {\n        timeoutFun_1();\n      }, 100);\n    }\n  };\n\n  HScroll.prototype.onKeyUp = function (e) {\n    if (e.key !== 'Enter') {\n      return;\n    }\n\n    if (this.keyTimeout) {\n      this.keyTimeout = false;\n    } else {\n      e.target.click();\n    }\n\n    clearTimeout(this.keyTimer);\n  };\n\n  HScroll.prototype.eventBinding = function (ele) {\n    var _this = this;\n\n    [].slice.call(ele).forEach(function (el) {\n      new Touch(el, {\n        tapHold: _this.tabHoldHandler.bind(_this),\n        tapHoldThreshold: 500\n      });\n      el.addEventListener('keydown', _this.onKeyPress.bind(_this));\n      el.addEventListener('keyup', _this.onKeyUp.bind(_this));\n      el.addEventListener('mouseup', _this.repeatScroll.bind(_this));\n      el.addEventListener('touchend', _this.repeatScroll.bind(_this));\n      el.addEventListener('contextmenu', function (e) {\n        e.preventDefault();\n      });\n      EventHandler.add(el, 'click', _this.clickEventHandler, _this);\n    });\n  };\n\n  HScroll.prototype.repeatScroll = function () {\n    clearInterval(this.timeout);\n  };\n\n  HScroll.prototype.tabHoldHandler = function (e) {\n    var _this = this;\n\n    var trgt = e.originalEvent.target;\n    trgt = this.contains(trgt, CLS_HSCROLLNAV) ? trgt.firstElementChild : trgt;\n    var scrollDis = 10;\n\n    var timeoutFun = function () {\n      _this.eleScrolling(scrollDis, trgt, true);\n    };\n\n    this.timeout = window.setInterval(function () {\n      timeoutFun();\n    }, 50);\n  };\n\n  HScroll.prototype.contains = function (ele, className) {\n    return ele.classList.contains(className);\n  };\n\n  HScroll.prototype.eleScrolling = function (scrollDis, trgt, isContinuous) {\n    var rootEle = this.element;\n    var classList$$1 = trgt.classList;\n\n    if (classList$$1.contains(CLS_HSCROLLNAV)) {\n      classList$$1 = trgt.querySelector('.' + CLS_NAVARROW).classList;\n    }\n\n    if (this.contains(rootEle, CLS_RTL) && this.browserCheck) {\n      scrollDis = -scrollDis;\n    }\n\n    if (!this.contains(rootEle, CLS_RTL) || this.browserCheck || this.ieCheck) {\n      if (classList$$1.contains(CLS_NAVRIGHTARROW)) {\n        this.frameScrollRequest(scrollDis, 'add', isContinuous);\n      } else {\n        this.frameScrollRequest(scrollDis, '', isContinuous);\n      }\n    } else {\n      if (classList$$1.contains(CLS_NAVLEFTARROW)) {\n        this.frameScrollRequest(scrollDis, 'add', isContinuous);\n      } else {\n        this.frameScrollRequest(scrollDis, '', isContinuous);\n      }\n    }\n  };\n\n  HScroll.prototype.clickEventHandler = function (e) {\n    this.eleScrolling(this.scrollStep, e.target, false);\n  };\n\n  HScroll.prototype.swipeHandler = function (e) {\n    var swipeEle = this.scrollEle;\n    var distance;\n\n    if (e.velocity <= 1) {\n      distance = e.distanceX / (e.velocity * 10);\n    } else {\n      distance = e.distanceX / e.velocity;\n    }\n\n    var start = 0.5;\n\n    var animate = function () {\n      var step = Math.sin(start);\n\n      if (step <= 0) {\n        window.cancelAnimationFrame(step);\n      } else {\n        if (e.swipeDirection === 'Left') {\n          swipeEle.scrollLeft += distance * step;\n        } else if (e.swipeDirection === 'Right') {\n          swipeEle.scrollLeft -= distance * step;\n        }\n\n        start -= 0.5;\n        window.requestAnimationFrame(animate);\n      }\n    };\n\n    animate();\n  };\n\n  HScroll.prototype.scrollUpdating = function (scrollVal, action) {\n    if (action === 'add') {\n      this.scrollEle.scrollLeft += scrollVal;\n    } else {\n      this.scrollEle.scrollLeft -= scrollVal;\n    }\n\n    if (this.enableRtl && this.scrollEle.scrollLeft > 0) {\n      this.scrollEle.scrollLeft = 0;\n    }\n  };\n\n  HScroll.prototype.frameScrollRequest = function (scrollVal, action, isContinuous) {\n    var _this = this;\n\n    var step = 10;\n\n    if (isContinuous) {\n      this.scrollUpdating(scrollVal, action);\n      return;\n    }\n\n    if (!this.customStep) {\n      [].slice.call(selectAll('.' + CLS_OVERLAY, this.element)).forEach(function (el) {\n        scrollVal -= el.offsetWidth;\n      });\n    }\n\n    var animate = function () {\n      var scrollValue;\n      var scrollStep;\n\n      if (_this.contains(_this.element, CLS_RTL) && _this.browserCheck) {\n        scrollValue = -scrollVal;\n        scrollStep = -step;\n      } else {\n        scrollValue = scrollVal;\n        scrollStep = step;\n      }\n\n      if (scrollValue < step) {\n        window.cancelAnimationFrame(scrollStep);\n      } else {\n        _this.scrollUpdating(scrollStep, action);\n\n        scrollVal -= scrollStep;\n        window.requestAnimationFrame(animate);\n      }\n    };\n\n    animate();\n  };\n\n  HScroll.prototype.touchHandler = function (e) {\n    var ele = this.scrollEle;\n    var distance = e.distanceX;\n\n    if (this.ieCheck && this.contains(this.element, CLS_RTL)) {\n      distance = -distance;\n    }\n\n    if (e.scrollDirection === 'Left') {\n      ele.scrollLeft = ele.scrollLeft + distance;\n    } else if (e.scrollDirection === 'Right') {\n      ele.scrollLeft = ele.scrollLeft - distance;\n    }\n  };\n\n  HScroll.prototype.arrowDisabling = function (addDisable, removeDisable) {\n    if (this.isDevice) {\n      var arrowEle = isNullOrUndefined(addDisable) ? removeDisable : addDisable;\n      var arrowIcon = arrowEle.querySelector('.' + CLS_NAVARROW);\n\n      if (isNullOrUndefined(addDisable)) {\n        classList(arrowIcon, [CLS_NAVRIGHTARROW], [CLS_NAVLEFTARROW]);\n      } else {\n        classList(arrowIcon, [CLS_NAVLEFTARROW], [CLS_NAVRIGHTARROW]);\n      }\n    } else if (addDisable && removeDisable) {\n      addDisable.classList.add(CLS_DISABLE);\n      addDisable.setAttribute('aria-disabled', 'true');\n      addDisable.removeAttribute('tabindex');\n      removeDisable.classList.remove(CLS_DISABLE);\n      removeDisable.setAttribute('aria-disabled', 'false');\n      removeDisable.setAttribute('tabindex', '0');\n    }\n\n    this.repeatScroll();\n  };\n\n  HScroll.prototype.scrollHandler = function (e) {\n    var target = e.target;\n    var width = target.offsetWidth;\n    var rootEle = this.element;\n    var navLeftEle = this.element.querySelector('.' + CLS_HSCROLLNAVLEFT);\n    var navRightEle = this.element.querySelector('.' + CLS_HSCROLLNAVRIGHT);\n    var leftOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY);\n    var rightOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY);\n    var scrollLeft = target.scrollLeft;\n\n    if (scrollLeft <= 0) {\n      scrollLeft = -scrollLeft;\n    }\n\n    if (this.isDevice) {\n      if (this.enableRtl && !(this.browserCheck || this.ieCheck)) {\n        leftOverlay = this.element.querySelector('.' + CLS_RIGHTOVERLAY);\n        rightOverlay = this.element.querySelector('.' + CLS_LEFTOVERLAY);\n      }\n\n      if (scrollLeft < OVERLAY_MAXWID) {\n        leftOverlay.style.width = scrollLeft + 'px';\n      } else {\n        leftOverlay.style.width = '40px';\n      }\n\n      if (target.scrollWidth - Math.ceil(width + scrollLeft) < OVERLAY_MAXWID) {\n        rightOverlay.style.width = target.scrollWidth - Math.ceil(width + scrollLeft) + 'px';\n      } else {\n        rightOverlay.style.width = '40px';\n      }\n    }\n\n    if (scrollLeft === 0) {\n      this.arrowDisabling(navLeftEle, navRightEle);\n    } else if (Math.ceil(width + scrollLeft + .1) >= target.scrollWidth) {\n      this.arrowDisabling(navRightEle, navLeftEle);\n    } else {\n      var disEle = this.element.querySelector('.' + CLS_HSCROLLNAV + '.' + CLS_DISABLE);\n\n      if (disEle) {\n        disEle.classList.remove(CLS_DISABLE);\n        disEle.setAttribute('aria-disabled', 'false');\n        disEle.setAttribute('tabindex', '0');\n      }\n    }\n  };\n  /**\r\n   * Gets called when the model property changes.The data that describes the old and new values of property that changed.\r\n   *\r\n   * @param  {HScrollModel} newProp - It contains the new value of data.\r\n   * @param  {HScrollModel} oldProp - It contains the old value of data.\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  HScroll.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'scrollStep':\n          this.setScrollState();\n          break;\n\n        case 'enableRtl':\n          newProp.enableRtl ? this.element.classList.add(CLS_RTL) : this.element.classList.remove(CLS_RTL);\n          break;\n      }\n    }\n  };\n\n  __decorate([Property(null)], HScroll.prototype, \"scrollStep\", void 0);\n\n  HScroll = __decorate([NotifyPropertyChanges], HScroll);\n  return HScroll;\n}(Component);\n\nvar __extends$1 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar CLS_ROOT$1 = 'e-vscroll';\nvar CLS_RTL$1 = 'e-rtl';\nvar CLS_DISABLE$1 = 'e-overlay';\nvar CLS_VSCROLLBAR = 'e-vscroll-bar';\nvar CLS_VSCROLLCON = 'e-vscroll-content';\nvar CLS_NAVARROW$1 = 'e-nav-arrow';\nvar CLS_NAVUPARROW = 'e-nav-up-arrow';\nvar CLS_NAVDOWNARROW = 'e-nav-down-arrow';\nvar CLS_VSCROLLNAV = 'e-scroll-nav';\nvar CLS_VSCROLLNAVUP = 'e-scroll-up-nav';\nvar CLS_VSCROLLNAVDOWN = 'e-scroll-down-nav';\nvar CLS_DEVICE$1 = 'e-scroll-device';\nvar CLS_OVERLAY$1 = 'e-scroll-overlay';\nvar CLS_UPOVERLAY = 'e-scroll-up-overlay';\nvar CLS_DOWNOVERLAY = 'e-scroll-down-overlay';\nvar OVERLAY_MAXWID$1 = 40;\n/**\r\n * VScroll module is introduces vertical scroller when content exceeds the current viewing area.\r\n * It can be useful for the components like Toolbar, Tab which needs vertical scrolling alone.\r\n * Hidden content can be view by touch moving or icon click.\r\n * ```html\r\n * <div id=\"scroll\"/>\r\n * <script>\r\n *   var scrollObj = new VScroll();\r\n *   scrollObj.appendTo(\"#scroll\");\r\n * </script>\r\n * ```\r\n */\n\nvar VScroll =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$1(VScroll, _super);\n  /**\r\n   * Initializes a new instance of the VScroll class.\r\n   *\r\n   * @param {VScrollModel} options  - Specifies VScroll model properties as options.\r\n   * @param {string | HTMLElement} element  - Specifies the element for which vertical scrolling applies.\r\n   */\n\n\n  function VScroll(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\r\n   * Initialize the event handler\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  VScroll.prototype.preRender = function () {\n    this.browser = Browser.info.name;\n    this.browserCheck = this.browser === 'mozilla';\n    this.isDevice = Browser.isDevice;\n    this.customStep = true;\n    var ele = this.element;\n    this.ieCheck = this.browser === 'edge' || this.browser === 'msie';\n    this.initialize();\n\n    if (ele.id === '') {\n      ele.id = getUniqueID('vscroll');\n      this.uniqueId = true;\n    }\n\n    ele.style.display = 'block';\n\n    if (this.enableRtl) {\n      ele.classList.add(CLS_RTL$1);\n    }\n  };\n  /**\r\n   * To Initialize the vertical scroll rendering\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  VScroll.prototype.render = function () {\n    this.touchModule = new Touch(this.element, {\n      scroll: this.touchHandler.bind(this),\n      swipe: this.swipeHandler.bind(this)\n    });\n    EventHandler.add(this.scrollEle, 'scroll', this.scrollEventHandler, this);\n\n    if (!this.isDevice) {\n      this.createNavIcon(this.element);\n    } else {\n      this.element.classList.add(CLS_DEVICE$1);\n      this.createOverlayElement(this.element);\n    }\n\n    this.setScrollState();\n    EventHandler.add(this.element, 'wheel', this.wheelEventHandler, this);\n  };\n\n  VScroll.prototype.setScrollState = function () {\n    if (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {\n      this.scrollStep = this.scrollEle.offsetHeight;\n      this.customStep = false;\n    } else {\n      this.customStep = true;\n    }\n  };\n\n  VScroll.prototype.initialize = function () {\n    var scrollCnt = createElement('div', {\n      className: CLS_VSCROLLCON\n    });\n    var scrollBar = createElement('div', {\n      className: CLS_VSCROLLBAR\n    });\n    scrollBar.setAttribute('tabindex', '-1');\n    var ele = this.element;\n    var innerEle = [].slice.call(ele.children);\n\n    for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {\n      var ele_1 = innerEle_1[_i];\n      scrollCnt.appendChild(ele_1);\n    }\n\n    scrollBar.appendChild(scrollCnt);\n    ele.appendChild(scrollBar);\n    scrollBar.style.overflow = 'hidden';\n    this.scrollEle = scrollBar;\n    this.scrollItems = scrollCnt;\n  };\n\n  VScroll.prototype.getPersistData = function () {\n    var keyEntity = ['scrollStep'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\r\n   * Returns the current module name.\r\n   *\r\n   * @returns {string} - It returns the current module name.\r\n   * @private\r\n   */\n\n\n  VScroll.prototype.getModuleName = function () {\n    return 'vScroll';\n  };\n  /**\r\n   * Removes the control from the DOM and also removes all its related events.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  VScroll.prototype.destroy = function () {\n    var el = this.element;\n    el.style.display = '';\n    removeClass([this.element], [CLS_ROOT$1, CLS_DEVICE$1]);\n    var navs = selectAll('.e-' + el.id + '_nav.' + CLS_VSCROLLNAV, el);\n    var overlays = selectAll('.' + CLS_OVERLAY$1, el);\n    [].slice.call(overlays).forEach(function (ele) {\n      detach(ele);\n    });\n\n    for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {\n      var elem = _a[_i];\n      el.appendChild(elem);\n    }\n\n    if (this.uniqueId) {\n      this.element.removeAttribute('id');\n    }\n\n    detach(this.scrollEle);\n\n    if (navs.length > 0) {\n      detach(navs[0]);\n\n      if (!isNullOrUndefined(navs[1])) {\n        detach(navs[1]);\n      }\n    }\n\n    EventHandler.remove(this.scrollEle, 'scroll', this.scrollEventHandler);\n    this.touchModule.destroy();\n    this.touchModule = null;\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\r\n   * Specifies the value to disable/enable the VScroll component.\r\n   * When set to `true` , the component will be disabled.\r\n   *\r\n   * @param  {boolean} value - Based on this Boolean value, VScroll will be enabled (false) or disabled (true).\r\n   * @returns {void}.\r\n   */\n\n\n  VScroll.prototype.disable = function (value) {\n    var navEle = selectAll('.e-scroll-nav:not(.' + CLS_DISABLE$1 + ')', this.element);\n\n    if (value) {\n      this.element.classList.add(CLS_DISABLE$1);\n    } else {\n      this.element.classList.remove(CLS_DISABLE$1);\n    }\n\n    [].slice.call(navEle).forEach(function (el) {\n      el.setAttribute('tabindex', !value ? '0' : '-1');\n    });\n  };\n\n  VScroll.prototype.createOverlayElement = function (element) {\n    var id = element.id.concat('_nav');\n    var downOverlayEle = createElement('div', {\n      className: CLS_OVERLAY$1 + ' ' + CLS_DOWNOVERLAY\n    });\n    var clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);\n    var downEle = createElement('div', {\n      id: id.concat('down'),\n      className: clsDown\n    });\n    var navItem = createElement('div', {\n      className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW$1 + ' e-icons'\n    });\n    downEle.appendChild(navItem);\n    var upEle = createElement('div', {\n      className: CLS_OVERLAY$1 + ' ' + CLS_UPOVERLAY\n    });\n\n    if (this.ieCheck) {\n      downEle.classList.add('e-ie-align');\n    }\n\n    element.appendChild(downOverlayEle);\n    element.appendChild(downEle);\n    element.insertBefore(upEle, element.firstChild);\n    this.eventBinding([downEle]);\n  };\n\n  VScroll.prototype.createNavIcon = function (element) {\n    var id = element.id.concat('_nav');\n    var clsDown = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVDOWN);\n    var nav = createElement('div', {\n      id: id.concat('_down'),\n      className: clsDown\n    });\n    nav.setAttribute('aria-disabled', 'false');\n    var navItem = createElement('div', {\n      className: CLS_NAVDOWNARROW + ' ' + CLS_NAVARROW$1 + ' e-icons'\n    });\n    var clsUp = 'e-' + element.id.concat('_nav ' + CLS_VSCROLLNAV + ' ' + CLS_VSCROLLNAVUP);\n    var navElement = createElement('div', {\n      id: id.concat('_up'),\n      className: clsUp + ' ' + CLS_DISABLE$1\n    });\n    navElement.setAttribute('aria-disabled', 'true');\n    var navUpItem = createElement('div', {\n      className: CLS_NAVUPARROW + ' ' + CLS_NAVARROW$1 + ' e-icons'\n    });\n    navElement.appendChild(navUpItem);\n    nav.appendChild(navItem);\n    nav.setAttribute('tabindex', '0');\n    element.appendChild(nav);\n    element.insertBefore(navElement, element.firstChild);\n\n    if (this.ieCheck) {\n      nav.classList.add('e-ie-align');\n      navElement.classList.add('e-ie-align');\n    }\n\n    this.eventBinding([nav, navElement]);\n  };\n\n  VScroll.prototype.onKeyPress = function (ev) {\n    var _this = this;\n\n    if (ev.key === 'Enter') {\n      var timeoutFun_1 = function () {\n        _this.keyTimeout = true;\n\n        _this.eleScrolling(10, ev.target, true);\n      };\n\n      this.keyTimer = window.setTimeout(function () {\n        timeoutFun_1();\n      }, 100);\n    }\n  };\n\n  VScroll.prototype.onKeyUp = function (ev) {\n    if (ev.key !== 'Enter') {\n      return;\n    }\n\n    if (this.keyTimeout) {\n      this.keyTimeout = false;\n    } else {\n      ev.target.click();\n    }\n\n    clearTimeout(this.keyTimer);\n  };\n\n  VScroll.prototype.eventBinding = function (element) {\n    var _this = this;\n\n    [].slice.call(element).forEach(function (ele) {\n      new Touch(ele, {\n        tapHold: _this.tabHoldHandler.bind(_this),\n        tapHoldThreshold: 500\n      });\n      ele.addEventListener('keydown', _this.onKeyPress.bind(_this));\n      ele.addEventListener('keyup', _this.onKeyUp.bind(_this));\n      ele.addEventListener('mouseup', _this.repeatScroll.bind(_this));\n      ele.addEventListener('touchend', _this.repeatScroll.bind(_this));\n      ele.addEventListener('contextmenu', function (e) {\n        e.preventDefault();\n      });\n      EventHandler.add(ele, 'click', _this.clickEventHandler, _this);\n    });\n  };\n\n  VScroll.prototype.repeatScroll = function () {\n    clearInterval(this.timeout);\n  };\n\n  VScroll.prototype.tabHoldHandler = function (ev) {\n    var _this = this;\n\n    var trgt = ev.originalEvent.target;\n    trgt = this.contains(trgt, CLS_VSCROLLNAV) ? trgt.firstElementChild : trgt;\n    var scrollDistance = 10;\n\n    var timeoutFun = function () {\n      _this.eleScrolling(scrollDistance, trgt, true);\n    };\n\n    this.timeout = window.setInterval(function () {\n      timeoutFun();\n    }, 50);\n  };\n\n  VScroll.prototype.contains = function (element, className) {\n    return element.classList.contains(className);\n  };\n\n  VScroll.prototype.eleScrolling = function (scrollDis, trgt, isContinuous) {\n    var classList$$1 = trgt.classList;\n\n    if (classList$$1.contains(CLS_VSCROLLNAV)) {\n      classList$$1 = trgt.querySelector('.' + CLS_NAVARROW$1).classList;\n    }\n\n    if (classList$$1.contains(CLS_NAVDOWNARROW)) {\n      this.frameScrollRequest(scrollDis, 'add', isContinuous);\n    } else if (classList$$1.contains(CLS_NAVUPARROW)) {\n      this.frameScrollRequest(scrollDis, '', isContinuous);\n    }\n  };\n\n  VScroll.prototype.clickEventHandler = function (event) {\n    this.eleScrolling(this.scrollStep, event.target, false);\n  };\n\n  VScroll.prototype.wheelEventHandler = function (e) {\n    e.preventDefault();\n    this.frameScrollRequest(this.scrollStep, e.deltaY > 0 ? 'add' : '', false);\n  };\n\n  VScroll.prototype.swipeHandler = function (e) {\n    var swipeElement = this.scrollEle;\n    var distance;\n\n    if (e.velocity <= 1) {\n      distance = e.distanceY / (e.velocity * 10);\n    } else {\n      distance = e.distanceY / e.velocity;\n    }\n\n    var start = 0.5;\n\n    var animate = function () {\n      var step = Math.sin(start);\n\n      if (step <= 0) {\n        window.cancelAnimationFrame(step);\n      } else {\n        if (e.swipeDirection === 'Up') {\n          swipeElement.scrollTop += distance * step;\n        } else if (e.swipeDirection === 'Down') {\n          swipeElement.scrollTop -= distance * step;\n        }\n\n        start -= 0.02;\n        window.requestAnimationFrame(animate);\n      }\n    };\n\n    animate();\n  };\n\n  VScroll.prototype.scrollUpdating = function (scrollVal, action) {\n    if (action === 'add') {\n      this.scrollEle.scrollTop += scrollVal;\n    } else {\n      this.scrollEle.scrollTop -= scrollVal;\n    }\n  };\n\n  VScroll.prototype.frameScrollRequest = function (scrollValue, action, isContinuous) {\n    var _this = this;\n\n    var step = 10;\n\n    if (isContinuous) {\n      this.scrollUpdating(scrollValue, action);\n      return;\n    }\n\n    if (!this.customStep) {\n      [].slice.call(selectAll('.' + CLS_OVERLAY$1, this.element)).forEach(function (el) {\n        scrollValue -= el.offsetHeight;\n      });\n    }\n\n    var animate = function () {\n      if (scrollValue < step) {\n        window.cancelAnimationFrame(step);\n      } else {\n        _this.scrollUpdating(step, action);\n\n        scrollValue -= step;\n        window.requestAnimationFrame(animate);\n      }\n    };\n\n    animate();\n  };\n\n  VScroll.prototype.touchHandler = function (e) {\n    var el = this.scrollEle;\n    var distance = e.distanceY;\n\n    if (e.scrollDirection === 'Up') {\n      el.scrollTop = el.scrollTop + distance;\n    } else if (e.scrollDirection === 'Down') {\n      el.scrollTop = el.scrollTop - distance;\n    }\n  };\n\n  VScroll.prototype.arrowDisabling = function (addDisableCls, removeDisableCls) {\n    if (this.isDevice) {\n      var arrowEle = isNullOrUndefined(addDisableCls) ? removeDisableCls : addDisableCls;\n      var arrowIcon = arrowEle.querySelector('.' + CLS_NAVARROW$1);\n\n      if (isNullOrUndefined(addDisableCls)) {\n        classList(arrowIcon, [CLS_NAVDOWNARROW], [CLS_NAVUPARROW]);\n      } else {\n        classList(arrowIcon, [CLS_NAVUPARROW], [CLS_NAVDOWNARROW]);\n      }\n    } else {\n      addDisableCls.classList.add(CLS_DISABLE$1);\n      addDisableCls.setAttribute('aria-disabled', 'true');\n      addDisableCls.removeAttribute('tabindex');\n      removeDisableCls.classList.remove(CLS_DISABLE$1);\n      removeDisableCls.setAttribute('aria-disabled', 'false');\n      removeDisableCls.setAttribute('tabindex', '0');\n    }\n\n    this.repeatScroll();\n  };\n\n  VScroll.prototype.scrollEventHandler = function (e) {\n    var target = e.target;\n    var height = target.offsetHeight;\n    var navUpEle = this.element.querySelector('.' + CLS_VSCROLLNAVUP);\n    var navDownEle = this.element.querySelector('.' + CLS_VSCROLLNAVDOWN);\n    var upOverlay = this.element.querySelector('.' + CLS_UPOVERLAY);\n    var downOverlay = this.element.querySelector('.' + CLS_DOWNOVERLAY);\n    var scrollTop = target.scrollTop;\n\n    if (scrollTop <= 0) {\n      scrollTop = -scrollTop;\n    }\n\n    if (this.isDevice) {\n      if (scrollTop < OVERLAY_MAXWID$1) {\n        upOverlay.style.height = scrollTop + 'px';\n      } else {\n        upOverlay.style.height = '40px';\n      }\n\n      if (target.scrollHeight - Math.ceil(height + scrollTop) < OVERLAY_MAXWID$1) {\n        downOverlay.style.height = target.scrollHeight - Math.ceil(height + scrollTop) + 'px';\n      } else {\n        downOverlay.style.height = '40px';\n      }\n    }\n\n    if (scrollTop === 0) {\n      this.arrowDisabling(navUpEle, navDownEle);\n    } else if (Math.ceil(height + scrollTop + .1) >= target.scrollHeight) {\n      this.arrowDisabling(navDownEle, navUpEle);\n    } else {\n      var disEle = this.element.querySelector('.' + CLS_VSCROLLNAV + '.' + CLS_DISABLE$1);\n\n      if (disEle) {\n        disEle.classList.remove(CLS_DISABLE$1);\n        disEle.setAttribute('aria-disabled', 'false');\n        disEle.setAttribute('tabindex', '0');\n      }\n    }\n  };\n  /**\r\n   * Gets called when the model property changes.The data that describes the old and new values of property that changed.\r\n   *\r\n   * @param  {VScrollModel} newProp - It contains the new value of data.\r\n   * @param  {VScrollModel} oldProp - It contains the old value of data.\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  VScroll.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'scrollStep':\n          this.setScrollState();\n          break;\n\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            this.element.classList.add(CLS_RTL$1);\n          } else {\n            this.element.classList.remove(CLS_RTL$1);\n          }\n\n          break;\n      }\n    }\n  };\n\n  __decorate$1([Property(null)], VScroll.prototype, \"scrollStep\", void 0);\n\n  VScroll = __decorate$1([NotifyPropertyChanges], VScroll);\n  return VScroll;\n}(Component);\n/**\r\n * Used to add scroll in menu.\r\n *\r\n * @param {createElementType} createElement - Specifies the create element model\r\n * @param {HTMLElement} container - Specifies the element container\r\n * @param {HTMLElement} content - Specifies the content element\r\n * @param {string} scrollType - Specifies the scroll type\r\n * @param {boolean} enableRtl - Specifies the enable RTL property\r\n * @param {boolean} offset - Specifies the offset value\r\n * @returns {HTMLElement} - Element\r\n * @hidden\r\n */\n\n\nfunction addScrolling(createElement$$1, container, content, scrollType, enableRtl, offset) {\n  var containerOffset;\n  var contentOffset;\n  var parentElem = container.parentElement;\n\n  if (scrollType === 'vscroll') {\n    containerOffset = offset || container.getBoundingClientRect().height;\n    contentOffset = content.getBoundingClientRect().height;\n  } else {\n    containerOffset = container.getBoundingClientRect().width;\n    contentOffset = content.getBoundingClientRect().width;\n  }\n\n  if (containerOffset < contentOffset) {\n    return createScrollbar(createElement$$1, container, content, scrollType, enableRtl, offset);\n  } else if (parentElem) {\n    var width = parentElem.getBoundingClientRect().width;\n\n    if (width < containerOffset && scrollType === 'hscroll') {\n      contentOffset = width;\n      container.style.maxWidth = width + 'px';\n      return createScrollbar(createElement$$1, container, content, scrollType, enableRtl, offset);\n    }\n\n    return content;\n  } else {\n    return content;\n  }\n}\n/**\r\n * Used to create scroll bar in menu.\r\n *\r\n * @param {createElementType} createElement - Specifies the create element model\r\n * @param {HTMLElement} container - Specifies the element container\r\n * @param {HTMLElement} content - Specifies the content element\r\n * @param {string} scrollType - Specifies the scroll type\r\n * @param {boolean} enableRtl - Specifies the enable RTL property\r\n * @param {boolean} offset - Specifies the offset value\r\n * @returns {HTMLElement} - Element\r\n * @hidden\r\n */\n\n\nfunction createScrollbar(createElement$$1, container, content, scrollType, enableRtl, offset) {\n  var scrollEle = createElement$$1('div', {\n    className: 'e-menu-' + scrollType\n  });\n  container.appendChild(scrollEle);\n  scrollEle.appendChild(content);\n\n  if (offset) {\n    scrollEle.style.overflow = 'hidden';\n    scrollEle.style.height = offset + 'px';\n  } else {\n    scrollEle.style.maxHeight = container.style.maxHeight;\n    container.style.overflow = 'hidden';\n  }\n\n  var scrollObj;\n\n  if (scrollType === 'vscroll') {\n    scrollObj = new VScroll({\n      enableRtl: enableRtl\n    }, scrollEle);\n    scrollObj.scrollStep = select('.e-' + scrollType + '-bar', container).offsetHeight / 2;\n  } else {\n    scrollObj = new HScroll({\n      enableRtl: enableRtl\n    }, scrollEle);\n    scrollObj.scrollStep = select('.e-' + scrollType + '-bar', container).offsetWidth;\n  }\n\n  return scrollEle;\n}\n/**\r\n * Used to destroy the scroll option.\r\n *\r\n * @param {VScroll | HScroll} scrollObj - Specifies the scroller object\r\n * @param {Element} element - Specifies the element\r\n * @param {HTMLElement} skipEle - Specifies the skip  element\r\n * @returns {void}\r\n * @hidden\r\n */\n\n\nfunction destroyScroll(scrollObj, element, skipEle) {\n  if (scrollObj) {\n    var menu = select('.e-menu-parent', element);\n\n    if (menu) {\n      if (!skipEle || skipEle === menu) {\n        scrollObj.destroy();\n        element.parentElement.appendChild(menu);\n        detach(element);\n      }\n    } else {\n      scrollObj.destroy();\n      detach(element);\n    }\n  }\n}\n\nvar __extends$2 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar ENTER = 'enter';\nvar ESCAPE = 'escape';\nvar FOCUSED = 'e-focused';\nvar HEADER = 'e-menu-header';\nvar SELECTED = 'e-selected';\nvar SEPARATOR = 'e-separator';\nvar UPARROW = 'uparrow';\nvar DOWNARROW = 'downarrow';\nvar LEFTARROW = 'leftarrow';\nvar RIGHTARROW = 'rightarrow';\nvar HOME = 'home';\nvar END = 'end';\nvar TAB = 'tab';\nvar CARET = 'e-caret';\nvar ITEM = 'e-menu-item';\nvar DISABLED = 'e-disabled';\nvar HIDE = 'e-menu-hide';\nvar ICONS = 'e-icons';\nvar RTL = 'e-rtl';\nvar POPUP = 'e-menu-popup';\nvar TEMPLATE_PROPERTY = 'Template';\n/**\r\n * Configures the field options of the Menu.\r\n */\n\nvar FieldSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$2(FieldSettings, _super);\n\n  function FieldSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$2([Property('id')], FieldSettings.prototype, \"itemId\", void 0);\n\n  __decorate$2([Property('parentId')], FieldSettings.prototype, \"parentId\", void 0);\n\n  __decorate$2([Property('text')], FieldSettings.prototype, \"text\", void 0);\n\n  __decorate$2([Property('iconCss')], FieldSettings.prototype, \"iconCss\", void 0);\n\n  __decorate$2([Property('url')], FieldSettings.prototype, \"url\", void 0);\n\n  __decorate$2([Property('separator')], FieldSettings.prototype, \"separator\", void 0);\n\n  __decorate$2([Property('items')], FieldSettings.prototype, \"children\", void 0);\n\n  return FieldSettings;\n}(ChildProperty);\n/**\r\n * Specifies menu items.\r\n */\n\n\nvar MenuItem =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$2(MenuItem, _super);\n\n  function MenuItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$2([Property(null)], MenuItem.prototype, \"iconCss\", void 0);\n\n  __decorate$2([Property('')], MenuItem.prototype, \"id\", void 0);\n\n  __decorate$2([Property(false)], MenuItem.prototype, \"separator\", void 0);\n\n  __decorate$2([Collection([], MenuItem)], MenuItem.prototype, \"items\", void 0);\n\n  __decorate$2([Property('')], MenuItem.prototype, \"text\", void 0);\n\n  __decorate$2([Property('')], MenuItem.prototype, \"url\", void 0);\n\n  return MenuItem;\n}(ChildProperty);\n/**\r\n * Animation configuration settings.\r\n */\n\n\nvar MenuAnimationSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$2(MenuAnimationSettings, _super);\n\n  function MenuAnimationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$2([Property('SlideDown')], MenuAnimationSettings.prototype, \"effect\", void 0);\n\n  __decorate$2([Property(400)], MenuAnimationSettings.prototype, \"duration\", void 0);\n\n  __decorate$2([Property('ease')], MenuAnimationSettings.prototype, \"easing\", void 0);\n\n  return MenuAnimationSettings;\n}(ChildProperty);\n/**\r\n * Base class for Menu and ContextMenu components.\r\n *\r\n *  @private\r\n */\n\n\nvar MenuBase =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$2(MenuBase, _super);\n  /**\r\n   * Constructor for creating the widget.\r\n   *\r\n   * @private\r\n   * @param {MenuBaseModel} options - Specifies the menu base model\r\n   * @param {string | HTMLUListElement} element - Specifies the element\r\n   */\n\n\n  function MenuBase(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.navIdx = [];\n    _this.animation = new Animation({});\n    _this.isTapHold = false;\n    _this.tempItem = [];\n    _this.showSubMenuOn = 'Auto';\n    return _this;\n  }\n  /**\r\n   * Initialized third party configuration settings.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  MenuBase.prototype.preRender = function () {\n    if (!this.isMenu) {\n      var ul = void 0;\n\n      if (this.element.tagName === 'EJS-CONTEXTMENU') {\n        ul = this.createElement('ul', {\n          id: getUniqueID(this.getModuleName()),\n          className: 'e-control e-lib e-' + this.getModuleName()\n        });\n        var ejInst = getValue('ej2_instances', this.element);\n        removeClass([this.element], ['e-control', 'e-lib', 'e-' + this.getModuleName()]);\n        this.clonedElement = this.element;\n        this.element = ul;\n        setValue('ej2_instances', ejInst, this.element);\n      } else {\n        ul = this.createElement('ul', {\n          id: getUniqueID(this.getModuleName())\n        });\n        append([].slice.call(this.element.cloneNode(true).children), ul);\n        var refEle = this.element.nextElementSibling;\n\n        if (refEle) {\n          this.element.parentElement.insertBefore(ul, refEle);\n        } else {\n          this.element.parentElement.appendChild(ul);\n        }\n\n        this.clonedElement = ul;\n      }\n\n      this.clonedElement.style.display = 'none';\n    }\n\n    if (this.element.tagName === 'EJS-MENU') {\n      var ele = this.element;\n      var ejInstance = getValue('ej2_instances', ele);\n      var ul = this.createElement('ul');\n      var wrapper = this.createElement('EJS-MENU', {\n        className: 'e-' + this.getModuleName() + '-wrapper'\n      });\n\n      for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {\n        ul.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);\n      }\n\n      ele.parentNode.insertBefore(wrapper, ele);\n      detach(ele);\n      ele = ul;\n      wrapper.appendChild(ele);\n      setValue('ej2_instances', ejInstance, ele);\n      this.clonedElement = wrapper;\n      this.element = ele;\n\n      if (!this.element.id) {\n        this.element.id = getUniqueID(this.getModuleName());\n      }\n    }\n  };\n  /**\r\n   * Initialize the control rendering.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  MenuBase.prototype.render = function () {\n    var _this = this;\n\n    this.initialize();\n    this.renderItems();\n    this.wireEvents();\n    this.renderComplete();\n    var wrapper = this.getWrapper(); // eslint-disable-next-line\n\n    if (this.template && this.enableScrolling && (this.isReact || this.isAngular)) {\n      requestAnimationFrame(function () {\n        addScrolling(_this.createElement, wrapper, _this.element, 'hscroll', _this.enableRtl);\n      });\n    }\n  };\n\n  MenuBase.prototype.initialize = function () {\n    var wrapper = this.getWrapper();\n\n    if (!wrapper) {\n      wrapper = this.createElement('div', {\n        className: 'e-' + this.getModuleName() + '-wrapper'\n      });\n\n      if (this.isMenu) {\n        this.element.parentElement.insertBefore(wrapper, this.element);\n      } else {\n        document.body.appendChild(wrapper);\n      }\n    }\n\n    if (this.cssClass) {\n      addClass([wrapper], this.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n    }\n\n    if (this.enableRtl) {\n      wrapper.classList.add(RTL);\n    }\n\n    wrapper.appendChild(this.element);\n\n    if (this.isMenu && this.hamburgerMode) {\n      if (!this.target) {\n        this.createHeaderContainer(wrapper);\n      }\n    }\n\n    this.defaultOption = this.showItemOnClick;\n  };\n\n  MenuBase.prototype.renderItems = function () {\n    if (!this.items.length) {\n      var items = ListBase.createJsonFromElement(this.element, {\n        fields: {\n          child: 'items'\n        }\n      });\n      this.setProperties({\n        items: items\n      }, true);\n\n      if (isBlazor() && !this.isMenu) {\n        this.element = this.removeChildElement(this.element);\n      } else {\n        this.element.innerHTML = '';\n      }\n    }\n\n    var ul = this.createItems(this.items);\n    append(Array.prototype.slice.call(ul.children), this.element);\n    this.element.classList.add('e-menu-parent');\n\n    if (this.isMenu) {\n      if (!this.hamburgerMode && this.element.classList.contains('e-vertical')) {\n        this.setBlankIconStyle(this.element);\n      }\n\n      if (this.enableScrolling) {\n        var wrapper = this.getWrapper();\n\n        if (this.element.classList.contains('e-vertical')) {\n          addScrolling(this.createElement, wrapper, this.element, 'vscroll', this.enableRtl);\n        } else {\n          addScrolling(this.createElement, wrapper, this.element, 'hscroll', this.enableRtl);\n        }\n      }\n    }\n  };\n\n  MenuBase.prototype.wireEvents = function () {\n    var wrapper = this.getWrapper();\n\n    if (this.target) {\n      var target = void 0;\n      var targetElems = selectAll(this.target);\n\n      for (var i = 0, len = targetElems.length; i < len; i++) {\n        target = targetElems[i];\n\n        if (this.isMenu) {\n          EventHandler.add(target, 'click', this.menuHeaderClickHandler, this);\n        } else {\n          if (Browser.isIos) {\n            new Touch(target, {\n              tapHold: this.touchHandler.bind(this)\n            });\n          } else {\n            EventHandler.add(target, 'contextmenu', this.cmenuHandler, this);\n          }\n        }\n      }\n\n      this.targetElement = target;\n\n      if (!this.isMenu) {\n        EventHandler.add(this.targetElement, 'mousewheel DOMMouseScroll', this.scrollHandler, this);\n\n        for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {\n          var parent_1 = _a[_i];\n          EventHandler.add(parent_1, 'mousewheel DOMMouseScroll', this.scrollHandler, this);\n        }\n      }\n    }\n\n    if (!Browser.isDevice) {\n      this.delegateMoverHandler = this.moverHandler.bind(this);\n      this.delegateMouseDownHandler = this.mouseDownHandler.bind(this);\n      EventHandler.add(this.isMenu ? document : wrapper, 'mouseover', this.delegateMoverHandler, this);\n      EventHandler.add(document, 'mousedown', this.delegateMouseDownHandler, this);\n    }\n\n    this.delegateClickHandler = this.clickHandler.bind(this);\n    EventHandler.add(document, 'click', this.delegateClickHandler, this);\n    this.wireKeyboardEvent(wrapper);\n    this.rippleFn = rippleEffect(wrapper, {\n      selector: '.' + ITEM\n    });\n  };\n\n  MenuBase.prototype.wireKeyboardEvent = function (element) {\n    var keyConfigs = {\n      downarrow: DOWNARROW,\n      uparrow: UPARROW,\n      enter: ENTER,\n      leftarrow: LEFTARROW,\n      rightarrow: RIGHTARROW,\n      escape: ESCAPE\n    };\n\n    if (this.isMenu) {\n      keyConfigs.home = HOME;\n      keyConfigs.end = END;\n      keyConfigs.tab = TAB;\n    }\n\n    new KeyboardEvents(element, {\n      keyAction: this.keyBoardHandler.bind(this),\n      keyConfigs: keyConfigs\n    });\n  };\n\n  MenuBase.prototype.mouseDownHandler = function (e) {\n    if (closest(e.target, '.e-' + this.getModuleName() + '-wrapper') !== this.getWrapper() && !closest(e.target, '.e-' + this.getModuleName() + '-popup')) {\n      this.closeMenu(this.isMenu ? null : this.navIdx.length, e);\n    }\n  };\n\n  MenuBase.prototype.keyHandler = function (e) {\n    if (e.keyCode === 38 || e.keyCode === 40) {\n      if (e.target && (e.target.classList.contains('e-contextmenu') || e.target.classList.contains('e-menu-item'))) {\n        e.preventDefault();\n      }\n    }\n  };\n\n  MenuBase.prototype.keyBoardHandler = function (e) {\n    var actionName = '';\n    var trgt = e.target;\n    var actionNeeded = this.isMenu && !this.hamburgerMode && !this.element.classList.contains('e-vertical') && this.navIdx.length < 1;\n    e.preventDefault();\n\n    if (this.enableScrolling && e.keyCode === 13 && trgt.classList.contains('e-scroll-nav')) {\n      this.removeLIStateByClass([FOCUSED, SELECTED], [closest(trgt, '.e-' + this.getModuleName() + '-wrapper')]);\n    }\n\n    if (actionNeeded) {\n      switch (e.action) {\n        case RIGHTARROW:\n          actionName = RIGHTARROW;\n          e.action = DOWNARROW;\n          break;\n\n        case LEFTARROW:\n          actionName = LEFTARROW;\n          e.action = UPARROW;\n          break;\n\n        case DOWNARROW:\n          actionName = DOWNARROW;\n          e.action = RIGHTARROW;\n          break;\n\n        case UPARROW:\n          actionName = UPARROW;\n          e.action = '';\n          break;\n      }\n    } else if (this.enableRtl) {\n      switch (e.action) {\n        case LEFTARROW:\n          actionNeeded = true;\n          actionName = LEFTARROW;\n          e.action = RIGHTARROW;\n          break;\n\n        case RIGHTARROW:\n          actionNeeded = true;\n          actionName = RIGHTARROW;\n          e.action = LEFTARROW;\n          break;\n      }\n    }\n\n    switch (e.action) {\n      case DOWNARROW:\n      case UPARROW:\n      case END:\n      case HOME:\n      case TAB:\n        this.upDownKeyHandler(e);\n        break;\n\n      case RIGHTARROW:\n        this.rightEnterKeyHandler(e);\n        break;\n\n      case LEFTARROW:\n        this.leftEscKeyHandler(e);\n        break;\n\n      case ENTER:\n        if (this.hamburgerMode && trgt.tagName === 'SPAN' && trgt.classList.contains('e-menu-icon')) {\n          this.menuHeaderClickHandler(e);\n        } else {\n          this.rightEnterKeyHandler(e);\n        }\n\n        break;\n\n      case ESCAPE:\n        this.leftEscKeyHandler(e);\n        break;\n    }\n\n    if (actionNeeded) {\n      e.action = actionName;\n    }\n  };\n\n  MenuBase.prototype.upDownKeyHandler = function (e) {\n    var cul = this.getUlByNavIdx();\n    var defaultIdx = e.action === DOWNARROW || e.action === HOME || e.action === TAB ? 0 : cul.childElementCount - 1;\n    var fliIdx = defaultIdx;\n    var fli = this.getLIByClass(cul, FOCUSED);\n\n    if (fli) {\n      if (e.action !== END && e.action !== HOME) {\n        fliIdx = this.getIdx(cul, fli);\n      }\n\n      fli.classList.remove(FOCUSED);\n\n      if (e.action !== END && e.action !== HOME) {\n        if (e.action === DOWNARROW) {\n          fliIdx++;\n        } else {\n          fliIdx--;\n        }\n\n        if (fliIdx === (e.action === DOWNARROW ? cul.childElementCount : -1)) {\n          fliIdx = defaultIdx;\n        }\n      }\n    }\n\n    var cli = cul.children[fliIdx];\n    fliIdx = this.isValidLI(cli, fliIdx, e.action);\n    cul.children[fliIdx].classList.add(FOCUSED);\n    cul.children[fliIdx].focus();\n  };\n\n  MenuBase.prototype.isValidLI = function (cli, index, action) {\n    var cul = this.getUlByNavIdx();\n    var defaultIdx = action === DOWNARROW || action === HOME || action === TAB ? 0 : cul.childElementCount - 1;\n\n    if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {\n      if (action === DOWNARROW && index === cul.childElementCount - 1) {\n        index = defaultIdx;\n      } else if (action === UPARROW && index === 0) {\n        index = defaultIdx;\n      } else if (action === DOWNARROW || action === RIGHTARROW) {\n        index++;\n      } else {\n        index--;\n      }\n    }\n\n    cli = cul.children[index];\n\n    if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE)) {\n      index = this.isValidLI(cli, index, action);\n    }\n\n    return index;\n  };\n\n  MenuBase.prototype.getUlByNavIdx = function (navIdxLen) {\n    if (navIdxLen === void 0) {\n      navIdxLen = this.navIdx.length;\n    }\n\n    if (this.isMenu) {\n      var popup = [this.getWrapper()].concat([].slice.call(selectAll('.' + POPUP)))[navIdxLen];\n      return isNullOrUndefined(popup) ? null : select('.e-menu-parent', popup);\n    } else {\n      return this.getWrapper().children[navIdxLen];\n    }\n  };\n\n  MenuBase.prototype.rightEnterKeyHandler = function (e) {\n    var eventArgs;\n    var cul = this.getUlByNavIdx();\n    var fli = this.getLIByClass(cul, FOCUSED);\n\n    if (fli) {\n      var fliIdx = this.getIdx(cul, fli);\n      var navIdx = this.navIdx.concat(fliIdx);\n      var item = this.getItem(navIdx);\n\n      if (item.items.length) {\n        this.navIdx.push(fliIdx);\n        this.keyType = 'right';\n        this.action = e.action;\n        this.openMenu(fli, item, -1, -1, e);\n      } else {\n        if (e.action === ENTER) {\n          if (this.isMenu && this.navIdx.length === 0) {\n            this.removeLIStateByClass([SELECTED], [this.getWrapper()]);\n          } else {\n            fli.classList.remove(FOCUSED);\n          }\n\n          fli.classList.add(SELECTED);\n          eventArgs = {\n            element: fli,\n            item: item,\n            event: e\n          };\n          this.trigger('select', eventArgs);\n          this.closeMenu(null, e);\n        }\n      }\n    }\n  };\n\n  MenuBase.prototype.leftEscKeyHandler = function (e) {\n    if (this.navIdx.length) {\n      this.keyType = 'left';\n      this.closeMenu(this.navIdx.length, e);\n    } else {\n      if (e.action === ESCAPE) {\n        this.closeMenu(null, e);\n      }\n    }\n  };\n\n  MenuBase.prototype.scrollHandler = function (e) {\n    this.closeMenu(null, e);\n  };\n\n  MenuBase.prototype.touchHandler = function (e) {\n    this.isTapHold = true;\n    this.cmenuHandler(e.originalEvent);\n  };\n\n  MenuBase.prototype.cmenuHandler = function (e) {\n    e.preventDefault();\n    this.currentTarget = e.target;\n    this.isCMenu = true;\n    this.pageX = e.changedTouches ? e.changedTouches[0].pageX + 1 : e.pageX + 1;\n    this.pageY = e.changedTouches ? e.changedTouches[0].pageY + 1 : e.pageY + 1;\n    this.closeMenu(null, e);\n\n    if (this.isCMenu) {\n      if (this.canOpen(e.target)) {\n        this.openMenu(null, null, this.pageY, this.pageX, e);\n      }\n\n      this.isCMenu = false;\n    }\n  }; // eslint:disable-next-line:max-func-body-length\n\n\n  MenuBase.prototype.closeMenu = function (ulIndex, e, isIterated) {\n    var _this = this;\n\n    if (ulIndex === void 0) {\n      ulIndex = 0;\n    }\n\n    if (e === void 0) {\n      e = null;\n    }\n\n    if (this.isMenuVisible()) {\n      var sli = void 0;\n      var item_1;\n      var wrapper_1 = this.getWrapper();\n      var beforeCloseArgs = void 0;\n      var items_1;\n      var popups = this.getPopups();\n      var isClose = false;\n      var cnt = this.isMenu ? popups.length + 1 : wrapper_1.childElementCount;\n      var ul_1 = this.isMenu && cnt !== 1 ? select('.e-ul', popups[cnt - 2]) : selectAll('.e-menu-parent', wrapper_1)[cnt - 1];\n\n      if (this.isMenu && ul_1.classList.contains('e-menu')) {\n        sli = this.getLIByClass(ul_1, SELECTED);\n\n        if (sli) {\n          sli.classList.remove(SELECTED);\n        }\n\n        isClose = true;\n      }\n\n      if (!isClose) {\n        var liElem_1 = e && e.target && this.getLI(e.target);\n\n        if (liElem_1) {\n          this.cli = liElem_1;\n        } else {\n          this.cli = ul_1.children[0];\n        }\n\n        item_1 = this.navIdx.length ? this.getItem(this.navIdx) : null;\n        items_1 = item_1 ? item_1.items : this.items;\n        beforeCloseArgs = {\n          element: ul_1,\n          parentItem: item_1,\n          items: items_1,\n          event: e,\n          cancel: false,\n          isFocused: true\n        };\n        this.trigger('beforeClose', beforeCloseArgs, function (observedCloseArgs) {\n          var popupEle;\n          var closeArgs;\n          var popupId = '';\n          var popupObj;\n          var isOpen = !observedCloseArgs.cancel;\n\n          if (isOpen || _this.isCMenu) {\n            if (_this.isMenu) {\n              popupEle = closest(ul_1, '.' + POPUP);\n\n              if (_this.hamburgerMode) {\n                popupEle.parentElement.style.minHeight = '';\n                closest(ul_1, '.e-menu-item').setAttribute('aria-expanded', 'false');\n              }\n\n              _this.unWireKeyboardEvent(popupEle);\n\n              destroyScroll(getInstance(popupEle.children[0], VScroll), popupEle.children[0]);\n              popupObj = getInstance(popupEle, Popup);\n              popupObj.hide();\n              popupId = popupEle.id;\n              popupObj.destroy();\n              detach(popupEle);\n            } else {\n              _this.toggleAnimation(ul_1, false);\n            }\n\n            closeArgs = {\n              element: ul_1,\n              parentItem: item_1,\n              items: items_1\n            };\n\n            _this.trigger('onClose', closeArgs);\n\n            _this.navIdx.pop();\n\n            if (!_this.isMenu) {\n              EventHandler.remove(ul_1, 'keydown', _this.keyHandler);\n              _this.keyType = '';\n            }\n          }\n\n          _this.updateReactTemplate();\n\n          var trgtliId;\n          var closedLi;\n          var trgtLi;\n\n          var trgtpopUp = _this.getWrapper() && _this.getUlByNavIdx();\n\n          if (_this.isCMenu) {\n            if (_this.canOpen(e.target)) {\n              _this.openMenu(null, null, _this.pageY, _this.pageX, e);\n            }\n\n            _this.isCMenu = false;\n          }\n\n          if (_this.isMenu && trgtpopUp && popupId.length) {\n            // eslint-disable-next-line\n            trgtliId = new RegExp('(.*)-ej2menu-' + _this.element.id + '-popup').exec(popupId)[1];\n            closedLi = trgtpopUp.querySelector('[id=\"' + trgtliId + '\"]');\n            trgtLi = liElem_1 && trgtpopUp.querySelector('[id=\"' + liElem_1.id + '\"]');\n          } else if (trgtpopUp) {\n            closedLi = trgtpopUp.querySelector('.e-menu-item.e-selected');\n            trgtLi = liElem_1 && trgtpopUp.querySelector('[id=\"' + liElem_1.id + '\"]');\n          }\n\n          var submenus = liElem_1 && liElem_1.querySelectorAll('.e-menu-item');\n\n          if (isOpen && _this.hamburgerMode && ulIndex && !submenus.length) {\n            _this.afterCloseMenu(e);\n          } else if (isOpen && !_this.hamburgerMode && closedLi && !trgtLi && _this.keyType !== 'left' && (_this.navIdx.length || !_this.isMenu && _this.navIdx.length === 0)) {\n            var ele = e && e.target.classList.contains('e-vscroll') ? closest(e.target, '.e-menu-wrapper') : null;\n\n            if (ele) {\n              ele = ele.querySelector('.e-menu-item');\n\n              if (_this.showItemOnClick || ele && _this.getIndex(ele.id, true).length <= _this.navIdx.length) {\n                _this.closeMenu(_this.navIdx[_this.navIdx.length - 1], e, true);\n              }\n            } else {\n              _this.closeMenu(_this.navIdx[_this.navIdx.length - 1], e);\n            }\n          } else if (isOpen && !isIterated && !ulIndex && (_this.hamburgerMode && _this.navIdx.length || _this.navIdx.length === 1 && liElem_1 && trgtpopUp !== liElem_1.parentElement)) {\n            _this.closeMenu(null, e);\n          } else if (isOpen && isNullOrUndefined(ulIndex) && _this.navIdx.length) {\n            _this.closeMenu(null, e);\n          } else if (isOpen && !_this.isMenu && !ulIndex && _this.navIdx.length === 0 && !_this.isMenusClosed) {\n            _this.isMenusClosed = true;\n\n            _this.closeMenu(0, e);\n          } else if (isOpen && _this.isMenu && e && e.target && _this.navIdx.length !== 0 && closest(e.target, '.e-menu-parent.e-control')) {\n            _this.closeMenu(0, e);\n          } else if (isOpen && !_this.isMenu && selectAll('.e-menu-parent', wrapper_1)[ulIndex - 1] && e.which === 3) {\n            _this.closeMenu(null, e);\n          } else {\n            if (isOpen && (_this.keyType === 'right' || _this.keyType === 'click')) {\n              _this.afterCloseMenu(e);\n            } else {\n              var cul = _this.getUlByNavIdx();\n\n              var sli_1 = _this.getLIByClass(cul, SELECTED);\n\n              if (sli_1) {\n                sli_1.setAttribute('aria-expanded', 'false');\n                sli_1.classList.remove(SELECTED);\n\n                if (observedCloseArgs.isFocused && liElem_1 || _this.keyType === 'left') {\n                  sli_1.classList.add(FOCUSED);\n\n                  if (!e.target || !e.target.classList.contains('e-edit-template')) {\n                    sli_1.focus();\n                  }\n                }\n              }\n\n              if (!isOpen && _this.hamburgerMode && liElem_1 && liElem_1.getAttribute('aria-expanded') === 'false' && liElem_1.getAttribute('aria-haspopup') === 'true') {\n                if (closest(liElem_1, '.e-menu-parent.e-control')) {\n                  _this.navIdx = [];\n                } else {\n                  _this.navIdx.pop();\n                }\n\n                _this.navIdx.push(_this.cliIdx);\n\n                var item_2 = _this.getItem(_this.navIdx);\n\n                liElem_1.setAttribute('aria-expanded', 'true');\n\n                _this.openMenu(liElem_1, item_2, -1, -1, e);\n              }\n            }\n\n            if (_this.navIdx.length < 1) {\n              if (_this.showSubMenuOn === 'Hover' || _this.showSubMenuOn === 'Click') {\n                _this.showItemOnClick = _this.defaultOption;\n                _this.showSubMenuOn = 'Auto';\n              }\n            }\n          }\n\n          _this.removeStateWrapper();\n        });\n      }\n    }\n  };\n\n  MenuBase.prototype.updateReactTemplate = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (this.isReact && this.template && this.navIdx.length === 0) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var portals = this.portals.splice(0, this.items.length);\n      this.clearTemplate(['template']); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      this.portals = portals;\n      this.renderReactTemplates();\n    }\n  };\n\n  MenuBase.prototype.getMenuItemModel = function (item, level) {\n    if (isNullOrUndefined(item)) {\n      return null;\n    }\n\n    if (isNullOrUndefined(level)) {\n      level = 0;\n    }\n\n    var fields = this.getFields(level);\n    return {\n      text: item[fields.text],\n      id: item[fields.id],\n      items: item[fields.child],\n      separator: item[fields.separator],\n      iconCss: item[fields.iconCss],\n      url: item[fields.url]\n    };\n  };\n\n  MenuBase.prototype.getPopups = function () {\n    var _this = this;\n\n    var popups = [];\n    [].slice.call(document.querySelectorAll('.' + POPUP)).forEach(function (elem) {\n      if (!isNullOrUndefined(elem.querySelector('.' + ITEM)) && _this.getIndex(elem.querySelector('.' + ITEM).id, true).length) {\n        popups.push(elem);\n      }\n    });\n    return popups;\n  };\n\n  MenuBase.prototype.isMenuVisible = function () {\n    return this.navIdx.length > 0 || this.element.classList.contains('e-contextmenu') && isVisible(this.element).valueOf();\n  };\n\n  MenuBase.prototype.canOpen = function (target) {\n    var canOpen = true;\n\n    if (this.filter) {\n      canOpen = false;\n      var filter = this.filter.split(' ');\n\n      for (var i = 0, len = filter.length; i < len; i++) {\n        if (closest(target, '.' + filter[i])) {\n          canOpen = true;\n          break;\n        }\n      }\n    }\n\n    return canOpen;\n  };\n\n  MenuBase.prototype.openMenu = function (li, item, top, left, e, target) {\n    var _this = this;\n\n    if (top === void 0) {\n      top = 0;\n    }\n\n    if (left === void 0) {\n      left = 0;\n    }\n\n    if (e === void 0) {\n      e = null;\n    }\n\n    if (target === void 0) {\n      target = this.targetElement;\n    }\n\n    var wrapper = this.getWrapper();\n    this.lItem = li;\n    var elemId = this.element.id !== '' ? this.element.id : 'menu';\n    this.isMenusClosed = false;\n\n    if (isNullOrUndefined(top)) {\n      top = -1;\n    }\n\n    if (isNullOrUndefined(left)) {\n      left = -1;\n    }\n\n    if (li) {\n      this.uList = this.createItems(item[this.getField('children', this.navIdx.length - 1)]);\n\n      if (!this.isMenu && Browser.isDevice) {\n        wrapper.lastChild.style.display = 'none';\n        var data = {\n          text: item[this.getField('text')].toString(),\n          iconCss: ICONS + ' e-previous'\n        };\n        var hdata = new MenuItem(this.items[0], 'items', data, true);\n        var hli = this.createItems([hdata]).children[0];\n        hli.classList.add(HEADER);\n        this.uList.insertBefore(hli, this.uList.children[0]);\n      }\n\n      if (this.isMenu) {\n        this.popupWrapper = this.createElement('div', {\n          className: 'e-' + this.getModuleName() + '-wrapper ' + POPUP,\n          id: li.id + '-ej2menu-' + elemId + '-popup'\n        });\n\n        if (this.hamburgerMode) {\n          top = li.offsetHeight;\n          li.appendChild(this.popupWrapper);\n        } else {\n          document.body.appendChild(this.popupWrapper);\n        }\n\n        this.isNestedOrVertical = this.element.classList.contains('e-vertical') || this.navIdx.length !== 1;\n        this.popupObj = this.generatePopup(this.popupWrapper, this.uList, li, this.isNestedOrVertical);\n\n        if (this.template) {\n          this.renderReactTemplates();\n        }\n\n        if (this.hamburgerMode) {\n          this.calculateIndentSize(this.uList, li);\n        } else {\n          if (this.cssClass) {\n            addClass([this.popupWrapper], this.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n          }\n\n          this.popupObj.hide();\n        }\n\n        if (!this.hamburgerMode && !this.showItemOnClick && this.hoverDelay) {\n          window.clearInterval(this.timer);\n          this.timer = window.setTimeout(function () {\n            _this.triggerBeforeOpen(li, _this.uList, item, e, 0, 0, 'menu');\n          }, this.hoverDelay);\n        } else {\n          this.triggerBeforeOpen(li, this.uList, item, e, 0, 0, 'menu');\n        }\n      } else {\n        this.uList.style.zIndex = this.element.style.zIndex;\n        wrapper.appendChild(this.uList);\n\n        if (!this.showItemOnClick && this.hoverDelay) {\n          window.clearInterval(this.timer);\n          this.timer = window.setTimeout(function () {\n            _this.triggerBeforeOpen(li, _this.uList, item, e, top, left, 'none');\n          }, this.hoverDelay);\n        } else {\n          this.triggerBeforeOpen(li, this.uList, item, e, top, left, 'none');\n        }\n      }\n    } else {\n      this.uList = this.element;\n      this.uList.style.zIndex = getZindexPartial(target ? target : this.element).toString();\n      this.triggerBeforeOpen(li, this.uList, item, e, top, left, 'none');\n    }\n  };\n\n  MenuBase.prototype.calculateIndentSize = function (ul, li) {\n    var liStyle = getComputedStyle(li);\n    var liIndent = parseInt(liStyle.textIndent, 10);\n\n    if (this.navIdx.length < 2 && !li.classList.contains('e-blankicon')) {\n      liIndent *= 2;\n    } else {\n      liIndent += liIndent / 4;\n    }\n\n    ul.style.textIndent = liIndent + 'px';\n    var blankIconElem = ul.querySelectorAll('.e-blankicon');\n\n    if (blankIconElem && blankIconElem.length) {\n      var menuIconElem = ul.querySelector('.e-menu-icon');\n      var menuIconElemStyle = getComputedStyle(menuIconElem);\n      var blankIconIndent = parseInt(menuIconElemStyle.marginRight, 10) + menuIconElem.offsetWidth + liIndent;\n\n      for (var i = 0; i < blankIconElem.length; i++) {\n        blankIconElem[i].style.textIndent = blankIconIndent + 'px';\n      }\n    }\n  };\n\n  MenuBase.prototype.generatePopup = function (popupWrapper, ul, li, isNestedOrVertical) {\n    var _this = this;\n\n    var popupObj = new Popup(popupWrapper, {\n      actionOnScroll: this.hamburgerMode ? 'none' : 'reposition',\n      relateTo: li,\n      collision: this.hamburgerMode ? {\n        X: 'none',\n        Y: 'none'\n      } : {\n        X: isNestedOrVertical || this.enableRtl ? 'none' : 'flip',\n        Y: 'fit'\n      },\n      position: isNestedOrVertical && !this.hamburgerMode ? {\n        X: 'right',\n        Y: 'top'\n      } : {\n        X: 'left',\n        Y: 'bottom'\n      },\n      targetType: 'relative',\n      enableRtl: this.enableRtl,\n      content: ul,\n      open: function () {\n        var scrollEle = select('.e-menu-vscroll', popupObj.element);\n\n        if (scrollEle) {\n          scrollEle.style.height = 'inherit';\n          scrollEle.style.maxHeight = '';\n        }\n\n        var ul = select('.e-ul', popupObj.element);\n        popupObj.element.style.maxHeight = '';\n        ul.focus();\n\n        _this.triggerOpen(ul);\n      }\n    });\n    return popupObj;\n  };\n\n  MenuBase.prototype.createHeaderContainer = function (wrapper) {\n    wrapper = wrapper || this.getWrapper();\n    var spanElem = this.createElement('span', {\n      className: 'e-' + this.getModuleName() + '-header'\n    });\n    var tempTitle = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(this.title) : this.title;\n    var spanTitle = this.createElement('span', {\n      className: 'e-' + this.getModuleName() + '-title',\n      innerHTML: tempTitle\n    });\n    var spanIcon = this.createElement('span', {\n      className: 'e-icons e-' + this.getModuleName() + '-icon',\n      attrs: {\n        'tabindex': '0'\n      }\n    });\n    spanElem.appendChild(spanTitle);\n    spanElem.appendChild(spanIcon);\n    wrapper.insertBefore(spanElem, this.element);\n  };\n\n  MenuBase.prototype.openHamburgerMenu = function (e) {\n    if (this.hamburgerMode) {\n      this.triggerBeforeOpen(null, this.element, null, e, 0, 0, 'hamburger');\n    }\n  };\n\n  MenuBase.prototype.closeHamburgerMenu = function (e) {\n    var _this = this;\n\n    var beforeCloseArgs = {\n      element: this.element,\n      parentItem: null,\n      event: e,\n      items: this.items,\n      cancel: false\n    };\n    this.trigger('beforeClose', beforeCloseArgs, function (observedHamburgerCloseArgs) {\n      if (!observedHamburgerCloseArgs.cancel) {\n        _this.closeMenu(null, e);\n\n        _this.element.classList.add('e-hide-menu');\n\n        _this.trigger('onClose', {\n          element: _this.element,\n          parentItem: null,\n          items: _this.items\n        });\n      }\n    });\n  };\n\n  MenuBase.prototype.callFit = function (element, x, y, top, left) {\n    return fit(element, null, {\n      X: x,\n      Y: y\n    }, {\n      top: top,\n      left: left\n    });\n  };\n\n  MenuBase.prototype.triggerBeforeOpen = function (li, ul, item, e, top, left, type) {\n    var _this = this;\n\n    var items = li ? item[this.getField('children', this.navIdx.length - 1)] : this.items;\n    var eventArgs = {\n      element: ul,\n      items: items,\n      parentItem: item,\n      event: e,\n      cancel: false,\n      top: top,\n      left: left,\n      showSubMenuOn: 'Auto'\n    };\n    var menuType = type;\n    this.trigger('beforeOpen', eventArgs, function (observedOpenArgs) {\n      switch (menuType) {\n        case 'menu':\n          if (!_this.hamburgerMode) {\n            if (observedOpenArgs.showSubMenuOn !== 'Auto') {\n              _this.showItemOnClick = !_this.defaultOption;\n              _this.showSubMenuOn = observedOpenArgs.showSubMenuOn;\n            }\n\n            _this.top = observedOpenArgs.top;\n            _this.left = observedOpenArgs.left;\n          }\n\n          _this.popupWrapper.style.display = 'block';\n\n          if (!_this.hamburgerMode) {\n            _this.popupWrapper.style.maxHeight = _this.popupWrapper.getBoundingClientRect().height + 'px';\n\n            if (_this.enableScrolling) {\n              addScrolling(_this.createElement, _this.popupWrapper, _this.uList, 'vscroll', _this.enableRtl);\n            }\n\n            _this.checkScrollOffset(e);\n          }\n\n          if (!_this.hamburgerMode && !_this.left && !_this.top) {\n            _this.popupObj.refreshPosition(_this.lItem, true);\n\n            _this.left = parseInt(_this.popupWrapper.style.left, 10);\n            _this.top = parseInt(_this.popupWrapper.style.top, 10);\n\n            if (_this.enableRtl) {\n              _this.left = _this.isNestedOrVertical ? _this.left - _this.popupWrapper.offsetWidth - _this.lItem.parentElement.offsetWidth + 2 : _this.left - _this.popupWrapper.offsetWidth + _this.lItem.offsetWidth;\n            } // eslint-disable-next-line\n\n\n            if (_this.template && (_this.isReact || _this.isAngular)) {\n              requestAnimationFrame(function () {\n                _this.collision();\n\n                _this.popupWrapper.style.display = '';\n              });\n            } else {\n              _this.collision();\n\n              _this.popupWrapper.style.display = '';\n            }\n          } else {\n            _this.popupObj.collision = {\n              X: 'none',\n              Y: 'none'\n            };\n            _this.popupWrapper.style.display = '';\n          }\n\n          break;\n\n        case 'none':\n          _this.top = observedOpenArgs.top;\n          _this.left = observedOpenArgs.left;\n          break;\n\n        case 'hamburger':\n          if (!observedOpenArgs.cancel) {\n            _this.element.classList.remove('e-hide-menu');\n\n            _this.triggerOpen(_this.element);\n          }\n\n          break;\n      }\n\n      if (menuType !== 'hamburger') {\n        if (observedOpenArgs.cancel) {\n          if (_this.isMenu) {\n            _this.popupObj.destroy();\n\n            detach(_this.popupWrapper);\n          } else if (ul.className.indexOf('e-ul') > -1) {\n            detach(ul);\n          }\n\n          _this.navIdx.pop();\n        } else {\n          if (_this.isMenu) {\n            if (_this.hamburgerMode) {\n              _this.popupWrapper.style.top = _this.top + 'px';\n              _this.popupWrapper.style.left = 0 + 'px';\n\n              _this.toggleAnimation(_this.popupWrapper);\n            } else {\n              _this.setBlankIconStyle(_this.popupWrapper);\n\n              _this.wireKeyboardEvent(_this.popupWrapper);\n\n              rippleEffect(_this.popupWrapper, {\n                selector: '.' + ITEM\n              });\n              _this.popupWrapper.style.left = _this.left + 'px';\n              _this.popupWrapper.style.top = _this.top + 'px';\n              var animationOptions = _this.animationSettings.effect !== 'None' ? {\n                name: _this.animationSettings.effect,\n                duration: _this.animationSettings.duration,\n                timingFunction: _this.animationSettings.easing\n              } : null;\n\n              _this.popupObj.show(animationOptions, _this.lItem);\n            }\n          } else {\n            _this.setBlankIconStyle(_this.uList);\n\n            _this.setPosition(_this.lItem, _this.uList, _this.top, _this.left);\n\n            _this.toggleAnimation(_this.uList);\n          }\n        }\n      }\n\n      if (_this.keyType === 'right') {\n        var cul = _this.getUlByNavIdx();\n\n        li.classList.remove(FOCUSED);\n\n        if (_this.isMenu && _this.navIdx.length === 1) {\n          _this.removeLIStateByClass([SELECTED], [_this.getWrapper()]);\n        }\n\n        li.classList.add(SELECTED);\n\n        if (_this.action === ENTER) {\n          var eventArgs_1 = {\n            element: li,\n            item: item,\n            event: e\n          };\n\n          _this.trigger('select', eventArgs_1);\n        }\n\n        li.focus();\n        cul = _this.getUlByNavIdx();\n\n        var index = _this.isValidLI(cul.children[0], 0, _this.action);\n\n        cul.children[index].classList.add(FOCUSED);\n        cul.children[index].focus();\n      }\n    });\n  };\n\n  MenuBase.prototype.collision = function () {\n    var collide;\n    collide = isCollide(this.popupWrapper, null, this.left, this.top);\n\n    if ((this.isNestedOrVertical || this.enableRtl) && (collide.indexOf('right') > -1 || collide.indexOf('left') > -1)) {\n      this.popupObj.collision.X = 'none';\n      var offWidth = closest(this.lItem, '.e-' + this.getModuleName() + '-wrapper').offsetWidth;\n      this.left = this.enableRtl ? calculatePosition(this.lItem, this.isNestedOrVertical ? 'right' : 'left', 'top').left : this.left - this.popupWrapper.offsetWidth - offWidth + 2;\n    }\n\n    collide = isCollide(this.popupWrapper, null, this.left, this.top);\n\n    if (collide.indexOf('left') > -1 || collide.indexOf('right') > -1) {\n      this.left = this.callFit(this.popupWrapper, true, false, this.top, this.left).left;\n    }\n\n    this.popupWrapper.style.left = this.left + 'px';\n  };\n\n  MenuBase.prototype.setBlankIconStyle = function (menu) {\n    var blankIconList = [].slice.call(menu.getElementsByClassName('e-blankicon'));\n\n    if (!blankIconList.length) {\n      return;\n    }\n\n    var iconLi = menu.querySelector('.e-menu-item:not(.e-blankicon):not(.e-separator)');\n\n    if (!iconLi) {\n      return;\n    }\n\n    var icon = iconLi.querySelector('.e-menu-icon');\n\n    if (!icon) {\n      return;\n    }\n\n    var cssProp = this.enableRtl ? {\n      padding: 'paddingRight',\n      margin: 'marginLeft'\n    } : {\n      padding: 'paddingLeft',\n      margin: 'marginRight'\n    };\n    var iconCssProps = getComputedStyle(icon);\n    var iconSize = parseInt(iconCssProps.fontSize, 10);\n\n    if (!!parseInt(iconCssProps.width, 10) && parseInt(iconCssProps.width, 10) > iconSize) {\n      iconSize = parseInt(iconCssProps.width, 10);\n    } // eslint:disable\n\n\n    var size = iconSize + parseInt( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    iconCssProps[cssProp.margin], 10) + parseInt(getComputedStyle(iconLi)[cssProp.padding], 10) + \"px\";\n    blankIconList.forEach(function (li) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      li.style[cssProp.padding] = size;\n    }); // eslint:enable\n  };\n\n  MenuBase.prototype.checkScrollOffset = function (e) {\n    var wrapper = this.getWrapper();\n\n    if (wrapper.children[0].classList.contains('e-menu-hscroll') && this.navIdx.length === 1) {\n      var trgt = isNullOrUndefined(e) ? this.element : closest(e.target, '.' + ITEM);\n      var offsetEle = select('.e-hscroll-bar', wrapper);\n\n      if (offsetEle.scrollLeft > trgt.offsetLeft) {\n        offsetEle.scrollLeft -= offsetEle.scrollLeft - trgt.offsetLeft;\n      }\n\n      var offsetLeft = offsetEle.scrollLeft + offsetEle.offsetWidth;\n      var offsetRight = trgt.offsetLeft + trgt.offsetWidth;\n\n      if (offsetLeft < offsetRight) {\n        offsetEle.scrollLeft += offsetRight - offsetLeft;\n      }\n    }\n  };\n\n  MenuBase.prototype.setPosition = function (li, ul, top, left) {\n    var px = 'px';\n    this.toggleVisiblity(ul);\n\n    if (ul === this.element || left > -1 && top > -1) {\n      var collide = isCollide(ul, null, left, top);\n\n      if (collide.indexOf('right') > -1) {\n        left = left - ul.offsetWidth;\n      }\n\n      if (collide.indexOf('bottom') > -1) {\n        var offset = this.callFit(ul, false, true, top, left);\n        top = offset.top - 20;\n\n        if (top < 0) {\n          var newTop = pageYOffset + document.documentElement.clientHeight - ul.getBoundingClientRect().height;\n\n          if (newTop > -1) {\n            top = newTop;\n          }\n        }\n      }\n\n      collide = isCollide(ul, null, left, top);\n\n      if (collide.indexOf('left') > -1) {\n        var offset = this.callFit(ul, true, false, top, left);\n        left = offset.left;\n      }\n    } else {\n      if (Browser.isDevice) {\n        top = Number(this.element.style.top.replace(px, ''));\n        left = Number(this.element.style.left.replace(px, ''));\n      } else {\n        var x = this.enableRtl ? 'left' : 'right';\n        var offset = calculatePosition(li, x, 'top');\n        top = offset.top;\n        left = offset.left;\n        var collide = isCollide(ul, null, this.enableRtl ? left - ul.offsetWidth : left, top);\n        var xCollision = collide.indexOf('left') > -1 || collide.indexOf('right') > -1;\n\n        if (xCollision) {\n          offset = calculatePosition(li, this.enableRtl ? 'right' : 'left', 'top');\n          left = offset.left;\n        }\n\n        if (this.enableRtl || xCollision) {\n          left = this.enableRtl && xCollision ? left : left - ul.offsetWidth;\n        }\n\n        if (collide.indexOf('bottom') > -1) {\n          offset = this.callFit(ul, false, true, top, left);\n          top = offset.top;\n        }\n      }\n    }\n\n    this.toggleVisiblity(ul, false);\n    ul.style.top = top + px;\n    ul.style.left = left + px;\n  };\n\n  MenuBase.prototype.toggleVisiblity = function (ul, isVisible$$1) {\n    if (isVisible$$1 === void 0) {\n      isVisible$$1 = true;\n    }\n\n    ul.style.visibility = isVisible$$1 ? 'hidden' : '';\n    ul.style.display = isVisible$$1 ? 'block' : 'none';\n  };\n\n  MenuBase.prototype.createItems = function (items) {\n    var _this = this;\n\n    var level = this.navIdx ? this.navIdx.length : 0;\n    var fields = this.getFields(level);\n    var showIcon = this.hasField(items, this.getField('iconCss', level));\n    var listBaseOptions = {\n      showIcon: showIcon,\n      moduleName: 'menu',\n      fields: fields,\n      template: this.template,\n      itemNavigable: true,\n      itemCreating: function (args) {\n        if (!args.curData[args.fields[fields.id]]) {\n          args.curData[args.fields[fields.id]] = getUniqueID('menuitem');\n        }\n\n        if (isNullOrUndefined(args.curData.htmlAttributes)) {\n          args.curData.htmlAttributes = {};\n        }\n\n        Object.assign(args.curData.htmlAttributes, {\n          role: 'menuitem',\n          tabindex: '-1'\n        });\n\n        if (_this.isMenu && !args.curData[_this.getField('separator', level)]) {\n          args.curData.htmlAttributes['aria-label'] = args.curData[args.fields.text] ? args.curData[args.fields.text] : args.curData[args.fields.id];\n        }\n\n        if (args.curData[args.fields[fields.iconCss]] === '') {\n          args.curData[args.fields[fields.iconCss]] = null;\n        }\n      },\n      itemCreated: function (args) {\n        if (args.curData[_this.getField('separator', level)]) {\n          args.item.classList.add(SEPARATOR);\n          args.item.setAttribute('role', 'separator');\n        }\n\n        if (showIcon && !args.curData[args.fields.iconCss] && !args.curData[_this.getField('separator', level)]) {\n          args.item.classList.add('e-blankicon');\n        }\n\n        if (args.curData[args.fields.child] && args.curData[args.fields.child].length) {\n          var span = _this.createElement('span', {\n            className: ICONS + ' ' + CARET\n          });\n\n          args.item.appendChild(span);\n          args.item.setAttribute('aria-haspopup', 'true');\n          args.item.setAttribute('aria-expanded', 'false');\n          args.item.classList.add('e-menu-caret-icon');\n        }\n\n        if (_this.isMenu && _this.template) {\n          args.item.setAttribute('id', args.curData[args.fields.id].toString());\n          args.item.removeAttribute('data-uid');\n\n          if (args.item.classList.contains('e-level-1')) {\n            args.item.classList.remove('e-level-1');\n          }\n\n          if (args.item.classList.contains('e-has-child')) {\n            args.item.classList.remove('e-has-child');\n          }\n\n          args.item.removeAttribute('aria-level');\n        }\n\n        var eventArgs = {\n          item: args.curData,\n          element: args.item\n        };\n\n        _this.trigger('beforeItemRender', eventArgs);\n      }\n    };\n    this.setProperties({\n      'items': this.items\n    }, true);\n\n    if (this.isMenu) {\n      listBaseOptions.templateID = this.element.id + TEMPLATE_PROPERTY;\n    }\n\n    var ul = ListBase.createList(this.createElement, items, listBaseOptions, !this.template, this);\n    ul.setAttribute('tabindex', '0');\n\n    if (this.isMenu) {\n      ul.setAttribute('role', 'menu');\n    } else {\n      ul.setAttribute('role', 'menubar');\n    }\n\n    return ul;\n  };\n\n  MenuBase.prototype.moverHandler = function (e) {\n    var trgt = e.target;\n    this.liTrgt = trgt;\n    var cli = this.getLI(trgt);\n    var wrapper = cli ? closest(cli, '.e-' + this.getModuleName() + '-wrapper') : this.getWrapper();\n    var hdrWrapper = this.getWrapper();\n    var regex = new RegExp('-ej2menu-(.*)-popup');\n    var ulId;\n    var isDifferentElem = false;\n\n    if (!wrapper) {\n      return;\n    }\n\n    if (wrapper.id !== '') {\n      ulId = regex.exec(wrapper.id)[1];\n    } else {\n      ulId = wrapper.querySelector('ul').id;\n    }\n\n    if (ulId !== this.element.id) {\n      this.removeLIStateByClass([FOCUSED, SELECTED], [this.getWrapper()]);\n\n      if (this.navIdx.length) {\n        isDifferentElem = true;\n      } else {\n        return;\n      }\n    }\n\n    if (cli && closest(cli, '.e-' + this.getModuleName() + '-wrapper') && !isDifferentElem) {\n      this.removeLIStateByClass([FOCUSED], this.isMenu ? [wrapper].concat(this.getPopups()) : [wrapper]);\n      this.removeLIStateByClass([FOCUSED], this.isMenu ? [hdrWrapper].concat(this.getPopups()) : [hdrWrapper]);\n      cli.classList.add(FOCUSED);\n\n      if (!this.showItemOnClick) {\n        this.clickHandler(e);\n      }\n    } else if (this.isMenu && this.showItemOnClick && !isDifferentElem) {\n      this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));\n    }\n\n    if (this.isMenu) {\n      if (!this.showItemOnClick && trgt.parentElement !== wrapper && !closest(trgt, '.e-' + this.getModuleName() + '-popup') && (!cli || cli && !this.getIndex(cli.id, true).length) && this.showSubMenuOn !== 'Hover') {\n        this.removeLIStateByClass([FOCUSED], [wrapper]);\n\n        if (this.navIdx.length) {\n          this.isClosed = true;\n          this.closeMenu(null, e);\n        }\n      } else if (isDifferentElem && !this.showItemOnClick) {\n        if (this.navIdx.length) {\n          this.isClosed = true;\n          this.closeMenu(null, e);\n        }\n      }\n\n      if (!this.isClosed) {\n        this.removeStateWrapper();\n      }\n\n      this.isClosed = false;\n    }\n  };\n\n  MenuBase.prototype.removeStateWrapper = function () {\n    if (this.liTrgt) {\n      var wrapper = closest(this.liTrgt, '.e-menu-vscroll');\n\n      if (this.liTrgt.tagName === 'DIV' && wrapper) {\n        this.removeLIStateByClass([FOCUSED, SELECTED], [wrapper]);\n      }\n    }\n  };\n\n  MenuBase.prototype.removeLIStateByClass = function (classList$$1, element) {\n    var li;\n\n    var _loop_1 = function (i) {\n      classList$$1.forEach(function (className) {\n        li = select('.' + className, element[i]);\n\n        if (li) {\n          li.classList.remove(className);\n        }\n      });\n    };\n\n    for (var i = 0; i < element.length; i++) {\n      _loop_1(i);\n    }\n  };\n\n  MenuBase.prototype.getField = function (propName, level) {\n    if (level === void 0) {\n      level = 0;\n    }\n\n    var fieldName = this.fields[\"\" + propName];\n    return typeof fieldName === 'string' ? fieldName : !fieldName[level] ? fieldName[fieldName.length - 1].toString() : fieldName[level].toString();\n  };\n\n  MenuBase.prototype.getFields = function (level) {\n    if (level === void 0) {\n      level = 0;\n    }\n\n    return {\n      id: this.getField('itemId', level),\n      iconCss: this.getField('iconCss', level),\n      text: this.getField('text', level),\n      url: this.getField('url', level),\n      child: this.getField('children', level),\n      separator: this.getField('separator', level)\n    };\n  };\n\n  MenuBase.prototype.hasField = function (items, field) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      if (items[i][\"\" + field]) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  MenuBase.prototype.menuHeaderClickHandler = function (e) {\n    if (closest(e.target, '.e-menu-wrapper').querySelector('ul.e-menu-parent').id !== this.element.id) {\n      return;\n    }\n\n    if (this.element.className.indexOf('e-hide-menu') > -1) {\n      this.openHamburgerMenu(e);\n    } else {\n      this.closeHamburgerMenu(e);\n    }\n  };\n\n  MenuBase.prototype.clickHandler = function (e) {\n    if (this.isTapHold) {\n      this.isTapHold = false;\n    } else {\n      var wrapper = this.getWrapper();\n      var trgt = e.target;\n      var cli = this.cli = this.getLI(trgt);\n      var regex = new RegExp('-ej2menu-(.*)-popup');\n      var cliWrapper = cli ? closest(cli, '.e-' + this.getModuleName() + '-wrapper') : null;\n      var isInstLI = cli && cliWrapper && (this.isMenu ? this.getIndex(cli.id, true).length > 0 : wrapper.firstElementChild.id === cliWrapper.firstElementChild.id);\n\n      if (Browser.isDevice && this.isMenu) {\n        this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));\n        this.mouseDownHandler(e);\n      }\n\n      if (cli && cliWrapper && this.isMenu) {\n        var cliWrapperId = cliWrapper.id ? regex.exec(cliWrapper.id)[1] : cliWrapper.querySelector('.e-menu-parent').id;\n\n        if (this.element.id !== cliWrapperId) {\n          return;\n        }\n      }\n\n      if (isInstLI && e.type === 'click' && !cli.classList.contains(HEADER)) {\n        this.setLISelected(cli);\n        var navIdx = this.getIndex(cli.id, true);\n        var item = this.getItem(navIdx);\n        var eventArgs = {\n          element: cli,\n          item: item,\n          event: e\n        };\n        this.trigger('select', eventArgs);\n      }\n\n      if (isInstLI && (e.type === 'mouseover' || Browser.isDevice || this.showItemOnClick)) {\n        var ul = void 0;\n\n        if (cli.classList.contains(HEADER)) {\n          ul = wrapper.children[this.navIdx.length - 1];\n          this.toggleAnimation(ul);\n          var sli = this.getLIByClass(ul, SELECTED);\n\n          if (sli) {\n            sli.classList.remove(SELECTED);\n          }\n\n          detach(cli.parentNode);\n          this.navIdx.pop();\n        } else {\n          if (!cli.classList.contains(SEPARATOR)) {\n            this.showSubMenu = true;\n            var cul = cli.parentNode;\n            this.cliIdx = this.getIdx(cul, cli);\n\n            if (this.isMenu || !Browser.isDevice) {\n              var culIdx = this.isMenu ? Array.prototype.indexOf.call([wrapper].concat(this.getPopups()), closest(cul, '.' + 'e-' + this.getModuleName() + '-wrapper')) : this.getIdx(wrapper, cul);\n\n              if (this.navIdx[culIdx] === this.cliIdx) {\n                this.showSubMenu = false;\n              }\n\n              if (culIdx !== this.navIdx.length && (e.type !== 'mouseover' || this.showSubMenu)) {\n                var sli = this.getLIByClass(cul, SELECTED);\n\n                if (sli) {\n                  sli.classList.remove(SELECTED);\n                }\n\n                this.isClosed = true;\n                this.keyType = 'click';\n\n                if (this.showItemOnClick) {\n                  this.setLISelected(cli);\n                }\n\n                this.closeMenu(culIdx + 1, e);\n\n                if (this.showItemOnClick) {\n                  this.setLISelected(cli);\n                }\n              }\n            }\n\n            if (!this.isClosed) {\n              this.afterCloseMenu(e);\n            }\n\n            this.isClosed = false;\n          }\n        }\n      } else {\n        if (this.isMenu && trgt.tagName === 'DIV' && this.navIdx.length && closest(trgt, '.e-menu-vscroll')) {\n          var popupEle = closest(trgt, '.' + POPUP);\n          var cIdx = Array.prototype.indexOf.call(this.getPopups(), popupEle) + 1;\n\n          if (cIdx < this.navIdx.length) {\n            this.closeMenu(cIdx + 1, e);\n\n            if (popupEle) {\n              this.removeLIStateByClass([FOCUSED, SELECTED], [popupEle]);\n            }\n          }\n        } else if (this.isMenu && this.hamburgerMode && trgt.tagName === 'SPAN' && trgt.classList.contains('e-menu-icon')) {\n          this.menuHeaderClickHandler(e);\n        } else {\n          if (trgt.tagName !== 'UL' || (this.isMenu ? trgt.parentElement.classList.contains('e-menu-wrapper') && !this.getIndex(trgt.querySelector('.' + ITEM).id, true).length : trgt.parentElement !== wrapper)) {\n            if (!cli) {\n              this.removeLIStateByClass([SELECTED], [wrapper]);\n            }\n\n            if (!cli || !cli.querySelector('.' + CARET)) {\n              this.closeMenu(null, e);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  MenuBase.prototype.afterCloseMenu = function (e) {\n    var isHeader;\n\n    if (this.showSubMenu) {\n      if (this.showItemOnClick && this.navIdx.length === 0) {\n        isHeader = closest(e.target, '.e-menu-parent.e-control');\n      } else {\n        isHeader = closest(this.element, '.e-menu-parent.e-control');\n      }\n\n      var idx = this.navIdx.concat(this.cliIdx);\n      var item = this.getItem(idx);\n\n      if (item && item[this.getField('children', idx.length - 1)] && item[this.getField('children', idx.length - 1)].length) {\n        if (e.type === 'mouseover' || Browser.isDevice && this.isMenu) {\n          this.setLISelected(this.cli);\n        }\n\n        if (!this.hamburgerMode && isHeader || this.hamburgerMode && this.cli.getAttribute('aria-expanded') === 'false') {\n          this.cli.setAttribute('aria-expanded', 'true');\n          this.navIdx.push(this.cliIdx);\n          this.openMenu(this.cli, item, null, null, e);\n        }\n      } else {\n        if (e.type !== 'mouseover') {\n          this.closeMenu(null, e);\n        }\n      }\n\n      if (!isHeader) {\n        var cul = this.getUlByNavIdx();\n        var sli = this.getLIByClass(cul, SELECTED);\n\n        if (sli) {\n          sli.setAttribute('aria-expanded', 'false');\n          sli.classList.remove(SELECTED);\n        }\n      }\n    }\n\n    this.keyType = '';\n  };\n\n  MenuBase.prototype.setLISelected = function (li) {\n    var sli = this.getLIByClass(li.parentElement, SELECTED);\n\n    if (sli) {\n      sli.classList.remove(SELECTED);\n    }\n\n    if (!this.isMenu) {\n      li.classList.remove(FOCUSED);\n    }\n\n    li.classList.add(SELECTED);\n  };\n\n  MenuBase.prototype.getLIByClass = function (ul, classname) {\n    for (var i = 0, len = ul.children.length; i < len; i++) {\n      if (ul.children[i].classList.contains(classname)) {\n        return ul.children[i];\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * This method is used to get the index of the menu item in the Menu based on the argument.\r\n   *\r\n   * @param {MenuItem | string} item - item be passed to get the index | id to be passed to get the item index.\r\n   * @param {boolean} isUniqueId - Set `true` if it is a unique id.\r\n   * @returns {void}\r\n   */\n\n\n  MenuBase.prototype.getItemIndex = function (item, isUniqueId) {\n    var idx;\n\n    if (typeof item === 'string') {\n      idx = item;\n    } else {\n      idx = item.id;\n    }\n\n    var isText = isUniqueId === false ? false : true;\n    var navIdx = this.getIndex(idx, isText);\n    return navIdx;\n  };\n  /**\r\n   * This method is used to set the menu item in the Menu based on the argument.\r\n   *\r\n   * @param {MenuItem} item - item need to be updated.\r\n   * @param {string} id - id / text to be passed to update the item.\r\n   * @param {boolean} isUniqueId - Set `true` if it is a unique id.\r\n   * @returns {void}\r\n   */\n\n\n  MenuBase.prototype.setItem = function (item, id, isUniqueId) {\n    var idx;\n\n    if (isUniqueId) {\n      idx = id ? id : item.id;\n    } else {\n      idx = id ? id : item.text;\n    }\n\n    var navIdx = this.getIndex(idx, isUniqueId);\n    var newItem = this.getItem(navIdx);\n    Object.assign(newItem, item);\n  };\n\n  MenuBase.prototype.getItem = function (navIdx) {\n    navIdx = navIdx.slice();\n    var idx = navIdx.pop();\n    var items = this.getItems(navIdx);\n    return items[idx];\n  };\n\n  MenuBase.prototype.getItems = function (navIdx) {\n    var items = this.items;\n\n    for (var i = 0; i < navIdx.length; i++) {\n      items = items[navIdx[i]][this.getField('children', i)];\n    }\n\n    return items;\n  };\n\n  MenuBase.prototype.setItems = function (newItems, navIdx) {\n    var items = this.getItems(navIdx);\n    items.splice(0, items.length);\n\n    for (var i = 0; i < newItems.length; i++) {\n      items.splice(i, 0, newItems[i]);\n    }\n  };\n\n  MenuBase.prototype.getIdx = function (ul, li, skipHdr) {\n    if (skipHdr === void 0) {\n      skipHdr = true;\n    }\n\n    var idx = Array.prototype.indexOf.call(ul.children, li);\n\n    if (skipHdr && ul.children[0].classList.contains(HEADER)) {\n      idx--;\n    }\n\n    return idx;\n  };\n\n  MenuBase.prototype.getLI = function (elem) {\n    if (elem.tagName === 'LI' && elem.classList.contains('e-menu-item')) {\n      return elem;\n    }\n\n    return closest(elem, 'li.e-menu-item');\n  };\n\n  MenuBase.prototype.updateItemsByNavIdx = function () {\n    var items = this.items;\n    var count = 0;\n\n    for (var index = 0; index < this.navIdx.length; index++) {\n      items = items[index].items;\n\n      if (!items) {\n        break;\n      }\n\n      count++;\n      var ul = this.getUlByNavIdx(count);\n\n      if (!ul) {\n        break;\n      }\n\n      this.updateItem(ul, items);\n    }\n  };\n\n  MenuBase.prototype.removeChildElement = function (elem) {\n    while (elem.firstElementChild) {\n      elem.removeChild(elem.firstElementChild);\n    }\n\n    return elem;\n  };\n  /**\r\n   * Called internally if any of the property value changed.\r\n   *\r\n   * @private\r\n   * @param {MenuBaseModel} newProp - Specifies the new properties\r\n   * @param {MenuBaseModel} oldProp - Specifies the old properties\r\n   * @returns {void}\r\n   */\n\n\n  MenuBase.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var _this = this;\n\n    var wrapper = this.getWrapper();\n\n    var _loop_2 = function (prop) {\n      switch (prop) {\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([wrapper], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([wrapper], newProp.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n          }\n\n          break;\n\n        case 'enableRtl':\n          wrapper.classList.toggle(RTL);\n          break;\n\n        case 'showItemOnClick':\n          this_1.unWireEvents();\n          this_1.showItemOnClick = newProp.showItemOnClick;\n          this_1.wireEvents();\n          break;\n\n        case 'enableScrolling':\n          if (newProp.enableScrolling) {\n            var ul_2;\n\n            if (this_1.element.classList.contains('e-vertical')) {\n              addScrolling(this_1.createElement, wrapper, this_1.element, 'vscroll', this_1.enableRtl);\n            } else {\n              addScrolling(this_1.createElement, wrapper, this_1.element, 'hscroll', this_1.enableRtl);\n            }\n\n            this_1.getPopups().forEach(function (wrapper) {\n              ul_2 = select('.e-ul', wrapper);\n              addScrolling(_this.createElement, wrapper, ul_2, 'vscroll', _this.enableRtl);\n            });\n          } else {\n            var ul_3 = wrapper.children[0];\n\n            if (this_1.element.classList.contains('e-vertical')) {\n              destroyScroll(getInstance(ul_3, VScroll), ul_3);\n            } else {\n              destroyScroll(getInstance(ul_3, HScroll), ul_3);\n            }\n\n            wrapper.style.overflow = '';\n            wrapper.appendChild(this_1.element);\n            this_1.getPopups().forEach(function (wrapper) {\n              ul_3 = wrapper.children[0];\n              destroyScroll(getInstance(ul_3, VScroll), ul_3);\n              wrapper.style.overflow = '';\n            });\n          }\n\n          break;\n\n        case 'items':\n          {\n            var idx = void 0;\n            var navIdx = void 0;\n            var item = void 0; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n            if (this_1.isReact && this_1.template) {\n              this_1.clearTemplate(['template']);\n            }\n\n            if (!Object.keys(oldProp.items).length) {\n              this_1.updateItem(this_1.element, this_1.items);\n\n              if (this_1.enableScrolling && this_1.element.parentElement.classList.contains('e-custom-scroll')) {\n                if (this_1.element.classList.contains('e-vertical')) {\n                  addScrolling(this_1.createElement, wrapper, this_1.element, 'vscroll', this_1.enableRtl);\n                } else {\n                  addScrolling(this_1.createElement, wrapper, this_1.element, 'hscroll', this_1.enableRtl);\n                }\n              }\n\n              if (!this_1.hamburgerMode) {\n                for (var i = 1, count = wrapper.childElementCount; i < count; i++) {\n                  detach(wrapper.lastElementChild);\n                }\n              }\n\n              this_1.navIdx = [];\n            } else {\n              var keys = Object.keys(newProp.items);\n\n              for (var i = 0; i < keys.length; i++) {\n                navIdx = this_1.getChangedItemIndex(newProp, [], Number(keys[i]));\n\n                if (navIdx.length <= this_1.getWrapper().children.length) {\n                  idx = navIdx.pop();\n                  item = this_1.getItems(navIdx);\n                  this_1.insertAfter([item[idx]], item[idx].text);\n                  this_1.removeItem(item, navIdx, idx);\n                  this_1.setItems(item, navIdx);\n                }\n\n                navIdx.length = 0;\n              }\n            }\n\n            break;\n          }\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      _loop_2(prop);\n    }\n  };\n\n  MenuBase.prototype.updateItem = function (ul, items) {\n    if (isBlazor() && !this.isMenu) {\n      ul = this.removeChildElement(ul);\n    } else {\n      if (this.enableScrolling) {\n        var wrapper1 = this.getWrapper();\n        var ul1 = wrapper1.children[0];\n\n        if (this.element.classList.contains('e-vertical')) {\n          destroyScroll(getInstance(ul1, VScroll), ul1);\n        } else {\n          destroyScroll(getInstance(ul1, HScroll), ul1);\n        }\n      }\n\n      ul.innerHTML = '';\n    }\n\n    var lis = [].slice.call(this.createItems(items).children);\n    lis.forEach(function (li) {\n      ul.appendChild(li);\n    });\n  };\n\n  MenuBase.prototype.getChangedItemIndex = function (newProp, index, idx) {\n    index.push(idx);\n    var key = Object.keys(newProp.items[idx]).pop();\n\n    if (key === 'items') {\n      var item = newProp.items[idx];\n      var popStr = Object.keys(item.items).pop();\n\n      if (popStr) {\n        this.getChangedItemIndex(item, index, Number(popStr));\n      }\n    } else {\n      if (key === 'isParentArray' && index.length > 1) {\n        index.pop();\n      }\n    }\n\n    return index;\n  };\n\n  MenuBase.prototype.removeItem = function (item, navIdx, idx) {\n    item.splice(idx, 1);\n    var uls = this.getWrapper().children;\n\n    if (navIdx.length < uls.length) {\n      detach(uls[navIdx.length].children[idx]);\n    }\n  };\n  /**\r\n   * Used to unwire the bind events.\r\n   *\r\n   * @private\r\n   * @param {string} targetSelctor - Specifies the target selector\r\n   * @returns {void}\r\n   */\n\n\n  MenuBase.prototype.unWireEvents = function (targetSelctor) {\n    if (targetSelctor === void 0) {\n      targetSelctor = this.target;\n    }\n\n    var wrapper = this.getWrapper();\n\n    if (targetSelctor) {\n      var target = void 0;\n      var touchModule = void 0;\n      var targetElems = selectAll(targetSelctor);\n\n      for (var i = 0, len = targetElems.length; i < len; i++) {\n        target = targetElems[i];\n\n        if (this.isMenu) {\n          EventHandler.remove(target, 'click', this.menuHeaderClickHandler);\n        } else {\n          if (Browser.isIos) {\n            touchModule = getInstance(target, Touch);\n\n            if (touchModule) {\n              touchModule.destroy();\n            }\n          } else {\n            EventHandler.remove(target, 'contextmenu', this.cmenuHandler);\n          }\n        }\n      }\n\n      if (!this.isMenu) {\n        EventHandler.remove(this.targetElement, 'mousewheel DOMMouseScroll', this.scrollHandler);\n\n        for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {\n          var parent_2 = _a[_i];\n          EventHandler.remove(parent_2, 'mousewheel DOMMouseScroll', this.scrollHandler);\n        }\n      }\n    }\n\n    if (!Browser.isDevice) {\n      EventHandler.remove(this.isMenu ? document : wrapper, 'mouseover', this.delegateMoverHandler);\n      EventHandler.remove(document, 'mousedown', this.delegateMouseDownHandler);\n    }\n\n    EventHandler.remove(document, 'click', this.delegateClickHandler);\n    this.unWireKeyboardEvent(wrapper);\n    this.rippleFn();\n  };\n\n  MenuBase.prototype.unWireKeyboardEvent = function (element) {\n    var keyboardModule = getInstance(element, KeyboardEvents);\n\n    if (keyboardModule) {\n      keyboardModule.destroy();\n    }\n  };\n\n  MenuBase.prototype.toggleAnimation = function (ul, isMenuOpen) {\n    var _this = this;\n\n    if (isMenuOpen === void 0) {\n      isMenuOpen = true;\n    }\n\n    var pUlHeight;\n    var pElement;\n\n    if (this.animationSettings.effect === 'None' || !isMenuOpen) {\n      this.end(ul, isMenuOpen);\n    } else {\n      this.animation.animate(ul, {\n        name: this.animationSettings.effect,\n        duration: this.animationSettings.duration,\n        timingFunction: this.animationSettings.easing,\n        begin: function (options) {\n          if (_this.hamburgerMode) {\n            pElement = options.element.parentElement;\n            options.element.style.position = 'absolute';\n            pUlHeight = pElement.offsetHeight;\n            options.element.style.maxHeight = options.element.offsetHeight + 'px';\n            pElement.style.maxHeight = '';\n          } else {\n            options.element.style.display = 'block';\n            options.element.style.maxHeight = options.element.getBoundingClientRect().height + 'px';\n          }\n        },\n        progress: function (options) {\n          if (_this.hamburgerMode) {\n            pElement.style.minHeight = pUlHeight + options.element.offsetHeight + 'px';\n          }\n        },\n        end: function (options) {\n          if (_this.hamburgerMode) {\n            options.element.style.position = '';\n            options.element.style.maxHeight = '';\n            pElement.style.minHeight = '';\n            options.element.style.top = 0 + 'px';\n            options.element.children[0].focus();\n\n            _this.triggerOpen(options.element.children[0]);\n          } else {\n            _this.end(options.element, isMenuOpen);\n          }\n        }\n      });\n    }\n  };\n\n  MenuBase.prototype.triggerOpen = function (ul) {\n    var item = this.navIdx.length ? this.getItem(this.navIdx) : null;\n    var eventArgs = {\n      element: ul,\n      parentItem: item,\n      items: item ? item.items : this.items\n    };\n    this.trigger('onOpen', eventArgs);\n\n    if (!this.isMenu) {\n      EventHandler.add(ul, 'keydown', this.keyHandler, this);\n    }\n  };\n\n  MenuBase.prototype.end = function (ul, isMenuOpen) {\n    if (isMenuOpen) {\n      ul.style.display = 'block';\n      ul.style.maxHeight = '';\n      this.triggerOpen(ul);\n\n      if (ul.querySelector('.' + FOCUSED)) {\n        ul.querySelector('.' + FOCUSED).focus();\n      } else {\n        var ele = this.getWrapper().children[this.getIdx(this.getWrapper(), ul) - 1];\n\n        if (this.currentTarget) {\n          if (!(this.currentTarget.classList.contains('e-numerictextbox') || this.currentTarget.classList.contains('e-textbox') || this.currentTarget.tagName === 'INPUT')) {\n            if (ele) {\n              ele.querySelector('.' + SELECTED).focus();\n            } else {\n              this.element.focus();\n            }\n          }\n        } else {\n          if (ele) {\n            ele.querySelector('.' + SELECTED).focus();\n          } else {\n            this.element.focus();\n          }\n        }\n      }\n    } else {\n      if (ul === this.element) {\n        var fli = this.getLIByClass(this.element, FOCUSED);\n\n        if (fli) {\n          fli.classList.remove(FOCUSED);\n        }\n\n        var sli = this.getLIByClass(this.element, SELECTED);\n\n        if (sli) {\n          sli.classList.remove(SELECTED);\n        }\n\n        ul.style.display = 'none';\n      } else {\n        detach(ul);\n      }\n    }\n  };\n  /**\r\n   * Get the properties to be maintained in the persisted state.\r\n   *\r\n   * @returns {string} - Persist data\r\n   */\n\n\n  MenuBase.prototype.getPersistData = function () {\n    return '';\n  };\n  /**\r\n   * Get wrapper element.\r\n   *\r\n   * @returns {Element} - Wrapper element\r\n   * @private\r\n   */\n\n\n  MenuBase.prototype.getWrapper = function () {\n    return closest(this.element, '.e-' + this.getModuleName() + '-wrapper');\n  };\n\n  MenuBase.prototype.getIndex = function (data, isUniqueId, items, nIndex, isCallBack, level) {\n    if (items === void 0) {\n      items = this.items;\n    }\n\n    if (nIndex === void 0) {\n      nIndex = [];\n    }\n\n    if (isCallBack === void 0) {\n      isCallBack = false;\n    }\n\n    if (level === void 0) {\n      level = 0;\n    }\n\n    var item;\n    level = isCallBack ? level + 1 : 0;\n\n    for (var i = 0, len = items.length; i < len; i++) {\n      item = items[i];\n\n      if ((isUniqueId ? item[this.getField('itemId', level)] : item[this.getField('text', level)]) === data) {\n        nIndex.push(i);\n        break;\n      } else if (item[this.getField('children', level)] && item[this.getField('children', level)].length) {\n        nIndex = this.getIndex(data, isUniqueId, item[this.getField('children', level)], nIndex, true, level);\n\n        if (nIndex[nIndex.length - 1] === -1) {\n          if (i !== len - 1) {\n            nIndex.pop();\n          }\n        } else {\n          nIndex.unshift(i);\n          break;\n        }\n      } else {\n        if (i === len - 1) {\n          nIndex.push(-1);\n        }\n      }\n    }\n\n    return !isCallBack && nIndex[0] === -1 ? [] : nIndex;\n  };\n  /**\r\n   * This method is used to enable or disable the menu items in the Menu based on the items and enable argument.\r\n   *\r\n   * @param {string[]} items - Text items that needs to be enabled/disabled.\r\n   * @param {boolean} enable - Set `true`/`false` to enable/disable the list items.\r\n   * @param {boolean} isUniqueId - Set `true` if it is a unique id.\r\n   * @returns {void}\r\n   */\n\n\n  MenuBase.prototype.enableItems = function (items, enable, isUniqueId) {\n    if (enable === void 0) {\n      enable = true;\n    }\n\n    var ul;\n    var idx;\n    var navIdx;\n    var disabled = DISABLED;\n    var skipItem;\n\n    for (var i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(items[i], isUniqueId);\n\n      if (this.navIdx.length) {\n        if (navIdx.length !== 1) {\n          skipItem = false;\n\n          for (var i_1 = 0, len = navIdx.length - 1; i_1 < len; i_1++) {\n            if (navIdx[i_1] !== this.navIdx[i_1]) {\n              skipItem = true;\n              break;\n            }\n          }\n\n          if (skipItem) {\n            continue;\n          }\n        }\n      } else {\n        if (navIdx.length !== 1) {\n          continue;\n        }\n      }\n\n      idx = navIdx.pop();\n      ul = this.getUlByNavIdx(navIdx.length);\n\n      if (ul) {\n        if (enable) {\n          if (this.isMenu) {\n            ul.children[idx].classList.remove(disabled);\n            ul.children[idx].removeAttribute('aria-disabled');\n          } else {\n            if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n              ul.children[idx + 1].classList.remove(disabled);\n            } else {\n              ul.children[idx].classList.remove(disabled);\n            }\n          }\n        } else {\n          if (this.isMenu) {\n            ul.children[idx].classList.add(disabled);\n            ul.children[idx].setAttribute('aria-disabled', 'true');\n          } else {\n            if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n              ul.children[idx + 1].classList.add(disabled);\n            } else {\n              ul.children[idx].classList.add(disabled);\n            }\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * This method is used to show the menu items in the Menu based on the items text.\r\n   *\r\n   * @param {string[]} items - Text items that needs to be shown.\r\n   * @param {boolean} isUniqueId - Set `true` if it is a unique id.\r\n   * @returns {void}\r\n   */\n\n\n  MenuBase.prototype.showItems = function (items, isUniqueId) {\n    this.showHideItems(items, false, isUniqueId);\n  };\n  /**\r\n   * This method is used to hide the menu items in the Menu based on the items text.\r\n   *\r\n   * @param {string[]} items - Text items that needs to be hidden.\r\n   * @param {boolean} isUniqueId - Set `true` if it is a unique id.\r\n   * @returns {void}\r\n   */\n\n\n  MenuBase.prototype.hideItems = function (items, isUniqueId) {\n    this.showHideItems(items, true, isUniqueId);\n  };\n\n  MenuBase.prototype.showHideItems = function (items, ishide, isUniqueId) {\n    var ul;\n    var index;\n    var navIdx;\n\n    for (var i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(items[i], isUniqueId);\n      index = navIdx.pop();\n      ul = this.getUlByNavIdx(navIdx.length);\n\n      if (ul) {\n        if (ishide) {\n          if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n            ul.children[index + 1].classList.add(HIDE);\n          } else {\n            ul.children[index].classList.add(HIDE);\n          }\n        } else {\n          if (Browser.isDevice && !ul.classList.contains('e-contextmenu')) {\n            ul.children[index + 1].classList.remove(HIDE);\n          } else {\n            ul.children[index].classList.remove(HIDE);\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * It is used to remove the menu items from the Menu based on the items text.\r\n   *\r\n   * @param {string[]} items Text items that needs to be removed.\r\n   * @param {boolean} isUniqueId - Set `true` if it is a unique id.\r\n   * @returns {void}\r\n   */\n\n\n  MenuBase.prototype.removeItems = function (items, isUniqueId) {\n    var idx;\n    var navIdx;\n    var iitems;\n\n    for (var i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(items[i], isUniqueId);\n      idx = navIdx.pop();\n      iitems = this.getItems(navIdx);\n\n      if (!isNullOrUndefined(idx)) {\n        this.removeItem(iitems, navIdx, idx);\n      }\n    }\n  };\n  /**\r\n   * It is used to insert the menu items after the specified menu item text.\r\n   *\r\n   * @param {MenuItemModel[]} items - Items that needs to be inserted.\r\n   * @param {string} text - Text item after that the element to be inserted.\r\n   * @param {boolean} isUniqueId - Set `true` if it is a unique id.\r\n   * @returns {void}\r\n   */\n\n\n  MenuBase.prototype.insertAfter = function (items, text, isUniqueId) {\n    this.insertItems(items, text, isUniqueId);\n  };\n  /**\r\n   * It is used to insert the menu items before the specified menu item text.\r\n   *\r\n   * @param {MenuItemModel[]} items - Items that needs to be inserted.\r\n   * @param {string} text - Text item before that the element to be inserted.\r\n   * @param  {boolean} isUniqueId - Set `true` if it is a unique id.\r\n   * @returns {void}\r\n   */\n\n\n  MenuBase.prototype.insertBefore = function (items, text, isUniqueId) {\n    this.insertItems(items, text, isUniqueId, false);\n  };\n\n  MenuBase.prototype.insertItems = function (items, text, isUniqueId, isAfter) {\n    if (isAfter === void 0) {\n      isAfter = true;\n    }\n\n    var li;\n    var idx;\n    var navIdx;\n    var iitems;\n    var menuitem;\n\n    for (var i = 0; i < items.length; i++) {\n      navIdx = this.getIndex(text, isUniqueId);\n      idx = navIdx.pop();\n      iitems = this.getItems(navIdx);\n      menuitem = new MenuItem(iitems[0], 'items', items[i], true);\n      iitems.splice(isAfter ? idx + 1 : idx, 0, menuitem);\n      var uls = this.isMenu ? [this.getWrapper()].concat(this.getPopups()) : [].slice.call(this.getWrapper().children);\n\n      if (!isNullOrUndefined(idx) && navIdx.length < uls.length) {\n        idx = isAfter ? idx + 1 : idx;\n        li = this.createItems(iitems).children[idx];\n        var ul = this.isMenu ? select('.e-menu-parent', uls[navIdx.length]) : uls[navIdx.length];\n        ul.insertBefore(li, ul.children[idx]);\n      }\n    }\n  };\n\n  MenuBase.prototype.removeAttributes = function () {\n    var _this = this;\n\n    ['top', 'left', 'display', 'z-index'].forEach(function (key) {\n      _this.element.style.removeProperty(key);\n    });\n    ['role', 'tabindex', 'class', 'style'].forEach(function (key) {\n      if (key === 'class' && _this.element.classList.contains('e-menu-parent')) {\n        _this.element.classList.remove('e-menu-parent');\n      }\n\n      if (['class', 'style'].indexOf(key) === -1 || !_this.element.getAttribute(key)) {\n        _this.element.removeAttribute(key);\n      }\n\n      if (_this.isMenu && key === 'class' && _this.element.classList.contains('e-vertical')) {\n        _this.element.classList.remove('e-vertical');\n      }\n    });\n  };\n  /**\r\n   * Destroys the widget.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  MenuBase.prototype.destroy = function () {\n    var wrapper = this.getWrapper();\n\n    if (wrapper) {\n      this.unWireEvents();\n\n      if (!this.isMenu) {\n        this.clonedElement.style.display = '';\n\n        if (this.clonedElement.tagName === 'EJS-CONTEXTMENU') {\n          addClass([this.clonedElement], ['e-control', 'e-lib', 'e-' + this.getModuleName()]);\n          this.element = this.clonedElement;\n        } else {\n          if (this.refreshing && this.clonedElement.childElementCount && this.clonedElement.children[0].tagName === 'LI') {\n            this.setProperties({\n              'items': []\n            }, true);\n          }\n\n          if (document.getElementById(this.clonedElement.id)) {\n            var refEle = this.clonedElement.nextElementSibling;\n\n            if (refEle && refEle !== wrapper) {\n              this.clonedElement.parentElement.insertBefore(this.element, refEle);\n            } else {\n              this.clonedElement.parentElement.appendChild(this.element);\n            }\n\n            if (isBlazor() && !this.isMenu) {\n              this.element = this.removeChildElement(this.element);\n            } else {\n              this.element.innerHTML = '';\n            }\n\n            append([].slice.call(this.clonedElement.children), this.element);\n            detach(this.clonedElement);\n            this.removeAttributes();\n          }\n        }\n\n        this.clonedElement = null;\n      } else {\n        this.closeMenu();\n\n        if (isBlazor() && !this.isMenu) {\n          this.element = this.removeChildElement(this.element);\n        } else {\n          this.element.innerHTML = '';\n        }\n\n        this.removeAttributes();\n        wrapper.parentNode.insertBefore(this.element, wrapper);\n        this.clonedElement = null;\n      }\n\n      if (this.isMenu && this.clonedElement) {\n        detach(this.element);\n        wrapper.style.display = '';\n        wrapper.classList.remove('e-' + this.getModuleName() + '-wrapper');\n        wrapper.removeAttribute('data-ripple');\n      } else {\n        detach(wrapper);\n      }\n\n      _super.prototype.destroy.call(this);\n\n      if (this.template) {\n        this.clearTemplate(['template']);\n      }\n    }\n\n    this.rippleFn = null;\n  };\n\n  __decorate$2([Event()], MenuBase.prototype, \"beforeItemRender\", void 0);\n\n  __decorate$2([Event()], MenuBase.prototype, \"beforeOpen\", void 0);\n\n  __decorate$2([Event()], MenuBase.prototype, \"onOpen\", void 0);\n\n  __decorate$2([Event()], MenuBase.prototype, \"beforeClose\", void 0);\n\n  __decorate$2([Event()], MenuBase.prototype, \"onClose\", void 0);\n\n  __decorate$2([Event()], MenuBase.prototype, \"select\", void 0);\n\n  __decorate$2([Event()], MenuBase.prototype, \"created\", void 0);\n\n  __decorate$2([Property('')], MenuBase.prototype, \"cssClass\", void 0);\n\n  __decorate$2([Property(0)], MenuBase.prototype, \"hoverDelay\", void 0);\n\n  __decorate$2([Property(false)], MenuBase.prototype, \"showItemOnClick\", void 0);\n\n  __decorate$2([Property('')], MenuBase.prototype, \"target\", void 0);\n\n  __decorate$2([Property('')], MenuBase.prototype, \"filter\", void 0);\n\n  __decorate$2([Property(null)], MenuBase.prototype, \"template\", void 0);\n\n  __decorate$2([Property(false)], MenuBase.prototype, \"enableScrolling\", void 0);\n\n  __decorate$2([Property(false)], MenuBase.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate$2([Complex({\n    itemId: 'id',\n    text: 'text',\n    parentId: 'parentId',\n    iconCss: 'iconCss',\n    url: 'url',\n    separator: 'separator',\n    children: 'items'\n  }, FieldSettings)], MenuBase.prototype, \"fields\", void 0);\n\n  __decorate$2([Collection([], MenuItem)], MenuBase.prototype, \"items\", void 0);\n\n  __decorate$2([Complex({\n    duration: 400,\n    easing: 'ease',\n    effect: 'SlideDown'\n  }, MenuAnimationSettings)], MenuBase.prototype, \"animationSettings\", void 0);\n\n  MenuBase = __decorate$2([NotifyPropertyChanges], MenuBase);\n  return MenuBase;\n}(Component);\n/**\r\n * Navigation Common modules\r\n */\n\n\nvar __extends$3 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nvar CLS_VERTICAL = 'e-vertical';\nvar CLS_ITEMS = 'e-toolbar-items';\nvar CLS_ITEM = 'e-toolbar-item';\nvar CLS_RTL$2 = 'e-rtl';\nvar CLS_SEPARATOR = 'e-separator';\nvar CLS_POPUPICON = 'e-popup-up-icon';\nvar CLS_POPUPDOWN = 'e-popup-down-icon';\nvar CLS_POPUPOPEN = 'e-popup-open';\nvar CLS_TEMPLATE = 'e-template';\nvar CLS_DISABLE$2 = 'e-overlay';\nvar CLS_POPUPTEXT = 'e-toolbar-text';\nvar CLS_TBARTEXT = 'e-popup-text';\nvar CLS_TBAROVERFLOW = 'e-overflow-show';\nvar CLS_POPOVERFLOW = 'e-overflow-hide';\nvar CLS_TBARBTN = 'e-tbar-btn';\nvar CLS_TBARNAV = 'e-hor-nav';\nvar CLS_TBARSCRLNAV = 'e-scroll-nav';\nvar CLS_TBARRIGHT = 'e-toolbar-right';\nvar CLS_TBARLEFT = 'e-toolbar-left';\nvar CLS_TBARCENTER = 'e-toolbar-center';\nvar CLS_TBARPOS = 'e-tbar-pos';\nvar CLS_HSCROLLCNT = 'e-hscroll-content';\nvar CLS_VSCROLLCNT = 'e-vscroll-content';\nvar CLS_HSCROLLBAR$1 = 'e-hscroll-bar';\nvar CLS_POPUPNAV = 'e-hor-nav';\nvar CLS_POPUPCLASS = 'e-toolbar-pop';\nvar CLS_POPUP = 'e-toolbar-popup';\nvar CLS_TBARBTNTEXT = 'e-tbar-btn-text';\nvar CLS_TBARNAVACT = 'e-nav-active';\nvar CLS_TBARIGNORE = 'e-ignore';\nvar CLS_POPPRI = 'e-popup-alone';\nvar CLS_HIDDEN = 'e-hidden';\nvar CLS_MULTIROW = 'e-toolbar-multirow';\nvar CLS_MULTIROWPOS = 'e-multirow-pos';\nvar CLS_MULTIROW_SEPARATOR = 'e-multirow-separator';\nvar CLS_EXTENDABLE_SEPARATOR = 'e-extended-separator';\nvar CLS_EXTEANDABLE_TOOLBAR = 'e-extended-toolbar';\nvar CLS_EXTENDABLECLASS = 'e-toolbar-extended';\nvar CLS_EXTENDPOPUP = 'e-expended-nav';\nvar CLS_EXTENDEDPOPOPEN = 'e-tbar-extended';\n/**\r\n * An item object that is used to configure Toolbar commands.\r\n */\n\nvar Item =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$3(Item, _super);\n\n  function Item() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$3([Property('')], Item.prototype, \"id\", void 0);\n\n  __decorate$3([Property('')], Item.prototype, \"text\", void 0);\n\n  __decorate$3([Property('auto')], Item.prototype, \"width\", void 0);\n\n  __decorate$3([Property('')], Item.prototype, \"cssClass\", void 0);\n\n  __decorate$3([Property(false)], Item.prototype, \"showAlwaysInPopup\", void 0);\n\n  __decorate$3([Property(false)], Item.prototype, \"disabled\", void 0);\n\n  __decorate$3([Property('')], Item.prototype, \"prefixIcon\", void 0);\n\n  __decorate$3([Property('')], Item.prototype, \"suffixIcon\", void 0);\n\n  __decorate$3([Property(true)], Item.prototype, \"visible\", void 0);\n\n  __decorate$3([Property('None')], Item.prototype, \"overflow\", void 0);\n\n  __decorate$3([Property('')], Item.prototype, \"template\", void 0);\n\n  __decorate$3([Property('Button')], Item.prototype, \"type\", void 0);\n\n  __decorate$3([Property('Both')], Item.prototype, \"showTextOn\", void 0);\n\n  __decorate$3([Property(null)], Item.prototype, \"htmlAttributes\", void 0);\n\n  __decorate$3([Property('')], Item.prototype, \"tooltipText\", void 0);\n\n  __decorate$3([Property('Left')], Item.prototype, \"align\", void 0);\n\n  __decorate$3([Event()], Item.prototype, \"click\", void 0);\n\n  __decorate$3([Property(-1)], Item.prototype, \"tabIndex\", void 0);\n\n  return Item;\n}(ChildProperty);\n/**\r\n * The Toolbar control contains a group of commands that are aligned horizontally.\r\n * ```html\r\n * <div id=\"toolbar\"/>\r\n * <script>\r\n *   var toolbarObj = new Toolbar();\r\n *   toolbarObj.appendTo(\"#toolbar\");\r\n * </script>\r\n * ```\r\n */\n\n\nvar Toolbar =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$3(Toolbar, _super);\n  /**\r\n   * Initializes a new instance of the Toolbar class.\r\n   *\r\n   * @param {ToolbarModel} options  - Specifies Toolbar model properties as options.\r\n   * @param { string | HTMLElement} element  - Specifies the element that is rendered as a Toolbar.\r\n   */\n\n\n  function Toolbar(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.resizeContext = _this.resize.bind(_this);\n    /**\r\n     * Contains the keyboard configuration of the Toolbar.\r\n     */\n\n    _this.keyConfigs = {\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      moveDown: 'downarrow',\n      popupOpen: 'enter',\n      popupClose: 'escape',\n      tab: 'tab',\n      home: 'home',\n      end: 'end'\n    };\n    return _this;\n  }\n  /**\r\n   * Removes the control from the DOM and also removes all its related events.\r\n   *\r\n   * @returns {void}.\r\n   */\n\n\n  Toolbar.prototype.destroy = function () {\n    var _this = this;\n\n    if (this.isReact || this.isAngular) {\n      this.clearTemplate();\n    }\n\n    var btnItems = this.element.querySelectorAll('.e-control.e-btn');\n    [].slice.call(btnItems).forEach(function (el) {\n      if (!isNullOrUndefined(el) && !isNullOrUndefined(el.ej2_instances) && !isNullOrUndefined(el.ej2_instances[0]) && !el.ej2_instances[0].isDestroyed) {\n        el.ej2_instances[0].destroy();\n      }\n    });\n    this.unwireEvents();\n    this.tempId.forEach(function (ele) {\n      if (!isNullOrUndefined(_this.element.querySelector(ele))) {\n        document.body.appendChild(_this.element.querySelector(ele)).style.display = 'none';\n      }\n    });\n    this.destroyItems();\n\n    while (this.element.lastElementChild) {\n      this.element.removeChild(this.element.lastElementChild);\n    }\n\n    if (this.trgtEle) {\n      this.element.appendChild(this.ctrlTem);\n      this.trgtEle = null;\n      this.ctrlTem = null;\n    }\n\n    if (this.popObj) {\n      this.popObj.destroy();\n      detach(this.popObj.element);\n    }\n\n    if (this.activeEle) {\n      this.activeEle = null;\n    }\n\n    this.popObj = null;\n    this.tbarAlign = null;\n    this.tbarItemsCol = [];\n    this.remove(this.element, 'e-toolpop');\n\n    if (this.cssClass) {\n      removeClass([this.element], this.cssClass.split(' '));\n    }\n\n    this.element.removeAttribute('style');\n    ['aria-disabled', 'aria-orientation', 'role'].forEach(function (attrb) {\n      return _this.element.removeAttribute(attrb);\n    });\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\r\n   * Initialize the event handler\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  Toolbar.prototype.preRender = function () {\n    var eventArgs = {\n      enableCollision: this.enableCollision,\n      scrollStep: this.scrollStep\n    };\n    this.trigger('beforeCreate', eventArgs);\n    this.enableCollision = eventArgs.enableCollision;\n    this.scrollStep = eventArgs.scrollStep;\n    this.scrollModule = null;\n    this.popObj = null;\n    this.tempId = [];\n    this.tbarItemsCol = this.items;\n    this.isVertical = this.element.classList.contains(CLS_VERTICAL) ? true : false;\n    this.isExtendedOpen = false;\n    this.popupPriCount = 0;\n\n    if (this.enableRtl) {\n      this.add(this.element, CLS_RTL$2);\n    }\n  };\n\n  Toolbar.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n    window.addEventListener('resize', this.resizeContext);\n\n    if (this.allowKeyboard) {\n      this.wireKeyboardEvent();\n    }\n  };\n\n  Toolbar.prototype.wireKeyboardEvent = function () {\n    this.keyModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs\n    });\n    EventHandler.add(this.element, 'keydown', this.docKeyDown, this);\n    this.updateTabIndex('0');\n  };\n\n  Toolbar.prototype.updateTabIndex = function (tabIndex) {\n    var ele = this.element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_DISABLE$2 + ' ):not(.' + CLS_SEPARATOR + ' ):not(.' + CLS_HIDDEN + ' )');\n\n    if (!isNullOrUndefined(ele) && !isNullOrUndefined(ele.firstElementChild)) {\n      var dataTabIndex = ele.firstElementChild.getAttribute('data-tabindex');\n\n      if (dataTabIndex && dataTabIndex === '-1' && ele.firstElementChild.tagName !== 'INPUT') {\n        ele.firstElementChild.setAttribute('tabindex', tabIndex);\n      }\n    }\n  };\n\n  Toolbar.prototype.unwireKeyboardEvent = function () {\n    if (this.keyModule) {\n      EventHandler.remove(this.element, 'keydown', this.docKeyDown);\n      this.keyModule.destroy();\n      this.keyModule = null;\n    }\n  };\n\n  Toolbar.prototype.docKeyDown = function (e) {\n    if (e.target.tagName === 'INPUT') {\n      return;\n    }\n\n    var popCheck = !isNullOrUndefined(this.popObj) && isVisible(this.popObj.element) && this.overflowMode !== 'Extended';\n\n    if (e.keyCode === 9 && e.target.classList.contains('e-hor-nav') === true && popCheck) {\n      this.popObj.hide({\n        name: 'FadeOut',\n        duration: 100\n      });\n    }\n\n    var keyCheck = e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 35 || e.keyCode === 36;\n\n    if (keyCheck) {\n      e.preventDefault();\n    }\n  };\n\n  Toolbar.prototype.unwireEvents = function () {\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n    this.destroyScroll();\n    this.unwireKeyboardEvent();\n    window.removeEventListener('resize', this.resizeContext);\n    EventHandler.remove(document, 'scroll', this.docEvent);\n    EventHandler.remove(document, 'click', this.docEvent);\n  };\n\n  Toolbar.prototype.clearProperty = function () {\n    this.tbarEle = [];\n    this.tbarAlgEle = {\n      lefts: [],\n      centers: [],\n      rights: []\n    };\n  };\n\n  Toolbar.prototype.docEvent = function (e) {\n    var popEle = closest(e.target, '.e-popup');\n\n    if (this.popObj && isVisible(this.popObj.element) && !popEle && this.overflowMode === 'Popup') {\n      this.popObj.hide({\n        name: 'FadeOut',\n        duration: 100\n      });\n    }\n  };\n\n  Toolbar.prototype.destroyScroll = function () {\n    if (this.scrollModule) {\n      if (this.tbarAlign) {\n        this.add(this.scrollModule.element, CLS_TBARPOS);\n      }\n\n      this.scrollModule.destroy();\n      this.scrollModule = null;\n    }\n  };\n\n  Toolbar.prototype.destroyItems = function () {\n    if (this.element) {\n      [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM)).forEach(function (el) {\n        detach(el);\n      });\n    }\n\n    if (this.tbarAlign) {\n      var tbarItems = this.element.querySelector('.' + CLS_ITEMS);\n      [].slice.call(tbarItems.children).forEach(function (el) {\n        detach(el);\n      });\n      this.tbarAlign = false;\n      this.remove(tbarItems, CLS_TBARPOS);\n    }\n\n    this.clearProperty();\n  };\n\n  Toolbar.prototype.destroyMode = function () {\n    if (this.scrollModule) {\n      this.remove(this.scrollModule.element, CLS_RTL$2);\n      this.destroyScroll();\n    }\n\n    this.remove(this.element, CLS_EXTENDEDPOPOPEN);\n    this.remove(this.element, CLS_EXTEANDABLE_TOOLBAR);\n    var tempEle = this.element.querySelector('.e-toolbar-multirow');\n\n    if (tempEle) {\n      this.remove(tempEle, CLS_MULTIROW);\n    }\n\n    if (this.popObj) {\n      this.popupRefresh(this.popObj.element, true);\n    }\n  };\n\n  Toolbar.prototype.add = function (ele, val) {\n    ele.classList.add(val);\n  };\n\n  Toolbar.prototype.remove = function (ele, val) {\n    ele.classList.remove(val);\n  };\n\n  Toolbar.prototype.elementFocus = function (ele) {\n    var fChild = ele.firstElementChild;\n\n    if (fChild) {\n      fChild.focus();\n      this.activeEleSwitch(ele);\n    } else {\n      ele.focus();\n    }\n  };\n\n  Toolbar.prototype.clstElement = function (tbrNavChk, trgt) {\n    var clst;\n\n    if (tbrNavChk && this.popObj && isVisible(this.popObj.element)) {\n      clst = this.popObj.element.querySelector('.' + CLS_ITEM);\n    } else if (this.element === trgt || tbrNavChk) {\n      clst = this.element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_DISABLE$2 + ' ):not(.' + CLS_SEPARATOR + ' ):not(.' + CLS_HIDDEN + ' )');\n    } else {\n      clst = closest(trgt, '.' + CLS_ITEM);\n    }\n\n    return clst;\n  };\n\n  Toolbar.prototype.keyHandling = function (clst, e, trgt, navChk, scrollChk) {\n    var popObj = this.popObj;\n    var rootEle = this.element;\n    var popAnimate = {\n      name: 'FadeOut',\n      duration: 100\n    };\n    var value = e.action === 'moveUp' ? 'previous' : 'next';\n    var ele;\n    var nodes;\n\n    switch (e.action) {\n      case 'moveRight':\n        if (this.isVertical) {\n          return;\n        }\n\n        if (rootEle === trgt) {\n          this.elementFocus(clst);\n        } else if (!navChk) {\n          this.eleFocus(clst, 'next');\n        }\n\n        break;\n\n      case 'moveLeft':\n        if (this.isVertical) {\n          return;\n        }\n\n        if (!navChk) {\n          this.eleFocus(clst, 'previous');\n        }\n\n        break;\n\n      case 'home':\n      case 'end':\n        if (clst) {\n          var popupCheck = closest(clst, '.e-popup');\n          var extendedPopup = this.element.querySelector('.' + CLS_EXTENDABLECLASS);\n\n          if (this.overflowMode === 'Extended' && extendedPopup && extendedPopup.classList.contains('e-popup-open')) {\n            popupCheck = e.action === 'end' ? extendedPopup : null;\n          }\n\n          if (popupCheck) {\n            if (isVisible(this.popObj.element)) {\n              nodes = [].slice.call(popupCheck.children);\n\n              if (e.action === 'home') {\n                ele = nodes[0];\n              } else {\n                ele = nodes[nodes.length - 1];\n              }\n            }\n          } else {\n            nodes = this.element.querySelectorAll('.' + CLS_ITEMS + ' .' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + ')');\n\n            if (e.action === 'home') {\n              ele = nodes[0];\n            } else {\n              ele = nodes[nodes.length - 1];\n            }\n          }\n\n          if (ele) {\n            this.elementFocus(ele);\n          }\n        }\n\n        break;\n\n      case 'moveUp':\n      case 'moveDown':\n        if (!this.isVertical) {\n          if (popObj && closest(trgt, '.e-popup')) {\n            var popEle = popObj.element;\n            var popFrstEle = popEle.firstElementChild;\n\n            if (value === 'previous' && popFrstEle === clst) {\n              popEle.lastElementChild.firstChild.focus();\n            } else if (value === 'next' && popEle.lastElementChild === clst) {\n              popFrstEle.firstChild.focus();\n            } else {\n              this.eleFocus(clst, value);\n            }\n          } else if (e.action === 'moveDown' && popObj && isVisible(popObj.element)) {\n            this.elementFocus(clst);\n          }\n        } else {\n          if (e.action === 'moveUp') {\n            this.eleFocus(clst, 'previous');\n          } else {\n            this.eleFocus(clst, 'next');\n          }\n        }\n\n        break;\n\n      case 'tab':\n        if (!scrollChk && !navChk) {\n          var ele_1 = clst.firstElementChild;\n\n          if (rootEle === trgt) {\n            if (this.activeEle) {\n              this.activeEle.focus();\n            } else {\n              this.activeEleRemove(ele_1);\n              ele_1.focus();\n            }\n          }\n        }\n\n        break;\n\n      case 'popupClose':\n        if (popObj && this.overflowMode !== 'Extended') {\n          popObj.hide(popAnimate);\n        }\n\n        break;\n\n      case 'popupOpen':\n        if (!navChk) {\n          return;\n        }\n\n        if (popObj && !isVisible(popObj.element)) {\n          popObj.element.style.top = rootEle.offsetHeight + 'px';\n          popObj.show({\n            name: 'FadeIn',\n            duration: 100\n          });\n        } else {\n          popObj.hide(popAnimate);\n        }\n\n        break;\n    }\n  };\n\n  Toolbar.prototype.keyActionHandler = function (e) {\n    var trgt = e.target;\n\n    if (trgt.tagName === 'INPUT' || trgt.tagName === 'TEXTAREA' || this.element.classList.contains(CLS_DISABLE$2)) {\n      return;\n    }\n\n    e.preventDefault();\n    var tbrNavChk = trgt.classList.contains(CLS_TBARNAV);\n    var tbarScrollChk = trgt.classList.contains(CLS_TBARSCRLNAV);\n    var clst = this.clstElement(tbrNavChk, trgt);\n\n    if (clst || tbarScrollChk) {\n      this.keyHandling(clst, e, trgt, tbrNavChk, tbarScrollChk);\n    }\n  };\n  /**\r\n   * Specifies the value to disable/enable the Toolbar component.\r\n   * When set to `true`, the component will be disabled.\r\n   *\r\n   * @param  {boolean} value - Based on this Boolean value, Toolbar will be enabled (false) or disabled (true).\r\n   * @returns {void}.\r\n   */\n\n\n  Toolbar.prototype.disable = function (value) {\n    var rootEle = this.element;\n\n    if (value) {\n      rootEle.classList.add(CLS_DISABLE$2);\n    } else {\n      rootEle.classList.remove(CLS_DISABLE$2);\n    }\n\n    if (this.activeEle) {\n      this.activeEle.setAttribute('tabindex', this.activeEle.getAttribute('data-tabindex'));\n    }\n\n    if (this.scrollModule) {\n      this.scrollModule.disable(value);\n    }\n\n    if (this.popObj) {\n      if (isVisible(this.popObj.element) && this.overflowMode !== 'Extended') {\n        this.popObj.hide();\n      }\n\n      rootEle.querySelector('#' + rootEle.id + '_nav').setAttribute('tabindex', !value ? '0' : '-1');\n    }\n  };\n\n  Toolbar.prototype.eleContains = function (el) {\n    return el.classList.contains(CLS_SEPARATOR) || el.classList.contains(CLS_DISABLE$2) || el.getAttribute('disabled') || el.classList.contains(CLS_HIDDEN) || !isVisible(el) || !el.classList.contains(CLS_ITEM);\n  };\n\n  Toolbar.prototype.eleFocus = function (closest$$1, pos) {\n    var sib = Object(closest$$1)[pos + 'ElementSibling'];\n\n    if (sib) {\n      var skipEle = this.eleContains(sib);\n\n      if (skipEle) {\n        this.eleFocus(sib, pos);\n        return;\n      }\n\n      this.elementFocus(sib);\n    } else if (this.tbarAlign) {\n      var elem = Object(closest$$1.parentElement)[pos + 'ElementSibling'];\n\n      if (!isNullOrUndefined(elem) && elem.children.length === 0) {\n        elem = Object(elem)[pos + 'ElementSibling'];\n      }\n\n      if (!isNullOrUndefined(elem) && elem.children.length > 0) {\n        if (pos === 'next') {\n          var el = elem.querySelector('.' + CLS_ITEM);\n\n          if (this.eleContains(el)) {\n            this.eleFocus(el, pos);\n          } else {\n            el.firstElementChild.focus();\n            this.activeEleSwitch(el);\n          }\n        } else {\n          var el = elem.lastElementChild;\n\n          if (this.eleContains(el)) {\n            this.eleFocus(el, pos);\n          } else {\n            this.elementFocus(el);\n          }\n        }\n      }\n    } else if (!isNullOrUndefined(closest$$1)) {\n      var tbrItems = this.element.querySelectorAll('.' + CLS_ITEMS + ' .' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + ')' + ':not(.' + CLS_DISABLE$2 + ')' + ':not(.' + CLS_HIDDEN + ')');\n\n      if (pos === 'next' && tbrItems) {\n        this.elementFocus(tbrItems[0]);\n      } else if (pos === 'previous' && tbrItems) {\n        this.elementFocus(tbrItems[tbrItems.length - 1]);\n      }\n    }\n  };\n\n  Toolbar.prototype.clickHandler = function (e) {\n    var _this = this;\n\n    var trgt = e.target;\n    var ele = this.element;\n    var isPopupElement = !isNullOrUndefined(closest(trgt, '.' + CLS_POPUPCLASS));\n    var clsList = trgt.classList;\n    var popupNav = closest(trgt, '.' + CLS_TBARNAV);\n\n    if (!popupNav) {\n      popupNav = trgt;\n    }\n\n    if (!ele.children[0].classList.contains('e-hscroll') && !ele.children[0].classList.contains('e-vscroll') && clsList.contains(CLS_TBARNAV)) {\n      clsList = trgt.querySelector('.e-icons').classList;\n    }\n\n    if (clsList.contains(CLS_POPUPICON) || clsList.contains(CLS_POPUPDOWN)) {\n      this.popupClickHandler(ele, popupNav, CLS_RTL$2);\n    }\n\n    var itemObj;\n    var clst = closest(e.target, '.' + CLS_ITEM);\n\n    if ((isNullOrUndefined(clst) || clst.classList.contains(CLS_DISABLE$2)) && !popupNav.classList.contains(CLS_TBARNAV)) {\n      return;\n    }\n\n    if (clst) {\n      var tempItem = this.items[this.tbarEle.indexOf(clst)];\n      itemObj = tempItem;\n    }\n\n    var eventArgs = {\n      originalEvent: e,\n      item: itemObj\n    };\n\n    if (itemObj && !isNullOrUndefined(itemObj.click)) {\n      this.trigger('items[' + this.tbarEle.indexOf(clst) + '].click', eventArgs);\n    }\n\n    if (!eventArgs.cancel) {\n      this.trigger('clicked', eventArgs, function (clickedArgs) {\n        if (!isNullOrUndefined(_this.popObj) && isPopupElement && !clickedArgs.cancel && _this.overflowMode === 'Popup' && clickedArgs.item && clickedArgs.item.type !== 'Input') {\n          _this.popObj.hide({\n            name: 'FadeOut',\n            duration: 100\n          });\n        }\n      });\n    }\n  };\n\n  Toolbar.prototype.popupClickHandler = function (ele, popupNav, CLS_RTL) {\n    var popObj = this.popObj;\n\n    if (isVisible(popObj.element)) {\n      popupNav.classList.remove(CLS_TBARNAVACT);\n      popObj.hide({\n        name: 'FadeOut',\n        duration: 100\n      });\n    } else {\n      if (ele.classList.contains(CLS_RTL)) {\n        popObj.enableRtl = true;\n        popObj.position = {\n          X: 'left',\n          Y: 'top'\n        };\n      }\n\n      if (popObj.offsetX === 0 && !ele.classList.contains(CLS_RTL)) {\n        popObj.enableRtl = false;\n        popObj.position = {\n          X: 'right',\n          Y: 'top'\n        };\n      }\n\n      popObj.dataBind();\n      popObj.refreshPosition();\n      popObj.element.style.top = this.getElementOffsetY() + 'px';\n\n      if (this.overflowMode === 'Extended') {\n        popObj.element.style.minHeight = '0px';\n      }\n\n      popupNav.classList.add(CLS_TBARNAVACT);\n      popObj.show({\n        name: 'FadeIn',\n        duration: 100\n      });\n    }\n  };\n  /**\r\n   * To Initialize the control rendering\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  Toolbar.prototype.render = function () {\n    this.initialize();\n    this.renderControl();\n    this.wireEvents();\n    this.renderComplete();\n  };\n\n  Toolbar.prototype.initialize = function () {\n    var width = formatUnit(this.width);\n    var height = formatUnit(this.height);\n\n    if (Browser.info.name !== 'msie' || this.height !== 'auto' || this.overflowMode === 'MultiRow') {\n      setStyleAttribute(this.element, {\n        'height': height\n      });\n    }\n\n    setStyleAttribute(this.element, {\n      'width': width\n    });\n    var ariaAttr = {\n      'role': 'toolbar',\n      'aria-disabled': 'false',\n      'aria-orientation': !this.isVertical ? 'horizontal' : 'vertical'\n    };\n    attributes(this.element, ariaAttr);\n\n    if (this.cssClass) {\n      addClass([this.element], this.cssClass.split(' '));\n    }\n  };\n\n  Toolbar.prototype.renderControl = function () {\n    var ele = this.element;\n    this.trgtEle = ele.children.length > 0 ? ele.querySelector('div') : null;\n    this.tbarAlgEle = {\n      lefts: [],\n      centers: [],\n      rights: []\n    };\n    this.renderItems();\n    this.renderLayout();\n  };\n\n  Toolbar.prototype.renderLayout = function () {\n    this.renderOverflowMode();\n\n    if (this.tbarAlign) {\n      this.itemPositioning();\n    }\n\n    if (this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(this.element, this.popObj.element)) {\n      this.popupRefresh(this.popObj.element, false);\n    }\n\n    this.separator();\n  };\n\n  Toolbar.prototype.itemsAlign = function (items, itemEleDom) {\n    var innerItem;\n    var innerPos;\n\n    if (!this.tbarEle) {\n      this.tbarEle = [];\n    }\n\n    for (var i = 0; i < items.length; i++) {\n      innerItem = this.renderSubComponent(items[parseInt(i.toString(), 10)], i);\n\n      if (this.tbarEle.indexOf(innerItem) === -1) {\n        this.tbarEle.push(innerItem);\n      }\n\n      if (!this.tbarAlign) {\n        this.tbarItemAlign(items[parseInt(i.toString(), 10)], itemEleDom, i);\n      }\n\n      innerPos = itemEleDom.querySelector('.e-toolbar-' + items[parseInt(i.toString(), 10)].align.toLowerCase());\n\n      if (innerPos) {\n        if (!(items[parseInt(i.toString(), 10)].showAlwaysInPopup && items[parseInt(i.toString(), 10)].overflow !== 'Show')) {\n          this.tbarAlgEle[(items[parseInt(i.toString(), 10)].align + 's').toLowerCase()].push(innerItem);\n        }\n\n        innerPos.appendChild(innerItem);\n      } else {\n        itemEleDom.appendChild(innerItem);\n      }\n    }\n\n    if (this.isReact) {\n      var portals = 'portals';\n      this.notify('render-react-toolbar-template', this[\"\" + portals]);\n      this.renderReactTemplates();\n    }\n  };\n  /**\r\n   * @hidden\r\n   * @returns {void}\r\n   */\n\n\n  Toolbar.prototype.changeOrientation = function () {\n    var ele = this.element;\n\n    if (this.isVertical) {\n      ele.classList.remove(CLS_VERTICAL);\n      this.isVertical = false;\n\n      if (this.height === 'auto' || this.height === '100%') {\n        ele.style.height = this.height;\n      }\n\n      ele.setAttribute('aria-orientation', 'horizontal');\n    } else {\n      ele.classList.add(CLS_VERTICAL);\n      this.isVertical = true;\n      ele.setAttribute('aria-orientation', 'vertical');\n      setStyleAttribute(this.element, {\n        'height': formatUnit(this.height),\n        'width': formatUnit(this.width)\n      });\n    }\n\n    this.destroyMode();\n    this.refreshOverflow();\n  };\n\n  Toolbar.prototype.initScroll = function (element, innerItems) {\n    if (!this.scrollModule && this.checkOverflow(element, innerItems[0])) {\n      if (this.tbarAlign) {\n        this.element.querySelector('.' + CLS_ITEMS + ' .' + CLS_TBARCENTER).removeAttribute('style');\n      }\n\n      if (this.isVertical) {\n        this.scrollModule = new VScroll({\n          scrollStep: this.scrollStep,\n          enableRtl: this.enableRtl\n        }, innerItems[0]);\n      } else {\n        this.scrollModule = new HScroll({\n          scrollStep: this.scrollStep,\n          enableRtl: this.enableRtl\n        }, innerItems[0]);\n      }\n\n      if (this.cssClass) {\n        addClass([innerItems[0]], this.cssClass.split(' '));\n      }\n\n      this.remove(this.scrollModule.element, CLS_TBARPOS);\n      setStyleAttribute(this.element, {\n        overflow: 'hidden'\n      });\n    }\n  };\n\n  Toolbar.prototype.itemWidthCal = function (items) {\n    var _this = this;\n\n    var width = 0;\n    var style;\n    [].slice.call(selectAll('.' + CLS_ITEM, items)).forEach(function (el) {\n      if (isVisible(el)) {\n        style = window.getComputedStyle(el);\n        width += _this.isVertical ? el.offsetHeight : el.offsetWidth;\n        width += parseFloat(_this.isVertical ? style.marginTop : style.marginRight);\n        width += parseFloat(_this.isVertical ? style.marginBottom : style.marginLeft);\n      }\n    });\n    return width;\n  };\n\n  Toolbar.prototype.getScrollCntEle = function (innerItem) {\n    var trgClass = this.isVertical ? '.e-vscroll-content' : '.e-hscroll-content';\n    return innerItem.querySelector(trgClass);\n  };\n\n  Toolbar.prototype.checkOverflow = function (element, innerItem) {\n    if (isNullOrUndefined(element) || isNullOrUndefined(innerItem) || !isVisible(element)) {\n      return false;\n    }\n\n    var eleWidth = this.isVertical ? element.offsetHeight : element.offsetWidth;\n    var itemWidth = this.isVertical ? innerItem.offsetHeight : innerItem.offsetWidth;\n\n    if (this.tbarAlign || this.scrollModule || eleWidth === itemWidth) {\n      itemWidth = this.itemWidthCal(this.scrollModule ? this.getScrollCntEle(innerItem) : innerItem);\n    }\n\n    var popNav = element.querySelector('.' + CLS_TBARNAV);\n    var scrollNav = element.querySelector('.' + CLS_TBARSCRLNAV);\n    var navEleWidth = 0;\n\n    if (popNav) {\n      navEleWidth = this.isVertical ? popNav.offsetHeight : popNav.offsetWidth;\n    } else if (scrollNav) {\n      navEleWidth = this.isVertical ? scrollNav.offsetHeight * 2 : scrollNav.offsetWidth * 2;\n    }\n\n    if (itemWidth > eleWidth - navEleWidth) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Refresh the whole Toolbar component without re-rendering.\r\n   * - It is used to manually refresh the Toolbar overflow modes such as scrollable, popup, multi row, and extended.\r\n   * - It will refresh the Toolbar component after loading items dynamically.\r\n   *\r\n   * @returns {void}.\r\n   */\n\n\n  Toolbar.prototype.refreshOverflow = function () {\n    this.resize();\n  };\n\n  Toolbar.prototype.toolbarAlign = function (innerItems) {\n    if (this.tbarAlign) {\n      this.add(innerItems, CLS_TBARPOS);\n      this.itemPositioning();\n    }\n  };\n\n  Toolbar.prototype.renderOverflowMode = function () {\n    var ele = this.element;\n    var innerItems = ele.querySelector('.' + CLS_ITEMS);\n    var priorityCheck = this.popupPriCount > 0;\n\n    if (ele && ele.children.length > 0) {\n      this.offsetWid = ele.offsetWidth;\n      this.remove(this.element, 'e-toolpop');\n\n      if (Browser.info.name === 'msie' && this.height === 'auto') {\n        ele.style.height = '';\n      }\n\n      switch (this.overflowMode) {\n        case 'Scrollable':\n          if (isNullOrUndefined(this.scrollModule)) {\n            this.initScroll(ele, [].slice.call(ele.getElementsByClassName(CLS_ITEMS)));\n          }\n\n          break;\n\n        case 'Popup':\n          this.add(this.element, 'e-toolpop');\n\n          if (this.tbarAlign) {\n            this.removePositioning();\n          }\n\n          if (this.checkOverflow(ele, innerItems) || priorityCheck) {\n            this.setOverflowAttributes(ele);\n          }\n\n          this.toolbarAlign(innerItems);\n          break;\n\n        case 'MultiRow':\n          this.add(innerItems, CLS_MULTIROW);\n\n          if (this.checkOverflow(ele, innerItems) && this.tbarAlign) {\n            this.removePositioning();\n            this.add(innerItems, CLS_MULTIROWPOS);\n          }\n\n          if (ele.style.overflow === 'hidden') {\n            ele.style.overflow = '';\n          }\n\n          if (Browser.info.name === 'msie' || ele.style.height !== 'auto') {\n            ele.style.height = 'auto';\n          }\n\n          break;\n\n        case 'Extended':\n          this.add(this.element, CLS_EXTEANDABLE_TOOLBAR);\n\n          if (this.checkOverflow(ele, innerItems) || priorityCheck) {\n            if (this.tbarAlign) {\n              this.removePositioning();\n            }\n\n            this.setOverflowAttributes(ele);\n          }\n\n          this.toolbarAlign(innerItems);\n      }\n    }\n  };\n\n  Toolbar.prototype.setOverflowAttributes = function (ele) {\n    this.createPopupEle(ele, [].slice.call(selectAll('.' + CLS_ITEMS + ' .' + CLS_ITEM, ele)));\n    var ariaAttr = {\n      'tabindex': '0',\n      'role': 'button',\n      'aria-haspopup': 'true',\n      'aria-label': 'overflow'\n    };\n    attributes(this.element.querySelector('.' + CLS_TBARNAV), ariaAttr);\n  };\n\n  Toolbar.prototype.separator = function () {\n    var element = this.element;\n    var eleItem = [].slice.call(element.querySelectorAll('.' + CLS_SEPARATOR));\n    var multiVar = element.querySelector('.' + CLS_MULTIROW_SEPARATOR);\n    var extendVar = element.querySelector('.' + CLS_EXTENDABLE_SEPARATOR);\n    var eleInlineItem = this.overflowMode === 'MultiRow' ? multiVar : extendVar;\n\n    if (eleInlineItem !== null) {\n      if (this.overflowMode === 'MultiRow') {\n        eleInlineItem.classList.remove(CLS_MULTIROW_SEPARATOR);\n      } else if (this.overflowMode === 'Extended') {\n        eleInlineItem.classList.remove(CLS_EXTENDABLE_SEPARATOR);\n      }\n    }\n\n    for (var i = 0; i <= eleItem.length - 1; i++) {\n      if (eleItem[parseInt(i.toString(), 10)].offsetLeft < 30 && eleItem[parseInt(i.toString(), 10)].offsetLeft !== 0) {\n        if (this.overflowMode === 'MultiRow') {\n          eleItem[parseInt(i.toString(), 10)].classList.add(CLS_MULTIROW_SEPARATOR);\n        } else if (this.overflowMode === 'Extended') {\n          eleItem[parseInt(i.toString(), 10)].classList.add(CLS_EXTENDABLE_SEPARATOR);\n        }\n      }\n    }\n  };\n\n  Toolbar.prototype.createPopupEle = function (ele, innerEle) {\n    var innerNav = ele.querySelector('.' + CLS_TBARNAV);\n    var vertical = this.isVertical;\n\n    if (!innerNav) {\n      this.createPopupIcon(ele);\n    }\n\n    innerNav = ele.querySelector('.' + CLS_TBARNAV);\n    var innerNavDom = vertical ? innerNav.offsetHeight : innerNav.offsetWidth;\n    var eleWidth = (vertical ? ele.offsetHeight : ele.offsetWidth) - innerNavDom;\n    this.element.classList.remove('e-rtl');\n    setStyleAttribute(this.element, {\n      direction: 'initial'\n    });\n    this.checkPriority(ele, innerEle, eleWidth, true);\n\n    if (this.enableRtl) {\n      this.element.classList.add('e-rtl');\n    }\n\n    this.element.style.removeProperty('direction');\n    this.createPopup();\n  };\n\n  Toolbar.prototype.pushingPoppedEle = function (tbarObj, popupPri, ele, eleHeight, sepHeight) {\n    var element = tbarObj.element;\n    var poppedEle = [].slice.call(selectAll('.' + CLS_POPUP, element.querySelector('.' + CLS_ITEMS)));\n    var nodes = selectAll('.' + CLS_TBAROVERFLOW, ele);\n    var nodeIndex = 0;\n    var nodePri = 0;\n    poppedEle.forEach(function (el, index) {\n      nodes = selectAll('.' + CLS_TBAROVERFLOW, ele);\n\n      if (el.classList.contains(CLS_TBAROVERFLOW) && nodes.length > 0) {\n        if (tbarObj.tbResize && nodes.length > index) {\n          ele.insertBefore(el, nodes[parseInt(index.toString(), 10)]);\n          ++nodePri;\n        } else {\n          ele.insertBefore(el, ele.children[nodes.length]);\n          ++nodePri;\n        }\n      } else if (el.classList.contains(CLS_TBAROVERFLOW)) {\n        ele.insertBefore(el, ele.firstChild);\n        ++nodePri;\n      } else if (tbarObj.tbResize && el.classList.contains(CLS_POPOVERFLOW) && ele.children.length > 0 && nodes.length === 0) {\n        ele.insertBefore(el, ele.firstChild);\n        ++nodePri;\n      } else if (el.classList.contains(CLS_POPOVERFLOW)) {\n        popupPri.push(el);\n      } else if (tbarObj.tbResize) {\n        ele.insertBefore(el, ele.childNodes[nodeIndex + nodePri]);\n        ++nodeIndex;\n      } else {\n        ele.appendChild(el);\n      }\n\n      if (el.classList.contains(CLS_SEPARATOR)) {\n        setStyleAttribute(el, {\n          display: '',\n          height: sepHeight + 'px'\n        });\n      } else {\n        setStyleAttribute(el, {\n          display: '',\n          height: eleHeight + 'px'\n        });\n      }\n    });\n    popupPri.forEach(function (el) {\n      ele.appendChild(el);\n    });\n    var tbarEle = selectAll('.' + CLS_ITEM, element.querySelector('.' + CLS_ITEMS));\n\n    for (var i = tbarEle.length - 1; i >= 0; i--) {\n      var tbarElement = tbarEle[parseInt(i.toString(), 10)];\n\n      if (tbarElement.classList.contains(CLS_SEPARATOR) && this.overflowMode !== 'Extended') {\n        setStyleAttribute(tbarElement, {\n          display: 'none'\n        });\n      } else {\n        break;\n      }\n    }\n  };\n\n  Toolbar.prototype.createPopup = function () {\n    var element = this.element;\n    var sepHeight;\n    var sepItem;\n\n    if (this.overflowMode === 'Extended') {\n      sepItem = element.querySelector('.' + CLS_SEPARATOR + ':not(.' + CLS_POPUP + ')');\n      sepHeight = element.style.height === 'auto' || element.style.height === '' ? null : sepItem.offsetHeight;\n    }\n\n    var eleItem = element.querySelector('.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_POPUP + ')');\n    var eleHeight = element.style.height === 'auto' || element.style.height === '' ? null : eleItem && eleItem.offsetHeight;\n    var ele;\n    var popupPri = [];\n\n    if (select('#' + element.id + '_popup.' + CLS_POPUPCLASS, element)) {\n      ele = select('#' + element.id + '_popup.' + CLS_POPUPCLASS, element);\n    } else {\n      var extendEle = this.createElement('div', {\n        id: element.id + '_popup',\n        className: CLS_POPUPCLASS + ' ' + CLS_EXTENDABLECLASS\n      });\n      var popupEle = this.createElement('div', {\n        id: element.id + '_popup',\n        className: CLS_POPUPCLASS\n      });\n      ele = this.overflowMode === 'Extended' ? extendEle : popupEle;\n    }\n\n    this.pushingPoppedEle(this, popupPri, ele, eleHeight, sepHeight);\n    this.popupInit(element, ele);\n  };\n\n  Toolbar.prototype.getElementOffsetY = function () {\n    return this.overflowMode === 'Extended' && window.getComputedStyle(this.element).getPropertyValue('box-sizing') === 'border-box' ? this.element.clientHeight : this.element.offsetHeight;\n  };\n\n  Toolbar.prototype.popupInit = function (element, ele) {\n    if (!this.popObj) {\n      element.appendChild(ele);\n\n      if (this.cssClass) {\n        addClass([ele], this.cssClass.split(' '));\n      }\n\n      setStyleAttribute(this.element, {\n        overflow: ''\n      });\n      var eleStyles = window.getComputedStyle(this.element);\n      var popup = new Popup(null, {\n        relateTo: this.element,\n        offsetY: this.isVertical ? 0 : this.getElementOffsetY(),\n        enableRtl: this.enableRtl,\n        open: this.popupOpen.bind(this),\n        close: this.popupClose.bind(this),\n        collision: {\n          Y: this.enableCollision ? 'flip' : 'none'\n        },\n        position: this.enableRtl ? {\n          X: 'left',\n          Y: 'top'\n        } : {\n          X: 'right',\n          Y: 'top'\n        }\n      });\n\n      if (this.overflowMode === 'Extended') {\n        popup.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;\n        popup.offsetX = 0;\n      }\n\n      popup.appendTo(ele);\n      EventHandler.add(document, 'scroll', this.docEvent.bind(this));\n      EventHandler.add(document, 'click ', this.docEvent.bind(this));\n      popup.element.style.maxHeight = popup.element.offsetHeight + 'px';\n\n      if (this.isVertical) {\n        popup.element.style.visibility = 'hidden';\n      }\n\n      if (this.isExtendedOpen) {\n        var popupNav = this.element.querySelector('.' + CLS_TBARNAV);\n        popupNav.classList.add(CLS_TBARNAVACT);\n        classList(popupNav.firstElementChild, [CLS_POPUPICON], [CLS_POPUPDOWN]);\n        this.element.querySelector('.' + CLS_EXTENDABLECLASS).classList.add(CLS_POPUPOPEN);\n      } else {\n        popup.hide();\n      }\n\n      this.popObj = popup;\n    } else {\n      var popupEle = this.popObj.element;\n      setStyleAttribute(popupEle, {\n        maxHeight: '',\n        display: 'block'\n      });\n      setStyleAttribute(popupEle, {\n        maxHeight: popupEle.offsetHeight + 'px',\n        display: ''\n      });\n    }\n  };\n\n  Toolbar.prototype.tbarPopupHandler = function (isOpen) {\n    if (this.overflowMode === 'Extended') {\n      if (isOpen) {\n        this.add(this.element, CLS_EXTENDEDPOPOPEN);\n      } else {\n        this.remove(this.element, CLS_EXTENDEDPOPOPEN);\n      }\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Toolbar.prototype.popupOpen = function (e) {\n    var popObj = this.popObj;\n\n    if (!this.isVertical) {\n      popObj.offsetY = this.getElementOffsetY();\n      popObj.dataBind();\n    }\n\n    var popupEle = this.popObj.element;\n    var toolEle = this.popObj.element.parentElement;\n    var popupNav = toolEle.querySelector('.' + CLS_TBARNAV);\n    popupNav.setAttribute('aria-expanded', 'true');\n    setStyleAttribute(popObj.element, {\n      height: 'auto',\n      maxHeight: ''\n    });\n    popObj.element.style.maxHeight = popObj.element.offsetHeight + 'px';\n\n    if (this.overflowMode === 'Extended') {\n      popObj.element.style.minHeight = '';\n    }\n\n    var popupElePos = popupEle.offsetTop + popupEle.offsetHeight + calculatePosition(toolEle).top;\n    var popIcon = popupNav.firstElementChild;\n    popupNav.classList.add(CLS_TBARNAVACT);\n    classList(popIcon, [CLS_POPUPICON], [CLS_POPUPDOWN]);\n    this.tbarPopupHandler(true);\n    var scrollVal = isNullOrUndefined(window.scrollY) ? 0 : window.scrollY;\n\n    if (!this.isVertical && window.innerHeight + scrollVal < popupElePos && this.element.offsetTop < popupEle.offsetHeight) {\n      var overflowHeight = popupEle.offsetHeight - (popupElePos - window.innerHeight - scrollVal + 5);\n      popObj.height = overflowHeight + 'px';\n\n      for (var i = 0; i <= popupEle.childElementCount; i++) {\n        var ele = popupEle.children[parseInt(i.toString(), 10)];\n\n        if (ele.offsetTop + ele.offsetHeight > overflowHeight) {\n          overflowHeight = ele.offsetTop;\n          break;\n        }\n      }\n\n      setStyleAttribute(popObj.element, {\n        maxHeight: overflowHeight + 'px'\n      });\n    } else if (this.isVertical) {\n      var tbEleData = this.element.getBoundingClientRect();\n      setStyleAttribute(popObj.element, {\n        maxHeight: tbEleData.top + this.element.offsetHeight + 'px',\n        bottom: 0,\n        visibility: ''\n      });\n    }\n\n    if (popObj) {\n      var popupOffset = popupEle.getBoundingClientRect();\n\n      if (popupOffset.right > document.documentElement.clientWidth && popupOffset.width > toolEle.getBoundingClientRect().width) {\n        popObj.collision = {\n          Y: 'none'\n        };\n        popObj.dataBind();\n      }\n\n      popObj.refreshPosition();\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Toolbar.prototype.popupClose = function (e) {\n    var element = this.element;\n    var popupNav = element.querySelector('.' + CLS_TBARNAV);\n    popupNav.setAttribute('aria-expanded', 'false');\n    var popIcon = popupNav.firstElementChild;\n    popupNav.classList.remove(CLS_TBARNAVACT);\n    classList(popIcon, [CLS_POPUPDOWN], [CLS_POPUPICON]);\n    this.tbarPopupHandler(false);\n  };\n\n  Toolbar.prototype.checkPriority = function (ele, inEle, eleWidth, pre) {\n    var popPriority = this.popupPriCount > 0;\n    var len = inEle.length;\n    var eleWid = eleWidth;\n    var eleOffset;\n    var checkoffset;\n    var sepCheck = 0;\n    var itemCount = 0;\n    var itemPopCount = 0;\n\n    var checkClass = function (ele, val) {\n      var rVal = false;\n      val.forEach(function (cls) {\n        if (ele.classList.contains(cls)) {\n          rVal = true;\n        }\n      });\n      return rVal;\n    };\n\n    for (var i = len - 1; i >= 0; i--) {\n      var mrgn = void 0;\n      var compuStyle = window.getComputedStyle(inEle[parseInt(i.toString(), 10)]);\n\n      if (this.isVertical) {\n        mrgn = parseFloat(compuStyle.marginTop);\n        mrgn += parseFloat(compuStyle.marginBottom);\n      } else {\n        mrgn = parseFloat(compuStyle.marginRight);\n        mrgn += parseFloat(compuStyle.marginLeft);\n      }\n\n      var fstEleCheck = inEle[parseInt(i.toString(), 10)] === this.tbarEle[0];\n\n      if (fstEleCheck) {\n        this.tbarEleMrgn = mrgn;\n      }\n\n      eleOffset = this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth;\n      var eleWid_1 = fstEleCheck ? eleOffset + mrgn : eleOffset;\n\n      if (checkClass(inEle[parseInt(i.toString(), 10)], [CLS_POPPRI]) && popPriority) {\n        inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);\n\n        if (this.isVertical) {\n          setStyleAttribute(inEle[parseInt(i.toString(), 10)], {\n            display: 'none',\n            minHeight: eleWid_1 + 'px'\n          });\n        } else {\n          setStyleAttribute(inEle[parseInt(i.toString(), 10)], {\n            display: 'none',\n            minWidth: eleWid_1 + 'px'\n          });\n        }\n\n        itemPopCount++;\n      }\n\n      if (this.isVertical) {\n        checkoffset = inEle[parseInt(i.toString(), 10)].offsetTop + inEle[parseInt(i.toString(), 10)].offsetHeight + mrgn > eleWidth;\n      } else {\n        checkoffset = inEle[parseInt(i.toString(), 10)].offsetLeft + inEle[parseInt(i.toString(), 10)].offsetWidth + mrgn > eleWidth;\n      }\n\n      if (checkoffset) {\n        if (inEle[parseInt(i.toString(), 10)].classList.contains(CLS_SEPARATOR)) {\n          if (this.overflowMode === 'Extended') {\n            if (itemCount === itemPopCount) {\n              var sepEle = inEle[parseInt(i.toString(), 10)];\n\n              if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {\n                inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);\n                itemPopCount++;\n              }\n            }\n\n            itemCount++;\n          } else if (this.overflowMode === 'Popup') {\n            if (sepCheck > 0 && itemCount === itemPopCount) {\n              var sepEle = inEle[i + itemCount + (sepCheck - 1)];\n\n              if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {\n                setStyleAttribute(sepEle, {\n                  display: 'none'\n                });\n              }\n            }\n\n            sepCheck++;\n            itemCount = 0;\n            itemPopCount = 0;\n          }\n        } else {\n          itemCount++;\n        }\n\n        if (inEle[parseInt(i.toString(), 10)].classList.contains(CLS_TBAROVERFLOW) && pre) {\n          eleWidth -= (this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth) + mrgn;\n        } else if (!checkClass(inEle[parseInt(i.toString(), 10)], [CLS_SEPARATOR, CLS_TBARIGNORE])) {\n          inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);\n\n          if (this.isVertical) {\n            setStyleAttribute(inEle[parseInt(i.toString(), 10)], {\n              display: 'none',\n              minHeight: eleWid_1 + 'px'\n            });\n          } else {\n            setStyleAttribute(inEle[parseInt(i.toString(), 10)], {\n              display: 'none',\n              minWidth: eleWid_1 + 'px'\n            });\n          }\n\n          itemPopCount++;\n        } else {\n          eleWidth -= (this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth) + mrgn;\n        }\n      }\n    }\n\n    if (pre) {\n      var popedEle = selectAll('.' + CLS_ITEM + ':not(.' + CLS_POPUP + ')', this.element);\n      this.checkPriority(ele, popedEle, eleWid, false);\n    }\n  };\n\n  Toolbar.prototype.createPopupIcon = function (element) {\n    var id = element.id.concat('_nav');\n    var className = 'e-' + element.id.concat('_nav ' + CLS_POPUPNAV);\n    className = this.overflowMode === 'Extended' ? className + ' ' + CLS_EXTENDPOPUP : className;\n    var nav = this.createElement('div', {\n      id: id,\n      className: className\n    });\n\n    if (Browser.info.name === 'msie' || Browser.info.name === 'edge') {\n      nav.classList.add('e-ie-align');\n    }\n\n    var navItem = this.createElement('div', {\n      className: CLS_POPUPDOWN + ' e-icons'\n    });\n    nav.appendChild(navItem);\n    nav.setAttribute('tabindex', '0');\n    nav.setAttribute('role', 'button');\n    element.appendChild(nav);\n  };\n\n  Toolbar.prototype.tbarPriRef = function (inEle, indx, sepPri, el, des, elWid, wid, ig) {\n    var ignoreCount = ig;\n    var popEle = this.popObj.element;\n    var query = '.' + CLS_ITEM + ':not(.' + CLS_SEPARATOR + '):not(.' + CLS_TBAROVERFLOW + ')';\n    var priEleCnt = selectAll('.' + CLS_POPUP + ':not(.' + CLS_TBAROVERFLOW + ')', popEle).length;\n\n    var checkClass = function (ele, val) {\n      return ele.classList.contains(val);\n    };\n\n    if (selectAll(query, inEle).length === 0) {\n      var eleSep = inEle.children[indx - (indx - sepPri) - 1];\n      var ignoreCheck = !isNullOrUndefined(eleSep) && checkClass(eleSep, CLS_TBARIGNORE);\n\n      if (!isNullOrUndefined(eleSep) && checkClass(eleSep, CLS_SEPARATOR) && !isVisible(eleSep) || ignoreCheck) {\n        var sepDisplay = 'none';\n        eleSep.style.display = 'inherit';\n        var eleSepWidth = eleSep.offsetWidth + parseFloat(window.getComputedStyle(eleSep).marginRight) * 2;\n        var prevSep = eleSep.previousElementSibling;\n\n        if (elWid + eleSepWidth < wid || des) {\n          inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);\n\n          if (!isNullOrUndefined(prevSep)) {\n            prevSep.style.display = '';\n          }\n        } else {\n          if (prevSep.classList.contains(CLS_SEPARATOR)) {\n            prevSep.style.display = sepDisplay;\n          }\n        }\n\n        eleSep.style.display = '';\n      } else {\n        inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);\n      }\n    } else {\n      inEle.insertBefore(el, inEle.children[indx + ignoreCount - priEleCnt]);\n    }\n  };\n\n  Toolbar.prototype.popupRefresh = function (popupEle, destroy) {\n    var _this = this;\n\n    var ele = this.element;\n    var isVer = this.isVertical;\n    var innerEle = ele.querySelector('.' + CLS_ITEMS);\n    var popNav = ele.querySelector('.' + CLS_TBARNAV);\n\n    if (isNullOrUndefined(popNav)) {\n      return;\n    }\n\n    innerEle.removeAttribute('style');\n    popupEle.style.display = 'block';\n    var dimension;\n\n    if (isVer) {\n      dimension = ele.offsetHeight - (popNav.offsetHeight + innerEle.offsetHeight);\n    } else {\n      dimension = ele.offsetWidth - (popNav.offsetWidth + innerEle.offsetWidth);\n    }\n\n    var popupEleWidth = 0;\n    [].slice.call(popupEle.children).forEach(function (el) {\n      popupEleWidth += _this.popupEleWidth(el);\n      setStyleAttribute(el, {\n        'position': ''\n      });\n    });\n\n    if (dimension + (isVer ? popNav.offsetHeight : popNav.offsetWidth) > popupEleWidth && this.popupPriCount === 0) {\n      destroy = true;\n    }\n\n    this.popupEleRefresh(dimension, popupEle, destroy);\n    popupEle.style.display = '';\n\n    if (popupEle.children.length === 0 && popNav && this.popObj) {\n      detach(popNav);\n      popNav = null;\n      this.popObj.destroy();\n      detach(this.popObj.element);\n      this.popObj = null;\n    }\n  };\n\n  Toolbar.prototype.ignoreEleFetch = function (index, innerEle) {\n    var ignoreEle = [].slice.call(innerEle.querySelectorAll('.' + CLS_TBARIGNORE));\n    var ignoreInx = [];\n    var count = 0;\n\n    if (ignoreEle.length > 0) {\n      ignoreEle.forEach(function (ele) {\n        ignoreInx.push([].slice.call(innerEle.children).indexOf(ele));\n      });\n    } else {\n      return 0;\n    }\n\n    ignoreInx.forEach(function (val) {\n      if (val <= index) {\n        count++;\n      }\n    });\n    return count;\n  };\n\n  Toolbar.prototype.checkPopupRefresh = function (root, popEle) {\n    popEle.style.display = 'block';\n    var elWid = this.popupEleWidth(popEle.firstElementChild);\n    popEle.firstElementChild.style.removeProperty('Position');\n    var tbarWidth = root.offsetWidth - root.querySelector('.' + CLS_TBARNAV).offsetWidth;\n    var tbarItemsWid = root.querySelector('.' + CLS_ITEMS).offsetWidth;\n    popEle.style.removeProperty('display');\n\n    if (tbarWidth > elWid + tbarItemsWid) {\n      return true;\n    }\n\n    return false;\n  };\n\n  Toolbar.prototype.popupEleWidth = function (el) {\n    el.style.position = 'absolute';\n    var elWidth = this.isVertical ? el.offsetHeight : el.offsetWidth;\n    var btnText = el.querySelector('.' + CLS_TBARBTNTEXT);\n\n    if (el.classList.contains('e-tbtn-align') || el.classList.contains(CLS_TBARTEXT)) {\n      var btn = el.children[0];\n\n      if (!isNullOrUndefined(btnText) && el.classList.contains(CLS_TBARTEXT)) {\n        btnText.style.display = 'none';\n      } else if (!isNullOrUndefined(btnText) && el.classList.contains(CLS_POPUPTEXT)) {\n        btnText.style.display = 'block';\n      }\n\n      btn.style.minWidth = '0%';\n      elWidth = parseFloat(!this.isVertical ? el.style.minWidth : el.style.minHeight);\n      btn.style.minWidth = '';\n      btn.style.minHeight = '';\n\n      if (!isNullOrUndefined(btnText)) {\n        btnText.style.display = '';\n      }\n    }\n\n    return elWidth;\n  };\n\n  Toolbar.prototype.popupEleRefresh = function (width, popupEle, destroy) {\n    var popPriority = this.popupPriCount > 0;\n    var eleSplice = this.tbarEle;\n    var priEleCnt;\n    var index;\n    var innerEle = this.element.querySelector('.' + CLS_ITEMS);\n    var ignoreCount = 0;\n\n    var _loop_1 = function (el) {\n      if (el.classList.contains(CLS_POPPRI) && popPriority && !destroy) {\n        return \"continue\";\n      }\n\n      var elWidth = this_1.popupEleWidth(el);\n\n      if (el === this_1.tbarEle[0]) {\n        elWidth += this_1.tbarEleMrgn;\n      }\n\n      el.style.position = '';\n\n      if (elWidth < width || destroy) {\n        setStyleAttribute(el, {\n          minWidth: '',\n          height: '',\n          minHeight: ''\n        });\n\n        if (!el.classList.contains(CLS_POPOVERFLOW)) {\n          el.classList.remove(CLS_POPUP);\n        }\n\n        index = this_1.tbarEle.indexOf(el);\n\n        if (this_1.tbarAlign) {\n          var pos = this_1.items[parseInt(index.toString(), 10)].align;\n          index = this_1.tbarAlgEle[(pos + 's').toLowerCase()].indexOf(el);\n          eleSplice = this_1.tbarAlgEle[(pos + 's').toLowerCase()];\n          innerEle = this_1.element.querySelector('.' + CLS_ITEMS + ' .' + 'e-toolbar-' + pos.toLowerCase());\n        }\n\n        var sepBeforePri_1 = 0;\n\n        if (this_1.overflowMode !== 'Extended') {\n          eleSplice.slice(0, index).forEach(function (el) {\n            if (el.classList.contains(CLS_TBAROVERFLOW) || el.classList.contains(CLS_SEPARATOR)) {\n              if (el.classList.contains(CLS_SEPARATOR)) {\n                el.style.display = '';\n                width -= el.offsetWidth;\n              }\n\n              sepBeforePri_1++;\n            }\n          });\n        }\n\n        ignoreCount = this_1.ignoreEleFetch(index, innerEle);\n\n        if (el.classList.contains(CLS_TBAROVERFLOW)) {\n          this_1.tbarPriRef(innerEle, index, sepBeforePri_1, el, destroy, elWidth, width, ignoreCount);\n          width -= el.offsetWidth;\n        } else if (index === 0) {\n          innerEle.insertBefore(el, innerEle.firstChild);\n          width -= el.offsetWidth;\n        } else {\n          priEleCnt = selectAll('.' + CLS_TBAROVERFLOW, this_1.popObj.element).length;\n          innerEle.insertBefore(el, innerEle.children[index + ignoreCount - priEleCnt]);\n          width -= el.offsetWidth;\n        }\n\n        el.style.height = '';\n      } else {\n        return \"break\";\n      }\n    };\n\n    var this_1 = this;\n\n    for (var _i = 0, _a = [].slice.call(popupEle.children); _i < _a.length; _i++) {\n      var el = _a[_i];\n\n      var state_1 = _loop_1(el);\n\n      if (state_1 === \"break\") break;\n    }\n\n    var checkOverflow = this.checkOverflow(this.element, this.element.getElementsByClassName(CLS_ITEMS)[0]);\n\n    if (checkOverflow && !destroy) {\n      this.renderOverflowMode();\n    }\n  };\n\n  Toolbar.prototype.removePositioning = function () {\n    var item = this.element.querySelector('.' + CLS_ITEMS);\n\n    if (isNullOrUndefined(item) || !item.classList.contains(CLS_TBARPOS)) {\n      return;\n    }\n\n    this.remove(item, CLS_TBARPOS);\n    var innerItem = [].slice.call(item.childNodes);\n    innerItem[1].removeAttribute('style');\n    innerItem[2].removeAttribute('style');\n  };\n\n  Toolbar.prototype.refreshPositioning = function () {\n    var item = this.element.querySelector('.' + CLS_ITEMS);\n    this.add(item, CLS_TBARPOS);\n    this.itemPositioning();\n  };\n\n  Toolbar.prototype.itemPositioning = function () {\n    var item = this.element.querySelector('.' + CLS_ITEMS);\n    var margin;\n\n    if (isNullOrUndefined(item) || !item.classList.contains(CLS_TBARPOS)) {\n      return;\n    }\n\n    var popupNav = this.element.querySelector('.' + CLS_TBARNAV);\n    var innerItem;\n\n    if (this.scrollModule) {\n      var trgClass = this.isVertical ? CLS_VSCROLLCNT : CLS_HSCROLLCNT;\n      innerItem = [].slice.call(item.querySelector('.' + trgClass).children);\n    } else {\n      innerItem = [].slice.call(item.childNodes);\n    }\n\n    if (this.isVertical) {\n      margin = innerItem[0].offsetHeight + innerItem[2].offsetHeight;\n    } else {\n      margin = innerItem[0].offsetWidth + innerItem[2].offsetWidth;\n    }\n\n    var tbarWid = this.isVertical ? this.element.offsetHeight : this.element.offsetWidth;\n\n    if (popupNav) {\n      tbarWid -= this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth;\n      var popWid = (this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth) + 'px';\n      innerItem[2].removeAttribute('style');\n\n      if (this.isVertical) {\n        if (this.enableRtl) {\n          innerItem[2].style.top = popWid;\n        } else {\n          innerItem[2].style.bottom = popWid;\n        }\n      } else {\n        if (this.enableRtl) {\n          innerItem[2].style.left = popWid;\n        } else {\n          innerItem[2].style.right = popWid;\n        }\n      }\n    }\n\n    if (tbarWid <= margin) {\n      return;\n    }\n\n    var value = (tbarWid - margin - (!this.isVertical ? innerItem[1].offsetWidth : innerItem[1].offsetHeight)) / 2;\n    innerItem[1].removeAttribute('style');\n    var mrgn = (!this.isVertical ? innerItem[0].offsetWidth : innerItem[0].offsetHeight) + value + 'px';\n\n    if (this.isVertical) {\n      if (this.enableRtl) {\n        innerItem[1].style.marginBottom = mrgn;\n      } else {\n        innerItem[1].style.marginTop = mrgn;\n      }\n    } else {\n      if (this.enableRtl) {\n        innerItem[1].style.marginRight = mrgn;\n      } else {\n        innerItem[1].style.marginLeft = mrgn;\n      }\n    }\n  };\n\n  Toolbar.prototype.tbarItemAlign = function (item, itemEle, pos) {\n    var _this = this;\n\n    if (item.showAlwaysInPopup && item.overflow !== 'Show') {\n      return;\n    }\n\n    var alignDiv = [];\n    alignDiv.push(this.createElement('div', {\n      className: CLS_TBARLEFT\n    }));\n    alignDiv.push(this.createElement('div', {\n      className: CLS_TBARCENTER\n    }));\n    alignDiv.push(this.createElement('div', {\n      className: CLS_TBARRIGHT\n    }));\n\n    if (pos === 0 && item.align !== 'Left') {\n      alignDiv.forEach(function (ele) {\n        itemEle.appendChild(ele);\n      });\n      this.tbarAlign = true;\n      this.add(itemEle, CLS_TBARPOS);\n    } else if (item.align !== 'Left') {\n      var alignEle = itemEle.childNodes;\n      var leftAlign_1 = alignDiv[0];\n      [].slice.call(alignEle).forEach(function (el) {\n        _this.tbarAlgEle.lefts.push(el);\n\n        leftAlign_1.appendChild(el);\n      });\n      itemEle.appendChild(leftAlign_1);\n      itemEle.appendChild(alignDiv[1]);\n      itemEle.appendChild(alignDiv[2]);\n      this.tbarAlign = true;\n      this.add(itemEle, CLS_TBARPOS);\n    }\n  };\n\n  Toolbar.prototype.ctrlTemplate = function () {\n    var _this = this;\n\n    this.ctrlTem = this.trgtEle.cloneNode(true);\n    this.add(this.trgtEle, CLS_ITEMS);\n    this.tbarEle = [];\n    var innerEle = [].slice.call(this.trgtEle.children);\n    innerEle.forEach(function (ele) {\n      if (ele.tagName === 'DIV') {\n        _this.tbarEle.push(ele);\n\n        if (!isNullOrUndefined(ele.firstElementChild)) {\n          ele.firstElementChild.setAttribute('aria-disabled', 'false');\n        }\n\n        _this.add(ele, CLS_ITEM);\n      }\n    });\n  };\n\n  Toolbar.prototype.renderItems = function () {\n    var ele = this.element;\n    var items = this.items;\n\n    if (this.trgtEle != null) {\n      this.ctrlTemplate();\n    } else if (ele && items.length > 0) {\n      var itemEleDom = void 0;\n\n      if (ele && ele.children.length > 0) {\n        itemEleDom = ele.querySelector('.' + CLS_ITEMS);\n      }\n\n      if (!itemEleDom) {\n        itemEleDom = this.createElement('div', {\n          className: CLS_ITEMS\n        });\n      }\n\n      this.itemsAlign(items, itemEleDom);\n      ele.appendChild(itemEleDom);\n    }\n  };\n\n  Toolbar.prototype.setAttr = function (attr, element) {\n    var key = Object.keys(attr);\n    var keyVal;\n\n    for (var i = 0; i < key.length; i++) {\n      keyVal = key[parseInt(i.toString(), 10)];\n\n      if (keyVal === 'class') {\n        this.add(element, attr[\"\" + keyVal]);\n      } else {\n        element.setAttribute(keyVal, attr[\"\" + keyVal]);\n      }\n    }\n  };\n  /**\r\n   * Enables or disables the specified Toolbar item.\r\n   *\r\n   * @param  {number|HTMLElement|NodeList} items - DOM element or an array of items to be enabled or disabled.\r\n   * @param  {boolean} isEnable  - Boolean value that determines whether the command should be enabled or disabled.\r\n   * By default, `isEnable` is set to true.\r\n   * @returns {void}.\r\n   */\n\n\n  Toolbar.prototype.enableItems = function (items, isEnable) {\n    var elements = items;\n    var len = elements.length;\n    var ele;\n\n    if (isNullOrUndefined(isEnable)) {\n      isEnable = true;\n    }\n\n    var enable = function (isEnable, ele) {\n      if (isEnable) {\n        ele.classList.remove(CLS_DISABLE$2);\n\n        if (!isNullOrUndefined(ele.firstElementChild)) {\n          ele.firstElementChild.setAttribute('aria-disabled', 'false');\n        }\n      } else {\n        ele.classList.add(CLS_DISABLE$2);\n\n        if (!isNullOrUndefined(ele.firstElementChild)) {\n          ele.firstElementChild.setAttribute('aria-disabled', 'true');\n        }\n      }\n    };\n\n    if (!isNullOrUndefined(len) && len >= 1) {\n      for (var a = 0, element = [].slice.call(elements); a < len; a++) {\n        var itemElement = element[parseInt(a.toString(), 10)];\n\n        if (typeof itemElement === 'number') {\n          ele = this.getElementByIndex(itemElement);\n\n          if (isNullOrUndefined(ele)) {\n            return;\n          } else {\n            elements[parseInt(a.toString(), 10)] = ele;\n          }\n        } else {\n          ele = itemElement;\n        }\n\n        enable(isEnable, ele);\n      }\n\n      if (isEnable) {\n        removeClass(elements, CLS_DISABLE$2);\n      } else {\n        addClass(elements, CLS_DISABLE$2);\n      }\n    } else {\n      if (typeof elements === 'number') {\n        ele = this.getElementByIndex(elements);\n\n        if (isNullOrUndefined(ele)) {\n          return;\n        }\n      } else {\n        ele = items;\n      }\n\n      enable(isEnable, ele);\n    }\n  };\n\n  Toolbar.prototype.getElementByIndex = function (index) {\n    if (this.tbarEle[parseInt(index.toString(), 10)]) {\n      return this.tbarEle[parseInt(index.toString(), 10)];\n    }\n\n    return null;\n  };\n  /**\r\n   * Adds new items to the Toolbar that accepts an array as Toolbar items.\r\n   *\r\n   * @param  {ItemModel[]} items - DOM element or an array of items to be added to the Toolbar.\r\n   * @param  {number} index - Number value that determines where the command is to be added. By default, index is 0.\r\n   * @returns {void}.\r\n   */\n\n\n  Toolbar.prototype.addItems = function (items, index) {\n    var innerItems;\n    this.extendedOpen();\n    var itemsDiv = this.element.querySelector('.' + CLS_ITEMS);\n\n    if (isNullOrUndefined(itemsDiv)) {\n      this.itemsRerender(items);\n      return;\n    }\n\n    var innerEle;\n    var itemAgn = 'Left';\n\n    if (isNullOrUndefined(index)) {\n      index = 0;\n    }\n\n    items.forEach(function (e) {\n      if (!isNullOrUndefined(e.align) && e.align !== 'Left' && itemAgn === 'Left') {\n        itemAgn = e.align;\n      }\n    });\n\n    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n      var item = items_1[_i];\n\n      if (isNullOrUndefined(item.type)) {\n        item.type = 'Button';\n      }\n\n      innerItems = selectAll('.' + CLS_ITEM, this.element);\n      item.align = itemAgn;\n      innerEle = this.renderSubComponent(item, index);\n\n      if (this.tbarEle.length >= index && innerItems.length >= 0) {\n        if (isNullOrUndefined(this.scrollModule)) {\n          this.destroyMode();\n        }\n\n        var algIndex = item.align[0] === 'L' ? 0 : item.align[0] === 'C' ? 1 : 2;\n        var ele = void 0;\n\n        if (!this.tbarAlign && itemAgn !== 'Left') {\n          this.tbarItemAlign(item, itemsDiv, 1);\n          this.tbarAlign = true;\n          ele = closest(innerItems[0], '.' + CLS_ITEMS).children[parseInt(algIndex.toString(), 10)];\n          ele.appendChild(innerEle);\n          this.tbarAlgEle[(item.align + 's').toLowerCase()].push(innerEle);\n          this.refreshPositioning();\n        } else if (this.tbarAlign) {\n          ele = closest(innerItems[0], '.' + CLS_ITEMS).children[parseInt(algIndex.toString(), 10)];\n          ele.insertBefore(innerEle, ele.children[parseInt(index.toString(), 10)]);\n          this.tbarAlgEle[(item.align + 's').toLowerCase()].splice(index, 0, innerEle);\n          this.refreshPositioning();\n        } else if (innerItems.length === 0) {\n          innerItems = selectAll('.' + CLS_ITEMS, this.element);\n          innerItems[0].appendChild(innerEle);\n        } else {\n          innerItems[0].parentNode.insertBefore(innerEle, innerItems[parseInt(index.toString(), 10)]);\n        }\n\n        this.items.splice(index, 0, item);\n\n        if (item.template) {\n          this.tbarEle.splice(this.tbarEle.length - 1, 1);\n        }\n\n        this.tbarEle.splice(index, 0, innerEle);\n        index++;\n        this.offsetWid = itemsDiv.offsetWidth;\n      }\n    }\n\n    itemsDiv.style.width = '';\n    this.renderOverflowMode();\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n  /**\r\n   * Removes the items from the Toolbar. Acceptable arguments are index of item/HTMLElement/node list.\r\n   *\r\n   * @param  {number|HTMLElement|NodeList|HTMLElement[]} args\r\n   * Index or DOM element or an Array of item which is to be removed from the Toolbar.\r\n   * @returns {void}.\r\n   */\n\n\n  Toolbar.prototype.removeItems = function (args) {\n    var elements = args;\n    var index;\n    var innerItems = [].slice.call(selectAll('.' + CLS_ITEM, this.element));\n\n    if (typeof elements === 'number') {\n      index = parseInt(args.toString(), 10);\n      this.removeItemByIndex(index, innerItems);\n    } else {\n      if (elements && elements.length > 1) {\n        for (var _i = 0, _a = [].slice.call(elements); _i < _a.length; _i++) {\n          var ele = _a[_i];\n          index = this.tbarEle.indexOf(ele);\n          this.removeItemByIndex(index, innerItems);\n          innerItems = selectAll('.' + CLS_ITEM, this.element);\n        }\n      } else {\n        var ele = elements && elements.length && elements.length === 1 ? elements[0] : args;\n        index = innerItems.indexOf(ele);\n        this.removeItemByIndex(index, innerItems);\n      }\n    }\n\n    this.resize();\n  };\n\n  Toolbar.prototype.removeItemByIndex = function (index, innerItems) {\n    if (this.tbarEle[parseInt(index.toString(), 10)] && innerItems[parseInt(index.toString(), 10)]) {\n      var eleIdx = this.tbarEle.indexOf(innerItems[parseInt(index.toString(), 10)]);\n\n      if (this.tbarAlign) {\n        var indexAgn = this.tbarAlgEle[(this.items[parseInt(eleIdx.toString(), 10)].align + 's').toLowerCase()].indexOf(this.tbarEle[parseInt(eleIdx.toString(), 10)]);\n        this.tbarAlgEle[(this.items[parseInt(eleIdx.toString(), 10)].align + 's').toLowerCase()].splice(parseInt(indexAgn.toString(), 10), 1);\n      }\n\n      if (this.isReact) {\n        this.clearTemplate();\n      }\n\n      var btnItem = innerItems[parseInt(index.toString(), 10)].querySelector('.e-control.e-btn');\n\n      if (!isNullOrUndefined(btnItem) && !isNullOrUndefined(btnItem.ej2_instances[0]) && !btnItem.ej2_instances[0].isDestroyed) {\n        btnItem.ej2_instances[0].destroy();\n      }\n\n      detach(innerItems[parseInt(index.toString(), 10)]);\n      this.items.splice(eleIdx, 1);\n      this.tbarEle.splice(eleIdx, 1);\n    }\n  };\n\n  Toolbar.prototype.templateRender = function (templateProp, innerEle, item, index) {\n    var itemType = item.type;\n    var eleObj = templateProp;\n    var isComponent;\n\n    if (typeof templateProp === 'object') {\n      isComponent = typeof eleObj.appendTo === 'function';\n    }\n\n    if (typeof templateProp === 'string' || !isComponent) {\n      var templateFn = void 0;\n      var val = templateProp;\n      var regEx = new RegExp(/<(?=.*? .*?\\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\\/\\1>/i);\n      val = typeof templateProp === 'string' ? templateProp.trim() : templateProp;\n\n      try {\n        if (typeof templateProp === 'object' && !isNullOrUndefined(templateProp.tagName)) {\n          innerEle.appendChild(templateProp);\n        } else if (typeof templateProp === 'string' && regEx.test(val)) {\n          innerEle.innerHTML = val;\n        } else if (document.querySelectorAll(val).length) {\n          var ele = document.querySelector(val);\n          var tempStr = ele.outerHTML.trim();\n          innerEle.appendChild(ele);\n          ele.style.display = '';\n\n          if (!isNullOrUndefined(tempStr)) {\n            this.tempId.push(val);\n          }\n        } else {\n          templateFn = compile(val);\n        }\n      } catch (e) {\n        templateFn = compile(val);\n      }\n\n      var tempArray = void 0;\n\n      if (!isNullOrUndefined(templateFn)) {\n        var toolbarTemplateID = this.element.id + index + '_template';\n        tempArray = templateFn({}, this, 'template', toolbarTemplateID, this.isStringTemplate);\n      }\n\n      if (!isNullOrUndefined(tempArray) && tempArray.length > 0) {\n        [].slice.call(tempArray).forEach(function (ele) {\n          if (!isNullOrUndefined(ele.tagName)) {\n            ele.style.display = '';\n          }\n\n          innerEle.appendChild(ele);\n        });\n      }\n    } else if (itemType === 'Input') {\n      var ele = this.createElement('input');\n\n      if (item.id) {\n        ele.id = item.id;\n      } else {\n        ele.id = getUniqueID('tbr-ipt');\n      }\n\n      innerEle.appendChild(ele);\n      eleObj.appendTo(ele);\n    }\n\n    this.add(innerEle, CLS_TEMPLATE);\n    this.tbarEle.push(innerEle);\n  };\n\n  Toolbar.prototype.buttonRendering = function (item, innerEle) {\n    var dom = this.createElement('button', {\n      className: CLS_TBARBTN\n    });\n    dom.setAttribute('type', 'button');\n    var textStr = item.text;\n    var iconCss;\n    var iconPos;\n\n    if (item.id) {\n      dom.id = item.id;\n    } else {\n      dom.id = getUniqueID('e-tbr-btn');\n    }\n\n    var btnTxt = this.createElement('span', {\n      className: 'e-tbar-btn-text'\n    });\n\n    if (textStr) {\n      btnTxt.innerHTML = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(textStr) : textStr;\n      dom.appendChild(btnTxt);\n      dom.classList.add('e-tbtn-txt');\n    } else {\n      this.add(innerEle, 'e-tbtn-align');\n    }\n\n    if (item.prefixIcon || item.suffixIcon) {\n      if (item.prefixIcon && item.suffixIcon || item.prefixIcon) {\n        iconCss = item.prefixIcon + ' e-icons';\n        iconPos = 'Left';\n      } else {\n        iconCss = item.suffixIcon + ' e-icons';\n        iconPos = 'Right';\n      }\n    }\n\n    var btnObj = new Button({\n      iconCss: iconCss,\n      iconPosition: iconPos\n    });\n    btnObj.createElement = this.createElement;\n    btnObj.appendTo(dom);\n\n    if (item.width) {\n      setStyleAttribute(dom, {\n        'width': formatUnit(item.width)\n      });\n    }\n\n    return dom;\n  };\n\n  Toolbar.prototype.renderSubComponent = function (item, index) {\n    var dom;\n    var innerEle = this.createElement('div', {\n      className: CLS_ITEM\n    });\n    var tempDom = this.createElement('div', {\n      innerHTML: this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(item.tooltipText) : item.tooltipText\n    });\n\n    if (!this.tbarEle) {\n      this.tbarEle = [];\n    }\n\n    if (item.htmlAttributes) {\n      this.setAttr(item.htmlAttributes, innerEle);\n    }\n\n    if (item.tooltipText) {\n      innerEle.setAttribute('title', tempDom.textContent);\n    }\n\n    if (item.cssClass) {\n      innerEle.className = innerEle.className + ' ' + item.cssClass;\n    }\n\n    if (item.template) {\n      this.templateRender(item.template, innerEle, item, index);\n    } else {\n      switch (item.type) {\n        case 'Button':\n          dom = this.buttonRendering(item, innerEle);\n          dom.setAttribute('tabindex', isNullOrUndefined(item.tabIndex) ? '-1' : item.tabIndex.toString());\n          dom.setAttribute('data-tabindex', isNullOrUndefined(item.tabIndex) ? '-1' : item.tabIndex.toString());\n          dom.setAttribute('aria-label', item.text || item.tooltipText);\n          dom.setAttribute('aria-disabled', 'false');\n          innerEle.appendChild(dom);\n          innerEle.addEventListener('click', this.itemClick.bind(this));\n          break;\n\n        case 'Separator':\n          this.add(innerEle, CLS_SEPARATOR);\n          break;\n      }\n    }\n\n    if (item.showTextOn) {\n      var sTxt = item.showTextOn;\n\n      if (sTxt === 'Toolbar') {\n        this.add(innerEle, CLS_POPUPTEXT);\n        this.add(innerEle, 'e-tbtn-align');\n      } else if (sTxt === 'Overflow') {\n        this.add(innerEle, CLS_TBARTEXT);\n      }\n    }\n\n    if (item.overflow) {\n      var overflow = item.overflow;\n\n      if (overflow === 'Show') {\n        this.add(innerEle, CLS_TBAROVERFLOW);\n      } else if (overflow === 'Hide') {\n        if (!innerEle.classList.contains(CLS_SEPARATOR)) {\n          this.add(innerEle, CLS_POPOVERFLOW);\n        }\n      }\n    }\n\n    if (item.overflow !== 'Show' && item.showAlwaysInPopup && !innerEle.classList.contains(CLS_SEPARATOR)) {\n      this.add(innerEle, CLS_POPPRI);\n      this.popupPriCount++;\n    }\n\n    if (item.disabled) {\n      this.add(innerEle, CLS_DISABLE$2);\n    }\n\n    if (item.visible === false) {\n      this.add(innerEle, CLS_HIDDEN);\n    }\n\n    return innerEle;\n  };\n\n  Toolbar.prototype.getDataTabindex = function (ele) {\n    return isNullOrUndefined(ele.getAttribute('data-tabindex')) ? '-1' : ele.getAttribute('data-tabindex');\n  };\n\n  Toolbar.prototype.itemClick = function (e) {\n    this.activeEleSwitch(e.currentTarget);\n  };\n\n  Toolbar.prototype.activeEleSwitch = function (ele) {\n    this.activeEleRemove(ele.firstElementChild);\n    this.activeEle.focus();\n  };\n\n  Toolbar.prototype.activeEleRemove = function (curEle) {\n    if (!isNullOrUndefined(this.activeEle)) {\n      this.activeEle.setAttribute('tabindex', this.getDataTabindex(this.activeEle));\n    }\n\n    this.activeEle = curEle;\n\n    if (this.getDataTabindex(this.activeEle) === '-1') {\n      if (isNullOrUndefined(this.trgtEle) && !curEle.parentElement.classList.contains(CLS_TEMPLATE)) {\n        this.updateTabIndex('-1');\n        curEle.removeAttribute('tabindex');\n      } else {\n        this.activeEle.setAttribute('tabindex', this.getDataTabindex(this.activeEle));\n      }\n    }\n  };\n\n  Toolbar.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n  /**\r\n   * Returns the current module name.\r\n   *\r\n   * @returns {string} - Returns the module name as string.\r\n   * @private\r\n   */\n\n\n  Toolbar.prototype.getModuleName = function () {\n    return 'toolbar';\n  };\n\n  Toolbar.prototype.itemsRerender = function (newProp) {\n    this.items = this.tbarItemsCol;\n\n    if (this.isReact || this.isAngular) {\n      this.clearTemplate();\n    }\n\n    this.destroyMode();\n    this.destroyItems();\n    this.items = newProp;\n    this.tbarItemsCol = this.items;\n    this.renderItems();\n    this.renderOverflowMode();\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n\n  Toolbar.prototype.resize = function () {\n    var ele = this.element;\n    this.tbResize = true;\n\n    if (this.tbarAlign) {\n      this.itemPositioning();\n    }\n\n    if (this.popObj && this.overflowMode === 'Popup') {\n      this.popObj.hide();\n    }\n\n    var checkOverflow = this.checkOverflow(ele, ele.getElementsByClassName(CLS_ITEMS)[0]);\n\n    if (!checkOverflow) {\n      this.destroyScroll();\n      var multirowele = ele.querySelector('.' + CLS_ITEMS);\n\n      if (!isNullOrUndefined(multirowele)) {\n        this.remove(multirowele, CLS_MULTIROWPOS);\n\n        if (this.tbarAlign) {\n          this.add(multirowele, CLS_TBARPOS);\n        }\n      }\n    }\n\n    if (checkOverflow && this.scrollModule && this.offsetWid === ele.offsetWidth) {\n      return;\n    }\n\n    if (this.offsetWid > ele.offsetWidth || checkOverflow) {\n      this.renderOverflowMode();\n    }\n\n    if (this.popObj) {\n      if (this.overflowMode === 'Extended') {\n        var eleStyles = window.getComputedStyle(this.element);\n        this.popObj.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;\n      }\n\n      if (this.tbarAlign) {\n        this.removePositioning();\n      }\n\n      this.popupRefresh(this.popObj.element, false);\n\n      if (this.tbarAlign) {\n        this.refreshPositioning();\n      }\n    }\n\n    if (this.element.querySelector('.' + CLS_HSCROLLBAR$1)) {\n      this.scrollStep = this.element.querySelector('.' + CLS_HSCROLLBAR$1).offsetWidth;\n    }\n\n    this.offsetWid = ele.offsetWidth;\n    this.tbResize = false;\n    this.separator();\n  };\n\n  Toolbar.prototype.extendedOpen = function () {\n    var sib = this.element.querySelector('.' + CLS_EXTENDABLECLASS);\n\n    if (this.overflowMode === 'Extended' && sib) {\n      this.isExtendedOpen = sib.classList.contains(CLS_POPUPOPEN);\n    }\n  };\n\n  Toolbar.prototype.updateHideEleTabIndex = function (ele, isHidden, isElement, eleIndex, innerItems) {\n    if (isElement) {\n      eleIndex = innerItems.indexOf(ele);\n    }\n\n    var nextEle = innerItems[++eleIndex];\n\n    while (nextEle) {\n      var skipEle = this.eleContains(nextEle);\n\n      if (!skipEle) {\n        var dataTabIndex = nextEle.firstElementChild.getAttribute('data-tabindex');\n\n        if (isHidden && dataTabIndex === '-1') {\n          nextEle.firstElementChild.setAttribute('tabindex', '0');\n        } else if (dataTabIndex !== nextEle.firstElementChild.getAttribute('tabindex')) {\n          nextEle.firstElementChild.setAttribute('tabindex', dataTabIndex);\n        }\n\n        break;\n      }\n\n      nextEle = innerItems[++eleIndex];\n    }\n  };\n  /**\r\n   * Gets called when the model property changes.The data that describes the old and new values of the property that changed.\r\n   *\r\n   * @param  {ToolbarModel} newProp - It contains new value of the data.\r\n   * @param  {ToolbarModel} oldProp - It contains old value of the data.\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  Toolbar.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var tEle = this.element;\n    var wid = tEle.offsetWidth;\n    this.extendedOpen();\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'items':\n          if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {\n            var changedProb = Object.keys(newProp.items);\n\n            for (var i = 0; i < changedProb.length; i++) {\n              var index = parseInt(Object.keys(newProp.items)[parseInt(i.toString(), 10)], 10);\n              var property = Object.keys(newProp.items[parseInt(index.toString(), 10)])[0];\n              var newProperty = Object(newProp.items[parseInt(index.toString(), 10)])[\"\" + property];\n\n              if (typeof newProperty !== 'function') {\n                if (this.tbarAlign || property === 'align') {\n                  this.refresh();\n                  this.trigger('created');\n                  break;\n                }\n\n                var popupPriCheck = property === 'showAlwaysInPopup' && !newProperty;\n                var booleanCheck = property === 'overflow' && this.popupPriCount !== 0;\n\n                if (popupPriCheck || this.items[parseInt(index.toString(), 10)].showAlwaysInPopup && booleanCheck) {\n                  --this.popupPriCount;\n                }\n\n                if (isNullOrUndefined(this.scrollModule)) {\n                  this.destroyMode();\n                }\n\n                var itemCol = [].slice.call(selectAll('.' + CLS_ITEMS + ' .' + CLS_ITEM, tEle));\n\n                if (this.isReact && this.items[parseInt(index.toString(), 10)].template) {\n                  this.clearTemplate();\n                }\n\n                detach(itemCol[parseInt(index.toString(), 10)]);\n                this.tbarEle.splice(index, 1);\n                this.addItems([this.items[parseInt(index.toString(), 10)]], index);\n                this.items.splice(index, 1);\n\n                if (this.items[parseInt(index.toString(), 10)].template) {\n                  this.tbarEle.splice(this.items.length, 1);\n                }\n              }\n            }\n          } else {\n            this.itemsRerender(newProp.items);\n          }\n\n          break;\n\n        case 'width':\n          setStyleAttribute(tEle, {\n            'width': formatUnit(newProp.width)\n          });\n          this.renderOverflowMode();\n\n          if (this.popObj && wid < tEle.offsetWidth) {\n            this.popupRefresh(this.popObj.element, false);\n          }\n\n          break;\n\n        case 'height':\n          setStyleAttribute(this.element, {\n            'height': formatUnit(newProp.height)\n          });\n          break;\n\n        case 'overflowMode':\n          this.destroyMode();\n          this.renderOverflowMode();\n\n          if (this.enableRtl) {\n            this.add(tEle, CLS_RTL$2);\n          }\n\n          this.refreshOverflow();\n          break;\n\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            this.add(tEle, CLS_RTL$2);\n          } else {\n            this.remove(tEle, CLS_RTL$2);\n          }\n\n          if (!isNullOrUndefined(this.scrollModule)) {\n            if (newProp.enableRtl) {\n              this.add(this.scrollModule.element, CLS_RTL$2);\n            } else {\n              this.remove(this.scrollModule.element, CLS_RTL$2);\n            }\n          }\n\n          if (!isNullOrUndefined(this.popObj)) {\n            if (newProp.enableRtl) {\n              this.add(this.popObj.element, CLS_RTL$2);\n            } else {\n              this.remove(this.popObj.element, CLS_RTL$2);\n            }\n          }\n\n          if (this.tbarAlign) {\n            this.itemPositioning();\n          }\n\n          break;\n\n        case 'scrollStep':\n          if (this.scrollModule) {\n            this.scrollModule.scrollStep = this.scrollStep;\n          }\n\n          break;\n\n        case 'enableCollision':\n          if (this.popObj) {\n            this.popObj.collision = {\n              Y: this.enableCollision ? 'flip' : 'none'\n            };\n          }\n\n          break;\n\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([this.element], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([this.element], newProp.cssClass.split(' '));\n          }\n\n          break;\n\n        case 'allowKeyboard':\n          this.unwireKeyboardEvent();\n\n          if (newProp.allowKeyboard) {\n            this.wireKeyboardEvent();\n          }\n\n          break;\n      }\n    }\n  };\n  /**\r\n   * Shows or hides the Toolbar item that is in the specified index.\r\n   *\r\n   * @param  {number | HTMLElement} index - Index value of target item or DOM element  of items to be hidden or shown.\r\n   * @param  {boolean} value - Based on this Boolean value, item will be hide (true) or show (false). By default, value is false.\r\n   * @returns {void}.\r\n   */\n\n\n  Toolbar.prototype.hideItem = function (index, value) {\n    var isElement = typeof index === 'object' ? true : false;\n    var eleIndex = index;\n    var ele;\n\n    if (!isElement && isNullOrUndefined(eleIndex)) {\n      return;\n    }\n\n    var innerItems = [].slice.call(selectAll('.' + CLS_ITEM, this.element));\n\n    if (isElement) {\n      ele = index;\n    } else if (this.tbarEle[parseInt(eleIndex.toString(), 10)]) {\n      var innerItems_1 = [].slice.call(selectAll('.' + CLS_ITEM, this.element));\n      ele = innerItems_1[parseInt(eleIndex.toString(), 10)];\n    }\n\n    if (ele) {\n      if (value) {\n        ele.classList.add(CLS_HIDDEN);\n\n        if (!ele.classList.contains(CLS_SEPARATOR)) {\n          if (isNullOrUndefined(ele.firstElementChild.getAttribute('tabindex')) || ele.firstElementChild.getAttribute('tabindex') !== '-1') {\n            this.updateHideEleTabIndex(ele, value, isElement, eleIndex, innerItems);\n          }\n        }\n      } else {\n        ele.classList.remove(CLS_HIDDEN);\n\n        if (!ele.classList.contains(CLS_SEPARATOR)) {\n          this.updateHideEleTabIndex(ele, value, isElement, eleIndex, innerItems);\n        }\n      }\n\n      this.refreshOverflow();\n    }\n  };\n\n  __decorate$3([Collection([], Item)], Toolbar.prototype, \"items\", void 0);\n\n  __decorate$3([Property('auto')], Toolbar.prototype, \"width\", void 0);\n\n  __decorate$3([Property('auto')], Toolbar.prototype, \"height\", void 0);\n\n  __decorate$3([Property('')], Toolbar.prototype, \"cssClass\", void 0);\n\n  __decorate$3([Property('Scrollable')], Toolbar.prototype, \"overflowMode\", void 0);\n\n  __decorate$3([Property()], Toolbar.prototype, \"scrollStep\", void 0);\n\n  __decorate$3([Property(true)], Toolbar.prototype, \"enableCollision\", void 0);\n\n  __decorate$3([Property(true)], Toolbar.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate$3([Property(true)], Toolbar.prototype, \"allowKeyboard\", void 0);\n\n  __decorate$3([Event()], Toolbar.prototype, \"clicked\", void 0);\n\n  __decorate$3([Event()], Toolbar.prototype, \"created\", void 0);\n\n  __decorate$3([Event()], Toolbar.prototype, \"destroyed\", void 0);\n\n  __decorate$3([Event()], Toolbar.prototype, \"beforeCreate\", void 0);\n\n  Toolbar = __decorate$3([NotifyPropertyChanges], Toolbar);\n  return Toolbar;\n}(Component);\n/**\r\n * Toolbar modules\r\n */\n\n\nvar __extends$4 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$4 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nvar CLS_ACRDN_ROOT = 'e-acrdn-root';\nvar CLS_ROOT$2 = 'e-accordion';\nvar CLS_ITEM$1 = 'e-acrdn-item';\nvar CLS_ITEMFOCUS = 'e-item-focus';\nvar CLS_ITEMHIDE = 'e-hide';\nvar CLS_HEADER = 'e-acrdn-header';\nvar CLS_HEADERICN = 'e-acrdn-header-icon';\nvar CLS_HEADERCTN = 'e-acrdn-header-content';\nvar CLS_CONTENT = 'e-acrdn-panel';\nvar CLS_CTENT = 'e-acrdn-content';\nvar CLS_TOOGLEICN = 'e-toggle-icon';\nvar CLS_COLLAPSEICN = 'e-tgl-collapse-icon e-icons';\nvar CLS_EXPANDICN = 'e-expand-icon';\nvar CLS_RTL$3 = 'e-rtl';\nvar CLS_CTNHIDE = 'e-content-hide';\nvar CLS_SLCT = 'e-select';\nvar CLS_SLCTED = 'e-selected';\nvar CLS_ACTIVE = 'e-active';\nvar CLS_ANIMATE = 'e-animate';\nvar CLS_DISABLE$3 = 'e-overlay';\nvar CLS_TOGANIMATE = 'e-toggle-animation';\nvar CLS_NEST = 'e-nested';\nvar CLS_EXPANDSTATE = 'e-expand-state';\nvar CLS_CONTAINER = 'e-accordion-container';\n/**\r\n * Objects used for configuring the Accordion expanding item action properties.\r\n */\n\nvar AccordionActionSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$4(AccordionActionSettings, _super);\n\n  function AccordionActionSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$4([Property('SlideDown')], AccordionActionSettings.prototype, \"effect\", void 0);\n\n  __decorate$4([Property(400)], AccordionActionSettings.prototype, \"duration\", void 0);\n\n  __decorate$4([Property('linear')], AccordionActionSettings.prototype, \"easing\", void 0);\n\n  return AccordionActionSettings;\n}(ChildProperty);\n/**\r\n * Objects used for configuring the Accordion animation properties.\r\n */\n\n\nvar AccordionAnimationSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$4(AccordionAnimationSettings, _super);\n\n  function AccordionAnimationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$4([Complex({\n    effect: 'SlideUp',\n    duration: 400,\n    easing: 'linear'\n  }, AccordionActionSettings)], AccordionAnimationSettings.prototype, \"collapse\", void 0);\n\n  __decorate$4([Complex({\n    effect: 'SlideDown',\n    duration: 400,\n    easing: 'linear'\n  }, AccordionActionSettings)], AccordionAnimationSettings.prototype, \"expand\", void 0);\n\n  return AccordionAnimationSettings;\n}(ChildProperty);\n/**\r\n * An item object that is used to configure Accordion items.\r\n */\n\n\nvar AccordionItem =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$4(AccordionItem, _super);\n\n  function AccordionItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$4([Property(null)], AccordionItem.prototype, \"content\", void 0);\n\n  __decorate$4([Property(null)], AccordionItem.prototype, \"header\", void 0);\n\n  __decorate$4([Property(null)], AccordionItem.prototype, \"cssClass\", void 0);\n\n  __decorate$4([Property(null)], AccordionItem.prototype, \"iconCss\", void 0);\n\n  __decorate$4([Property(false)], AccordionItem.prototype, \"expanded\", void 0);\n\n  __decorate$4([Property(true)], AccordionItem.prototype, \"visible\", void 0);\n\n  __decorate$4([Property(false)], AccordionItem.prototype, \"disabled\", void 0);\n\n  __decorate$4([Property()], AccordionItem.prototype, \"id\", void 0);\n\n  return AccordionItem;\n}(ChildProperty);\n/**\r\n * The Accordion is a vertically collapsible content panel that displays one or more panels at a time within the available space.\r\n * ```html\r\n * <div id='accordion'/>\r\n * <script>\r\n *   var accordionObj = new Accordion();\r\n *   accordionObj.appendTo('#accordion');\r\n * </script>\r\n * ```\r\n */\n\n\nvar Accordion =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$4(Accordion, _super);\n  /**\r\n   * Initializes a new instance of the Accordion class.\r\n   *\r\n   * @param {AccordionModel} options  - Specifies Accordion model properties as options.\r\n   * @param {string | HTMLElement} element  - Specifies the element that is rendered as an Accordion.\r\n   */\n\n\n  function Accordion(options, element) {\n    var _this = _super.call(this, options, element) || this;\n    /**\r\n     * Contains the keyboard configuration of the Accordion.\r\n     */\n\n\n    _this.keyConfigs = {\n      moveUp: 'uparrow',\n      moveDown: 'downarrow',\n      enter: 'enter',\n      space: 'space',\n      home: 'home',\n      end: 'end'\n    };\n    return _this;\n  }\n  /**\r\n   * Removes the control from the DOM and also removes all its related events.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  Accordion.prototype.destroy = function () {\n    if (this.isReact || this.isAngular || this.isVue) {\n      this.clearTemplate();\n    }\n\n    var ele = this.element;\n\n    _super.prototype.destroy.call(this);\n\n    this.unwireEvents();\n    this.isDestroy = true;\n    this.restoreContent(null);\n    [].slice.call(ele.children).forEach(function (el) {\n      ele.removeChild(el);\n    });\n\n    if (this.trgtEle) {\n      this.trgtEle = null;\n\n      while (this.ctrlTem.firstElementChild) {\n        ele.appendChild(this.ctrlTem.firstElementChild);\n      }\n\n      this.ctrlTem = null;\n    }\n\n    ele.classList.remove(CLS_ACRDN_ROOT);\n    ele.removeAttribute('style');\n    this.element.removeAttribute('data-ripple');\n\n    if (!this.isNested && isRippleEnabled) {\n      this.removeRippleEffect();\n    }\n  };\n\n  Accordion.prototype.preRender = function () {\n    var nested = closest(this.element, '.' + CLS_CONTENT);\n    this.isNested = false;\n    this.templateEle = [];\n\n    if (!this.isDestroy) {\n      this.isDestroy = false;\n    }\n\n    if (nested && nested.firstElementChild && nested.firstElementChild.firstElementChild) {\n      if (nested.firstElementChild.firstElementChild.classList.contains(CLS_ROOT$2)) {\n        nested.classList.add(CLS_NEST);\n        this.isNested = true;\n      }\n    } else {\n      this.element.classList.add(CLS_ACRDN_ROOT);\n    }\n\n    if (this.enableRtl) {\n      this.add(this.element, CLS_RTL$3);\n    }\n  };\n\n  Accordion.prototype.add = function (ele, val) {\n    ele.classList.add(val);\n  };\n\n  Accordion.prototype.remove = function (ele, val) {\n    ele.classList.remove(val);\n  };\n  /**\r\n   * To initialize the control rendering\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  Accordion.prototype.render = function () {\n    this.initializeHeaderTemplate();\n    this.initializeItemTemplate();\n    this.initialize();\n    this.renderControl();\n    this.wireEvents();\n    this.renderComplete();\n  };\n\n  Accordion.prototype.initialize = function () {\n    var width = formatUnit(this.width);\n    var height = formatUnit(this.height);\n    setStyleAttribute(this.element, {\n      'width': width,\n      'height': height\n    });\n\n    if (isNullOrUndefined(this.initExpand)) {\n      this.initExpand = [];\n    }\n\n    if (this.expandedIndices.length > 0) {\n      this.initExpand = this.expandedIndices;\n    }\n  };\n\n  Accordion.prototype.renderControl = function () {\n    this.trgtEle = this.element.children.length > 0 ? select('div', this.element) : null;\n    this.renderItems();\n    this.initItemExpand();\n  };\n\n  Accordion.prototype.wireFocusEvents = function () {\n    var acrdItem = [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM$1));\n\n    for (var _i = 0, acrdItem_1 = acrdItem; _i < acrdItem_1.length; _i++) {\n      var item = acrdItem_1[_i];\n      var headerEle = item.querySelector('.' + CLS_HEADER);\n\n      if (item.childElementCount > 0 && headerEle) {\n        EventHandler.clearEvents(headerEle);\n        EventHandler.add(headerEle, 'focus', this.focusIn, this);\n        EventHandler.add(headerEle, 'blur', this.focusOut, this);\n      }\n    }\n  };\n\n  Accordion.prototype.unwireEvents = function () {\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n\n    if (!isNullOrUndefined(this.keyModule)) {\n      this.keyModule.destroy();\n    }\n  };\n\n  Accordion.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n\n    if (!this.isNested && !this.isDestroy) {\n      this.removeRippleEffect = rippleEffect(this.element, {\n        selector: '.' + CLS_HEADER\n      });\n    }\n\n    if (!this.isNested) {\n      this.keyModule = new KeyboardEvents(this.element, {\n        keyAction: this.keyActionHandler.bind(this),\n        keyConfigs: this.keyConfigs,\n        eventName: 'keydown'\n      });\n    }\n  };\n\n  Accordion.prototype.templateParser = function (template) {\n    if (template) {\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        } else {\n          return compile(template);\n        }\n      } catch (error) {\n        return compile(template);\n      }\n    }\n\n    return undefined;\n  };\n\n  Accordion.prototype.initializeHeaderTemplate = function () {\n    if (this.headerTemplate) {\n      this.headerTemplateFn = this.templateParser(this.headerTemplate);\n    }\n  };\n\n  Accordion.prototype.initializeItemTemplate = function () {\n    if (this.itemTemplate) {\n      this.itemTemplateFn = this.templateParser(this.itemTemplate);\n    }\n  };\n\n  Accordion.prototype.getHeaderTemplate = function () {\n    return this.headerTemplateFn;\n  };\n\n  Accordion.prototype.getItemTemplate = function () {\n    return this.itemTemplateFn;\n  };\n\n  Accordion.prototype.focusIn = function (e) {\n    e.target.parentElement.classList.add(CLS_ITEMFOCUS);\n  };\n\n  Accordion.prototype.focusOut = function (e) {\n    e.target.parentElement.classList.remove(CLS_ITEMFOCUS);\n  };\n\n  Accordion.prototype.ctrlTemplate = function () {\n    this.ctrlTem = this.element.cloneNode(true);\n    var innerEles;\n    var rootEle = select('.' + CLS_CONTAINER, this.element);\n\n    if (rootEle) {\n      innerEles = rootEle.children;\n    } else {\n      innerEles = this.element.children;\n    }\n\n    var items = [];\n    [].slice.call(innerEles).forEach(function (el) {\n      items.push({\n        header: el.childElementCount > 0 && el.children[0] ? el.children[0] : '',\n        content: el.childElementCount > 1 && el.children[1] ? el.children[1] : ''\n      });\n      el.parentNode.removeChild(el);\n    });\n\n    if (rootEle) {\n      this.element.removeChild(rootEle);\n    }\n\n    this.setProperties({\n      items: items\n    }, true);\n  };\n\n  Accordion.prototype.toggleIconGenerate = function () {\n    var tglIcon = this.createElement('div', {\n      className: CLS_TOOGLEICN\n    });\n    var hdrColIcon = this.createElement('span', {\n      className: CLS_COLLAPSEICN\n    });\n    tglIcon.appendChild(hdrColIcon);\n    return tglIcon;\n  };\n\n  Accordion.prototype.initItemExpand = function () {\n    var len = this.initExpand.length;\n\n    if (len === 0) {\n      return;\n    }\n\n    if (this.expandMode === 'Single') {\n      this.expandItem(true, this.initExpand[len - 1]);\n    } else {\n      for (var i = 0; i < len; i++) {\n        this.expandItem(true, this.initExpand[parseInt(i.toString(), 10)]);\n      }\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n\n  Accordion.prototype.renderItems = function () {\n    var _this = this;\n\n    var ele = this.element;\n    var innerItem;\n    var innerDataSourceItem;\n\n    if (!isNullOrUndefined(this.trgtEle)) {\n      this.ctrlTemplate();\n    }\n\n    if (this.dataSource.length > 0) {\n      this.dataSource.forEach(function (item, index) {\n        innerDataSourceItem = _this.renderInnerItem(item, index);\n        ele.appendChild(innerDataSourceItem);\n\n        if (innerDataSourceItem.childElementCount > 0) {\n          EventHandler.add(innerDataSourceItem.querySelector('.' + CLS_HEADER), 'focus', _this.focusIn, _this);\n          EventHandler.add(innerDataSourceItem.querySelector('.' + CLS_HEADER), 'blur', _this.focusOut, _this);\n        }\n      });\n    } else {\n      var items = this.items;\n\n      if (ele && items.length > 0) {\n        items.forEach(function (item, index) {\n          innerItem = _this.renderInnerItem(item, index);\n          ele.appendChild(innerItem);\n\n          if (innerItem.childElementCount > 0) {\n            EventHandler.add(innerItem.querySelector('.' + CLS_HEADER), 'focus', _this.focusIn, _this);\n            EventHandler.add(innerItem.querySelector('.' + CLS_HEADER), 'blur', _this.focusOut, _this);\n          }\n        });\n      }\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n\n  Accordion.prototype.clickHandler = function (e) {\n    var trgt = e.target;\n    var items = this.getItems();\n    var eventArgs = {};\n    var tglIcon;\n    var acrdEle = closest(trgt, '.' + CLS_ROOT$2);\n\n    if (acrdEle !== this.element) {\n      return;\n    }\n\n    trgt.classList.add('e-target');\n    var acrdnItem = closest(trgt, '.' + CLS_ITEM$1);\n    var acrdnHdr = closest(trgt, '.' + CLS_HEADER);\n    var acrdnCtn = closest(trgt, '.' + CLS_CONTENT);\n\n    if (acrdnItem && (isNullOrUndefined(acrdnHdr) || isNullOrUndefined(acrdnCtn))) {\n      acrdnHdr = acrdnItem.children[0];\n      acrdnCtn = acrdnItem.children[1];\n    }\n\n    if (acrdnHdr) {\n      tglIcon = select('.' + CLS_TOOGLEICN, acrdnHdr);\n    }\n\n    var acrdnCtnItem;\n\n    if (acrdnHdr) {\n      acrdnCtnItem = closest(acrdnHdr, '.' + CLS_ITEM$1);\n    } else if (acrdnCtn) {\n      acrdnCtnItem = closest(acrdnCtn, '.' + CLS_ITEM$1);\n    }\n\n    var index = this.getIndexByItem(acrdnItem);\n\n    if (acrdnCtnItem) {\n      eventArgs.item = items[this.getIndexByItem(acrdnCtnItem)];\n    }\n\n    eventArgs.originalEvent = e;\n    var ctnCheck = !isNullOrUndefined(tglIcon) && acrdnItem.childElementCount <= 1;\n\n    if (ctnCheck && (isNullOrUndefined(acrdnCtn) || !isNullOrUndefined(select('.' + CLS_HEADER + ' .' + CLS_TOOGLEICN, acrdnCtnItem)))) {\n      acrdnItem.appendChild(this.contentRendering(index));\n      this.ariaAttrUpdate(acrdnItem);\n      this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);\n    } else {\n      this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n\n  Accordion.prototype.afterContentRender = function (trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem) {\n    var _this = this;\n\n    var acrdActive = [];\n    this.trigger('clicked', eventArgs);\n    var cntclkCheck = acrdnCtn && !isNullOrUndefined(select('.e-target', acrdnCtn));\n    var inlineAcrdnSel = '.' + CLS_CONTENT + ' .' + CLS_ROOT$2;\n    var inlineEleAcrdn = acrdnCtn && !isNullOrUndefined(select('.' + CLS_ROOT$2, acrdnCtn)) && isNullOrUndefined(closest(trgt, inlineAcrdnSel));\n    var nestContCheck = acrdnCtn && isNullOrUndefined(select('.' + CLS_ROOT$2, acrdnCtn)) || !(closest(trgt, '.' + CLS_ROOT$2) === this.element);\n    cntclkCheck = cntclkCheck && (inlineEleAcrdn || nestContCheck);\n    trgt.classList.remove('e-target');\n\n    if (trgt.classList.contains(CLS_CONTENT) || trgt.classList.contains(CLS_CTENT) || cntclkCheck) {\n      return;\n    }\n\n    var acrdcontainer = this.element.querySelector('.' + CLS_CONTAINER);\n    var acrdnchild = acrdcontainer ? acrdcontainer.children : this.element.children;\n    [].slice.call(acrdnchild).forEach(function (el) {\n      if (el.classList.contains(CLS_ACTIVE)) {\n        acrdActive.push(el);\n      }\n    });\n    var acrdAniEle = [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM$1 + ' [' + CLS_ANIMATE + ']'));\n\n    if (acrdAniEle.length > 0) {\n      for (var _i = 0, acrdAniEle_1 = acrdAniEle; _i < acrdAniEle_1.length; _i++) {\n        var el = acrdAniEle_1[_i];\n        acrdActive.push(el.parentElement);\n      }\n    }\n\n    var sameContentCheck = acrdActive.indexOf(acrdnCtnItem) !== -1 && acrdnCtn.getAttribute('e-animate') === 'true';\n    var sameHeader = false;\n\n    if (!isNullOrUndefined(acrdnItem) && !isNullOrUndefined(acrdnHdr)) {\n      var acrdnCtn_1 = select('.' + CLS_CONTENT, acrdnItem);\n      var acrdnRoot = closest(acrdnItem, '.' + CLS_ACRDN_ROOT);\n      var expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);\n\n      if (isNullOrUndefined(acrdnCtn_1)) {\n        return;\n      }\n\n      sameHeader = expandState === acrdnItem;\n\n      if (isVisible(acrdnCtn_1) && (!sameContentCheck || acrdnCtnItem.classList.contains(CLS_SLCTED))) {\n        this.collapse(acrdnCtn_1);\n      } else {\n        if (acrdActive.length > 0 && this.expandMode === 'Single' && !sameContentCheck) {\n          acrdActive.forEach(function (el) {\n            _this.collapse(select('.' + CLS_CONTENT, el));\n\n            el.classList.remove(CLS_EXPANDSTATE);\n          });\n        }\n\n        this.expand(acrdnCtn_1);\n      }\n\n      if (!isNullOrUndefined(expandState) && !sameHeader) {\n        expandState.classList.remove(CLS_EXPANDSTATE);\n      }\n    }\n  };\n\n  Accordion.prototype.eleMoveFocus = function (action, root, trgt) {\n    var clst;\n    var clstItem = closest(trgt, '.' + CLS_ITEM$1);\n\n    if (trgt === root) {\n      clst = (action === 'moveUp' ? trgt.lastElementChild : trgt).querySelector('.' + CLS_HEADER);\n    } else if (trgt.classList.contains(CLS_HEADER)) {\n      clstItem = action === 'moveUp' ? clstItem.previousElementSibling : clstItem.nextElementSibling;\n\n      if (clstItem) {\n        clst = select('.' + CLS_HEADER, clstItem);\n      }\n    }\n\n    if (clst) {\n      clst.focus();\n    }\n  };\n\n  Accordion.prototype.keyActionHandler = function (e) {\n    var trgt = e.target;\n    var header = closest(e.target, CLS_HEADER);\n\n    if (isNullOrUndefined(header) && !trgt.classList.contains(CLS_ROOT$2) && !trgt.classList.contains(CLS_HEADER)) {\n      return;\n    }\n\n    var clst;\n    var root = this.element;\n    var content;\n\n    switch (e.action) {\n      case 'moveUp':\n        this.eleMoveFocus(e.action, root, trgt);\n        break;\n\n      case 'moveDown':\n        this.eleMoveFocus(e.action, root, trgt);\n        break;\n\n      case 'space':\n      case 'enter':\n        content = trgt.nextElementSibling;\n\n        if (!isNullOrUndefined(content) && content.classList.contains(CLS_CONTENT)) {\n          if (content.getAttribute('e-animate') !== 'true') {\n            trgt.click();\n          }\n        } else {\n          trgt.click();\n        }\n\n        e.preventDefault();\n        break;\n\n      case 'home':\n      case 'end':\n        clst = e.action === 'home' ? root.firstElementChild.children[0] : root.lastElementChild.children[0];\n        clst.focus();\n        e.preventDefault();\n        break;\n    }\n  };\n\n  Accordion.prototype.headerEleGenerate = function () {\n    var header = this.createElement('div', {\n      className: CLS_HEADER,\n      id: getUniqueID('acrdn_header')\n    });\n    var ariaAttr = {\n      'tabindex': '0',\n      'role': 'button',\n      'aria-disabled': 'false',\n      'aria-expanded': 'false'\n    };\n    attributes(header, ariaAttr);\n    return header;\n  };\n\n  Accordion.prototype.renderInnerItem = function (item, index) {\n    var innerEle = this.createElement('div', {\n      className: CLS_ITEM$1,\n      id: item.id || getUniqueID('acrdn_item')\n    });\n\n    if (this.headerTemplate) {\n      var ctnEle = this.headerEleGenerate();\n      var hdrEle = this.createElement('div', {\n        className: CLS_HEADERCTN\n      });\n      ctnEle.appendChild(hdrEle);\n      append(this.getHeaderTemplate()(item, this, 'headerTemplate', this.element.id + '_headerTemplate', false), hdrEle);\n      innerEle.appendChild(ctnEle);\n      ctnEle.appendChild(this.toggleIconGenerate());\n      this.add(innerEle, CLS_SLCT);\n      return innerEle;\n    }\n\n    if (item.header && this.angularnativeCondiCheck(item, 'header')) {\n      if (this.enableHtmlSanitizer && typeof item.header === 'string') {\n        item.header = SanitizeHtmlHelper.sanitize(item.header);\n      }\n\n      var ctnEle = this.headerEleGenerate();\n      var hdrEle = this.createElement('div', {\n        className: CLS_HEADERCTN\n      });\n      ctnEle.appendChild(hdrEle);\n      ctnEle.appendChild(this.fetchElement(hdrEle, item.header, index, true));\n      innerEle.appendChild(ctnEle);\n    }\n\n    var hdr = select('.' + CLS_HEADER, innerEle);\n\n    if (item.expanded && !isNullOrUndefined(index) && !this.enablePersistence) {\n      if (this.initExpand.indexOf(index) === -1) {\n        this.initExpand.push(index);\n      }\n    }\n\n    if (item.cssClass) {\n      addClass([innerEle], item.cssClass.split(' '));\n    }\n\n    if (item.disabled) {\n      addClass([innerEle], CLS_DISABLE$3);\n    }\n\n    if (item.visible === false) {\n      addClass([innerEle], CLS_ITEMHIDE);\n    }\n\n    if (item.iconCss) {\n      var hdrIcnEle = this.createElement('div', {\n        className: CLS_HEADERICN\n      });\n      var icon = this.createElement('span', {\n        className: item.iconCss + ' e-icons'\n      });\n      hdrIcnEle.appendChild(icon);\n\n      if (isNullOrUndefined(hdr)) {\n        hdr = this.headerEleGenerate();\n        hdr.appendChild(hdrIcnEle);\n        innerEle.appendChild(hdr);\n      } else {\n        hdr.insertBefore(hdrIcnEle, hdr.childNodes[0]);\n      }\n    }\n\n    if (item.content && this.angularnativeCondiCheck(item, 'content')) {\n      var hdrIcon = this.toggleIconGenerate();\n\n      if (isNullOrUndefined(hdr)) {\n        hdr = this.headerEleGenerate();\n        innerEle.appendChild(hdr);\n      }\n\n      hdr.appendChild(hdrIcon);\n      this.add(innerEle, CLS_SLCT);\n    }\n\n    return innerEle;\n  };\n\n  Accordion.prototype.angularnativeCondiCheck = function (item, prop) {\n    var property = prop === 'content' ? item.content : item.header;\n    var content = property;\n\n    if (this.isAngular && !isNullOrUndefined(content.elementRef)) {\n      var data = content.elementRef.nativeElement.data;\n\n      if (isNullOrUndefined(data) || data === '' || data.indexOf('bindings=') === -1) {\n        return true;\n      }\n\n      var parseddata = JSON.parse(content.elementRef.nativeElement.data.replace('bindings=', ''));\n\n      if (!isNullOrUndefined(parseddata) && parseddata['ng-reflect-ng-if'] === 'false') {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Accordion.prototype.fetchElement = function (ele, value, index, isHeader) {\n    var templateFn;\n    var temString;\n\n    try {\n      if (document.querySelectorAll(value).length && value !== 'Button') {\n        var eleVal = document.querySelector(value);\n        temString = eleVal.outerHTML.trim();\n        ele.appendChild(eleVal);\n        eleVal.style.display = '';\n      } else {\n        templateFn = compile(value);\n      }\n    } catch (e) {\n      if (typeof value === 'string') {\n        ele.innerHTML = SanitizeHtmlHelper.sanitize(value);\n      } else if (!isNullOrUndefined(this.trgtEle) && value instanceof HTMLElement) {\n        ele.appendChild(value);\n        ele.firstElementChild.style.display = '';\n      } else {\n        templateFn = compile(value);\n      }\n    }\n\n    var tempArray;\n\n    if (!isNullOrUndefined(templateFn)) {\n      if (this.isReact) {\n        this.renderReactTemplates();\n      }\n\n      var templateProps = void 0;\n      var templateName = void 0;\n\n      if (ele.classList.contains(CLS_HEADERCTN)) {\n        templateProps = this.element.id + index + '_header';\n        templateName = 'header';\n      } else if (ele.classList.contains(CLS_CTENT)) {\n        templateProps = this.element.id + index + '_content';\n        templateName = 'content';\n      }\n\n      tempArray = templateFn({}, this, templateName, templateProps, this.isStringTemplate);\n    }\n\n    if (!isNullOrUndefined(tempArray) && tempArray.length > 0 && !(isNullOrUndefined(tempArray[0].tagName) && tempArray.length === 1)) {\n      [].slice.call(tempArray).forEach(function (el) {\n        if (!isNullOrUndefined(el.tagName)) {\n          el.style.display = '';\n        }\n\n        ele.appendChild(el);\n      });\n    } else if (ele.childElementCount === 0) {\n      ele.innerHTML = SanitizeHtmlHelper.sanitize(value);\n    }\n\n    if (!isNullOrUndefined(temString)) {\n      if (this.templateEle.indexOf(value) === -1) {\n        this.templateEle.push(value);\n      }\n    }\n\n    return ele;\n  };\n\n  Accordion.prototype.ariaAttrUpdate = function (itemEle) {\n    var header = select('.' + CLS_HEADER, itemEle);\n    var content = select('.' + CLS_CONTENT, itemEle);\n    header.setAttribute('aria-controls', content.id);\n    content.setAttribute('aria-labelledby', header.id);\n    content.setAttribute('role', 'region');\n  };\n\n  Accordion.prototype.contentRendering = function (index) {\n    var itemcnt = this.createElement('div', {\n      className: CLS_CONTENT + ' ' + CLS_CTNHIDE,\n      id: getUniqueID('acrdn_panel')\n    });\n    attributes(itemcnt, {\n      'aria-hidden': 'true'\n    });\n    var ctn = this.createElement('div', {\n      className: CLS_CTENT\n    });\n\n    if (this.dataSource.length > 0) {\n      if (this.isReact) {\n        this.renderReactTemplates();\n      }\n\n      append(this.getItemTemplate()(this.dataSource[parseInt(index.toString(), 10)], this, 'itemTemplate', this.element.id + '_itemTemplate', false), ctn);\n      itemcnt.appendChild(ctn);\n    } else {\n      if (this.enableHtmlSanitizer && typeof this.items[parseInt(index.toString(), 10)].content) {\n        this.items[parseInt(index.toString(), 10)].content = SanitizeHtmlHelper.sanitize(this.items[parseInt(index.toString(), 10)].content);\n      }\n\n      itemcnt.appendChild(this.fetchElement(ctn, this.items[parseInt(index.toString(), 10)].content, index, false));\n    }\n\n    return itemcnt;\n  };\n\n  Accordion.prototype.expand = function (trgt) {\n    var _this = this;\n\n    var items = this.getItems();\n    var trgtItemEle = closest(trgt, '.' + CLS_ITEM$1);\n\n    if (isNullOrUndefined(trgt) || isVisible(trgt) && trgt.getAttribute('e-animate') !== 'true' || trgtItemEle.classList.contains(CLS_DISABLE$3)) {\n      return;\n    }\n\n    var acrdnRoot = closest(trgtItemEle, '.' + CLS_ACRDN_ROOT);\n    var expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);\n    var animation = {\n      name: this.animation.expand.effect,\n      duration: this.animation.expand.duration,\n      timingFunction: this.animation.expand.easing\n    };\n    var icon = select('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;\n    var eventArgs = {\n      element: trgtItemEle,\n      item: items[this.getIndexByItem(trgtItemEle)],\n      index: this.getIndexByItem(trgtItemEle),\n      content: trgtItemEle.querySelector('.' + CLS_CONTENT),\n      isExpanded: true\n    };\n    this.trigger('expanding', eventArgs, function (expandArgs) {\n      if (!expandArgs.cancel) {\n        icon.classList.add(CLS_TOGANIMATE);\n\n        _this.expandedItemsPush(trgtItemEle);\n\n        if (!isNullOrUndefined(expandState)) {\n          expandState.classList.remove(CLS_EXPANDSTATE);\n        }\n\n        trgtItemEle.classList.add(CLS_EXPANDSTATE);\n\n        if (animation.name === 'None') {\n          _this.expandProgress('begin', icon, trgt, trgtItemEle, expandArgs);\n\n          _this.expandProgress('end', icon, trgt, trgtItemEle, expandArgs);\n        } else {\n          _this.expandAnimation(animation.name, icon, trgt, trgtItemEle, animation, expandArgs);\n        }\n      }\n    });\n  };\n\n  Accordion.prototype.expandAnimation = function (ef, icn, trgt, trgtItemEle, animate, args) {\n    var _this = this;\n\n    var height;\n    this.lastActiveItemId = trgtItemEle.id;\n\n    if (ef === 'SlideDown') {\n      animate.begin = function () {\n        _this.expandProgress('begin', icn, trgt, trgtItemEle, args);\n\n        trgt.style.position = 'absolute';\n        height = trgtItemEle.offsetHeight;\n        trgt.style.maxHeight = trgt.offsetHeight + 'px';\n        trgtItemEle.style.maxHeight = '';\n      };\n\n      animate.progress = function () {\n        trgtItemEle.style.minHeight = height + trgt.offsetHeight + 'px';\n      };\n\n      animate.end = function () {\n        setStyleAttribute(trgt, {\n          'position': '',\n          'maxHeight': ''\n        });\n        trgtItemEle.style.minHeight = '';\n\n        _this.expandProgress('end', icn, trgt, trgtItemEle, args);\n      };\n    } else {\n      animate.begin = function () {\n        _this.expandProgress('begin', icn, trgt, trgtItemEle, args);\n      };\n\n      animate.end = function () {\n        _this.expandProgress('end', icn, trgt, trgtItemEle, args);\n      };\n    }\n\n    new Animation(animate).animate(trgt);\n  };\n\n  Accordion.prototype.expandProgress = function (progress, icon, trgt, trgtItemEle, eventArgs) {\n    this.remove(trgt, CLS_CTNHIDE);\n    this.add(trgtItemEle, CLS_SLCTED);\n    this.add(icon, CLS_EXPANDICN);\n\n    if (progress === 'end') {\n      this.add(trgtItemEle, CLS_ACTIVE);\n      trgt.setAttribute('aria-hidden', 'false');\n      attributes(trgt.previousElementSibling, {\n        'aria-expanded': 'true'\n      });\n      icon.classList.remove(CLS_TOGANIMATE);\n      this.trigger('expanded', eventArgs);\n    }\n  };\n\n  Accordion.prototype.expandedItemsPush = function (item) {\n    var index = this.getIndexByItem(item);\n\n    if (this.expandedIndices.indexOf(index) === -1) {\n      var temp = [].slice.call(this.expandedIndices);\n      temp.push(index);\n      this.setProperties({\n        expandedIndices: temp\n      }, true);\n    }\n  };\n\n  Accordion.prototype.getIndexByItem = function (item) {\n    var itemEle = this.getItemElements();\n    return [].slice.call(itemEle).indexOf(item);\n  };\n\n  Accordion.prototype.getItemElements = function () {\n    var itemEle = [];\n    var itemCollection = this.element.children;\n    [].slice.call(itemCollection).forEach(function (el) {\n      if (el.classList.contains(CLS_ITEM$1)) {\n        itemEle.push(el);\n      }\n    });\n    return itemEle;\n  };\n\n  Accordion.prototype.expandedItemsPop = function (item) {\n    var index = this.getIndexByItem(item);\n    var temp = [].slice.call(this.expandedIndices);\n    temp.splice(temp.indexOf(index), 1);\n    this.setProperties({\n      expandedIndices: temp\n    }, true);\n  };\n\n  Accordion.prototype.collapse = function (trgt) {\n    var _this = this;\n\n    var items = this.getItems();\n    var trgtItemEle = closest(trgt, '.' + CLS_ITEM$1);\n\n    if (isNullOrUndefined(trgt) || !isVisible(trgt) || trgtItemEle.classList.contains(CLS_DISABLE$3)) {\n      return;\n    }\n\n    var animation = {\n      name: this.animation.collapse.effect,\n      duration: this.animation.collapse.duration,\n      timingFunction: this.animation.collapse.easing\n    };\n    var icon = select('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;\n    var eventArgs = {\n      element: trgtItemEle,\n      item: items[this.getIndexByItem(trgtItemEle)],\n      index: this.getIndexByItem(trgtItemEle),\n      content: trgtItemEle.querySelector('.' + CLS_CONTENT),\n      isExpanded: false\n    };\n    this.trigger('expanding', eventArgs, function (expandArgs) {\n      if (!expandArgs.cancel) {\n        _this.expandedItemsPop(trgtItemEle);\n\n        trgtItemEle.classList.remove(CLS_EXPANDSTATE);\n        icon.classList.add(CLS_TOGANIMATE);\n\n        if (animation.name === 'None') {\n          _this.collapseProgress('begin', icon, trgt, trgtItemEle, expandArgs);\n\n          _this.collapseProgress('end', icon, trgt, trgtItemEle, expandArgs);\n        } else {\n          _this.collapseAnimation(animation.name, trgt, trgtItemEle, icon, animation, expandArgs);\n        }\n      }\n    });\n  };\n\n  Accordion.prototype.collapseAnimation = function (ef, trgt, trgtItEl, icn, animate, args) {\n    var _this = this;\n\n    var height;\n    var trgtHeight;\n    var itemHeight;\n    var remain;\n    this.lastActiveItemId = trgtItEl.id;\n\n    if (ef === 'SlideUp') {\n      animate.begin = function () {\n        itemHeight = trgtItEl.offsetHeight;\n        trgtItEl.style.minHeight = itemHeight + 'px';\n        trgt.style.position = 'absolute';\n        height = trgtItEl.offsetHeight;\n        trgtHeight = trgt.offsetHeight;\n        trgt.style.maxHeight = trgtHeight + 'px';\n\n        _this.collapseProgress('begin', icn, trgt, trgtItEl, args);\n      };\n\n      animate.progress = function () {\n        remain = height - (trgtHeight - trgt.offsetHeight);\n\n        if (remain < itemHeight) {\n          trgtItEl.style.minHeight = remain + 'px';\n        }\n      };\n\n      animate.end = function () {\n        trgt.style.display = 'none';\n\n        _this.collapseProgress('end', icn, trgt, trgtItEl, args);\n\n        trgtItEl.style.minHeight = '';\n        setStyleAttribute(trgt, {\n          'position': '',\n          'maxHeight': '',\n          'display': ''\n        });\n      };\n    } else {\n      animate.begin = function () {\n        _this.collapseProgress('begin', icn, trgt, trgtItEl, args);\n      };\n\n      animate.end = function () {\n        _this.collapseProgress('end', icn, trgt, trgtItEl, args);\n      };\n    }\n\n    new Animation(animate).animate(trgt);\n  };\n\n  Accordion.prototype.collapseProgress = function (progress, icon, trgt, trgtItemEle, eventArgs) {\n    this.remove(icon, CLS_EXPANDICN);\n    this.remove(trgtItemEle, CLS_SLCTED);\n\n    if (progress === 'end') {\n      this.add(trgt, CLS_CTNHIDE);\n      icon.classList.remove(CLS_TOGANIMATE);\n      this.remove(trgtItemEle, CLS_ACTIVE);\n      trgt.setAttribute('aria-hidden', 'true');\n      attributes(trgt.previousElementSibling, {\n        'aria-expanded': 'false'\n      });\n      this.trigger('expanded', eventArgs);\n    }\n  };\n  /**\r\n   * Returns the current module name.\r\n   *\r\n   * @returns {string} - It returns the current module name.\r\n   * @private\r\n   */\n\n\n  Accordion.prototype.getModuleName = function () {\n    return 'accordion';\n  };\n\n  Accordion.prototype.getItems = function () {\n    var items;\n\n    if (this.itemTemplate && this.headerTemplate) {\n      items = this.dataSource;\n    } else {\n      items = this.items;\n    }\n\n    return items;\n  };\n  /**\r\n   * Adds new item to the Accordion with the specified index of the Accordion.\r\n   *\r\n   * @param  {AccordionItemModel | AccordionItemModel[] | Object | Object[]} item - Item array that is to be added to the Accordion.\r\n   * @param  {number} index - Number value that determines where the item should be added.\r\n   * By default, item is added at the last index if the index is not specified.\r\n   * @returns {void}\r\n   */\n\n\n  Accordion.prototype.addItem = function (item, index) {\n    var _this = this;\n\n    var ele = this.element;\n    var itemEle = this.getItemElements();\n    var items = this.getItems();\n\n    if (isNullOrUndefined(index)) {\n      index = items.length;\n    }\n\n    if (ele.childElementCount >= index) {\n      var addItems = item instanceof Array ? item : [item];\n      addItems.forEach(function (addItem, i) {\n        var itemIndex = index + i;\n        items.splice(itemIndex, 0, addItem);\n\n        var innerItemEle = _this.renderInnerItem(addItem, itemIndex);\n\n        if (ele.childElementCount === itemIndex) {\n          ele.appendChild(innerItemEle);\n        } else {\n          ele.insertBefore(innerItemEle, itemEle[parseInt(itemIndex.toString(), 10)]);\n        }\n\n        EventHandler.add(innerItemEle.querySelector('.' + CLS_HEADER), 'focus', _this.focusIn, _this);\n        EventHandler.add(innerItemEle.querySelector('.' + CLS_HEADER), 'blur', _this.focusOut, _this);\n        _this.expandedIndices = [];\n\n        _this.expandedItemRefresh(ele);\n\n        if (addItem && addItem.expanded) {\n          _this.expandItem(true, itemIndex);\n        }\n      });\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Accordion.prototype.expandedItemRefresh = function (ele) {\n    var _this = this;\n\n    var itemEle = this.getItemElements();\n    [].slice.call(itemEle).forEach(function (el) {\n      if (el.classList.contains(CLS_SLCTED)) {\n        _this.expandedItemsPush(el);\n      }\n    });\n  };\n  /**\r\n   * Dynamically removes item from Accordion.\r\n   *\r\n   * @param  {number} index - Number value that determines which item should be removed.\r\n   * @returns {void}.\r\n   */\n\n\n  Accordion.prototype.removeItem = function (index) {\n    if (this.isReact) {\n      this.clearTemplate(['headerTemplate', 'itemTemplate'], index);\n    }\n\n    var itemEle = this.getItemElements();\n    var ele = itemEle[parseInt(index.toString(), 10)];\n    var items = this.getItems();\n\n    if (isNullOrUndefined(ele)) {\n      return;\n    }\n\n    this.restoreContent(index);\n    detach(ele);\n    items.splice(index, 1);\n    this.expandedIndices = [];\n    this.expandedItemRefresh(this.element);\n  };\n  /**\r\n   * Sets focus to the specified index item header in Accordion.\r\n   *\r\n   * @param  {number} index - Number value that determines which item should be focused.\r\n   * @returns {void}.\r\n   */\n\n\n  Accordion.prototype.select = function (index) {\n    var itemEle = this.getItemElements();\n    var ele = itemEle[parseInt(index.toString(), 10)];\n\n    if (isNullOrUndefined(ele) || isNullOrUndefined(select('.' + CLS_HEADER, ele))) {\n      return;\n    }\n\n    ele.children[0].focus();\n  };\n  /**\r\n   * Shows or hides the specified item from Accordion.\r\n   *\r\n   * @param  {number} index - Number value that determines which item should be hidden/shown.\r\n   * @param  {boolean} isHidden - Boolean value that determines the action either hide (true) or show (false). Default value is false.\r\n   * If the `isHidden` value is false, the item is shown or else item it is hidden.\r\n   * @returns {void}.\r\n   */\n\n\n  Accordion.prototype.hideItem = function (index, isHidden) {\n    var itemEle = this.getItemElements();\n    var ele = itemEle[parseInt(index.toString(), 10)];\n\n    if (isNullOrUndefined(ele)) {\n      return;\n    }\n\n    if (isNullOrUndefined(isHidden)) {\n      isHidden = true;\n    }\n\n    if (isHidden) {\n      this.add(ele, CLS_ITEMHIDE);\n    } else {\n      this.remove(ele, CLS_ITEMHIDE);\n    }\n  };\n  /**\r\n   * Enables/Disables the specified Accordion item.\r\n   *\r\n   * @param  {number} index - Number value that determines which item should be enabled/disabled.\r\n   * @param  {boolean} isEnable - Boolean value that determines the action as enable (true) or disable (false).\r\n   * If the `isEnable` value is true, the item is enabled or else it is disabled.\r\n   * @returns {void}.\r\n   */\n\n\n  Accordion.prototype.enableItem = function (index, isEnable) {\n    var itemEle = this.getItemElements();\n    var ele = itemEle[parseInt(index.toString(), 10)];\n\n    if (isNullOrUndefined(ele)) {\n      return;\n    }\n\n    var eleHeader = ele.firstElementChild;\n\n    if (isEnable) {\n      this.remove(ele, CLS_DISABLE$3);\n      attributes(eleHeader, {\n        'tabindex': '0',\n        'aria-disabled': 'false'\n      });\n      eleHeader.focus();\n    } else {\n      if (ele.classList.contains(CLS_ACTIVE)) {\n        this.expandItem(false, index);\n        this.eleMoveFocus('movedown', this.element, eleHeader);\n      }\n\n      this.add(ele, CLS_DISABLE$3);\n      eleHeader.setAttribute('aria-disabled', 'true');\n      eleHeader.removeAttribute('tabindex');\n    }\n  };\n  /**\r\n   * Expands/Collapses the specified Accordion item.\r\n   *\r\n   * @param  {boolean} isExpand - Boolean value that determines the action as expand or collapse.\r\n   * @param  {number} index - Number value that determines which item should be expanded/collapsed.`index` is optional parameter.\r\n   * Without Specifying index, based on the `isExpand` value all Accordion item can be expanded or collapsed.\r\n   * @returns {void}.\r\n   */\n\n\n  Accordion.prototype.expandItem = function (isExpand, index) {\n    var _this = this;\n\n    var itemEle = this.getItemElements();\n\n    if (isNullOrUndefined(index)) {\n      if (this.expandMode === 'Single' && isExpand) {\n        var ele = itemEle[itemEle.length - 1];\n        this.itemExpand(isExpand, ele, this.getIndexByItem(ele));\n      } else {\n        var item = select('#' + this.lastActiveItemId, this.element);\n        [].slice.call(itemEle).forEach(function (el) {\n          _this.itemExpand(isExpand, el, _this.getIndexByItem(el));\n\n          el.classList.remove(CLS_EXPANDSTATE);\n        });\n        var expandedItem = select('.' + CLS_EXPANDSTATE, this.element);\n\n        if (expandedItem) {\n          expandedItem.classList.remove(CLS_EXPANDSTATE);\n        }\n\n        if (item) {\n          item.classList.add(CLS_EXPANDSTATE);\n        }\n      }\n    } else {\n      var ele = itemEle[parseInt(index.toString(), 10)];\n\n      if (isNullOrUndefined(ele) || !ele.classList.contains(CLS_SLCT) || ele.classList.contains(CLS_ACTIVE) && isExpand) {\n        return;\n      } else {\n        if (this.expandMode === 'Single') {\n          this.expandItem(false);\n        }\n\n        this.itemExpand(isExpand, ele, index);\n      }\n    }\n  };\n\n  Accordion.prototype.itemExpand = function (isExpand, ele, index) {\n    var ctn = ele.children[1];\n\n    if (ele.classList.contains(CLS_DISABLE$3)) {\n      return;\n    }\n\n    if (isNullOrUndefined(ctn) && isExpand) {\n      ctn = this.contentRendering(index);\n      ele.appendChild(ctn);\n      this.ariaAttrUpdate(ele);\n      this.expand(ctn);\n    } else if (!isNullOrUndefined(ctn)) {\n      if (isExpand) {\n        this.expand(ctn);\n      } else {\n        this.collapse(ctn);\n      }\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n\n  Accordion.prototype.destroyItems = function () {\n    this.restoreContent(null);\n\n    if (this.isReact || this.isAngular || this.isVue) {\n      this.clearTemplate();\n    }\n\n    [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM$1)).forEach(function (el) {\n      detach(el);\n    });\n  };\n\n  Accordion.prototype.restoreContent = function (index) {\n    var ctnElePos;\n\n    if (isNullOrUndefined(index)) {\n      ctnElePos = this.element;\n    } else {\n      ctnElePos = this.element.querySelectorAll('.' + CLS_ITEM$1)[parseInt(index.toString(), 10)];\n    }\n\n    this.templateEle.forEach(function (eleStr) {\n      if (!isNullOrUndefined(ctnElePos.querySelector(eleStr))) {\n        document.body.appendChild(ctnElePos.querySelector(eleStr)).style.display = 'none';\n      }\n    });\n  };\n\n  Accordion.prototype.updateItem = function (item, index) {\n    if (!isNullOrUndefined(item)) {\n      var items = this.getItems();\n      var itemObj = items[parseInt(index.toString(), 10)];\n      items.splice(index, 1);\n      this.restoreContent(index);\n      detach(item);\n      this.addItem(itemObj, index);\n    }\n  };\n\n  Accordion.prototype.setTemplate = function (template, toElement, index) {\n    toElement.innerHTML = '';\n    this.templateCompile(toElement, template, index);\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n\n  Accordion.prototype.templateCompile = function (ele, cnt, index) {\n    var tempEle = this.createElement('div');\n    this.fetchElement(tempEle, cnt, index, false);\n\n    if (tempEle.childNodes.length !== 0) {\n      [].slice.call(tempEle.childNodes).forEach(function (childEle) {\n        ele.appendChild(childEle);\n      });\n    }\n  };\n\n  Accordion.prototype.getPersistData = function () {\n    var keyEntity = ['expandedIndices'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\r\n   * Gets called when the model property changes.The data that describes the old and new values of the property that changed.\r\n   *\r\n   * @param  {AccordionModel} newProp - It contains the new value of data.\r\n   * @param  {AccordionModel} oldProp - It contains the old value of data.\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  Accordion.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var acrdn = this.element;\n    var isRefresh = false;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'items':\n          if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {\n            var changedProp = Object.keys(newProp.items);\n\n            for (var j = 0; j < changedProp.length; j++) {\n              var index = parseInt(Object.keys(newProp.items)[parseInt(j.toString(), 10)], 10);\n              var property = Object.keys(newProp.items[parseInt(index.toString(), 10)])[0];\n              var item = selectAll('.' + CLS_ITEM$1, this.element)[parseInt(index.toString(), 10)];\n              var oldVal = Object(oldProp.items[parseInt(index.toString(), 10)])[\"\" + property];\n              var newVal = Object(newProp.items[parseInt(index.toString(), 10)])[\"\" + property];\n              var temp = property;\n\n              if (temp === 'header' || temp === 'iconCss' || temp === 'expanded' || temp === 'content' && oldVal === '') {\n                this.updateItem(item, index);\n              }\n\n              if (property === 'cssClass' && !isNullOrUndefined(item)) {\n                if (oldVal) {\n                  removeClass([item], oldVal.split(' '));\n                }\n\n                if (newVal) {\n                  addClass([item], newVal.split(' '));\n                }\n              }\n\n              if (property === 'visible' && !isNullOrUndefined(item)) {\n                if (Object(newProp.items[parseInt(index.toString(), 10)])[\"\" + property] === false) {\n                  item.classList.add(CLS_ITEMHIDE);\n                } else {\n                  item.classList.remove(CLS_ITEMHIDE);\n                }\n              }\n\n              if (property === 'disabled' && !isNullOrUndefined(item)) {\n                this.enableItem(index, !newVal);\n              }\n\n              if (property === 'content' && !isNullOrUndefined(item) && item.children.length === 2) {\n                if (typeof newVal === 'function') {\n                  var activeContent = item.querySelector('.' + CLS_CTENT);\n                  activeContent.innerHTML = '';\n                  this.setTemplate(newVal, activeContent, index);\n                } else {\n                  if (item.classList.contains(CLS_SLCTED)) {\n                    this.expandItem(false, index);\n                  }\n\n                  detach(item.querySelector('.' + CLS_CONTENT));\n                }\n              }\n            }\n          } else {\n            isRefresh = true;\n          }\n\n          break;\n\n        case 'dataSource':\n        case 'expandedIndices':\n          if (this.expandedIndices === null) {\n            this.expandedIndices = [];\n          }\n\n          isRefresh = true;\n          break;\n\n        case 'headerTemplate':\n          this.initializeHeaderTemplate();\n          isRefresh = true;\n          break;\n\n        case 'itemTemplate':\n          this.initializeItemTemplate();\n          isRefresh = true;\n          break;\n\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            this.add(acrdn, CLS_RTL$3);\n          } else {\n            this.remove(acrdn, CLS_RTL$3);\n          }\n\n          break;\n\n        case 'height':\n          setStyleAttribute(this.element, {\n            'height': formatUnit(newProp.height)\n          });\n          break;\n\n        case 'width':\n          setStyleAttribute(this.element, {\n            'width': formatUnit(newProp.width)\n          });\n          break;\n\n        case 'expandMode':\n          if (newProp.expandMode === 'Single' && this.expandedIndices.length > 1) {\n            this.expandItem(false);\n          }\n\n          break;\n      }\n    }\n\n    if (isRefresh) {\n      this.initExpand = [];\n\n      if (this.expandedIndices.length > 0) {\n        this.initExpand = this.expandedIndices;\n      }\n\n      this.destroyItems();\n      this.renderItems();\n      this.initItemExpand();\n    }\n  };\n\n  __decorate$4([Collection([], AccordionItem)], Accordion.prototype, \"items\", void 0);\n\n  __decorate$4([Property([])], Accordion.prototype, \"dataSource\", void 0);\n\n  __decorate$4([Property()], Accordion.prototype, \"itemTemplate\", void 0);\n\n  __decorate$4([Property()], Accordion.prototype, \"headerTemplate\", void 0);\n\n  __decorate$4([Property('100%')], Accordion.prototype, \"width\", void 0);\n\n  __decorate$4([Property('auto')], Accordion.prototype, \"height\", void 0);\n\n  __decorate$4([Property([])], Accordion.prototype, \"expandedIndices\", void 0);\n\n  __decorate$4([Property('Multiple')], Accordion.prototype, \"expandMode\", void 0);\n\n  __decorate$4([Property(false)], Accordion.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate$4([Complex({}, AccordionAnimationSettings)], Accordion.prototype, \"animation\", void 0);\n\n  __decorate$4([Event()], Accordion.prototype, \"clicked\", void 0);\n\n  __decorate$4([Event()], Accordion.prototype, \"expanding\", void 0);\n\n  __decorate$4([Event()], Accordion.prototype, \"expanded\", void 0);\n\n  __decorate$4([Event()], Accordion.prototype, \"created\", void 0);\n\n  __decorate$4([Event()], Accordion.prototype, \"destroyed\", void 0);\n\n  Accordion = __decorate$4([NotifyPropertyChanges], Accordion);\n  return Accordion;\n}(Component);\n/**\r\n * Accordion all modules\r\n */\n\n\nvar __extends$5 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$5 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path='../common/menu-base-model.d.ts'/>\n\n/**\r\n * The ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\r\n * ```html\r\n * <div id = 'target'></div>\r\n * <ul id = 'contextmenu'></ul>\r\n * ```\r\n * ```typescript\r\n * <script>\r\n * var contextMenuObj = new ContextMenu({items: [{ text: 'Cut' }, { text: 'Copy' },{ text: 'Paste' }], target: '#target'});\r\n * </script>\r\n * ```\r\n */\n\n\nvar ContextMenu =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$5(ContextMenu, _super);\n  /**\r\n   * Constructor for creating the widget.\r\n   *\r\n   * @private\r\n   * @param {ContextMenuModel} options - Specifies the context menu model\r\n   * @param {string} element - Specifies the element\r\n   */\n\n\n  function ContextMenu(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\r\n   * For internal use only - prerender processing.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  ContextMenu.prototype.preRender = function () {\n    this.isMenu = false;\n    this.element.id = this.element.id || getUniqueID('ej2-contextmenu');\n\n    _super.prototype.preRender.call(this);\n  };\n\n  ContextMenu.prototype.initialize = function () {\n    _super.prototype.initialize.call(this);\n\n    attributes(this.element, {\n      'role': 'menubar',\n      'tabindex': '0'\n    });\n    this.element.style.zIndex = getZindexPartial(this.element).toString();\n  };\n  /**\r\n   * This method is used to open the ContextMenu in specified position.\r\n   *\r\n   * @param {number} top - To specify ContextMenu vertical positioning.\r\n   * @param {number} left - To specify ContextMenu horizontal positioning.\r\n   * @param {HTMLElement} target - To calculate z-index for ContextMenu based upon the specified target.\r\n   * @function open\r\n   * @returns {void}\r\n   */\n\n\n  ContextMenu.prototype.open = function (top, left, target) {\n    _super.prototype.openMenu.call(this, null, null, top, left, null, target);\n  };\n  /**\r\n   * Closes the ContextMenu if it is opened.\r\n   *\r\n   * @function close\r\n   * @returns {void}\r\n   */\n\n\n  ContextMenu.prototype.close = function () {\n    _super.prototype.closeMenu.call(this);\n  };\n  /**\r\n   * Called internally if any of the property value changed.\r\n   *\r\n   * @private\r\n   * @param {ContextMenuModel} newProp - Specifies new properties\r\n   * @param {ContextMenuModel} oldProp - Specifies old properties\r\n   * @returns {void}\r\n   */\n\n\n  ContextMenu.prototype.onPropertyChanged = function (newProp, oldProp) {\n    _super.prototype.onPropertyChanged.call(this, newProp, oldProp);\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'filter':\n          this.close();\n          this.filter = newProp.filter;\n          break;\n\n        case 'target':\n          this.unWireEvents(oldProp.target);\n          this.wireEvents();\n          break;\n      }\n    }\n  };\n  /**\r\n   * Get module name.\r\n   *\r\n   * @returns {string} - Module Name\r\n   * @private\r\n   */\n\n\n  ContextMenu.prototype.getModuleName = function () {\n    return 'contextmenu';\n  };\n\n  __decorate$5([Property('')], ContextMenu.prototype, \"target\", void 0);\n\n  __decorate$5([Property('')], ContextMenu.prototype, \"filter\", void 0);\n\n  __decorate$5([Collection([], MenuItem)], ContextMenu.prototype, \"items\", void 0);\n\n  ContextMenu = __decorate$5([NotifyPropertyChanges], ContextMenu);\n  return ContextMenu;\n}(MenuBase);\n/**\r\n * ContextMenu modules\r\n */\n\n\nvar __extends$6 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$6 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path='../common/menu-base-model.d.ts'/>\n\n\nvar VMENU = 'e-vertical';\nvar SCROLLABLE = 'e-scrollable';\nvar HAMBURGER = 'e-hamburger';\n/**\r\n * The Menu is a graphical user interface that serve as navigation headers for your application or site.\r\n * ```html\r\n * <ul id = 'menu'></ul>\r\n * ```\r\n * ```typescript\r\n * <script>\r\n * var menuObj = new Menu({ items: [{ text: 'Home' }, { text: 'Contact Us' },{ text: 'Login' }]});\r\n * menuObj.appendTo(\"#menu\");\r\n * </script>\r\n * ```\r\n */\n\nvar Menu =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$6(Menu, _super);\n  /**\r\n   * Constructor for creating the component.\r\n   *\r\n   * @private\r\n   * @param {MenuModel} options - Specifies the menu model\r\n   * @param {string} element - Specifies the element\r\n   */\n\n\n  function Menu(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.tempItems = [];\n    return _this;\n  }\n  /**\r\n   * Get module name.\r\n   *\r\n   * @private\r\n   * @returns {string} - Module Name\r\n   */\n\n\n  Menu.prototype.getModuleName = function () {\n    return 'menu';\n  };\n  /**\r\n   * For internal use only - prerender processing.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  Menu.prototype.preRender = function () {\n    this.isMenu = true;\n    this.element.id = this.element.id || getUniqueID('ej2-menu');\n\n    if (this.template) {\n      try {\n        if (document.querySelectorAll(this.template).length) {\n          this.template = document.querySelector(this.template).innerHTML.trim();\n          this.clearChanges();\n        }\n      } catch (e) {\n        /* action on catch */\n      }\n\n      this.updateMenuItems(this.items);\n    } else {\n      this.updateMenuItems(this.items);\n    }\n\n    _super.prototype.preRender.call(this);\n  };\n\n  Menu.prototype.initialize = function () {\n    _super.prototype.initialize.call(this);\n\n    attributes(this.element, {\n      'role': 'menubar',\n      'tabindex': '0'\n    });\n\n    if (this.orientation === 'Vertical') {\n      this.element.classList.add(VMENU);\n\n      if (this.hamburgerMode && !this.target) {\n        this.element.previousElementSibling.classList.add(VMENU);\n      }\n\n      this.element.setAttribute('aria-orientation', 'vertical');\n    } else {\n      if (Browser.isDevice && !this.enableScrolling) {\n        this.element.parentElement.classList.add(SCROLLABLE);\n      }\n    }\n\n    if (this.hamburgerMode) {\n      this.element.parentElement.classList.add(HAMBURGER);\n\n      if (this.orientation === 'Horizontal') {\n        this.element.classList.add('e-hide-menu');\n      }\n    }\n  };\n\n  Menu.prototype.updateMenuItems = function (items) {\n    this.tempItems = items;\n    this.items = [];\n    this.tempItems.map(this.createMenuItems, this);\n    this.setProperties({\n      items: this.items\n    }, true);\n    this.tempItems = [];\n  };\n  /**\r\n   * Called internally if any of the property value changed.\r\n   *\r\n   * @private\r\n   * @param {MenuModel} newProp - Specifies the new properties.\r\n   * @param {MenuModel} oldProp - Specifies the old properties.\r\n   * @returns {void}\r\n   */\n\n\n  Menu.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var _this = this;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'orientation':\n          if (newProp.orientation === 'Vertical') {\n            this.element.classList.add(VMENU);\n\n            if (this.hamburgerMode) {\n              if (!this.target) {\n                this.element.previousElementSibling.classList.add(VMENU);\n              }\n\n              this.element.classList.remove('e-hide-menu');\n            }\n\n            this.element.setAttribute('aria-orientation', 'vertical');\n          } else {\n            this.element.classList.remove(VMENU);\n\n            if (this.hamburgerMode) {\n              if (!this.target) {\n                this.element.previousElementSibling.classList.remove(VMENU);\n              }\n\n              this.element.classList.add('e-hide-menu');\n            }\n\n            this.element.removeAttribute('aria-orientation');\n          }\n\n          break;\n\n        case 'items':\n          if (!Object.keys(oldProp.items).length) {\n            this.updateMenuItems(newProp.items);\n          }\n\n          break;\n\n        case 'hamburgerMode':\n          if (!this.element.previousElementSibling) {\n            _super.prototype.createHeaderContainer.call(this);\n          }\n\n          if (newProp.hamburgerMode) {\n            this.element.parentElement.classList.add(HAMBURGER);\n            [].slice.call(this.element.getElementsByClassName('e-blankicon')).forEach(function (li) {\n              li.style[_this.enableRtl ? 'paddingRight' : 'paddingLeft'] = '';\n            });\n          } else {\n            this.element.parentElement.classList.remove(HAMBURGER);\n\n            if (this.orientation === 'Vertical') {\n              this.setBlankIconStyle(this.element);\n            }\n          }\n\n          if (this.orientation === 'Vertical') {\n            if (!this.target) {\n              this.element.previousElementSibling.classList.add(VMENU);\n            }\n\n            this.element.classList.remove('e-hide-menu');\n          } else {\n            if (this.target) {\n              this.element.previousElementSibling.classList.add(VMENU);\n            } else {\n              this.element.previousElementSibling.classList.remove(VMENU);\n            }\n\n            this.element.classList[newProp.hamburgerMode ? 'add' : 'remove']('e-hide-menu');\n          }\n\n          break;\n\n        case 'title':\n          if (this.hamburgerMode && this.element.previousElementSibling) {\n            newProp.title = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(newProp.title) : newProp.title;\n            this.element.previousElementSibling.querySelector('.e-menu-title').innerHTML = newProp.title;\n          }\n\n          break;\n\n        case 'target':\n          if (this.hamburgerMode) {\n            this.unWireEvents(oldProp.target);\n            this.wireEvents();\n\n            if (this.orientation === 'Horizontal') {\n              if (!newProp.target) {\n                if (!this.element.previousElementSibling) {\n                  _super.prototype.createHeaderContainer.call(this);\n                }\n\n                this.element.previousElementSibling.classList.remove(VMENU);\n              } else {\n                this.element.previousElementSibling.classList.add(VMENU);\n              }\n\n              this.element.classList.add('e-hide-menu');\n            }\n          }\n\n          break;\n      }\n    }\n\n    _super.prototype.onPropertyChanged.call(this, newProp, oldProp);\n  };\n\n  Menu.prototype.createMenuItems = function (item) {\n    var idx;\n    var i;\n    var items = this.items;\n    var pIdField = this.getField('parentId');\n\n    if (item[\"\" + pIdField]) {\n      idx = this.getIndex(item[\"\" + pIdField].toString(), true);\n\n      for (i = 0; i < idx.length; i++) {\n        if (!items[idx[i]].items) {\n          items[idx[i]].items = [];\n        }\n\n        items = items[idx[i]].items;\n      }\n\n      items.push(item);\n    } else {\n      this.items.push(item);\n    }\n  };\n  /**\r\n   * This method is used to open the Menu in hamburger mode.\r\n   *\r\n   * @function open\r\n   * @returns {void}\r\n   */\n\n\n  Menu.prototype.open = function () {\n    _super.prototype.openHamburgerMenu.call(this);\n  };\n  /**\r\n   * Closes the Menu if it is opened in hamburger mode.\r\n   *\r\n   * @function close\r\n   * @returns {void}\r\n   */\n\n\n  Menu.prototype.close = function () {\n    _super.prototype.closeHamburgerMenu.call(this);\n  };\n\n  __decorate$6([Property('Horizontal')], Menu.prototype, \"orientation\", void 0);\n\n  __decorate$6([Property('')], Menu.prototype, \"target\", void 0);\n\n  __decorate$6([Property(null)], Menu.prototype, \"template\", void 0);\n\n  __decorate$6([Property(false)], Menu.prototype, \"enableScrolling\", void 0);\n\n  __decorate$6([Property(false)], Menu.prototype, \"hamburgerMode\", void 0);\n\n  __decorate$6([Property('Menu')], Menu.prototype, \"title\", void 0);\n\n  __decorate$6([Property(false)], Menu.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate$6([Complex({\n    itemId: 'id',\n    text: 'text',\n    parentId: 'parentId',\n    iconCss: 'iconCss',\n    url: 'url',\n    separator: 'separator',\n    children: 'items'\n  }, FieldSettings)], Menu.prototype, \"fields\", void 0);\n\n  Menu = __decorate$6([NotifyPropertyChanges], Menu);\n  return Menu;\n}(MenuBase);\n/**\r\n * Menu modules\r\n */\n\n\nvar __extends$7 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$7 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar CLS_TAB = 'e-tab';\nvar CLS_HEADER$1 = 'e-tab-header';\nvar CLS_BLA_TEM = 'blazor-template';\nvar CLS_CONTENT$1 = 'e-content';\nvar CLS_NEST$1 = 'e-nested';\nvar CLS_ITEMS$1 = 'e-items';\nvar CLS_ITEM$2 = 'e-item';\nvar CLS_TEMPLATE$1 = 'e-template';\nvar CLS_RTL$4 = 'e-rtl';\nvar CLS_ACTIVE$1 = 'e-active';\nvar CLS_DISABLE$4 = 'e-disable';\nvar CLS_HIDDEN$1 = 'e-hidden';\nvar CLS_FOCUS = 'e-focused';\nvar CLS_ICONS = 'e-icons';\nvar CLS_ICON = 'e-icon';\nvar CLS_ICON_TAB = 'e-icon-tab';\nvar CLS_ICON_CLOSE = 'e-close-icon';\nvar CLS_CLOSE_SHOW = 'e-close-show';\nvar CLS_TEXT = 'e-tab-text';\nvar CLS_INDICATOR = 'e-indicator';\nvar CLS_WRAP = 'e-tab-wrap';\nvar CLS_TEXT_WRAP = 'e-text-wrap';\nvar CLS_TAB_ICON = 'e-tab-icon';\nvar CLS_TB_ITEMS = 'e-toolbar-items';\nvar CLS_TB_ITEM = 'e-toolbar-item';\nvar CLS_TB_POP = 'e-toolbar-pop';\nvar CLS_TB_POPUP = 'e-toolbar-popup';\nvar CLS_HOR_NAV = 'e-hor-nav';\nvar CLS_POPUP_OPEN = 'e-popup-open';\nvar CLS_POPUP_CLOSE = 'e-popup-close';\nvar CLS_PROGRESS = 'e-progress';\nvar CLS_IGNORE = 'e-ignore';\nvar CLS_OVERLAY$2 = 'e-overlay';\nvar CLS_HSCRCNT = 'e-hscroll-content';\nvar CLS_VSCRCNT = 'e-vscroll-content';\nvar CLS_VTAB = 'e-vertical-tab';\nvar CLS_VERTICAL$1 = 'e-vertical';\nvar CLS_VLEFT = 'e-vertical-left';\nvar CLS_VRIGHT = 'e-vertical-right';\nvar CLS_HBOTTOM = 'e-horizontal-bottom';\nvar CLS_FILL = 'e-fill-mode';\nvar TABITEMPREFIX = 'tabitem_';\nvar CLS_REORDER_ACTIVE_ITEM = 'e-reorder-active-item';\n/**\r\n * Objects used for configuring the Tab selecting item action properties.\r\n */\n\nvar TabActionSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$7(TabActionSettings, _super);\n\n  function TabActionSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$7([Property('SlideLeftIn')], TabActionSettings.prototype, \"effect\", void 0);\n\n  __decorate$7([Property(600)], TabActionSettings.prototype, \"duration\", void 0);\n\n  __decorate$7([Property('ease')], TabActionSettings.prototype, \"easing\", void 0);\n\n  return TabActionSettings;\n}(ChildProperty);\n/**\r\n * Objects used for configuring the Tab animation properties.\r\n */\n\n\nvar TabAnimationSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$7(TabAnimationSettings, _super);\n\n  function TabAnimationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$7([Complex({\n    effect: 'SlideLeftIn',\n    duration: 600,\n    easing: 'ease'\n  }, TabActionSettings)], TabAnimationSettings.prototype, \"previous\", void 0);\n\n  __decorate$7([Complex({\n    effect: 'SlideRightIn',\n    duration: 600,\n    easing: 'ease'\n  }, TabActionSettings)], TabAnimationSettings.prototype, \"next\", void 0);\n\n  return TabAnimationSettings;\n}(ChildProperty);\n/**\r\n * Objects used for configuring the Tab item header properties.\r\n */\n\n\nvar Header =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$7(Header, _super);\n\n  function Header() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$7([Property('')], Header.prototype, \"text\", void 0);\n\n  __decorate$7([Property('')], Header.prototype, \"iconCss\", void 0);\n\n  __decorate$7([Property('left')], Header.prototype, \"iconPosition\", void 0);\n\n  return Header;\n}(ChildProperty);\n/**\r\n * An array of object that is used to configure the Tab.\r\n */\n\n\nvar TabItem =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$7(TabItem, _super);\n\n  function TabItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$7([Complex({}, Header)], TabItem.prototype, \"header\", void 0);\n\n  __decorate$7([Property(null)], TabItem.prototype, \"headerTemplate\", void 0);\n\n  __decorate$7([Property('')], TabItem.prototype, \"content\", void 0);\n\n  __decorate$7([Property('')], TabItem.prototype, \"cssClass\", void 0);\n\n  __decorate$7([Property(false)], TabItem.prototype, \"disabled\", void 0);\n\n  __decorate$7([Property(true)], TabItem.prototype, \"visible\", void 0);\n\n  __decorate$7([Property()], TabItem.prototype, \"id\", void 0);\n\n  __decorate$7([Property(-1)], TabItem.prototype, \"tabIndex\", void 0);\n\n  return TabItem;\n}(ChildProperty);\n/**\r\n * Tab is a content panel to show multiple contents in a single space, one at a time.\r\n * Each Tab item has an associated content, that will be displayed based on the active Tab header item.\r\n * ```html\r\n * <div id=\"tab\"></div>\r\n * <script>\r\n *   var tabObj = new Tab();\r\n *   tab.appendTo(\"#tab\");\r\n * </script>\r\n * ```\r\n */\n\n\nvar Tab =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$7(Tab, _super);\n  /**\r\n   * Initializes a new instance of the Tab class.\r\n   *\r\n   * @param {TabModel} options  - Specifies Tab model properties as options.\r\n   * @param {string | HTMLElement} element  - Specifies the element that is rendered as a Tab.\r\n   */\n\n\n  function Tab(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.show = {};\n    _this.hide = {};\n    _this.maxHeight = 0;\n    _this.title = 'Close';\n    _this.isInteracted = false;\n    _this.lastIndex = 0;\n    _this.isAdd = false;\n    _this.isIconAlone = false;\n    _this.draggableItems = [];\n    _this.resizeContext = _this.refreshActiveTabBorder.bind(_this);\n    /**\r\n     * Contains the keyboard configuration of the Tab.\r\n     */\n\n    _this.keyConfigs = {\n      tab: 'tab',\n      home: 'home',\n      end: 'end',\n      enter: 'enter',\n      space: 'space',\n      delete: 'delete',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      moveDown: 'downarrow'\n    };\n    return _this;\n  }\n  /**\r\n   * Removes the component from the DOM and detaches all its related event handlers, attributes and classes.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  Tab.prototype.destroy = function () {\n    if (this.isReact || this.isAngular) {\n      this.clearTemplate();\n    }\n\n    if (!isNullOrUndefined(this.tbObj)) {\n      this.tbObj.destroy();\n      this.tbObj = null;\n    }\n\n    this.unWireEvents();\n    this.element.removeAttribute('aria-disabled');\n    this.expTemplateContent();\n\n    if (!this.isTemplate) {\n      while (this.element.firstElementChild) {\n        remove(this.element.firstElementChild);\n      }\n    } else {\n      var cntEle = select('.' + CLS_TAB + ' > .' + CLS_CONTENT$1, this.element);\n      this.element.classList.remove(CLS_TEMPLATE$1);\n\n      if (!isNullOrUndefined(cntEle)) {\n        cntEle.innerHTML = this.cnt;\n      }\n    }\n\n    if (this.btnCls) {\n      this.btnCls = null;\n    }\n\n    this.hdrEle = null;\n    this.cntEle = null;\n    this.tbItems = null;\n    this.tbItem = null;\n    this.tbPop = null;\n    this.prevItem = null;\n    this.popEle = null;\n    this.bdrLine = null;\n    this.content = null;\n    this.dragItem = null;\n    this.cloneElement = null;\n    this.draggingItems = [];\n\n    if (this.draggableItems && this.draggableItems.length > 0) {\n      for (var i = 0; i < this.draggableItems.length; i++) {\n        this.draggableItems[i].destroy();\n        this.draggableItems[i] = null;\n      }\n\n      this.draggableItems = [];\n    }\n\n    _super.prototype.destroy.call(this);\n\n    this.trigger('destroyed');\n  };\n  /**\r\n   * Refresh the tab component\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  Tab.prototype.refresh = function () {\n    if (this.isReact) {\n      this.clearTemplate();\n    }\n\n    _super.prototype.refresh.call(this);\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n  /**\r\n   * Initialize component\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  Tab.prototype.preRender = function () {\n    var nested = closest(this.element, '.' + CLS_CONTENT$1);\n    this.prevIndex = 0;\n    this.isNested = false;\n    this.isPopup = false;\n    this.initRender = true;\n    this.isSwipeed = false;\n    this.itemIndexArray = [];\n    this.templateEle = [];\n\n    if (this.allowDragAndDrop) {\n      this.dragArea = !isNullOrUndefined(this.dragArea) ? this.dragArea : '#' + this.element.id + ' ' + ('.' + CLS_HEADER$1);\n    }\n\n    if (!isNullOrUndefined(nested)) {\n      nested.parentElement.classList.add(CLS_NEST$1);\n      this.isNested = true;\n    }\n\n    var name = Browser.info.name;\n    var css = name === 'msie' ? 'e-ie' : name === 'edge' ? 'e-edge' : name === 'safari' ? 'e-safari' : '';\n    setStyleAttribute(this.element, {\n      'width': formatUnit(this.width),\n      'height': formatUnit(this.height)\n    });\n    this.setCssClass(this.element, this.cssClass, true);\n    attributes(this.element, {\n      'aria-disabled': 'false'\n    });\n    this.setCssClass(this.element, css, true);\n    this.updatePopAnimationConfig();\n  };\n  /**\r\n   * Initialize the component rendering\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  Tab.prototype.render = function () {\n    this.btnCls = this.createElement('span', {\n      className: CLS_ICONS + ' ' + CLS_ICON_CLOSE,\n      attrs: {\n        title: this.title\n      }\n    });\n    this.tabId = this.element.id.length > 0 ? '-' + this.element.id : getRandomId();\n    this.renderContainer();\n    this.wireEvents();\n    this.initRender = false;\n  };\n\n  Tab.prototype.renderContainer = function () {\n    var ele = this.element;\n    this.items.forEach(function (item, index) {\n      if (isNullOrUndefined(item.id) && !isNullOrUndefined(item.setProperties)) {\n        item.setProperties({\n          id: TABITEMPREFIX + index.toString()\n        }, true);\n      }\n    });\n\n    if (this.items.length > 0 && ele.children.length === 0) {\n      ele.appendChild(this.createElement('div', {\n        className: CLS_CONTENT$1\n      }));\n      this.setOrientation(this.headerPlacement, this.createElement('div', {\n        className: CLS_HEADER$1\n      }));\n      this.isTemplate = false;\n    } else if (this.element.children.length > 0) {\n      this.isTemplate = true;\n      ele.classList.add(CLS_TEMPLATE$1);\n      var header = ele.querySelector('.' + CLS_HEADER$1);\n\n      if (header && this.headerPlacement === 'Bottom') {\n        this.setOrientation(this.headerPlacement, header);\n      }\n    }\n\n    if (!isNullOrUndefined(select('.' + CLS_HEADER$1, this.element)) && !isNullOrUndefined(select('.' + CLS_CONTENT$1, this.element))) {\n      this.renderHeader();\n      this.tbItems = select('.' + CLS_HEADER$1 + ' .' + CLS_TB_ITEMS, this.element);\n\n      if (!isNullOrUndefined(this.tbItems)) {\n        rippleEffect(this.tbItems, {\n          selector: '.e-tab-wrap'\n        });\n      }\n\n      this.renderContent();\n\n      if (selectAll('.' + CLS_TB_ITEM, this.element).length > 0) {\n        this.tbItems = select('.' + CLS_HEADER$1 + ' .' + CLS_TB_ITEMS, this.element);\n        this.bdrLine = this.createElement('div', {\n          className: CLS_INDICATOR + ' ' + CLS_HIDDEN$1 + ' ' + CLS_IGNORE\n        });\n        var scrCnt = select('.' + this.scrCntClass, this.tbItems);\n\n        if (!isNullOrUndefined(scrCnt)) {\n          scrCnt.insertBefore(this.bdrLine, scrCnt.firstChild);\n        } else {\n          this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstChild);\n        }\n\n        this.setContentHeight(true);\n        this.select(this.selectedItem);\n      }\n\n      this.tbItem = selectAll('.' + CLS_TB_ITEM, this.hdrEle);\n\n      if (!isNullOrUndefined(this.tbItem)) {\n        for (var i = 0; i < this.items.length; i++) {\n          if (this.tbItem[i]) {\n            var tabID = this.items[i].id;\n            this.tbItem[i].setAttribute('data-id', tabID);\n          }\n        }\n      }\n\n      this.setRTL(this.enableRtl);\n    }\n  };\n\n  Tab.prototype.renderHeader = function () {\n    var _this = this;\n\n    var hdrPlace = this.headerPlacement;\n    var tabItems = [];\n    this.hdrEle = this.getTabHeader();\n    this.addVerticalClass();\n\n    if (!this.isTemplate) {\n      tabItems = this.parseObject(this.items, 0);\n    } else {\n      if (this.element.children.length > 1 && this.element.children[1].classList.contains(CLS_HEADER$1)) {\n        this.setProperties({\n          headerPlacement: 'Bottom'\n        }, true);\n      }\n\n      var count = this.hdrEle.children.length;\n      var hdrItems = [];\n\n      for (var i = 0; i < count; i++) {\n        hdrItems.push(this.hdrEle.children.item(i).innerHTML);\n      }\n\n      if (count > 0) {\n        while (this.hdrEle.firstElementChild) {\n          detach(this.hdrEle.firstElementChild);\n        }\n\n        var tabItems_1 = this.createElement('div', {\n          className: CLS_ITEMS$1\n        });\n        this.hdrEle.appendChild(tabItems_1);\n        hdrItems.forEach(function (item, index) {\n          _this.lastIndex = index;\n          var attr = {\n            className: CLS_ITEM$2,\n            id: CLS_ITEM$2 + _this.tabId + '_' + index\n          };\n\n          var txt = _this.createElement('span', {\n            className: CLS_TEXT,\n            innerHTML: item,\n            attrs: {\n              'role': 'presentation'\n            }\n          }).outerHTML;\n\n          var cont = _this.createElement('div', {\n            className: CLS_TEXT_WRAP,\n            innerHTML: txt + _this.btnCls.outerHTML\n          }).outerHTML;\n\n          var wrap = _this.createElement('div', {\n            className: CLS_WRAP,\n            innerHTML: cont,\n            attrs: {\n              role: 'tab',\n              tabIndex: '-1',\n              'aria-selected': 'false',\n              'aria-controls': CLS_CONTENT$1 + _this.tabId + '_' + index,\n              'aria-disabled': 'false'\n            }\n          });\n\n          tabItems_1.appendChild(_this.createElement('div', attr));\n          selectAll('.' + CLS_ITEM$2, tabItems_1)[index].appendChild(wrap);\n        });\n      }\n    }\n\n    this.tbObj = new Toolbar({\n      width: hdrPlace === 'Left' || hdrPlace === 'Right' ? 'auto' : '100%',\n      height: hdrPlace === 'Left' || hdrPlace === 'Right' ? '100%' : 'auto',\n      overflowMode: this.overflowMode,\n      items: tabItems.length !== 0 ? tabItems : [],\n      clicked: this.clickHandler.bind(this),\n      scrollStep: this.scrollStep,\n      enableHtmlSanitizer: this.enableHtmlSanitizer,\n      cssClass: this.cssClass\n    });\n    this.tbObj.isStringTemplate = true;\n    this.tbObj.createElement = this.createElement;\n    this.tbObj.appendTo(this.hdrEle);\n    attributes(this.hdrEle, {\n      role: 'tablist'\n    });\n\n    if (!isNullOrUndefined(this.element.getAttribute('aria-label'))) {\n      this.hdrEle.setAttribute('aria-label', this.element.getAttribute('aria-label'));\n      this.element.removeAttribute('aria-label');\n    } else if (!isNullOrUndefined(this.element.getAttribute('aria-labelledby'))) {\n      this.hdrEle.setAttribute('aria-labelledby', this.element.getAttribute('aria-labelledby'));\n      this.element.removeAttribute('aria-labelledby');\n    }\n\n    this.setCloseButton(this.showCloseButton);\n    var toolbarHeader = this.tbObj.element.querySelector('.' + CLS_TB_ITEMS);\n\n    if (!isNullOrUndefined(toolbarHeader)) {\n      if (isNullOrUndefined(toolbarHeader.id) || toolbarHeader.id === '') {\n        toolbarHeader.id = this.element.id + '_' + 'tab_header_items';\n      }\n    }\n  };\n\n  Tab.prototype.renderContent = function () {\n    this.cntEle = select('.' + CLS_CONTENT$1, this.element);\n    var hdrItem = selectAll('.' + CLS_TB_ITEM, this.element);\n\n    if (this.isTemplate) {\n      this.cnt = this.cntEle.children.length > 0 ? this.cntEle.innerHTML : '';\n      var contents = this.cntEle.children;\n\n      for (var i = 0; i < hdrItem.length; i++) {\n        if (contents.length - 1 >= i) {\n          addClass([contents.item(i)], CLS_ITEM$2);\n          attributes(contents.item(i), {\n            'role': 'tabpanel',\n            'aria-labelledby': CLS_ITEM$2 + this.tabId + '_' + i\n          });\n          contents.item(i).id = CLS_CONTENT$1 + this.tabId + '_' + i;\n        }\n      }\n    }\n  };\n\n  Tab.prototype.reRenderItems = function () {\n    this.renderContainer();\n\n    if (!isNullOrUndefined(this.cntEle)) {\n      this.touchModule = new Touch(this.cntEle, {\n        swipe: this.swipeHandler.bind(this)\n      });\n    }\n  };\n\n  Tab.prototype.parseObject = function (items, index) {\n    var _this = this;\n\n    var tbItems = selectAll('.e-tab-header .' + CLS_TB_ITEM, this.element);\n    var maxId = this.lastIndex;\n\n    if (!this.isReplace && tbItems.length > 0) {\n      var idList_1 = [];\n      tbItems.forEach(function (item) {\n        idList_1.push(_this.getIndexFromEle(item.id));\n      });\n      maxId = Math.max.apply(Math, idList_1);\n    }\n\n    var tItems = [];\n    var txtWrapEle;\n    var spliceArray = [];\n    items.forEach(function (item, i) {\n      var pos = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconPosition) ? '' : item.header.iconPosition;\n      var css = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconCss) ? '' : item.header.iconCss;\n\n      if (isNullOrUndefined(item.headerTemplate) && (isNullOrUndefined(item.header) || isNullOrUndefined(item.header.text) || item.header.text.length === 0 && css === '')) {\n        spliceArray.push(i);\n        return;\n      }\n\n      var txt = item.headerTemplate || item.header.text;\n\n      if (typeof txt === 'string' && _this.enableHtmlSanitizer) {\n        txt = SanitizeHtmlHelper.sanitize(txt);\n      }\n\n      var itemIndex;\n\n      if (_this.isReplace && !isNullOrUndefined(_this.tbId) && _this.tbId !== '') {\n        itemIndex = parseInt(_this.tbId.substring(_this.tbId.lastIndexOf('_') + 1), 10);\n        _this.tbId = '';\n      } else {\n        itemIndex = index + i;\n      }\n\n      _this.lastIndex = tbItems.length === 0 ? i : _this.isReplace ? itemIndex : maxId + 1 + i;\n      var disabled = item.disabled ? ' ' + CLS_DISABLE$4 + ' ' + CLS_OVERLAY$2 : '';\n      var hidden = item.visible === false ? ' ' + CLS_HIDDEN$1 : '';\n      txtWrapEle = _this.createElement('div', {\n        className: CLS_TEXT,\n        attrs: {\n          'role': 'presentation'\n        }\n      });\n      var tHtml = txt instanceof Object ? txt.outerHTML : txt;\n      var txtEmpty = !isNullOrUndefined(tHtml) && tHtml !== '';\n\n      if (!isNullOrUndefined(txt.tagName)) {\n        txtWrapEle.appendChild(txt);\n      } else {\n        _this.headerTextCompile(txtWrapEle, txt, i);\n      }\n\n      var tEle;\n\n      var icon = _this.createElement('span', {\n        className: CLS_ICONS + ' ' + CLS_TAB_ICON + ' ' + CLS_ICON + '-' + pos + ' ' + css\n      });\n\n      var tCont = _this.createElement('div', {\n        className: CLS_TEXT_WRAP\n      });\n\n      tCont.appendChild(txtWrapEle);\n\n      if (txt !== '' && txt !== undefined && css !== '') {\n        if (pos === 'left' || pos === 'top') {\n          tCont.insertBefore(icon, tCont.firstElementChild);\n        } else {\n          tCont.appendChild(icon);\n        }\n\n        tEle = txtWrapEle;\n        _this.isIconAlone = false;\n      } else {\n        tEle = css === '' ? txtWrapEle : icon;\n\n        if (tEle === icon) {\n          detach(txtWrapEle);\n          tCont.appendChild(icon);\n          _this.isIconAlone = true;\n        }\n      }\n\n      var tabIndex = isNullOrUndefined(item.tabIndex) ? '-1' : item.tabIndex.toString();\n      var wrapAttrs = item.disabled ? {} : {\n        tabIndex: tabIndex,\n        'data-tabindex': tabIndex,\n        role: 'tab',\n        'aria-selected': 'false',\n        'aria-disabled': 'false'\n      };\n      tCont.appendChild(_this.btnCls.cloneNode(true));\n\n      var wrap = _this.createElement('div', {\n        className: CLS_WRAP,\n        attrs: wrapAttrs\n      });\n\n      wrap.appendChild(tCont);\n\n      if (_this.itemIndexArray === []) {\n        _this.itemIndexArray.push(CLS_ITEM$2 + _this.tabId + '_' + _this.lastIndex);\n      } else {\n        _this.itemIndexArray.splice(index + i, 0, CLS_ITEM$2 + _this.tabId + '_' + _this.lastIndex);\n      }\n\n      var attrObj = {\n        id: CLS_ITEM$2 + _this.tabId + '_' + _this.lastIndex\n      };\n      var tItem = {\n        htmlAttributes: attrObj,\n        template: wrap\n      };\n      tItem.cssClass = (item.cssClass !== undefined ? item.cssClass : ' ') + ' ' + disabled + ' ' + hidden + ' ' + (css !== '' ? 'e-i' + pos : '') + ' ' + (!txtEmpty ? CLS_ICON : '');\n\n      if (pos === 'top' || pos === 'bottom') {\n        _this.element.classList.add('e-vertical-icon');\n      }\n\n      tItems.push(tItem);\n      i++;\n    });\n\n    if (!this.isAdd) {\n      spliceArray.forEach(function (spliceItemIndex) {\n        _this.items.splice(spliceItemIndex, 1);\n      });\n    }\n\n    if (this.isIconAlone) {\n      this.element.classList.add(CLS_ICON_TAB);\n    } else {\n      this.element.classList.remove(CLS_ICON_TAB);\n    }\n\n    return tItems;\n  };\n\n  Tab.prototype.removeActiveClass = function () {\n    var tabHeader = this.getTabHeader();\n\n    if (tabHeader) {\n      var tabItems = selectAll('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1, tabHeader);\n      [].slice.call(tabItems).forEach(function (node) {\n        return node.classList.remove(CLS_ACTIVE$1);\n      });\n      [].slice.call(tabItems).forEach(function (node) {\n        return node.firstElementChild.setAttribute('aria-selected', 'false');\n      });\n    }\n  };\n\n  Tab.prototype.checkPopupOverflow = function (ele) {\n    this.tbPop = select('.' + CLS_TB_POP, this.element);\n    var popIcon = select('.e-hor-nav', this.element);\n    var tbrItems = select('.' + CLS_TB_ITEMS, this.element);\n    var lastChild = tbrItems.lastChild;\n    var isOverflow = false;\n\n    if (!this.isVertical() && (this.enableRtl && popIcon.offsetLeft + popIcon.offsetWidth > tbrItems.offsetLeft || !this.enableRtl && popIcon.offsetLeft < tbrItems.offsetWidth)) {\n      isOverflow = true;\n    } else if (this.isVertical() && popIcon.offsetTop < lastChild.offsetTop + lastChild.offsetHeight) {\n      isOverflow = true;\n    }\n\n    if (isOverflow) {\n      ele.classList.add(CLS_TB_POPUP);\n      this.tbPop.insertBefore(ele, selectAll('.' + CLS_TB_POPUP, this.tbPop)[0]);\n    }\n\n    return true;\n  };\n\n  Tab.prototype.popupHandler = function (target) {\n    var ripEle = target.querySelector('.e-ripple-element');\n\n    if (!isNullOrUndefined(ripEle)) {\n      ripEle.outerHTML = '';\n      target.querySelector('.' + CLS_WRAP).classList.remove('e-ripple');\n    }\n\n    this.tbItem = selectAll('.' + CLS_TB_ITEMS + ' .' + CLS_TB_ITEM, this.hdrEle);\n    var lastChild = this.tbItem[this.tbItem.length - 1];\n\n    if (this.tbItem.length !== 0) {\n      target.classList.remove(CLS_TB_POPUP);\n      target.removeAttribute('style');\n      this.tbItems.appendChild(target);\n      this.actEleId = target.id;\n\n      if (this.checkPopupOverflow(lastChild)) {\n        var prevEle = this.tbItems.lastChild.previousElementSibling;\n        this.checkPopupOverflow(prevEle);\n      }\n\n      this.isPopup = true;\n    }\n\n    return selectAll('.' + CLS_TB_ITEM, this.tbItems).length - 1;\n  };\n\n  Tab.prototype.setCloseButton = function (val) {\n    var trg = select('.' + CLS_HEADER$1, this.element);\n\n    if (val === true) {\n      trg.classList.add(CLS_CLOSE_SHOW);\n    } else {\n      trg.classList.remove(CLS_CLOSE_SHOW);\n    }\n\n    this.tbObj.refreshOverflow();\n    this.refreshActiveTabBorder();\n  };\n\n  Tab.prototype.prevCtnAnimation = function (prev, current) {\n    var animation;\n    var checkRTL = this.enableRtl || this.element.classList.contains(CLS_RTL$4);\n\n    if (this.isPopup || prev <= current) {\n      if (this.animation.previous.effect === 'SlideLeftIn') {\n        animation = {\n          name: 'SlideLeftOut',\n          duration: this.animation.previous.duration,\n          timingFunction: this.animation.previous.easing\n        };\n      } else {\n        animation = null;\n      }\n    } else {\n      if (this.animation.next.effect === 'SlideRightIn') {\n        animation = {\n          name: 'SlideRightOut',\n          duration: this.animation.next.duration,\n          timingFunction: this.animation.next.easing\n        };\n      } else {\n        animation = null;\n      }\n    }\n\n    return animation;\n  };\n\n  Tab.prototype.triggerPrevAnimation = function (oldCnt, prevIndex) {\n    var _this = this;\n\n    var animateObj = this.prevCtnAnimation(prevIndex, this.selectedItem);\n\n    if (!isNullOrUndefined(animateObj)) {\n      animateObj.begin = function () {\n        setStyleAttribute(oldCnt, {\n          'position': 'absolute'\n        });\n        oldCnt.classList.add(CLS_PROGRESS);\n        oldCnt.classList.add('e-view');\n      };\n\n      animateObj.end = function () {\n        oldCnt.style.display = 'none';\n        oldCnt.classList.remove(CLS_ACTIVE$1);\n        oldCnt.classList.remove(CLS_PROGRESS);\n        oldCnt.classList.remove('e-view');\n        setStyleAttribute(oldCnt, {\n          'display': '',\n          'position': ''\n        });\n\n        if (oldCnt.childNodes.length === 0 && !_this.isTemplate) {\n          detach(oldCnt);\n        }\n      };\n\n      new Animation(animateObj).animate(oldCnt);\n    } else {\n      oldCnt.classList.remove(CLS_ACTIVE$1);\n    }\n  };\n\n  Tab.prototype.triggerAnimation = function (id, value) {\n    var _this = this;\n\n    var prevIndex = this.prevIndex;\n    var oldCnt;\n    var itemCollection = [].slice.call(this.element.querySelector('.' + CLS_CONTENT$1).children);\n    itemCollection.forEach(function (item) {\n      if (item.id === _this.prevActiveEle) {\n        oldCnt = item;\n      }\n    });\n    var prevEle = this.tbItem[prevIndex];\n    var newCnt = this.getTrgContent(this.cntEle, this.extIndex(id));\n\n    if (isNullOrUndefined(oldCnt) && !isNullOrUndefined(prevEle)) {\n      var idNo = this.extIndex(prevEle.id);\n      oldCnt = this.getTrgContent(this.cntEle, idNo);\n    }\n\n    if (!isNullOrUndefined(newCnt)) {\n      this.prevActiveEle = newCnt.id;\n    }\n\n    var isPrevent = isNullOrUndefined(this.animation) || this.animation.next === {} || this.animation.previous === {} || isNullOrUndefined(this.animation.next.effect) || isNullOrUndefined(this.animation.previous.effect) || this.animation.previous.effect == 'None' || this.animation.next.effect == 'None';\n\n    if (this.initRender || value === false || this.animation === {} || isPrevent) {\n      if (oldCnt && oldCnt !== newCnt) {\n        oldCnt.classList.remove(CLS_ACTIVE$1);\n      }\n\n      return;\n    }\n\n    var cnt = select('.' + CLS_CONTENT$1, this.element);\n    var animateObj;\n\n    if (this.prevIndex > this.selectedItem && !this.isPopup) {\n      var openEff = this.animation.previous.effect;\n      animateObj = {\n        name: openEff === 'None' ? '' : openEff !== 'SlideLeftIn' ? openEff : 'SlideLeftIn',\n        duration: this.animation.previous.duration,\n        timingFunction: this.animation.previous.easing\n      };\n    } else if (this.isPopup || this.prevIndex < this.selectedItem || this.prevIndex === this.selectedItem) {\n      var clsEff = this.animation.next.effect;\n      animateObj = {\n        name: clsEff === 'None' ? '' : clsEff !== 'SlideRightIn' ? clsEff : 'SlideRightIn',\n        duration: this.animation.next.duration,\n        timingFunction: this.animation.next.easing\n      };\n    }\n\n    animateObj.progress = function () {\n      cnt.classList.add(CLS_PROGRESS);\n\n      _this.setActiveBorder();\n    };\n\n    animateObj.end = function () {\n      cnt.classList.remove(CLS_PROGRESS);\n      newCnt.classList.add(CLS_ACTIVE$1);\n    };\n\n    if (!this.initRender && !isNullOrUndefined(oldCnt)) {\n      this.triggerPrevAnimation(oldCnt, prevIndex);\n    }\n\n    this.isPopup = false;\n\n    if (animateObj.name === '') {\n      newCnt.classList.add(CLS_ACTIVE$1);\n    } else {\n      new Animation(animateObj).animate(newCnt);\n    }\n  };\n\n  Tab.prototype.keyPressed = function (trg) {\n    var trgParent = closest(trg, '.' + CLS_HEADER$1 + ' .' + CLS_TB_ITEM);\n    var trgIndex = this.getEleIndex(trgParent);\n\n    if (!isNullOrUndefined(this.popEle) && trg.classList.contains('e-hor-nav')) {\n      this.popEle.classList.contains(CLS_POPUP_OPEN) ? this.popObj.hide(this.hide) : this.popObj.show(this.show);\n    } else if (trg.classList.contains('e-scroll-nav')) {\n      trg.click();\n    } else {\n      if (!isNullOrUndefined(trgParent) && trgParent.classList.contains(CLS_ACTIVE$1) === false) {\n        this.selectTab(trgIndex, null, true);\n\n        if (!isNullOrUndefined(this.popEle)) {\n          this.popObj.hide(this.hide);\n        }\n      }\n    }\n  };\n\n  Tab.prototype.getTabHeader = function () {\n    if (isNullOrUndefined(this.element)) {\n      return undefined;\n    }\n\n    var headers = [].slice.call(this.element.children).filter(function (e) {\n      return e.classList.contains(CLS_HEADER$1);\n    });\n\n    if (headers.length > 0) {\n      return headers[0];\n    } else {\n      var wrap = [].slice.call(this.element.children).filter(function (e) {\n        return !e.classList.contains(CLS_BLA_TEM);\n      })[0];\n\n      if (!wrap) {\n        return undefined;\n      }\n\n      return [].slice.call(wrap.children).filter(function (e) {\n        return e.classList.contains(CLS_HEADER$1);\n      })[0];\n    }\n  };\n\n  Tab.prototype.getEleIndex = function (item) {\n    return Array.prototype.indexOf.call(selectAll('.' + CLS_TB_ITEM, this.getTabHeader()), item);\n  };\n\n  Tab.prototype.extIndex = function (id) {\n    return id.replace(CLS_ITEM$2 + this.tabId + '_', '');\n  };\n\n  Tab.prototype.expTemplateContent = function () {\n    var _this = this;\n\n    this.templateEle.forEach(function (eleStr) {\n      if (!isNullOrUndefined(_this.element.querySelector(eleStr))) {\n        document.body.appendChild(_this.element.querySelector(eleStr)).style.display = 'none';\n      }\n    });\n  };\n\n  Tab.prototype.templateCompile = function (ele, cnt, index) {\n    var tempEle = this.createElement('div');\n    this.compileElement(tempEle, cnt, 'content', index);\n\n    if (tempEle.childNodes.length !== 0) {\n      ele.appendChild(tempEle);\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n\n  Tab.prototype.compileElement = function (ele, val, prop, index) {\n    var templateFn;\n\n    if (typeof val === 'string') {\n      val = val.trim();\n\n      if (this.isVue) {\n        templateFn = compile(SanitizeHtmlHelper.sanitize(val));\n      } else {\n        ele.innerHTML = SanitizeHtmlHelper.sanitize(val);\n      }\n    } else {\n      templateFn = compile(val);\n    }\n\n    var templateFUN;\n\n    if (!isNullOrUndefined(templateFn)) {\n      templateFUN = templateFn({}, this, prop);\n    }\n\n    if (!isNullOrUndefined(templateFn) && templateFUN.length > 0) {\n      [].slice.call(templateFUN).forEach(function (el) {\n        ele.appendChild(el);\n      });\n    }\n  };\n\n  Tab.prototype.headerTextCompile = function (element, text, index) {\n    this.compileElement(element, text, 'headerTemplate', index);\n  };\n\n  Tab.prototype.getContent = function (ele, cnt, callType, index) {\n    var eleStr;\n    cnt = isNullOrUndefined(cnt) ? \"\" : cnt;\n\n    if (typeof cnt === 'string' || isNullOrUndefined(cnt.innerHTML)) {\n      if (typeof cnt === 'string' && this.enableHtmlSanitizer) {\n        cnt = SanitizeHtmlHelper.sanitize(cnt);\n      }\n\n      if (cnt[0] === '.' || cnt[0] === '#') {\n        if (document.querySelectorAll(cnt).length) {\n          var eleVal = document.querySelector(cnt);\n          eleStr = eleVal.outerHTML.trim();\n\n          if (callType === 'clone') {\n            ele.appendChild(eleVal.cloneNode(true));\n          } else {\n            ele.appendChild(eleVal);\n            eleVal.style.display = '';\n          }\n        } else {\n          this.templateCompile(ele, cnt, index);\n        }\n      } else {\n        this.templateCompile(ele, cnt, index);\n      }\n    } else {\n      ele.appendChild(cnt);\n    }\n\n    if (!isNullOrUndefined(eleStr)) {\n      if (this.templateEle.indexOf(cnt.toString()) === -1) {\n        this.templateEle.push(cnt.toString());\n      }\n    }\n  };\n\n  Tab.prototype.getTrgContent = function (cntEle, no) {\n    var ele;\n\n    if (this.element.classList.contains(CLS_NEST$1)) {\n      ele = select('.' + CLS_NEST$1 + '> .' + CLS_CONTENT$1 + ' > #' + CLS_CONTENT$1 + this.tabId + '_' + no, this.element);\n    } else {\n      ele = this.findEle(cntEle.children, CLS_CONTENT$1 + this.tabId + '_' + no);\n    }\n\n    return ele;\n  };\n\n  Tab.prototype.findEle = function (items, key) {\n    var ele;\n\n    for (var i = 0; i < items.length; i++) {\n      if (items[i].id === key) {\n        ele = items[i];\n        break;\n      }\n    }\n\n    return ele;\n  };\n\n  Tab.prototype.isVertical = function () {\n    var isVertical = this.headerPlacement === 'Left' || this.headerPlacement === 'Right' ? true : false;\n    this.scrCntClass = isVertical ? CLS_VSCRCNT : CLS_HSCRCNT;\n    return isVertical;\n  };\n\n  Tab.prototype.addVerticalClass = function () {\n    if (this.isVertical()) {\n      var tbPos = this.headerPlacement === 'Left' ? CLS_VLEFT : CLS_VRIGHT;\n      addClass([this.hdrEle], [CLS_VERTICAL$1, tbPos]);\n\n      if (!this.element.classList.contains(CLS_NEST$1)) {\n        addClass([this.element], [CLS_VTAB, tbPos]);\n      } else {\n        addClass([this.hdrEle], [CLS_VTAB, tbPos]);\n      }\n    }\n\n    if (this.headerPlacement === 'Bottom') {\n      addClass([this.hdrEle], [CLS_HBOTTOM]);\n    }\n  };\n\n  Tab.prototype.updatePopAnimationConfig = function () {\n    this.show = {\n      name: this.isVertical() ? 'FadeIn' : 'SlideDown',\n      duration: 100\n    };\n    this.hide = {\n      name: this.isVertical() ? 'FadeOut' : 'SlideUp',\n      duration: 100\n    };\n  };\n\n  Tab.prototype.changeOrientation = function (place) {\n    this.setOrientation(place, this.hdrEle);\n    var activeTab = this.hdrEle.querySelector('.' + CLS_ACTIVE$1);\n    var isVertical = this.hdrEle.classList.contains(CLS_VERTICAL$1) ? true : false;\n    removeClass([this.element], [CLS_VTAB]);\n    removeClass([this.hdrEle], [CLS_VERTICAL$1, CLS_VLEFT, CLS_VRIGHT]);\n\n    if (isVertical !== this.isVertical()) {\n      this.changeToolbarOrientation();\n\n      if (!isNullOrUndefined(activeTab) && activeTab.classList.contains(CLS_TB_POPUP)) {\n        this.popupHandler(activeTab);\n      }\n    }\n\n    this.addVerticalClass();\n    this.setActiveBorder();\n    this.focusItem();\n  };\n\n  Tab.prototype.focusItem = function () {\n    var curActItem = select(' #' + CLS_ITEM$2 + this.tabId + '_' + this.selectedItem, this.hdrEle);\n\n    if (!isNullOrUndefined(curActItem)) {\n      curActItem.firstElementChild.focus();\n    }\n  };\n\n  Tab.prototype.changeToolbarOrientation = function () {\n    this.tbObj.setProperties({\n      height: this.isVertical() ? '100%' : 'auto',\n      width: this.isVertical() ? 'auto' : '100%'\n    }, true);\n    this.tbObj.changeOrientation();\n    this.updatePopAnimationConfig();\n  };\n\n  Tab.prototype.setOrientation = function (place, ele) {\n    var headerPos = Array.prototype.indexOf.call(this.element.children, ele);\n    var contentPos = Array.prototype.indexOf.call(this.element.children, this.element.querySelector('.' + CLS_CONTENT$1));\n\n    if (place === 'Bottom' && contentPos > headerPos) {\n      this.element.appendChild(ele);\n    } else {\n      removeClass([ele], [CLS_HBOTTOM]);\n      this.element.insertBefore(ele, select('.' + CLS_CONTENT$1, this.element));\n    }\n  };\n\n  Tab.prototype.setCssClass = function (ele, cls, val) {\n    if (cls === '') {\n      return;\n    }\n\n    var list = cls.split(' ');\n\n    for (var i = 0; i < list.length; i++) {\n      if (val) {\n        ele.classList.add(list[i]);\n      } else {\n        ele.classList.remove(list[i]);\n      }\n    }\n  };\n\n  Tab.prototype.setContentHeight = function (val) {\n    if (this.element.classList.contains(CLS_FILL)) {\n      removeClass([this.element], [CLS_FILL]);\n    }\n\n    if (isNullOrUndefined(this.cntEle)) {\n      return;\n    }\n\n    var hdrEle = this.getTabHeader();\n\n    if (this.heightAdjustMode === 'None') {\n      if (this.height === 'auto') {\n        return;\n      } else {\n        if (!this.isVertical()) {\n          setStyleAttribute(this.cntEle, {\n            'height': this.element.clientHeight - hdrEle.offsetHeight + 'px'\n          });\n        }\n      }\n    } else if (this.heightAdjustMode === 'Fill') {\n      addClass([this.element], [CLS_FILL]);\n      setStyleAttribute(this.element, {\n        'height': '100%'\n      });\n      this.cntEle.style.height = 'calc(100% - ' + this.hdrEle.offsetHeight + 'px)';\n    } else if (this.heightAdjustMode === 'Auto') {\n      if (this.isTemplate === true) {\n        var cnt = selectAll('.' + CLS_CONTENT$1 + ' > .' + CLS_ITEM$2, this.element);\n\n        for (var i = 0; i < cnt.length; i++) {\n          cnt[i].setAttribute('style', 'display:block; visibility: visible');\n          this.maxHeight = Math.max(this.maxHeight, this.getHeight(cnt[i]));\n          cnt[i].style.removeProperty('display');\n          cnt[i].style.removeProperty('visibility');\n        }\n      } else {\n        this.cntEle = select('.' + CLS_CONTENT$1, this.element);\n\n        if (val === true) {\n          this.cntEle.appendChild(this.createElement('div', {\n            id: CLS_CONTENT$1 + this.tabId + '_' + 0,\n            className: CLS_ITEM$2 + ' ' + CLS_ACTIVE$1,\n            attrs: {\n              'role': 'tabpanel',\n              'aria-labelledby': CLS_ITEM$2 + this.tabId + '_' + 0\n            }\n          }));\n        }\n\n        var ele = this.cntEle.children.item(0);\n\n        for (var i = 0; i < this.items.length; i++) {\n          this.getContent(ele, this.items[i].content, 'clone', i);\n          this.maxHeight = Math.max(this.maxHeight, this.getHeight(ele));\n\n          while (ele.firstChild) {\n            ele.removeChild(ele.firstChild);\n          }\n        }\n\n        if (this.isReact) {\n          this.clearTemplate(['content']);\n        }\n\n        this.templateEle = [];\n        this.getContent(ele, this.items[0].content, 'render', 0);\n\n        if (this.prevIndex !== this.selectedItem) {\n          ele.classList.remove(CLS_ACTIVE$1);\n        }\n      }\n\n      setStyleAttribute(this.cntEle, {\n        'height': this.maxHeight + 'px'\n      });\n    } else {\n      setStyleAttribute(this.cntEle, {\n        'height': 'auto'\n      });\n    }\n  };\n\n  Tab.prototype.getHeight = function (ele) {\n    var cs = window.getComputedStyle(ele);\n    return ele.offsetHeight + parseFloat(cs.getPropertyValue('padding-top')) + parseFloat(cs.getPropertyValue('padding-bottom')) + parseFloat(cs.getPropertyValue('margin-top')) + parseFloat(cs.getPropertyValue('margin-bottom'));\n  };\n\n  Tab.prototype.setActiveBorder = function () {\n    var trgHdrEle = this.getTabHeader();\n    var trg = select('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1, trgHdrEle);\n\n    if (isNullOrUndefined(trg)) {\n      return;\n    }\n\n    if (!this.reorderActiveTab) {\n      if (trg.classList.contains(CLS_TB_POPUP) && !this.bdrLine.classList.contains(CLS_HIDDEN$1)) {\n        this.bdrLine.classList.add(CLS_HIDDEN$1);\n      }\n\n      if (trgHdrEle && !trgHdrEle.classList.contains(CLS_REORDER_ACTIVE_ITEM)) {\n        trgHdrEle.classList.add(CLS_REORDER_ACTIVE_ITEM);\n      }\n    } else if (trgHdrEle) {\n      trgHdrEle.classList.remove(CLS_REORDER_ACTIVE_ITEM);\n    }\n\n    var root = closest(trg, '.' + CLS_TAB);\n\n    if (this.element !== root) {\n      return;\n    }\n\n    this.tbItems = select('.' + CLS_TB_ITEMS, trgHdrEle);\n    var bar = select('.' + CLS_INDICATOR, trgHdrEle);\n    var scrollCnt = select('.' + CLS_TB_ITEMS + ' .' + this.scrCntClass, trgHdrEle);\n\n    if (this.isVertical()) {\n      setStyleAttribute(bar, {\n        'left': '',\n        'right': ''\n      });\n      var tbHeight = isNullOrUndefined(scrollCnt) ? this.tbItems.offsetHeight : scrollCnt.offsetHeight;\n\n      if (tbHeight !== 0) {\n        setStyleAttribute(bar, {\n          'top': trg.offsetTop + 'px',\n          'height': trg.offsetHeight + 'px'\n        });\n      } else {\n        setStyleAttribute(bar, {\n          'top': 0,\n          'height': 0\n        });\n      }\n    } else {\n      if (this.overflowMode === 'MultiRow') {\n        var top_1 = this.headerPlacement === 'Bottom' ? trg.offsetTop : trg.offsetHeight + trg.offsetTop;\n        setStyleAttribute(bar, {\n          'top': top_1 + 'px',\n          'height': ''\n        });\n      } else {\n        setStyleAttribute(bar, {\n          'top': '',\n          'height': ''\n        });\n      }\n\n      var tbWidth = isNullOrUndefined(scrollCnt) ? this.tbItems.offsetWidth : scrollCnt.offsetWidth;\n\n      if (tbWidth !== 0) {\n        setStyleAttribute(bar, {\n          'left': trg.offsetLeft + 'px',\n          'right': tbWidth - (trg.offsetLeft + trg.offsetWidth) + 'px'\n        });\n      } else {\n        setStyleAttribute(bar, {\n          'left': 'auto',\n          'right': 'auto'\n        });\n      }\n    }\n\n    if (!isNullOrUndefined(this.bdrLine) && !trg.classList.contains(CLS_TB_POPUP)) {\n      this.bdrLine.classList.remove(CLS_HIDDEN$1);\n    }\n  };\n\n  Tab.prototype.setActive = function (value, skipDataBind, isInteracted) {\n    if (skipDataBind === void 0) {\n      skipDataBind = false;\n    }\n\n    if (isInteracted === void 0) {\n      isInteracted = false;\n    }\n\n    this.tbItem = selectAll('.' + CLS_TB_ITEM, this.getTabHeader());\n    var trg = this.tbItem[value];\n\n    if (value < 0 || isNaN(value) || this.tbItem.length === 0) {\n      return;\n    }\n\n    if (value >= 0 && !skipDataBind) {\n      this.allowServerDataBinding = false;\n      this.setProperties({\n        selectedItem: value\n      }, true);\n      this.allowServerDataBinding = true;\n\n      if (!this.initRender) {\n        this.serverDataBind();\n      }\n    }\n\n    if (trg.classList.contains(CLS_ACTIVE$1)) {\n      this.setActiveBorder();\n      return;\n    }\n\n    if (!this.isTemplate) {\n      attributes(trg.firstElementChild, {\n        'aria-controls': CLS_CONTENT$1 + this.tabId + '_' + value\n      });\n    }\n\n    var id = trg.id;\n    this.removeActiveClass();\n    trg.classList.add(CLS_ACTIVE$1);\n    trg.firstElementChild.setAttribute('aria-selected', 'true');\n    var no = Number(this.extIndex(id));\n\n    if (isNullOrUndefined(this.prevActiveEle)) {\n      this.prevActiveEle = CLS_CONTENT$1 + this.tabId + '_' + no;\n    }\n\n    if (this.isTemplate) {\n      if (select('.' + CLS_CONTENT$1, this.element).children.length > 0) {\n        var trg_1 = this.findEle(select('.' + CLS_CONTENT$1, this.element).children, CLS_CONTENT$1 + this.tabId + '_' + no);\n\n        if (!isNullOrUndefined(trg_1)) {\n          trg_1.classList.add(CLS_ACTIVE$1);\n        }\n\n        this.triggerAnimation(id, this.enableAnimation);\n      }\n    } else {\n      this.cntEle = select('.' + CLS_TAB + ' > .' + CLS_CONTENT$1, this.element);\n      var item = this.getTrgContent(this.cntEle, this.extIndex(id));\n\n      if (isNullOrUndefined(item)) {\n        this.cntEle.appendChild(this.createElement('div', {\n          id: CLS_CONTENT$1 + this.tabId + '_' + this.extIndex(id),\n          className: CLS_ITEM$2 + ' ' + CLS_ACTIVE$1,\n          attrs: {\n            role: 'tabpanel',\n            'aria-labelledby': CLS_ITEM$2 + this.tabId + '_' + this.extIndex(id)\n          }\n        }));\n        var eleTrg = this.getTrgContent(this.cntEle, this.extIndex(id));\n        var itemIndex = Array.prototype.indexOf.call(this.itemIndexArray, id);\n        this.getContent(eleTrg, this.items[itemIndex].content, 'render', itemIndex);\n      } else {\n        item.classList.add(CLS_ACTIVE$1);\n      }\n\n      this.triggerAnimation(id, this.enableAnimation);\n    }\n\n    this.setActiveBorder();\n    this.refreshItemVisibility(trg);\n\n    if (!this.initRender && !skipDataBind) {\n      trg.firstElementChild.focus();\n      var eventArg = {\n        previousItem: this.prevItem,\n        previousIndex: this.prevIndex,\n        selectedItem: trg,\n        selectedIndex: value,\n        selectedContent: select('#' + CLS_CONTENT$1 + this.tabId + '_' + this.selectingID, this.content),\n        isSwiped: this.isSwipeed,\n        isInteracted: isInteracted\n      };\n      this.trigger('selected', eventArg);\n    }\n  };\n\n  Tab.prototype.setItems = function (items) {\n    this.isReplace = true;\n    this.tbItems = select('.' + CLS_TB_ITEMS, this.getTabHeader());\n    this.tbObj.items = this.parseObject(items, 0);\n    this.tbObj.dataBind();\n    this.isReplace = false;\n  };\n\n  Tab.prototype.setRTL = function (value) {\n    this.tbObj.enableRtl = value;\n    this.tbObj.dataBind();\n    this.setCssClass(this.element, CLS_RTL$4, value);\n    this.refreshActiveBorder();\n  };\n\n  Tab.prototype.refreshActiveBorder = function () {\n    if (!isNullOrUndefined(this.bdrLine)) {\n      this.bdrLine.classList.add(CLS_HIDDEN$1);\n    }\n\n    this.setActiveBorder();\n  };\n\n  Tab.prototype.showPopup = function (config) {\n    var tbPop = select('.e-popup.e-toolbar-pop', this.hdrEle);\n\n    if (tbPop.classList.contains('e-popup-close')) {\n      var tbPopObj = tbPop && tbPop.ej2_instances[0];\n      tbPopObj.position.X = this.headerPlacement === 'Left' ? 'left' : 'right';\n      tbPopObj.dataBind();\n      tbPopObj.show(config);\n    }\n  };\n\n  Tab.prototype.bindDraggable = function () {\n    var _this = this;\n\n    if (this.allowDragAndDrop) {\n      var tabHeader = this.element.querySelector('.' + CLS_HEADER$1);\n\n      if (tabHeader) {\n        var items = tabHeader.querySelectorAll('.' + CLS_TB_ITEM);\n        items.forEach(function (element) {\n          _this.initializeDrag(element);\n        });\n      }\n    }\n  };\n\n  Tab.prototype.wireEvents = function () {\n    this.bindDraggable();\n    window.addEventListener('resize', this.resizeContext);\n    EventHandler.add(this.element, 'mouseover', this.hoverHandler, this);\n    EventHandler.add(this.element, 'keydown', this.spaceKeyDown, this);\n\n    if (!isNullOrUndefined(this.cntEle)) {\n      this.touchModule = new Touch(this.cntEle, {\n        swipe: this.swipeHandler.bind(this)\n      });\n    }\n\n    this.keyModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyHandler.bind(this),\n      keyConfigs: this.keyConfigs\n    });\n    this.tabKeyModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyHandler.bind(this),\n      keyConfigs: {\n        openPopup: 'shift+f10',\n        tab: 'tab',\n        shiftTab: 'shift+tab'\n      },\n      eventName: 'keydown'\n    });\n  };\n\n  Tab.prototype.unWireEvents = function () {\n    if (!isNullOrUndefined(this.keyModule)) {\n      this.keyModule.destroy();\n    }\n\n    if (!isNullOrUndefined(this.tabKeyModule)) {\n      this.tabKeyModule.destroy();\n    }\n\n    if (!isNullOrUndefined(this.cntEle) && !isNullOrUndefined(this.touchModule)) {\n      this.touchModule.destroy();\n      this.touchModule = null;\n    }\n\n    window.removeEventListener('resize', this.resizeContext);\n    EventHandler.remove(this.element, 'mouseover', this.hoverHandler);\n    EventHandler.remove(this.element, 'keydown', this.spaceKeyDown);\n    this.element.classList.remove(CLS_RTL$4);\n    this.element.classList.remove(CLS_FOCUS);\n  };\n\n  Tab.prototype.clickHandler = function (args) {\n    this.element.classList.remove(CLS_FOCUS);\n    var trg = args.originalEvent.target;\n    var trgParent = closest(trg, '.' + CLS_TB_ITEM);\n    var trgIndex = this.getEleIndex(trgParent);\n\n    if (trg.classList.contains(CLS_ICON_CLOSE)) {\n      this.removeTab(trgIndex);\n    } else if (this.isVertical() && closest(trg, '.' + CLS_HOR_NAV)) {\n      this.showPopup(this.show);\n    } else {\n      this.isPopup = false;\n\n      if (!isNullOrUndefined(trgParent) && trgIndex !== this.selectedItem) {\n        this.selectTab(trgIndex, args.originalEvent, true);\n      }\n    }\n  };\n\n  Tab.prototype.swipeHandler = function (e) {\n    if (e.velocity < 3 && isNullOrUndefined(e.originalEvent.changedTouches)) {\n      return;\n    }\n\n    if (this.isNested) {\n      this.element.setAttribute('data-swipe', 'true');\n    }\n\n    var nestedTab = this.element.querySelector('[data-swipe=\"true\"]');\n\n    if (nestedTab) {\n      nestedTab.removeAttribute('data-swipe');\n      return;\n    }\n\n    this.isSwipeed = true;\n\n    if (e.swipeDirection === 'Right' && this.selectedItem !== 0) {\n      for (var k = this.selectedItem - 1; k >= 0; k--) {\n        if (!this.tbItem[k].classList.contains(CLS_HIDDEN$1)) {\n          this.selectTab(k, null, true);\n          break;\n        }\n      }\n    } else if (e.swipeDirection === 'Left' && this.selectedItem !== selectAll('.' + CLS_TB_ITEM, this.element).length - 1) {\n      for (var i = this.selectedItem + 1; i < this.tbItem.length; i++) {\n        if (!this.tbItem[i].classList.contains(CLS_HIDDEN$1)) {\n          this.selectTab(i, null, true);\n          break;\n        }\n      }\n    }\n\n    this.isSwipeed = false;\n  };\n\n  Tab.prototype.spaceKeyDown = function (e) {\n    if (e.keyCode === 32 && e.which === 32 || e.keyCode === 35 && e.which === 35) {\n      var clstHead = closest(e.target, '.' + CLS_HEADER$1);\n\n      if (!isNullOrUndefined(clstHead)) {\n        e.preventDefault();\n      }\n    }\n  };\n\n  Tab.prototype.keyHandler = function (e) {\n    if (this.element.classList.contains(CLS_DISABLE$4)) {\n      return;\n    }\n\n    this.element.classList.add(CLS_FOCUS);\n    var trg = e.target;\n    var tabHeader = this.getTabHeader();\n    var actEle = select('.' + CLS_ACTIVE$1, tabHeader);\n    this.popEle = select('.' + CLS_TB_POP, tabHeader);\n\n    if (!isNullOrUndefined(this.popEle)) {\n      this.popObj = this.popEle.ej2_instances[0];\n    }\n\n    var item = closest(document.activeElement, '.' + CLS_TB_ITEM);\n    var trgParent = closest(trg, '.' + CLS_TB_ITEM);\n\n    switch (e.action) {\n      case 'space':\n      case 'enter':\n        if (trg.parentElement.classList.contains(CLS_DISABLE$4)) {\n          return;\n        }\n\n        if (e.action === 'enter' && trg.classList.contains('e-hor-nav')) {\n          this.showPopup(this.show);\n          break;\n        }\n\n        this.keyPressed(trg);\n        break;\n\n      case 'tab':\n      case 'shiftTab':\n        if (trg.classList.contains(CLS_WRAP) && closest(trg, '.' + CLS_TB_ITEM).classList.contains(CLS_ACTIVE$1) === false) {\n          trg.setAttribute('tabindex', trg.getAttribute('data-tabindex'));\n        }\n\n        if (this.popObj && isVisible(this.popObj.element)) {\n          this.popObj.hide(this.hide);\n        }\n\n        if (!isNullOrUndefined(actEle) && actEle.children.item(0).getAttribute('tabindex') === '-1') {\n          actEle.children.item(0).setAttribute('tabindex', '0');\n        }\n\n        break;\n\n      case 'moveLeft':\n      case 'moveRight':\n        if (!isNullOrUndefined(item)) {\n          this.refreshItemVisibility(item);\n        }\n\n        break;\n\n      case 'openPopup':\n        e.preventDefault();\n\n        if (!isNullOrUndefined(this.popEle) && this.popEle.classList.contains(CLS_POPUP_CLOSE)) {\n          this.popObj.show(this.show);\n        }\n\n        break;\n\n      case 'delete':\n        if (this.showCloseButton === true && !isNullOrUndefined(trgParent)) {\n          var nxtSib = trgParent.nextSibling;\n\n          if (!isNullOrUndefined(nxtSib) && nxtSib.classList.contains(CLS_TB_ITEM)) {\n            nxtSib.firstElementChild.focus();\n          }\n\n          this.removeTab(this.getEleIndex(trgParent));\n        }\n\n        this.setActiveBorder();\n        break;\n    }\n  };\n\n  Tab.prototype.refreshItemVisibility = function (target) {\n    var scrCnt = select('.' + this.scrCntClass, this.tbItems);\n\n    if (!this.isVertical() && !isNullOrUndefined(scrCnt)) {\n      var scrBar = select('.e-hscroll-bar', this.tbItems);\n      scrBar.removeAttribute('tabindex');\n      var scrStart = scrBar.scrollLeft;\n      var scrEnd = scrStart + scrBar.offsetWidth;\n      var eleStart = target.offsetLeft;\n      var eleWidth = target.offsetWidth;\n      var eleEnd = target.offsetLeft + target.offsetWidth;\n\n      if (scrStart < eleStart && scrEnd < eleEnd) {\n        var eleViewRange = scrEnd - eleStart;\n        scrBar.scrollLeft = scrStart + (eleWidth - eleViewRange);\n      } else {\n        if (scrStart > eleStart && scrEnd > eleEnd) {\n          var eleViewRange = eleEnd - scrStart;\n          scrBar.scrollLeft = scrStart - (eleWidth - eleViewRange);\n        }\n      }\n    } else {\n      return;\n    }\n  };\n\n  Tab.prototype.getIndexFromEle = function (id) {\n    return parseInt(id.substring(id.lastIndexOf('_') + 1), 10);\n  };\n\n  Tab.prototype.hoverHandler = function (e) {\n    var trg = e.target;\n\n    if (!isNullOrUndefined(trg.classList) && trg.classList.contains(CLS_ICON_CLOSE)) {\n      trg.setAttribute('title', new L10n('tab', {\n        closeButtonTitle: this.title\n      }, this.locale).getConstant('closeButtonTitle'));\n    }\n  };\n\n  Tab.prototype.evalOnPropertyChangeItems = function (newProp, oldProp) {\n    if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {\n      var changedProp = Object.keys(newProp.items);\n\n      for (var i = 0; i < changedProp.length; i++) {\n        var index = parseInt(Object.keys(newProp.items)[i], 10);\n        var properties = Object.keys(newProp.items[index]);\n\n        for (var j = 0; j < properties.length; j++) {\n          var oldVal = Object(oldProp.items[index])[properties[j]];\n          var newVal = Object(newProp.items[index])[properties[j]];\n          var hdr = this.element.querySelectorAll('.' + CLS_TB_ITEM)[index];\n          var itemIndex = void 0;\n\n          if (hdr && !isNullOrUndefined(hdr.id) && hdr.id !== '') {\n            itemIndex = this.getIndexFromEle(hdr.id);\n          } else {\n            itemIndex = index;\n          }\n\n          var hdrItem = select('.' + CLS_TB_ITEMS + ' #' + CLS_ITEM$2 + this.tabId + '_' + itemIndex, this.element);\n          var cntItem = select('.' + CLS_CONTENT$1 + ' #' + CLS_CONTENT$1 + this.tabId + '_' + itemIndex, this.element);\n\n          if (properties[j] === 'header' || properties[j] === 'headerTemplate') {\n            var icon = isNullOrUndefined(this.items[index].header) || isNullOrUndefined(this.items[index].header.iconCss) ? '' : this.items[index].header.iconCss;\n            var textVal = this.items[index].headerTemplate || this.items[index].header.text;\n\n            if (textVal === '' && icon === '') {\n              this.removeTab(index);\n            } else {\n              this.tbId = hdr.id;\n              var arr = [];\n              arr.push(this.items[index]);\n              this.items.splice(index, 1);\n              this.itemIndexArray.splice(index, 1);\n              this.tbObj.items.splice(index, 1);\n              var isHiddenEle = hdrItem.classList.contains(CLS_HIDDEN$1);\n              detach(hdrItem);\n              this.isReplace = true;\n              this.addTab(arr, index);\n\n              if (isHiddenEle) {\n                this.hideTab(index);\n              }\n\n              this.isReplace = false;\n            }\n          }\n\n          if (properties[j] === 'content' && !isNullOrUndefined(cntItem)) {\n            var strVal = typeof newVal === 'string' || isNullOrUndefined(newVal.innerHTML);\n\n            if (strVal && (newVal[0] === '.' || newVal[0] === '#') && newVal.length) {\n              var eleVal = document.querySelector(newVal);\n              cntItem.appendChild(eleVal);\n              eleVal.style.display = '';\n            } else if (newVal === '' && oldVal[0] === '#') {\n              document.body.appendChild(this.element.querySelector(oldVal)).style.display = 'none';\n              cntItem.innerHTML = newVal;\n            } else if (this.isReact) {\n              cntItem.innerHTML = '';\n              this.templateCompile(cntItem, newVal, index);\n            } else if (typeof newVal !== 'function') {\n              cntItem.innerHTML = newVal;\n            }\n          }\n\n          if (properties[j] === 'cssClass') {\n            if (!isNullOrUndefined(hdrItem)) {\n              hdrItem.classList.remove(oldVal);\n              hdrItem.classList.add(newVal);\n            }\n\n            if (!isNullOrUndefined(cntItem)) {\n              cntItem.classList.remove(oldVal);\n              cntItem.classList.add(newVal);\n            }\n          }\n\n          if (properties[j] === 'disabled') {\n            this.enableTab(index, newVal === true ? false : true);\n          }\n\n          if (properties[j] === 'visible') {\n            this.hideTab(index, newVal === true ? false : true);\n          }\n        }\n      }\n    } else {\n      this.lastIndex = 0;\n\n      if (isNullOrUndefined(this.tbObj)) {\n        this.reRenderItems();\n      } else {\n        if (this.isReact || this.isAngular) {\n          this.clearTemplate();\n        }\n\n        this.setItems(newProp.items);\n\n        if (this.templateEle.length > 0) {\n          this.expTemplateContent();\n        }\n\n        this.templateEle = [];\n        var selectElement = select('.' + CLS_TAB + ' > .' + CLS_CONTENT$1, this.element);\n\n        while (selectElement.firstElementChild) {\n          detach(selectElement.firstElementChild);\n        }\n\n        this.select(this.selectedItem);\n        this.draggableItems = [];\n        this.bindDraggable();\n      }\n    }\n  };\n\n  Tab.prototype.initializeDrag = function (target) {\n    var _this = this;\n\n    var dragObj = new Draggable(target, {\n      dragArea: this.dragArea,\n      dragTarget: '.' + CLS_TB_ITEM,\n      clone: true,\n      helper: this.helper.bind(this),\n      dragStart: this.itemDragStart.bind(this),\n      drag: function (e) {\n        var dragIndex = _this.getEleIndex(_this.dragItem);\n\n        var dropIndex;\n        var dropItem;\n        var dragArgs = {\n          draggedItem: _this.dragItem,\n          event: e.event,\n          target: e.target,\n          droppedItem: e.target.closest('.' + CLS_TB_ITEM),\n          clonedElement: _this.cloneElement,\n          index: dragIndex\n        };\n\n        if (!isNullOrUndefined(e.target.closest('.' + CLS_TAB)) && !e.target.closest('.' + CLS_TAB).isEqualNode(_this.element) && _this.dragArea !== '.' + CLS_HEADER$1) {\n          _this.trigger('dragging', dragArgs);\n        } else {\n          if (!e.target.closest(_this.dragArea) && _this.overflowMode !== 'Popup') {\n            document.body.style.cursor = 'not-allowed';\n            addClass([_this.cloneElement], CLS_HIDDEN$1);\n\n            if (_this.dragItem.classList.contains(CLS_HIDDEN$1)) {\n              removeClass([_this.dragItem], CLS_HIDDEN$1);\n            }\n\n            _this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'visible';\n          } else {\n            document.body.style.cursor = '';\n            _this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'hidden';\n\n            if (_this.cloneElement.classList.contains(CLS_HIDDEN$1)) {\n              removeClass([_this.cloneElement], CLS_HIDDEN$1);\n            }\n          }\n\n          if (_this.overflowMode === 'Scrollable' && !isNullOrUndefined(_this.element.querySelector('.e-hscroll'))) {\n            var scrollRightNavEle = _this.element.querySelector('.e-scroll-right-nav');\n\n            var scrollLeftNavEle = _this.element.querySelector('.e-scroll-left-nav');\n\n            var hscrollBar = _this.element.querySelector('.e-hscroll-bar');\n\n            if (!isNullOrUndefined(scrollRightNavEle) && Math.abs(scrollRightNavEle.offsetWidth / 2 + scrollRightNavEle.offsetLeft) > _this.cloneElement.offsetLeft + _this.cloneElement.offsetWidth) {\n              hscrollBar.scrollLeft -= 10;\n            }\n\n            if (!isNullOrUndefined(scrollLeftNavEle) && Math.abs(scrollLeftNavEle.offsetLeft + scrollLeftNavEle.offsetWidth - _this.cloneElement.offsetLeft) > scrollLeftNavEle.offsetWidth / 2) {\n              hscrollBar.scrollLeft += 10;\n            }\n          }\n\n          _this.cloneElement.style.pointerEvents = 'none';\n          dropItem = closest(e.target, '.' + CLS_TB_ITEM + '.e-draggable');\n          var scrollContentWidth = 0;\n\n          if (_this.overflowMode === 'Scrollable' && !isNullOrUndefined(_this.element.querySelector('.e-hscroll'))) {\n            scrollContentWidth = _this.element.querySelector('.e-hscroll-content').offsetWidth;\n          }\n\n          if (dropItem != null && !dropItem.isSameNode(_this.dragItem) && dropItem.closest('.' + CLS_TAB).isSameNode(_this.dragItem.closest('.' + CLS_TAB))) {\n            dropIndex = _this.getEleIndex(dropItem);\n\n            if (dropIndex < dragIndex && Math.abs(dropItem.offsetLeft + dropItem.offsetWidth - _this.cloneElement.offsetLeft) > dropItem.offsetWidth / 2) {\n              _this.dragAction(dropItem, dragIndex, dropIndex);\n            }\n\n            if (dropIndex > dragIndex && Math.abs(dropItem.offsetWidth / 2) + dropItem.offsetLeft - scrollContentWidth < _this.cloneElement.offsetLeft + _this.cloneElement.offsetWidth) {\n              _this.dragAction(dropItem, dragIndex, dropIndex);\n            }\n          }\n\n          _this.droppedIndex = _this.getEleIndex(_this.dragItem);\n\n          _this.trigger('dragging', dragArgs);\n        }\n      },\n      dragStop: this.itemDragStop.bind(this)\n    });\n    this.draggableItems.push(dragObj);\n  };\n\n  Tab.prototype.helper = function (e) {\n    this.cloneElement = this.createElement('div');\n\n    if (e.element) {\n      this.cloneElement = e.element.cloneNode(true);\n      addClass([this.cloneElement], 'e-tab-clone-element');\n\n      if (this.element.querySelector('.' + CLS_HEADER$1).classList.contains(CLS_CLOSE_SHOW)) {\n        addClass([this.cloneElement], CLS_CLOSE_SHOW);\n      }\n\n      removeClass([this.cloneElement.querySelector('.' + CLS_WRAP)], 'e-ripple');\n\n      if (!isNullOrUndefined(this.cloneElement.querySelector('.e-ripple-element'))) {\n        remove(this.cloneElement.querySelector('.e-ripple-element'));\n      }\n\n      document.body.appendChild(this.cloneElement);\n    }\n\n    return this.cloneElement;\n  };\n\n  Tab.prototype.itemDragStart = function (e) {\n    var _this = this;\n\n    this.draggingItems = this.items.map(function (x) {\n      return x;\n    });\n    this.dragItem = e.element;\n    var dragArgs = {\n      draggedItem: e.element,\n      event: e.event,\n      target: e.target,\n      droppedItem: null,\n      index: this.getEleIndex(this.dragItem),\n      clonedElement: this.cloneElement,\n      cancel: false\n    };\n    this.trigger('onDragStart', dragArgs, function (tabitemDragArgs) {\n      if (tabitemDragArgs.cancel) {\n        detach(_this.cloneElement);\n      } else {\n        _this.removeActiveClass();\n\n        addClass([_this.tbItems.querySelector('.' + CLS_INDICATOR)], CLS_HIDDEN$1);\n        _this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'hidden';\n      }\n    });\n  };\n\n  Tab.prototype.dragAction = function (dropItem, dragsIndex, dropIndex) {\n    if (this.items.length > 0) {\n      var item = this.draggingItems[dragsIndex];\n      this.draggingItems.splice(dragsIndex, 1);\n      this.draggingItems.splice(dropIndex, 0, item);\n    }\n\n    if (this.overflowMode === 'MultiRow') {\n      dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextElementSibling);\n    }\n\n    if (dragsIndex > dropIndex) {\n      if (!this.dragItem.parentElement.isSameNode(dropItem.parentElement)) {\n        if (this.overflowMode === 'Extended') {\n          if (dropItem.isSameNode(dropItem.parentElement.lastChild)) {\n            var popupContainer = this.dragItem.parentNode;\n            dropItem.parentNode.insertBefore(this.dragItem, dropItem);\n            popupContainer.insertBefore(dropItem.parentElement.lastChild, popupContainer.childNodes[0]);\n          } else {\n            this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);\n            dropItem.parentNode.insertBefore(this.dragItem, dropItem);\n          }\n        } else {\n          var lastEle = dropItem.parentElement.lastChild;\n\n          if (dropItem.isSameNode(lastEle)) {\n            var popupContainer = this.dragItem.parentNode;\n            dropItem.parentNode.insertBefore(this.dragItem, dropItem);\n            popupContainer.insertBefore(lastEle, popupContainer.childNodes[0]);\n          } else {\n            this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);\n            dropItem.parentNode.insertBefore(this.dragItem, dropItem);\n          }\n        }\n      } else {\n        this.dragItem.parentNode.insertBefore(this.dragItem, dropItem);\n      }\n    }\n\n    if (dragsIndex < dropIndex) {\n      if (!this.dragItem.parentElement.isSameNode(dropItem.parentElement)) {\n        if (this.overflowMode === 'Extended') {\n          this.dragItem.parentElement.appendChild(dropItem.parentElement.firstElementChild);\n          dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextSibling);\n        } else {\n          this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);\n          dropItem.parentNode.insertBefore(this.dragItem, dropItem);\n        }\n      } else {\n        this.dragItem.parentNode.insertBefore(this.dragItem, dropItem.nextElementSibling);\n      }\n    }\n  };\n\n  Tab.prototype.itemDragStop = function (e) {\n    var _this = this;\n\n    detach(this.cloneElement);\n    this.cloneElement = null;\n    this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = 'visible';\n    document.body.style.cursor = '';\n    var dragStopArgs = {\n      draggedItem: this.dragItem,\n      event: e.event,\n      target: e.target,\n      droppedItem: this.tbItem[this.droppedIndex],\n      clonedElement: null,\n      index: this.droppedIndex,\n      cancel: false\n    };\n    this.trigger('dragged', dragStopArgs, function (tabItemDropArgs) {\n      if (tabItemDropArgs.cancel) {\n        _this.refresh();\n      } else {\n        if (_this.items.length > 0 && _this.draggingItems.length > 0) {\n          _this.items = _this.draggingItems;\n          _this.selectedItem = _this.droppedIndex;\n\n          _this.refresh();\n        } else {\n          _this.dragItem.querySelector('.' + CLS_WRAP).style.visibility = '';\n          removeClass([_this.tbItems.querySelector('.' + CLS_INDICATOR)], CLS_HIDDEN$1);\n\n          _this.selectTab(_this.droppedIndex, null, true);\n        }\n      }\n    });\n    this.dragItem = null;\n  };\n  /**\r\n   * Enables or disables the specified Tab item. On passing value as `false`, the item will be disabled.\r\n   *\r\n   * @param {number} index - Index value of target Tab item.\r\n   * @param {boolean} value - Boolean value that determines whether the command should be enabled or disabled.\r\n   * By default, isEnable is true.\r\n   * @returns {void}.\r\n   */\n\n\n  Tab.prototype.enableTab = function (index, value) {\n    var tbItems = selectAll('.' + CLS_TB_ITEM, this.element)[index];\n\n    if (isNullOrUndefined(tbItems)) {\n      return;\n    }\n\n    if (value === true) {\n      tbItems.classList.remove(CLS_DISABLE$4, CLS_OVERLAY$2);\n      tbItems.firstElementChild.setAttribute('tabindex', tbItems.firstElementChild.getAttribute('data-tabindex'));\n    } else {\n      tbItems.classList.add(CLS_DISABLE$4, CLS_OVERLAY$2);\n      tbItems.firstElementChild.removeAttribute('tabindex');\n\n      if (tbItems.classList.contains(CLS_ACTIVE$1)) {\n        this.select(index + 1);\n      }\n    }\n\n    if (!isNullOrUndefined(this.items[index])) {\n      this.items[index].disabled = !value;\n      this.dataBind();\n    }\n\n    tbItems.firstElementChild.setAttribute('aria-disabled', value === true ? 'false' : 'true');\n  };\n  /**\r\n   * Adds new items to the Tab that accepts an array as Tab items.\r\n   *\r\n   * @param {TabItemModel[]} items - An array of item that is added to the Tab.\r\n   * @param {number} index - Number value that determines where the items to be added. By default, index is 0.\r\n   * @returns {void}.\r\n   */\n\n\n  Tab.prototype.addTab = function (items, index) {\n    var _this = this;\n\n    var addArgs = {\n      addedItems: items,\n      cancel: false\n    };\n\n    if (!this.isReplace) {\n      this.trigger('adding', addArgs, function (tabAddingArgs) {\n        if (!tabAddingArgs.cancel) {\n          _this.addingTabContent(items, index);\n        }\n      });\n    } else {\n      this.addingTabContent(items, index);\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n\n  Tab.prototype.addingTabContent = function (items, index) {\n    var _this = this;\n\n    var lastEleIndex = 0;\n    this.hdrEle = select('.' + CLS_HEADER$1, this.element);\n\n    if (isNullOrUndefined(this.hdrEle)) {\n      this.items = items;\n      this.reRenderItems();\n      this.bindDraggable();\n    } else {\n      var itemsCount = selectAll('.e-tab-header .' + CLS_TB_ITEM, this.element).length;\n\n      if (itemsCount !== 0) {\n        lastEleIndex = this.lastIndex + 1;\n      }\n\n      if (isNullOrUndefined(index)) {\n        index = itemsCount - 1;\n      }\n\n      if (itemsCount < index || index < 0 || isNaN(index)) {\n        return;\n      }\n\n      if (itemsCount === 0 && !isNullOrUndefined(this.hdrEle)) {\n        this.hdrEle.style.display = '';\n      }\n\n      if (!isNullOrUndefined(this.bdrLine)) {\n        this.bdrLine.classList.add(CLS_HIDDEN$1);\n      }\n\n      this.tbItems = select('.' + CLS_TB_ITEMS, this.getTabHeader());\n      this.isAdd = true;\n      var tabItems_2 = this.parseObject(items, index);\n      this.isAdd = false;\n      var i_1 = 0;\n      var textValue_1;\n      items.forEach(function (item, place) {\n        textValue_1 = item.headerTemplate || item.header.text;\n\n        if (!(isNullOrUndefined(item.headerTemplate || item.header) || isNullOrUndefined(textValue_1) || textValue_1.length === 0 && !isNullOrUndefined(item.header) && isNullOrUndefined(item.header.iconCss))) {\n          if (tabItems_2[place]) {\n            if (isNullOrUndefined(item.id)) {\n              item.id = CLS_ITEM$2 + _this.tabId + '_' + TABITEMPREFIX + (lastEleIndex + place).toString();\n            }\n\n            tabItems_2[place].htmlAttributes['data-id'] = item.id;\n          }\n\n          _this.items.splice(index + i_1, 0, item);\n\n          i_1++;\n        }\n\n        if (_this.isTemplate && !isNullOrUndefined(item.header) && !isNullOrUndefined(item.header.text)) {\n          var no = lastEleIndex + place;\n\n          var ele = _this.createElement('div', {\n            id: CLS_CONTENT$1 + _this.tabId + '_' + no,\n            className: CLS_ITEM$2,\n            attrs: {\n              role: 'tabpanel',\n              'aria-labelledby': CLS_ITEM$2 + '_' + no\n            }\n          });\n\n          _this.cntEle.insertBefore(ele, _this.cntEle.children[index + place]);\n\n          var eleTrg = _this.getTrgContent(_this.cntEle, no.toString());\n\n          _this.getContent(eleTrg, item.content, 'render', index);\n        }\n      });\n      this.tbObj.addItems(tabItems_2, index);\n\n      if (!this.isReplace) {\n        this.trigger('added', {\n          addedItems: items\n        });\n      }\n\n      if (this.selectedItem === index) {\n        this.select(index);\n      } else {\n        this.setActiveBorder();\n        this.tbItem = selectAll('.' + CLS_TB_ITEM, this.getTabHeader());\n      }\n\n      this.bindDraggable();\n    }\n  };\n  /**\r\n   * Removes the items in the Tab from the specified index.\r\n   *\r\n   * @param {number} index - Index of target item that is going to be removed.\r\n   * @returns {void}.\r\n   */\n\n\n  Tab.prototype.removeTab = function (index) {\n    var _this = this;\n\n    var trg = selectAll('.' + CLS_TB_ITEM, this.element)[index];\n\n    if (isNullOrUndefined(trg)) {\n      return;\n    }\n\n    var removeArgs = {\n      removedItem: trg,\n      removedIndex: index,\n      cancel: false\n    };\n    this.trigger('removing', removeArgs, function (tabRemovingArgs) {\n      if (!tabRemovingArgs.cancel) {\n        _this.tbObj.removeItems(index);\n\n        if (_this.allowDragAndDrop && index !== Array.prototype.indexOf.call(_this.itemIndexArray, trg.id)) {\n          index = Array.prototype.indexOf.call(_this.itemIndexArray, trg.id);\n        }\n\n        var targetEleIndex = _this.itemIndexArray.indexOf(trg.id);\n\n        _this.items.splice(targetEleIndex, 1);\n\n        _this.itemIndexArray.splice(targetEleIndex, 1);\n\n        _this.refreshActiveBorder();\n\n        var cntTrg = select('#' + CLS_CONTENT$1 + _this.tabId + '_' + _this.extIndex(trg.id), select('.' + CLS_CONTENT$1, _this.element));\n\n        if (!isNullOrUndefined(cntTrg)) {\n          var registeredTemplate = _this.registeredTemplate;\n          var portal = _this.portals;\n\n          if (registeredTemplate && registeredTemplate.content) {\n            var templateToClear = [];\n\n            for (var i = 0; i < registeredTemplate.content.length; i++) {\n              var registeredItem = registeredTemplate.content[i].rootNodes[0];\n              var closestItem = closest(registeredItem, '.' + CLS_ITEM$2);\n\n              if (!isNullOrUndefined(registeredItem) && closestItem === cntTrg) {\n                templateToClear.push(registeredTemplate.content[i]);\n                break;\n              }\n            }\n\n            if (templateToClear.length > 0) {\n              _this.clearTemplate(['content'], templateToClear);\n            }\n          }\n          /*  else if (portal) {\r\n               for (var i = 0; i < portal.length; i++) {\r\n                   var portalItem = portal[i];\r\n                   var closestItem = closest(portalItem.containerInfo, '.' + CLS_ITEM);\r\n                   if (!isNullOrUndefined(portalItem) && closestItem === cntTrg) {\r\n                       this.clearTemplate(['content'], i);\r\n                       break;\r\n                   }\r\n               }\r\n           } */\n\n\n          detach(cntTrg);\n        }\n\n        _this.trigger('removed', tabRemovingArgs);\n\n        if (_this.draggableItems && _this.draggableItems.length > 0) {\n          _this.draggableItems[index].destroy();\n\n          _this.draggableItems[index] = null;\n\n          _this.draggableItems.splice(index, 1);\n        }\n\n        if (trg.classList.contains(CLS_ACTIVE$1)) {\n          index = index > selectAll('.' + CLS_TB_ITEM + ':not(.' + CLS_TB_POPUP + ')', _this.element).length - 1 ? index - 1 : index;\n          _this.enableAnimation = false;\n          _this.selectedItem = index;\n\n          _this.select(index);\n        } else if (index !== _this.selectedItem) {\n          if (index < _this.selectedItem) {\n            index = _this.itemIndexArray.indexOf(_this.tbItem[_this.selectedItem].id);\n\n            _this.setProperties({\n              selectedItem: index > -1 ? index : _this.selectedItem\n            }, true);\n\n            _this.prevIndex = _this.selectedItem;\n          }\n\n          _this.tbItem = selectAll('.' + CLS_TB_ITEM, _this.getTabHeader());\n        }\n\n        if (selectAll('.' + CLS_TB_ITEM, _this.element).length === 0) {\n          _this.hdrEle.style.display = 'none';\n        }\n\n        _this.enableAnimation = true;\n      }\n    });\n  };\n  /**\r\n   * Shows or hides the Tab that is in the specified index.\r\n   *\r\n   * @param {number} index - Index value of target item.\r\n   * @param {boolean} value - Based on this Boolean value, item will be hide (false) or show (true). By default, value is true.\r\n   * @returns {void}.\r\n   */\n\n\n  Tab.prototype.hideTab = function (index, value) {\n    var items;\n    var item = selectAll('.' + CLS_TB_ITEM, this.element)[index];\n\n    if (isNullOrUndefined(item)) {\n      return;\n    }\n\n    if (isNullOrUndefined(value)) {\n      value = true;\n    }\n\n    this.bdrLine.classList.add(CLS_HIDDEN$1);\n\n    if (value === true) {\n      item.classList.add(CLS_HIDDEN$1);\n      items = selectAll('.' + CLS_TB_ITEM + ':not(.' + CLS_HIDDEN$1 + ')', this.tbItems);\n\n      if (items.length !== 0 && item.classList.contains(CLS_ACTIVE$1)) {\n        if (index !== 0) {\n          for (var i = index - 1; i >= 0; i--) {\n            if (!this.tbItem[i].classList.contains(CLS_HIDDEN$1)) {\n              this.select(i);\n              break;\n            } else if (i === 0) {\n              for (var k = index + 1; k < this.tbItem.length; k++) {\n                if (!this.tbItem[k].classList.contains(CLS_HIDDEN$1)) {\n                  this.select(k);\n                  break;\n                }\n              }\n            }\n          }\n        } else {\n          for (var k = index + 1; k < this.tbItem.length; k++) {\n            if (!this.tbItem[k].classList.contains(CLS_HIDDEN$1)) {\n              this.select(k);\n              break;\n            }\n          }\n        }\n      } else if (items.length === 0) {\n        this.element.classList.add(CLS_HIDDEN$1);\n      }\n    } else {\n      this.element.classList.remove(CLS_HIDDEN$1);\n      items = selectAll('.' + CLS_TB_ITEM + ':not(.' + CLS_HIDDEN$1 + ')', this.tbItems);\n      item.classList.remove(CLS_HIDDEN$1);\n\n      if (items.length === 0) {\n        this.select(index);\n      }\n    }\n\n    this.setActiveBorder();\n    item.setAttribute('aria-hidden', '' + value);\n\n    if (this.overflowMode === 'Popup' && this.tbObj) {\n      this.tbObj.refreshOverflow();\n    }\n  };\n\n  Tab.prototype.selectTab = function (args, event, isInteracted) {\n    if (event === void 0) {\n      event = null;\n    }\n\n    if (isInteracted === void 0) {\n      isInteracted = false;\n    }\n\n    this.isInteracted = isInteracted;\n    this.select(args, event);\n  };\n  /**\r\n   * Specifies the index or HTMLElement to select an item from the Tab.\r\n   *\r\n   * @param {number | HTMLElement} args - Index or DOM element is used for selecting an item from the Tab.\r\n   * @param {Event} event - An event which takes place in DOM.\r\n   * @returns {void}\r\n   */\n\n\n  Tab.prototype.select = function (args, event) {\n    var _this = this;\n\n    var tabHeader = this.getTabHeader();\n    this.tbItems = select('.' + CLS_TB_ITEMS, tabHeader);\n    this.tbItem = selectAll('.' + CLS_TB_ITEM, tabHeader);\n    this.content = select('.' + CLS_CONTENT$1, this.element);\n    this.prevItem = this.tbItem[this.prevIndex];\n\n    if (isNullOrUndefined(this.selectedItem) || this.selectedItem < 0 || this.tbItem.length <= this.selectedItem || isNaN(this.selectedItem)) {\n      this.selectedItem = 0;\n    } else {\n      this.selectedID = this.extIndex(this.tbItem[this.selectedItem].id);\n    }\n\n    var trg = this.tbItem[args];\n\n    if (isNullOrUndefined(trg)) {\n      this.selectedID = '0';\n    } else {\n      this.selectingID = this.extIndex(trg.id);\n    }\n\n    if (!isNullOrUndefined(this.prevItem) && !this.prevItem.classList.contains(CLS_DISABLE$4)) {\n      this.prevItem.children.item(0).setAttribute('tabindex', this.prevItem.firstElementChild.getAttribute('tabindex'));\n    }\n\n    var eventArg = {\n      event: event,\n      previousItem: this.prevItem,\n      previousIndex: this.prevIndex,\n      selectedItem: this.tbItem[this.selectedItem],\n      selectedIndex: this.selectedItem,\n      selectedContent: !isNullOrUndefined(this.content) ? select('#' + CLS_CONTENT$1 + this.tabId + '_' + this.selectedID, this.content) : null,\n      selectingItem: trg,\n      selectingIndex: args,\n      selectingContent: !isNullOrUndefined(this.content) ? select('#' + CLS_CONTENT$1 + this.tabId + '_' + this.selectingID, this.content) : null,\n      isSwiped: this.isSwipeed,\n      isInteracted: this.isInteracted,\n      cancel: false\n    };\n\n    if (!this.initRender) {\n      this.trigger('selecting', eventArg, function (selectArgs) {\n        if (!selectArgs.cancel) {\n          _this.selectingContent(args, _this.isInteracted);\n        }\n      });\n    } else {\n      this.selectingContent(args, this.isInteracted);\n    }\n\n    this.isInteracted = false;\n  };\n\n  Tab.prototype.selectingContent = function (args, isInteracted) {\n    if (typeof args === 'number') {\n      if (!isNullOrUndefined(this.tbItem[args]) && (this.tbItem[args].classList.contains(CLS_DISABLE$4) || this.tbItem[args].classList.contains(CLS_HIDDEN$1))) {\n        for (var i = args + 1; i < this.items.length; i++) {\n          if (this.items[i].disabled === false && this.items[i].visible === true) {\n            args = i;\n            break;\n          } else {\n            args = 0;\n          }\n        }\n      }\n\n      if (this.tbItem.length > args && args >= 0 && !isNaN(args)) {\n        this.prevIndex = this.selectedItem;\n        this.prevItem = this.tbItem[this.prevIndex];\n\n        if (this.tbItem[args].classList.contains(CLS_TB_POPUP) && this.reorderActiveTab) {\n          this.setActive(this.popupHandler(this.tbItem[args]), null, isInteracted);\n\n          if (!isNullOrUndefined(this.items) && this.items.length > 0 && this.allowDragAndDrop) {\n            this.tbItem = selectAll('.' + CLS_TB_ITEMS + ' .' + CLS_TB_ITEM, this.hdrEle);\n            var item = this.items[args];\n            this.items.splice(args, 1);\n            this.items.splice(this.tbItem.length - 1, 0, item);\n            var itemId = this.itemIndexArray[args];\n            this.itemIndexArray.splice(args, 1);\n            this.itemIndexArray.splice(this.tbItem.length - 1, 0, itemId);\n          }\n        } else {\n          this.setActive(args, null, isInteracted);\n        }\n      } else {\n        this.setActive(0, null, isInteracted);\n      }\n    } else if (args instanceof HTMLElement) {\n      this.setActive(this.getEleIndex(args), null, isInteracted);\n    }\n  };\n  /**\r\n   * Gets the item index from the Tab.\r\n   *\r\n   * @param  {string} tabItemId - Item ID is used for getting index from the Tab.\r\n   * @returns {number} - It returns item index.\r\n   */\n\n\n  Tab.prototype.getItemIndex = function (tabItemId) {\n    var tabIndex;\n\n    for (var i = 0; i < this.tbItem.length; i++) {\n      var value = this.tbItem[i].getAttribute('data-id');\n\n      if (tabItemId === value) {\n        tabIndex = i;\n        break;\n      }\n    }\n\n    return tabIndex;\n  };\n  /**\r\n   * Specifies the value to disable/enable the Tab component.\r\n   * When set to `true`, the component will be disabled.\r\n   *\r\n   * @param  {boolean} value - Based on this Boolean value, Tab will be enabled (false) or disabled (true).\r\n   * @returns {void}.\r\n   */\n\n\n  Tab.prototype.disable = function (value) {\n    this.setCssClass(this.element, CLS_DISABLE$4, value);\n    this.element.setAttribute('aria-disabled', '' + value);\n  };\n  /**\r\n   * Get the properties to be maintained in the persisted state.\r\n   *\r\n   * @returns {string} - It returns the persisted state.\r\n   */\n\n\n  Tab.prototype.getPersistData = function () {\n    return this.addOnPersist(['selectedItem', 'actEleId']);\n  };\n  /**\r\n   * Returns the current module name.\r\n   *\r\n   * @returns {string} - It returns the current module name.\r\n   * @private\r\n   */\n\n\n  Tab.prototype.getModuleName = function () {\n    return 'tab';\n  };\n  /**\r\n   * Gets called when the model property changes.The data that describes the old and new values of the property that changed.\r\n   *\r\n   * @param  {TabModel} newProp - It contains the new value of data.\r\n   * @param  {TabModel} oldProp - It contains the old value of data.\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  Tab.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var _this = this;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'width':\n          setStyleAttribute(this.element, {\n            width: formatUnit(newProp.width)\n          });\n          break;\n\n        case 'height':\n          setStyleAttribute(this.element, {\n            height: formatUnit(newProp.height)\n          });\n          this.setContentHeight(false);\n          break;\n\n        case 'cssClass':\n          var headerEle = this.element.querySelector('.' + CLS_HEADER$1);\n\n          if (oldProp.cssClass !== '' && !isNullOrUndefined(oldProp.cssClass)) {\n            this.setCssClass(this.element, oldProp.cssClass, false);\n            this.setCssClass(this.element, newProp.cssClass, true);\n\n            if (!isNullOrUndefined(headerEle)) {\n              this.setCssClass(headerEle, oldProp.cssClass, false);\n              this.setCssClass(headerEle, newProp.cssClass, true);\n            }\n          } else {\n            this.setCssClass(this.element, newProp.cssClass, true);\n\n            if (!isNullOrUndefined(headerEle)) {\n              this.setCssClass(headerEle, newProp.cssClass, true);\n            }\n          }\n\n          break;\n\n        case 'items':\n          this.evalOnPropertyChangeItems(newProp, oldProp);\n          break;\n\n        case 'showCloseButton':\n          this.setCloseButton(newProp.showCloseButton);\n          break;\n\n        case 'reorderActiveTab':\n          this.refreshActiveTabBorder();\n          break;\n\n        case 'selectedItem':\n          this.selectedItem = oldProp.selectedItem;\n          this.select(newProp.selectedItem);\n          break;\n\n        case 'headerPlacement':\n          this.changeOrientation(newProp.headerPlacement);\n          break;\n\n        case 'enableRtl':\n          this.setRTL(newProp.enableRtl);\n          break;\n\n        case 'overflowMode':\n          this.tbObj.overflowMode = newProp.overflowMode;\n          this.tbObj.dataBind();\n          this.refreshActiveTabBorder();\n          break;\n\n        case 'heightAdjustMode':\n          this.setContentHeight(false);\n          this.select(this.selectedItem);\n          break;\n\n        case 'scrollStep':\n          if (this.tbObj) {\n            this.tbObj.scrollStep = this.scrollStep;\n          }\n\n          break;\n\n        case 'allowDragAndDrop':\n          this.bindDraggable();\n          break;\n\n        case 'dragArea':\n          if (this.allowDragAndDrop) {\n            this.draggableItems.forEach(function (item) {\n              item.dragArea = _this.dragArea;\n            });\n            this.refresh();\n          }\n\n          break;\n      }\n    }\n  };\n  /**\r\n   * To refresh the active tab contents.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  Tab.prototype.refreshActiveTab = function () {\n    if (this.isReact && this.isTemplate) {\n      this.clearTemplate();\n    }\n\n    if (!this.isTemplate) {\n      if (this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1)) {\n        detach(this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1).children[0]);\n        detach(this.element.querySelector('.' + CLS_CONTENT$1).querySelector('.' + CLS_ACTIVE$1).children[0]);\n        var item = this.items[this.selectedItem];\n        var pos = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconPosition) ? '' : item.header.iconPosition;\n        var css = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconCss) ? '' : item.header.iconCss;\n        var text = item.headerTemplate || item.header.text;\n        var txtWrap = this.createElement('div', {\n          className: CLS_TEXT,\n          attrs: {\n            'role': 'presentation'\n          }\n        });\n\n        if (!isNullOrUndefined(text.tagName)) {\n          txtWrap.appendChild(text);\n        } else {\n          this.headerTextCompile(txtWrap, text, this.selectedItem);\n        }\n\n        var tEle = void 0;\n        var icon = this.createElement('span', {\n          className: CLS_ICONS + ' ' + CLS_TAB_ICON + ' ' + CLS_ICON + '-' + pos + ' ' + css\n        });\n        var tConts = this.createElement('div', {\n          className: CLS_TEXT_WRAP\n        });\n        tConts.appendChild(txtWrap);\n\n        if (text !== '' && text !== undefined && css !== '') {\n          if (pos === 'left' || pos === 'top') {\n            tConts.insertBefore(icon, tConts.firstElementChild);\n          } else {\n            tConts.appendChild(icon);\n          }\n\n          tEle = txtWrap;\n          this.isIconAlone = false;\n        } else {\n          tEle = css === '' ? txtWrap : icon;\n\n          if (tEle === icon) {\n            detach(txtWrap);\n            tConts.appendChild(icon);\n            this.isIconAlone = true;\n          }\n        }\n\n        var tabIndex = isNullOrUndefined(item.tabIndex) ? '-1' : item.tabIndex.toString();\n        var wrapAtt = item.disabled ? {} : {\n          tabIndex: tabIndex,\n          'data-tabindex': tabIndex,\n          role: 'tab',\n          'aria-selected': 'true',\n          'aria-disabled': 'false'\n        };\n        tConts.appendChild(this.btnCls.cloneNode(true));\n        var wraper = this.createElement('div', {\n          className: CLS_WRAP,\n          attrs: wrapAtt\n        });\n        wraper.appendChild(tConts);\n\n        if (pos === 'top' || pos === 'bottom') {\n          this.element.classList.add('e-vertical-icon');\n        }\n\n        this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1).appendChild(wraper);\n        var crElem = this.createElement('div');\n        var cnt = item.content;\n        var eleStr = void 0;\n\n        if (typeof cnt === 'string' || isNullOrUndefined(cnt.innerHTML)) {\n          if (typeof cnt === 'string' && this.enableHtmlSanitizer) {\n            cnt = SanitizeHtmlHelper.sanitize(cnt);\n          }\n\n          if (cnt[0] === '.' || cnt[0] === '#') {\n            if (document.querySelectorAll(cnt).length) {\n              var eleVal = document.querySelector(cnt);\n              eleStr = eleVal.outerHTML.trim();\n              crElem.appendChild(eleVal);\n              eleVal.style.display = '';\n            } else {\n              this.compileElement(crElem, cnt, 'content', this.selectedItem);\n            }\n          } else {\n            this.compileElement(crElem, cnt, 'content', this.selectedItem);\n          }\n        } else {\n          crElem.appendChild(cnt);\n        }\n\n        if (!isNullOrUndefined(eleStr)) {\n          if (this.templateEle.indexOf(cnt.toString()) === -1) {\n            this.templateEle.push(cnt.toString());\n          }\n        }\n\n        this.element.querySelector('.' + CLS_ITEM$2 + '.' + CLS_ACTIVE$1).appendChild(crElem);\n      }\n    } else {\n      var tabItems = this.element.querySelector('.' + CLS_TB_ITEMS);\n      var element = this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1);\n      var index = this.getIndexFromEle(element.id);\n      var header = element.innerText;\n      var detachContent = this.element.querySelector('.' + CLS_CONTENT$1).querySelector('.' + CLS_ACTIVE$1).children[0];\n      var mainContents = detachContent.innerHTML;\n      detach(element);\n      detach(detachContent);\n      var attr = {\n        className: CLS_TB_ITEM + ' ' + CLS_TEMPLATE$1 + ' ' + CLS_ACTIVE$1,\n        id: CLS_ITEM$2 + this.tabId + '_' + index\n      };\n      var txtString = this.createElement('span', {\n        className: CLS_TEXT,\n        innerHTML: header,\n        attrs: {\n          'role': 'presentation'\n        }\n      }).outerHTML;\n      var conte = this.createElement('div', {\n        className: CLS_TEXT_WRAP,\n        innerHTML: txtString + this.btnCls.outerHTML\n      }).outerHTML;\n      var tabIndex = element.firstElementChild.getAttribute('data-tabindex');\n      var wrap = this.createElement('div', {\n        className: CLS_WRAP,\n        innerHTML: conte,\n        attrs: {\n          tabIndex: tabIndex,\n          'data-tabindex': tabIndex,\n          role: 'tab',\n          'aria-controls': CLS_CONTENT$1 + this.tabId + '_' + index,\n          'aria-selected': 'true',\n          'aria-disabled': 'false'\n        }\n      });\n      tabItems.insertBefore(this.createElement('div', attr), tabItems.children[index + 1]);\n      this.element.querySelector('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE$1).appendChild(wrap);\n      var crElem = this.createElement('div', {\n        innerHTML: mainContents\n      });\n      this.element.querySelector('.' + CLS_CONTENT$1).querySelector('.' + CLS_ACTIVE$1).appendChild(crElem);\n    }\n\n    if (this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n  /**\r\n   * To refresh the active tab indicator.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  Tab.prototype.refreshActiveTabBorder = function () {\n    var activeEle = select('.' + CLS_TB_ITEM + '.' + CLS_TB_POPUP + '.' + CLS_ACTIVE$1, this.element);\n\n    if (!isNullOrUndefined(activeEle) && this.reorderActiveTab) {\n      this.select(this.getEleIndex(activeEle));\n    }\n\n    this.refreshActiveBorder();\n  };\n\n  __decorate$7([Collection([], TabItem)], Tab.prototype, \"items\", void 0);\n\n  __decorate$7([Property('100%')], Tab.prototype, \"width\", void 0);\n\n  __decorate$7([Property('auto')], Tab.prototype, \"height\", void 0);\n\n  __decorate$7([Property('')], Tab.prototype, \"cssClass\", void 0);\n\n  __decorate$7([Property(0)], Tab.prototype, \"selectedItem\", void 0);\n\n  __decorate$7([Property('Top')], Tab.prototype, \"headerPlacement\", void 0);\n\n  __decorate$7([Property('Content')], Tab.prototype, \"heightAdjustMode\", void 0);\n\n  __decorate$7([Property('Scrollable')], Tab.prototype, \"overflowMode\", void 0);\n\n  __decorate$7([Property('Dynamic')], Tab.prototype, \"loadOn\", void 0);\n\n  __decorate$7([Property(false)], Tab.prototype, \"enablePersistence\", void 0);\n\n  __decorate$7([Property(false)], Tab.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate$7([Property(false)], Tab.prototype, \"showCloseButton\", void 0);\n\n  __decorate$7([Property(true)], Tab.prototype, \"reorderActiveTab\", void 0);\n\n  __decorate$7([Property()], Tab.prototype, \"scrollStep\", void 0);\n\n  __decorate$7([Property()], Tab.prototype, \"dragArea\", void 0);\n\n  __decorate$7([Property(false)], Tab.prototype, \"allowDragAndDrop\", void 0);\n\n  __decorate$7([Complex({}, TabAnimationSettings)], Tab.prototype, \"animation\", void 0);\n\n  __decorate$7([Event()], Tab.prototype, \"created\", void 0);\n\n  __decorate$7([Event()], Tab.prototype, \"adding\", void 0);\n\n  __decorate$7([Event()], Tab.prototype, \"added\", void 0);\n\n  __decorate$7([Event()], Tab.prototype, \"selecting\", void 0);\n\n  __decorate$7([Event()], Tab.prototype, \"selected\", void 0);\n\n  __decorate$7([Event()], Tab.prototype, \"removing\", void 0);\n\n  __decorate$7([Event()], Tab.prototype, \"removed\", void 0);\n\n  __decorate$7([Event()], Tab.prototype, \"onDragStart\", void 0);\n\n  __decorate$7([Event()], Tab.prototype, \"dragging\", void 0);\n\n  __decorate$7([Event()], Tab.prototype, \"dragged\", void 0);\n\n  __decorate$7([Event()], Tab.prototype, \"destroyed\", void 0);\n\n  Tab = __decorate$7([NotifyPropertyChanges], Tab);\n  return Tab;\n}(Component);\n/**\r\n * Tab modules\r\n */\n\n\nvar __extends$8 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$8 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar ROOT = 'e-treeview';\nvar CONTROL = 'e-control';\nvar COLLAPSIBLE = 'e-icon-collapsible';\nvar EXPANDABLE = 'e-icon-expandable';\nvar LISTITEM = 'e-list-item';\nvar LISTTEXT = 'e-list-text';\nvar LISTWRAP = 'e-text-wrap';\nvar IELISTWRAP = 'e-ie-wrap';\nvar PARENTITEM = 'e-list-parent';\nvar HOVER = 'e-hover';\nvar ACTIVE = 'e-active';\nvar LOAD = 'e-icons-spinner';\nvar PROCESS = 'e-process';\nvar ICON = 'e-icons';\nvar TEXTWRAP = 'e-text-content';\nvar INPUT = 'e-input';\nvar INPUTGROUP = 'e-input-group';\nvar TREEINPUT = 'e-tree-input';\nvar EDITING = 'e-editing';\nvar RTL$1 = 'e-rtl';\nvar INTERACTION = 'e-interaction';\nvar DRAGITEM = 'e-drag-item';\nvar DROPPABLE = 'e-droppable';\nvar DRAGGING = 'e-dragging';\nvar SIBLING = 'e-sibling';\nvar DROPIN = 'e-drop-in';\nvar DROPNEXT = 'e-drop-next';\nvar DROPOUT = 'e-drop-out';\nvar NODROP = 'e-no-drop';\nvar FULLROWWRAP = 'e-fullrow-wrap';\nvar FULLROW = 'e-fullrow';\nvar SELECTED$1 = 'e-selected';\nvar EXPANDED = 'e-expanded';\nvar NODECOLLAPSED = 'e-node-collapsed';\nvar DISABLE = 'e-disable';\nvar DROPCOUNT = 'e-drop-count';\nvar CHECK = 'e-check';\nvar INDETERMINATE = 'e-stop';\nvar CHECKBOXWRAP = 'e-checkbox-wrapper';\nvar CHECKBOXFRAME = 'e-frame';\nvar CHECKBOXRIPPLE = 'e-ripple-container';\nvar RIPPLE = 'e-ripple';\nvar RIPPLEELMENT = 'e-ripple-element';\nvar FOCUS = 'e-node-focus';\nvar IMAGE = 'e-list-img';\nvar BIGGER = 'e-bigger';\nvar SMALL = 'e-small';\nvar CHILD = 'e-has-child';\nvar ITEM_ANIMATION_ACTIVE = 'e-animation-active';\nvar DISABLED$1 = 'e-disabled';\nvar PREVENTSELECT = 'e-prevent';\nvar treeAriaAttr = {\n  treeRole: 'group',\n  itemRole: 'treeitem',\n  listRole: 'group',\n  itemText: '',\n  wrapperRole: ''\n};\n/**\r\n * Configures the fields to bind to the properties of node in the TreeView component.\r\n */\n\nvar FieldsSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$8(FieldsSettings, _super);\n\n  function FieldsSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$8([Property('child')], FieldsSettings.prototype, \"child\", void 0);\n\n  __decorate$8([Property([])], FieldsSettings.prototype, \"dataSource\", void 0);\n\n  __decorate$8([Property('expanded')], FieldsSettings.prototype, \"expanded\", void 0);\n\n  __decorate$8([Property('hasChildren')], FieldsSettings.prototype, \"hasChildren\", void 0);\n\n  __decorate$8([Property('htmlAttributes')], FieldsSettings.prototype, \"htmlAttributes\", void 0);\n\n  __decorate$8([Property('iconCss')], FieldsSettings.prototype, \"iconCss\", void 0);\n\n  __decorate$8([Property('id')], FieldsSettings.prototype, \"id\", void 0);\n\n  __decorate$8([Property('imageUrl')], FieldsSettings.prototype, \"imageUrl\", void 0);\n\n  __decorate$8([Property('isChecked')], FieldsSettings.prototype, \"isChecked\", void 0);\n\n  __decorate$8([Property('parentID')], FieldsSettings.prototype, \"parentID\", void 0);\n\n  __decorate$8([Property(null)], FieldsSettings.prototype, \"query\", void 0);\n\n  __decorate$8([Property('selectable')], FieldsSettings.prototype, \"selectable\", void 0);\n\n  __decorate$8([Property('selected')], FieldsSettings.prototype, \"selected\", void 0);\n\n  __decorate$8([Property(null)], FieldsSettings.prototype, \"tableName\", void 0);\n\n  __decorate$8([Property('text')], FieldsSettings.prototype, \"text\", void 0);\n\n  __decorate$8([Property('tooltip')], FieldsSettings.prototype, \"tooltip\", void 0);\n\n  __decorate$8([Property('navigateUrl')], FieldsSettings.prototype, \"navigateUrl\", void 0);\n\n  return FieldsSettings;\n}(ChildProperty);\n/**\r\n * Configures animation settings for the TreeView component.\r\n */\n\n\nvar ActionSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$8(ActionSettings, _super);\n\n  function ActionSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$8([Property('SlideDown')], ActionSettings.prototype, \"effect\", void 0);\n\n  __decorate$8([Property(400)], ActionSettings.prototype, \"duration\", void 0);\n\n  __decorate$8([Property('linear')], ActionSettings.prototype, \"easing\", void 0);\n\n  return ActionSettings;\n}(ChildProperty);\n/**\r\n * Configures the animation settings for expanding and collapsing nodes in TreeView.\r\n */\n\n\nvar NodeAnimationSettings =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$8(NodeAnimationSettings, _super);\n\n  function NodeAnimationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$8([Complex({\n    effect: 'SlideUp',\n    duration: 400,\n    easing: 'linear'\n  }, ActionSettings)], NodeAnimationSettings.prototype, \"collapse\", void 0);\n\n  __decorate$8([Complex({\n    effect: 'SlideDown',\n    duration: 400,\n    easing: 'linear'\n  }, ActionSettings)], NodeAnimationSettings.prototype, \"expand\", void 0);\n\n  return NodeAnimationSettings;\n}(ChildProperty);\n/**\r\n * The TreeView component is used to represent hierarchical data in a tree like structure with advanced\r\n * functions to perform edit, drag and drop, selection with check-box, and more.\r\n * ```html\r\n * <div id=\"tree\"></div>\r\n * ```\r\n * ```typescript\r\n * let treeObj: TreeView = new TreeView();\r\n * treeObj.appendTo('#tree');\r\n * ```\r\n */\n\n\nvar TreeView =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$8(TreeView, _super);\n\n  function TreeView(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.isRefreshed = false;\n    _this.preventExpand = false;\n    _this.checkedElement = [];\n    _this.disableNode = []; // eslint-disable-next-line\n\n    _this.validArr = [];\n    _this.validNodes = [];\n    _this.expandChildren = [];\n    _this.isFieldChange = false;\n    _this.changeDataSource = false;\n    _this.hasTemplate = false;\n    _this.isFirstRender = false; // Specifies whether the node is dropped or not\n\n    _this.isNodeDropped = false;\n    _this.isInteracted = false;\n    _this.isRightClick = false;\n    _this.mouseDownStatus = false;\n    return _this;\n  }\n\n  TreeView_1 = TreeView;\n  /**\r\n   * Get component name.\r\n   *\r\n   * @returns {string} - returns module name.\r\n   * @private\r\n   */\n\n  TreeView.prototype.getModuleName = function () {\n    return 'treeview';\n  };\n  /**\r\n   * Initialize the event handler\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  TreeView.prototype.preRender = function () {\n    var _this = this;\n\n    this.checkActionNodes = [];\n    this.parentNodeCheck = [];\n    this.dragStartAction = false;\n    this.isAnimate = false;\n    this.keyConfigs = {\n      escape: 'escape',\n      end: 'end',\n      enter: 'enter',\n      f2: 'f2',\n      home: 'home',\n      moveDown: 'downarrow',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      ctrlDown: 'ctrl+downarrow',\n      ctrlUp: 'ctrl+uparrow',\n      ctrlEnter: 'ctrl+enter',\n      ctrlHome: 'ctrl+home',\n      ctrlEnd: 'ctrl+end',\n      ctrlA: 'ctrl+A',\n      shiftDown: 'shift+downarrow',\n      shiftUp: 'shift+uparrow',\n      shiftEnter: 'shift+enter',\n      shiftHome: 'shift+home',\n      shiftEnd: 'shift+end',\n      csDown: 'ctrl+shift+downarrow',\n      csUp: 'ctrl+shift+uparrow',\n      csEnter: 'ctrl+shift+enter',\n      csHome: 'ctrl+shift+home',\n      csEnd: 'ctrl+shift+end',\n      space: 'space',\n      shiftSpace: 'shift+space',\n      ctrlSpace: 'ctrl+space'\n    };\n    this.listBaseOption = {\n      expandCollapse: true,\n      showIcon: true,\n      expandIconClass: EXPANDABLE,\n      ariaAttributes: treeAriaAttr,\n      expandIconPosition: 'Left',\n      itemCreated: function (e) {\n        _this.beforeNodeCreate(e);\n      },\n      enableHtmlSanitizer: this.enableHtmlSanitizer,\n      itemNavigable: this.fullRowNavigable\n    };\n    this.updateListProp(this.fields);\n    this.aniObj = new Animation({});\n    this.treeList = [];\n    this.isLoaded = false;\n    this.isInitalExpand = false;\n    this.expandChildren = [];\n    this.index = 0;\n    this.setTouchClass();\n\n    if (isNullOrUndefined(this.selectedNodes)) {\n      this.setProperties({\n        selectedNodes: []\n      }, true);\n    }\n\n    if (isNullOrUndefined(this.checkedNodes)) {\n      this.setProperties({\n        checkedNodes: []\n      }, true);\n    }\n\n    if (isNullOrUndefined(this.expandedNodes)) {\n      this.setProperties({\n        expandedNodes: []\n      }, true);\n    } else {\n      this.isInitalExpand = true;\n    }\n  };\n  /**\r\n   * Get the properties to be maintained in the persisted state.\r\n   *\r\n   * @returns {string} - returns the persisted data\r\n   * @hidden\r\n   */\n\n\n  TreeView.prototype.getPersistData = function () {\n    var keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\r\n   * To Initialize the control rendering\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  TreeView.prototype.render = function () {\n    this.initialRender = true;\n    this.initialize();\n    this.setDataBinding(false);\n    this.setDisabledMode();\n    this.setExpandOnType();\n\n    if (!this.disabled) {\n      this.setRipple();\n    }\n\n    this.wireEditingEvents(this.allowEditing);\n    this.setDragAndDrop(this.allowDragAndDrop);\n\n    if (!this.disabled) {\n      this.wireEvents();\n    }\n\n    this.initialRender = false;\n    this.renderComplete();\n  };\n\n  TreeView.prototype.initialize = function () {\n    this.element.setAttribute('role', 'tree');\n    this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n    this.setCssClass(null, this.cssClass);\n    this.setEnableRtl();\n    this.setFullRow(this.fullRowSelect);\n    this.setTextWrap();\n    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n  };\n\n  TreeView.prototype.setDisabledMode = function () {\n    if (this.disabled) {\n      this.element.classList.add(DISABLED$1);\n    } else {\n      this.element.classList.remove(DISABLED$1);\n    }\n  };\n\n  TreeView.prototype.setEnableRtl = function () {\n    (this.enableRtl ? addClass : removeClass)([this.element], RTL$1);\n  };\n\n  TreeView.prototype.setRipple = function () {\n    var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;\n    var rippleModel = {\n      selector: tempStr,\n      ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP\n    };\n    this.rippleFn = rippleEffect(this.element, rippleModel);\n    var iconModel = {\n      selector: '.' + TEXTWRAP + ' > .' + ICON,\n      isCenterRipple: true\n    };\n    this.rippleIconFn = rippleEffect(this.element, iconModel);\n  };\n\n  TreeView.prototype.setFullRow = function (isEnabled) {\n    (isEnabled ? addClass : removeClass)([this.element], FULLROWWRAP);\n  };\n\n  TreeView.prototype.setMultiSelect = function (isEnabled) {\n    var firstUl = select('.' + PARENTITEM, this.element);\n\n    if (isEnabled) {\n      firstUl.setAttribute('aria-multiselectable', 'true');\n    } else {\n      firstUl.removeAttribute('aria-multiselectable');\n    }\n  }; // eslint-disable-next-line\n\n\n  TreeView.prototype.templateComplier = function (template) {\n    if (template) {\n      this.hasTemplate = true; // eslint-disable-next-line\n\n      this.element.classList.add(INTERACTION);\n\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        } else {\n          return compile(template);\n        }\n      } catch (e) {\n        return compile(template);\n      }\n    }\n\n    this.element.classList.remove(INTERACTION);\n    return undefined;\n  };\n\n  TreeView.prototype.setDataBinding = function (changeDataSource) {\n    var _this = this;\n\n    this.treeList.push('false');\n\n    if (this.fields.dataSource instanceof DataManager) {\n      /* eslint-disable */\n      this.isOffline = this.fields.dataSource.dataSource.offline;\n\n      if (this.fields.dataSource.ready) {\n        this.fields.dataSource.ready.then(function (e) {\n          /* eslint-disable */\n          _this.isOffline = _this.fields.dataSource.dataSource.offline;\n\n          if (_this.fields.dataSource instanceof DataManager && _this.isOffline) {\n            _this.treeList.pop();\n\n            _this.treeData = e.result;\n            _this.isNumberTypeId = _this.getType();\n\n            _this.setRootData();\n\n            _this.renderItems(true);\n\n            if (_this.treeList.length === 0 && !_this.isLoaded) {\n              _this.finalize();\n            }\n          }\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      } else {\n        this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {\n          _this.treeList.pop();\n\n          _this.treeData = e.result;\n          _this.isNumberTypeId = _this.getType();\n\n          _this.setRootData();\n\n          if (changeDataSource) {\n            _this.changeDataSource = true;\n          }\n\n          _this.renderItems(true);\n\n          _this.changeDataSource = false;\n\n          if (_this.treeList.length === 0 && !_this.isLoaded) {\n            _this.finalize();\n          }\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      }\n    } else {\n      this.treeList.pop();\n\n      if (isNullOrUndefined(this.fields.dataSource)) {\n        this.rootData = this.treeData = [];\n      } else {\n        this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));\n        this.setRootData();\n      }\n\n      this.isNumberTypeId = this.getType();\n      this.renderItems(false);\n    }\n\n    if (this.treeList.length === 0 && !this.isLoaded) {\n      this.finalize();\n    }\n  };\n\n  TreeView.prototype.getQuery = function (mapper, value) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    var columns = [];\n    var query;\n\n    if (!mapper.query) {\n      query = new Query();\n      var prop = this.getActualProperties(mapper);\n\n      for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {\n        var col = _a[_i];\n\n        if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col] && col !== 'url' && columns.indexOf(mapper[col]) === -1) {\n          columns.push(mapper[col]);\n        }\n      }\n\n      query.select(columns);\n\n      if (prop.hasOwnProperty('tableName')) {\n        query.from(mapper.tableName);\n      }\n    } else {\n      query = mapper.query.clone();\n    }\n\n    ListBase.addSorting(this.sortOrder, mapper.text, query);\n\n    if (!isNullOrUndefined(value) && !isNullOrUndefined(mapper.parentID)) {\n      query.where(mapper.parentID, 'equal', this.isNumberTypeId ? parseFloat(value) : value);\n    }\n\n    return query;\n  };\n\n  TreeView.prototype.getType = function () {\n    return this.treeData[0] ? typeof getValue(this.fields.id, this.treeData[0]) === 'number' ? true : false : false;\n  };\n\n  TreeView.prototype.setRootData = function () {\n    this.dataType = this.getDataType(this.treeData, this.fields);\n\n    if (this.dataType === 1) {\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n      var rootItems = this.getChildNodes(this.treeData, undefined, true);\n\n      if (isNullOrUndefined(rootItems)) {\n        this.rootData = [];\n      } else {\n        this.rootData = rootItems;\n      }\n    } else {\n      this.rootData = this.treeData;\n    }\n  };\n\n  TreeView.prototype.renderItems = function (isSorted) {\n    /* eslint-disable */\n    this.listBaseOption.ariaAttributes.level = 1;\n    var sortedData = this.getSortedData(this.rootData);\n    this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);\n    this.element.appendChild(this.ulElement);\n    var rootNodes = this.ulElement.querySelectorAll('.e-list-item');\n\n    if (this.loadOnDemand === false) {\n      var i = 0;\n\n      while (i < rootNodes.length) {\n        this.renderChildNodes(rootNodes[i], true, null, true);\n        i++;\n      }\n    }\n\n    var parentEle = selectAll('.' + PARENTITEM, this.element);\n\n    if (parentEle.length === 1 && rootNodes && rootNodes.length !== 0 || this.loadOnDemand) {\n      this.finalizeNode(this.element);\n    }\n\n    this.parentNodeCheck = [];\n    this.parentCheckData = [];\n    this.updateCheckedStateFromDS();\n\n    if (this.autoCheck && this.showCheckBox && !this.isLoaded) {\n      this.updateParentCheckState();\n    }\n  };\n  /**\r\n   * Update the checkedNodes from datasource at initial rendering\r\n   */\n\n\n  TreeView.prototype.updateCheckedStateFromDS = function (id) {\n    this.validNodes = [];\n\n    if (this.treeData && this.showCheckBox) {\n      if (this.dataType === 1) {\n        var mapper = this.fields;\n        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n\n        for (var i = 0; i < resultData.length; i++) {\n          var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n          var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;\n\n          if (this.checkedNodes.indexOf(resultId) === -1 && !this.isLoaded) {\n            this.checkedNodes.push(resultId);\n          }\n\n          if (resultData[i][this.fields.hasChildren]) {\n            var id_1 = resultData[i][this.fields.id];\n            var childData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', id_1, false));\n\n            for (var child = 0; child < childData.length; child++) {\n              var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;\n\n              if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {\n                this.checkedNodes.push(childId);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < this.checkedNodes.length; i++) {\n          var mapper_1 = this.fields;\n          var checkState = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.id, 'equal', this.checkedNodes[i], true));\n\n          if (checkState[0] && this.autoCheck) {\n            this.getCheckedNodeDetails(mapper_1, checkState);\n            this.checkIndeterminateState(checkState[0]);\n          }\n\n          if (checkState.length > 0) {\n            var checkedId = checkState[0][this.fields.id] ? checkState[0][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n              this.validNodes.push(checkedId);\n            }\n          }\n\n          var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.parentID, 'equal', this.checkedNodes[i], true));\n\n          for (var index = 0; index < checkedData.length; index++) {\n            var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {\n              this.checkedNodes.push(checkedId);\n            }\n\n            if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n              this.validNodes.push(checkedId);\n            }\n          }\n        }\n      } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {\n        for (var index = 0; index < this.treeData.length; index++) {\n          var fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : '';\n\n          if (this.treeData[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(fieldId) === -1) {\n            this.checkedNodes.push(fieldId);\n          }\n\n          if (this.checkedNodes.indexOf(fieldId) > -1 && this.validNodes.indexOf(fieldId) === -1) {\n            this.validNodes.push(fieldId);\n          }\n\n          var childItems = getValue(this.fields.child.toString(), this.treeData[index]);\n\n          if (childItems) {\n            this.updateChildCheckState(childItems, this.treeData[index]);\n          }\n        }\n\n        this.validNodes = this.enablePersistence ? this.checkedNodes : this.validNodes;\n      }\n\n      this.setProperties({\n        checkedNodes: this.validNodes\n      }, true);\n    }\n  };\n  /**\r\n   * To check whether the list data has sub child and to change the parent check state accordingly\r\n   */\n\n\n  TreeView.prototype.getCheckedNodeDetails = function (mapper, checkNodes) {\n    var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;\n    var count = 0;\n    var element = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.id] + '\"]');\n    var parentEle = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.parentID] + '\"]');\n\n    if (!element && !parentEle) {\n      var len = this.parentNodeCheck.length;\n\n      if (this.parentNodeCheck.indexOf(id) === -1) {\n        this.parentNodeCheck.push(id);\n      }\n\n      var childNodes = this.getChildNodes(this.treeData, id);\n\n      for (var i = 0; i < childNodes.length; i++) {\n        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n        if (this.checkedNodes.indexOf(childId) !== -1) {\n          count++;\n        }\n\n        if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {\n          this.checkedNodes.push(id);\n        }\n      }\n\n      var preElement = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', id, true));\n      this.getCheckedNodeDetails(mapper, preElement);\n    } else if (parentEle) {\n      var check = select('.' + CHECK, parentEle);\n\n      if (!check) {\n        this.changeState(parentEle, 'indeterminate', null, true, true);\n      }\n    }\n  };\n  /**\r\n   * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering\r\n   */\n\n\n  TreeView.prototype.updateParentCheckState = function () {\n    var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n    var childCheckedElement;\n\n    for (var i = 0; i < indeterminate.length; i++) {\n      var node = closest(indeterminate[i], '.' + LISTITEM);\n      var nodeId = node.getAttribute('data-uid').toString();\n\n      if (this.dataType === 1) {\n        childCheckedElement = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.parentID, 'equal', nodeId, true));\n      } else {\n        childCheckedElement = this.getChildNodes(this.treeData, nodeId);\n      }\n\n      var count = 0;\n\n      if (childCheckedElement) {\n        for (var j = 0; j < childCheckedElement.length; j++) {\n          var childId = childCheckedElement[j][this.fields.id].toString();\n\n          if (this.checkedNodes.indexOf(childId) !== -1) {\n            count++;\n          }\n        }\n\n        if (count === childCheckedElement.length) {\n          var nodeCheck = node.getAttribute('data-uid');\n\n          if (this.checkedNodes.indexOf(nodeCheck) === -1) {\n            this.checkedNodes.push(nodeCheck);\n          }\n\n          this.changeState(node, 'check', null, true, true);\n        } else if (count === 0 && this.checkedNodes.length === 0) {\n          this.changeState(node, 'uncheck', null, true, true);\n        }\n      }\n    }\n  };\n  /**\r\n   * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM\r\n   */\n\n\n  TreeView.prototype.checkIndeterminateState = function (data) {\n    var element;\n\n    if (this.dataType === 1) {\n      element = this.element.querySelector('[data-uid=\"' + data[this.fields.parentID] + '\"]');\n    } else {\n      element = this.element.querySelector('[data-uid=\"' + data[this.fields.id] + '\"]');\n    }\n\n    if (element) {\n      var ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');\n\n      if (ariaChecked !== 'true') {\n        this.changeState(element, 'indeterminate', null, true, true);\n      }\n    } else if (this.dataType === 2) {\n      var len = this.parentNodeCheck.length;\n\n      if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {\n        this.parentNodeCheck.push(data[this.fields.id].toString());\n      }\n    }\n  };\n  /**\r\n   * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering\r\n   */\n\n\n  TreeView.prototype.updateChildCheckState = function (childItems, treeData) {\n    var count = 0;\n    var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n\n    for (var index = 0; index < childItems.length; index++) {\n      var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n\n      if (childItems[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(checkedChild) === -1) {\n        this.checkedNodes.push(checkedChild);\n      }\n\n      if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {\n        this.checkedNodes.push(checkedChild);\n      }\n\n      if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n        count++;\n      }\n\n      if (this.checkedNodes.indexOf(checkedChild) > -1 && this.validNodes.indexOf(checkedChild) === -1) {\n        this.validNodes.push(checkedChild);\n      }\n\n      var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n\n      if (subChildItems && subChildItems.length) {\n        if (this.parentCheckData.indexOf(treeData) === -1) this.parentCheckData.push(treeData);\n        this.updateChildCheckState(subChildItems, childItems[index]);\n      }\n\n      if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {\n        this.checkedNodes.push(checkedParent);\n      }\n    }\n\n    if (count !== 0 && this.autoCheck) {\n      this.checkIndeterminateState(treeData);\n\n      for (var len = 0; len < this.parentCheckData.length; len++) {\n        if (treeData !== this.parentCheckData[len] && this.parentCheckData[len]) {\n          this.checkIndeterminateState(this.parentCheckData[len]);\n        }\n      }\n    }\n\n    this.parentCheckData = [];\n  };\n\n  TreeView.prototype.beforeNodeCreate = function (e) {\n    if (this.showCheckBox) {\n      var checkboxEle = createCheckBox(this.createElement, true, {\n        cssClass: this.touchClass\n      });\n      checkboxEle.setAttribute('role', 'checkbox');\n      checkboxEle.setAttribute('aria-label', 'checkbox');\n      var icon = select('div.' + ICON, e.item);\n      var id = e.item.getAttribute('data-uid');\n      e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNullOrUndefined(icon) ? 0 : 1]);\n      var checkValue = getValue(e.fields.isChecked, e.curData);\n\n      if (this.checkedNodes.indexOf(id) > -1) {\n        select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n        checkboxEle.setAttribute('aria-checked', 'true');\n        this.addCheck(e.item);\n      } else if (!isNullOrUndefined(checkValue) && checkValue.toString() === 'true') {\n        select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n        checkboxEle.setAttribute('aria-checked', 'true');\n        this.addCheck(e.item);\n      } else {\n        checkboxEle.setAttribute('aria-checked', 'false');\n      }\n\n      var frame = select('.' + CHECKBOXFRAME, checkboxEle);\n      EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);\n      EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);\n    }\n\n    if (this.fullRowSelect) {\n      this.createFullRow(e.item);\n    }\n\n    if (this.allowMultiSelection && !e.item.classList.contains(SELECTED$1)) {\n      e.item.setAttribute('aria-selected', 'false');\n    }\n\n    var fields = e.fields;\n    this.addActionClass(e, fields.selected, SELECTED$1);\n    this.addActionClass(e, fields.expanded, EXPANDED);\n    e.item.setAttribute(\"tabindex\", \"-1\");\n    EventHandler.add(e.item, 'focus', this.focusIn, this);\n\n    if (!isNullOrUndefined(this.nodeTemplateFn)) {\n      var textEle = e.item.querySelector('.' + LISTTEXT);\n      var dataId = e.item.getAttribute('data-uid');\n      textEle.innerHTML = '';\n      this.renderNodeTemplate(e.curData, textEle, dataId);\n    }\n\n    var eventArgs = {\n      node: e.item,\n      nodeData: e.curData,\n      text: e.text\n    };\n\n    if (!this.isRefreshed) {\n      this.trigger('drawNode', eventArgs);\n\n      if (e.curData[this.fields.selectable] === false && !this.showCheckBox) {\n        e.item.classList.add(PREVENTSELECT);\n        e.item.firstElementChild.setAttribute('style', 'cursor: not-allowed');\n      }\n    }\n  };\n\n  TreeView.prototype.frameMouseHandler = function (e) {\n    var rippleSpan = select('.' + CHECKBOXRIPPLE, e.target.parentElement);\n    rippleMouseHandler(e, rippleSpan);\n  };\n\n  TreeView.prototype.addActionClass = function (e, action, cssClass) {\n    var data = e.curData;\n    var actionValue = getValue(action, data);\n\n    if (!isNullOrUndefined(actionValue) && actionValue.toString() !== 'false') {\n      e.item.classList.add(cssClass);\n    }\n  };\n\n  TreeView.prototype.getDataType = function (ds, mapper) {\n    if (this.fields.dataSource instanceof DataManager) {\n      for (var i = 0; i < ds.length; i++) {\n        if (this.isOffline) {\n          if (typeof mapper.child === 'string' && isNullOrUndefined(getValue(mapper.child, ds[i])) && !isNullOrUndefined(getValue(mapper.parentID, ds[i]))) {\n            return 1;\n          }\n        } else if (typeof mapper.child === 'string' && isNullOrUndefined(getValue(mapper.child, ds[i]))) {\n          return 1;\n        }\n      }\n\n      return 2;\n    }\n\n    for (var i = 0, len = ds.length; i < len; i++) {\n      if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, ds[i]))) {\n        return 2;\n      }\n\n      if (!isNullOrUndefined(getValue(mapper.parentID, ds[i])) || !isNullOrUndefined(getValue(mapper.hasChildren, ds[i]))) {\n        return 1;\n      }\n    }\n\n    return 1;\n  };\n\n  TreeView.prototype.getGroupedData = function (dataSource, groupBy) {\n    var cusQuery = new Query().group(groupBy);\n    var ds = ListBase.getDataSource(dataSource, cusQuery);\n    var grpItem = [];\n\n    for (var j = 0; j < ds.length; j++) {\n      var itemObj = ds[j].items;\n      grpItem.push(itemObj);\n    }\n\n    return grpItem;\n  };\n\n  TreeView.prototype.getSortedData = function (list) {\n    if (list && this.sortOrder !== 'None') {\n      list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));\n    }\n\n    return list;\n  };\n\n  TreeView.prototype.finalizeNode = function (element) {\n    var iNodes = selectAll('.' + IMAGE, element);\n\n    for (var k = 0; k < iNodes.length; k++) {\n      iNodes[k].setAttribute('alt', IMAGE);\n    }\n\n    if (this.isLoaded) {\n      var sNodes = selectAll('.' + SELECTED$1, element);\n\n      for (var i = 0; i < sNodes.length; i++) {\n        this.selectNode(sNodes[i], null);\n        break;\n      }\n\n      removeClass(sNodes, SELECTED$1);\n    }\n\n    var cNodes = selectAll('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);\n\n    for (var j = 0; j < cNodes.length; j++) {\n      var icon = select('div.' + ICON, cNodes[j]);\n\n      if (icon && icon.classList.contains(EXPANDABLE)) {\n        this.disableExpandAttr(cNodes[j]);\n      }\n    }\n\n    var eNodes = selectAll('.' + EXPANDED, element);\n\n    if (!this.isInitalExpand) {\n      for (var i = 0; i < eNodes.length; i++) {\n        this.renderChildNodes(eNodes[i]);\n      }\n    }\n\n    removeClass(eNodes, EXPANDED);\n    this.updateList();\n\n    if (this.isLoaded) {\n      this.updateCheckedProp();\n    }\n  };\n\n  TreeView.prototype.updateCheckedProp = function () {\n    if (this.showCheckBox) {\n      var nodes = [].concat([], this.checkedNodes);\n      this.setProperties({\n        checkedNodes: nodes\n      }, true);\n    }\n  };\n\n  TreeView.prototype.ensureIndeterminate = function () {\n    if (this.autoCheck) {\n      var liElement = selectAll('li', this.element);\n      var ulElement = void 0;\n\n      for (var i = 0; i < liElement.length; i++) {\n        if (liElement[i].classList.contains(LISTITEM)) {\n          ulElement = select('.' + PARENTITEM, liElement[i]);\n\n          if (ulElement) {\n            this.ensureParentCheckState(liElement[i]);\n          } else {\n            this.ensureChildCheckState(liElement[i]);\n          }\n        }\n      }\n    } else {\n      var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n\n      for (var i = 0; i < indeterminate.length; i++) {\n        indeterminate[i].classList.remove(INDETERMINATE);\n      }\n    }\n  };\n\n  TreeView.prototype.ensureParentCheckState = function (element) {\n    if (!isNullOrUndefined(element)) {\n      if (element.classList.contains(ROOT)) {\n        return;\n      }\n\n      var ulElement = element;\n\n      if (element.classList.contains(LISTITEM)) {\n        ulElement = select('.' + PARENTITEM, element);\n      }\n\n      var checkedNodes = selectAll('.' + CHECK, ulElement);\n      var indeterminateNodes = selectAll('.' + INDETERMINATE, ulElement);\n      var nodes = selectAll('.' + LISTITEM, ulElement);\n      var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];\n\n      if (nodes.length === checkedNodes.length) {\n        this.changeState(checkBoxEle, 'check', null, true, true);\n      } else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {\n        this.changeState(checkBoxEle, 'indeterminate', null, true, true);\n      } else if (checkedNodes.length === 0) {\n        this.changeState(checkBoxEle, 'uncheck', null, true, true);\n      }\n\n      var parentUL = closest(element, '.' + PARENTITEM);\n\n      if (!isNullOrUndefined(parentUL)) {\n        var currentParent = closest(parentUL, '.' + LISTITEM);\n        this.ensureParentCheckState(currentParent);\n      }\n    }\n  };\n\n  TreeView.prototype.ensureChildCheckState = function (element, e) {\n    if (!isNullOrUndefined(element)) {\n      var childElement = select('.' + PARENTITEM, element);\n      var checkBoxes = void 0;\n\n      if (!isNullOrUndefined(childElement)) {\n        checkBoxes = selectAll('.' + CHECKBOXWRAP, childElement);\n        var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n        var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);\n        var childCheck = childElement.querySelectorAll('li');\n        var expandState = childElement.parentElement.getAttribute('aria-expanded');\n        var checkedState = void 0;\n\n        for (var index = 0; index < checkBoxes.length; index++) {\n          var childId = childCheck[index].getAttribute('data-uid');\n\n          if (!isNullOrUndefined(this.currentLoadData) && !isNullOrUndefined(getValue(this.fields.isChecked, this.currentLoadData[index]))) {\n            checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';\n\n            if (this.ele !== -1) {\n              checkedState = isChecked ? 'check' : 'uncheck';\n            }\n\n            if (checkedState === 'uncheck' && !isUndefined(this.parentNodeCheck) && this.autoCheck && this.parentNodeCheck.indexOf(childId) !== -1) {\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n              checkedState = 'indeterminate';\n            }\n          } else {\n            var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n\n            if (isChecked) {\n              checkedState = 'check';\n            } else if (isNodeChecked && !this.isLoaded) {\n              checkedState = 'check';\n            } else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {\n              checkedState = 'check';\n            } else if (childCheck[index].classList.contains(CHILD) && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {\n              checkedState = 'indeterminate';\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n            } else if (this.dataType === 1 && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {\n              checkedState = 'indeterminate';\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n            } else {\n              checkedState = 'uncheck';\n            }\n          }\n\n          this.changeState(checkBoxes[index], checkedState, e, true, true);\n        }\n      }\n\n      if (this.autoCheck && this.isLoaded) {\n        this.updateParentCheckState();\n      }\n    }\n  };\n\n  TreeView.prototype.doCheckBoxAction = function (nodes, doCheck) {\n    var li = selectAll('.' + LISTITEM, this.element);\n\n    if (!isNullOrUndefined(nodes)) {\n      for (var len = nodes.length; len >= 0; len--) {\n        var liEle = void 0;\n\n        if (nodes.length === 1) {\n          liEle = this.getElement(nodes[len - 1]);\n        } else {\n          liEle = this.getElement(nodes[len]);\n        }\n\n        if (isNullOrUndefined(liEle)) {\n          var node = void 0;\n          node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;\n\n          if (node !== '' && doCheck && node) {\n            this.setValidCheckedNode(node);\n            this.dynamicCheckState(node, doCheck);\n          } else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);\n            var childItems = this.getChildNodes(this.treeData, node);\n\n            if (childItems) {\n              for (var i = 0; i < childItems.length; i++) {\n                var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n\n                if (this.checkedNodes.indexOf(id) !== -1) {\n                  this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                  var ele = this.element.querySelector('[data-uid=\"' + id + '\"]');\n\n                  if (ele) {\n                    this.changeState(ele, 'uncheck', null);\n                  }\n                }\n              }\n\n              if (this.parentNodeCheck.indexOf(node) !== -1) {\n                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);\n              }\n            }\n\n            if (node) {\n              this.dynamicCheckState(node, doCheck);\n            }\n\n            this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n          }\n\n          continue;\n        }\n\n        var checkBox = select('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);\n        this.validateCheckNode(checkBox, !doCheck, liEle, null);\n      }\n    } else {\n      var checkBoxes = selectAll('.' + CHECKBOXWRAP, this.element);\n\n      if (this.loadOnDemand) {\n        for (var index = 0; index < checkBoxes.length; index++) {\n          this.updateFieldChecked(checkBoxes[index], doCheck);\n          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);\n        }\n      } else {\n        for (var index = 0; index < checkBoxes.length; index++) {\n          this.updateFieldChecked(checkBoxes[index], doCheck);\n          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');\n        }\n      }\n    }\n\n    if (nodes) {\n      for (var j = 0; j < nodes.length; j++) {\n        var node = nodes[j] ? nodes[j].toString() : '';\n\n        if (!doCheck) {\n          this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n        }\n      }\n    }\n\n    if (this.autoCheck) {\n      this.updateParentCheckState();\n    }\n  };\n\n  TreeView.prototype.updateFieldChecked = function (checkbox, doCheck) {\n    var currLi = closest(checkbox, '.' + LISTITEM);\n    var id = currLi.getAttribute('data-uid');\n    var nodeDetails = this.getNodeData(currLi);\n\n    if (nodeDetails.isChecked === 'true' && !doCheck) {\n      this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n    }\n  };\n  /**\r\n   * Changes the parent and child  check state while changing the checkedNodes via setmodel\r\n   */\n\n\n  TreeView.prototype.dynamicCheckState = function (node, doCheck) {\n    if (this.dataType === 1) {\n      var count = 0;\n      var resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, 'equal', node, true));\n\n      if (resultId[0]) {\n        var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;\n        var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;\n        var parentElement = this.element.querySelector('[data-uid=\"' + parent_1 + '\"]');\n        var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n        var check = parentElement ? select('.' + CHECK, parentElement) : null;\n        var element = this.element.querySelector('[data-uid=\"' + id + '\"]');\n        var childNodes = this.getChildNodes(this.treeData, parent_1);\n\n        if (childNodes) {\n          for (var i = 0; i < childNodes.length; i++) {\n            var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(childId) !== -1) {\n              count++;\n            }\n          }\n        }\n\n        if (this.checkedNodes.indexOf(node) !== -1 && parentElement && id === node && this.autoCheck) {\n          this.changeState(parentElement, 'indeterminate', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && element && id === node && !doCheck) {\n          this.changeState(element, 'uncheck', null);\n        } else if (this.checkedNodes.indexOf(node) !== -1 && element && id === node && doCheck) {\n          this.changeState(element, 'check', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count !== 0) {\n          this.changeState(parentElement, 'indeterminate', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count === 0) {\n          this.changeState(parentElement, 'uncheck', null);\n        } else if (!element && !parentElement && id === node && this.autoCheck) {\n          this.updateIndeterminate(node, doCheck);\n        }\n      }\n    } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {\n      var id = void 0;\n      var parentElement = void 0;\n      var check = void 0;\n\n      for (var i = 0; i < this.treeData.length; i++) {\n        id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : '';\n        parentElement = this.element.querySelector('[data-uid=\"' + id + '\"]');\n        check = parentElement ? select('.' + CHECK, parentElement) : null;\n\n        if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {\n          this.changeState(parentElement, 'uncheck', null);\n        }\n\n        var subChild = getValue(this.fields.child.toString(), this.treeData[i]);\n\n        if (subChild) {\n          this.updateChildIndeterminate(subChild, id, node, doCheck, id);\n        }\n      }\n    }\n  };\n  /**\r\n   * updates the parent and child  check state while changing the checkedNodes via setmodel for listData\r\n   */\n\n\n  TreeView.prototype.updateIndeterminate = function (node, doCheck) {\n    var indeterminateData = this.getTreeData(node);\n    var count = 0;\n    var parent;\n\n    if (this.dataType === 1) {\n      parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;\n    }\n\n    var childNodes = this.getChildNodes(this.treeData, parent);\n\n    if (childNodes) {\n      for (var i = 0; i < childNodes.length; i++) {\n        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n        if (this.checkedNodes.indexOf(childId) !== -1) {\n          count++;\n        }\n      }\n    }\n\n    var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n\n    if (parentElement && doCheck) {\n      this.changeState(parentElement, 'indeterminate', null);\n    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n      this.changeState(parentElement, 'indeterminate', null);\n    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {\n      this.changeState(parentElement, 'uncheck', null);\n    } else if (!parentElement) {\n      if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {\n        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);\n      } else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {\n        this.parentNodeCheck.push(parent);\n      } else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n        this.parentNodeCheck.push(parent);\n      }\n\n      this.updateIndeterminate(parent, doCheck);\n\n      if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {\n        this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);\n      }\n    }\n  };\n  /**\r\n   * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data\r\n   */\n\n\n  TreeView.prototype.updateChildIndeterminate = function (subChild, parent, node, doCheck, child) {\n    var count = 0;\n\n    for (var j = 0; j < subChild.length; j++) {\n      var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';\n\n      if (this.checkedNodes.indexOf(subId) !== -1) {\n        count++;\n      }\n\n      var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n      var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n      var check = parentElement ? select('.' + CHECK, parentElement) : null;\n      var element = this.element.querySelector('[data-uid=\"' + subId + '\"]');\n      var childElementCheck = element ? select('.' + CHECK, element) : null;\n\n      if (this.checkedNodes.indexOf(node) !== -1 && parentElement && subId === node && this.autoCheck) {\n        this.changeState(parentElement, 'indeterminate', null);\n      } else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && subId === node && !doCheck) {\n        if (this.autoCheck) {\n          this.changeState(parentElement, 'uncheck', null);\n        } else {\n          if (count !== 0) {\n            this.changeState(parentElement, 'indeterminate', null);\n          } else {\n            this.changeState(parentElement, 'uncheck', null);\n          }\n        }\n      } else if (this.checkedNodes.indexOf(node) === -1 && element && subId === node && !doCheck) {\n        this.changeState(element, 'uncheck', null);\n      } else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && subId === node && this.autoCheck && count === 0 && !doCheck) {\n        indeterminate.classList.remove(INDETERMINATE);\n      } else if (this.checkedNodes.indexOf(node) === -1 && !element && check && subId === node && count === 0) {\n        this.changeState(parentElement, 'uncheck', null);\n      } else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {\n        this.changeState(element, 'uncheck', null);\n      } else if (!element && !parentElement && subId === node || this.parentNodeCheck.indexOf(parent) !== -1 && this.autoCheck) {\n        var childElement = this.element.querySelector('[data-uid=\"' + child + '\"]');\n\n        if (doCheck && count !== 0) {\n          this.changeState(childElement, 'indeterminate', null);\n        } else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {\n          this.checkedNodes.push(parent);\n        } else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {\n          this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));\n        }\n\n        if (this.parentNodeCheck.indexOf(parent) === -1) {\n          this.parentNodeCheck.push(parent);\n        }\n      }\n\n      var innerChild = getValue(this.fields.child.toString(), subChild[j]);\n\n      if (innerChild) {\n        this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);\n      }\n    }\n  };\n\n  TreeView.prototype.changeState = function (wrapper, state, e, isPrevent, isAdd, doCheck) {\n    var _this = this;\n\n    var eventArgs;\n    var currLi = closest(wrapper, '.' + LISTITEM);\n\n    if (wrapper === currLi) {\n      wrapper = select('.' + CHECKBOXWRAP, currLi);\n    }\n\n    if (!isPrevent) {\n      this.checkActionNodes = [];\n      eventArgs = this.getCheckEvent(currLi, state, e);\n      this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);\n        }\n      });\n    } else {\n      this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);\n    }\n  };\n\n  TreeView.prototype.nodeCheckAction = function (wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {\n    var ariaState;\n    var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n\n    if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n      frameSpan.classList.remove(INDETERMINATE);\n      frameSpan.classList.add(CHECK);\n      this.addCheck(currLi);\n      ariaState = 'true';\n    } else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\n      removeClass([frameSpan], [CHECK, INDETERMINATE]);\n      this.removeCheck(currLi);\n      ariaState = 'false';\n    } else if (state === 'indeterminate' && this.autoCheck) {\n      frameSpan.classList.remove(CHECK);\n      frameSpan.classList.add(INDETERMINATE);\n      this.removeCheck(currLi);\n      ariaState = 'mixed';\n    }\n\n    ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\n\n    if (!isNullOrUndefined(ariaState)) {\n      wrapper.setAttribute('aria-checked', ariaState);\n    }\n\n    if (isAdd) {\n      var data = [].concat([], this.checkActionNodes);\n      eventArgs = this.getCheckEvent(currLi, state, e);\n\n      if (isUndefined(isPrevent)) {\n        eventArgs.data = data;\n      }\n    }\n\n    if (doCheck !== undefined) {\n      this.ensureStateChange(currLi, doCheck);\n    }\n\n    if (!isPrevent) {\n      if (!isNullOrUndefined(ariaState)) {\n        wrapper.setAttribute('aria-checked', ariaState);\n        eventArgs.data[0].checked = ariaState;\n        this.trigger('nodeChecked', eventArgs);\n        this.checkActionNodes = [];\n      }\n    }\n  };\n\n  TreeView.prototype.addCheck = function (liEle) {\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNullOrUndefined(id) && this.checkedNodes.indexOf(id) === -1) {\n      this.checkedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.removeCheck = function (liEle) {\n    var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.checkedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.getCheckEvent = function (currLi, action, e) {\n    this.checkActionNodes.push(this.getNodeData(currLi));\n    var nodeData = this.checkActionNodes;\n    return {\n      action: action,\n      cancel: false,\n      isInteracted: isNullOrUndefined(e) ? false : true,\n      node: currLi,\n      data: nodeData\n    };\n  };\n\n  TreeView.prototype.finalize = function () {\n    var firstUl = select('.' + PARENTITEM, this.element);\n\n    if (!isNullOrUndefined(firstUl)) {\n      firstUl.setAttribute('role', treeAriaAttr.treeRole);\n      this.setMultiSelect(this.allowMultiSelection);\n      var firstNode = select('.' + LISTITEM, this.element);\n\n      if (firstNode) {\n        firstNode.setAttribute('tabindex', '0');\n        this.updateIdAttr(null, firstNode);\n      }\n\n      if (this.allowTextWrap) {\n        this.updateWrap();\n      }\n\n      this.renderReactTemplates();\n      this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;\n      this.doExpandAction();\n    }\n  };\n\n  TreeView.prototype.setTextWrap = function () {\n    (this.allowTextWrap ? addClass : removeClass)([this.element], LISTWRAP);\n\n    if (Browser.isIE) {\n      (this.allowTextWrap ? addClass : removeClass)([this.element], IELISTWRAP);\n    }\n  };\n\n  TreeView.prototype.updateWrap = function (ulEle) {\n    if (!this.fullRowSelect) {\n      return;\n    }\n\n    var liEle = ulEle ? selectAll('.' + LISTITEM, ulEle) : this.liList;\n    var length = liEle.length;\n\n    for (var i = 0; i < length; i++) {\n      this.calculateWrap(liEle[i]);\n    }\n  };\n\n  TreeView.prototype.calculateWrap = function (liEle) {\n    var element = select('.' + FULLROW, liEle);\n\n    if (element && element.nextElementSibling) {\n      element.style.height = this.allowTextWrap ? element.nextElementSibling.offsetHeight + 'px' : '';\n    }\n  };\n\n  TreeView.prototype.doExpandAction = function () {\n    var eUids = this.expandedNodes;\n\n    if (this.isInitalExpand && eUids.length > 0) {\n      this.setProperties({\n        expandedNodes: []\n      }, true);\n      /* eslint-disable */\n\n      if (this.fields.dataSource instanceof DataManager) {\n        this.expandGivenNodes(eUids);\n      } else {\n        for (var i = 0; i < eUids.length; i++) {\n          var eNode = select('[data-uid=\"' + eUids[i] + '\"]', this.element);\n\n          if (!isNullOrUndefined(eNode)) {\n            var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n\n            if (!isNullOrUndefined(icon)) {\n              this.expandAction(eNode, icon, null);\n            }\n          } else {\n            if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {\n              this.expandChildren.push(eUids[i].toString());\n            }\n\n            continue;\n          }\n        }\n\n        this.afterFinalized();\n      }\n    } else {\n      this.afterFinalized();\n    }\n  };\n\n  TreeView.prototype.expandGivenNodes = function (arr) {\n    var proxy = this;\n    this.expandCallback(arr[this.index], function () {\n      proxy.index++;\n\n      if (proxy.index < arr.length) {\n        proxy.expandGivenNodes(arr);\n      } else {\n        proxy.afterFinalized();\n      }\n    });\n  };\n\n  TreeView.prototype.expandCallback = function (eUid, callback) {\n    var eNode = select('[data-uid=\"' + eUid + '\"]', this.element);\n\n    if (!isNullOrUndefined(eNode)) {\n      var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n\n      if (!isNullOrUndefined(icon)) {\n        this.expandAction(eNode, icon, null, false, callback);\n      } else {\n        callback();\n      }\n    } else {\n      callback();\n    }\n  };\n\n  TreeView.prototype.afterFinalized = function () {\n    this.doSelectionAction();\n    this.updateCheckedProp();\n    this.isAnimate = true;\n    this.isInitalExpand = false;\n\n    if ((!this.isLoaded || this.isFieldChange) && !this.isNodeDropped) {\n      var eventArgs = {\n        data: this.treeData\n      };\n      this.trigger('dataBound', eventArgs);\n    }\n\n    this.isLoaded = true;\n    this.isNodeDropped = false;\n  };\n\n  TreeView.prototype.doSelectionAction = function () {\n    var sNodes = selectAll('.' + SELECTED$1, this.element);\n    var sUids = this.selectedNodes;\n\n    if (sUids.length > 0) {\n      this.setProperties({\n        selectedNodes: []\n      }, true);\n\n      for (var i = 0; i < sUids.length; i++) {\n        var sNode = select('[data-uid=\"' + sUids[i] + '\"]', this.element);\n\n        if (sNode && !sNode.classList.contains('e-active')) {\n          this.selectNode(sNode, null, true);\n        } else {\n          this.selectedNodes.push(sUids[i]);\n        }\n\n        if (!this.allowMultiSelection) {\n          break;\n        }\n      }\n    } else {\n      this.selectGivenNodes(sNodes);\n    }\n\n    removeClass(sNodes, SELECTED$1);\n  };\n\n  TreeView.prototype.selectGivenNodes = function (sNodes) {\n    for (var i = 0; i < sNodes.length; i++) {\n      if (!sNodes[i].classList.contains('e-disable')) {\n        this.selectNode(sNodes[i], null, true);\n      }\n\n      if (!this.allowMultiSelection) {\n        break;\n      }\n    }\n  };\n\n  TreeView.prototype.clickHandler = function (event) {\n    var target = Browser.isDevice && !Browser.isIos ? document.elementFromPoint(event.originalEvent.changedTouches[0].clientX, event.originalEvent.changedTouches[0].clientY) : event.originalEvent.target;\n    EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);\n\n    if (!target || this.dragStartAction) {\n      return;\n    } else {\n      var classList$$1 = target.classList;\n      var li = closest(target, '.' + LISTITEM);\n\n      if (!li || li.classList.contains(PREVENTSELECT) && !(classList$$1.contains(EXPANDABLE) || classList$$1.contains(COLLAPSIBLE))) {\n        return;\n      } else if (event.originalEvent.which !== 3) {\n        var rippleElement = select('.' + RIPPLEELMENT, li);\n        var rippleIcons = select('.' + ICON, li);\n        this.removeHover();\n        this.setFocusElement(li);\n\n        if (this.showCheckBox && !li.classList.contains('e-disable')) {\n          var checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n\n          if (!isNullOrUndefined(checkWrapper)) {\n            var checkElement = select('.' + CHECKBOXFRAME, checkWrapper);\n            this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);\n            this.triggerClickEvent(event.originalEvent, li);\n            return;\n          }\n        }\n\n        if (classList$$1.contains(EXPANDABLE)) {\n          this.expandAction(li, target, event);\n        } else if (classList$$1.contains(COLLAPSIBLE)) {\n          this.collapseNode(li, target, event);\n        } else if (rippleElement && rippleIcons) {\n          if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {\n            this.expandAction(li, rippleIcons, event);\n          } else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {\n            this.collapseNode(li, rippleIcons, event);\n          } else if (!classList$$1.contains(PARENTITEM) && !classList$$1.contains(LISTITEM)) {\n            this.toggleSelect(li, event.originalEvent, false);\n          }\n        } else {\n          if (!classList$$1.contains(PARENTITEM) && !classList$$1.contains(LISTITEM)) {\n            this.toggleSelect(li, event.originalEvent, false);\n          }\n        }\n      }\n\n      if (event.originalEvent.which === 3) {\n        this.isRightClick = true;\n      }\n\n      this.triggerClickEvent(event.originalEvent, li);\n    }\n  };\n\n  TreeView.prototype.nodeCheckedEvent = function (wrapper, isCheck, e) {\n    var currLi = closest(wrapper, '.' + LISTITEM);\n    var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);\n    eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);\n    this.trigger('nodeChecked', eventArgs);\n  };\n\n  TreeView.prototype.triggerClickEvent = function (e, li) {\n    var eventArgs = {\n      event: e,\n      node: li\n    };\n    this.trigger('nodeClicked', eventArgs);\n  };\n\n  TreeView.prototype.expandNode = function (currLi, icon, loaded) {\n    var _this = this;\n\n    this.renderReactTemplates();\n\n    if (icon.classList.contains(LOAD)) {\n      this.hideSpinner(icon);\n    }\n\n    if (!this.initialRender) {\n      icon.classList.add('interaction');\n    }\n\n    if (loaded !== true || loaded === true && currLi.classList.contains('e-expanded')) {\n      if (this.preventExpand !== true) {\n        removeClass([icon], EXPANDABLE);\n        addClass([icon], COLLAPSIBLE);\n        var start_1 = 0;\n        var end_1 = 0;\n        var proxy_1 = this;\n        var ul_1 = select('.' + PARENTITEM, currLi);\n        var liEle_1 = currLi;\n        this.setHeight(liEle_1, ul_1);\n        var activeElement_1 = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n\n        if (this.isAnimate && !this.isRefreshed) {\n          this.aniObj.animate(ul_1, {\n            name: this.animation.expand.effect,\n            duration: this.animation.expand.duration,\n            timingFunction: this.animation.expand.easing,\n            begin: function (args) {\n              liEle_1.style.overflow = 'hidden';\n\n              if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);\n              }\n\n              start_1 = liEle_1.offsetHeight;\n              end_1 = select('.' + TEXTWRAP, currLi).offsetHeight;\n            },\n            progress: function (args) {\n              args.element.style.display = 'block';\n              proxy_1.animateHeight(args, start_1, end_1);\n            },\n            end: function (args) {\n              args.element.style.display = 'block';\n\n              if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);\n              }\n\n              _this.expandedNode(liEle_1, ul_1, icon);\n            }\n          });\n        } else {\n          this.expandedNode(liEle_1, ul_1, icon);\n        }\n      }\n    } else {\n      var ul = select('.' + PARENTITEM, currLi);\n      ul.style.display = 'none';\n\n      if (this.fields.dataSource instanceof DataManager === true) {\n        this.preventExpand = false;\n      }\n    }\n\n    if (this.initialRender) {\n      icon.classList.add('interaction');\n    }\n  };\n\n  TreeView.prototype.expandedNode = function (currLi, ul, icon) {\n    ul.style.display = 'block';\n    currLi.style.display = 'block';\n    currLi.style.overflow = '';\n    currLi.style.height = '';\n    removeClass([icon], PROCESS);\n    this.addExpand(currLi);\n\n    if (this.allowTextWrap && this.isLoaded && this.isFirstRender) {\n      this.updateWrap(currLi);\n      this.isFirstRender = false;\n    }\n\n    if (this.isLoaded && this.expandArgs && !this.isRefreshed) {\n      this.expandArgs = this.getExpandEvent(currLi, null);\n      this.expandArgs.isInteracted = this.isInteracted;\n      this.trigger('nodeExpanded', this.expandArgs);\n    }\n  };\n\n  TreeView.prototype.addExpand = function (liEle) {\n    liEle.setAttribute('aria-expanded', 'true');\n    removeClass([liEle], NODECOLLAPSED);\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNullOrUndefined(id) && this.expandedNodes.indexOf(id) === -1) {\n      this.expandedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.collapseNode = function (currLi, icon, e) {\n    var _this = this;\n\n    if (icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      addClass([icon], PROCESS);\n    }\n\n    var colArgs;\n\n    if (this.isLoaded) {\n      colArgs = this.getExpandEvent(currLi, e);\n      this.isInteracted = colArgs.isInteracted;\n      this.trigger('nodeCollapsing', colArgs, function (observedArgs) {\n        if (observedArgs.cancel) {\n          removeClass([icon], PROCESS);\n        } else {\n          _this.nodeCollapseAction(currLi, icon, observedArgs);\n        }\n      });\n    } else {\n      this.nodeCollapseAction(currLi, icon, colArgs);\n    }\n  };\n\n  TreeView.prototype.nodeCollapseAction = function (currLi, icon, colArgs) {\n    var _this = this;\n\n    removeClass([icon], COLLAPSIBLE);\n    addClass([icon], EXPANDABLE);\n    var start = 0;\n    var end = 0;\n    var proxy = this;\n    var ul = select('.' + PARENTITEM, currLi);\n    var liEle = currLi;\n    var activeElement = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n\n    if (this.isAnimate) {\n      this.aniObj.animate(ul, {\n        name: this.animation.collapse.effect,\n        duration: this.animation.collapse.duration,\n        timingFunction: this.animation.collapse.easing,\n        begin: function (args) {\n          liEle.style.overflow = 'hidden';\n\n          if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n            activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\n          }\n\n          start = select('.' + TEXTWRAP, currLi).offsetHeight;\n          end = liEle.offsetHeight;\n        },\n        progress: function (args) {\n          proxy.animateHeight(args, start, end);\n        },\n        end: function (args) {\n          args.element.style.display = 'none';\n\n          if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n            activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\n          }\n\n          _this.collapsedNode(liEle, ul, icon, colArgs);\n        }\n      });\n    } else {\n      this.collapsedNode(liEle, ul, icon, colArgs);\n    }\n  };\n\n  TreeView.prototype.collapsedNode = function (liEle, ul, icon, colArgs) {\n    ul.style.display = 'none';\n    liEle.style.overflow = '';\n    liEle.style.height = '';\n    removeClass([icon], PROCESS);\n    this.removeExpand(liEle);\n\n    if (this.isLoaded) {\n      colArgs = this.getExpandEvent(liEle, null);\n      colArgs.isInteracted = this.isInteracted;\n      this.trigger('nodeCollapsed', colArgs);\n    }\n  };\n\n  TreeView.prototype.removeExpand = function (liEle, toRemove) {\n    if (toRemove) {\n      liEle.removeAttribute('aria-expanded');\n    } else {\n      this.disableExpandAttr(liEle);\n    }\n\n    var index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.expandedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.disableExpandAttr = function (liEle) {\n    liEle.setAttribute('aria-expanded', 'false');\n    addClass([liEle], NODECOLLAPSED);\n  };\n\n  TreeView.prototype.setHeight = function (currLi, ul) {\n    ul.style.display = 'block';\n    ul.style.visibility = 'hidden';\n    currLi.style.height = currLi.offsetHeight + 'px';\n    ul.style.display = 'none';\n    ul.style.visibility = '';\n  };\n\n  TreeView.prototype.animateHeight = function (args, start, end) {\n    var remaining = (args.duration - args.timeStamp) / args.duration;\n    var currentHeight = (end - start) * remaining + start;\n    args.element.parentElement.style.height = currentHeight + 'px';\n  };\n\n  TreeView.prototype.renderChildNodes = function (parentLi, expandChild, callback, loaded) {\n    var _this = this;\n\n    var eicon = select('div.' + ICON, parentLi);\n\n    if (isNullOrUndefined(eicon)) {\n      return;\n    }\n\n    this.showSpinner(eicon);\n    var childItems;\n    /* eslint-disable */\n\n    if (this.fields.dataSource instanceof DataManager) {\n      var level = this.parents(parentLi, '.' + PARENTITEM).length;\n      var mapper_2 = this.getChildFields(this.fields, level, 1);\n\n      if (isNullOrUndefined(mapper_2) || isNullOrUndefined(mapper_2.dataSource)) {\n        detach(eicon);\n        this.removeExpand(parentLi, true);\n        return;\n      }\n\n      this.treeList.push('false');\n\n      if (this.fields.dataSource instanceof DataManager && this.isOffline) {\n        this.treeList.pop();\n        childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n        this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n      } else {\n        mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute('data-uid'))).then(function (e) {\n          _this.treeList.pop();\n\n          childItems = e.result;\n\n          if (_this.dataType === 1) {\n            _this.dataType = 2;\n          }\n\n          _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      }\n    } else {\n      childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n      this.currentLoadData = this.getSortedData(childItems);\n\n      if (isNullOrUndefined(childItems) || childItems.length === 0) {\n        detach(eicon);\n        this.removeExpand(parentLi, true);\n        return;\n      } else {\n        this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n        parentLi.appendChild(ListBase.createList(this.createElement, this.currentLoadData, this.listBaseOption));\n        this.expandNode(parentLi, eicon, loaded);\n        this.setSelectionForChildNodes(childItems);\n        this.ensureCheckNode(parentLi);\n        this.finalizeNode(parentLi);\n        this.disableTreeNodes(childItems);\n        this.renderSubChild(parentLi, expandChild, loaded);\n      }\n    }\n  };\n\n  TreeView.prototype.loadChild = function (childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {\n    this.currentLoadData = childItems;\n\n    if (isNullOrUndefined(childItems) || childItems.length === 0) {\n      detach(eicon);\n      this.removeExpand(parentLi, true);\n    } else {\n      this.updateListProp(mapper);\n\n      if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n        var id = parentLi.getAttribute('data-uid');\n        var nodeData = this.getNodeObject(id);\n        setValue('child', childItems, nodeData);\n      }\n\n      this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n      parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));\n      this.expandNode(parentLi, eicon, loaded);\n      this.setSelectionForChildNodes(childItems);\n      this.ensureCheckNode(parentLi);\n      this.finalizeNode(parentLi);\n      this.disableTreeNodes(childItems);\n      this.renderSubChild(parentLi, expandChild, loaded);\n    }\n\n    if (callback) {\n      callback();\n    }\n\n    if (this.treeList.length === 0 && !this.isLoaded) {\n      this.finalize();\n    }\n  };\n\n  TreeView.prototype.disableTreeNodes = function (childItems) {\n    var i = 0;\n\n    while (i < childItems.length) {\n      var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n\n      if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {\n        this.doDisableAction([id]);\n      }\n\n      i++;\n    }\n  };\n  /**\r\n   * Sets the child Item in selectedState while rendering the child node\r\n   */\n\n\n  TreeView.prototype.setSelectionForChildNodes = function (nodes) {\n    var i;\n\n    for (i = 0; i < nodes.length; i++) {\n      var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;\n\n      if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {\n        this.doSelectionAction();\n      }\n    }\n  };\n\n  TreeView.prototype.ensureCheckNode = function (element) {\n    if (this.showCheckBox) {\n      this.ele = this.checkedElement ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;\n\n      if (this.autoCheck) {\n        this.ensureChildCheckState(element);\n        this.ensureParentCheckState(element);\n      }\n    }\n\n    this.currentLoadData = null;\n  };\n\n  TreeView.prototype.getFields = function (mapper, nodeLevel, dataLevel) {\n    if (nodeLevel === dataLevel) {\n      return mapper;\n    } else {\n      return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n    }\n  };\n\n  TreeView.prototype.getChildFields = function (mapper, nodeLevel, dataLevel) {\n    if (nodeLevel === dataLevel) {\n      return this.getChildMapper(mapper);\n    } else {\n      return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n    }\n  };\n\n  TreeView.prototype.getChildMapper = function (mapper) {\n    return typeof mapper.child === 'string' || isNullOrUndefined(mapper.child) ? mapper : mapper.child;\n  };\n\n  TreeView.prototype.getChildNodes = function (obj, parentId, isRoot) {\n    var _this = this;\n\n    if (isRoot === void 0) {\n      isRoot = false;\n    }\n\n    var childNodes;\n\n    if (isNullOrUndefined(obj)) {\n      return childNodes;\n    } else if (this.dataType === 1) {\n      return this.getChildGroup(this.groupedData, parentId, isRoot);\n    } else {\n      if (typeof this.fields.child === 'string') {\n        var index = obj.findIndex(function (data) {\n          return data[_this.fields.id] && data[_this.fields.id].toString() === parentId;\n        });\n\n        if (index !== -1) {\n          return getValue(this.fields.child, obj[index]);\n        }\n\n        if (index === -1) {\n          for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var tempArray = getValue(this.fields.child, obj[i]);\n            var childIndex = !isNullOrUndefined(tempArray) ? tempArray.findIndex(function (data) {\n              return data[_this.fields.id] && data[_this.fields.id].toString() === parentId;\n            }) : -1;\n\n            if (childIndex !== -1) {\n              return getValue(this.fields.child, tempArray[childIndex]);\n            } else if (!isNullOrUndefined(tempArray)) {\n              childNodes = this.getChildNodes(tempArray, parentId);\n\n              if (childNodes !== undefined) {\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.getChildGroup = function (data, parentId, isRoot) {\n    var childNodes;\n\n    if (isNullOrUndefined(data)) {\n      return childNodes;\n    }\n\n    for (var i = 0, objlen = data.length; i < objlen; i++) {\n      if (!isNullOrUndefined(data[i][0]) && !isNullOrUndefined(getValue(this.fields.parentID, data[i][0]))) {\n        if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) {\n          return data[i];\n        }\n      } else if (isRoot) {\n        return data[i];\n      } else {\n        return [];\n      }\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.renderSubChild = function (element, expandChild, loaded) {\n    if (expandChild) {\n      var cIcons = selectAll('.' + EXPANDABLE, element);\n\n      for (var i = 0, len = cIcons.length; i < len; i++) {\n        var icon = cIcons[i];\n\n        if (element.querySelector('.e-icons') !== cIcons[i]) {\n          var curLi = closest(icon, '.' + LISTITEM);\n          this.expandArgs = this.getExpandEvent(curLi, null);\n\n          if (loaded !== true) {\n            this.trigger('nodeExpanding', this.expandArgs);\n          }\n\n          this.renderChildNodes(curLi, expandChild, null, loaded);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.toggleSelect = function (li, e, multiSelect) {\n    if (!li.classList.contains('e-disable')) {\n      if (this.allowMultiSelection && (e && e.ctrlKey || multiSelect) && this.isActive(li)) {\n        this.unselectNode(li, e);\n      } else {\n        this.selectNode(li, e, multiSelect);\n      }\n    }\n  };\n\n  TreeView.prototype.isActive = function (li) {\n    return li.classList.contains(ACTIVE) ? true : false;\n  };\n\n  TreeView.prototype.selectNode = function (li, e, multiSelect) {\n    var _this = this;\n\n    if (isNullOrUndefined(li) || !this.allowMultiSelection && this.isActive(li) && !isNullOrUndefined(e)) {\n      this.setFocusElement(li);\n      return;\n    }\n\n    var eventArgs;\n\n    if (this.isLoaded) {\n      eventArgs = this.getSelectEvent(li, 'select', e);\n      this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel && !observedArgs.node.classList.contains(PREVENTSELECT)) {\n          _this.nodeSelectAction(li, e, observedArgs, multiSelect);\n        }\n      });\n    } else {\n      this.nodeSelectAction(li, e, eventArgs, multiSelect);\n    }\n  };\n\n  TreeView.prototype.nodeSelectAction = function (li, e, eventArgs, multiSelect) {\n    if (!this.allowMultiSelection || !multiSelect && (!e || e && !e.ctrlKey)) {\n      this.removeSelectAll();\n    }\n\n    if (this.allowMultiSelection && e && e.shiftKey) {\n      if (!this.startNode) {\n        this.startNode = li;\n      }\n\n      var startIndex = this.liList.indexOf(this.startNode);\n      var endIndex = this.liList.indexOf(li);\n\n      if (startIndex > endIndex) {\n        var temp = startIndex;\n        startIndex = endIndex;\n        endIndex = temp;\n      }\n\n      for (var i = startIndex; i <= endIndex; i++) {\n        var currNode = this.liList[i];\n\n        if (isVisible(currNode) && !currNode.classList.contains('e-disable')) {\n          this.addSelect(currNode);\n        }\n      }\n    } else {\n      this.startNode = li;\n      this.addSelect(li);\n    }\n\n    if (this.isLoaded) {\n      eventArgs.nodeData = this.getNodeData(li);\n      this.trigger('nodeSelected', eventArgs);\n      this.isRightClick = false;\n    }\n\n    this.isRightClick = false;\n  };\n\n  TreeView.prototype.unselectNode = function (li, e) {\n    var _this = this;\n\n    var eventArgs;\n\n    if (this.isLoaded) {\n      eventArgs = this.getSelectEvent(li, 'un-select', e);\n      this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeUnselectAction(li, observedArgs);\n        }\n      });\n    } else {\n      this.nodeUnselectAction(li, eventArgs);\n    }\n  };\n\n  TreeView.prototype.nodeUnselectAction = function (li, eventArgs) {\n    this.removeSelect(li);\n    this.setFocusElement(li);\n\n    if (this.isLoaded) {\n      eventArgs.nodeData = this.getNodeData(li);\n      this.trigger('nodeSelected', eventArgs);\n    }\n  };\n\n  TreeView.prototype.setFocusElement = function (li) {\n    if (!isNullOrUndefined(li)) {\n      var focusedNode = this.getFocusedNode();\n\n      if (focusedNode) {\n        removeClass([focusedNode], FOCUS);\n        focusedNode.setAttribute(\"tabindex\", \"-1\");\n      }\n\n      addClass([li], FOCUS);\n      li.setAttribute('tabindex', '0');\n      EventHandler.add(li, 'blur', this.focusOut, this);\n      this.updateIdAttr(focusedNode, li);\n    }\n  };\n\n  TreeView.prototype.addSelect = function (liEle) {\n    liEle.setAttribute('aria-selected', 'true');\n    addClass([liEle], ACTIVE);\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNullOrUndefined(id) && this.selectedNodes.indexOf(id) === -1) {\n      this.selectedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.removeSelect = function (liEle) {\n    if (this.allowMultiSelection) {\n      liEle.setAttribute('aria-selected', 'false');\n    } else {\n      liEle.removeAttribute('aria-selected');\n    }\n\n    removeClass([liEle], ACTIVE);\n    var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.selectedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.removeSelectAll = function () {\n    var selectedLI = this.element.querySelectorAll('.' + ACTIVE);\n\n    for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {\n      var ele = selectedLI_1[_i];\n\n      if (this.allowMultiSelection) {\n        ele.setAttribute('aria-selected', 'false');\n      } else {\n        ele.removeAttribute('aria-selected');\n      }\n    }\n\n    removeClass(selectedLI, ACTIVE);\n    this.setProperties({\n      selectedNodes: []\n    }, true);\n  };\n\n  TreeView.prototype.getSelectEvent = function (currLi, action, e) {\n    var nodeData = this.getNodeData(currLi);\n    return {\n      action: action,\n      cancel: false,\n      isInteracted: isNullOrUndefined(e) ? false : true,\n      node: currLi,\n      nodeData: nodeData\n    };\n  };\n\n  TreeView.prototype.setExpandOnType = function () {\n    this.expandOnType = this.expandOn === 'Auto' ? Browser.isDevice ? 'Click' : 'DblClick' : this.expandOn;\n  };\n\n  TreeView.prototype.expandHandler = function (e) {\n    var target = e.originalEvent.target;\n\n    if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || this.showCheckBox && closest(target, '.' + CHECKBOXWRAP)) {\n      return;\n    } else {\n      this.expandCollapseAction(closest(target, '.' + LISTITEM), e);\n    }\n  };\n\n  TreeView.prototype.expandCollapseAction = function (currLi, e) {\n    var icon = select('div.' + ICON, currLi);\n\n    if (!icon || icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      var classList$$1 = icon.classList;\n\n      if (classList$$1.contains(EXPANDABLE)) {\n        this.expandAction(currLi, icon, e);\n      } else if (classList$$1.contains(COLLAPSIBLE)) {\n        this.collapseNode(currLi, icon, e);\n      }\n    }\n  };\n\n  TreeView.prototype.expandAction = function (currLi, icon, e, expandChild, callback) {\n    var _this = this;\n\n    if (icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      addClass([icon], PROCESS);\n    }\n\n    if (this.isLoaded && !this.isRefreshed) {\n      this.expandArgs = this.getExpandEvent(currLi, e);\n      this.isInteracted = this.expandArgs.isInteracted;\n      this.trigger('nodeExpanding', this.expandArgs, function (observedArgs) {\n        if (observedArgs.cancel) {\n          removeClass([icon], PROCESS);\n        } else {\n          _this.nodeExpandAction(currLi, icon, expandChild, callback);\n        }\n      });\n    } else {\n      this.nodeExpandAction(currLi, icon, expandChild, callback);\n    }\n  };\n\n  TreeView.prototype.nodeExpandAction = function (currLi, icon, expandChild, callback) {\n    var ul = select('.' + PARENTITEM, currLi);\n\n    if (ul && ul.nodeName === 'UL') {\n      this.expandNode(currLi, icon);\n    } else {\n      this.isFirstRender = true;\n      this.renderChildNodes(currLi, expandChild, callback);\n      var liEles = selectAll('.' + LISTITEM, currLi);\n\n      for (var i = 0; i < liEles.length; i++) {\n        var id = this.getId(liEles[i]);\n\n        if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {\n          var icon_1 = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEles[i]));\n\n          if (!isNullOrUndefined(icon_1)) {\n            this.expandAction(liEles[i], icon_1, null);\n          }\n\n          this.expandChildren.splice(this.expandChildren.indexOf(id), 1);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.keyActionHandler = function (e) {\n    var _this = this;\n\n    var target = e.target;\n    var focusedNode = this.getFocusedNode();\n\n    if (target && target.classList.contains(INPUT)) {\n      var inpEle = target;\n\n      if (e.action === 'enter') {\n        inpEle.blur();\n      } else if (e.action === 'escape') {\n        inpEle.value = this.oldText;\n        inpEle.blur();\n      }\n\n      return;\n    }\n\n    e.preventDefault();\n    var eventArgs = {\n      cancel: false,\n      event: e,\n      node: focusedNode\n    };\n    this.trigger('keyPress', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        switch (e.action) {\n          case 'space':\n            if (_this.showCheckBox) {\n              _this.checkNode(e);\n            } else {\n              _this.toggleSelect(focusedNode, e);\n            }\n\n            break;\n\n          case 'moveRight':\n            _this.openNode(_this.enableRtl ? false : true, e);\n\n            break;\n\n          case 'moveLeft':\n            _this.openNode(_this.enableRtl ? true : false, e);\n\n            break;\n\n          case 'shiftDown':\n            _this.shiftKeySelect(true, e);\n\n            break;\n\n          case 'moveDown':\n          case 'ctrlDown':\n          case 'csDown':\n            _this.navigateNode(true);\n\n            break;\n\n          case 'shiftUp':\n            _this.shiftKeySelect(false, e);\n\n            break;\n\n          case 'moveUp':\n          case 'ctrlUp':\n          case 'csUp':\n            _this.navigateNode(false);\n\n            break;\n\n          case 'home':\n          case 'shiftHome':\n          case 'ctrlHome':\n          case 'csHome':\n            _this.navigateRootNode(true);\n\n            break;\n\n          case 'end':\n          case 'shiftEnd':\n          case 'ctrlEnd':\n          case 'csEnd':\n            _this.navigateRootNode(false);\n\n            break;\n\n          case 'enter':\n          case 'ctrlEnter':\n          case 'shiftEnter':\n          case 'csEnter':\n          case 'shiftSpace':\n          case 'ctrlSpace':\n            _this.toggleSelect(focusedNode, e);\n\n            break;\n\n          case 'f2':\n            if (_this.allowEditing && !focusedNode.classList.contains('e-disable')) {\n              _this.createTextbox(focusedNode, e);\n            }\n\n            break;\n\n          case 'ctrlA':\n            if (_this.allowMultiSelection) {\n              var sNodes = selectAll('.' + LISTITEM + ':not(.' + ACTIVE + ')', _this.element);\n\n              _this.selectGivenNodes(sNodes);\n            }\n\n            break;\n        }\n      }\n    });\n  };\n\n  TreeView.prototype.navigateToFocus = function (isUp) {\n    var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);\n    var pos = focusNode.getBoundingClientRect();\n    var parent = this.getScrollParent(this.element);\n\n    if (!isNullOrUndefined(parent)) {\n      var parentPos = parent.getBoundingClientRect();\n\n      if (pos.bottom > parentPos.bottom) {\n        parent.scrollTop += pos.bottom - parentPos.bottom;\n      } else if (pos.top < parentPos.top) {\n        parent.scrollTop -= parentPos.top - pos.top;\n      }\n    }\n\n    var isVisible$$1 = this.isVisibleInViewport(focusNode);\n\n    if (!isVisible$$1) {\n      focusNode.scrollIntoView(isUp);\n    }\n  };\n\n  TreeView.prototype.isVisibleInViewport = function (txtWrap) {\n    var pos = txtWrap.getBoundingClientRect();\n    return pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) && pos.right <= (window.innerWidth || document.documentElement.clientWidth);\n  };\n\n  TreeView.prototype.getScrollParent = function (node) {\n    if (isNullOrUndefined(node)) {\n      return null;\n    }\n\n    return node.scrollHeight > node.clientHeight ? node : this.getScrollParent(node.parentElement);\n  };\n\n  TreeView.prototype.shiftKeySelect = function (isTowards, e) {\n    if (this.allowMultiSelection) {\n      var focusedNode = this.getFocusedNode();\n      var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);\n      this.removeHover();\n      this.setFocusElement(nextNode);\n      this.toggleSelect(nextNode, e, false);\n      this.navigateToFocus(!isTowards);\n    } else {\n      this.navigateNode(isTowards);\n    }\n  };\n\n  TreeView.prototype.checkNode = function (e) {\n    var focusedNode = this.getFocusedNode();\n    var checkWrap = select('.' + CHECKBOXWRAP, focusedNode);\n    var isChecked = select(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);\n\n    if (!focusedNode.classList.contains('e-disable')) {\n      if (focusedNode.getElementsByClassName(\"e-checkbox-disabled\").length == 0) {\n        this.validateCheckNode(checkWrap, isChecked, focusedNode, e);\n      }\n    }\n  };\n\n  TreeView.prototype.validateCheckNode = function (checkWrap, isCheck, li, e) {\n    var _this = this;\n\n    var currLi = closest(checkWrap, '.' + LISTITEM);\n    this.checkActionNodes = [];\n    var ariaState = !isCheck ? 'true' : 'false';\n\n    if (!isNullOrUndefined(ariaState)) {\n      checkWrap.setAttribute('aria-checked', ariaState);\n    }\n\n    var eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);\n    this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);\n      }\n    });\n  };\n\n  TreeView.prototype.nodeCheckingAction = function (checkWrap, isCheck, li, eventArgs, e) {\n    if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {\n      this.checkedElement.push(li.getAttribute('data-uid'));\n\n      if (this.autoCheck) {\n        var child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));\n        child !== null ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;\n      }\n    }\n\n    this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);\n\n    if (this.autoCheck) {\n      this.ensureChildCheckState(li);\n      this.ensureParentCheckState(closest(closest(li, '.' + PARENTITEM), '.' + LISTITEM));\n      var doCheck = void 0;\n\n      if (eventArgs.action === 'check') {\n        doCheck = true;\n      } else if (eventArgs.action === 'uncheck') {\n        doCheck = false;\n      }\n\n      this.ensureStateChange(li, doCheck);\n    }\n\n    this.nodeCheckedEvent(checkWrap, isCheck, e);\n  };\n  /**\r\n   * Update checkedNodes when UI interaction happens before the child node renders in DOM\r\n   */\n\n\n  TreeView.prototype.ensureStateChange = function (li, doCheck) {\n    var childElement = select('.' + PARENTITEM, li);\n    var parentIndex = li.getAttribute('data-uid');\n    var mapper = this.fields;\n\n    if (this.dataType === 1 && this.autoCheck) {\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', parentIndex, true));\n\n      for (var i = 0; i < resultData.length; i++) {\n        var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n        var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;\n\n        if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {\n          this.checkedNodes.push(resultId);\n          var childItems = this.getChildNodes(this.treeData, resultId);\n          this.getChildItems(childItems, doCheck);\n\n          if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n          }\n        } else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null && this.checkedNodes.indexOf(resultId) !== -1) {\n          this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);\n\n          if (isCheck === 'true') {\n            this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);\n          }\n\n          if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null || this.parentNodeCheck.indexOf(resultId) !== -1) {\n            var childNodes = this.getChildNodes(this.treeData, resultId);\n            this.getChildItems(childNodes, doCheck);\n\n            if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n            }\n          }\n        } else {\n          var childItems = this.getChildNodes(this.treeData, resultId);\n          this.getChildItems(childItems, doCheck);\n        }\n      }\n    } else if (this.dataType === 1 && !this.autoCheck) {\n      if (!doCheck) {\n        var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n\n        for (var i = 0; i < checkedData.length; i++) {\n          var id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;\n\n          if (this.checkedNodes.indexOf(id) !== -1) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n          }\n\n          this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n        }\n\n        this.checkedNodes = [];\n      } else {\n        for (var i = 0; i < this.treeData.length; i++) {\n          var checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;\n\n          if (this.checkedNodes.indexOf(checkedId) === -1) {\n            this.checkedNodes.push(checkedId);\n          }\n        }\n      }\n    } else {\n      var childItems = this.getChildNodes(this.treeData, parentIndex);\n\n      if (childItems) {\n        this.childStateChange(childItems, parentIndex, childElement, doCheck);\n      }\n    }\n  };\n\n  TreeView.prototype.getChildItems = function (childItems, doCheck) {\n    for (var i = 0; i < childItems.length; i++) {\n      var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n      var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n\n      if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {\n        this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);\n      }\n\n      if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {\n        this.checkedNodes.push(childId);\n      }\n\n      if (childIsCheck === 'true' && !doCheck) {\n        this.updateField(this.treeData, this.fields, childId, 'isChecked', null);\n      }\n\n      var subChildItems = this.getChildNodes(this.treeData, childId);\n\n      if (subChildItems.length > 0) {\n        this.getChildItems(subChildItems, doCheck);\n      }\n    }\n  };\n  /**\r\n   * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS\r\n   */\n\n\n  TreeView.prototype.childStateChange = function (childItems, parent, childElement, doCheck) {\n    for (var i = 0; i < childItems.length; i++) {\n      var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';\n      var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n\n      if (this.autoCheck) {\n        if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n          this.checkedNodes.push(checkedChild);\n\n          if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {\n            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);\n          }\n        } else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {\n          this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n\n          if (isCheck === 'true') {\n            this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n          }\n        }\n      } else if (!this.autoCheck) {\n        if (!doCheck) {\n          if (this.checkedNodes.indexOf(checkedChild) !== -1) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n          }\n\n          this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n          this.checkedNodes = [];\n        } else {\n          if (this.checkedNodes.indexOf(checkedChild) === -1) {\n            this.checkedNodes.push(checkedChild);\n          }\n        }\n      }\n\n      var subChild = this.getChildNodes([childItems[i]], checkedChild);\n\n      if (subChild) {\n        this.childStateChange(subChild, parent, childElement, doCheck);\n      }\n    }\n  }; //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false\n\n\n  TreeView.prototype.allCheckNode = function (child, newCheck, checked, childCheck, validateCheck) {\n    if (child) {\n      for (var length_1 = 0; length_1 < child.length; length_1++) {\n        var childId = getValue(this.fields.id, child[length_1]);\n        var check = this.element.querySelector('[data-uid=\"' + childId + '\"]'); //Validates isChecked case while no UI interaction has been performed on the node or it's parent\n\n        if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {\n          if (check === null && !isNullOrUndefined(child[length_1][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1 || childCheck === 0 || checked === 2) {\n            child[length_1][this.fields.isChecked] !== false || checked === 2 ? newCheck.push(childId.toString()) : childCheck = null;\n            childCheck = child[length_1][this.fields.isChecked] !== false || checked === 2 ? 0 : null;\n          }\n        } //Pushes child checked node done thro' UI interaction\n\n\n        if (newCheck.indexOf(childId.toString()) === -1 && isNullOrUndefined(checked)) {\n          newCheck.push(childId.toString());\n        }\n\n        var hierChildId = getValue(this.fields.child.toString(), child[length_1]); //Gets if any next level children are available for child nodes\n\n        if (getValue(this.fields.hasChildren, child[length_1]) === true || hierChildId) {\n          var id = getValue(this.fields.id, child[length_1]);\n          var childId_1 = void 0;\n\n          if (this.dataType === 1) {\n            childId_1 = this.getChildNodes(this.treeData, id.toString());\n          } else {\n            childId_1 = hierChildId;\n          }\n\n          if (childId_1) {\n            isNullOrUndefined(validateCheck) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) : this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);\n            childCheck = null;\n          }\n        }\n\n        childCheck = null;\n      }\n    }\n  };\n\n  TreeView.prototype.openNode = function (toBeOpened, e) {\n    var focusedNode = this.getFocusedNode();\n    var icon = select('div.' + ICON, focusedNode);\n\n    if (toBeOpened) {\n      if (!icon) {\n        return;\n      } else if (icon.classList.contains(EXPANDABLE)) {\n        this.expandAction(focusedNode, icon, e);\n      } else {\n        this.focusNextNode(focusedNode, true);\n      }\n    } else {\n      if (icon && icon.classList.contains(COLLAPSIBLE)) {\n        this.collapseNode(focusedNode, icon, e);\n      } else {\n        var parentLi = closest(closest(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);\n\n        if (!parentLi) {\n          return;\n        } else {\n          if (!parentLi.classList.contains('e-disable')) {\n            this.setFocus(focusedNode, parentLi);\n            this.navigateToFocus(true);\n          }\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.navigateNode = function (isTowards) {\n    var focusedNode = this.getFocusedNode();\n    this.focusNextNode(focusedNode, isTowards);\n  };\n\n  TreeView.prototype.navigateRootNode = function (isBackwards) {\n    var focusedNode = this.getFocusedNode();\n    var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();\n\n    if (!rootNode.classList.contains('e-disable')) {\n      this.setFocus(focusedNode, rootNode);\n      this.navigateToFocus(isBackwards);\n    }\n  };\n\n  TreeView.prototype.getFocusedNode = function () {\n    var selectedItem;\n    var fNode = select('.' + LISTITEM + '[tabindex=\"0\"]', this.element);\n\n    if (isNullOrUndefined(fNode)) {\n      selectedItem = select('.' + LISTITEM, this.element);\n    }\n\n    return isNullOrUndefined(fNode) ? isNullOrUndefined(selectedItem) ? this.element.firstElementChild : selectedItem : fNode;\n  };\n\n  TreeView.prototype.focusNextNode = function (li, isTowards) {\n    var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);\n    this.setFocus(li, nextNode);\n    this.navigateToFocus(!isTowards);\n\n    if (nextNode.classList.contains('e-disable')) {\n      var lastChild = nextNode.lastChild;\n\n      if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {\n        this.focusNextNode(nextNode, true);\n      } else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {\n        this.focusNextNode(nextNode, false);\n      } else if (nextNode.nextSibling == null && lastChild.classList.contains(TEXTWRAP)) {\n        this.focusNextNode(nextNode, false);\n      } else {\n        this.focusNextNode(nextNode, isTowards);\n      }\n    }\n  };\n\n  TreeView.prototype.getNextNode = function (li) {\n    var index = this.liList.indexOf(li);\n    var nextNode;\n\n    do {\n      index++;\n      nextNode = this.liList[index];\n\n      if (isNullOrUndefined(nextNode)) {\n        return li;\n      }\n    } while (!isVisible(nextNode));\n\n    return nextNode;\n  };\n\n  TreeView.prototype.getPrevNode = function (li) {\n    var index = this.liList.indexOf(li);\n    var prevNode;\n\n    do {\n      index--;\n      prevNode = this.liList[index];\n\n      if (isNullOrUndefined(prevNode)) {\n        return li;\n      }\n    } while (!isVisible(prevNode));\n\n    return prevNode;\n  };\n\n  TreeView.prototype.getRootNode = function () {\n    var index = 0;\n    var rootNode;\n\n    do {\n      rootNode = this.liList[index];\n      index++;\n    } while (!isVisible(rootNode));\n\n    return rootNode;\n  };\n\n  TreeView.prototype.getEndNode = function () {\n    var index = this.liList.length - 1;\n    var endNode;\n\n    do {\n      endNode = this.liList[index];\n      index--;\n    } while (!isVisible(endNode));\n\n    return endNode;\n  };\n\n  TreeView.prototype.setFocus = function (preNode, nextNode) {\n    removeClass([preNode], [HOVER, FOCUS]);\n    preNode.setAttribute(\"tabindex\", \"-1\");\n\n    if (!nextNode.classList.contains('e-disable') && !nextNode.classList.contains(PREVENTSELECT)) {\n      addClass([nextNode], [HOVER, FOCUS]);\n      nextNode.setAttribute('tabindex', '0');\n      nextNode.focus();\n      EventHandler.add(nextNode, 'blur', this.focusOut, this);\n      this.updateIdAttr(preNode, nextNode);\n    }\n  };\n\n  TreeView.prototype.updateIdAttr = function (preNode, nextNode) {\n    this.element.removeAttribute('aria-activedescendant');\n\n    if (preNode) {\n      preNode.removeAttribute('id');\n    }\n\n    nextNode.setAttribute('id', this.element.id + '_active');\n    this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n  };\n\n  TreeView.prototype.focusIn = function () {\n    if (!this.mouseDownStatus) {\n      var focusedElement = this.getFocusedNode();\n      focusedElement.setAttribute(\"tabindex\", \"0\");\n      addClass([focusedElement], [HOVER, FOCUS]);\n      EventHandler.add(focusedElement, 'blur', this.focusOut, this);\n    }\n\n    this.mouseDownStatus = false;\n  };\n\n  TreeView.prototype.focusOut = function (event) {\n    var focusedElement = this.getFocusedNode();\n\n    if (event.target == focusedElement) {\n      removeClass([focusedElement], [HOVER, FOCUS]);\n      EventHandler.remove(focusedElement, 'blur', this.focusOut);\n    }\n  };\n\n  TreeView.prototype.onMouseOver = function (e) {\n    var target = e.target;\n    var classList$$1 = target.classList;\n    var currentLi = closest(target, '.' + LISTITEM);\n\n    if (!currentLi || classList$$1.contains(PARENTITEM) || classList$$1.contains(LISTITEM)) {\n      this.removeHover();\n      return;\n    } else {\n      if (currentLi && !currentLi.classList.contains('e-disable')) {\n        this.setHover(currentLi);\n      }\n    }\n  };\n\n  TreeView.prototype.setHover = function (li) {\n    if (!li.classList.contains(HOVER) && !li.classList.contains(PREVENTSELECT)) {\n      this.removeHover();\n      addClass([li], HOVER);\n    }\n  };\n\n  TreeView.prototype.onMouseLeave = function (e) {\n    this.removeHover();\n  };\n\n  TreeView.prototype.removeHover = function () {\n    var hoveredNode = selectAll('.' + HOVER, this.element);\n\n    if (hoveredNode && hoveredNode.length) {\n      removeClass(hoveredNode, HOVER);\n    }\n  };\n\n  TreeView.prototype.getNodeData = function (currLi, fromDS) {\n    if (!isNullOrUndefined(currLi) && currLi.classList.contains(LISTITEM) && !isNullOrUndefined(closest(currLi, '.' + CONTROL)) && closest(currLi, '.' + CONTROL).classList.contains(ROOT)) {\n      var id = currLi.getAttribute('data-uid');\n      var text = this.getText(currLi, fromDS);\n      var pNode = closest(currLi.parentNode, '.' + LISTITEM);\n      var pid = pNode ? pNode.getAttribute('data-uid') : null;\n      var selected = currLi.classList.contains(ACTIVE);\n      var selectable = currLi.classList.contains(PREVENTSELECT) ? false : true;\n      var expanded = currLi.getAttribute('aria-expanded') === 'true' ? true : false;\n      var hasChildren = currLi.getAttribute('aria-expanded') !== null ? true : (select('.' + EXPANDABLE, currLi) || select('.' + COLLAPSIBLE, currLi)) != null ? true : false;\n      var checked = null;\n      var checkboxElement = select('.' + CHECKBOXWRAP, currLi);\n\n      if (this.showCheckBox && checkboxElement) {\n        checked = checkboxElement.getAttribute('aria-checked');\n      }\n\n      return {\n        id: id,\n        text: text,\n        parentID: pid,\n        selected: selected,\n        selectable: selectable,\n        expanded: expanded,\n        isChecked: checked,\n        hasChildren: hasChildren\n      };\n    }\n\n    return {\n      id: '',\n      text: '',\n      parentID: '',\n      selected: false,\n      expanded: false,\n      isChecked: '',\n      hasChildren: false\n    };\n  };\n\n  TreeView.prototype.getText = function (currLi, fromDS) {\n    if (fromDS) {\n      var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));\n      var level = parseFloat(currLi.getAttribute('aria-level'));\n      var nodeFields = this.getFields(this.fields, level, 1);\n      return getValue(nodeFields.text, nodeData);\n    }\n\n    return select('.' + LISTTEXT, currLi).textContent;\n  };\n\n  TreeView.prototype.getExpandEvent = function (currLi, e) {\n    var nodeData = this.getNodeData(currLi);\n    return {\n      cancel: false,\n      isInteracted: isNullOrUndefined(e) ? false : true,\n      node: currLi,\n      nodeData: nodeData,\n      event: e\n    };\n  };\n\n  TreeView.prototype.renderNodeTemplate = function (data, textEle, dataId) {\n    var tempArr = this.nodeTemplateFn(data, this, 'nodeTemplate' + dataId, this.element.id + 'nodeTemplate', this.isStringTemplate, undefined, textEle, this.root);\n\n    if (tempArr) {\n      tempArr = Array.prototype.slice.call(tempArr);\n      append(tempArr, textEle);\n    }\n  };\n\n  TreeView.prototype.destroyTemplate = function (liEle) {\n    this.clearTemplate(['nodeTemplate' + liEle.getAttribute('data-uid')]);\n  };\n\n  TreeView.prototype.reRenderNodes = function () {\n    this.updateListProp(this.fields);\n\n    if (Browser.isIE) {\n      this.ulElement = this.element.querySelector('.e-list-parent.e-ul');\n      this.ulElement.parentElement.removeChild(this.ulElement);\n    } else {\n      this.element.innerHTML = '';\n    }\n\n    if (!isNullOrUndefined(this.nodeTemplateFn)) {\n      this.clearTemplate();\n    }\n\n    this.setTouchClass();\n    this.setProperties({\n      selectedNodes: [],\n      checkedNodes: [],\n      expandedNodes: []\n    }, true);\n    this.checkedElement = [];\n    this.isLoaded = false;\n    this.setDataBinding(true);\n  };\n\n  TreeView.prototype.setCssClass = function (oldClass, newClass) {\n    if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n      removeClass([this.element], oldClass.split(' '));\n    }\n\n    if (!isNullOrUndefined(newClass) && newClass !== '') {\n      addClass([this.element], newClass.split(' '));\n    }\n  };\n\n  TreeView.prototype.editingHandler = function (e) {\n    var target = e.target;\n\n    if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {\n      return;\n    } else {\n      var liEle = closest(target, '.' + LISTITEM);\n      this.createTextbox(liEle, e);\n    }\n  };\n\n  TreeView.prototype.createTextbox = function (liEle, e) {\n    var _this = this;\n\n    var oldInpEle = select('.' + TREEINPUT, this.element);\n\n    if (oldInpEle) {\n      oldInpEle.blur();\n    }\n\n    var textEle = select('.' + LISTTEXT, liEle);\n    this.updateOldText(liEle);\n    var innerEle = this.createElement('input', {\n      className: TREEINPUT,\n      attrs: {\n        value: this.oldText\n      }\n    });\n    var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);\n    this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        var inpWidth = textEle.offsetWidth + 5;\n        var style_1 = 'width:' + inpWidth + 'px';\n        addClass([liEle], EDITING);\n\n        if (!isNullOrUndefined(_this.nodeTemplateFn)) {\n          _this.destroyTemplate(liEle);\n        }\n\n        if (_this.isReact) {\n          setTimeout(function () {\n            _this.renderTextBox(eventArgs, textEle, style_1);\n          }, 5);\n        } else {\n          _this.renderTextBox(eventArgs, textEle, style_1);\n        }\n      }\n    });\n  };\n\n  TreeView.prototype.renderTextBox = function (eventArgs, textEle, style) {\n    textEle.innerHTML = eventArgs.innerHtml;\n    var inpEle = select('.' + TREEINPUT, textEle);\n    this.inputObj = Input.createInput({\n      element: inpEle,\n      properties: {\n        enableRtl: this.enableRtl\n      }\n    }, this.createElement);\n    this.inputObj.container.setAttribute('style', style);\n    inpEle.focus();\n    var inputEle = inpEle;\n    inputEle.setSelectionRange(0, inputEle.value.length);\n    this.wireInputEvents(inpEle);\n  };\n\n  TreeView.prototype.updateOldText = function (liEle) {\n    var id = liEle.getAttribute('data-uid');\n    this.editData = this.getNodeObject(id);\n    var level = parseFloat(liEle.getAttribute('aria-level'));\n    this.editFields = this.getFields(this.fields, level, 1);\n    this.oldText = getValue(this.editFields.text, this.editData);\n  };\n\n  TreeView.prototype.inputFocusOut = function (e) {\n    if (!select('.' + TREEINPUT, this.element)) {\n      return;\n    }\n\n    var target = e.target;\n    var newText = target.value;\n    var txtEle = closest(target, '.' + LISTTEXT);\n    var liEle = closest(target, '.' + LISTITEM);\n    detach(this.inputObj.container);\n\n    if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n      this.crudOperation('update', null, liEle, newText, null, null, true);\n    } else {\n      this.appendNewText(liEle, txtEle, newText, true);\n    }\n  };\n\n  TreeView.prototype.appendNewText = function (liEle, txtEle, newText, isInput) {\n    var _this = this;\n\n    var eventArgs = this.getEditEvent(liEle, newText, null);\n    this.trigger('nodeEdited', eventArgs, function (observedArgs) {\n      newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;\n\n      _this.updateText(liEle, txtEle, newText, isInput);\n\n      if (observedArgs.oldText !== newText) {\n        _this.triggerEvent('nodeEdited', [_this.getNode(liEle)]);\n      }\n    });\n  };\n\n  TreeView.prototype.updateText = function (liEle, txtEle, newText, isInput) {\n    var newData = setValue(this.editFields.text, newText, this.editData);\n\n    if (!isNullOrUndefined(this.nodeTemplateFn)) {\n      txtEle.innerText = '';\n      var dataId = liEle.getAttribute('data-uid');\n      this.renderNodeTemplate(newData, txtEle, dataId);\n      this.renderReactTemplates();\n    } else {\n      this.enableHtmlSanitizer ? txtEle.innerText = newText : txtEle.innerHTML = newText;\n    }\n\n    if (isInput) {\n      removeClass([liEle], EDITING);\n      liEle.focus();\n      EventHandler.add(liEle, 'blur', this.focusOut, this);\n      addClass([liEle], HOVER);\n    }\n\n    if (this.allowTextWrap) {\n      this.calculateWrap(liEle);\n    }\n  };\n\n  TreeView.prototype.getElement = function (ele) {\n    if (isNullOrUndefined(ele)) {\n      return null;\n    } else if (typeof ele === 'string') {\n      return this.element.querySelector('[data-uid=\"' + ele + '\"]');\n    } else if (typeof ele === 'object') {\n      return getElement(ele);\n    } else {\n      return null;\n    }\n  };\n\n  TreeView.prototype.getId = function (ele) {\n    if (isNullOrUndefined(ele)) {\n      return null;\n    } else if (typeof ele === 'string') {\n      return ele;\n    } else if (typeof ele === 'object') {\n      return getElement(ele).getAttribute('data-uid');\n    } else {\n      return null;\n    }\n  };\n\n  TreeView.prototype.getEditEvent = function (liEle, newText, inpEle) {\n    var data = this.getNodeData(liEle);\n    return {\n      cancel: false,\n      newText: newText,\n      node: liEle,\n      nodeData: data,\n      oldText: this.oldText,\n      innerHtml: inpEle\n    };\n  };\n\n  TreeView.prototype.getNodeObject = function (id) {\n    var childNodes;\n\n    if (isNullOrUndefined(id)) {\n      return childNodes;\n    } else if (this.dataType === 1) {\n      for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {\n        var dataId = getValue(this.fields.id, this.treeData[i]);\n\n        if (!isNullOrUndefined(this.treeData[i]) && !isNullOrUndefined(dataId) && dataId.toString() === id) {\n          return this.treeData[i];\n        }\n      }\n    } else {\n      return this.getChildNodeObject(this.treeData, this.fields, id);\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.getChildNodeObject = function (obj, mapper, id) {\n    var newList;\n\n    if (isNullOrUndefined(obj)) {\n      return newList;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var dataId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && dataId && dataId.toString() === id) {\n        return obj[i];\n      } else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n        var childData = getValue(mapper.child, obj[i]);\n        newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);\n\n        if (newList !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', obj[i]))) {\n        var child = 'child';\n        newList = this.getChildNodeObject(getValue(child, obj[i]), this.getChildMapper(mapper), id);\n\n        if (newList !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return newList;\n  };\n\n  TreeView.prototype.setDragAndDrop = function (toBind) {\n    if (toBind && !this.disabled) {\n      this.initializeDrag();\n    } else {\n      this.destroyDrag();\n    }\n  };\n\n  TreeView.prototype.initializeDrag = function () {\n    var _this = this;\n\n    var virtualEle;\n    var proxy = this;\n    this.dragObj = new Draggable(this.element, {\n      enableTailMode: true,\n      enableAutoScroll: true,\n      dragArea: this.dragArea,\n      dragTarget: '.' + TEXTWRAP,\n      helper: function (e) {\n        _this.dragTarget = e.sender.target;\n        var dragRoot = closest(_this.dragTarget, '.' + ROOT);\n        var dragWrap = closest(_this.dragTarget, '.' + TEXTWRAP);\n        _this.dragLi = closest(_this.dragTarget, '.' + LISTITEM);\n\n        if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {\n          dragWrap = _this.dragTarget.nextElementSibling;\n        }\n\n        if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap || _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) || _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains('e-disable')) {\n          return false;\n        }\n\n        var cloneEle = dragWrap.cloneNode(true);\n\n        if (isNullOrUndefined(select('div.' + ICON, cloneEle))) {\n          var icon = proxy.createElement('div', {\n            className: ICON + ' ' + EXPANDABLE\n          });\n          cloneEle.insertBefore(icon, cloneEle.children[0]);\n        }\n\n        var cssClass = DRAGITEM + ' ' + ROOT + ' ' + _this.cssClass + ' ' + (_this.enableRtl ? RTL$1 : '');\n        virtualEle = proxy.createElement('div', {\n          className: cssClass\n        });\n        virtualEle.appendChild(cloneEle);\n        var nLen = _this.selectedNodes.length;\n\n        if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {\n          var cNode = proxy.createElement('span', {\n            className: DROPCOUNT,\n            innerHTML: '' + nLen\n          });\n          virtualEle.appendChild(cNode);\n        }\n\n        document.body.appendChild(virtualEle);\n        document.body.style.cursor = '';\n        _this.dragData = _this.getNodeData(_this.dragLi);\n        return virtualEle;\n      },\n      dragStart: function (e) {\n        addClass([_this.element], DRAGGING);\n        var listItem = closest(e.target, '.e-list-item');\n        var level;\n\n        if (listItem) {\n          level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n\n        var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);\n\n        if (eventArgs.draggedNode.classList.contains(EDITING)) {\n          _this.dragObj.intDestroy(e.event);\n\n          _this.dragCancelAction(virtualEle);\n        } else {\n          _this.trigger('nodeDragStart', eventArgs, function (observedArgs) {\n            if (observedArgs.cancel) {\n              _this.dragObj.intDestroy(e.event);\n\n              _this.dragCancelAction(virtualEle);\n            } else {\n              _this.dragStartAction = true;\n            }\n          });\n        }\n      },\n      drag: function (e) {\n        _this.dragObj.setProperties({\n          cursorAt: {\n            top: !isNullOrUndefined(e.event.targetTouches) || Browser.isDevice ? 60 : -20\n          }\n        });\n\n        _this.dragAction(e, virtualEle);\n      },\n      dragStop: function (e) {\n        removeClass([_this.element], DRAGGING);\n\n        _this.removeVirtualEle();\n\n        var dropTarget = e.target;\n        var preventTargetExpand = false;\n        var dropRoot = closest(dropTarget, '.' + DROPPABLE);\n\n        if (!dropTarget || !dropRoot) {\n          detach(e.helper);\n          document.body.style.cursor = '';\n        }\n\n        var listItem = closest(dropTarget, '.e-list-item');\n        var level;\n\n        if (listItem) {\n          level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n\n        var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);\n\n        eventArgs.preventTargetExpand = preventTargetExpand;\n\n        _this.trigger('nodeDragStop', eventArgs, function (observedArgs) {\n          _this.dragParent = observedArgs.draggedParentNode;\n          _this.preventExpand = observedArgs.preventTargetExpand;\n\n          if (observedArgs.cancel) {\n            if (e.helper.parentNode) {\n              detach(e.helper);\n            }\n\n            document.body.style.cursor = '';\n          }\n\n          _this.dragStartAction = false;\n        });\n      }\n    });\n    this.dropObj = new Droppable(this.element, {\n      out: function (e) {\n        if (!isNullOrUndefined(e) && !e.target.classList.contains(SIBLING) && _this.dropObj.dragData.default && _this.dropObj.dragData.default.helper.classList.contains(ROOT)) {\n          document.body.style.cursor = 'not-allowed';\n        }\n      },\n      over: function (e) {\n        document.body.style.cursor = '';\n      },\n      drop: function (e) {\n        _this.dropAction(e);\n      }\n    });\n  };\n\n  TreeView.prototype.dragCancelAction = function (virtualEle) {\n    detach(virtualEle);\n    removeClass([this.element], DRAGGING);\n    this.dragStartAction = false;\n  };\n\n  TreeView.prototype.dragAction = function (e, virtualEle) {\n    var dropRoot = closest(e.target, '.' + DROPPABLE);\n    var dropWrap = closest(e.target, '.' + TEXTWRAP);\n    var icon = select('div.' + ICON, virtualEle);\n    removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);\n    this.removeVirtualEle();\n    document.body.style.cursor = '';\n    var classList$$1 = e.target.classList;\n\n    if (this.fullRowSelect && !dropWrap && !isNullOrUndefined(classList$$1) && classList$$1.contains(FULLROW)) {\n      dropWrap = e.target.nextElementSibling;\n    }\n\n    if (dropRoot) {\n      var dropLi = closest(e.target, '.' + LISTITEM);\n      var checkWrapper = closest(e.target, '.' + CHECKBOXWRAP);\n      var collapse = closest(e.target, '.' + COLLAPSIBLE);\n      var expand = closest(e.target, '.' + EXPANDABLE);\n\n      if (!dropRoot.classList.contains(ROOT) || dropWrap && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {\n        if (this.hasTemplate && dropLi) {\n          var templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n\n          if (e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {\n            var index = this.fullRowSelect ? 1 : 0;\n            this.appendIndicator(dropLi, icon, index);\n          } else if (e && !expand && !collapse && !checkWrapper && templateTarget && e.event.offsetY > templateTarget.offsetHeight - 10 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {\n            var index = this.fullRowSelect ? 2 : 1;\n            this.appendIndicator(dropLi, icon, index);\n          } else {\n            addClass([icon], DROPIN);\n          }\n        } else {\n          if (dropLi && e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {\n            var index = this.fullRowSelect ? 1 : 0;\n            this.appendIndicator(dropLi, icon, index);\n          } else if (dropLi && e && !expand && !collapse && e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 10 && !checkWrapper || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {\n            var index = this.fullRowSelect ? 2 : 1;\n            this.appendIndicator(dropLi, icon, index);\n          } else {\n            addClass([icon], DROPIN);\n          }\n        }\n      } else if (e.target.nodeName === 'LI' && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {\n        addClass([icon], DROPNEXT);\n        this.renderVirtualEle(e);\n      } else if (e.target.classList.contains(SIBLING)) {\n        addClass([icon], DROPNEXT);\n      } else {\n        addClass([icon], DROPOUT);\n      }\n    } else {\n      addClass([icon], NODROP);\n      document.body.style.cursor = 'not-allowed';\n    }\n\n    var listItem = closest(e.target, '.e-list-item');\n    var level;\n\n    if (listItem) {\n      level = parseInt(listItem.getAttribute('aria-level'), 10);\n    }\n\n    var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);\n\n    if (eventArgs.dropIndicator) {\n      removeClass([icon], eventArgs.dropIndicator);\n    }\n\n    this.trigger('nodeDragging', eventArgs);\n\n    if (eventArgs.dropIndicator) {\n      addClass([icon], eventArgs.dropIndicator);\n    }\n  };\n\n  TreeView.prototype.appendIndicator = function (dropLi, icon, index) {\n    addClass([icon], DROPNEXT);\n    var virEle = this.createElement('div', {\n      className: SIBLING\n    });\n    dropLi.insertBefore(virEle, dropLi.children[index]);\n  };\n  /* eslint-disable */\n\n\n  TreeView.prototype.dropAction = function (e) {\n    var offsetY = e.event.offsetY;\n    var dropTarget = e.target;\n    var dragObj;\n    var level;\n    var drop = false;\n    var dragInstance;\n    var nodeData = [];\n    var liArray = [];\n    dragInstance = e.dragData.draggable;\n\n    for (var i_1 = 0; i_1 < dragInstance.ej2_instances.length; i_1++) {\n      if (dragInstance.ej2_instances[i_1] instanceof TreeView_1) {\n        dragObj = dragInstance.ej2_instances[i_1];\n        break;\n      }\n    }\n\n    if (dragObj && dragObj.dragTarget) {\n      var dragTarget = dragObj.dragTarget;\n      var dragLi = closest(dragTarget, '.' + LISTITEM);\n      var dropLi = closest(dropTarget, '.' + LISTITEM);\n      liArray.push(dragLi);\n\n      if (dropLi == null && dropTarget.classList.contains(ROOT)) {\n        dropLi = dropTarget.firstElementChild;\n      }\n\n      detach(e.droppedElement);\n      document.body.style.cursor = '';\n\n      if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n        if (this.fields.dataSource instanceof DataManager === false) {\n          this.preventExpand = false;\n        }\n\n        return;\n      }\n\n      if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {\n        var sNodes = selectAll('.' + ACTIVE, dragObj.element);\n        liArray = sNodes;\n\n        if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {\n          for (var i_2 = sNodes.length - 1; i_2 >= 0; i_2--) {\n            if (dropLi.isSameNode(sNodes[i_2]) || this.isDescendant(sNodes[i_2], dropLi)) {\n              continue;\n            }\n\n            this.appendNode(dropTarget, sNodes[i_2], dropLi, e, dragObj, offsetY);\n          }\n        } else {\n          for (var i_3 = 0; i_3 < sNodes.length; i_3++) {\n            if (dropLi.isSameNode(sNodes[i_3]) || this.isDescendant(sNodes[i_3], dropLi)) {\n              continue;\n            }\n\n            this.appendNode(dropTarget, sNodes[i_3], dropLi, e, dragObj, offsetY);\n          }\n        }\n      } else {\n        this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);\n      }\n\n      level = parseInt(dragLi.getAttribute('aria-level'), 10);\n      drop = true;\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n    }\n\n    for (var i = 0; i < liArray.length; i++) {\n      nodeData.push(this.getNode(liArray[i]));\n    }\n\n    this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));\n\n    if (dragObj.element.id !== this.element.id) {\n      dragObj.triggerEvent('nodeDropped', nodeData);\n      this.isNodeDropped = true;\n      this.fields.dataSource = this.treeData;\n    }\n\n    this.triggerEvent('nodeDropped', nodeData);\n  };\n\n  TreeView.prototype.appendNode = function (dropTarget, dragLi, dropLi, e, dragObj, offsetY) {\n    var checkWrapper = closest(dropTarget, '.' + CHECKBOXWRAP);\n    var collapse = closest(e.target, '.' + COLLAPSIBLE);\n    var expand = closest(e.target, '.' + EXPANDABLE);\n\n    if (!dragLi.classList.contains('e-disable') && !checkWrapper && (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19 || !expand && !collapse)) {\n      if (dropTarget.nodeName === 'LI') {\n        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n      } else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {\n        if (dropTarget.firstElementChild.nodeName === 'UL') {\n          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n        }\n      } else if (dropTarget.classList.contains('e-icon-collapsible') || dropTarget.classList.contains('e-icon-expandable')) {\n        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n      } else {\n        this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);\n      }\n    } else {\n      this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);\n    }\n  };\n\n  TreeView.prototype.dropAsSiblingNode = function (dragLi, dropLi, e, dragObj) {\n    var dropUl = closest(dropLi, '.' + PARENTITEM);\n    var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n    var pre;\n\n    if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {\n      pre = false;\n    } else if (e.event.offsetY < 2) {\n      pre = true;\n    } else if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {\n      if (e.event.offsetY < 5 || e.event.offsetX < 3) {\n        pre = true;\n      } else if (e.event.offsetY > 15 || e.event.offsetX > 17) {\n        pre = false;\n      }\n    }\n\n    if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {\n      var target = e.target.closest('li');\n      dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);\n    } else {\n      dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);\n    }\n\n    this.moveData(dragLi, dropLi, dropUl, pre, dragObj);\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateAriaLevel(dragLi);\n\n    if (dragObj.element.id === this.element.id) {\n      this.updateList();\n    } else {\n      dragObj.updateInstance();\n      this.updateInstance();\n    }\n  };\n\n  TreeView.prototype.dropAsChildNode = function (dragLi, dropLi, dragObj, index, e, pos, isCheck) {\n    var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n    var dropParentUl = closest(dropLi, '.' + PARENTITEM);\n    var templateTarget;\n\n    if (e && e.target) {\n      templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n    }\n\n    if (e && pos < 7 && !isCheck) {\n      dropParentUl.insertBefore(dragLi, dropLi);\n      this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);\n    } else if (e && e.target.offsetHeight > 0 && pos > e.target.offsetHeight - 10 && !isCheck && !this.hasTemplate) {\n      dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n      this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n    } else if (this.hasTemplate && templateTarget && pos > templateTarget.offsetHeight - 10 && !isCheck) {\n      dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n      this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n    } else {\n      var dropUl = this.expandParent(dropLi);\n      var childLi = dropUl.childNodes[index];\n      dropUl.insertBefore(dragLi, childLi);\n      this.moveData(dragLi, childLi, dropUl, true, dragObj);\n    }\n\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateAriaLevel(dragLi);\n\n    if (dragObj.element.id === this.element.id) {\n      this.updateList();\n    } else {\n      dragObj.updateInstance();\n      this.updateInstance();\n    }\n  };\n\n  TreeView.prototype.moveData = function (dragLi, dropLi, dropUl, pre, dragObj) {\n    var dropParentLi = closest(dropUl, '.' + LISTITEM);\n    var id = this.getId(dragLi);\n    var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);\n    var refId = this.getId(dropLi);\n    var index = this.getDataPos(this.treeData, this.fields, refId);\n    var parentId = this.getId(dropParentLi);\n\n    if (this.dataType === 1) {\n      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);\n      var pos = isNullOrUndefined(index) ? this.treeData.length : pre ? index : index + 1;\n\n      if (isNullOrUndefined(parentId) && !this.hasPid) {\n        delete removedData[0][this.fields.parentID];\n      } else {\n        var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;\n        setValue(this.fields.parentID, currPid, removedData[0]);\n      }\n\n      this.treeData.splice(pos, 0, removedData[0]);\n\n      if (dragObj.element.id !== this.element.id) {\n        var childData = dragObj.removeChildNodes(id);\n        pos++;\n\n        for (var i = 0, len = childData.length; i < len; i++) {\n          this.treeData.splice(pos, 0, childData[i]);\n          pos++;\n        }\n\n        dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    } else {\n      this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);\n    }\n  };\n\n  TreeView.prototype.expandParent = function (dropLi) {\n    var dropIcon = select('div.' + ICON, dropLi);\n\n    if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {\n      this.expandAction(dropLi, dropIcon, null);\n    }\n\n    var dropUl = select('.' + PARENTITEM, dropLi);\n\n    if (this.preventExpand === true && !dropUl && dropIcon) {\n      this.renderChildNodes(dropLi);\n    }\n\n    dropUl = select('.' + PARENTITEM, dropLi);\n\n    if (!isNullOrUndefined(dropUl) && this.preventExpand === true) {\n      dropUl.style.display = 'none';\n    }\n\n    if (!isNullOrUndefined(dropUl) && this.preventExpand === false) {\n      dropUl.style.display = 'block';\n    }\n\n    if (isNullOrUndefined(dropUl) && this.preventExpand === true) {\n      if (isNullOrUndefined(dropIcon)) {\n        ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n      }\n\n      var icon = select('div.' + ICON, dropLi);\n\n      if (icon) {\n        icon.classList.add('e-icon-expandable');\n      }\n\n      dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n      dropLi.appendChild(dropUl);\n\n      if (icon) {\n        removeClass([icon], COLLAPSIBLE);\n      } else {\n        ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n      }\n\n      dropLi.setAttribute('aria-expanded', 'false');\n      dropUl.style.display = 'none';\n    }\n\n    if (isNullOrUndefined(dropUl)) {\n      this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));\n\n      if (isNullOrUndefined(dropIcon)) {\n        ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n      }\n\n      var icon = select('div.' + ICON, dropLi);\n\n      if (icon) {\n        removeClass([icon], EXPANDABLE);\n      } else {\n        ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n        icon = select('div.' + ICON, dropLi);\n        removeClass([icon], EXPANDABLE);\n      }\n\n      dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n      dropLi.appendChild(dropUl);\n      this.addExpand(dropLi);\n      this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));\n    }\n\n    return dropUl;\n  };\n\n  TreeView.prototype.updateElement = function (dragParentUl, dragParentLi) {\n    if (dragParentLi && dragParentUl.childElementCount === 0) {\n      var dragIcon = select('div.' + ICON, dragParentLi);\n      detach(dragParentUl);\n      detach(dragIcon);\n      var parentId = this.getId(dragParentLi);\n      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);\n      this.removeExpand(dragParentLi, true);\n    }\n  };\n\n  TreeView.prototype.updateAriaLevel = function (dragLi) {\n    var level = this.parents(dragLi, '.' + PARENTITEM).length;\n    dragLi.setAttribute('aria-level', '' + level);\n    this.updateChildAriaLevel(select('.' + PARENTITEM, dragLi), level + 1);\n  };\n\n  TreeView.prototype.updateChildAriaLevel = function (element, level) {\n    if (!isNullOrUndefined(element)) {\n      var cNodes = element.childNodes;\n\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var liEle = cNodes[i];\n        liEle.setAttribute('aria-level', '' + level);\n        this.updateChildAriaLevel(select('.' + PARENTITEM, liEle), level + 1);\n      }\n    }\n  };\n\n  TreeView.prototype.renderVirtualEle = function (e) {\n    var pre;\n\n    if (e.event.offsetY > e.target.offsetHeight - 2) {\n      pre = false;\n    } else if (e.event.offsetY < 2) {\n      pre = true;\n    }\n\n    var virEle = this.createElement('div', {\n      className: SIBLING\n    });\n    var index = this.fullRowSelect ? pre ? 1 : 2 : pre ? 0 : 1;\n    e.target.insertBefore(virEle, e.target.children[index]);\n  };\n\n  TreeView.prototype.removeVirtualEle = function () {\n    var sibEle = select('.' + SIBLING);\n\n    if (sibEle) {\n      detach(sibEle);\n    }\n  };\n\n  TreeView.prototype.destroyDrag = function () {\n    if (this.dragObj && this.dropObj) {\n      this.dragObj.destroy();\n      this.dropObj.destroy();\n    }\n  };\n\n  TreeView.prototype.getDragEvent = function (event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {\n    var dropLi = dropTarget ? closest(dropTarget, '.' + LISTITEM) : null;\n    var dropData = dropLi ? this.getNodeData(dropLi) : null;\n    var draggedNode = obj ? obj.dragLi : dragNode;\n    var draggedNodeData = obj ? obj.dragData : null;\n    var newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;\n    var dragLiParent = obj.dragLi.parentElement;\n    var dragParent = obj.dragLi ? closest(dragLiParent, '.' + LISTITEM) : null;\n    var targetParent = null;\n    var indexValue = null;\n    var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];\n    var iconClass = null;\n    var node = drop === true ? draggedNode : dropLi;\n    var index = node ? closest(node, '.e-list-parent') : null;\n    var i = 0;\n    var position = null;\n    dragParent = obj.dragLi && dragParent === null ? closest(dragLiParent, '.' + ROOT) : dragParent;\n    dragParent = drop === true ? this.dragParent : dragParent;\n\n    if (cloneEle) {\n      while (i < 4) {\n        if (select('.' + ICON, cloneEle).classList.contains(iconCss[i])) {\n          iconClass = iconCss[i];\n          break;\n        }\n\n        i++;\n      }\n    }\n\n    if (index) {\n      var dropTar = 0;\n\n      for (i = 0; i < index.childElementCount; i++) {\n        dropTar = drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode ? ++dropTar : dropTar;\n\n        if (drop !== true && index.children[i].classList.contains('e-hover')) {\n          indexValue = event.offsetY >= 23 ? i + 1 : i;\n          break;\n        } else if (index.children[i] === node) {\n          indexValue = event.offsetY >= 23 ? i : i;\n          break;\n        }\n      }\n\n      indexValue = dropTar !== 0 ? --indexValue : indexValue;\n      position = iconClass == \"e-drop-in\" ? \"Inside\" : event.offsetY < 7 ? \"Before\" : \"After\";\n    }\n\n    if (dropTarget) {\n      if (newParent.length === 0) {\n        targetParent = null;\n      } else if (dropTarget.classList.contains(LISTITEM)) {\n        targetParent = newParent[0];\n      } else {\n        targetParent = newParent[1];\n      }\n    }\n\n    if (dropLi === draggedNode) {\n      targetParent = dropLi;\n    }\n\n    if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {\n      targetParent = dropLi;\n\n      if (drop !== true) {\n        level = ++level;\n        var parent_2 = targetParent ? select('.e-list-parent', targetParent) : null;\n        indexValue = parent_2 ? parent_2.children.length : 0;\n\n        if (!(this.fields.dataSource instanceof DataManager) && parent_2 === null && targetParent) {\n          var parent_3 = targetParent.hasAttribute('data-uid') ? this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;\n          indexValue = parent_3 ? parent_3.length : 0;\n        }\n      }\n    }\n\n    return {\n      cancel: false,\n      clonedNode: cloneEle,\n      event: event,\n      draggedNode: draggedNode,\n      draggedNodeData: draggedNodeData,\n      droppedNode: dropLi,\n      droppedNodeData: dropData,\n      dropIndex: indexValue,\n      dropLevel: level,\n      draggedParentNode: dragParent,\n      dropTarget: targetParent,\n      dropIndicator: iconClass,\n      target: target,\n      position: position\n    };\n  };\n\n  TreeView.prototype.addFullRow = function (toAdd) {\n    var len = this.liList.length;\n\n    if (toAdd) {\n      for (var i = 0; i < len; i++) {\n        this.createFullRow(this.liList[i]);\n      }\n    } else {\n      for (var i = 0; i < len; i++) {\n        var rowDiv = select('.' + FULLROW, this.liList[i]);\n        detach(rowDiv);\n      }\n    }\n  };\n\n  TreeView.prototype.createFullRow = function (item) {\n    var rowDiv = this.createElement('div', {\n      className: FULLROW\n    });\n    item.insertBefore(rowDiv, item.childNodes[0]);\n  };\n\n  TreeView.prototype.addMultiSelect = function (toAdd) {\n    if (toAdd) {\n      var liEles = selectAll('.' + LISTITEM + ':not([aria-selected=\"true\"])', this.element);\n\n      for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {\n        var ele = liEles_1[_i];\n        ele.setAttribute('aria-selected', 'false');\n      }\n    } else {\n      var liEles = selectAll('.' + LISTITEM + '[aria-selected=\"false\"]', this.element);\n\n      for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {\n        var ele = liEles_2[_a];\n        ele.removeAttribute('aria-selected');\n      }\n    }\n  };\n\n  TreeView.prototype.collapseByLevel = function (element, level, excludeHiddenNodes) {\n    if (level > 0 && !isNullOrUndefined(element)) {\n      var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var liEle = cNodes[i];\n        var icon = select('.' + COLLAPSIBLE, select('.' + TEXTWRAP, liEle));\n\n        if (!isNullOrUndefined(icon)) {\n          this.collapseNode(liEle, icon, null);\n        }\n\n        this.collapseByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n      }\n    }\n  };\n\n  TreeView.prototype.collapseAllNodes = function (excludeHiddenNodes) {\n    var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + COLLAPSIBLE, this.element));\n\n    for (var i = 0, len = cIcons.length; i < len; i++) {\n      var icon = cIcons[i];\n      var liEle = closest(icon, '.' + LISTITEM);\n      this.collapseNode(liEle, icon, null);\n    }\n  };\n\n  TreeView.prototype.expandByLevel = function (element, level, excludeHiddenNodes) {\n    if (level > 0 && !isNullOrUndefined(element)) {\n      var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n\n      for (var i = 0, len = eNodes.length; i < len; i++) {\n        var liEle = eNodes[i];\n        var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEle));\n\n        if (!isNullOrUndefined(icon)) {\n          this.expandAction(liEle, icon, null);\n        }\n\n        this.expandByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n      }\n    }\n  };\n\n  TreeView.prototype.expandAllNodes = function (excludeHiddenNodes) {\n    var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + EXPANDABLE, this.element));\n\n    for (var i = 0, len = eIcons.length; i < len; i++) {\n      var icon = eIcons[i];\n      var liEle = closest(icon, '.' + LISTITEM);\n      this.expandAction(liEle, icon, null, true);\n    }\n  };\n\n  TreeView.prototype.getVisibleNodes = function (excludeHiddenNodes, nodes) {\n    var vNodes = Array.prototype.slice.call(nodes);\n\n    if (excludeHiddenNodes) {\n      for (var i = 0; i < vNodes.length; i++) {\n        if (!isVisible(vNodes[i])) {\n          vNodes.splice(i, 1);\n          i--;\n        }\n      }\n    }\n\n    return vNodes;\n  };\n\n  TreeView.prototype.removeNode = function (node) {\n    var dragParentUl = closest(node, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n\n    if (!isNullOrUndefined(this.nodeTemplateFn)) {\n      this.destroyTemplate(node);\n    }\n\n    detach(node);\n    this.updateElement(dragParentUl, dragParentLi);\n    this.removeData(node);\n  };\n\n  TreeView.prototype.updateInstance = function () {\n    this.updateList();\n    this.updateSelectedNodes();\n    this.updateExpandedNodes();\n  };\n\n  TreeView.prototype.updateList = function () {\n    this.liList = Array.prototype.slice.call(selectAll('.' + LISTITEM, this.element));\n  };\n\n  TreeView.prototype.updateSelectedNodes = function () {\n    this.setProperties({\n      selectedNodes: []\n    }, true);\n    var sNodes = selectAll('.' + ACTIVE, this.element);\n    this.selectGivenNodes(sNodes);\n  };\n\n  TreeView.prototype.updateExpandedNodes = function () {\n    this.setProperties({\n      expandedNodes: []\n    }, true);\n    var eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\n\n    for (var i = 0, len = eNodes.length; i < len; i++) {\n      this.addExpand(eNodes[i]);\n    }\n  };\n\n  TreeView.prototype.removeData = function (node) {\n    if (this.dataType === 1) {\n      var dm = new DataManager(this.treeData);\n      var id = this.getId(node);\n      var data = {};\n      var newId = this.isNumberTypeId ? parseFloat(id) : id;\n      data[this.fields.id] = newId;\n      dm.remove(this.fields.id, data);\n      this.removeChildNodes(id);\n    } else {\n      var id = this.getId(node);\n      this.updateChildField(this.treeData, this.fields, id, null, null, true);\n    }\n  };\n\n  TreeView.prototype.removeChildNodes = function (parentId) {\n    var cNodes = this.getChildGroup(this.groupedData, parentId, false);\n    var childData = [];\n\n    if (cNodes) {\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var dm = new DataManager(this.treeData);\n        var id = getValue(this.fields.id, cNodes[i]).toString();\n        var data = {};\n        var currId = this.isNumberTypeId ? parseFloat(id) : id;\n        data[this.fields.id] = currId;\n        var nodeData = dm.remove(this.fields.id, data);\n        childData.push(nodeData[0]);\n        this.removeChildNodes(id);\n      }\n    }\n\n    return childData;\n  };\n\n  TreeView.prototype.doGivenAction = function (nodes, selector, toExpand) {\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var liEle = this.getElement(nodes[i]);\n\n      if (isNullOrUndefined(liEle)) {\n        continue;\n      }\n\n      var icon = select('.' + selector, select('.' + TEXTWRAP, liEle));\n\n      if (!isNullOrUndefined(icon)) {\n        toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);\n      }\n    }\n  };\n\n  TreeView.prototype.addGivenNodes = function (nodes, dropLi, index, isRemote, dropEle) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    var sNodes = this.getSortedData(nodes);\n    var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;\n\n    if (isRemote) {\n      this.updateMapper(level);\n    }\n\n    var li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);\n    var id = this.getId(dropLi);\n    var refNode;\n    var dropIcon1;\n\n    if (!isNullOrUndefined(dropLi)) {\n      dropIcon1 = select('div.' + ICON, dropLi);\n    }\n\n    if (this.dataType === 1 && dropIcon1 && dropIcon1.classList.contains(EXPANDABLE) && !isNullOrUndefined(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains('e-filemanager')) {\n      this.preventExpand = true;\n    }\n\n    if (this.dataType !== 1) {\n      this.addChildData(this.treeData, this.fields, id, nodes, index);\n      this.isFirstRender = false;\n    }\n\n    var dropUl;\n\n    if (!dropEle) {\n      dropUl = dropLi ? this.expandParent(dropLi) : select('.' + PARENTITEM, this.element);\n    } else {\n      dropUl = dropEle;\n    }\n\n    refNode = dropUl.childNodes[index];\n\n    if (!this.isFirstRender || this.dataType === 1) {\n      if (refNode || this.sortOrder === 'None') {\n        for (var i = 0; i < li.length; i++) {\n          dropUl.insertBefore(li[i], refNode);\n        }\n\n        if (this.dataType === 1 && !isNullOrUndefined(dropLi) && !isNullOrUndefined(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains('e-filemanager')) {\n          this.preventExpand = false;\n          var dropIcon = select('div.' + ICON, dropLi);\n\n          if (dropIcon && dropIcon.classList.contains(EXPANDABLE)) {\n            this.expandAction(dropLi, dropIcon, null);\n          }\n        }\n      }\n\n      if (!refNode && (this.sortOrder === 'Ascending' || this.sortOrder === 'Descending')) {\n        if (dropUl.childNodes.length === 0) {\n          for (var i = 0; i < li.length; i++) {\n            dropUl.insertBefore(li[i], refNode);\n          }\n\n          if (this.dataType === 1 && !isNullOrUndefined(dropLi) && !isNullOrUndefined(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains('e-filemanager')) {\n            this.preventExpand = false;\n            var dropIcon = select('div.' + ICON, dropLi);\n\n            if (dropIcon && dropIcon.classList.contains(EXPANDABLE)) {\n              this.expandAction(dropLi, dropIcon, null);\n            }\n          }\n        } else {\n          var cNodes = dropUl.childNodes;\n\n          for (var i = 0; i < li.length; i++) {\n            for (var j = 0; j < cNodes.length; j++) {\n              var returnValue = this.sortOrder === 'Ascending' ? cNodes[j].textContent.toUpperCase() > li[i].innerText.toUpperCase() : cNodes[j].textContent.toUpperCase() < li[i].innerText.toUpperCase();\n\n              if (returnValue) {\n                dropUl.insertBefore(li[i], cNodes[j]);\n                break;\n              }\n\n              dropUl.insertBefore(li[i], cNodes[cNodes.length]);\n            }\n          }\n        }\n      }\n    }\n\n    if (this.dataType === 1) {\n      this.updateField(this.treeData, this.fields, id, 'hasChildren', true);\n      var refId = this.getId(refNode);\n      var pos = isNullOrUndefined(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);\n\n      for (var j = 0; j < nodes.length; j++) {\n        if (!isNullOrUndefined(id)) {\n          var currId = this.isNumberTypeId ? parseFloat(id) : id;\n          setValue(this.fields.parentID, currId, nodes[j]);\n        }\n\n        this.treeData.splice(pos, 0, nodes[j]);\n        pos++;\n      }\n    }\n\n    this.finalizeNode(dropUl);\n  };\n\n  TreeView.prototype.updateMapper = function (level) {\n    var mapper = level === 1 ? this.fields : this.getChildFields(this.fields, level - 1, 1);\n    this.updateListProp(mapper);\n  };\n\n  TreeView.prototype.updateListProp = function (mapper) {\n    var prop = this.getActualProperties(mapper);\n    this.listBaseOption.fields = prop;\n    this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';\n  };\n\n  TreeView.prototype.getDataPos = function (obj, mapper, id) {\n    var pos = null;\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        return i;\n      } else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n        var data = getValue(mapper.child, obj[i]);\n        pos = this.getDataPos(data, this.getChildMapper(mapper), id);\n\n        if (pos !== null) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', obj[i]))) {\n        var items = getValue('child', obj[i]);\n        pos = this.getDataPos(items, this.getChildMapper(mapper), id);\n\n        if (pos !== null) {\n          break;\n        }\n      }\n    }\n\n    return pos;\n  };\n\n  TreeView.prototype.addChildData = function (obj, mapper, id, data, index) {\n    var updated;\n\n    if (isNullOrUndefined(id)) {\n      index = isNullOrUndefined(index) ? obj.length : index;\n\n      for (var k = 0, len = data.length; k < len; k++) {\n        obj.splice(index, 0, data[k]);\n        index++;\n      }\n\n      return updated;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        if (typeof mapper.child === 'string' && obj[i].hasOwnProperty(mapper.child) && obj[i][mapper.child] !== null || this.fields.dataSource instanceof DataManager && obj[i].hasOwnProperty('child')) {\n          var key = typeof mapper.child === 'string' ? mapper.child : 'child';\n          var childData = getValue(key, obj[i]);\n\n          if (isNullOrUndefined(childData)) {\n            childData = [];\n          }\n\n          index = isNullOrUndefined(index) ? childData.length : index;\n\n          for (var k = 0, len = data.length; k < len; k++) {\n            childData.splice(index, 0, data[k]);\n            index++;\n          }\n        } else {\n          var key = typeof mapper.child === 'string' ? mapper.child : 'child';\n          obj[i][key] = data;\n        }\n\n        return true;\n      } else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n        var childObj = getValue(mapper.child, obj[i]);\n        updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);\n\n        if (updated !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', obj[i]))) {\n        var childData = getValue('child', obj[i]);\n        updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);\n\n        if (updated !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return updated;\n  };\n\n  TreeView.prototype.doDisableAction = function (nodes) {\n    var validNodes = this.nodeType(nodes);\n    var validID = this.checkValidId(validNodes);\n    this.validArr = [];\n\n    for (var i = 0, len = validID.length; i < len; i++) {\n      var id = validID[i][this.fields.id].toString();\n\n      if (id && this.disableNode.indexOf(id) === -1) {\n        this.disableNode.push(id);\n      }\n\n      var liEle = this.getElement(id);\n\n      if (liEle) {\n        liEle.setAttribute('aria-disabled', 'true');\n        addClass([liEle], DISABLE);\n      }\n    }\n  };\n\n  TreeView.prototype.doEnableAction = function (nodes) {\n    var strNodes = this.nodeType(nodes);\n\n    for (var i = 0, len = strNodes.length; i < len; i++) {\n      var liEle = this.getElement(strNodes[i]);\n      var id = strNodes[i];\n\n      if (id && this.disableNode.indexOf(id) !== -1) {\n        this.disableNode.splice(this.disableNode.indexOf(id), 1);\n      }\n\n      if (liEle) {\n        liEle.removeAttribute('aria-disabled');\n        removeClass([liEle], DISABLE);\n      }\n    }\n  };\n\n  TreeView.prototype.nodeType = function (nodes) {\n    var validID = [];\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var id = void 0;\n\n      if (typeof nodes[i] == \"string\") {\n        id = nodes[i] ? nodes[i].toString() : null;\n      } else if (typeof nodes[i] === \"object\") {\n        id = nodes[i] ? nodes[i].getAttribute(\"data-uid\").toString() : null;\n      }\n\n      if (validID.indexOf(id) == -1) {\n        validID.push(id);\n      }\n    }\n\n    return validID;\n  };\n\n  TreeView.prototype.checkValidId = function (node) {\n    var _this = this;\n\n    if (this.dataType === 1) {\n      this.validArr = this.treeData.filter(function (data) {\n        return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;\n      });\n    } else if (this.dataType === 2) {\n      for (var k = 0; k < this.treeData.length; k++) {\n        var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;\n\n        if (node.indexOf(id) !== -1) {\n          this.validArr.push(this.treeData[k]);\n        }\n\n        var childItems = getValue(this.fields.child.toString(), this.treeData[k]);\n\n        if (childItems) {\n          this.filterNestedChild(childItems, node);\n        }\n      }\n    }\n\n    return this.validArr;\n  };\n\n  TreeView.prototype.filterNestedChild = function (treeData, nodes) {\n    for (var k = 0; k < treeData.length; k++) {\n      var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;\n\n      if (nodes.indexOf(id) !== -1) {\n        this.validArr.push(treeData[k]);\n      }\n\n      var childItems = getValue(this.fields.child.toString(), treeData[k]);\n\n      if (childItems) {\n        this.filterNestedChild(childItems, nodes);\n      }\n    }\n  };\n\n  TreeView.prototype.setTouchClass = function () {\n    var ele = closest(this.element, '.' + BIGGER);\n    this.touchClass = isNullOrUndefined(ele) ? '' : SMALL;\n  };\n\n  TreeView.prototype.updatePersistProp = function () {\n    this.removeField(this.treeData, this.fields, ['selected', 'expanded']);\n    var sleNodes = this.selectedNodes;\n\n    for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {\n      this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);\n    }\n\n    var enodes = this.expandedNodes;\n\n    for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {\n      this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);\n    }\n\n    if (this.showCheckBox) {\n      this.removeField(this.treeData, this.fields, ['isChecked']);\n      var cnodes = this.checkedNodes;\n\n      for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {\n        this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);\n      }\n    }\n  };\n\n  TreeView.prototype.removeField = function (obj, mapper, names) {\n    if (isNullOrUndefined(obj) || isNullOrUndefined(mapper)) {\n      return;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      for (var j = 0; j < names.length; j++) {\n        var field = this.getMapperProp(mapper, names[j]);\n\n        if (!isNullOrUndefined(obj[i][field])) {\n          delete obj[i][field];\n        }\n      }\n\n      if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n        this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);\n      } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', obj[i]))) {\n        this.removeField(getValue('child', obj[i]), this.getChildMapper(mapper), names);\n      }\n    }\n  };\n\n  TreeView.prototype.getMapperProp = function (mapper, fieldName) {\n    switch (fieldName) {\n      case 'selected':\n        return !isNullOrUndefined(mapper.selected) ? mapper.selected : 'selected';\n\n      case 'expanded':\n        return !isNullOrUndefined(mapper.expanded) ? mapper.expanded : 'expanded';\n\n      case 'isChecked':\n        return !isNullOrUndefined(mapper.isChecked) ? mapper.isChecked : 'isChecked';\n\n      case 'hasChildren':\n        return !isNullOrUndefined(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';\n\n      default:\n        return fieldName;\n    }\n  };\n\n  TreeView.prototype.updateField = function (obj, mapper, id, key, value) {\n    if (isNullOrUndefined(id)) {\n      return;\n    } else if (this.dataType === 1) {\n      var newId = this.isNumberTypeId ? parseFloat(id) : id;\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', newId, false));\n      setValue(this.getMapperProp(mapper, key), value, resultData[0]);\n    } else {\n      this.updateChildField(obj, mapper, id, key, value);\n    }\n  };\n\n  TreeView.prototype.updateChildField = function (obj, mapper, id, key, value, remove$$1) {\n    var removedData;\n\n    if (isNullOrUndefined(obj)) {\n      return removedData;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        if (remove$$1) {\n          removedData = obj.splice(i, 1);\n        } else {\n          setValue(this.getMapperProp(mapper, key), value, obj[i]);\n          removedData = [];\n        }\n\n        return removedData;\n      } else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {\n        var childData = getValue(mapper.child, obj[i]);\n        removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove$$1);\n\n        if (removedData !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', obj[i]))) {\n        var childItems = getValue('child', obj[i]);\n        removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove$$1);\n\n        if (removedData !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return removedData;\n  };\n\n  TreeView.prototype.triggerEvent = function (action, node) {\n    this.renderReactTemplates();\n\n    if (action === 'addNodes') {\n      var nodeData = [];\n\n      for (var i = 0; i < node.length; i++) {\n        nodeData.push(this.getNode(this.getElement(isNullOrUndefined(node[i][this.fields.id]) ? getValue(this.fields.id, node[i]).toString() : null)));\n      }\n\n      node = nodeData;\n    }\n\n    var eventArgs = {\n      data: this.treeData,\n      action: action,\n      nodeData: node\n    };\n    this.trigger('dataSourceChanged', eventArgs);\n  };\n\n  TreeView.prototype.wireInputEvents = function (inpEle) {\n    EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);\n  };\n\n  TreeView.prototype.wireEditingEvents = function (toBind) {\n    var _this = this;\n\n    if (toBind && !this.disabled) {\n      var proxy_2 = this;\n      this.touchEditObj = new Touch(this.element, {\n        tap: function (e) {\n          if (_this.isDoubleTapped(e) && e.tapCount === 2) {\n            e.originalEvent.preventDefault();\n            proxy_2.editingHandler(e.originalEvent);\n          }\n        }\n      });\n    } else {\n      if (this.touchEditObj) {\n        this.touchEditObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.wireClickEvent = function (toBind) {\n    if (toBind) {\n      var proxy_3 = this;\n      this.touchClickObj = new Touch(this.element, {\n        tap: function (e) {\n          proxy_3.clickHandler(e);\n        }\n      });\n    } else {\n      if (this.touchClickObj) {\n        this.touchClickObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.wireExpandOnEvent = function (toBind) {\n    var _this = this;\n\n    if (toBind) {\n      var proxy_4 = this;\n      this.touchExpandObj = new Touch(this.element, {\n        tap: function (e) {\n          if ((_this.expandOnType === 'Click' || _this.expandOnType === 'DblClick' && _this.isDoubleTapped(e) && e.tapCount === 2) && e.originalEvent.which !== 3) {\n            proxy_4.expandHandler(e);\n          }\n        }\n      });\n    } else {\n      if (this.touchExpandObj) {\n        this.touchExpandObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.mouseDownHandler = function (e) {\n    this.mouseDownStatus = true;\n\n    if (e.shiftKey || e.ctrlKey) {\n      e.preventDefault();\n    }\n\n    if (e.ctrlKey && this.allowMultiSelection) {\n      EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);\n    }\n  };\n\n  TreeView.prototype.preventContextMenu = function (e) {\n    e.preventDefault();\n  };\n\n  TreeView.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);\n    this.wireClickEvent(true);\n\n    if (this.expandOnType !== 'None') {\n      this.wireExpandOnEvent(true);\n    }\n\n    EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\n    EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);\n    this.keyboardModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n\n  TreeView.prototype.unWireEvents = function () {\n    EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);\n    this.wireClickEvent(false);\n    this.wireExpandOnEvent(false);\n    EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\n    EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);\n\n    if (!this.disabled) {\n      this.keyboardModule.destroy();\n    }\n  };\n\n  TreeView.prototype.parents = function (element, selector) {\n    var matched = [];\n    var el = element.parentNode;\n\n    while (!isNullOrUndefined(el)) {\n      if (matches(el, selector)) {\n        matched.push(el);\n      }\n\n      el = el.parentNode;\n    }\n\n    return matched;\n  };\n\n  TreeView.prototype.isDoubleTapped = function (e) {\n    var target = e.originalEvent.target;\n    var secondTap;\n\n    if (target && e.tapCount) {\n      if (e.tapCount === 1) {\n        this.firstTap = closest(target, '.' + LISTITEM);\n      } else if (e.tapCount === 2) {\n        secondTap = closest(target, '.' + LISTITEM);\n      }\n    }\n\n    return this.firstTap === secondTap;\n  };\n\n  TreeView.prototype.isDescendant = function (parent, child) {\n    var node = child.parentNode;\n\n    while (!isNullOrUndefined(node)) {\n      if (node === parent) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n\n    return false;\n  };\n\n  TreeView.prototype.showSpinner = function (element) {\n    addClass([element], LOAD);\n    createSpinner({\n      target: element,\n      width: Browser.isDevice ? 16 : 14\n    }, this.createElement);\n    showSpinner(element);\n  };\n\n  TreeView.prototype.hideSpinner = function (element) {\n    hideSpinner(element);\n    element.innerHTML = '';\n    removeClass([element], LOAD);\n  };\n\n  TreeView.prototype.setCheckedNodes = function (nodes) {\n    nodes = JSON.parse(JSON.stringify(nodes));\n    this.uncheckAll(this.checkedNodes);\n    this.setIndeterminate(nodes);\n\n    if (nodes.length > 0) {\n      this.checkAll(nodes);\n    }\n  };\n  /**\r\n   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel\r\n   */\n\n\n  TreeView.prototype.setValidCheckedNode = function (node) {\n    if (this.dataType === 1) {\n      var mapper = this.fields;\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', node, true));\n\n      if (resultData[0]) {\n        this.setChildCheckState(resultData, node, resultData[0]);\n\n        if (this.autoCheck) {\n          var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;\n          var childNodes = this.getChildNodes(this.treeData, parent_4);\n          var count = 0;\n\n          for (var len = 0; len < childNodes.length; len++) {\n            var childId = childNodes[len][this.fields.id].toString();\n\n            if (this.checkedNodes.indexOf(childId) !== -1) {\n              count++;\n            }\n          }\n\n          if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {\n            this.checkedNodes.push(parent_4);\n          }\n        }\n      }\n    } else if (this.dataType === 2) {\n      for (var a = 0; a < this.treeData.length; a++) {\n        var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';\n\n        if (index === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n          break;\n        }\n\n        var childItems = getValue(this.fields.child.toString(), this.treeData[a]);\n\n        if (childItems) {\n          this.setChildCheckState(childItems, node, this.treeData[a]);\n        }\n      }\n    }\n  };\n  /**\r\n   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)\r\n   */\n\n\n  TreeView.prototype.setChildCheckState = function (childItems, node, treeData) {\n    var checkedParent;\n    var count = 0;\n\n    if (this.dataType === 1) {\n      if (treeData) {\n        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;\n      }\n\n      for (var index = 0; index < childItems.length; index++) {\n        var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;\n\n        if (treeData && checkedParent && this.autoCheck) {\n          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {\n            this.checkedNodes.push(checkNode);\n          }\n        }\n\n        if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n        }\n\n        var subChildItems = this.getChildNodes(this.treeData, checkNode);\n\n        if (subChildItems) {\n          this.setChildCheckState(subChildItems, node, treeData);\n        }\n      }\n    } else {\n      if (treeData) {\n        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n      }\n\n      for (var index = 0; index < childItems.length; index++) {\n        var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n\n        if (treeData && checkedParent && this.autoCheck) {\n          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n            this.checkedNodes.push(checkedChild);\n          }\n        }\n\n        if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n        }\n\n        var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n\n        if (subChildItems) {\n          this.setChildCheckState(subChildItems, node, childItems[index]);\n        }\n\n        if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n          count++;\n        }\n\n        if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {\n          this.checkedNodes.push(checkedParent);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.setIndeterminate = function (nodes) {\n    for (var i = 0; i < nodes.length; i++) {\n      this.setValidCheckedNode(nodes[i]);\n    }\n  };\n\n  TreeView.prototype.updatePosition = function (id, newData, isRefreshChild, childValue) {\n    if (this.dataType === 1) {\n      var pos = this.getDataPos(this.treeData, this.fields, id);\n      this.treeData.splice(pos, 1, newData);\n\n      if (isRefreshChild) {\n        this.removeChildNodes(id);\n\n        for (var j = 0; j < childValue.length; j++) {\n          this.treeData.splice(pos, 0, childValue[j]);\n          pos++;\n        }\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    } else {\n      this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);\n    }\n  };\n\n  TreeView.prototype.updateChildPosition = function (treeData, mapper, currID, newData, index) {\n    var found;\n\n    for (var i = 0, objlen = treeData.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, treeData[i]);\n\n      if (treeData[i] && nodeId && nodeId.toString() === currID) {\n        treeData[i] = newData[0];\n        return true;\n      } else if (typeof mapper.child === 'string' && !isNullOrUndefined(getValue(mapper.child, treeData[i]))) {\n        var childObj = getValue(mapper.child, treeData[i]);\n        found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);\n\n        if (found !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue('child', treeData[i]))) {\n        var childData = getValue('child', treeData[i]);\n        found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);\n\n        if (found !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  TreeView.prototype.dynamicState = function () {\n    this.setDragAndDrop(this.allowDragAndDrop);\n    this.wireEditingEvents(this.allowEditing);\n\n    if (!this.disabled) {\n      this.wireEvents();\n      this.setRipple();\n    } else {\n      this.unWireEvents();\n      this.rippleFn();\n      this.rippleIconFn();\n    }\n  };\n\n  TreeView.prototype.crudOperation = function (operation, nodes, target, newText, newNode, index, prevent) {\n    var _this = this;\n\n    var data = this.fields.dataSource;\n    var matchedArr = [];\n    var query = this.getQuery(this.fields);\n    var key = this.fields.id;\n    var crud;\n    var changes = {\n      addedRecords: [],\n      deletedRecords: [],\n      changedRecords: []\n    };\n    var nodesID = [];\n\n    if (nodes) {\n      nodesID = this.nodeType(nodes);\n    } else if (target) {\n      if (typeof target == \"string\") {\n        nodesID[0] = target.toString();\n      } else if (typeof target === \"object\") {\n        nodesID[0] = target.getAttribute(\"data-uid\").toString();\n      }\n    }\n\n    for (var i = 0, len = nodesID.length; i < len; i++) {\n      var liEle = this.getElement(nodesID[i]);\n\n      if (isNullOrUndefined(liEle)) {\n        continue;\n      }\n\n      var removedData = this.getNodeObject(nodesID[i]);\n      matchedArr.push(removedData);\n    }\n\n    switch (operation) {\n      case 'delete':\n        if (nodes.length == 1) {\n          crud = data.remove(key, matchedArr[0], query.fromTable, query);\n        } else {\n          changes.deletedRecords = matchedArr;\n          crud = data.saveChanges(changes, key, query.fromTable, query);\n        }\n\n        crud.then(function (e) {\n          return _this.deleteSuccess(nodesID);\n        }).catch(function (e) {\n          return _this.dmFailure(e);\n        });\n        break;\n\n      case 'update':\n        matchedArr[0][this.fields.text] = newText;\n        crud = data.update(key, matchedArr[0], query.fromTable, query);\n        crud.then(function (e) {\n          return _this.editSucess(target, newText, prevent);\n        }).catch(function (e) {\n          return _this.dmFailure(e, target, prevent);\n        });\n        break;\n\n      case 'insert':\n        if (newNode.length == 1) {\n          crud = data.insert(newNode[0], query.fromTable, query);\n        } else {\n          var arr = [];\n\n          for (var i = 0, len = newNode.length; i < len; i++) {\n            arr.push(newNode[i]);\n          }\n\n          changes.addedRecords = arr;\n          crud = data.saveChanges(changes, key, query.fromTable, query);\n        }\n\n        crud.then(function (e) {\n          var dropLi = _this.getElement(target);\n\n          _this.addSuccess(newNode, dropLi, index);\n\n          _this.preventExpand = false;\n        }).catch(function (e) {\n          return _this.dmFailure(e);\n        });\n        break;\n    }\n  };\n\n  TreeView.prototype.deleteSuccess = function (nodes) {\n    var nodeData = [];\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var liEle = this.getElement(nodes[i]);\n      nodeData.push(this.getNode(liEle));\n\n      if (isNullOrUndefined(liEle)) {\n        continue;\n      }\n\n      this.removeNode(liEle);\n    }\n\n    this.updateInstance();\n\n    if (this.dataType === 1) {\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    }\n\n    this.triggerEvent('removeNode', nodeData);\n  };\n\n  TreeView.prototype.editSucess = function (target, newText, prevent) {\n    var liEle = this.getElement(target);\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.appendNewText(liEle, txtEle, newText, prevent);\n  };\n\n  TreeView.prototype.addSuccess = function (nodes, dropLi, index) {\n    var dropUl;\n    var icon = dropLi ? dropLi.querySelector('.' + ICON) : null;\n    var proxy = this;\n\n    if (dropLi && icon && icon.classList.contains(EXPANDABLE) && dropLi.querySelector('.' + PARENTITEM) === null) {\n      proxy.renderChildNodes(dropLi, null, function () {\n        dropUl = dropLi.querySelector('.' + PARENTITEM);\n        proxy.addGivenNodes(nodes, dropLi, index, true, dropUl);\n        proxy.triggerEvent('addNodes', nodes);\n      });\n    } else {\n      this.addGivenNodes(nodes, dropLi, index, true);\n      this.triggerEvent('addNodes', nodes);\n    }\n  };\n\n  TreeView.prototype.dmFailure = function (e, target, prevent) {\n    if (target) {\n      this.updatePreviousText(target, prevent);\n    }\n\n    this.trigger('actionFailure', {\n      error: e\n    });\n  };\n\n  TreeView.prototype.updatePreviousText = function (target, prevent) {\n    var liEle = this.getElement(target);\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.updateText(liEle, txtEle, this.oldText, prevent);\n  };\n\n  TreeView.prototype.getHierarchicalParentId = function (node, data, parentsID) {\n    var _this = this;\n\n    var index = data.findIndex(function (data) {\n      return data[_this.fields.id] && data[_this.fields.id].toString() === node;\n    });\n\n    if (index == -1) {\n      for (var i = 0; i < data.length; i++) {\n        var childItems = getValue(this.fields.child.toString(), data[i]);\n\n        if (!isNullOrUndefined(childItems)) {\n          index = childItems.findIndex(function (data) {\n            return data[_this.fields.id] && data[_this.fields.id].toString() === node;\n          });\n\n          if (index == -1) {\n            this.getHierarchicalParentId(node, childItems, parentsID);\n          } else {\n            parentsID.push(data[i][this.fields.id].toString());\n            this.getHierarchicalParentId(data[i][this.fields.id].toString(), this.treeData, parentsID);\n            break;\n          }\n        }\n      }\n    }\n\n    return parentsID;\n  };\n  /**\r\n   * Called internally if any of the property value changed.\r\n   * @param  {TreeView} newProp\r\n   * @param  {TreeView} oldProp\r\n   * @returns void\r\n   * @private\r\n   */\n\n\n  TreeView.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'allowDragAndDrop':\n          this.setDragAndDrop(this.allowDragAndDrop);\n          break;\n\n        case 'dragArea':\n          if (this.allowDragAndDrop) {\n            this.dragObj.dragArea = this.dragArea;\n          }\n\n          break;\n\n        case 'allowEditing':\n          this.wireEditingEvents(this.allowEditing);\n          break;\n\n        case 'allowMultiSelection':\n          if (this.selectedNodes.length > 1) {\n            var sNode = this.getElement(this.selectedNodes[0]);\n            this.isLoaded = false;\n            this.removeSelectAll();\n            this.selectNode(sNode, null);\n            this.isLoaded = true;\n          }\n\n          this.setMultiSelect(this.allowMultiSelection);\n          this.addMultiSelect(this.allowMultiSelection);\n          break;\n\n        case 'allowTextWrap':\n          this.setTextWrap();\n          this.updateWrap();\n          break;\n\n        case 'checkedNodes':\n          if (this.showCheckBox) {\n            this.checkedNodes = oldProp.checkedNodes;\n            this.setCheckedNodes(newProp.checkedNodes);\n          }\n\n          break;\n\n        case 'autoCheck':\n          if (this.showCheckBox) {\n            this.autoCheck = newProp.autoCheck;\n            this.ensureIndeterminate();\n          }\n\n          break;\n\n        case 'cssClass':\n          this.setCssClass(oldProp.cssClass, newProp.cssClass);\n          break;\n\n        case 'enableRtl':\n          this.setEnableRtl();\n          break;\n\n        case 'expandedNodes':\n          this.isAnimate = false;\n          this.setProperties({\n            expandedNodes: []\n          }, true);\n          this.collapseAll();\n          this.isInitalExpand = true;\n          this.setProperties({\n            expandedNodes: isNullOrUndefined(newProp.expandedNodes) ? [] : newProp.expandedNodes\n          }, true);\n          this.doExpandAction();\n          this.isInitalExpand = false;\n          this.isAnimate = true;\n          break;\n\n        case 'expandOn':\n          this.wireExpandOnEvent(false);\n          this.setExpandOnType();\n\n          if (this.expandOnType !== 'None' && !this.disabled) {\n            this.wireExpandOnEvent(true);\n          }\n\n          break;\n\n        case 'disabled':\n          this.setDisabledMode();\n          this.dynamicState();\n          break;\n\n        case 'fields':\n          this.isAnimate = false;\n          this.isFieldChange = true;\n          this.initialRender = true;\n          this.reRenderNodes();\n          this.initialRender = false;\n          this.isAnimate = true;\n          this.isFieldChange = false;\n          break;\n\n        case 'fullRowSelect':\n          this.setFullRow(this.fullRowSelect);\n          this.addFullRow(this.fullRowSelect);\n\n          if (this.allowTextWrap) {\n            this.setTextWrap();\n            this.updateWrap();\n          }\n\n          break;\n\n        case 'loadOnDemand':\n          if (this.loadOnDemand === false && !this.onLoaded) {\n            var nodes = this.element.querySelectorAll('li');\n            var i = 0;\n\n            while (i < nodes.length) {\n              if (nodes[i].getAttribute('aria-expanded') !== 'true') {\n                this.renderChildNodes(nodes[i], true, null, true);\n              }\n\n              i++;\n            }\n\n            this.onLoaded = true;\n          }\n\n          break;\n\n        case 'nodeTemplate':\n          this.hasTemplate = false;\n          this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n          this.reRenderNodes();\n          break;\n\n        case 'selectedNodes':\n          this.removeSelectAll();\n          this.setProperties({\n            selectedNodes: newProp.selectedNodes\n          }, true);\n          this.doSelectionAction();\n          break;\n\n        case 'showCheckBox':\n          this.reRenderNodes();\n          break;\n\n        case 'sortOrder':\n          this.reRenderNodes();\n          break;\n\n        case 'fullRowNavigable':\n          this.setProperties({\n            fullRowNavigable: newProp.fullRowNavigable\n          }, true);\n          this.listBaseOption.itemNavigable = newProp.fullRowNavigable;\n          this.reRenderNodes();\n          break;\n      }\n    }\n  };\n  /**\r\n   * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\r\n   */\n\n\n  TreeView.prototype.destroy = function () {\n    this.clearTemplate();\n    this.element.removeAttribute('aria-activedescendant');\n    this.unWireEvents();\n    this.wireEditingEvents(false);\n\n    if (!this.disabled) {\n      this.rippleFn();\n      this.rippleIconFn();\n    }\n\n    this.setCssClass(this.cssClass, null);\n    this.setDragAndDrop(false);\n    this.setFullRow(false);\n\n    if (this.ulElement && this.ulElement.parentElement) {\n      this.ulElement.parentElement.removeChild(this.ulElement);\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\r\n   * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,\r\n   * then the nodes are added as children of the given parentID or in the root level of TreeView.\r\n   * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.\r\n   * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.\r\n   * @param  { number } index - Specifies the index to place the newly added nodes in the target element.\r\n   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\r\n   */\n\n\n  TreeView.prototype.addNodes = function (nodes, target, index, preventTargetExpand) {\n    if (isNullOrUndefined(nodes)) {\n      return;\n    }\n\n    nodes = JSON.parse(JSON.stringify(nodes));\n    var dropLi = this.getElement(target);\n    this.preventExpand = preventTargetExpand;\n\n    if (this.fields.dataSource instanceof DataManager) {\n      if (!this.isOffline) {\n        this.crudOperation('insert', null, target, null, nodes, index, this.preventExpand);\n      } else {\n        this.addSuccess(nodes, dropLi, index);\n      }\n    } else if (this.dataType === 2) {\n      this.addGivenNodes(nodes, dropLi, index);\n    } else {\n      if (dropLi) {\n        this.addGivenNodes(nodes, dropLi, index);\n      } else {\n        nodes = this.getSortedData(nodes);\n\n        for (var i = 0; i < nodes.length; i++) {\n          var pid = getValue(this.fields.parentID, nodes[i]);\n          dropLi = pid ? this.getElement(pid.toString()) : pid;\n          this.addGivenNodes([nodes[i]], dropLi, index);\n        }\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    }\n\n    this.updateCheckedStateFromDS();\n\n    if (this.showCheckBox && dropLi) {\n      this.ensureParentCheckState(dropLi);\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n      this.triggerEvent('addNodes', nodes);\n    }\n  };\n  /**\r\n   * Editing can also be enabled by using the `beginEdit` property, instead of clicking on the\r\n   * TreeView node. On passing the node ID or element through this property, the edit textBox\r\n   * will be created for the particular node thus allowing us to edit it.\r\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\r\n   */\n\n\n  TreeView.prototype.beginEdit = function (node) {\n    var ele = this.getElement(node);\n\n    if (isNullOrUndefined(ele) || this.disabled) {\n      return;\n    }\n\n    this.createTextbox(ele, null);\n  };\n  /**\r\n   * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes\r\n   * as argument to this method.\r\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\r\n   */\n\n\n  TreeView.prototype.checkAll = function (nodes) {\n    if (this.showCheckBox) {\n      this.doCheckBoxAction(nodes, true);\n    }\n  };\n  /**\r\n   * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.\r\n   * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse\r\n   * a specific level of nodes, set **level** as argument to collapseAll method.\r\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.\r\n   * @param  {number} level - TreeView nodes will collapse up to the given level.\r\n   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.\r\n   */\n\n\n  TreeView.prototype.collapseAll = function (nodes, level, excludeHiddenNodes) {\n    if (!isNullOrUndefined(nodes)) {\n      this.doGivenAction(nodes, COLLAPSIBLE, false);\n    } else {\n      if (level > 0) {\n        this.collapseByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n      } else {\n        this.collapseAllNodes(excludeHiddenNodes);\n      }\n    }\n  };\n  /**\r\n   * Disables the collection of nodes by passing the ID of nodes or node elements in the array.\r\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\r\n   */\n\n\n  TreeView.prototype.disableNodes = function (nodes) {\n    if (!isNullOrUndefined(nodes)) {\n      this.doDisableAction(nodes);\n    }\n  };\n  /**\r\n   * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.\r\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\r\n   */\n\n\n  TreeView.prototype.enableNodes = function (nodes) {\n    if (!isNullOrUndefined(nodes)) {\n      this.doEnableAction(nodes);\n    }\n  };\n  /**\r\n   * Ensures visibility of the TreeView node by using node ID or node element.\r\n   * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property\r\n   * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.\r\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.\r\n   */\n\n\n  TreeView.prototype.ensureVisible = function (node) {\n    var parentsId = [];\n\n    if (this.dataType == 1) {\n      var nodeData = this.getTreeData(node);\n\n      while (nodeData.length != 0 && !isNullOrUndefined(nodeData[0][this.fields.parentID])) {\n        parentsId.push(nodeData[0][this.fields.parentID].toString());\n        nodeData = this.getTreeData(nodeData[0][this.fields.parentID].toString());\n      }\n    } else if (this.dataType == 2) {\n      parentsId = this.getHierarchicalParentId(node, this.treeData, parentsId).reverse();\n    }\n\n    this.expandAll(parentsId);\n    var liEle = this.getElement(node);\n\n    if (!isNullOrUndefined(liEle)) {\n      if (typeof node == 'object') {\n        var parents = this.parents(liEle, '.' + LISTITEM);\n        this.expandAll(parents);\n      }\n\n      setTimeout(function () {\n        liEle.scrollIntoView({\n          behavior: \"smooth\"\n        });\n      }, 450);\n    }\n  };\n  /**\r\n   * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes\r\n   * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting\r\n   * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.\r\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\r\n   * @param  {number} level - TreeView nodes will expand up to the given level.\r\n   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.\r\n   */\n\n\n  TreeView.prototype.expandAll = function (nodes, level, excludeHiddenNodes) {\n    if (!isNullOrUndefined(nodes)) {\n      this.doGivenAction(nodes, EXPANDABLE, true);\n    } else {\n      if (level > 0) {\n        this.expandByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n      } else {\n        this.expandAllNodes(excludeHiddenNodes);\n      }\n    }\n  };\n  /**\r\n   * Gets all the checked nodes including child, whether it is loaded or not.\r\n   */\n\n\n  TreeView.prototype.getAllCheckedNodes = function () {\n    var checkNodes = this.checkedNodes;\n    return checkNodes;\n  };\n  /**\r\n  * Gets all the disabled nodes including child, whether it is loaded or not.\r\n  */\n\n\n  TreeView.prototype.getDisabledNodes = function () {\n    var disabledNodes = this.disableNode;\n    return disabledNodes;\n  };\n  /**\r\n   * Gets the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.\r\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\r\n   */\n\n\n  TreeView.prototype.getNode = function (node) {\n    var ele = this.getElement(node);\n    return this.getNodeData(ele, true);\n  };\n  /**\r\n   * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,\r\n   * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.\r\n   * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source\r\n   * of the corresponding node otherwise it will return the entire updated data source of TreeView.\r\n   * * The updated data source also contains custom attributes if you specified in data source.\r\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\r\n   * @isGenericType true\r\n   */\n\n\n  TreeView.prototype.getTreeData = function (node) {\n    var id = this.getId(node);\n    this.updatePersistProp();\n\n    if (isNullOrUndefined(id)) {\n      return this.treeData;\n    } else {\n      var data = this.getNodeObject(id);\n      return isNullOrUndefined(data) ? [] : [data];\n    }\n  };\n  /**\r\n   * Moves the collection of nodes within the same TreeView based on target or its index position.\r\n   * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.\r\n   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\r\n   * @param  {number} index - Specifies the index to place the moved nodes in the target element.\r\n   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\r\n   */\n\n\n  TreeView.prototype.moveNodes = function (sourceNodes, target, index, preventTargetExpand) {\n    var dropLi = this.getElement(target);\n    var nodeData = [];\n\n    if (isNullOrUndefined(dropLi)) {\n      return;\n    }\n\n    for (var i = 0; i < sourceNodes.length; i++) {\n      var dragLi = this.getElement(sourceNodes[i]);\n      nodeData.push(this.getNode(dragLi));\n\n      if (isNullOrUndefined(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n        continue;\n      }\n\n      this.preventExpand = preventTargetExpand;\n      this.dropAsChildNode(dragLi, dropLi, this, index);\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n    }\n\n    this.triggerEvent('moveNodes', nodeData);\n  };\n  /**\r\n   * Refreshes a particular node of the TreeView.\r\n   * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.\r\n   * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.\r\n   */\n\n\n  TreeView.prototype.refreshNode = function (target, newData) {\n    if (isNullOrUndefined(target) || isNullOrUndefined(newData)) {\n      return;\n    }\n\n    var id;\n    var isRefreshChild = false;\n\n    if (this.dataType == 1 && newData.length > 1) {\n      isRefreshChild = true;\n    } else if (this.dataType == 2 && newData.length === 1) {\n      var updatedChildValue = getValue(this.fields.child.toString(), newData[0]);\n\n      if (!isNullOrUndefined(updatedChildValue)) {\n        isRefreshChild = true;\n      }\n    }\n\n    var liEle = this.getElement(target);\n    id = liEle ? liEle.getAttribute('data-uid') : target ? target.toString() : null;\n    this.refreshData = this.getNodeObject(id);\n    newData = JSON.parse(JSON.stringify(newData));\n    /* eslint-disable */\n\n    var newNodeData;\n    var parentData;\n\n    if (this.dataType == 1 && isRefreshChild) {\n      for (var k = 0; k < newData.length; k++) {\n        if (isNullOrUndefined(newData[k][this.fields.parentID])) {\n          parentData = newData[k];\n          newData.splice(k, 1);\n          break;\n        }\n      }\n\n      newNodeData = extend({}, this.refreshData, parentData);\n    } else {\n      newNodeData = extend({}, this.refreshData, newData[0]);\n    }\n\n    if (isNullOrUndefined(liEle)) {\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n      return;\n    }\n\n    this.isRefreshed = true;\n    var level = parseFloat(liEle.getAttribute('aria-level'));\n    var newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);\n    var ul = select('.' + PARENTITEM, liEle);\n    var childItems = getValue(this.fields.child.toString(), newNodeData);\n\n    if (isRefreshChild && ul || isRefreshChild && !isNullOrUndefined(childItems)) {\n      var parentEle = liEle.parentElement;\n      var index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);\n      remove(liEle);\n      parentEle.insertBefore(newliEle[0], parentEle.childNodes[index]);\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n\n      if (isRefreshChild && ul) {\n        this.expandAll([id]);\n      }\n    } else {\n      var txtEle = select('.' + TEXTWRAP, liEle);\n      var newTextEle = select('.' + TEXTWRAP, newliEle[0]);\n      var icon = select('div.' + ICON, txtEle);\n      var newIcon = select('div.' + ICON, newTextEle);\n\n      if (icon && newIcon) {\n        if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {\n          removeClass([newIcon], EXPANDABLE);\n          addClass([newIcon], COLLAPSIBLE);\n        } else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {\n          removeClass([newIcon], COLLAPSIBLE);\n          addClass([newIcon], EXPANDABLE);\n        } else if (icon.classList.contains('interaction')) {\n          addClass([newIcon], 'interaction');\n        }\n      }\n\n      remove(txtEle);\n      var fullEle = select('.' + FULLROW, liEle);\n      fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n    }\n\n    liEle = this.getElement(target);\n\n    if (newNodeData[this.fields.tooltip]) {\n      liEle.setAttribute(\"title\", newNodeData[this.fields.tooltip]);\n    }\n\n    if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {\n      var attr = {};\n      merge(attr, newNodeData[this.fields.htmlAttributes]);\n\n      if (attr.class) {\n        addClass([liEle], attr.class.split(' '));\n        delete attr.class;\n      } else {\n        attributes(liEle, attr);\n      }\n    }\n\n    if (this.selectedNodes.indexOf(id) !== -1) {\n      liEle.setAttribute('aria-selected', 'true');\n      addClass([liEle], ACTIVE);\n    }\n\n    this.isRefreshed = false;\n    this.triggerEvent('refreshNode', [this.getNode(liEle)]);\n  };\n  /**\r\n   * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.\r\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\r\n   */\n\n\n  TreeView.prototype.removeNodes = function (nodes) {\n    if (!isNullOrUndefined(nodes)) {\n      if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n        this.crudOperation('delete', nodes);\n      } else {\n        this.deleteSuccess(nodes);\n      }\n    }\n  };\n  /**\r\n   * Replaces the text of the TreeView node with the given text.\r\n   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\r\n   * @param  {string} newText - Specifies the new text of TreeView node.\r\n   */\n\n\n  TreeView.prototype.updateNode = function (target, newText) {\n    var _this = this;\n\n    if (isNullOrUndefined(target) || isNullOrUndefined(newText) || !this.allowEditing) {\n      return;\n    }\n\n    var liEle = this.getElement(target);\n\n    if (isNullOrUndefined(liEle)) {\n      return;\n    }\n\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.updateOldText(liEle);\n    var eventArgs = this.getEditEvent(liEle, null, null);\n    this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        if (_this.fields.dataSource instanceof DataManager && !_this.isOffline) {\n          _this.crudOperation('update', null, target, newText, null, null, false);\n        } else {\n          _this.appendNewText(liEle, txtEle, newText, false);\n        }\n      }\n    });\n  };\n  /**\r\n   * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes\r\n   * as argument to this method.\r\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\r\n   */\n\n\n  TreeView.prototype.uncheckAll = function (nodes) {\n    if (this.showCheckBox) {\n      this.doCheckBoxAction(nodes, false);\n    }\n  };\n\n  var TreeView_1;\n\n  __decorate$8([Property(false)], TreeView.prototype, \"allowDragAndDrop\", void 0);\n\n  __decorate$8([Property(false)], TreeView.prototype, \"allowEditing\", void 0);\n\n  __decorate$8([Property(false)], TreeView.prototype, \"allowMultiSelection\", void 0);\n\n  __decorate$8([Property(false)], TreeView.prototype, \"allowTextWrap\", void 0);\n\n  __decorate$8([Complex({}, NodeAnimationSettings)], TreeView.prototype, \"animation\", void 0);\n\n  __decorate$8([Property()], TreeView.prototype, \"checkedNodes\", void 0);\n\n  __decorate$8([Property('')], TreeView.prototype, \"cssClass\", void 0);\n\n  __decorate$8([Property(false)], TreeView.prototype, \"disabled\", void 0);\n\n  __decorate$8([Property(null)], TreeView.prototype, \"dragArea\", void 0);\n\n  __decorate$8([Property(false)], TreeView.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate$8([Property(false)], TreeView.prototype, \"enablePersistence\", void 0);\n\n  __decorate$8([Property()], TreeView.prototype, \"expandedNodes\", void 0);\n\n  __decorate$8([Property('Auto')], TreeView.prototype, \"expandOn\", void 0);\n\n  __decorate$8([Complex({}, FieldsSettings)], TreeView.prototype, \"fields\", void 0);\n\n  __decorate$8([Property(true)], TreeView.prototype, \"fullRowSelect\", void 0);\n\n  __decorate$8([Property(true)], TreeView.prototype, \"loadOnDemand\", void 0);\n\n  __decorate$8([Property()], TreeView.prototype, \"locale\", void 0);\n\n  __decorate$8([Property()], TreeView.prototype, \"nodeTemplate\", void 0);\n\n  __decorate$8([Property()], TreeView.prototype, \"selectedNodes\", void 0);\n\n  __decorate$8([Property('None')], TreeView.prototype, \"sortOrder\", void 0);\n\n  __decorate$8([Property(false)], TreeView.prototype, \"showCheckBox\", void 0);\n\n  __decorate$8([Property(true)], TreeView.prototype, \"autoCheck\", void 0);\n\n  __decorate$8([Property(false)], TreeView.prototype, \"fullRowNavigable\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"actionFailure\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"created\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"dataBound\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"dataSourceChanged\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"drawNode\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"destroyed\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"keyPress\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"nodeChecked\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"nodeChecking\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"nodeClicked\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"nodeCollapsed\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"nodeCollapsing\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"nodeDragging\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"nodeDragStart\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"nodeDragStop\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"nodeDropped\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"nodeEdited\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"nodeEditing\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"nodeExpanded\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"nodeExpanding\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"nodeSelected\", void 0);\n\n  __decorate$8([Event()], TreeView.prototype, \"nodeSelecting\", void 0);\n\n  TreeView = TreeView_1 = __decorate$8([NotifyPropertyChanges], TreeView);\n  return TreeView;\n}(Component);\n/**\r\n * TreeView modules\r\n */\n\n\nvar __extends$9 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$9 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar CONTROL$1 = 'e-control';\nvar ROOT$1 = 'e-sidebar';\nvar DOCKER = 'e-dock';\nvar CLOSE = 'e-close';\nvar OPEN = 'e-open';\nvar TRASITION = 'e-transition';\nvar DEFAULTBACKDROP = 'e-sidebar-overlay';\nvar RTL$2 = 'e-rtl';\nvar RIGHT = 'e-right';\nvar LEFT = 'e-left';\nvar OVER = 'e-over';\nvar PUSH = 'e-push';\nvar SLIDE = 'e-slide';\nvar VISIBILITY = 'e-visibility';\nvar DISPLAY = 'e-sidebar-display';\nvar MAINCONTENTANIMATION = 'e-content-animation';\nvar DISABLEANIMATION = 'e-disable-animation';\nvar CONTEXT = 'e-sidebar-context';\nvar SIDEBARABSOLUTE = 'e-sidebar-absolute';\n/**\r\n * Sidebar is an expandable or collapsible\r\n * component that typically act as a side container to place the primary or secondary content alongside of the main content.\r\n * ```html\r\n * <aside id=\"sidebar\">\r\n * </aside>\r\n * ```\r\n * ```typescript\r\n * <script>\r\n *   let sidebarObject: Sidebar = new Sidebar();\r\n *   sidebarObject.appendTo(\"#sidebar\");\r\n * </script>\r\n * ```\r\n */\n\nvar Sidebar =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$9(Sidebar, _super);\n  /* eslint-enable */\n\n\n  function Sidebar(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n\n  Sidebar.prototype.preRender = function () {\n    this.setWidth();\n  };\n\n  Sidebar.prototype.render = function () {\n    this.initialize();\n    this.wireEvents();\n    this.renderComplete();\n  };\n\n  Sidebar.prototype.initialize = function () {\n    this.setTarget();\n    this.addClass();\n    this.setZindex();\n\n    if (this.enableDock) {\n      this.setDock();\n    }\n\n    if (this.isOpen) {\n      this.show();\n      this.firstRender = true;\n    } else {\n      this.setMediaQuery();\n    }\n\n    this.checkType(true);\n    this.setType(this.type);\n    this.setCloseOnDocumentClick();\n    this.setEnableRTL();\n\n    if (Browser.isDevice) {\n      this.windowWidth = window.innerWidth;\n    }\n  };\n\n  Sidebar.prototype.setEnableRTL = function () {\n    (this.enableRtl ? addClass : removeClass)([this.element], RTL$2);\n  };\n\n  Sidebar.prototype.setTarget = function () {\n    this.targetEle = this.element.nextElementSibling;\n    this.sidebarEleCopy = this.element.cloneNode(true);\n\n    if (typeof this.target === 'string') {\n      this.setProperties({\n        target: document.querySelector(this.target)\n      }, true);\n    }\n\n    if (this.target) {\n      this.target.insertBefore(this.element, this.target.children[0]);\n      addClass([this.element], SIDEBARABSOLUTE);\n      addClass([this.target], CONTEXT);\n      this.targetEle = this.getTargetElement();\n    }\n  };\n\n  Sidebar.prototype.getTargetElement = function () {\n    var siblingElement = this.element.nextElementSibling;\n\n    while (!isNullOrUndefined(siblingElement)) {\n      if (!siblingElement.classList.contains(ROOT$1)) {\n        break;\n      }\n\n      siblingElement = siblingElement.nextElementSibling;\n    }\n\n    return siblingElement;\n  };\n\n  Sidebar.prototype.setCloseOnDocumentClick = function () {\n    if (this.closeOnDocumentClick) {\n      EventHandler.add(document, 'mousedown touchstart', this.documentclickHandler, this);\n    } else {\n      EventHandler.remove(document, 'mousedown touchstart', this.documentclickHandler);\n    }\n  };\n\n  Sidebar.prototype.setWidth = function () {\n    if (this.enableDock && this.position === 'Left') {\n      setStyleAttribute(this.element, {\n        'width': this.setDimension(this.dockSize)\n      });\n    } else if (this.enableDock && this.position === 'Right') {\n      setStyleAttribute(this.element, {\n        'width': this.setDimension(this.dockSize)\n      });\n    } else if (!this.enableDock) {\n      setStyleAttribute(this.element, {\n        'width': this.setDimension(this.width)\n      });\n    }\n  };\n\n  Sidebar.prototype.setDimension = function (width) {\n    if (typeof width === 'number') {\n      width = formatUnit(width);\n    } else if (typeof width === 'string') {\n      width = width.match(/px|%|em/) ? width : formatUnit(width);\n    } else {\n      width = '100%';\n    }\n\n    return width;\n  };\n\n  Sidebar.prototype.setZindex = function () {\n    setStyleAttribute(this.element, {\n      'z-index': '' + this.zIndex\n    });\n  };\n\n  Sidebar.prototype.addClass = function () {\n    if (this.element.tagName === 'EJS-SIDEBAR') {\n      addClass([this.element], DISPLAY);\n    }\n\n    var classELement = document.querySelector('.e-main-content');\n\n    if (!isNullOrUndefined(classELement || this.targetEle)) {\n      addClass([classELement || this.targetEle], [MAINCONTENTANIMATION]);\n    }\n\n    this.tabIndex = this.element.hasAttribute('tabindex') ? this.element.getAttribute('tabindex') : null;\n\n    if (!this.enableDock && this.type !== 'Auto') {\n      addClass([this.element], [VISIBILITY]);\n    }\n\n    removeClass([this.element], [OPEN, CLOSE, RIGHT, LEFT, SLIDE, PUSH, OVER]);\n    this.element.classList.add(ROOT$1);\n    addClass([this.element], this.position === 'Right' ? RIGHT : LEFT);\n\n    if (this.enableDock) {\n      addClass([this.element], DOCKER);\n    }\n\n    if (!isNullOrUndefined(this.tabIndex)) {\n      this.element.setAttribute('tabindex', this.tabIndex);\n    }\n\n    if (this.type === 'Auto' && !Browser.isDevice) {\n      this.show();\n    } else if (!this.isOpen) {\n      addClass([this.element], CLOSE);\n    }\n  };\n\n  Sidebar.prototype.checkType = function (val) {\n    if (!(this.type === 'Push' || this.type === 'Over' || this.type === 'Slide')) {\n      this.type = 'Auto';\n    } else {\n      if (!this.element.classList.contains(CLOSE) && !val) {\n        this.hide();\n      }\n    }\n  };\n\n  Sidebar.prototype.transitionEnd = function (e) {\n    this.setDock();\n\n    if (!isNullOrUndefined(e) && !this.firstRender) {\n      this.triggerChange();\n    }\n\n    this.firstRender = false;\n    EventHandler.remove(this.element, 'transitionend', this.transitionEnd);\n  };\n\n  Sidebar.prototype.destroyBackDrop = function () {\n    var sibling = document.querySelector('.e-main-content') || this.targetEle;\n\n    if (this.target && this.showBackdrop && sibling && !isNullOrUndefined(this.defaultBackdropDiv)) {\n      removeClass([this.defaultBackdropDiv], DEFAULTBACKDROP);\n    } else if (this.showBackdrop && this.modal) {\n      this.modal.style.display = 'none';\n      this.modal.outerHTML = '';\n      this.modal = null;\n    }\n  };\n  /* eslint-disable */\n\n  /**\r\n   * Hide the Sidebar component, if it is in an open state.\r\n   *\r\n   * @returns {void}\r\n   *\r\n   */\n\n\n  Sidebar.prototype.hide = function (e) {\n    var _this = this;\n\n    var closeArguments = {\n      model: this,\n      element: this.element,\n      cancel: false,\n      isInteracted: !isNullOrUndefined(e),\n      event: e || null\n    };\n    this.trigger('close', closeArguments, function (observedcloseArgs) {\n      if (!observedcloseArgs.cancel) {\n        if (_this.element.classList.contains(CLOSE)) {\n          return;\n        }\n\n        if (_this.element.classList.contains(OPEN) && !_this.animate) {\n          _this.triggerChange();\n        }\n\n        addClass([_this.element], CLOSE);\n        removeClass([_this.element], OPEN);\n        setStyleAttribute(_this.element, {\n          'width': formatUnit(_this.enableDock ? _this.dockSize : _this.width)\n        });\n\n        _this.setType(_this.type);\n\n        var sibling = document.querySelector('.e-main-content') || _this.targetEle;\n\n        if (!_this.enableDock && sibling) {\n          sibling.style.transform = 'translateX(' + 0 + 'px)';\n          sibling.style[_this.position === 'Left' ? 'marginLeft' : 'marginRight'] = '0px';\n        }\n\n        _this.destroyBackDrop();\n\n        _this.setAnimation();\n\n        if (_this.type === 'Slide') {\n          document.body.classList.remove('e-sidebar-overflow');\n        }\n\n        _this.setProperties({\n          isOpen: false\n        }, true);\n\n        if (_this.enableDock) {\n          setTimeout(function () {\n            return _this.setTimeOut();\n          }, 50);\n        }\n\n        EventHandler.add(_this.element, 'transitionend', _this.transitionEnd, _this);\n      }\n    });\n  };\n\n  Sidebar.prototype.setTimeOut = function () {\n    var sibling = document.querySelector('.e-main-content') || this.targetEle;\n    var elementWidth = this.element.getBoundingClientRect().width;\n\n    if (this.element.classList.contains(OPEN) && sibling && !(this.type === 'Over' && this.enableDock)) {\n      if (this.position === 'Left') {\n        sibling.style.marginLeft = this.setDimension(this.width === 'auto' ? elementWidth : this.width);\n      } else {\n        sibling.style.marginRight = this.setDimension(this.width === 'auto' ? elementWidth : this.width);\n      }\n    } else if (this.element.classList.contains(CLOSE) && sibling) {\n      if (this.position === 'Left') {\n        sibling.style.marginLeft = this.setDimension(this.dockSize === 'auto' ? elementWidth : this.dockSize);\n      } else {\n        sibling.style.marginRight = this.setDimension(this.dockSize === 'auto' ? elementWidth : this.dockSize);\n      }\n    }\n  };\n  /* eslint-disable */\n\n  /**\r\n   * Shows the Sidebar component, if it is in closed state.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  Sidebar.prototype.show = function (e) {\n    var _this = this;\n\n    var openArguments = {\n      model: this,\n      element: this.element,\n      cancel: false,\n      isInteracted: !isNullOrUndefined(e),\n      event: e || null\n    };\n    this.trigger('open', openArguments, function (observedopenArgs) {\n      if (!observedopenArgs.cancel) {\n        removeClass([_this.element], VISIBILITY);\n\n        if (_this.element.classList.contains(OPEN)) {\n          return;\n        }\n\n        if (_this.element.classList.contains(CLOSE) && !_this.animate) {\n          _this.triggerChange();\n        }\n\n        addClass([_this.element], [OPEN, TRASITION]);\n        setStyleAttribute(_this.element, {\n          'transform': ''\n        });\n        removeClass([_this.element], CLOSE);\n        setStyleAttribute(_this.element, {\n          'width': formatUnit(_this.width)\n        });\n\n        _this.setType(_this.type);\n\n        _this.createBackDrop();\n\n        _this.setAnimation();\n\n        if (_this.type === 'Slide') {\n          document.body.classList.add('e-sidebar-overflow');\n        }\n\n        _this.setProperties({\n          isOpen: true\n        }, true);\n\n        EventHandler.add(_this.element, 'transitionend', _this.transitionEnd, _this);\n      }\n    });\n  };\n\n  Sidebar.prototype.setAnimation = function () {\n    if (this.animate) {\n      removeClass([this.element], DISABLEANIMATION);\n    } else {\n      addClass([this.element], DISABLEANIMATION);\n    }\n  };\n\n  Sidebar.prototype.triggerChange = function () {\n    var changeArguments = {\n      name: 'change',\n      element: this.element\n    };\n    this.trigger('change', changeArguments);\n  };\n\n  Sidebar.prototype.setDock = function () {\n    if (this.enableDock && this.position === 'Left' && !this.getState()) {\n      setStyleAttribute(this.element, {\n        'transform': 'translateX(' + -100 + '%) translateX(' + this.setDimension(this.dockSize) + ')'\n      });\n    } else if (this.enableDock && this.position === 'Right' && !this.getState()) {\n      setStyleAttribute(this.element, {\n        'transform': 'translateX(' + 100 + '%) translateX(' + '-' + this.setDimension(this.dockSize) + ')'\n      });\n    }\n\n    if (this.element.classList.contains(CLOSE) && this.enableDock) {\n      setStyleAttribute(this.element, {\n        'width': this.setDimension(this.dockSize)\n      });\n    }\n  };\n\n  Sidebar.prototype.createBackDrop = function () {\n    if (this.target && this.showBackdrop && this.getState()) {\n      var targetString = this.target;\n      var sibling = document.querySelector('.e-main-content') || this.targetEle;\n      this.defaultBackdropDiv = this.createElement('div');\n      addClass([this.defaultBackdropDiv], DEFAULTBACKDROP);\n      setStyleAttribute(this.defaultBackdropDiv, {\n        height: targetString.style.height\n      });\n      sibling.appendChild(this.defaultBackdropDiv);\n    } else if (this.showBackdrop && !this.modal && this.getState()) {\n      this.modal = this.createElement('div');\n      this.modal.className = DEFAULTBACKDROP;\n      this.modal.style.display = 'block';\n      document.body.appendChild(this.modal);\n    }\n  };\n\n  Sidebar.prototype.getPersistData = function () {\n    return this.addOnPersist(['type', 'position', 'isOpen']);\n  };\n  /**\r\n   * Returns the current module name.\r\n   *\r\n   * @returns {string} - returns module name.\r\n   * @private\r\n   *\r\n   */\n\n\n  Sidebar.prototype.getModuleName = function () {\n    return 'sidebar';\n  };\n  /**\r\n   * Shows or hides the Sidebar based on the current state.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  Sidebar.prototype.toggle = function () {\n    if (this.element.classList.contains(OPEN)) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n\n  Sidebar.prototype.getState = function () {\n    return this.element.classList.contains(OPEN) ? true : false;\n  };\n\n  Sidebar.prototype.setMediaQuery = function () {\n    if (this.mediaQuery) {\n      var media = false;\n\n      if (typeof this.mediaQuery === 'string') {\n        media = window.matchMedia(this.mediaQuery).matches;\n      } else {\n        media = this.mediaQuery.matches;\n      }\n\n      if (media && this.windowWidth !== window.innerWidth) {\n        this.show();\n      } else if (this.getState() && this.windowWidth !== window.innerWidth) {\n        this.hide();\n      }\n    }\n  };\n\n  Sidebar.prototype.resize = function () {\n    if (this.type === 'Auto') {\n      if (Browser.isDevice) {\n        addClass([this.element], OVER);\n      } else {\n        addClass([this.element], PUSH);\n      }\n    }\n\n    this.setMediaQuery();\n\n    if (Browser.isDevice) {\n      this.windowWidth = window.innerWidth;\n    }\n  };\n\n  Sidebar.prototype.documentclickHandler = function (e) {\n    if (closest(e.target, '.' + CONTROL$1 + '' + '.' + ROOT$1)) {\n      return;\n    }\n\n    this.hide(e);\n  };\n\n  Sidebar.prototype.enableGestureHandler = function (args) {\n    if (!this.isOpen && this.position === 'Left' && args.swipeDirection === 'Right' && args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {\n      this.show();\n    } else if (this.isOpen && this.position === 'Left' && args.swipeDirection === 'Left') {\n      this.hide();\n    } else if (this.isOpen && this.position === 'Right' && args.swipeDirection === 'Right') {\n      this.hide();\n    } else if (!this.isOpen && this.position === 'Right' && args.swipeDirection === 'Left' && window.innerWidth - args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5) {\n      this.show();\n    }\n  };\n\n  Sidebar.prototype.setEnableGestures = function () {\n    if (this.enableGestures) {\n      this.mainContentEle = new Touch(document.body, {\n        swipe: this.enableGestureHandler.bind(this)\n      });\n      this.sidebarEle = new Touch(this.element, {\n        swipe: this.enableGestureHandler.bind(this)\n      });\n    } else {\n      if (this.mainContentEle && this.sidebarEle) {\n        this.mainContentEle.destroy();\n        this.sidebarEle.destroy();\n      }\n    }\n  };\n\n  Sidebar.prototype.wireEvents = function () {\n    this.setEnableGestures();\n    EventHandler.add(window, 'resize', this.resize, this);\n  };\n\n  Sidebar.prototype.unWireEvents = function () {\n    EventHandler.remove(window, 'resize', this.resize);\n    EventHandler.remove(document, 'mousedown touchstart', this.documentclickHandler);\n\n    if (this.mainContentEle) {\n      this.mainContentEle.destroy();\n    }\n\n    if (this.sidebarEle) {\n      this.sidebarEle.destroy();\n    }\n  };\n  /**\r\n   * Called internally if any of the property value changed.\r\n   *\r\n   * @param {SidebarModel} newProp - specifies newProp value.\r\n   * @param {SidebarModel} oldProp - specifies oldProp value.\r\n   * @returns {void}\r\n   * @private\r\n   *\r\n   */\n\n\n  Sidebar.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var sibling = document.querySelector('.e-main-content') || this.targetEle;\n    var isRendered = this.isServerRendered;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'isOpen':\n          if (this.isOpen) {\n            this.show();\n          } else {\n            this.hide();\n          }\n\n          break;\n\n        case 'width':\n          this.setWidth();\n\n          if (!this.getState()) {\n            this.setDock();\n          }\n\n          break;\n\n        case 'animate':\n          this.setAnimation();\n          break;\n\n        case 'type':\n          this.checkType(false);\n          removeClass([this.element], [VISIBILITY]);\n          this.addClass();\n          addClass([this.element], this.type === 'Auto' ? Browser.isDevice ? ['e-over'] : ['e-push'] : ['e-' + this.type.toLowerCase()]);\n          break;\n\n        case 'position':\n          this.element.style.transform = '';\n          this.setDock();\n\n          if (sibling) {\n            sibling.style[this.position === 'Left' ? 'marginRight' : 'marginLeft'] = '0px';\n          }\n\n          if (this.position === 'Right') {\n            removeClass([this.element], LEFT);\n            addClass([this.element], RIGHT);\n          } else {\n            removeClass([this.element], RIGHT);\n            addClass([this.element], LEFT);\n          }\n\n          this.setType(this.type);\n          break;\n\n        case 'showBackdrop':\n          if (this.showBackdrop) {\n            this.createBackDrop();\n          } else {\n            if (this.modal) {\n              this.modal.style.display = 'none';\n              this.modal.outerHTML = '';\n              this.modal = null;\n            }\n          }\n\n          break;\n\n        case 'target':\n          if (typeof this.target === 'string') {\n            this.setProperties({\n              target: document.querySelector(this.target)\n            }, true);\n          }\n\n          if (isNullOrUndefined(this.target)) {\n            removeClass([this.element], SIDEBARABSOLUTE);\n            removeClass([oldProp.target], CONTEXT);\n            setStyleAttribute(sibling, {\n              'margin-left': 0,\n              'margin-right': 0\n            });\n            document.body.insertAdjacentElement('afterbegin', this.element);\n          }\n\n          this.isServerRendered = false;\n\n          _super.prototype.refresh.call(this);\n\n          this.isServerRendered = isRendered;\n          break;\n\n        case 'closeOnDocumentClick':\n          this.setCloseOnDocumentClick();\n          break;\n\n        case 'enableDock':\n          if (!this.getState()) {\n            this.setDock();\n          }\n\n          break;\n\n        case 'zIndex':\n          this.setZindex();\n          break;\n\n        case 'mediaQuery':\n          this.setMediaQuery();\n          break;\n\n        case 'enableGestures':\n          this.setEnableGestures();\n          break;\n\n        case 'enableRtl':\n          this.setEnableRTL();\n          break;\n      }\n    }\n  };\n\n  Sidebar.prototype.setType = function (type) {\n    var elementWidth = this.element.getBoundingClientRect().width;\n    this.setZindex();\n    var sibling = document.querySelector('.e-main-content') || this.targetEle;\n\n    if (sibling) {\n      sibling.style.transform = 'translateX(' + 0 + 'px)';\n\n      if (!Browser.isDevice && this.type !== 'Auto' && !(this.type === 'Over' && this.enableDock)) {\n        sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = '0px';\n      }\n    }\n\n    var margin = this.position === 'Left' ? elementWidth + 'px' : elementWidth + 'px';\n    var eleWidth = this.position === 'Left' ? elementWidth : -elementWidth;\n    removeClass([this.element], [PUSH, OVER, SLIDE]);\n\n    switch (type) {\n      case 'Push':\n        addClass([this.element], [PUSH]);\n\n        if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {\n          sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = margin;\n        }\n\n        break;\n\n      case 'Slide':\n        addClass([this.element], [SLIDE]);\n\n        if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {\n          sibling.style.transform = 'translateX(' + eleWidth + 'px)';\n        }\n\n        break;\n\n      case 'Over':\n        addClass([this.element], [OVER]);\n\n        if (this.enableDock && (this.element.classList.contains(CLOSE) || this.isOpen)) {\n          if (sibling) {\n            sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = this.setDimension(this.dockSize);\n          }\n        }\n\n        break;\n\n      case 'Auto':\n        addClass([this.element], [TRASITION]);\n\n        if (Browser.isDevice) {\n          if (sibling && this.enableDock && !this.getState()) {\n            sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = margin;\n            addClass([this.element], PUSH);\n          } else {\n            addClass([this.element], OVER);\n          }\n        } else {\n          addClass([this.element], PUSH);\n\n          if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {\n            sibling.style[this.position === 'Left' ? 'marginLeft' : 'marginRight'] = margin;\n          }\n        }\n\n        this.createBackDrop();\n    }\n  };\n  /**\r\n   * Removes the control from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\r\n   *\r\n   * @returns {void}\r\n   *\r\n   */\n\n\n  Sidebar.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    if (this.target) {\n      removeClass([this.target], CONTEXT);\n    }\n\n    this.destroyBackDrop();\n\n    if (this.element) {\n      removeClass([this.element], [OPEN, CLOSE, PUSH, SLIDE, OVER, LEFT, RIGHT, TRASITION]);\n      removeClass([this.element], SIDEBARABSOLUTE);\n      this.element.style.width = '';\n      this.element.style.zIndex = '';\n      this.element.style.transform = '';\n\n      if (!isNullOrUndefined(this.sidebarEleCopy.getAttribute('tabindex'))) {\n        this.element.setAttribute('tabindex', this.tabIndex);\n      } else {\n        this.element.removeAttribute('tabindex');\n      }\n    }\n\n    this.windowWidth = null;\n    var sibling = document.querySelector('.e-main-content') || this.targetEle;\n\n    if (!isNullOrUndefined(sibling)) {\n      sibling.style.margin = '';\n      sibling.style.transform = '';\n    }\n\n    this.unWireEvents();\n  };\n\n  __decorate$9([Property('auto')], Sidebar.prototype, \"dockSize\", void 0);\n\n  __decorate$9([Property(null)], Sidebar.prototype, \"mediaQuery\", void 0);\n\n  __decorate$9([Property(false)], Sidebar.prototype, \"enableDock\", void 0);\n\n  __decorate$9([Property('en-US')], Sidebar.prototype, \"locale\", void 0);\n\n  __decorate$9([Property(false)], Sidebar.prototype, \"enablePersistence\", void 0);\n\n  __decorate$9([Property(true)], Sidebar.prototype, \"enableGestures\", void 0);\n\n  __decorate$9([Property(false)], Sidebar.prototype, \"isOpen\", void 0);\n\n  __decorate$9([Property(false)], Sidebar.prototype, \"enableRtl\", void 0);\n\n  __decorate$9([Property(true)], Sidebar.prototype, \"animate\", void 0);\n\n  __decorate$9([Property('auto')], Sidebar.prototype, \"height\", void 0);\n\n  __decorate$9([Property(false)], Sidebar.prototype, \"closeOnDocumentClick\", void 0);\n\n  __decorate$9([Property('Left')], Sidebar.prototype, \"position\", void 0);\n\n  __decorate$9([Property(null)], Sidebar.prototype, \"target\", void 0);\n\n  __decorate$9([Property(false)], Sidebar.prototype, \"showBackdrop\", void 0);\n\n  __decorate$9([Property('Auto')], Sidebar.prototype, \"type\", void 0);\n\n  __decorate$9([Property('auto')], Sidebar.prototype, \"width\", void 0);\n\n  __decorate$9([Property(1000)], Sidebar.prototype, \"zIndex\", void 0);\n\n  __decorate$9([Event()], Sidebar.prototype, \"created\", void 0);\n\n  __decorate$9([Event()], Sidebar.prototype, \"close\", void 0);\n\n  __decorate$9([Event()], Sidebar.prototype, \"open\", void 0);\n\n  __decorate$9([Event()], Sidebar.prototype, \"change\", void 0);\n\n  __decorate$9([Event()], Sidebar.prototype, \"destroyed\", void 0);\n\n  Sidebar = __decorate$9([NotifyPropertyChanges], Sidebar);\n  return Sidebar;\n}(Component);\n/**\r\n * Sidebar modules\r\n */\n\n\nvar __extends$10 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$10 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar ICONRIGHT = 'e-icon-right';\nvar ITEMTEXTCLASS = 'e-breadcrumb-text';\nvar ICONCLASS = 'e-breadcrumb-icon';\nvar MENUCLASS = 'e-breadcrumb-menu';\nvar ITEMCLASS = 'e-breadcrumb-item';\nvar POPUPCLASS = 'e-breadcrumb-popup';\nvar WRAPMODECLASS = 'e-breadcrumb-wrap-mode';\nvar SCROLLMODECLASS = 'e-breadcrumb-scroll-mode';\nvar TABINDEX = 'tabindex';\nvar DISABLEDCLASS = 'e-disabled';\nvar ARIADISABLED = 'aria-disabled';\nvar DOT = '.';\n/**\r\n * Defines the Breadcrumb overflow modes.\r\n */\n\nvar BreadcrumbOverflowMode = /*#__PURE__*/(() => {\n  (function (BreadcrumbOverflowMode) {\n    /**\r\n     * Hidden mode shows the maximum number of items possible in the container space and hides the remaining items.\r\n     * Clicking on a previous item will make the hidden item visible.\r\n     */\n    BreadcrumbOverflowMode[\"Hidden\"] = \"Hidden\";\n    /**\r\n     * Collapsed mode shows the first and last Breadcrumb items and hides the remaining items with a collapsed icon.\r\n     * When the collapsed icon is clicked, all items become visible and navigable.\r\n     */\n\n    BreadcrumbOverflowMode[\"Collapsed\"] = \"Collapsed\";\n    /**\r\n     * Menu mode shows the number of Breadcrumb items that can be accommodated within the container space and creates a submenu with the remaining items.\r\n     */\n\n    BreadcrumbOverflowMode[\"Menu\"] = \"Menu\";\n    /**\r\n     * Wrap mode wraps the items to multiple lines when the Breadcrumb’s width exceeds the container space.\r\n     */\n\n    BreadcrumbOverflowMode[\"Wrap\"] = \"Wrap\";\n    /**\r\n     * Scroll mode shows an HTML scroll bar when the Breadcrumb’s width exceeds the container space.\r\n     */\n\n    BreadcrumbOverflowMode[\"Scroll\"] = \"Scroll\";\n    /**\r\n     * None mode shows all the items in a single line.\r\n     */\n\n    BreadcrumbOverflowMode[\"None\"] = \"None\";\n  })(BreadcrumbOverflowMode || (BreadcrumbOverflowMode = {}));\n\n  return BreadcrumbOverflowMode;\n})();\n\nvar BreadcrumbItem =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$10(BreadcrumbItem, _super);\n\n  function BreadcrumbItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$10([Property('')], BreadcrumbItem.prototype, \"text\", void 0);\n\n  __decorate$10([Property('')], BreadcrumbItem.prototype, \"url\", void 0);\n\n  __decorate$10([Property(null)], BreadcrumbItem.prototype, \"iconCss\", void 0);\n\n  __decorate$10([Property(false)], BreadcrumbItem.prototype, \"disabled\", void 0);\n\n  return BreadcrumbItem;\n}(ChildProperty);\n/**\r\n * Breadcrumb is a graphical user interface that helps to identify or highlight the current location within a hierarchical structure of websites.\r\n * The aim is to make the user aware of their current position in a hierarchy of website links.\r\n * ```html\r\n * <nav id='breadcrumb'></nav>\r\n * ```\r\n * ```typescript\r\n * <script>\r\n * var breadcrumbObj = new Breadcrumb({ items: [{ text: 'Home', url: '/' }, { text: 'Index', url: './index.html }]});\r\n * breadcrumbObj.appendTo(\"#breadcrumb\");\r\n * </script>\r\n * ```\r\n */\n\n\nvar Breadcrumb =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$10(Breadcrumb, _super);\n  /**\r\n   * Constructor for creating the widget.\r\n   *\r\n   * @private\r\n   * @param {BreadcrumbModel} options - Specifies the Breadcrumb model.\r\n   * @param {string | HTMLElement} element - Specifies the element.\r\n   */\n\n\n  function Breadcrumb(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.isPopupCreated = false;\n    return _this;\n  }\n  /**\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  Breadcrumb.prototype.preRender = function () {// pre render code\n  };\n  /**\r\n   * Initialize the control rendering.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   */\n\n\n  Breadcrumb.prototype.render = function () {\n    this.initialize();\n    this.renderItems(this.items);\n    this.wireEvents();\n  };\n\n  Breadcrumb.prototype.initialize = function () {\n    this._maxItems = this.maxItems;\n    this.element.setAttribute('aria-label', 'breadcrumb');\n\n    if (this.cssClass) {\n      addClass([this.element], this.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n    }\n\n    if (this.enableRtl) {\n      this.element.classList.add('e-rtl');\n    }\n\n    if (this.disabled) {\n      this.element.classList.add(DISABLEDCLASS);\n      this.element.setAttribute(ARIADISABLED, 'true');\n    }\n\n    if (this.overflowMode === 'Wrap') {\n      this.element.classList.add(WRAPMODECLASS);\n    } else if (this.overflowMode === 'Scroll') {\n      this.element.classList.add(SCROLLMODECLASS);\n    }\n\n    this.initItems();\n    this.initPvtProps();\n  };\n\n  Breadcrumb.prototype.initPvtProps = function () {\n    if (this.overflowMode === 'Hidden' && this._maxItems > 0) {\n      this.endIndex = this.getEndIndex();\n      this.startIndex = this.endIndex + 1 - (this._maxItems - 1);\n    }\n\n    if (this.overflowMode === 'Menu') {\n      if (this._maxItems >= 0) {\n        this.startIndex = this._maxItems > 1 ? 1 : 0;\n        this.endIndex = this.getEndIndex();\n        this.popupUl = this.createElement('ul', {\n          attrs: {\n            TABINDEX: '0',\n            'role': 'menu'\n          }\n        });\n      } else {\n        this.startIndex = this.endIndex = null;\n      }\n    }\n  };\n\n  Breadcrumb.prototype.getEndIndex = function () {\n    var _this = this;\n\n    var endIndex;\n\n    if (this.activeItem) {\n      this.items.forEach(function (item, idx) {\n        if (item.url === _this.activeItem || item.text === _this.activeItem) {\n          endIndex = idx;\n        }\n      });\n    } else {\n      endIndex = this.items.length - 1;\n    }\n\n    return endIndex;\n  };\n\n  Breadcrumb.prototype.initItems = function () {\n    if (!this.items.length) {\n      var baseUri = void 0;\n      var uri = void 0;\n      var items = [];\n\n      if (this.url) {\n        var url = new URL(this.url, window.location.origin);\n        baseUri = url.origin + '/';\n        uri = url.href.split(baseUri)[1].split('/');\n      } else {\n        baseUri = window.location.origin + '/';\n        uri = window.location.href.split(baseUri)[1].split('/');\n      }\n\n      items.push({\n        iconCss: 'e-icons e-home',\n        url: baseUri\n      });\n\n      for (var i = 0; i < uri.length; i++) {\n        if (uri[i]) {\n          items.push({\n            text: uri[i],\n            url: baseUri + uri[i]\n          });\n          baseUri += uri[i] + '/';\n        }\n      }\n\n      this.setProperties({\n        items: items\n      }, true);\n    }\n  };\n\n  Breadcrumb.prototype.renderItems = function (items) {\n    var _this = this;\n\n    var item;\n    var isSingleLevel;\n    var isIconRight = this.element.classList.contains(ICONRIGHT);\n    var itemsLength = items.length;\n\n    if (itemsLength) {\n      var isActiveItem = void 0;\n      var isLastItem = void 0;\n      var isLastItemInPopup_1;\n      var j_1 = 0;\n      var wrapDiv = void 0;\n      var len = itemsLength * 2 - 1;\n      var isItemCancelled_1 = false;\n      var ol = this.createElement('ol', {\n        className: this.overflowMode === 'Wrap' ? 'e-breadcrumb-wrapped-ol' : ''\n      });\n      var firstOl = this.createElement('ol', {\n        className: this.overflowMode === 'Wrap' ? 'e-breadcrumb-first-ol' : ''\n      });\n      var showIcon = this.hasField(items, 'iconCss');\n      var isCollasped = this.overflowMode === 'Collapsed' && this._maxItems > 0 && itemsLength > this._maxItems && !this.isExpanded;\n      var isDefaultOverflowMode_1 = this.overflowMode === 'Hidden' && this._maxItems > 0;\n\n      if (this.overflowMode === 'Menu' && this.popupUl) {\n        this.popupUl.innerHTML = '';\n      }\n\n      var listBaseOptions = {\n        moduleName: this.getModuleName(),\n        showIcon: showIcon,\n        itemNavigable: true,\n        itemCreated: function (args) {\n          var isLastItem = args.curData.isLastItem;\n\n          if (isLastItem && args.item.children.length && !_this.itemTemplate) {\n            delete args.curData.isLastItem;\n\n            if (!isLastItemInPopup_1 && !_this.enableActiveItemNavigation) {\n              args.item.innerHTML = _this.createElement('span', {\n                className: ITEMTEXTCLASS,\n                innerHTML: args.item.children[0].innerHTML\n              }).outerHTML;\n            }\n          }\n\n          if (args.curData.iconCss && !args.curData.text && !_this.itemTemplate) {\n            args.item.classList.add('e-icon-item');\n          }\n\n          if (isDefaultOverflowMode_1) {\n            args.item.setAttribute('item-index', j_1.toString());\n          }\n\n          var eventArgs = {\n            item: extend({}, args.curData.properties ? args.curData.properties : args.curData),\n            element: args.item,\n            cancel: false\n          };\n\n          _this.trigger('beforeItemRender', eventArgs);\n\n          isItemCancelled_1 = eventArgs.cancel;\n          var containsRightIcon = isIconRight || eventArgs.element.classList.contains(ICONRIGHT);\n\n          if (containsRightIcon && args.curData.iconCss && !_this.itemTemplate) {\n            args.item.querySelector('.e-anchor-wrap').appendChild(args.item.querySelector(DOT + ICONCLASS));\n          }\n\n          if (eventArgs.item.disabled) {\n            args.item.setAttribute(ARIADISABLED, 'true');\n            args.item.classList.add(DISABLEDCLASS);\n          }\n\n          if ((eventArgs.item.disabled || _this.disabled) && args.item.children.length && !_this.itemTemplate) {\n            args.item.children[0].setAttribute(TABINDEX, '-1');\n          }\n\n          if (args.curData.isEmptyUrl) {\n            args.item.children[0].removeAttribute('href');\n\n            if ((!isLastItem || isLastItem && _this.enableActiveItemNavigation) && !(eventArgs.item.disabled || _this.disabled)) {\n              args.item.children[0].setAttribute(TABINDEX, '0');\n              EventHandler.add(args.item.children[0], 'keydown', _this.keyDownHandler, _this);\n            }\n          }\n\n          args.item.removeAttribute('role');\n\n          if (isLastItem) {\n            args.item.setAttribute('data-active-item', '');\n          }\n\n          if (!_this.itemTemplate) {\n            _this.beforeItemRenderChanges(args.curData, eventArgs.item, args.item, containsRightIcon);\n          }\n        }\n      };\n\n      for (var i = 0; i < len; i % 2 && j_1++, i++) {\n        isActiveItem = this.activeItem && (this.activeItem === items[j_1].url || this.activeItem === items[j_1].text);\n\n        if (isCollasped && i > 1 && i < len - 2) {\n          continue;\n        } else if (isDefaultOverflowMode_1 && (j_1 < this.startIndex || j_1 > this.endIndex) && (i % 2 ? j_1 !== this.startIndex - 1 : true) && j_1 !== 0) {\n          continue;\n        }\n\n        if (i % 2) {\n          // separator item\n          wrapDiv = this.createElement('div', {\n            className: 'e-breadcrumb-item-wrapper'\n          });\n          listBaseOptions.template = this.separatorTemplate ? this.separatorTemplate : '/';\n          listBaseOptions.itemClass = 'e-breadcrumb-separator';\n          isSingleLevel = false;\n          item = [{\n            previousItem: items[j_1],\n            nextItem: items[j_1 + 1]\n          }];\n        } else {\n          // list item\n          listBaseOptions.itemClass = '';\n\n          if (this.itemTemplate) {\n            listBaseOptions.template = this.itemTemplate;\n            isSingleLevel = false;\n          } else {\n            isSingleLevel = true;\n          }\n\n          item = [extend({}, items[j_1].properties ? items[j_1].properties : items[j_1])];\n\n          if (!item[0].url && !this.itemTemplate) {\n            item = [extend({}, item[0], {\n              isEmptyUrl: true,\n              url: '#'\n            })];\n          }\n\n          isLastItem = (isDefaultOverflowMode_1 || this.overflowMode === 'Menu') && j_1 === this.endIndex;\n\n          if ((i === len - 1 || isLastItem) && !this.itemTemplate || isActiveItem) {\n            item[0].isLastItem = true;\n          }\n        }\n\n        var parent_1 = ol;\n        var lastPopupItemIdx = this.startIndex + this.endIndex - this._maxItems;\n\n        if (this.overflowMode === 'Menu' && (j_1 >= this.startIndex && j_1 <= lastPopupItemIdx && (i % 2 ? !(j_1 === lastPopupItemIdx) : true) && this.endIndex >= this._maxItems && this._maxItems > 0 || this._maxItems === 0)) {\n          if (i % 2) {\n            continue;\n          } else {\n            parent_1 = this.popupUl;\n\n            if (isLastItem) {\n              isLastItemInPopup_1 = true;\n            }\n          }\n        } else if (this.overflowMode === 'Wrap') {\n          if (i === 0) {\n            parent_1 = firstOl;\n          } else {\n            parent_1 = wrapDiv;\n          }\n        }\n\n        var li = ListBase.createList(this.createElement, item, listBaseOptions, isSingleLevel, this).childNodes;\n\n        if (!isItemCancelled_1) {\n          append(li, parent_1);\n        } else if (isDefaultOverflowMode_1 || isCollasped || this.overflowMode === 'Menu' || this.overflowMode === 'Wrap') {\n          items.splice(j_1, 1);\n          this.initPvtProps();\n          return this.reRenderItems();\n        } else if (i === len - 1 || isLastItem) {\n          remove(parent_1.lastElementChild);\n        }\n\n        if (this.overflowMode === 'Wrap' && i !== 0 && i % 2 === 0) {\n          ol.appendChild(wrapDiv);\n        }\n\n        if (isCollasped && i === 1) {\n          var li_1 = this.createElement('li', {\n            className: 'e-icons e-breadcrumb-collapsed',\n            attrs: {\n              TABINDEX: '0'\n            }\n          });\n          EventHandler.add(li_1, 'keyup', this.expandHandler, this);\n          ol.appendChild(li_1);\n        }\n\n        if (this.overflowMode === 'Menu' && this.startIndex === i && this.endIndex >= this._maxItems && this._maxItems >= 0) {\n          var menu = this.getMenuElement();\n          EventHandler.add(menu, 'keyup', this.keyDownHandler, this);\n          ol.appendChild(menu);\n        }\n\n        if (isActiveItem || isLastItem) {\n          break;\n        }\n\n        if (isItemCancelled_1) {\n          i++;\n        }\n      }\n\n      if (this.isReact) {\n        this.renderReactTemplates();\n      }\n\n      if (this.overflowMode === 'Wrap') {\n        this.element.appendChild(firstOl);\n      }\n\n      this.element.appendChild(ol);\n      this.calculateMaxItems();\n    }\n  };\n\n  Breadcrumb.prototype.calculateMaxItems = function () {\n    if (this.overflowMode === 'Hidden' || this.overflowMode === 'Collapsed' || this.overflowMode === 'Menu') {\n      var maxItems = void 0;\n      var width = this.element.offsetWidth;\n      var liElems = [].slice.call(this.element.children[0].children).reverse();\n      var liWidth = this.overflowMode === 'Menu' ? 0 : liElems[liElems.length - 1].offsetWidth + (liElems[liElems.length - 2] ? liElems[liElems.length - 2].offsetWidth : 0);\n\n      if (this.overflowMode === 'Menu') {\n        var menuEle = this.getMenuElement();\n        this.element.appendChild(menuEle);\n        liWidth += menuEle.offsetWidth;\n        remove(menuEle);\n      }\n\n      for (var i = 0; i < liElems.length - 2; i++) {\n        if (liWidth > width) {\n          maxItems = Math.ceil((i - 1) / 2) + (this.overflowMode === 'Menu' && i <= 2 ? 0 : 1);\n\n          if ((this.maxItems > maxItems && !(this.maxItems > -1 && maxItems === -1) || this.maxItems === -1) && this._maxItems !== maxItems) {\n            this._maxItems = maxItems;\n            this.initPvtProps();\n            return this.reRenderItems();\n          } else {\n            break;\n          }\n        } else {\n          if (this.overflowMode === 'Menu' && i === 2) {\n            liWidth += liElems[liElems.length - 1].offsetWidth + liElems[liElems.length - 2].offsetWidth;\n\n            if (liWidth > width) {\n              this._maxItems = 1;\n              this.initPvtProps();\n              return this.reRenderItems();\n            }\n          }\n\n          if (!(this.overflowMode === 'Menu' && liElems[i].classList.contains(MENUCLASS))) {\n            liWidth += liElems[i].offsetWidth;\n          }\n        }\n      }\n    } else if ((this.overflowMode === 'Wrap' || this.overflowMode === 'Scroll') && this._maxItems > 0) {\n      var width = 0;\n      var liElems = this.element.querySelectorAll(DOT + ITEMCLASS);\n\n      if (liElems.length > this._maxItems + this._maxItems - 1) {\n        for (var i = this.overflowMode === 'Wrap' ? 1 : 0; i < this._maxItems + this._maxItems - 1; i++) {\n          width += liElems[i].offsetWidth;\n        }\n\n        width = width + 5 + parseInt(getComputedStyle(this.element.children[0]).paddingLeft, 10) * 2;\n\n        if (this.overflowMode === 'Wrap') {\n          this.element.querySelector('.e-breadcrumb-wrapped-ol').style.width = width + 'px';\n        } else {\n          this.element.style.width = width + 'px';\n        }\n      }\n    }\n  };\n\n  Breadcrumb.prototype.hasField = function (items, field) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      if (items[i][\"\" + field]) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Breadcrumb.prototype.getMenuElement = function () {\n    return this.createElement('li', {\n      className: 'e-icons e-breadcrumb-menu',\n      attrs: {\n        TABINDEX: '0'\n      }\n    });\n  };\n\n  Breadcrumb.prototype.beforeItemRenderChanges = function (prevItem, currItem, elem, isRightIcon) {\n    var wrapElem = elem.querySelector('.e-anchor-wrap');\n\n    if (currItem.text !== prevItem.text) {\n      wrapElem.childNodes.forEach(function (child) {\n        if (child.nodeType === Node.TEXT_NODE) {\n          child.textContent = currItem.text;\n        }\n      });\n    }\n\n    if (currItem.iconCss !== prevItem.iconCss && wrapElem) {\n      // wrapElem - for checking it is item not a separator\n      var iconElem = elem.querySelector(DOT + ICONCLASS);\n\n      if (iconElem) {\n        if (currItem.iconCss) {\n          removeClass([iconElem], prevItem.iconCss.split(' '));\n          addClass([iconElem], currItem.iconCss.split(' '));\n        } else {\n          remove(iconElem);\n        }\n      } else if (currItem.iconCss) {\n        var iconElem_1 = this.createElement('span', {\n          className: ICONCLASS + ' ' + currItem.iconCss\n        });\n\n        if (isRightIcon) {\n          append([iconElem_1], wrapElem);\n        } else {\n          wrapElem.insertBefore(iconElem_1, wrapElem.childNodes[0]);\n        }\n      }\n    }\n\n    if (currItem.url !== prevItem.url && this.enableNavigation) {\n      var anchor = elem.querySelector('a.' + ITEMTEXTCLASS);\n\n      if (anchor) {\n        if (currItem.url) {\n          anchor.setAttribute('href', currItem.url);\n        } else {\n          anchor.removeAttribute('href');\n        }\n      }\n    }\n  };\n\n  Breadcrumb.prototype.reRenderItems = function () {\n    this.element.innerHTML = '';\n    this.renderItems(this.items);\n  };\n\n  Breadcrumb.prototype.clickHandler = function (e) {\n    var li = closest(e.target, DOT + ITEMCLASS + ':not(.e-breadcrumb-separator)');\n\n    if (!this.enableNavigation) {\n      e.preventDefault();\n    }\n\n    if (li && (closest(e.target, DOT + ITEMTEXTCLASS) || this.itemTemplate)) {\n      var idx = void 0;\n\n      if (this.overflowMode === 'Wrap') {\n        idx = [].slice.call(this.element.querySelectorAll(DOT + ITEMCLASS)).indexOf(li);\n      } else {\n        idx = [].slice.call(li.parentElement.children).indexOf(li);\n      }\n\n      if (this.overflowMode === 'Menu') {\n        if (closest(e.target, DOT + POPUPCLASS)) {\n          idx += this.startIndex;\n          this.endIndex = idx;\n\n          if (e.type === 'keydown') {\n            this.documentClickHandler(e);\n          }\n        } else if (this.element.querySelector(DOT + MENUCLASS)) {\n          if (idx > [].slice.call(this.element.children[0].children).indexOf(this.element.querySelector(DOT + MENUCLASS))) {\n            idx += this.popupUl.childElementCount * 2 - 2;\n            idx = Math.floor(idx / 2);\n            this.endIndex = idx;\n          } else {\n            this.startIndex = this.endIndex = idx;\n          }\n        } else {\n          idx = Math.floor(idx / 2);\n          this.startIndex = this.endIndex = idx;\n        }\n      } else {\n        idx = Math.floor(idx / 2);\n      }\n\n      if (this.overflowMode === 'Hidden' && this._maxItems > 0 && this.endIndex !== 0) {\n        idx = parseInt(li.getAttribute('item-index'), 10);\n\n        if (this.startIndex > 1) {\n          this.startIndex -= this.endIndex - idx;\n        }\n\n        this.endIndex = idx;\n      }\n\n      this.trigger('itemClick', {\n        element: li,\n        item: this.items[idx],\n        event: e\n      });\n      this.activeItem = this.items[idx].url || this.items[idx].text;\n      this.dataBind();\n    }\n\n    if (e.target.classList.contains('e-breadcrumb-collapsed')) {\n      this.isExpanded = true;\n      this.reRenderItems();\n    }\n\n    if (e.target.classList.contains(MENUCLASS) && !this.isPopupCreated) {\n      this.renderPopup();\n    }\n  };\n\n  Breadcrumb.prototype.renderPopup = function () {\n    var _this = this;\n\n    var wrapper = this.createElement('div', {\n      className: POPUPCLASS + ' ' + this.cssClass + (this.enableRtl ? ' e-rtl' : '')\n    });\n    document.body.appendChild(wrapper);\n    this.isPopupCreated = true;\n    this.popupObj = new Popup(wrapper, {\n      content: this.popupUl,\n      relateTo: this.element.querySelector(DOT + MENUCLASS),\n      enableRtl: this.enableRtl,\n      position: {\n        X: 'left',\n        Y: 'bottom'\n      },\n      collision: {\n        X: 'fit',\n        Y: 'flip'\n      },\n      open: function () {\n        _this.popupUl.focus();\n      }\n    });\n    this.popupWireEvents();\n    this.popupObj.show();\n  };\n\n  Breadcrumb.prototype.documentClickHandler = function (e) {\n    if (this.overflowMode === 'Menu' && this.popupObj && this.popupObj.element.classList.contains('e-popup-open') && !closest(e.target, DOT + MENUCLASS)) {\n      this.popupObj.hide();\n      this.popupObj.destroy();\n      this.isPopupCreated = false;\n      detach(this.popupObj.element);\n    }\n  };\n\n  Breadcrumb.prototype.resize = function () {\n    this._maxItems = this.maxItems;\n    this.initPvtProps();\n    this.reRenderItems();\n  };\n\n  Breadcrumb.prototype.expandHandler = function (e) {\n    if (e.key === 'Enter') {\n      this.isExpanded = true;\n      this.reRenderItems();\n    }\n  };\n\n  Breadcrumb.prototype.keyDownHandler = function (e) {\n    if (e.key === 'Enter') {\n      this.clickHandler(e);\n    }\n  };\n\n  Breadcrumb.prototype.popupKeyDownHandler = function (e) {\n    if (e.key === 'Escape') {\n      this.documentClickHandler(e);\n    }\n  };\n  /**\r\n   * Called internally if any of the property value changed.\r\n   *\r\n   * @private\r\n   * @param {BreadcrumbModel} newProp - Specifies the new properties.\r\n   * @param {BreadcrumbModel} oldProp - Specifies the old properties.\r\n   * @returns {void}\r\n   */\n\n\n  Breadcrumb.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'items':\n        case 'enableActiveItemNavigation':\n          this.reRenderItems();\n          break;\n\n        case 'activeItem':\n          this._maxItems = this.maxItems;\n          this.initPvtProps();\n          this.reRenderItems();\n          break;\n\n        case 'overflowMode':\n        case 'maxItems':\n          this._maxItems = this.maxItems;\n          this.initPvtProps();\n          this.reRenderItems();\n\n          if (oldProp.overflowMode === 'Wrap') {\n            this.element.classList.remove(WRAPMODECLASS);\n          } else if (newProp.overflowMode === 'Wrap') {\n            this.element.classList.add(WRAPMODECLASS);\n          }\n\n          if (oldProp.overflowMode === 'Scroll') {\n            this.element.classList.remove(SCROLLMODECLASS);\n          } else if (newProp.overflowMode === 'Scroll') {\n            this.element.classList.add(SCROLLMODECLASS);\n          }\n\n          break;\n\n        case 'url':\n          this.initItems();\n          this.reRenderItems();\n          break;\n\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([this.element], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([this.element], newProp.cssClass.replace(/\\s+/g, ' ').trim().split(' '));\n          }\n\n          if (oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1 && !(newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1) || !(oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1) && newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1) {\n            this.reRenderItems();\n          }\n\n          break;\n\n        case 'enableRtl':\n          this.element.classList.toggle('e-rtl');\n          break;\n\n        case 'disabled':\n          this.element.classList.toggle(DISABLEDCLASS);\n          this.element.setAttribute(ARIADISABLED, newProp.disabled + '');\n          break;\n      }\n    }\n  };\n\n  Breadcrumb.prototype.wireEvents = function () {\n    this.delegateClickHanlder = this.documentClickHandler.bind(this);\n    EventHandler.add(document, 'click', this.delegateClickHanlder, this);\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n    window.addEventListener('resize', this.resize.bind(this));\n  };\n\n  Breadcrumb.prototype.popupWireEvents = function () {\n    EventHandler.add(this.popupObj.element, 'click', this.clickHandler, this);\n    EventHandler.add(this.popupObj.element, 'keydown', this.popupKeyDownHandler, this);\n  };\n\n  Breadcrumb.prototype.unWireEvents = function () {\n    EventHandler.remove(document, 'click', this.delegateClickHanlder);\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n    window.removeEventListener('resize', this.resize.bind(this));\n\n    if (this.popupObj) {\n      EventHandler.remove(this.popupObj.element, 'click', this.clickHandler);\n      EventHandler.remove(this.popupObj.element, 'keydown', this.popupKeyDownHandler);\n    }\n  };\n  /**\r\n   * Get the properties to be maintained in the persisted state.\r\n   *\r\n   * @returns {string} - Persist data\r\n   */\n\n\n  Breadcrumb.prototype.getPersistData = function () {\n    return this.addOnPersist(['activeItem']);\n  };\n  /**\r\n   * Get module name.\r\n   *\r\n   * @private\r\n   * @returns {string} - Module Name\r\n   */\n\n\n  Breadcrumb.prototype.getModuleName = function () {\n    return 'breadcrumb';\n  };\n  /**\r\n   * Destroys the widget.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  Breadcrumb.prototype.destroy = function () {\n    var _this = this;\n\n    var classes = [];\n    var attributes$$1 = ['aria-label'];\n\n    if (this.cssClass) {\n      classes.concat(this.cssClass.split(' '));\n    }\n\n    if (this.enableRtl) {\n      classes.push('e-rtl');\n    }\n\n    if (this.disabled) {\n      classes.push(DISABLEDCLASS);\n      attributes$$1.push(ARIADISABLED);\n    }\n\n    if (this.overflowMode === 'Wrap') {\n      classes.push(WRAPMODECLASS);\n    } else if (this.overflowMode === 'Scroll') {\n      classes.push(SCROLLMODECLASS);\n    }\n\n    this.unWireEvents();\n    this.element.innerHTML = '';\n    removeClass([this.element], classes);\n    attributes$$1.forEach(function (attribute) {\n      _this.element.removeAttribute(attribute);\n    });\n\n    _super.prototype.destroy.call(this);\n  };\n\n  __decorate$10([Property('')], Breadcrumb.prototype, \"url\", void 0);\n\n  __decorate$10([Collection([], BreadcrumbItem)], Breadcrumb.prototype, \"items\", void 0);\n\n  __decorate$10([Property('')], Breadcrumb.prototype, \"activeItem\", void 0);\n\n  __decorate$10([Property(-1)], Breadcrumb.prototype, \"maxItems\", void 0);\n\n  __decorate$10([Property('Menu')], Breadcrumb.prototype, \"overflowMode\", void 0);\n\n  __decorate$10([Property('')], Breadcrumb.prototype, \"cssClass\", void 0);\n\n  __decorate$10([Property(null)], Breadcrumb.prototype, \"itemTemplate\", void 0);\n\n  __decorate$10([Property('/')], Breadcrumb.prototype, \"separatorTemplate\", void 0);\n\n  __decorate$10([Property(true)], Breadcrumb.prototype, \"enableNavigation\", void 0);\n\n  __decorate$10([Property(false)], Breadcrumb.prototype, \"enableActiveItemNavigation\", void 0);\n\n  __decorate$10([Property(false)], Breadcrumb.prototype, \"disabled\", void 0);\n\n  __decorate$10([Property('')], Breadcrumb.prototype, \"locale\", void 0);\n\n  __decorate$10([Event()], Breadcrumb.prototype, \"beforeItemRender\", void 0);\n\n  __decorate$10([Event()], Breadcrumb.prototype, \"itemClick\", void 0);\n\n  __decorate$10([Event()], Breadcrumb.prototype, \"created\", void 0);\n\n  Breadcrumb = __decorate$10([NotifyPropertyChanges], Breadcrumb);\n  return Breadcrumb;\n}(Component);\n/**\r\n * Breadcrumb modules\r\n */\n\n\nvar __extends$11 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$11 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// Constant variables\n\n\nvar CLS_CAROUSEL = 'e-carousel';\nvar CLS_ACTIVE$2 = 'e-active';\nvar CLS_RTL$5 = 'e-rtl';\nvar CLS_PARTIAL = 'e-partial';\nvar CLS_SLIDE_CONTAINER = 'e-carousel-slide-container';\nvar CLS_ITEMS$2 = 'e-carousel-items';\nvar CLS_CLONED = 'e-cloned';\nvar CLS_ITEM$3 = 'e-carousel-item';\nvar CLS_PREVIOUS = 'e-previous';\nvar CLS_NEXT = 'e-next';\nvar CLS_PREV_ICON = 'e-previous-icon';\nvar CLS_NEXT_ICON = 'e-next-icon';\nvar CLS_NAVIGATORS = 'e-carousel-navigators';\nvar CLS_INDICATORS = 'e-carousel-indicators';\nvar CLS_INDICATOR_BARS = 'e-indicator-bars';\nvar CLS_INDICATOR_BAR = 'e-indicator-bar';\nvar CLS_INDICATOR$1 = 'e-indicator';\nvar CLS_ICON$1 = 'e-icons';\nvar CLS_PLAY_PAUSE = 'e-play-pause';\nvar CLS_PLAY_ICON = 'e-play-icon';\nvar CLS_PAUSE_ICON = 'e-pause-icon';\nvar CLS_PREV_BUTTON = 'e-previous-button';\nvar CLS_NEXT_BUTTON = 'e-next-button';\nvar CLS_PLAY_BUTTON = 'e-play-button';\nvar CLS_FLAT = 'e-flat';\nvar CLS_ROUND = 'e-round';\nvar CLS_HOVER_ARROWS = 'e-hover-arrows';\nvar CLS_HOVER = 'e-carousel-hover';\nvar CLS_TEMPLATE$2 = 'e-template';\nvar CLS_SLIDE_ANIMATION = 'e-carousel-slide-animation';\nvar CLS_FADE_ANIMATION = 'e-carousel-fade-animation';\nvar CLS_CUSTOM_ANIMATION = 'e-carousel-custom-animation';\nvar CLS_ANIMATION_NONE = 'e-carousel-animation-none';\nvar CLS_PREV_SLIDE = 'e-prev';\nvar CLS_NEXT_SLIDE = 'e-next';\nvar CLS_TRANSITION_START = 'e-transition-start';\nvar CLS_TRANSITION_END = 'e-transition-end';\n/** Specifies the carousel individual item. */\n\nvar CarouselItem =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$11(CarouselItem, _super);\n\n  function CarouselItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate$11([Property()], CarouselItem.prototype, \"cssClass\", void 0);\n\n  __decorate$11([Property()], CarouselItem.prototype, \"interval\", void 0);\n\n  __decorate$11([Property()], CarouselItem.prototype, \"template\", void 0);\n\n  __decorate$11([Property()], CarouselItem.prototype, \"htmlAttributes\", void 0);\n\n  return CarouselItem;\n}(ChildProperty);\n\nvar Carousel =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$11(Carousel, _super);\n  /**\r\n   * Constructor for creating the Carousel widget\r\n   *\r\n   * @param {CarouselModel} options Accepts the carousel model properties to initiate the rendering\r\n   * @param {string | HTMLElement} element Accepts the DOM element reference\r\n   */\n\n\n  function Carousel(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n\n  Carousel.prototype.getModuleName = function () {\n    return CLS_CAROUSEL.replace('e-', '');\n  };\n\n  Carousel.prototype.getPersistData = function () {\n    return this.addOnPersist(['selectedIndex']);\n  };\n\n  Carousel.prototype.preRender = function () {\n    this.keyConfigs = {\n      home: 'home',\n      end: 'end',\n      space: 'space',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      moveDown: 'downarrow'\n    };\n    var defaultLocale = {\n      nextSlide: 'Next slide',\n      of: 'of',\n      pauseSlideTransition: 'Pause slide transition',\n      playSlideTransition: 'Play slide transition',\n      previousSlide: 'Previous slide',\n      slide: 'Slide',\n      slideShow: 'Slide show'\n    };\n    this.localeObj = new L10n(this.getModuleName(), defaultLocale, this.locale);\n  };\n\n  Carousel.prototype.render = function () {\n    this.initialize();\n    this.renderSlides();\n    this.renderNavigators();\n    this.renderPlayButton();\n    this.renderIndicators();\n    this.applyAnimation();\n    this.wireEvents();\n  };\n\n  Carousel.prototype.onPropertyChanged = function (newProp, oldProp) {\n    var target;\n    var rtlElement;\n\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'animationEffect':\n          this.applyAnimation();\n          break;\n\n        case 'cssClass':\n          classList(this.element, [newProp.cssClass], [oldProp.cssClass]);\n          break;\n\n        case 'selectedIndex':\n          this.setActiveSlide(this.selectedIndex, oldProp.selectedIndex > this.selectedIndex ? 'Previous' : 'Next');\n          this.autoSlide();\n          break;\n\n        case 'htmlAttributes':\n          if (!isNullOrUndefined(this.htmlAttributes)) {\n            this.setHtmlAttributes(this.htmlAttributes, this.element);\n          }\n\n          break;\n\n        case 'enableTouchSwipe':\n          if (!this.enableTouchSwipe && this.touchModule) {\n            this.touchModule.destroy();\n          }\n\n          if (this.element.querySelector(\".\" + CLS_ITEMS$2)) {\n            this.renderTouchActions();\n          }\n\n          break;\n\n        case 'loop':\n          if (this.loop && isNullOrUndefined(this.autoSlideInterval)) {\n            this.applySlideInterval();\n          }\n\n          this.handleNavigatorsActions(this.selectedIndex);\n\n          if (this.partialVisible) {\n            this.reRenderSlides();\n          }\n\n          break;\n\n        case 'enableRtl':\n          rtlElement = [].slice.call(this.element.querySelectorAll(\".\" + CLS_PREV_BUTTON + \",\\n                .\" + CLS_NEXT_BUTTON + \", .\" + CLS_PLAY_BUTTON));\n          rtlElement.push(this.element);\n\n          if (this.enableRtl) {\n            addClass(rtlElement, CLS_RTL$5);\n          } else {\n            removeClass(rtlElement, CLS_RTL$5);\n          }\n\n          if (this.partialVisible) {\n            var itemsContainer = this.element.querySelector(\".\" + CLS_ITEMS$2);\n            var cloneCount = this.loop ? 2 : 0;\n            var slideWidth = itemsContainer.firstElementChild.clientWidth;\n            itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + cloneCount);\n          }\n\n          break;\n\n        case 'buttonsVisibility':\n          target = this.element.querySelector(\".\" + CLS_NAVIGATORS);\n\n          if (target) {\n            switch (this.buttonsVisibility) {\n              case 'Hidden':\n                this.resetTemplates(['previousButtonTemplate', 'nextButtonTemplate']);\n                remove(target);\n                break;\n\n              case 'VisibleOnHover':\n                addClass([].slice.call(target.childNodes), CLS_HOVER_ARROWS);\n                break;\n\n              case 'Visible':\n                removeClass([].slice.call(target.childNodes), CLS_HOVER_ARROWS);\n                break;\n            }\n          } else {\n            this.renderNavigators();\n            this.renderPlayButton();\n          }\n\n          break;\n\n        case 'width':\n          setStyleAttribute(this.element, {\n            'width': formatUnit(this.width)\n          });\n          break;\n\n        case 'height':\n          setStyleAttribute(this.element, {\n            'height': formatUnit(this.height)\n          });\n          break;\n\n        case 'autoPlay':\n          if (this.showPlayButton && isNullOrUndefined(this.playButtonTemplate)) {\n            this.playButtonClickHandler(null, true);\n          }\n\n          this.autoSlide();\n          break;\n\n        case 'interval':\n          this.autoSlide();\n          break;\n\n        case 'showIndicators':\n          target = this.element.querySelector(\".\" + CLS_INDICATORS);\n\n          if (!this.showIndicators && target) {\n            this.resetTemplates(['indicatorsTemplate']);\n            remove(target);\n          }\n\n          this.renderIndicators();\n          break;\n\n        case 'showPlayButton':\n          target = this.element.querySelector(\".\" + CLS_PLAY_PAUSE);\n\n          if (!this.showPlayButton && target) {\n            remove(target);\n            this.resetTemplates(['playButtonTemplate']);\n          }\n\n          this.renderPlayButton();\n          break;\n\n        case 'items':\n        case 'dataSource':\n          this.reRenderSlides();\n          break;\n\n        case 'partialVisible':\n          if (this.partialVisible) {\n            addClass([this.element], CLS_PARTIAL);\n          } else {\n            removeClass([this.element], CLS_PARTIAL);\n          }\n\n          this.reRenderSlides();\n          break;\n      }\n    }\n  };\n\n  Carousel.prototype.reRenderSlides = function () {\n    var target = this.element.querySelector(\".\" + CLS_ITEMS$2);\n\n    if (target) {\n      this.resetTemplates(['itemTemplate']);\n      remove(target);\n    }\n\n    this.renderSlides();\n  };\n\n  Carousel.prototype.initialize = function () {\n    var carouselClasses = [];\n\n    if (this.cssClass) {\n      carouselClasses.push(this.cssClass);\n    }\n\n    if (this.enableRtl) {\n      carouselClasses.push(CLS_RTL$5);\n    }\n\n    if (this.partialVisible) {\n      carouselClasses.push(CLS_PARTIAL);\n    }\n\n    addClass([this.element], carouselClasses);\n    setStyleAttribute(this.element, {\n      'width': formatUnit(this.width),\n      'height': formatUnit(this.height)\n    });\n    attributes(this.element, {\n      'tabindex': '0',\n      'aria-roledescription': 'carousel',\n      'aria-label': this.localeObj.getConstant('slideShow')\n    });\n\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      this.setHtmlAttributes(this.htmlAttributes, this.element);\n    }\n  };\n\n  Carousel.prototype.renderSlides = function () {\n    var _this = this;\n\n    var slideContainer = this.element.querySelector('.' + CLS_SLIDE_CONTAINER);\n\n    if (!slideContainer) {\n      slideContainer = this.createElement('div', {\n        className: CLS_SLIDE_CONTAINER\n      });\n      this.element.appendChild(slideContainer);\n    }\n\n    var itemsContainer = this.createElement('div', {\n      className: CLS_ITEMS$2,\n      attrs: {\n        'aria-live': this.autoPlay ? 'off' : 'polite'\n      }\n    });\n    slideContainer.appendChild(itemsContainer);\n\n    if (this.partialVisible && this.loop) {\n      if (this.items.length > 0) {\n        this.items.slice(-2).forEach(function (item, index) {\n          _this.renderSlide(item, item.template, index, itemsContainer, true);\n        });\n      } else if (this.dataSource.length > 0) {\n        this.dataSource.slice(-2).forEach(function (item, index) {\n          _this.renderSlide(item, _this.itemTemplate, index, itemsContainer, true);\n        });\n      }\n    }\n\n    if (this.items.length > 0) {\n      this.slideItems = this.items;\n      this.items.forEach(function (item, index) {\n        _this.renderSlide(item, item.template, index, itemsContainer);\n      });\n    } else if (this.dataSource.length > 0) {\n      this.slideItems = this.dataSource;\n      this.dataSource.forEach(function (item, index) {\n        _this.renderSlide(item, _this.itemTemplate, index, itemsContainer);\n      });\n    }\n\n    if (this.partialVisible && this.loop) {\n      if (this.items.length > 0) {\n        this.items.slice(0, 2).forEach(function (item, index) {\n          _this.renderSlide(item, item.template, index, itemsContainer, true);\n        });\n      } else if (this.dataSource.length > 0) {\n        this.dataSource.slice(0, 2).forEach(function (item, index) {\n          _this.renderSlide(item, _this.itemTemplate, index, itemsContainer, true);\n        });\n      }\n    }\n\n    this.renderTemplates();\n\n    if (this.partialVisible) {\n      itemsContainer.style.setProperty('--carousel-items-count', \"\" + itemsContainer.children.length);\n      var slideWidth = itemsContainer.firstElementChild.clientWidth;\n      var cloneCount = this.loop ? 2 : 0;\n      itemsContainer.style.transitionProperty = 'none';\n      itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + cloneCount);\n    }\n\n    this.autoSlide();\n    this.renderTouchActions();\n    this.renderKeyboardActions();\n  };\n\n  Carousel.prototype.getTranslateX = function (slideWidth, count) {\n    if (count === void 0) {\n      count = 1;\n    }\n\n    return this.enableRtl ? \"translateX(\" + slideWidth * count + \"px)\" : \"translateX(\" + -slideWidth * count + \"px)\";\n  };\n\n  Carousel.prototype.renderSlide = function (item, itemTemplate, index, container, isClone) {\n    if (isClone === void 0) {\n      isClone = false;\n    }\n\n    var itemEle = this.createElement('div', {\n      id: getUniqueID('carousel_item'),\n      className: CLS_ITEM$3 + \" \" + (item.cssClass ? item.cssClass : '') + \" \" + (this.selectedIndex === index && !isClone ? CLS_ACTIVE$2 : ''),\n      attrs: {\n        'aria-hidden': this.selectedIndex === index && !isClone ? 'false' : 'true',\n        'data-index': index.toString(),\n        'aria-role': 'group',\n        'aria-roledescription': 'slide'\n      }\n    });\n\n    if (isClone) {\n      itemEle.classList.add(CLS_CLONED);\n    }\n\n    if (!isNullOrUndefined(item.htmlAttributes)) {\n      this.setHtmlAttributes(item.htmlAttributes, itemEle);\n    }\n\n    var templateId = this.element.id + '_template';\n    var template = this.templateParser(itemTemplate)(item, this, 'itemTemplate', templateId, false);\n    append(template, itemEle);\n    container.appendChild(itemEle);\n  };\n\n  Carousel.prototype.renderNavigators = function () {\n    if (this.buttonsVisibility === 'Hidden') {\n      return;\n    }\n\n    var navigators = this.createElement('div', {\n      className: CLS_NAVIGATORS\n    });\n    var itemsContainer = this.element.querySelector(\".\" + CLS_SLIDE_CONTAINER);\n    itemsContainer.insertAdjacentElement('afterend', navigators);\n\n    if (!isNullOrUndefined(this.slideItems) && this.slideItems.length > 1) {\n      this.renderNavigatorButton('Previous');\n      this.renderNavigatorButton('Next');\n    }\n\n    this.renderTemplates();\n  };\n\n  Carousel.prototype.renderNavigatorButton = function (direction) {\n    var buttonContainer = this.createElement('div', {\n      className: (direction === 'Previous' ? CLS_PREVIOUS : CLS_NEXT) + ' ' + (this.buttonsVisibility === 'VisibleOnHover' ? CLS_HOVER_ARROWS : '')\n    });\n\n    if (direction === 'Previous' && this.previousButtonTemplate) {\n      addClass([buttonContainer], CLS_TEMPLATE$2);\n      var templateId = this.element.id + '_previousButtonTemplate';\n      var template = this.templateParser(this.previousButtonTemplate)({\n        type: 'Previous'\n      }, this, 'previousButtonTemplate', templateId, false);\n      append(template, buttonContainer);\n    } else if (direction === 'Next' && this.nextButtonTemplate) {\n      addClass([buttonContainer], CLS_TEMPLATE$2);\n      var templateId = this.element.id + '_nextButtonTemplate';\n      var template = this.templateParser(this.nextButtonTemplate)({\n        type: 'Next'\n      }, this, 'nextButtonTemplate', templateId, false);\n      append(template, buttonContainer);\n    } else {\n      var button = this.createElement('button', {\n        attrs: {\n          'aria-label': this.localeObj.getConstant(direction === 'Previous' ? 'previousSlide' : 'nextSlide'),\n          'type': 'button'\n        }\n      });\n      var buttonObj = new Button({\n        cssClass: CLS_FLAT + ' ' + CLS_ROUND + ' ' + (direction === 'Previous' ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON),\n        iconCss: CLS_ICON$1 + ' ' + (direction === 'Previous' ? CLS_PREV_ICON : CLS_NEXT_ICON),\n        enableRtl: this.enableRtl,\n        disabled: !this.loop && this.selectedIndex === (direction === 'Previous' ? 0 : this.slideItems.length - 1)\n      });\n      buttonObj.appendTo(button);\n      buttonContainer.appendChild(button);\n    }\n\n    this.element.querySelector('.' + CLS_NAVIGATORS).appendChild(buttonContainer);\n    EventHandler.add(buttonContainer, 'click', this.navigatorClickHandler, this);\n  };\n\n  Carousel.prototype.renderPlayButton = function () {\n    if (isNullOrUndefined(this.slideItems) || this.buttonsVisibility === 'Hidden' || !this.showPlayButton || this.slideItems.length <= 1) {\n      return;\n    }\n\n    var playPauseWrap = this.createElement('div', {\n      className: CLS_PLAY_PAUSE + ' ' + (this.buttonsVisibility === 'VisibleOnHover' ? CLS_HOVER_ARROWS : '')\n    });\n\n    if (this.playButtonTemplate) {\n      addClass([playPauseWrap], CLS_TEMPLATE$2);\n      var templateId = this.element.id + '_playButtonTemplate';\n      var template = this.templateParser(this.playButtonTemplate)({}, this, 'playButtonTemplate', templateId, false);\n      append(template, playPauseWrap);\n    } else {\n      var playButton = this.createElement('button', {\n        attrs: {\n          'aria-label': this.localeObj.getConstant(this.autoPlay ? 'pauseSlideTransition' : 'playSlideTransition'),\n          'type': 'button'\n        }\n      });\n      var isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;\n      var buttonObj = new Button({\n        cssClass: CLS_FLAT + ' ' + CLS_ROUND + ' ' + CLS_PLAY_BUTTON,\n        iconCss: CLS_ICON$1 + ' ' + (this.autoPlay && !isLastSlide ? CLS_PAUSE_ICON : CLS_PLAY_ICON),\n        isToggle: true,\n        enableRtl: this.enableRtl\n      });\n\n      if (isLastSlide) {\n        this.setProperties({\n          autoPlay: false\n        }, true);\n        playButton.setAttribute('aria-label', this.localeObj.getConstant('playSlideTransition'));\n        var itemsContainer = this.element.querySelector(\".\" + CLS_ITEMS$2);\n        itemsContainer.setAttribute('aria-live', 'polite');\n      }\n\n      buttonObj.appendTo(playButton);\n      playPauseWrap.appendChild(playButton);\n    }\n\n    var navigators = this.element.querySelector(\".\" + CLS_NAVIGATORS);\n    navigators.insertBefore(playPauseWrap, navigators.lastElementChild);\n    this.renderTemplates();\n    EventHandler.add(playPauseWrap, 'click', this.playButtonClickHandler, this);\n  };\n\n  Carousel.prototype.renderIndicators = function () {\n    var _this = this;\n\n    if (!this.showIndicators) {\n      return;\n    }\n\n    var indicatorWrap = this.createElement('div', {\n      className: CLS_INDICATORS\n    });\n    var indicatorBars = this.createElement('div', {\n      className: CLS_INDICATOR_BARS\n    });\n    indicatorWrap.appendChild(indicatorBars);\n\n    if (this.slideItems) {\n      this.slideItems.forEach(function (item, index) {\n        var indicatorBar = _this.createElement('div', {\n          className: CLS_INDICATOR_BAR + ' ' + (_this.selectedIndex === index ? CLS_ACTIVE$2 : ''),\n          attrs: {\n            'data-index': index.toString(),\n            'aria-current': _this.selectedIndex === index ? 'true' : 'false'\n          }\n        });\n\n        if (_this.indicatorsTemplate) {\n          addClass([indicatorBar], CLS_TEMPLATE$2);\n          var templateId = _this.element.id + '_indicatorsTemplate';\n\n          var template = _this.templateParser(_this.indicatorsTemplate)({\n            index: index,\n            selectedIndex: _this.selectedIndex\n          }, _this, 'indicatorsTemplate', templateId, false);\n\n          append(template, indicatorBar);\n        } else {\n          var indicator = _this.createElement('button', {\n            className: CLS_INDICATOR$1,\n            attrs: {\n              'type': 'button',\n              'aria-label': _this.localeObj.getConstant('slide') + ' ' + (index + 1) + ' ' + _this.localeObj.getConstant('of') + ' ' + _this.slideItems.length\n            }\n          });\n\n          indicatorBar.appendChild(indicator);\n          indicator.appendChild(_this.createElement('div', {}));\n          var buttonObj = new Button({\n            cssClass: 'e-flat e-small'\n          });\n          buttonObj.appendTo(indicator);\n        }\n\n        indicatorBars.appendChild(indicatorBar);\n        EventHandler.add(indicatorBar, 'click', _this.indicatorClickHandler, _this);\n      });\n    }\n\n    this.element.appendChild(indicatorWrap);\n  };\n\n  Carousel.prototype.renderKeyboardActions = function () {\n    this.keyModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyHandler.bind(this),\n      keyConfigs: this.keyConfigs\n    });\n  };\n\n  Carousel.prototype.renderTouchActions = function () {\n    if (!this.enableTouchSwipe) {\n      return;\n    }\n\n    this.touchModule = new Touch(this.element, {\n      swipe: this.swipeHandler.bind(this)\n    });\n  };\n\n  Carousel.prototype.applyAnimation = function () {\n    removeClass([this.element], [CLS_CUSTOM_ANIMATION, CLS_FADE_ANIMATION, CLS_SLIDE_ANIMATION, CLS_ANIMATION_NONE]);\n\n    switch (this.animationEffect) {\n      case 'Slide':\n        addClass([this.element], CLS_SLIDE_ANIMATION);\n        break;\n\n      case 'Fade':\n        addClass([this.element], CLS_FADE_ANIMATION);\n        break;\n\n      case 'None':\n        addClass([this.element], CLS_ANIMATION_NONE);\n        break;\n\n      case 'Custom':\n        addClass([this.element], CLS_CUSTOM_ANIMATION);\n        break;\n    }\n  };\n\n  Carousel.prototype.autoSlide = function () {\n    if (isNullOrUndefined(this.slideItems) || this.slideItems.length <= 1) {\n      return;\n    }\n\n    this.resetSlideInterval();\n    this.applySlideInterval();\n  };\n\n  Carousel.prototype.autoSlideChange = function () {\n    var activeSlide = this.element.querySelector(\".\" + CLS_ACTIVE$2);\n\n    if (isNullOrUndefined(activeSlide)) {\n      return;\n    }\n\n    var activeIndex = parseInt(activeSlide.dataset.index, 10);\n\n    if (!this.loop && activeIndex === this.slideItems.length - 1) {\n      this.resetSlideInterval();\n    } else {\n      var index = (activeIndex + 1) % this.slideItems.length;\n\n      if (!this.element.classList.contains(CLS_HOVER)) {\n        this.setActiveSlide(index, 'Next');\n      }\n\n      this.autoSlide();\n    }\n  };\n\n  Carousel.prototype.applySlideInterval = function () {\n    var _this = this;\n\n    if (!this.autoPlay || this.element.classList.contains(CLS_HOVER)) {\n      return;\n    }\n\n    var itemInterval = this.interval;\n\n    if (this.items.length > 0 && !isNullOrUndefined(this.items[this.selectedIndex].interval)) {\n      itemInterval = this.items[this.selectedIndex].interval;\n    }\n\n    this.autoSlideInterval = setInterval(function () {\n      return _this.autoSlideChange();\n    }, itemInterval);\n  };\n\n  Carousel.prototype.resetSlideInterval = function () {\n    clearInterval(this.autoSlideInterval);\n    this.autoSlideInterval = null;\n  };\n\n  Carousel.prototype.getSlideIndex = function (direction) {\n    var currentIndex = this.selectedIndex;\n\n    if (direction === 'Previous') {\n      currentIndex--;\n\n      if (currentIndex < 0) {\n        currentIndex = this.slideItems.length - 1;\n      }\n    } else {\n      currentIndex++;\n\n      if (currentIndex === this.slideItems.length) {\n        currentIndex = 0;\n      }\n    }\n\n    return currentIndex;\n  };\n\n  Carousel.prototype.setActiveSlide = function (currentIndex, direction, isSwiped) {\n    var _this = this;\n\n    if (isSwiped === void 0) {\n      isSwiped = false;\n    }\n\n    if (this.element.querySelectorAll(\".\" + CLS_ITEM$3 + \".\" + CLS_PREV_SLIDE + \",.\" + CLS_ITEM$3 + \".\" + CLS_NEXT_SLIDE).length > 0) {\n      return;\n    }\n\n    var allSlides = [].slice.call(this.element.querySelectorAll(\".\" + CLS_ITEM$3 + \":not(.e-cloned)\"));\n    var activeSlide = this.element.querySelector(\".\" + CLS_ITEM$3 + \".\" + CLS_ACTIVE$2);\n\n    if (isNullOrUndefined(activeSlide) && this.showIndicators) {\n      var activeIndicator = this.element.querySelector(\".\" + CLS_INDICATOR_BAR + \".\" + CLS_ACTIVE$2);\n      var activeIndex_1 = parseInt(activeIndicator.dataset.index, 10);\n      addClass([allSlides[parseInt(activeIndex_1.toString(), 10)]], CLS_ACTIVE$2);\n      return;\n    } else if (isNullOrUndefined(activeSlide)) {\n      addClass([allSlides[parseInt(currentIndex.toString(), 10)]], CLS_ACTIVE$2);\n      return;\n    }\n\n    var activeIndex = parseInt(activeSlide.dataset.index, 10);\n    var currentSlide = allSlides[parseInt(currentIndex.toString(), 10)];\n    var eventArgs = {\n      currentIndex: activeIndex,\n      nextIndex: currentIndex,\n      currentSlide: activeSlide,\n      nextSlide: currentSlide,\n      slideDirection: direction,\n      isSwiped: isSwiped,\n      cancel: false\n    };\n    this.trigger('slideChanging', eventArgs, function (args) {\n      if (args.cancel) {\n        return;\n      }\n\n      _this.setProperties({\n        selectedIndex: currentIndex\n      }, true);\n\n      attributes(args.currentSlide, {\n        'aria-hidden': 'true'\n      });\n      attributes(args.nextSlide, {\n        'aria-hidden': 'false'\n      });\n      var slideIndicators = [].slice.call(_this.element.querySelectorAll(\".\" + CLS_INDICATOR_BAR));\n\n      if (slideIndicators.length > 0) {\n        attributes(slideIndicators[parseInt(activeIndex.toString(), 10)], {\n          'aria-current': 'false'\n        });\n        attributes(slideIndicators[parseInt(currentIndex.toString(), 10)], {\n          'aria-current': 'true'\n        });\n        removeClass(slideIndicators, CLS_ACTIVE$2);\n        addClass([slideIndicators[parseInt(currentIndex.toString(), 10)]], CLS_ACTIVE$2);\n      }\n\n      _this.slideChangedEventArgs = {\n        currentIndex: args.nextIndex,\n        previousIndex: args.currentIndex,\n        currentSlide: args.nextSlide,\n        previousSlide: args.currentSlide,\n        slideDirection: direction,\n        isSwiped: isSwiped\n      };\n\n      if (_this.partialVisible) {\n        var container = _this.element.querySelector('.' + CLS_ITEMS$2);\n\n        var slideWidth = allSlides[parseInt(currentIndex.toString(), 10)].clientWidth;\n        container.style.transitionProperty = 'transform';\n\n        if (_this.loop) {\n          if (_this.slideChangedEventArgs.currentIndex === 0 && _this.slideChangedEventArgs.slideDirection === 'Next') {\n            container.style.transform = _this.getTranslateX(slideWidth, allSlides.length + 2);\n          } else if (_this.slideChangedEventArgs.currentIndex === _this.slideItems.length - 1 && _this.slideChangedEventArgs.slideDirection === 'Previous') {\n            container.style.transform = _this.getTranslateX(slideWidth);\n          } else {\n            container.style.transform = _this.getTranslateX(slideWidth, currentIndex + 2);\n          }\n        } else {\n          container.style.transform = _this.getTranslateX(slideWidth, currentIndex);\n        }\n      }\n\n      if (_this.animationEffect === 'Slide') {\n        if (direction === 'Previous') {\n          addClass([args.nextSlide], CLS_PREV_SLIDE);\n          args.nextSlide.setAttribute('data-slide-height', args.nextSlide.offsetHeight.toString());\n          addClass([args.currentSlide, args.nextSlide], CLS_TRANSITION_END);\n        } else {\n          addClass([args.nextSlide], CLS_NEXT_SLIDE);\n          args.nextSlide.setAttribute('data-slide-height', args.nextSlide.offsetHeight.toString());\n          addClass([args.currentSlide, args.nextSlide], CLS_TRANSITION_START);\n        }\n      } else if (_this.animationEffect === 'Fade') {\n        removeClass([args.currentSlide], CLS_ACTIVE$2);\n        addClass([args.nextSlide], CLS_ACTIVE$2);\n      } else if (_this.animationEffect === 'Custom') {\n        if (direction === 'Previous') {\n          addClass([args.nextSlide], CLS_NEXT_SLIDE);\n          addClass([args.currentSlide], CLS_PREV_SLIDE);\n        } else {\n          addClass([args.currentSlide], CLS_PREV_SLIDE);\n          addClass([args.nextSlide], CLS_NEXT_SLIDE);\n        }\n      } else {\n        _this.onTransitionEnd();\n      }\n\n      _this.handleNavigatorsActions(currentIndex);\n    });\n  };\n\n  Carousel.prototype.onTransitionEnd = function () {\n    var _this = this;\n\n    if (this.slideChangedEventArgs) {\n      if (this.partialVisible && this.loop && (this.slideChangedEventArgs.currentIndex === 0 && this.slideChangedEventArgs.slideDirection === 'Next' || this.slideChangedEventArgs.currentIndex === this.slideItems.length - 1 && this.slideChangedEventArgs.slideDirection === 'Previous')) {\n        var container = this.element.querySelector('.' + CLS_ITEMS$2);\n        var slideWidth = this.slideChangedEventArgs.currentSlide.clientWidth;\n        container.style.transitionProperty = 'none';\n        container.style.transform = this.getTranslateX(slideWidth, this.slideChangedEventArgs.currentIndex + 2);\n      }\n\n      addClass([this.slideChangedEventArgs.currentSlide], CLS_ACTIVE$2);\n      removeClass([this.slideChangedEventArgs.previousSlide], CLS_ACTIVE$2);\n      this.trigger('slideChanged', this.slideChangedEventArgs, function () {\n        removeClass(_this.element.querySelectorAll(\".\" + CLS_ITEM$3), [CLS_PREV_SLIDE, CLS_NEXT_SLIDE, CLS_TRANSITION_START, CLS_TRANSITION_END]);\n        _this.slideChangedEventArgs = null;\n      });\n    }\n  };\n\n  Carousel.prototype.setHtmlAttributes = function (attribute, element) {\n    var keys = Object.keys(attribute);\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n\n      if (key === 'class') {\n        addClass([element], attribute[\"\" + key]);\n      } else {\n        element.setAttribute(key, attribute[\"\" + key]);\n      }\n    }\n  };\n\n  Carousel.prototype.templateParser = function (template) {\n    if (template) {\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        } else {\n          return compile(template);\n        }\n      } catch (error) {\n        return compile(template);\n      }\n    }\n\n    return undefined;\n  };\n\n  Carousel.prototype.getNavigatorState = function (target, isPrevious) {\n    var button = target.querySelector(\".\" + (isPrevious ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON));\n\n    if (button) {\n      var buttonObj = getInstance(button, Button);\n      return buttonObj.disabled;\n    }\n\n    return false;\n  };\n\n  Carousel.prototype.navigatorClickHandler = function (e) {\n    var target = e.currentTarget;\n    var isDisabled = this.getNavigatorState(target, target.classList.contains(CLS_PREVIOUS));\n\n    if (isDisabled) {\n      return;\n    }\n\n    var direction = target.classList.contains(CLS_PREVIOUS) ? 'Previous' : 'Next';\n    this.setActiveSlide(this.getSlideIndex(direction), direction);\n    this.autoSlide();\n  };\n\n  Carousel.prototype.indicatorClickHandler = function (e) {\n    var target = closest(e.target, \".\" + CLS_INDICATOR_BAR);\n    var index = parseInt(target.dataset.index, 10);\n\n    if (this.selectedIndex !== index) {\n      this.setActiveSlide(index, this.selectedIndex > index ? 'Previous' : 'Next');\n      this.autoSlide();\n    }\n  };\n\n  Carousel.prototype.playButtonClickHandler = function (e, isPropertyChange) {\n    if (isPropertyChange === void 0) {\n      isPropertyChange = false;\n    }\n\n    var playButton = this.element.querySelector(\".\" + CLS_PLAY_BUTTON);\n\n    if (playButton) {\n      var buttonObj = getInstance(playButton, Button);\n\n      if (!isPropertyChange) {\n        this.setProperties({\n          autoPlay: !this.autoPlay\n        }, true);\n      }\n\n      playButton.setAttribute('aria-label', this.localeObj.getConstant(this.autoPlay ? 'pauseSlideTransition' : 'playSlideTransition'));\n      buttonObj.iconCss = CLS_ICON$1 + ' ' + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);\n      buttonObj.dataBind();\n      var itemsContainer = this.element.querySelector(\".\" + CLS_ITEMS$2);\n      itemsContainer.setAttribute('aria-live', this.autoPlay ? 'off' : 'polite');\n\n      if (this.autoPlay && !this.loop && this.selectedIndex === this.slideItems.length - 1) {\n        this.setActiveSlide(0, 'Next');\n      }\n\n      this.autoSlide();\n    }\n  };\n\n  Carousel.prototype.keyHandler = function (e) {\n    var direction;\n    var slideIndex;\n    var isSlideTransition = false;\n    var target = e.target;\n    e.preventDefault();\n\n    switch (e.action) {\n      case 'space':\n        if (this.showIndicators && target.classList.contains(CLS_INDICATOR$1)) {\n          target.click();\n        } else if (target.classList.contains(CLS_CAROUSEL) || target.classList.contains(CLS_PLAY_BUTTON)) {\n          this.playButtonClickHandler(e);\n        } else if (target.classList.contains(CLS_NEXT_BUTTON)) {\n          this.next();\n        } else if (target.classList.contains(CLS_PREV_BUTTON)) {\n          this.prev();\n        }\n\n        break;\n\n      case 'end':\n        slideIndex = this.slideItems.length - 1;\n        direction = 'Next';\n        isSlideTransition = true;\n        break;\n\n      case 'home':\n        slideIndex = 0;\n        direction = 'Previous';\n        isSlideTransition = true;\n        break;\n\n      case 'moveUp':\n      case 'moveLeft':\n      case 'moveDown':\n      case 'moveRight':\n        if (this.showIndicators && isNullOrUndefined(this.indicatorsTemplate)) {\n          this.element.focus();\n        }\n\n        direction = e.action === 'moveUp' || e.action === 'moveLeft' ? 'Previous' : 'Next';\n        slideIndex = this.getSlideIndex(direction);\n        isSlideTransition = !this.isSuspendSlideTransition(slideIndex, direction);\n        break;\n    }\n\n    if (isSlideTransition) {\n      this.setActiveSlide(slideIndex, direction);\n      this.autoSlide();\n      isSlideTransition = false;\n    }\n  };\n\n  Carousel.prototype.swipeHandler = function (e) {\n    if (this.element.classList.contains(CLS_HOVER) || isNullOrUndefined(this.slideItems) || this.slideItems.length <= 1) {\n      return;\n    }\n\n    var direction = e.swipeDirection === 'Right' ? 'Previous' : 'Next';\n    var slideIndex = this.getSlideIndex(direction);\n\n    if (!this.isSuspendSlideTransition(slideIndex, direction)) {\n      this.setActiveSlide(slideIndex, direction, true);\n      this.autoSlide();\n    }\n  };\n\n  Carousel.prototype.isSuspendSlideTransition = function (index, direction) {\n    return !this.loop && (direction === 'Next' && index === 0 || direction === 'Previous' && index === this.slideItems.length - 1);\n  };\n\n  Carousel.prototype.handleNavigatorsActions = function (index) {\n    if (this.buttonsVisibility === 'Hidden') {\n      return;\n    }\n\n    if (this.showPlayButton) {\n      var playButton = this.element.querySelector(\".\" + CLS_PLAY_BUTTON);\n      var isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;\n      var isButtonUpdate = isNullOrUndefined(this.playButtonTemplate) && playButton && isLastSlide;\n\n      if (isNullOrUndefined(this.playButtonTemplate) && playButton && !isLastSlide) {\n        isButtonUpdate = !playButton.classList.contains(CLS_ACTIVE$2);\n      }\n\n      if (isButtonUpdate) {\n        this.setProperties({\n          autoPlay: !isLastSlide\n        }, true);\n        playButton.setAttribute('aria-label', this.localeObj.getConstant(this.autoPlay ? 'pauseSlideTransition' : 'playSlideTransition'));\n        var itemsContainer = this.element.querySelector(\".\" + CLS_ITEMS$2);\n        itemsContainer.setAttribute('aria-live', this.autoPlay ? 'off' : 'polite');\n        var buttonObj = getInstance(playButton, Button);\n        buttonObj.iconCss = CLS_ICON$1 + ' ' + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);\n        buttonObj.dataBind();\n      }\n    }\n\n    var prevButton = this.element.querySelector(\".\" + CLS_PREV_BUTTON);\n\n    if (prevButton && isNullOrUndefined(this.previousButtonTemplate)) {\n      var buttonObj = getInstance(prevButton, Button);\n      buttonObj.disabled = !this.loop && index === 0;\n      buttonObj.dataBind();\n    }\n\n    var nextButton = this.element.querySelector(\".\" + CLS_NEXT_BUTTON);\n\n    if (nextButton && isNullOrUndefined(this.nextButtonTemplate)) {\n      var buttonObj = getInstance(nextButton, Button);\n      buttonObj.disabled = !this.loop && index === this.slideItems.length - 1;\n      buttonObj.dataBind();\n    }\n  };\n\n  Carousel.prototype.onHoverActions = function (e) {\n    var navigator = this.element.querySelector(\".\" + CLS_NAVIGATORS);\n\n    switch (e.type) {\n      case 'mouseenter':\n        if (this.buttonsVisibility === 'VisibleOnHover' && navigator) {\n          removeClass([].slice.call(navigator.childNodes), CLS_HOVER_ARROWS);\n        }\n\n        if (this.pauseOnHover) {\n          addClass([this.element], CLS_HOVER);\n        }\n\n        break;\n\n      case 'mouseleave':\n        if (this.buttonsVisibility === 'VisibleOnHover' && navigator) {\n          addClass([].slice.call(navigator.childNodes), CLS_HOVER_ARROWS);\n        }\n\n        removeClass([this.element], CLS_HOVER);\n        break;\n    }\n\n    this.autoSlide();\n  };\n\n  Carousel.prototype.onFocusActions = function (e) {\n    switch (e.type) {\n      case 'focusin':\n        addClass([this.element], CLS_HOVER);\n        break;\n\n      case 'focusout':\n        removeClass([this.element], CLS_HOVER);\n        break;\n    }\n\n    this.autoSlide();\n  };\n\n  Carousel.prototype.destroyButtons = function () {\n    var buttonCollections = [].slice.call(this.element.querySelectorAll('.e-control.e-btn'));\n\n    for (var _i = 0, buttonCollections_1 = buttonCollections; _i < buttonCollections_1.length; _i++) {\n      var button = buttonCollections_1[_i];\n      var instance = getInstance(button, Button);\n\n      if (instance) {\n        instance.destroy();\n      }\n    }\n  };\n\n  Carousel.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'focusin focusout', this.onFocusActions, this);\n    EventHandler.add(this.element, 'mouseenter mouseleave', this.onHoverActions, this);\n    EventHandler.add(this.element.firstElementChild, 'animationend', this.onTransitionEnd, this);\n    EventHandler.add(this.element.firstElementChild, 'transitionend', this.onTransitionEnd, this);\n  };\n\n  Carousel.prototype.unWireEvents = function () {\n    var _this = this;\n\n    var indicators = [].slice.call(this.element.querySelectorAll(\".\" + CLS_INDICATOR_BAR));\n    indicators.forEach(function (indicator) {\n      EventHandler.remove(indicator, 'click', _this.indicatorClickHandler);\n    });\n    var navigators = [].slice.call(this.element.querySelectorAll(\".\" + CLS_PREVIOUS + \",.\" + CLS_NEXT));\n    navigators.forEach(function (navigator) {\n      EventHandler.remove(navigator, 'click', _this.navigatorClickHandler);\n    });\n    var playIcon = this.element.querySelector(\".\" + CLS_PLAY_PAUSE);\n\n    if (playIcon) {\n      EventHandler.remove(playIcon, 'click', this.playButtonClickHandler);\n    }\n\n    EventHandler.remove(this.element.firstElementChild, 'animationend', this.onTransitionEnd);\n    EventHandler.remove(this.element.firstElementChild, 'transitionend', this.onTransitionEnd);\n    EventHandler.clearEvents(this.element);\n  };\n  /**\r\n   * Method to transit from the current slide to the previous slide.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  Carousel.prototype.prev = function () {\n    if (!this.loop && this.selectedIndex === 0) {\n      return;\n    }\n\n    var index = this.selectedIndex === 0 ? this.slideItems.length - 1 : this.selectedIndex - 1;\n    this.setActiveSlide(index, 'Previous');\n    this.autoSlide();\n  };\n  /**\r\n   * Method to transit from the current slide to the next slide.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  Carousel.prototype.next = function () {\n    if (!this.loop && this.selectedIndex === this.slideItems.length - 1) {\n      return;\n    }\n\n    var index = this.selectedIndex === this.slideItems.length - 1 ? 0 : this.selectedIndex + 1;\n    this.setActiveSlide(index, 'Next');\n    this.autoSlide();\n  };\n  /**\r\n   * Method to play the slides programmatically.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  Carousel.prototype.play = function () {\n    var playIcon = this.element.querySelector(\".\" + CLS_PLAY_ICON);\n\n    if (this.showPlayButton && playIcon) {\n      classList(playIcon, [CLS_PAUSE_ICON], [CLS_PLAY_ICON]);\n      var playButton = this.element.querySelector(\".\" + CLS_PLAY_BUTTON);\n      playButton.setAttribute('aria-label', this.localeObj.getConstant('pauseSlideTransition'));\n    }\n\n    this.setProperties({\n      autoPlay: true\n    }, true);\n    var itemsContainer = this.element.querySelector(\".\" + CLS_ITEMS$2);\n    itemsContainer.setAttribute('aria-live', 'off');\n    this.applySlideInterval();\n  };\n  /**\r\n   * Method to pause the slides programmatically.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  Carousel.prototype.pause = function () {\n    var pauseIcon = this.element.querySelector(\".\" + CLS_PAUSE_ICON);\n\n    if (this.showPlayButton && pauseIcon) {\n      var playButton = this.element.querySelector(\".\" + CLS_PLAY_BUTTON);\n      playButton.setAttribute('aria-label', this.localeObj.getConstant('playSlideTransition'));\n      classList(pauseIcon, [CLS_PLAY_ICON], [CLS_PAUSE_ICON]);\n    }\n\n    this.setProperties({\n      autoPlay: false\n    }, true);\n    var itemsContainer = this.element.querySelector(\".\" + CLS_ITEMS$2);\n    itemsContainer.setAttribute('aria-live', 'off');\n    this.resetSlideInterval();\n  };\n  /**\r\n   * Method to render react and angular templates\r\n   *\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  Carousel.prototype.renderTemplates = function () {\n    if (this.isAngular || this.isReact) {\n      this.renderReactTemplates();\n    }\n  };\n  /**\r\n   * Method to reset react and angular templates\r\n   *\r\n   * @param {string[]} templates Accepts the template ID\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  Carousel.prototype.resetTemplates = function (templates) {\n    if (this.isAngular || this.isReact) {\n      this.clearTemplate(templates);\n    }\n  };\n  /**\r\n   * Method for destroy the carousel component.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  Carousel.prototype.destroy = function () {\n    var _this = this;\n\n    this.resetTemplates();\n\n    if (this.touchModule) {\n      this.touchModule.destroy();\n      this.touchModule = null;\n    }\n\n    this.keyModule.destroy();\n    this.keyModule = null;\n    this.resetSlideInterval();\n    this.destroyButtons();\n    this.unWireEvents();\n    [].slice.call(this.element.children).forEach(function (ele) {\n      _this.element.removeChild(ele);\n    });\n    removeClass([this.element], [CLS_CAROUSEL, this.cssClass, CLS_RTL$5]);\n    ['tabindex', 'role', 'style'].forEach(function (attr) {\n      _this.element.removeAttribute(attr);\n    });\n\n    _super.prototype.destroy.call(this);\n  };\n\n  __decorate$11([Collection([], CarouselItem)], Carousel.prototype, \"items\", void 0);\n\n  __decorate$11([Property('Slide')], Carousel.prototype, \"animationEffect\", void 0);\n\n  __decorate$11([Property()], Carousel.prototype, \"previousButtonTemplate\", void 0);\n\n  __decorate$11([Property()], Carousel.prototype, \"nextButtonTemplate\", void 0);\n\n  __decorate$11([Property()], Carousel.prototype, \"indicatorsTemplate\", void 0);\n\n  __decorate$11([Property()], Carousel.prototype, \"playButtonTemplate\", void 0);\n\n  __decorate$11([Property()], Carousel.prototype, \"cssClass\", void 0);\n\n  __decorate$11([Property([])], Carousel.prototype, \"dataSource\", void 0);\n\n  __decorate$11([Property()], Carousel.prototype, \"itemTemplate\", void 0);\n\n  __decorate$11([Property(0)], Carousel.prototype, \"selectedIndex\", void 0);\n\n  __decorate$11([Property('100%')], Carousel.prototype, \"width\", void 0);\n\n  __decorate$11([Property('100%')], Carousel.prototype, \"height\", void 0);\n\n  __decorate$11([Property(5000)], Carousel.prototype, \"interval\", void 0);\n\n  __decorate$11([Property(true)], Carousel.prototype, \"autoPlay\", void 0);\n\n  __decorate$11([Property(true)], Carousel.prototype, \"pauseOnHover\", void 0);\n\n  __decorate$11([Property(true)], Carousel.prototype, \"loop\", void 0);\n\n  __decorate$11([Property(false)], Carousel.prototype, \"showPlayButton\", void 0);\n\n  __decorate$11([Property(true)], Carousel.prototype, \"enableTouchSwipe\", void 0);\n\n  __decorate$11([Property(true)], Carousel.prototype, \"showIndicators\", void 0);\n\n  __decorate$11([Property('Visible')], Carousel.prototype, \"buttonsVisibility\", void 0);\n\n  __decorate$11([Property(false)], Carousel.prototype, \"partialVisible\", void 0);\n\n  __decorate$11([Property()], Carousel.prototype, \"htmlAttributes\", void 0);\n\n  __decorate$11([Event()], Carousel.prototype, \"slideChanging\", void 0);\n\n  __decorate$11([Event()], Carousel.prototype, \"slideChanged\", void 0);\n\n  Carousel = __decorate$11([NotifyPropertyChanges], Carousel);\n  return Carousel;\n}(Component);\n/** Carousel export modules */\n\n\nvar __extends$12 = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate$12 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; // Constant variables\n\n\nvar CLS_APPBAR = 'e-appbar';\nvar CLS_HORIZONTAL_BOTTOM = 'e-horizontal-bottom';\nvar CLS_STICKY = 'e-sticky';\nvar CLS_PROMINENT = 'e-prominent';\nvar CLS_DENSE = 'e-dense';\nvar CLS_RTL$6 = 'e-rtl';\nvar CLS_LIGHT = 'e-light';\nvar CLS_DARK = 'e-dark';\nvar CLS_PRIMARY = 'e-primary';\nvar CLS_INHERIT = 'e-inherit';\n/**\r\n * The AppBar displays the information and actions related to the current application screen. It is used to show branding, screen titles, navigation, and actions.\r\n * Support to inherit colors from AppBar provided to <c>Button</c>, <c>DropDownButton</c>, <c>Menu</c> and <c>TextBox</c>.\r\n * Set <c>CssClass</c> property with <code>e-inherit</code> CSS class to inherit the background and color from AppBar.\r\n */\n\nvar AppBar =\n/** @__PURE__ @class */\nfunction (_super) {\n  __extends$12(AppBar, _super);\n  /**\r\n   * Constructor for creating the AppBar widget\r\n   *\r\n   * @param {AppBarModel} options Accepts the AppBar model properties to initiate the rendering\r\n   * @param {string | HTMLElement} element Accepts the DOM element reference\r\n   */\n\n\n  function AppBar(options, element) {\n    return _super.call(this, options, element) || this;\n  }\n  /**\r\n   * Removes the control from the DOM and also removes all its related events.\r\n   *\r\n   * @returns {void}\r\n   */\n\n\n  AppBar.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.element.classList.remove(CLS_APPBAR);\n    this.element.removeAttribute('style');\n    this.element.removeAttribute('role');\n  };\n\n  AppBar.prototype.getModuleName = function () {\n    return 'appbar';\n  };\n\n  AppBar.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n\n  AppBar.prototype.preRender = function () {// pre render code\n  };\n\n  AppBar.prototype.render = function () {\n    if (this.element.tagName !== 'HEADER') {\n      this.element.setAttribute('role', 'header');\n    }\n\n    if (this.cssClass) {\n      addClass([this.element], this.cssClass.split(' '));\n    }\n\n    if (this.position === 'Bottom') {\n      this.element.classList.add(CLS_HORIZONTAL_BOTTOM);\n    }\n\n    if (this.isSticky) {\n      this.element.classList.add(CLS_STICKY);\n    }\n\n    if (this.enableRtl) {\n      this.element.classList.add(CLS_RTL$6);\n    }\n\n    this.setHeightMode();\n    this.setColorMode();\n\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      this.setHtmlAttributes(this.htmlAttributes, this.element);\n    }\n  };\n\n  AppBar.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'mode':\n          removeClass([this.element], [CLS_DENSE, CLS_PROMINENT]);\n          this.setHeightMode();\n          break;\n\n        case 'position':\n          if (this.position === 'Bottom') {\n            addClass([this.element], CLS_HORIZONTAL_BOTTOM);\n          } else {\n            removeClass([this.element], CLS_HORIZONTAL_BOTTOM);\n          }\n\n          break;\n\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([this.element], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([this.element], newProp.cssClass.split(' '));\n          }\n\n          break;\n\n        case 'isSticky':\n          if (this.isSticky) {\n            addClass([this.element], CLS_STICKY);\n          } else {\n            removeClass([this.element], CLS_STICKY);\n          }\n\n          break;\n\n        case 'htmlAttributes':\n          if (!isNullOrUndefined(this.htmlAttributes)) {\n            if (!isNullOrUndefined(oldProp.htmlAttributes)) {\n              var keys = Object.keys(oldProp.htmlAttributes);\n\n              for (var _b = 0, keys_1 = keys; _b < keys_1.length; _b++) {\n                var key = keys_1[_b];\n\n                if (key === 'class') {\n                  removeClass([this.element], oldProp.htmlAttributes[\"\" + key]);\n                } else {\n                  this.element.removeAttribute(key);\n                }\n              }\n            }\n\n            this.setHtmlAttributes(newProp.htmlAttributes, this.element);\n          }\n\n          break;\n\n        case 'colorMode':\n          removeClass([this.element], [CLS_DARK, CLS_PRIMARY, CLS_INHERIT, CLS_LIGHT]);\n          this.setColorMode();\n          break;\n\n        case 'enableRtl':\n          if (this.enableRtl) {\n            addClass([this.element], CLS_RTL$6);\n          } else {\n            removeClass([this.element], CLS_RTL$6);\n          }\n\n          break;\n      }\n    }\n  };\n\n  AppBar.prototype.setHtmlAttributes = function (attribute, element) {\n    var keys = Object.keys(attribute);\n\n    for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n      var key = keys_2[_i];\n\n      if (key === 'class') {\n        addClass([element], attribute[\"\" + key]);\n      } else {\n        element.setAttribute(key, attribute[\"\" + key]);\n      }\n    }\n  };\n\n  AppBar.prototype.setHeightMode = function () {\n    if (this.mode === 'Prominent') {\n      this.element.classList.add(CLS_PROMINENT);\n    } else if (this.mode === 'Dense') {\n      this.element.classList.add(CLS_DENSE);\n    }\n  };\n\n  AppBar.prototype.setColorMode = function () {\n    switch (this.colorMode) {\n      case 'Light':\n        this.element.classList.add(CLS_LIGHT);\n        break;\n\n      case 'Dark':\n        this.element.classList.add(CLS_DARK);\n        break;\n\n      case 'Primary':\n        this.element.classList.add(CLS_PRIMARY);\n        break;\n\n      case 'Inherit':\n        this.element.classList.add(CLS_INHERIT);\n        break;\n    }\n  };\n\n  __decorate$12([Property('Regular')], AppBar.prototype, \"mode\", void 0);\n\n  __decorate$12([Property('Top')], AppBar.prototype, \"position\", void 0);\n\n  __decorate$12([Property()], AppBar.prototype, \"cssClass\", void 0);\n\n  __decorate$12([Property(false)], AppBar.prototype, \"isSticky\", void 0);\n\n  __decorate$12([Property()], AppBar.prototype, \"htmlAttributes\", void 0);\n\n  __decorate$12([Property('Light')], AppBar.prototype, \"colorMode\", void 0);\n\n  __decorate$12([Event()], AppBar.prototype, \"created\", void 0);\n\n  __decorate$12([Event()], AppBar.prototype, \"destroyed\", void 0);\n\n  AppBar = __decorate$12([NotifyPropertyChanges], AppBar);\n  return AppBar;\n}(Component);\n/** AppBar export modules */\n\n/**\r\n * Navigation all modules\r\n */\n\n\nexport { MenuAnimationSettings, MenuItem, FieldSettings, HScroll, VScroll, addScrolling, destroyScroll, Item, Toolbar, AccordionActionSettings, AccordionAnimationSettings, AccordionItem, Accordion, ContextMenu, Menu, TabActionSettings, TabAnimationSettings, Header, TabItem, Tab, FieldsSettings, ActionSettings, NodeAnimationSettings, TreeView, Sidebar, BreadcrumbOverflowMode, BreadcrumbItem, Breadcrumb, CarouselItem, Carousel, AppBar }; //# sourceMappingURL=ej2-navigations.es5.js.map","map":null,"metadata":{},"sourceType":"module"}