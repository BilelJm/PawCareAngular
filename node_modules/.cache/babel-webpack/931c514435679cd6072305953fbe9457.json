{"ast":null,"code":"import { setTemplateEngine, getTemplateEngine } from '@syncfusion/ej2-base';\nimport { setValue, getValue } from '@syncfusion/ej2-base';\nvar stringCompiler = getTemplateEngine();\n/**\r\n * Angular Template Compiler\r\n */\n\nexport function compile(templateEle, helper) {\n  if (typeof templateEle === 'string') {\n    return stringCompiler(templateEle, helper);\n  } else {\n    var contRef_1 = templateEle.elementRef.nativeElement._viewContainerRef;\n    var pName_1 = templateEle.elementRef.nativeElement.propName; //tslint:disable-next-line        \n\n    return function (data, component, propName) {\n      var context = {\n        $implicit: data\n      };\n      /* istanbul ignore next */\n\n      var conRef = contRef_1 ? contRef_1 : component.viewContainerRef;\n      var viewRef = conRef.createEmbeddedView(templateEle, context);\n\n      if (getValue('currentInstance.element.nodeName', conRef) === 'EJS-MENTION') {\n        viewRef.detectChanges();\n      } else {\n        viewRef.markForCheck();\n      }\n      /* istanbul ignore next */\n\n\n      var viewCollection = component && component.registeredTemplate ? component.registeredTemplate : getValue('currentInstance.registeredTemplate', conRef);\n      propName = propName && component.registeredTemplate ? propName : pName_1;\n\n      if (typeof viewCollection[propName] === 'undefined') {\n        viewCollection[propName] = [];\n      }\n\n      viewCollection[propName].push(viewRef);\n      return viewRef.rootNodes;\n    };\n  }\n}\n/**\r\n * Property decorator for angular.\r\n */\n\nexport function Template(defaultValue) {\n  return function (target, key) {\n    var propertyDescriptor = {\n      set: setter(key),\n      get: getter(key, defaultValue),\n      enumerable: true,\n      configurable: true\n    };\n    Object.defineProperty(target, key, propertyDescriptor);\n  };\n}\n\nfunction setter(key) {\n  return function (val) {\n    if (val === undefined) {\n      return;\n    }\n\n    setValue(key + 'Ref', val, this);\n\n    if (typeof val !== 'string') {\n      val.elementRef.nativeElement._viewContainerRef = this.viewContainerRef;\n      val.elementRef.nativeElement.propName = key;\n    } else {\n      if (this.saveChanges) {\n        this.saveChanges(key, val, undefined);\n        this.dataBind();\n      }\n    }\n  };\n}\n\nfunction getter(key, defaultValue) {\n  return function () {\n    /* istanbul ignore next */\n    return getValue(key + 'Ref', this) || defaultValue;\n  };\n} //tslint:disable-next-line\n\n\nsetTemplateEngine({\n  compile: compile\n});","map":null,"metadata":{},"sourceType":"module"}